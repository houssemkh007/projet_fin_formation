import * as React from 'react';
import { Input } from "./Input";
import { ensureEnum, brushToString, stringToBrush, ensureBool, NamePatcher, isValidProp, getModifiedProps } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { IgrInputGroupItem } from './igr-input-group-item';
import { IgrInputChangeEventArgs } from './igr-input-change-event-args';
import { ControlDisplayDensity_$type } from "igniteui-react-core";
import { IgrKeyEventArgs } from "igniteui-react-core";
let requiredStyle = `
.ig-input input::-ms-clear {
    display: none;
    width: 0;
    height: 0;
}

`;
let pending = [];
let checked = /*@__PURE__*/ new WeakMap(); // TODO why not WeakSet?
function ensureCss() {
    if (!document) {
        return;
    }
    if (checked.has(document)) {
        return;
    }
    injectCss(requiredStyle, "data-ig-input-style", () => {
        let temp = pending;
        pending = null;
        temp.forEach((v, i, a) => {
            //v.styleUpdated();
        });
    });
    checked.set(document, true);
}
function injectCss(style, attributeName, onload = null) {
    for (let i = 0; i < document.head.children.length; i++) {
        let child = document.head.children[i];
        if (child.tagName == "link" && child.hasAttribute(attributeName)) {
            return;
        }
    }
    let link = document.createElement("link");
    link.setAttribute('href', 'data:text/css;charset=UTF-8,' + encodeURIComponent(style));
    link.setAttribute('rel', 'stylesheet');
    link.setAttribute('type', 'text/css');
    link.setAttribute(attributeName, 'true');
    if (onload) {
        const onloadResolved = () => {
            link.onload = null;
            onload();
        };
        link.onload = onloadResolved;
    }
    document.head.appendChild(link);
}
export class IgrInput extends IgrInputGroupItem {
    constructor(props) {
        super(props);
        this._wrapper = null;
        this._keyDown = null;
        this._keyDown_wrapped = null;
        this._keyUp = null;
        this._keyUp_wrapped = null;
        this._keyPress = null;
        this._keyPress_wrapped = null;
        this._change = null;
        this._change_wrapped = null;
        this._changing = null;
        this._changing_wrapped = null;
        ensureCss();
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this._getMainRef = this._getMainRef.bind(this);
        var container;
        if (document) {
            container = document.createElement("div");
        }
        var root;
        root = container;
        if (container != null) {
            root = container;
        }
        this.requestRender = this.requestRender.bind(this);
        this._portalManager = new PortalManager("inputContent", this.requestRender);
        var ren = new ReactRenderer(root, document, true, {}, this._portalManager);
        this._wrapper = ren;
        this._container = this._wrapper.rootWrapper;
        this._container.setStyleProperty("display", "inline-block");
        this._container.setStyleProperty("vertical-align", "middle");
        var input = this.i;
        this._input = input;
        input.provideContainer(ren);
        if (props) {
            this.initializeProperties();
        }
    }
    _getMainRef(ref) {
        this._elRef = ref;
    }
    render() {
        let propChildren = this.props.children;
        let children = [];
        React.Children.forEach(propChildren, (ch) => {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        let div = React.createElement("div", {
            className: "ig-input igr-input",
            ref: this._getMainRef,
            children: children
        });
        return div;
    }
    requestRender() {
        if (this._initialized) {
            this.setState({});
        }
    }
    //private _getLabelPortal(element: DomWrapper, portalCallback: (portal: DomPortal) => void): void {
    //    this._portalManager.getPortal(element, "TemplateContent", portalCallback);
    //}
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    initializeProperties() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    // supports angular themes or custom properties set in CSS
    updateStyle() {
        this._styling(this._elRef, this);
    }
    componentWillUnmount() {
        this._input.destroy();
        this._wrapper.destroy();
    }
    componentDidMount() {
        this._elRef.appendChild(this._container.getNativeElement());
        this.initializeContent();
    }
    initializeContent() {
        this._styling(this._container.getNativeElement(), this);
        this.updateStyle();
    }
    createImplementation() {
        return new Input();
    }
    /**
                             * @hidden
                             */
    get i() {
        return this._implementation;
    }
    /**
 * Gets or sets the display density to use for the input.
*/
    get density() {
        return this.i.m;
    }
    set density(v) {
        this.i.m = ensureEnum(ControlDisplayDensity_$type, v);
    }
    /**
     * Gets the actual display density to use for the label.
    */
    get actualDensity() {
        return this.i.l;
    }
    set actualDensity(v) {
        this.i.l = ensureEnum(ControlDisplayDensity_$type, v);
    }
    /**
     * Gets/Sets the input mask for the input.
    */
    get mask() {
        return this.i.b5;
    }
    set mask(v) {
        this.i.b5 = v;
    }
    /**
     * Gets/Sets the character representing a fillable spot in the input mask
    */
    get promptChar() {
        return this.i.b9;
    }
    set promptChar(v) {
        this.i.b9 = v;
    }
    /**
     * Specifies if the bound value includes the formatting symbols.
    */
    get includeLiterals() {
        return this.i.ap;
    }
    set includeLiterals(v) {
        this.i.ap = ensureBool(v);
    }
    /**
     * Gets the actual color to use for the text color.
    */
    get actualTextColor() {
        return brushToString(this.i.dp);
    }
    set actualTextColor(v) {
        this.i.dp = stringToBrush(v);
    }
    /**
     * Gets the actual hover color to use for the text.
    */
    get actualHoverTextColor() {
        return brushToString(this.i.dn);
    }
    set actualHoverTextColor(v) {
        this.i.dn = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the text.
    */
    get textColor() {
        return brushToString(this.i.dt);
    }
    set textColor(v) {
        this.i.dt = stringToBrush(v);
    }
    /**
     * Gets or sets the use for the button.
    */
    get textStyle() {
        if (this.i.ac == null) {
            return null;
        }
        return this.i.ac.fontString;
    }
    set textStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.ac = fi;
    }
    /**
     * Gets or sets the type to use for the input.
    */
    get inputType() {
        return this.i.b0;
    }
    set inputType(v) {
        this.i.b0 = v;
    }
    /**
     * Gets or sets the placeholder to use for the input.
    */
    get placeholder() {
        return this.i.b7;
    }
    set placeholder(v) {
        this.i.b7 = v;
    }
    /**
     * Gets or sets the color to use for the hovered text of the button regardless of type.
    */
    get hoverTextColor() {
        return brushToString(this.i.ds);
    }
    set hoverTextColor(v) {
        this.i.ds = stringToBrush(v);
    }
    /**
     * Gets or sets the id to use for the checkbox.
    */
    get id() {
        return this.i.bx;
    }
    set id(v) {
        this.i.bx = v;
    }
    /**
     * Gets or sets TabIndex to use for the checkbox.
    */
    get tabIndex() {
        return this.i.a8;
    }
    set tabIndex(v) {
        this.i.a8 = +v;
    }
    /**
     * Gets or sets the for attribute to use for the input.
    */
    get for() {
        return this.i.bu;
    }
    set for(v) {
        this.i.bu = v;
    }
    /**
     * Gets or sets the value of the aria-label attribute.
    */
    get ariaLabel() {
        return this.i.bq;
    }
    set ariaLabel(v) {
        this.i.bq = v;
    }
    /**
     * Gets or sets whether the input is hovered.
    */
    get isHover() {
        return this.i.ar;
    }
    set isHover(v) {
        this.i.ar = ensureBool(v);
    }
    /**
     * Gets or sets the value for the input.
    */
    get value() {
        return this.i.cf;
    }
    set value(v) {
        this.i.cf = v;
    }
    get hasValue() {
        return this.i.ao;
    }
    /**
     * Gets or sets whether the checkbox is disabled.
    */
    get disabled() {
        return this.i.disabled;
    }
    set disabled(v) {
        this.i.disabled = ensureBool(v);
    }
    /**
     * Returns / Sets the beginning index of the selected text. When nothing is selected, this returns the position of the text input cursor (caret) inside of the input.
    */
    get selectionStart() {
        return this.i.selectionStart;
    }
    set selectionStart(v) {
        this.i.selectionStart = +v;
    }
    /**
     * Returns / Sets the end index of the selected text. When nothing is selected, this returns the position of the text input cursor (caret) inside of the input.
    */
    get selectionEnd() {
        return this.i.selectionEnd;
    }
    set selectionEnd(v) {
        this.i.selectionEnd = +v;
    }
    onDetachedFromUI() {
        this.i.onDetachedFromUI();
    }
    onAttachedToUI() {
        this.i.onAttachedToUI();
    }
    /**
     * Exports visual information about the current state of the grid.
    
    */
    exportVisualModel() {
        let iv = this.i.ba();
        return (iv);
    }
    /**
     * Returns a serialized copy of the exported visual model
    
    */
    exportSerializedVisualModel() {
        let iv = this.i.bt();
        return (iv);
    }
    focus() {
        this.i.ck();
    }
    select() {
        this.i.db();
    }
    setSelectionRange(selectionStart, selectionEnd) {
        this.i.dd(selectionStart, selectionEnd);
    }
    get keyDown() {
        return this._keyDown;
    }
    set keyDown(ev) {
        if (this._keyDown_wrapped !== null) {
            this.i.keyDown = delegateRemove(this.i.keyDown, this._keyDown_wrapped);
            this._keyDown_wrapped = null;
            this._keyDown = null;
        }
        this._keyDown = ev;
        this._keyDown_wrapped = (o, e) => {
            let outerArgs = new IgrKeyEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeKeyDown) {
                this.beforeKeyDown(this, outerArgs);
            }
            if (this._keyDown) {
                this._keyDown(this, outerArgs);
            }
        };
        this.i.keyDown = delegateCombine(this.i.keyDown, this._keyDown_wrapped);
    }
    get keyUp() {
        return this._keyUp;
    }
    set keyUp(ev) {
        if (this._keyUp_wrapped !== null) {
            this.i.keyUp = delegateRemove(this.i.keyUp, this._keyUp_wrapped);
            this._keyUp_wrapped = null;
            this._keyUp = null;
        }
        this._keyUp = ev;
        this._keyUp_wrapped = (o, e) => {
            let outerArgs = new IgrKeyEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeKeyUp) {
                this.beforeKeyUp(this, outerArgs);
            }
            if (this._keyUp) {
                this._keyUp(this, outerArgs);
            }
        };
        this.i.keyUp = delegateCombine(this.i.keyUp, this._keyUp_wrapped);
    }
    get keyPress() {
        return this._keyPress;
    }
    set keyPress(ev) {
        if (this._keyPress_wrapped !== null) {
            this.i.keyPress = delegateRemove(this.i.keyPress, this._keyPress_wrapped);
            this._keyPress_wrapped = null;
            this._keyPress = null;
        }
        this._keyPress = ev;
        this._keyPress_wrapped = (o, e) => {
            let outerArgs = new IgrKeyEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeKeyPress) {
                this.beforeKeyPress(this, outerArgs);
            }
            if (this._keyPress) {
                this._keyPress(this, outerArgs);
            }
        };
        this.i.keyPress = delegateCombine(this.i.keyPress, this._keyPress_wrapped);
    }
    get change() {
        return this._change;
    }
    set change(ev) {
        if (this._change_wrapped !== null) {
            this.i.change = delegateRemove(this.i.change, this._change_wrapped);
            this._change_wrapped = null;
            this._change = null;
        }
        this._change = ev;
        this._change_wrapped = (o, e) => {
            let outerArgs = new IgrInputChangeEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeChange) {
                this.beforeChange(this, outerArgs);
            }
            if (this._change) {
                this._change(this, outerArgs);
            }
        };
        this.i.change = delegateCombine(this.i.change, this._change_wrapped);
    }
    get changing() {
        return this._changing;
    }
    set changing(ev) {
        if (this._changing_wrapped !== null) {
            this.i.changing = delegateRemove(this.i.changing, this._changing_wrapped);
            this._changing_wrapped = null;
            this._changing = null;
        }
        this._changing = ev;
        this._changing_wrapped = (o, e) => {
            let outerArgs = new IgrInputChangeEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeChanging) {
                this.beforeChanging(this, outerArgs);
            }
            if (this._changing) {
                this._changing(this, outerArgs);
            }
        };
        this.i.changing = delegateCombine(this.i.changing, this._changing_wrapped);
    }
}
//# sourceMappingURL=igr-input.js.map
