import * as React from 'react';
import { Icon } from "./Icon";
import { brushToString, stringToBrush, ensureBool, initializePropertiesFromCss, NamePatcher, isValidProp, toSpinal, getModifiedProps } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
export class IgrIcon extends React.Component {
    constructor(props) {
        super(props);
        this._wrapper = null;
        this._implementation = null;
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this._getMainRef = this._getMainRef.bind(this);
        var container;
        if (document) {
            container = document.createElement("div");
        }
        var root;
        root = container;
        if (container != null) {
            root = container;
        }
        this.requestRender = this.requestRender.bind(this);
        this._portalManager = new PortalManager("iconContent", this.requestRender);
        var ren = new ReactRenderer(root, document, true, {}, this._portalManager);
        this._wrapper = ren;
        this._container = this._wrapper.rootWrapper;
        this._container.setStyleProperty("display", "inline-block");
        this._container.setStyleProperty("vertical-align", "middle");
        var icon = this.i;
        this._icon = icon;
        icon.provideContainer(ren);
        if (props) {
            this.initializeProperties();
        }
    }
    _getMainRef(ref) {
        this._elRef = ref;
    }
    render() {
        let propChildren = this.props.children;
        let children = [];
        React.Children.forEach(propChildren, (ch) => {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        let div = React.createElement("div", {
            className: "ig-icon igr-icon",
            ref: this._getMainRef,
            children: children
        });
        return div;
    }
    requestRender() {
        if (this._initialized) {
            this.setState({});
        }
    }
    //private _getLabelPortal(element: DomWrapper, portalCallback: (portal: DomPortal) => void): void {
    //    this._portalManager.getPortal(element, "TemplateContent", portalCallback);
    //}
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    initializeProperties() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    // supports angular themes or custom properties set in CSS
    updateStyle() {
        this._styling(this._elRef, this);
    }
    componentWillUnmount() {
        this._icon.destroy();
        this._wrapper.destroy();
    }
    componentDidMount() {
        this._elRef.appendChild(this._container.getNativeElement());
        this.initializeContent();
    }
    initializeContent() {
        this._styling(this._container.getNativeElement(), this);
        this.updateStyle();
    }
    createImplementation() {
        return new Icon();
    }
    get i() {
        return this._implementation;
    }
    /**
 * Gets the color to use for the actual background.
*/
    get actualFill() {
        return brushToString(this.i.bo);
    }
    set actualFill(v) {
        this.i.bo = stringToBrush(v);
    }
    /**
     * Gets the color to use for the actual text color.
    */
    get actualTextColor() {
        return brushToString(this.i.bs);
    }
    set actualTextColor(v) {
        this.i.bs = stringToBrush(v);
    }
    /**
     * Gets the color to use for the actual background.
    */
    get actualHoverFill() {
        return brushToString(this.i.bp);
    }
    set actualHoverFill(v) {
        this.i.bp = stringToBrush(v);
    }
    /**
     * Gets the hover stroke to use for the icon.
    */
    get actualHoverStroke() {
        return brushToString(this.i.bq);
    }
    set actualHoverStroke(v) {
        this.i.bq = stringToBrush(v);
    }
    /**
     * Gets the stroke to use for the icon.
    */
    get actualStroke() {
        return brushToString(this.i.br);
    }
    set actualStroke(v) {
        this.i.br = stringToBrush(v);
    }
    /**
     * Gets the hover stroke to use for the icon.
    */
    get actualHoverStrokeThickness() {
        return this.i.q;
    }
    set actualHoverStrokeThickness(v) {
        this.i.q = +v;
    }
    /**
     * Gets the stroke to use for the icon.
    */
    get actualStrokeThickness() {
        return this.i.r;
    }
    set actualStrokeThickness(v) {
        this.i.r = +v;
    }
    /**
     * Gets or sets the color to use for the actual background.
    */
    get fill() {
        return brushToString(this.i.fill);
    }
    set fill(v) {
        this.i.fill = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the text.
    */
    get textColor() {
        return brushToString(this.i.b2);
    }
    set textColor(v) {
        this.i.b2 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the text.
    */
    get svgPath() {
        return this.i.svgPath;
    }
    set svgPath(v) {
        this.i.svgPath = v;
    }
    /**
     * Gets or sets the color to use for the actual background.
    */
    get hoverFill() {
        return brushToString(this.i.by);
    }
    set hoverFill(v) {
        this.i.by = stringToBrush(v);
    }
    /**
     * Gets or sets the hover stroke to use for the icon.
    */
    get hoverStroke() {
        return brushToString(this.i.bz);
    }
    set hoverStroke(v) {
        this.i.bz = stringToBrush(v);
    }
    /**
     * Gets or sets the stroke to use for the icon.
    */
    get stroke() {
        return brushToString(this.i.b1);
    }
    set stroke(v) {
        this.i.b1 = stringToBrush(v);
    }
    /**
     * Gets or sets the hover stroke to use for the icon.
    */
    get hoverStrokeThickness() {
        return this.i.u;
    }
    set hoverStrokeThickness(v) {
        this.i.u = +v;
    }
    /**
     * Gets or sets the stroke to use for the icon.
    */
    get strokeThickness() {
        return this.i.v;
    }
    set strokeThickness(v) {
        this.i.v = +v;
    }
    /**
     * Gets or sets the use for the button.
    */
    get textStyle() {
        if (this.i.d == null) {
            return null;
        }
        return this.i.d.fontString;
    }
    set textStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.d = fi;
    }
    /**
     * Gets or sets the color to use for the hovered text of the button regardless of type.
    */
    get hoverTextColor() {
        return brushToString(this.i.b0);
    }
    set hoverTextColor(v) {
        this.i.b0 = stringToBrush(v);
    }
    /**
     * Gets or sets the id to use for the checkbox.
    */
    get id() {
        return this.i.as;
    }
    set id(v) {
        this.i.as = v;
    }
    /**
     * Gets or sets TabIndex to use for the checkbox.
    */
    get tabIndex() {
        return this.i.x;
    }
    set tabIndex(v) {
        this.i.x = +v;
    }
    /**
     * Gets or sets the value of the aria-label attribute.
    */
    get ariaLabel() {
        return this.i.ak;
    }
    set ariaLabel(v) {
        this.i.ak = v;
    }
    /**
     * Gets or sets whether the icon is hovered.
    */
    get isHover() {
        return this.i.k;
    }
    set isHover(v) {
        this.i.k = ensureBool(v);
    }
    /**
     * Gets or sets whether the checkbox is disabled.
    */
    get disabled() {
        return this.i.disabled;
    }
    set disabled(v) {
        this.i.disabled = ensureBool(v);
    }
    findByName(name) {
        return null;
    }
    get hasUserValues() {
        return this._hasUserValues;
    }
    __m(propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    }
    _styling(container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        let genericPrefix = "";
        let typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("Icon");
        let additionalPrefixes = [];
        let prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        let b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            let basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            let parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            let parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    }
    onDetachedFromUI() {
        this.i.onDetachedFromUI();
    }
    onAttachedToUI() {
        this.i.onAttachedToUI();
    }
    /**
     * Exports visual information about the current state of the grid.
    
    */
    exportVisualModel() {
        let iv = this.i.z();
        return (iv);
    }
    /**
     * Returns a serialized copy of the exported visual model
    
    */
    exportSerializedVisualModel() {
        let iv = this.i.am();
        return (iv);
    }
}
//# sourceMappingURL=igr-icon.js.map
