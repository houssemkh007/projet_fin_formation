/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, runOn, markType, INotifyPropertyChanged_$type, PropertyChangedEventArgs, toNullable, Date_$type, delegateRemove, enumGetBox, delegateCombine } from "igniteui-react-core";
import { ControlDisplayDensity_$type } from "igniteui-react-core";
import { BaseControlTheme_$type } from "igniteui-react-core";
import { BrushUtil } from "igniteui-react-core";
import { ValueChangedEventArgs } from "./ValueChangedEventArgs";
import { Popup } from "igniteui-react-layouts";
import { Input } from "./Input";
import { Calendar } from "./Calendar";
import { Icon } from "./Icon";
import { InputGroup } from "./InputGroup";
import { Suffix } from "./Suffix";
import { DatePickerVisualModelExport } from "./DatePickerVisualModelExport";
import { FontUtil } from "igniteui-react-core";
import { nullableNotEquals, unwrapNullable, nullableEquals } from "igniteui-react-core";
import { dateToStringFormat } from "igniteui-react-core";
import { isNaN_ } from "igniteui-react-core";
/**
 * @hidden
 */
export let DatePickerView = /*@__PURE__*/ (() => {
    class DatePickerView extends Base {
        constructor() {
            super();
            this.a = null;
            this.c = null;
            this.f = null;
            this.d = null;
            this.e = null;
        }
        p() {
        }
        o(a) {
            if (a == null) {
                this.c = null;
                return;
            }
            this.c = a;
            let b = Math.round(a.rootWrapper.width());
            let c = Math.round(a.rootWrapper.height());
            this.i();
            this.j();
            let d = this.c.rootWrapper.getChildAt(0);
            d.listen("keydown", runOn(this, this.g));
            document.addEventListener("click", runOn(this, this.k), false);
        }
        i() {
            if (this.c != null) {
                this.f = this.c.rootWrapper.getChildAt(0);
                this.e = this.c.createElement("div");
                let a = this.c.createElement("div");
                this.a.am(this.c, this.f, this.e, a);
                this.e.listen("click", runOn(this, this.h));
                a.listen("click", runOn(this, this.l));
            }
        }
        r() {
            if (this.e != null) {
                if (this.a.q == true) {
                    this.e.show();
                }
                else {
                    this.e.hide();
                }
            }
        }
        m() {
            if (this.e != null) {
                this.e.hide();
            }
        }
        j() {
            if (this.c != null) {
                let a = this.c.rootWrapper.getChildAt(1);
                this.a.an(this.c, a);
            }
        }
        h(a) {
            this.a.ak();
            if (this.e != null) {
                this.e.hide();
            }
        }
        l(a) {
            this.a.aq();
        }
        s() {
            if (this.c != null) {
                let a = this.c.rootWrapper.getNativeElement();
                let b = a.getBoundingClientRect();
                ;
                return b;
            }
            return null;
        }
        g(a) {
            let b = a.which;
            if (a.altKey) {
                if (b == 40) {
                    this.a.au();
                    this.a.ap();
                }
                else if (b == 38) {
                    this.a.al();
                }
            }
            else if (b == 27) {
                this.a.al();
            }
        }
        k(a) {
            let b = a.target;
            if (!this.b(b)) {
                this.a.al();
            }
        }
        b(a) {
            if (null == a) {
                return false;
            }
            let b = this.f.getNativeElement();
            let c = this.d.getNativeElement();
            return b.contains(a) || c.contains(a);
        }
        q(a) {
            this.d = a;
        }
        n() {
        }
    }
    DatePickerView.$t = /*@__PURE__*/ markType(DatePickerView, 'DatePickerView');
    return DatePickerView;
})();
/**
 * @hidden
 */
export let DatePicker = /*@__PURE__*/ (() => {
    class DatePicker extends Base {
        constructor() {
            super();
            this.g = null;
            this.m = null;
            this.k = null;
            this.j = null;
            this.h = null;
            this.i = null;
            this.f = null;
            this.propertyChanged = null;
            this.valueChanged = null;
            this.t = toNullable(Date_$type, null);
            this.c = 2;
            this.a = 1;
            this.n = null;
            this.a3 = BrushUtil.g(255, 24, 29, 31);
            this.a2 = BrushUtil.g(255, 163, 172, 184);
            this.p = true;
            let a = new DatePickerView();
            a.a = this;
            this.g = a;
            this.g.p();
        }
        at(a, b) {
            this.t = toNullable(Date_$type, b);
            if (this.m != null) {
                this.al();
            }
            if (this.j != null) {
                if (nullableNotEquals(this.t, null)) {
                    this.j.cf = dateToStringFormat(this.t.value, "MM/dd/yyyy", null);
                    this.g.r();
                }
                else {
                    this.j.cf = "";
                    this.g.m();
                }
            }
            if (this.valueChanged != null) {
                this.valueChanged(this, ((() => {
                    let $ret = new ValueChangedEventArgs();
                    $ret.oldValue = a;
                    $ret.newValue = b;
                    return $ret;
                })()));
            }
        }
        notifySizeChanged() {
            this.g.n();
        }
        destroy() {
            if (this.f != null) {
                let a = this.f;
                a.valueChanged = delegateRemove(a.valueChanged, runOn(this, this.aj));
                let b = this.f;
                b.close = delegateRemove(b.close, runOn(this, this.ai));
            }
            this.provideContainer(null);
        }
        provideContainer(a) {
            this.g.o(a);
        }
        get r() {
            return this.t.value;
        }
        set r(a) {
            let b = this.t;
            this.t = toNullable(Date_$type, a);
            if (nullableNotEquals(b, this.t)) {
                this.as("Value", unwrapNullable(b), unwrapNullable(this.t));
            }
        }
        get d() {
            return this.c;
        }
        set d(a) {
            let b = this.c;
            this.c = a;
            if (b != this.c) {
                this.as("Density", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, this.c));
            }
        }
        get b() {
            return this.a;
        }
        set b(a) {
            let b = this.a;
            this.a = a;
            if (b != this.a) {
                this.as("BaseTheme", enumGetBox(BaseControlTheme_$type, b), enumGetBox(BaseControlTheme_$type, this.a));
            }
        }
        get o() {
            return this.n;
        }
        set o(a) {
            let b = this.n;
            this.n = a;
            if (b != this.n) {
                this.as("TextStyle", b, this.n);
            }
        }
        get a5() {
            return this.a3;
        }
        set a5(a) {
            let b = this.a3;
            this.a3 = a;
            if (b != this.a3) {
                this.as("TextColor", b, this.a3);
            }
        }
        get a4() {
            return this.a2;
        }
        set a4(a) {
            let b = this.a2;
            this.a2 = a;
            if (b != this.a2) {
                this.as("IconColor", b, this.a2);
            }
        }
        get q() {
            return this.p;
        }
        set q(a) {
            let b = this.p;
            this.p = a;
            if (b != this.p) {
                this.as("ShowClearButton", b, this.p);
            }
        }
        as(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            this.av(a, b, c);
        }
        av(a, b, c) {
            switch (a) {
                case "Density":
                    this.ax();
                    break;
                case "BaseTheme":
                    this.ay();
                    break;
                case "Value":
                    if (this.f != null) {
                        this.f.u = this.t.value;
                    }
                    if (this.j != null) {
                        if (nullableNotEquals(this.t, null)) {
                            this.j.cf = dateToStringFormat(this.t.value, "MM/dd/yyyy", null);
                            this.g.r();
                        }
                        else {
                            this.j.cf = "";
                            this.g.m();
                        }
                    }
                    break;
                case "TextStyle":
                    this.a0();
                    break;
                case "ShowClearButton":
                    if (this.j != null) {
                        if (this.j.cf != "") {
                            this.g.r();
                        }
                    }
                    break;
                case "TextColor":
                case "IconColor":
                    this.a1();
                    break;
            }
        }
        a1() {
            if (this.j != null) {
                this.j.dt = this.a5;
            }
            if (this.h != null) {
                this.h.fill = this.a4;
            }
            if (this.i != null) {
                this.i.fill = this.a4;
            }
        }
        az() {
            if (this.k != null) {
            }
        }
        a0() {
            if (this.n != null) {
                this.j.ac = this.n;
            }
        }
        am(a, b, c, d) {
            this.k = new InputGroup();
            let e = a.getSubRenderer(b);
            this.k.provideContainer(e);
            this.k.k = 0;
            this.k.d = this.b;
            this.k.h = this.d;
            let f = a.createElement("div");
            f.setRawStyleProperty("flex-grow", "1");
            let g = a.getSubRenderer(f);
            this.j = new Input();
            this.j.provideContainer(g);
            this.j.b0 = "text";
            if (this.n != null) {
                this.j.ac = this.n;
            }
            this.j.disabled = true;
            this.j.dt = this.a5;
            this.k.appendContentChild(f);
            this.k.inputs.add(this.j);
            let h = a.createElement("div");
            let i = a.getSubRenderer(h);
            let j = new Suffix();
            j.provideContainer(i);
            this.h = new Icon();
            let k = a.getSubRenderer(c);
            this.h.provideContainer(k);
            this.h.svgPath = DatePicker.x;
            this.h.fill = this.a4;
            c.setStyleProperty("height", "16px");
            c.setStyleProperty("width", "16px");
            j.appendContentChild(c);
            this.k.appendContentChild(h);
            this.k.inputs.add(j);
            if (nullableEquals(this.t, null)) {
                c.hide();
            }
            let l = a.createElement("div");
            let m = a.getSubRenderer(l);
            let n = new Suffix();
            n.provideContainer(m);
            let o = a.getSubRenderer(d);
            this.i = new Icon();
            this.i.provideContainer(o);
            this.i.svgPath = DatePicker.w;
            this.i.fill = this.a4;
            d.setStyleProperty("height", "16px");
            d.setStyleProperty("width", "16px");
            n.appendContentChild(d);
            this.k.appendContentChild(l);
            this.k.inputs.add(n);
        }
        ak() {
            let a = toNullable(Date_$type, this.r);
            let b = toNullable(Date_$type, null);
            if (this.j != null) {
                this.j.cf = "";
            }
            this.t = toNullable(Date_$type, null);
            this.f.ax();
            this.at(a.value, b.value);
        }
        an(a, b) {
            this.m = new Popup();
            let c = a.getSubRenderer(b);
            this.m.provideRenderer(c);
            this.f = new Calendar();
            let d = a.createElement("div");
            this.g.q(d);
            d.setStyleProperty("width", "220px");
            d.setStyleProperty("height", "230px");
            let e = a.getSubRenderer(d);
            this.f.provideContainer(e);
            let f = this.f;
            f.valueChanged = delegateCombine(f.valueChanged, runOn(this, this.aj));
            let g = this.f;
            g.close = delegateCombine(g.close, runOn(this, this.ai));
            this.m.appendPopupContent(d);
        }
        aj(a, b) {
            this.at(b.oldValue, b.newValue);
        }
        ai(a) {
            if (this.m.t) {
                this.al();
            }
        }
        aq() {
            if (this.m.t) {
                this.al();
            }
            else {
                this.au();
            }
        }
        au() {
            let a = this.g.s();
            this.m.showRelativeToExclusionRect(a, 0, 0);
        }
        al() {
            this.m.an();
            this.f.a8();
        }
        ap() {
            this.f.a0();
        }
        ay() {
        }
        ax() {
        }
        u() {
            return this.e();
        }
        ac() {
            let a = this.e();
            return a.g();
        }
        e() {
            let a = new DatePickerVisualModelExport();
            a.b = this.d;
            a.a = this.b;
            a.e = this.m.ab();
            a.d = this.k.ia();
            a.c = this.f.x();
            if (this.o != null) {
                let b = this.o;
                if (this.g != null && b.n == null) {
                    let c = this.g.c;
                    let d = FontUtil.getFontInfoFromString(c, b.fontString);
                    b.n = d.n;
                    b.d = d.d;
                    b.o = d.o;
                    b.q = d.q;
                    b.r = d.r;
                    b.s = d.s;
                }
                if (b.n != null) {
                    a.h = b.n;
                }
                if (!isNaN_(b.d)) {
                    a.f = b.d;
                }
                if (b.s != null) {
                    a.l = b.s;
                }
                if (b.q != null) {
                    a.j = b.q;
                }
                if (b.o != null) {
                    a.i = b.q;
                }
            }
            return a;
        }
    }
    DatePicker.$t = /*@__PURE__*/ markType(DatePicker, 'DatePicker', Base.$, [INotifyPropertyChanged_$type]);
    DatePicker.w = "M20 3h-1V1h-2v2H7V1H5v2H4c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 18H4V8h16v13z";
    DatePicker.ab = "M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z";
    DatePicker.y = "M12 8l-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z";
    DatePicker.x = "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z";
    return DatePicker;
})();
//# sourceMappingURL=DatePickerView_combined.js.map
