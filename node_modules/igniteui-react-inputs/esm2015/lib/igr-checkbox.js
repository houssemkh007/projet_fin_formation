import * as React from 'react';
import { Checkbox } from "./Checkbox";
import { ensureEnum, brushToString, stringToBrush, ensureBool, initializePropertiesFromCss, NamePatcher, isValidProp, toSpinal, getModifiedProps } from "igniteui-react-core";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { IgrCheckboxChangeEventArgs } from './igr-checkbox-change-event-args';
import { CheckboxLabelPosition_$type } from './CheckboxLabelPosition';
import { BaseControlTheme_$type } from "igniteui-react-core";
let requiredStyle = `

/*.ig-checkbox-mark {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    stroke: #fff;
    stroke-linecap: square;
    stroke-width: 3;
    stroke-dasharray: 24;
    stroke-dashoffset: 24;
    fill: none;
    opacity: 0;
    z-index: 1;
}*/

/*.ig-native-checkbox {
    position: absolute;
    width: 1px;
    height: 1px;
    margin: -1px;
    border: none;
    clip: rect(0, 0, 0, 0);
    outline: 0;
    pointer-events: none;
    overflow: hidden;
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
}*/

/*.ig-checkbox-box {
    width: 1.25em;
    height: 1.25em;
}*/

/*.ig-checkbox-composite {
    box-sizing: border-box;
    position: relative;
    display: inline-block;
    cursor: pointer;
    width: 1.25em;
    height: 1.25em;
    min-width: 1.25em;
    border-width: .125rem;
    border-style: solid;
    border-color: rgba(0,0,0,0.54);
    border-top-color: rgba(0, 0, 0, 0.54);
    border-right-color: rgba(0, 0, 0, 0.54);
    border-bottom-color: rgba(0, 0, 0, 0.54);
    border-left-color: rgba(0, 0, 0, 0.54);
    border-radius: 2px;
    -webkit-tap-highlight-color: transparent;
    overflow: hidden;
}*/

/*.ig-checkbox-label {
    font-family: "Titillium Web", Verdana;
    font-weight: 400;
    font-size: 1rem;
    letter-spacing: .00937rem;
    text-transform: none;
    line-height: 1.5rem;
    margin-left: 8px;
    margin-top: 0;
    margin-bottom: 0;
    cursor: pointer;
}*/
`;
export class IgrCheckbox extends React.Component {
    constructor(props) {
        super(props);
        this._wrapper = null;
        this._implementation = null;
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        this._change = null;
        this._change_wrapped = null;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this._getMainRef = this._getMainRef.bind(this);
        var container;
        if (document) {
            container = document.createElement("div");
        }
        var root;
        root = container;
        if (container != null) {
            root = container;
        }
        this.requestRender = this.requestRender.bind(this);
        this._portalManager = new PortalManager("checkboxLabel", this.requestRender);
        var ren = new ReactRenderer(root, document, true, {}, this._portalManager);
        this._wrapper = ren;
        this._container = this._wrapper.rootWrapper;
        this._container.setStyleProperty("display", "inline-block");
        var checkbox = this.i;
        this._checkbox = checkbox;
        checkbox.provideContainer(ren);
        if (props) {
            this.initializeProperties();
        }
    }
    _getMainRef(ref) {
        this._elRef = ref;
    }
    render() {
        let propChildren = this.props.children;
        let children = [];
        React.Children.forEach(propChildren, (ch) => {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        let div = React.createElement("div", {
            className: "ig-checkbox igr-checkbox",
            ref: this._getMainRef,
            children: children
        });
        return div;
    }
    requestRender() {
        if (this._initialized) {
            this.setState({});
        }
    }
    //private _getLabelPortal(element: DomWrapper, portalCallback: (portal: DomPortal) => void): void {
    //    this._portalManager.getPortal(element, "TemplateContent", portalCallback);
    //}
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    initializeProperties() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    // supports angular themes or custom properties set in CSS
    updateStyle() {
        this._styling(this._elRef, this);
    }
    componentWillUnmount() {
        this._checkbox.destroy();
        this._wrapper.destroy();
    }
    componentDidMount() {
        this._elRef.appendChild(this._container.getNativeElement());
        this.initializeContent();
    }
    initializeContent() {
        this._styling(this._container.getNativeElement(), this);
        this.updateStyle();
        this.i.onContentReady();
    }
    createImplementation() {
        return new Checkbox();
    }
    get i() {
        return this._implementation;
    }
    /**
 * Gets or sets the base built in theme to use for the checkbox.
*/
    get baseTheme() {
        return this.i.d;
    }
    set baseTheme(v) {
        this.i.d = ensureEnum(BaseControlTheme_$type, v);
    }
    /**
     * Gets or sets the color to use for the background when the checkbox is unchecked.
    */
    get uncheckedBackgroundColor() {
        return brushToString(this.i.dt);
    }
    set uncheckedBackgroundColor(v) {
        this.i.dt = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the actual background when the checkbox is unchecked.
    */
    get actualUncheckedBackgroundColor() {
        return brushToString(this.i.c8);
    }
    set actualUncheckedBackgroundColor(v) {
        this.i.c8 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the background when the checkbox is checked.
    */
    get checkedBackgroundColor() {
        return brushToString(this.i.da);
    }
    set checkedBackgroundColor(v) {
        this.i.da = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    get tickColor() {
        return brushToString(this.i.ds);
    }
    set tickColor(v) {
        this.i.ds = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    get actualTickColor() {
        return brushToString(this.i.c7);
    }
    set actualTickColor(v) {
        this.i.c7 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the check mark when the checkbox is unchecked.
    */
    get uncheckedBorderColor() {
        return brushToString(this.i.du);
    }
    set uncheckedBorderColor(v) {
        this.i.du = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    get checkedBorderColor() {
        return brushToString(this.i.db);
    }
    set checkedBorderColor(v) {
        this.i.db = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    get actualUncheckedBorderColor() {
        return brushToString(this.i.c9);
    }
    set actualUncheckedBorderColor(v) {
        this.i.c9 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    get actualCheckedBorderColor() {
        return brushToString(this.i.c6);
    }
    set actualCheckedBorderColor(v) {
        this.i.c6 = stringToBrush(v);
    }
    /**
     * Gets or sets the Width to use for the check mark when the checkbox is checked.
    */
    get borderWidth() {
        return this.i.al;
    }
    set borderWidth(v) {
        this.i.al = +v;
    }
    /**
     * Gets or sets the Width to use for the check mark when the checkbox is checked.
    */
    get actualBorderWidth() {
        return this.i.ai;
    }
    set actualBorderWidth(v) {
        this.i.ai = +v;
    }
    /**
     * Gets or sets the corner radius to use for the checkbox.
    */
    get cornerRadius() {
        return this.i.am;
    }
    set cornerRadius(v) {
        this.i.am = +v;
    }
    /**
     * Gets or sets the corner radius to use for the checkbox.
    */
    get tickStrokeWidth() {
        return this.i.aw;
    }
    set tickStrokeWidth(v) {
        this.i.aw = +v;
    }
    /**
     * Gets or sets the stroke width to use for the check mark.
    */
    get actualTickStrokeWidth() {
        return this.i.ak;
    }
    set actualTickStrokeWidth(v) {
        this.i.ak = +v;
    }
    /**
     * Gets the actual corner radius to use for the checkbox.
    */
    get actualCornerRadius() {
        return this.i.aj;
    }
    set actualCornerRadius(v) {
        this.i.aj = +v;
    }
    /**
     * Gets or sets the color to use for the actual background when the checkbox is checked.
    */
    get actualCheckedBackgroundColor() {
        return brushToString(this.i.c5);
    }
    set actualCheckedBackgroundColor(v) {
        this.i.c5 = stringToBrush(v);
    }
    /**
     * Gets or sets the id to use for the internal native checkbox.
    */
    get inputId() {
        return this.i.by;
    }
    set inputId(v) {
        this.i.by = v;
    }
    /**
     * Gets or sets the id to use for the checkbox.
    */
    get id() {
        return this.i.bw;
    }
    set id(v) {
        this.i.bw = v;
    }
    /**
     * Gets or sets id to use for the checkbox label.
    */
    get labelId() {
        return this.i.labelId;
    }
    set labelId(v) {
        this.i.labelId = v;
    }
    /**
     * Gets or sets value to use for the checkbox.
    */
    get value() {
        return this.i.a5;
    }
    set value(v) {
        this.i.a5 = v;
    }
    /**
     * Gets or sets name to use for the checkbox.
    */
    get name() {
        return this.i.b7;
    }
    set name(v) {
        this.i.b7 = v;
    }
    /**
     * Gets or sets TabIndex to use for the checkbox.
    */
    get tabIndex() {
        return this.i.a0;
    }
    set tabIndex(v) {
        this.i.a0 = +v;
    }
    /**
     * Gets or sets if the checkbox is required.
    */
    get required() {
        return this.i.az;
    }
    set required(v) {
        this.i.az = +v;
    }
    /**
     * Gets or sets if the checkbox is Focused.
    */
    get focused() {
        return this.i.focused;
    }
    set focused(v) {
        this.i.focused = ensureBool(v);
    }
    /**
     * Gets or sets the value of the aria-labelledby attribute.
    */
    get ariaLabelledBy() {
        return this.i.bl;
    }
    set ariaLabelledBy(v) {
        this.i.bl = v;
    }
    /**
     * Gets or sets the value of the aria-label attribute.
    */
    get ariaLabel() {
        return this.i.bk;
    }
    set ariaLabel(v) {
        this.i.bk = v;
    }
    /**
     * Gets or sets LabelPosition to use for the checkbox.
    */
    get labelPosition() {
        return this.i.h;
    }
    set labelPosition(v) {
        this.i.h = ensureEnum(CheckboxLabelPosition_$type, v);
    }
    /**
     * Gets or sets whether to disable the ripple effect for the checkbox.
    */
    get disableRipple() {
        return this.i.t;
    }
    set disableRipple(v) {
        this.i.t = ensureBool(v);
    }
    /**
     * Gets or sets whether the checkbox is checked.
    */
    get checked() {
        return this.i.checked;
    }
    set checked(v) {
        this.i.checked = ensureBool(v);
    }
    /**
     * Gets or sets whether the checkbox is indeterminate.
    */
    get indeterminate() {
        return this.i.indeterminate;
    }
    set indeterminate(v) {
        this.i.indeterminate = ensureBool(v);
    }
    /**
     * Gets or sets whether the checkbox is disabled.
    */
    get disabled() {
        return this.i.disabled;
    }
    set disabled(v) {
        this.i.disabled = ensureBool(v);
    }
    /**
     * Gets or sets whether the checkbox transitions are disabled.
    */
    get disableTransitions() {
        return this.i.u;
    }
    set disableTransitions(v) {
        this.i.u = ensureBool(v);
    }
    findByName(name) {
        return null;
    }
    get hasUserValues() {
        return this._hasUserValues;
    }
    __m(propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    }
    _styling(container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        let genericPrefix = "";
        let typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("Checkbox");
        let additionalPrefixes = [];
        let prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        let b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            let basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            let parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            let parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    }
    onDetachedFromUI() {
        this.i.onDetachedFromUI();
    }
    onAttachedToUI() {
        this.i.onAttachedToUI();
    }
    /**
     * Exports visual information about the current state of the grid.
    
    */
    exportVisualModel() {
        let iv = this.i.a4();
        return (iv);
    }
    /**
     * Returns a serialized copy of the exported visual model
    
    */
    exportSerializedVisualModel() {
        let iv = this.i.bv();
        return (iv);
    }
    get change() {
        return this._change;
    }
    set change(ev) {
        if (this._change_wrapped !== null) {
            this.i.change = delegateRemove(this.i.change, this._change_wrapped);
            this._change_wrapped = null;
            this._change = null;
        }
        this._change = ev;
        this._change_wrapped = (o, e) => {
            let outerArgs = new IgrCheckboxChangeEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeChange) {
                this.beforeChange(this, outerArgs);
            }
            if (this._change) {
                this._change(this, outerArgs);
            }
        };
        this.i.change = delegateCombine(this.i.change, this._change_wrapped);
    }
}
//# sourceMappingURL=igr-checkbox.js.map
