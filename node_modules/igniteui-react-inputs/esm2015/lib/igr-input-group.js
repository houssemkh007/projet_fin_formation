import * as React from 'react';
import { InputGroup } from "./InputGroup";
import { InputGroupItem } from "./InputGroupItem";
import { ensureEnum, brushToString, stringToBrush, ensureBool, initializePropertiesFromCss, NamePatcher, isValidProp, toSpinal, getModifiedProps } from "igniteui-react-core";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { IgrInputGroupInputCollection } from './igr-input-group-input-collection';
import { CollectionAdapter } from "igniteui-react-core";
import { NotifyCollectionChangedAction } from "igniteui-react-core";
import { ContentChildrenManager } from "igniteui-react-core";
import { InputGroupDisplayType_$type } from './InputGroupDisplayType';
import { CornerRadius } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { ControlDisplayDensity_$type } from "igniteui-react-core";
import { BaseControlTheme_$type } from "igniteui-react-core";
export class IgrInputGroup extends React.Component {
    constructor(props) {
        super(props);
        this._wrapper = null;
        this.contentInputs = [];
        /**
        * The style mappings actually present in the treemap. Do not directly modify this array.
        * This array's contents can be modified by causing React to reproject the child content.
        * Or adding and removing ranges from the manual ranges collection on the ranges property.
        */
        this.actualInputs = [];
        this._inputs = null;
        this._inputsAdapter = null;
        this._implementation = null;
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._contentChildrenManager = new ContentChildrenManager((ch) => ch.props.name || ch.key || ch.props.id, (ch) => ch.name || ch.key || ch.id, () => this._updateContentChildren());
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this._getMainRef = this._getMainRef.bind(this);
        var container;
        if (document) {
            container = document.createElement("div");
        }
        var root;
        root = container;
        if (container != null) {
            root = container;
        }
        this.requestRender = this.requestRender.bind(this);
        this._portalManager = new PortalManager("inputContent", this.requestRender);
        var ren = new ReactRenderer(root, document, true, {}, this._portalManager);
        this._wrapper = ren;
        this._container = this._wrapper.rootWrapper;
        this._container.setStyleProperty("display", "inline-block");
        var inputGroup = this.i;
        this._inputGroup = inputGroup;
        this._inputsAdapter = new CollectionAdapter(this.contentInputs, this.i.inputs, this.actualInputs, (c) => c.i, (i) => {
            if (this._container && this._container.getNativeElement().parentElement) {
                i._styling(this._container.getNativeElement(), this, this);
            }
        }, (i) => { });
        inputGroup.provideContainer(ren);
        if (props) {
            this.initializeProperties();
        }
    }
    _getMainRef(ref) {
        this._elRef = ref;
        if (this._elRef) {
            let mut = new MutationObserver((list) => {
                for (var mutation of list) {
                    if (mutation.type == 'childList') {
                        this.i.onChildrenMutated();
                    }
                }
            });
            mut.observe(this._elRef, {
                childList: true,
                subtree: true
            });
        }
    }
    _updateContentChildren() {
        this.contentInputs.length = 0;
        let contentChildrenActual = this._contentChildrenManager.contentChildrenActual;
        for (let i = 0; i < contentChildrenActual.length; i++) {
            if ((InputGroupItem.$type).isAssignableFrom(contentChildrenActual[i].i.$type)) {
                this.contentInputs.push(contentChildrenActual[i]);
            }
        }
        if (this._inputsAdapter !== null) {
            this._inputsAdapter.notifyContentChanged();
        }
    }
    /**
     * A collection of manually added style mappings for the treemap.
    */
    get inputs() {
        if (this._inputs === null) {
            let coll = new IgrInputGroupInputCollection();
            let inner = coll._innerColl;
            inner.addListener((sender, e) => {
                switch (e.action) {
                    case NotifyCollectionChangedAction.Add:
                        this._inputsAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));
                        break;
                    case NotifyCollectionChangedAction.Remove:
                        this._inputsAdapter.removeManualItemAt(e.oldStartingIndex);
                        break;
                    case NotifyCollectionChangedAction.Replace:
                        this._inputsAdapter.removeManualItemAt(e.oldStartingIndex);
                        this._inputsAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));
                        break;
                    case NotifyCollectionChangedAction.Reset:
                        this._inputsAdapter.clearManualItems();
                        break;
                }
            });
            this._inputs = coll;
        }
        return this._inputs;
    }
    render() {
        let children = this._contentChildrenManager.getChildren(this.props.children);
        this._portalManager.onRender(children);
        let div = React.createElement("div", {
            className: "ig-input-group igr-input-group",
            ref: this._getMainRef,
            children: children
        });
        return div;
    }
    requestRender() {
        if (this._initialized) {
            this.setState({});
        }
    }
    //private _getLabelPortal(element: DomWrapper, portalCallback: (portal: DomPortal) => void): void {
    //    this._portalManager.getPortal(element, "TemplateContent", portalCallback);
    //}
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    initializeProperties() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    // supports angular themes or custom properties set in CSS
    updateStyle() {
        this._styling(this._elRef, this);
    }
    componentWillUnmount() {
        this._inputGroup.destroy();
        this._wrapper.destroy();
    }
    componentDidMount() {
        this._elRef.appendChild(this._container.getNativeElement());
        this.initializeContent();
    }
    initializeContent() {
        this._styling(this._container.getNativeElement(), this);
        this.updateStyle();
    }
    createImplementation() {
        return new InputGroup();
    }
    get i() {
        return this._implementation;
    }
    /**
 * Gets or sets the display style to use for the button.
*/
    get displayType() {
        return this.i.k;
    }
    set displayType(v) {
        this.i.k = ensureEnum(InputGroupDisplayType_$type, v);
    }
    /**
     * Gets or sets the display density to use for the input group.
    */
    get density() {
        return this.i.h;
    }
    set density(v) {
        this.i.h = ensureEnum(ControlDisplayDensity_$type, v);
    }
    /**
     * Gets the actual display density to use for the input group.
    */
    get actualDensity() {
        return this.i.g;
    }
    set actualDensity(v) {
        this.i.g = ensureEnum(ControlDisplayDensity_$type, v);
    }
    /**
     * Gets or sets the base built in theme to use for the label.
    */
    get baseTheme() {
        return this.i.d;
    }
    set baseTheme(v) {
        this.i.d = ensureEnum(BaseControlTheme_$type, v);
    }
    get inputHasValue() {
        return this.i.af;
    }
    /**
     * Gets the actual item background color.
    */
    get actualBorderColor() {
        return brushToString(this.i.os);
    }
    set actualBorderColor(v) {
        this.i.os = stringToBrush(v);
    }
    /**
     * Gets the actual item border color.
    */
    get actualFocusBorderColor() {
        return brushToString(this.i.ot);
    }
    set actualFocusBorderColor(v) {
        this.i.ot = stringToBrush(v);
    }
    /**
     * Gets the actual item border width.
    */
    get actualBorderWidth() {
        return this.i.ca;
    }
    set actualBorderWidth(v) {
        this.i.ca = +v;
    }
    /**
     * Gets the actual item border width.
    */
    get actualFocusBorderWidth() {
        return this.i.cb;
    }
    set actualFocusBorderWidth(v) {
        this.i.cb = +v;
    }
    get actualCornerRadiusBottomRight() {
        return this.i.mz ? this.i.mz.b : NaN;
    }
    set actualCornerRadiusBottomRight(v) {
        this.ensureActualCornerRadius();
        this.i.mz.b = +v;
        this.i.mz = this.i.mz;
    }
    get actualCornerRadiusBottomLeft() {
        return this.i.mz ? this.i.mz.a : NaN;
    }
    set actualCornerRadiusBottomLeft(v) {
        this.ensureActualCornerRadius();
        this.i.mz.a = +v;
        this.i.mz = this.i.mz;
    }
    get actualCornerRadiusTopLeft() {
        return this.i.mz ? this.i.mz.c : NaN;
    }
    set actualCornerRadiusTopLeft(v) {
        this.ensureActualCornerRadius();
        this.i.mz.c = +v;
        this.i.mz = this.i.mz;
    }
    get actualCornerRadiusTopRight() {
        return this.i.mz ? this.i.mz.d : NaN;
    }
    set actualCornerRadiusTopRight(v) {
        this.ensureActualCornerRadius();
        this.i.mz.d = +v;
        this.i.mz = this.i.mz;
    }
    ensureActualCornerRadius() {
        if (this.i.mz) {
            return;
        }
        this.i.mz = new CornerRadius(2);
    }
    get actualContentPaddingBottom() {
        return this.i.tf ? this.i.tf.b : NaN;
    }
    set actualContentPaddingBottom(v) {
        this.ensureActualContentPadding();
        this.i.tf.b = +v;
        this.i.tf = this.i.tf;
    }
    get actualContentPaddingLeft() {
        return this.i.tf ? this.i.tf.c : NaN;
    }
    set actualContentPaddingLeft(v) {
        this.ensureActualContentPadding();
        this.i.tf.c = +v;
        this.i.tf = this.i.tf;
    }
    get actualContentPaddingRight() {
        return this.i.tf ? this.i.tf.d : NaN;
    }
    set actualContentPaddingRight(v) {
        this.ensureActualContentPadding();
        this.i.tf.d = +v;
        this.i.tf = this.i.tf;
    }
    get actualContentPaddingTop() {
        return this.i.tf ? this.i.tf.e : NaN;
    }
    set actualContentPaddingTop(v) {
        this.ensureActualContentPadding();
        this.i.tf.e = +v;
        this.i.tf = this.i.tf;
    }
    ensureActualContentPadding() {
        if (this.i.tf) {
            return;
        }
        this.i.tf = new Thickness(2);
    }
    /**
     * Gets the actual width to use for the underline element.
    */
    get actualUnderlineWidth() {
        return this.i.cj;
    }
    set actualUnderlineWidth(v) {
        this.i.cj = +v;
    }
    /**
     * Gets the actual width to use for the underline element.
    */
    get actualUnderlineRippleWidth() {
        return this.i.ci;
    }
    set actualUnderlineRippleWidth(v) {
        this.i.ci = +v;
    }
    /**
     * Gets the width to use for the underline element when hovered.
    */
    get actualHoverUnderlineWidth() {
        return this.i.cf;
    }
    set actualHoverUnderlineWidth(v) {
        this.i.cf = +v;
    }
    /**
     * Gets the actual color to use for the underline element.
    */
    get actualUnderlineColor() {
        return brushToString(this.i.ow);
    }
    set actualUnderlineColor(v) {
        this.i.ow = stringToBrush(v);
    }
    /**
     * Gets the actual color to use for the underline ripple element.
    */
    get actualUnderlineRippleColor() {
        return brushToString(this.i.ox);
    }
    set actualUnderlineRippleColor(v) {
        this.i.ox = stringToBrush(v);
    }
    /**
     * Gets the actual color to use for the underline element.
    */
    get actualHoverUnderlineColor() {
        return brushToString(this.i.ov);
    }
    set actualHoverUnderlineColor(v) {
        this.i.ov = stringToBrush(v);
    }
    /**
     * Gets the actual color to use for the underline element when focused.
    */
    get actualFocusUnderlineColor() {
        return brushToString(this.i.ou);
    }
    set actualFocusUnderlineColor(v) {
        this.i.ou = stringToBrush(v);
    }
    /**
     * Gets the actual opacity to use for the underline element.
    */
    get actualUnderlineOpacity() {
        return this.i.cg;
    }
    set actualUnderlineOpacity(v) {
        this.i.cg = +v;
    }
    /**
     * Gets the actual opacity to use for the underline element when hovered.
    */
    get actualHoverUnderlineOpacity() {
        return this.i.ce;
    }
    set actualHoverUnderlineOpacity(v) {
        this.i.ce = +v;
    }
    /**
     * Gets the actual opacity to use for the underline element when focused.
    */
    get actualFocusUnderlineOpacity() {
        return this.i.cc;
    }
    set actualFocusUnderlineOpacity(v) {
        this.i.cc = +v;
    }
    /**
     * Gets the actual opacity to use for the underline ripple element when focused.
    */
    get actualFocusUnderlineRippleOpacity() {
        return this.i.cd;
    }
    set actualFocusUnderlineRippleOpacity(v) {
        this.i.cd = +v;
    }
    /**
     * Gets the actual opacity to use for the underline ripple element.
    */
    get actualUnderlineRippleOpacity() {
        return this.i.ch;
    }
    set actualUnderlineRippleOpacity(v) {
        this.i.ch = +v;
    }
    /**
     * Gets the actual opacity to use for the underline ripple element.
    */
    get actualBackgroundColor() {
        return brushToString(this.i.or);
    }
    set actualBackgroundColor(v) {
        this.i.or = stringToBrush(v);
    }
    /**
     * Gets or sets the border width to use for the border of the item group.
    */
    get borderWidth() {
        return this.i.cu;
    }
    set borderWidth(v) {
        this.i.cu = +v;
    }
    /**
     * Gets or sets the border width to use for the border of the item group when focused.
    */
    get focusBorderWidth() {
        return this.i.hc;
    }
    set focusBorderWidth(v) {
        this.i.hc = +v;
    }
    /**
     * Gets or sets the color to use the border of the input group.
    */
    get borderColor() {
        return brushToString(this.i.oz);
    }
    set borderColor(v) {
        this.i.oz = stringToBrush(v);
    }
    get cornerRadiusBottomRight() {
        return this.i.m3 ? this.i.m3.b : NaN;
    }
    set cornerRadiusBottomRight(v) {
        this.ensureCornerRadius();
        this.i.m3.b = +v;
        this.i.m3 = this.i.m3;
    }
    get cornerRadiusBottomLeft() {
        return this.i.m3 ? this.i.m3.a : NaN;
    }
    set cornerRadiusBottomLeft(v) {
        this.ensureCornerRadius();
        this.i.m3.a = +v;
        this.i.m3 = this.i.m3;
    }
    get cornerRadiusTopLeft() {
        return this.i.m3 ? this.i.m3.c : NaN;
    }
    set cornerRadiusTopLeft(v) {
        this.ensureCornerRadius();
        this.i.m3.c = +v;
        this.i.m3 = this.i.m3;
    }
    get cornerRadiusTopRight() {
        return this.i.m3 ? this.i.m3.d : NaN;
    }
    set cornerRadiusTopRight(v) {
        this.ensureCornerRadius();
        this.i.m3.d = +v;
        this.i.m3 = this.i.m3;
    }
    ensureCornerRadius() {
        if (this.i.m3) {
            return;
        }
        this.i.m3 = new CornerRadius(2);
    }
    get contentPaddingBottom() {
        return this.i.tj ? this.i.tj.b : NaN;
    }
    set contentPaddingBottom(v) {
        this.ensureContentPadding();
        this.i.tj.b = +v;
        this.i.tj = this.i.tj;
    }
    get contentPaddingLeft() {
        return this.i.tj ? this.i.tj.c : NaN;
    }
    set contentPaddingLeft(v) {
        this.ensureContentPadding();
        this.i.tj.c = +v;
        this.i.tj = this.i.tj;
    }
    get contentPaddingRight() {
        return this.i.tj ? this.i.tj.d : NaN;
    }
    set contentPaddingRight(v) {
        this.ensureContentPadding();
        this.i.tj.d = +v;
        this.i.tj = this.i.tj;
    }
    get contentPaddingTop() {
        return this.i.tj ? this.i.tj.e : NaN;
    }
    set contentPaddingTop(v) {
        this.ensureContentPadding();
        this.i.tj.e = +v;
        this.i.tj = this.i.tj;
    }
    ensureContentPadding() {
        if (this.i.tj) {
            return;
        }
        this.i.tj = new Thickness(2);
    }
    /**
     * Gets or sets the width to use for the underline element.
    */
    get underlineWidth() {
        return this.i.h4;
    }
    set underlineWidth(v) {
        this.i.h4 = +v;
    }
    /**
     * Gets or sets the width to use for the underline element.
    */
    get underlineRippleWidth() {
        return this.i.h3;
    }
    set underlineRippleWidth(v) {
        this.i.h3 = +v;
    }
    /**
     * Gets or sets the width to use for the underline element when hovered.
    */
    get hoverUnderlineWidth() {
        return this.i.hg;
    }
    set hoverUnderlineWidth(v) {
        this.i.hg = +v;
    }
    /**
     * Gets or sets the color to use for the underline element.
    */
    get underlineColor() {
        return brushToString(this.i.s7);
    }
    set underlineColor(v) {
        this.i.s7 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the underline ripple element.
    */
    get underlineRippleColor() {
        return brushToString(this.i.s8);
    }
    set underlineRippleColor(v) {
        this.i.s8 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the underline element.
    */
    get hoverUnderlineColor() {
        return brushToString(this.i.ss);
    }
    set hoverUnderlineColor(v) {
        this.i.ss = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the underline element.
    */
    get focusUnderlineColor() {
        return brushToString(this.i.sr);
    }
    set focusUnderlineColor(v) {
        this.i.sr = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the underline element.
    */
    get underlineOpacity() {
        return this.i.h1;
    }
    set underlineOpacity(v) {
        this.i.h1 = +v;
    }
    /**
     * Gets or sets the color to use for the underline element.
    */
    get hoverUnderlineOpacity() {
        return this.i.hf;
    }
    set hoverUnderlineOpacity(v) {
        this.i.hf = +v;
    }
    /**
     * Gets or sets the color to use for the underline element.
    */
    get focusUnderlineOpacity() {
        return this.i.hd;
    }
    set focusUnderlineOpacity(v) {
        this.i.hd = +v;
    }
    /**
     * Gets or sets the opacity to use for the underline ripple element when focused.
    */
    get focusUnderlineRippleOpacity() {
        return this.i.he;
    }
    set focusUnderlineRippleOpacity(v) {
        this.i.he = +v;
    }
    /**
     * Gets or sets the opacity to use for the underline ripple element.
    */
    get underlineRippleOpacity() {
        return this.i.h2;
    }
    set underlineRippleOpacity(v) {
        this.i.h2 = +v;
    }
    /**
     * Gets or sets the background color to use for the input group.
    */
    get backgroundColor() {
        return brushToString(this.i.oy);
    }
    set backgroundColor(v) {
        this.i.oy = stringToBrush(v);
    }
    /**
     * Gets or sets the border width to use for the border of the item group when using type line.
    */
    get lineTypeBorderWidth() {
        return this.i.hh;
    }
    set lineTypeBorderWidth(v) {
        this.i.hh = +v;
    }
    /**
     * Gets or sets the border width to use for the border of the item group when focused when type is line.
    */
    get lineTypeFocusBorderWidth() {
        return this.i.hi;
    }
    set lineTypeFocusBorderWidth(v) {
        this.i.hi = +v;
    }
    /**
     * Gets or sets the focus color to use the border of the input group when type is line.
    */
    get lineTypeFocusBorderColor() {
        return brushToString(this.i.sv);
    }
    set lineTypeFocusBorderColor(v) {
        this.i.sv = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use the border of the input group when type is line.
    */
    get lineTypeBorderColor() {
        return brushToString(this.i.su);
    }
    set lineTypeBorderColor(v) {
        this.i.su = stringToBrush(v);
    }
    get lineTypeCornerRadiusBottomRight() {
        return this.i.nj ? this.i.nj.b : NaN;
    }
    set lineTypeCornerRadiusBottomRight(v) {
        this.ensureLineTypeCornerRadius();
        this.i.nj.b = +v;
        this.i.nj = this.i.nj;
    }
    get lineTypeCornerRadiusBottomLeft() {
        return this.i.nj ? this.i.nj.a : NaN;
    }
    set lineTypeCornerRadiusBottomLeft(v) {
        this.ensureLineTypeCornerRadius();
        this.i.nj.a = +v;
        this.i.nj = this.i.nj;
    }
    get lineTypeCornerRadiusTopLeft() {
        return this.i.nj ? this.i.nj.c : NaN;
    }
    set lineTypeCornerRadiusTopLeft(v) {
        this.ensureLineTypeCornerRadius();
        this.i.nj.c = +v;
        this.i.nj = this.i.nj;
    }
    get lineTypeCornerRadiusTopRight() {
        return this.i.nj ? this.i.nj.d : NaN;
    }
    set lineTypeCornerRadiusTopRight(v) {
        this.ensureLineTypeCornerRadius();
        this.i.nj.d = +v;
        this.i.nj = this.i.nj;
    }
    ensureLineTypeCornerRadius() {
        if (this.i.nj) {
            return;
        }
        this.i.nj = new CornerRadius(2);
    }
    get lineTypeContentPaddingBottom() {
        return this.i.tz ? this.i.tz.b : NaN;
    }
    set lineTypeContentPaddingBottom(v) {
        this.ensureLineTypeContentPadding();
        this.i.tz.b = +v;
        this.i.tz = this.i.tz;
    }
    get lineTypeContentPaddingLeft() {
        return this.i.tz ? this.i.tz.c : NaN;
    }
    set lineTypeContentPaddingLeft(v) {
        this.ensureLineTypeContentPadding();
        this.i.tz.c = +v;
        this.i.tz = this.i.tz;
    }
    get lineTypeContentPaddingRight() {
        return this.i.tz ? this.i.tz.d : NaN;
    }
    set lineTypeContentPaddingRight(v) {
        this.ensureLineTypeContentPadding();
        this.i.tz.d = +v;
        this.i.tz = this.i.tz;
    }
    get lineTypeContentPaddingTop() {
        return this.i.tz ? this.i.tz.e : NaN;
    }
    set lineTypeContentPaddingTop(v) {
        this.ensureLineTypeContentPadding();
        this.i.tz.e = +v;
        this.i.tz = this.i.tz;
    }
    ensureLineTypeContentPadding() {
        if (this.i.tz) {
            return;
        }
        this.i.tz = new Thickness(2);
    }
    /**
     * Gets or sets the width to use for the underline element when type is line.
    */
    get lineTypeUnderlineWidth() {
        return this.i.hq;
    }
    set lineTypeUnderlineWidth(v) {
        this.i.hq = +v;
    }
    /**
     * Gets or sets the width to use for the underline element when type is line.
    */
    get lineTypeUnderlineRippleWidth() {
        return this.i.hp;
    }
    set lineTypeUnderlineRippleWidth(v) {
        this.i.hp = +v;
    }
    /**
     * Gets or sets the width to use for the underline element when hovered when type is line.
    */
    get lineTypeHoverUnderlineWidth() {
        return this.i.hm;
    }
    set lineTypeHoverUnderlineWidth(v) {
        this.i.hm = +v;
    }
    /**
     * Gets or sets the color to use for the underline element when type is line.
    */
    get lineTypeUnderlineColor() {
        return brushToString(this.i.sy);
    }
    set lineTypeUnderlineColor(v) {
        this.i.sy = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the underline ripple element when type is line.
    */
    get lineTypeUnderlineRippleColor() {
        return brushToString(this.i.sz);
    }
    set lineTypeUnderlineRippleColor(v) {
        this.i.sz = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the underline element when type is line.
    */
    get lineTypeHoverUnderlineColor() {
        return brushToString(this.i.sx);
    }
    set lineTypeHoverUnderlineColor(v) {
        this.i.sx = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the underline element when type is line.
    */
    get lineTypeFocusUnderlineColor() {
        return brushToString(this.i.sw);
    }
    set lineTypeFocusUnderlineColor(v) {
        this.i.sw = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the underline element when type is line.
    */
    get lineTypeUnderlineOpacity() {
        return this.i.hn;
    }
    set lineTypeUnderlineOpacity(v) {
        this.i.hn = +v;
    }
    /**
     * Gets or sets the color to use for the underline element when type is line.
    */
    get lineTypeHoverUnderlineOpacity() {
        return this.i.hl;
    }
    set lineTypeHoverUnderlineOpacity(v) {
        this.i.hl = +v;
    }
    /**
     * Gets or sets the color to use for the underline element when type is line.
    */
    get lineTypeFocusUnderlineOpacity() {
        return this.i.hj;
    }
    set lineTypeFocusUnderlineOpacity(v) {
        this.i.hj = +v;
    }
    /**
     * Gets or sets the opacity to use for the underline ripple element when focused when type is line.
    */
    get lineTypeFocusUnderlineRippleOpacity() {
        return this.i.hk;
    }
    set lineTypeFocusUnderlineRippleOpacity(v) {
        this.i.hk = +v;
    }
    /**
     * Gets or sets the opacity to use for the underline ripple element when type is line.
    */
    get lineTypeUnderlineRippleOpacity() {
        return this.i.ho;
    }
    set lineTypeUnderlineRippleOpacity(v) {
        this.i.ho = +v;
    }
    /**
     * Gets or sets the background color to use for the input group when type is line.
    */
    get lineTypeBackgroundColor() {
        return brushToString(this.i.st);
    }
    set lineTypeBackgroundColor(v) {
        this.i.st = stringToBrush(v);
    }
    /**
     * Gets or sets the border width to use for the border of the item group when using type line.
    */
    get boxTypeBorderWidth() {
        return this.i.cv;
    }
    set boxTypeBorderWidth(v) {
        this.i.cv = +v;
    }
    /**
     * Gets or sets the border width to use for the border of the item group when focused when type is box.
    */
    get boxTypeFocusBorderWidth() {
        return this.i.cw;
    }
    set boxTypeFocusBorderWidth(v) {
        this.i.cw = +v;
    }
    /**
     * Gets or sets the focus color to use the border of the input group when type is box.
    */
    get boxTypeFocusBorderColor() {
        return brushToString(this.i.o9);
    }
    set boxTypeFocusBorderColor(v) {
        this.i.o9 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use the border of the input group when type is box.
    */
    get boxTypeBorderColor() {
        return brushToString(this.i.o8);
    }
    set boxTypeBorderColor(v) {
        this.i.o8 = stringToBrush(v);
    }
    get boxTypeCornerRadiusBottomRight() {
        return this.i.m1 ? this.i.m1.b : NaN;
    }
    set boxTypeCornerRadiusBottomRight(v) {
        this.ensureBoxTypeCornerRadius();
        this.i.m1.b = +v;
        this.i.m1 = this.i.m1;
    }
    get boxTypeCornerRadiusBottomLeft() {
        return this.i.m1 ? this.i.m1.a : NaN;
    }
    set boxTypeCornerRadiusBottomLeft(v) {
        this.ensureBoxTypeCornerRadius();
        this.i.m1.a = +v;
        this.i.m1 = this.i.m1;
    }
    get boxTypeCornerRadiusTopLeft() {
        return this.i.m1 ? this.i.m1.c : NaN;
    }
    set boxTypeCornerRadiusTopLeft(v) {
        this.ensureBoxTypeCornerRadius();
        this.i.m1.c = +v;
        this.i.m1 = this.i.m1;
    }
    get boxTypeCornerRadiusTopRight() {
        return this.i.m1 ? this.i.m1.d : NaN;
    }
    set boxTypeCornerRadiusTopRight(v) {
        this.ensureBoxTypeCornerRadius();
        this.i.m1.d = +v;
        this.i.m1 = this.i.m1;
    }
    ensureBoxTypeCornerRadius() {
        if (this.i.m1) {
            return;
        }
        this.i.m1 = new CornerRadius(2);
    }
    get boxTypeContentPaddingBottom() {
        return this.i.th ? this.i.th.b : NaN;
    }
    set boxTypeContentPaddingBottom(v) {
        this.ensureBoxTypeContentPadding();
        this.i.th.b = +v;
        this.i.th = this.i.th;
    }
    get boxTypeContentPaddingLeft() {
        return this.i.th ? this.i.th.c : NaN;
    }
    set boxTypeContentPaddingLeft(v) {
        this.ensureBoxTypeContentPadding();
        this.i.th.c = +v;
        this.i.th = this.i.th;
    }
    get boxTypeContentPaddingRight() {
        return this.i.th ? this.i.th.d : NaN;
    }
    set boxTypeContentPaddingRight(v) {
        this.ensureBoxTypeContentPadding();
        this.i.th.d = +v;
        this.i.th = this.i.th;
    }
    get boxTypeContentPaddingTop() {
        return this.i.th ? this.i.th.e : NaN;
    }
    set boxTypeContentPaddingTop(v) {
        this.ensureBoxTypeContentPadding();
        this.i.th.e = +v;
        this.i.th = this.i.th;
    }
    ensureBoxTypeContentPadding() {
        if (this.i.th) {
            return;
        }
        this.i.th = new Thickness(2);
    }
    /**
     * Gets or sets the width to use for the underline element when type is box.
    */
    get boxTypeUnderlineWidth() {
        return this.i.c4;
    }
    set boxTypeUnderlineWidth(v) {
        this.i.c4 = +v;
    }
    /**
     * Gets or sets the width to use for the underline element when type is box.
    */
    get boxTypeUnderlineRippleWidth() {
        return this.i.c3;
    }
    set boxTypeUnderlineRippleWidth(v) {
        this.i.c3 = +v;
    }
    /**
     * Gets or sets the width to use for the underline element when hovered when type is box.
    */
    get boxTypeHoverUnderlineWidth() {
        return this.i.c0;
    }
    set boxTypeHoverUnderlineWidth(v) {
        this.i.c0 = +v;
    }
    /**
     * Gets or sets the color to use for the underline element when type is box.
    */
    get boxTypeUnderlineColor() {
        return brushToString(this.i.pc);
    }
    set boxTypeUnderlineColor(v) {
        this.i.pc = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the underline ripple element when type is box.
    */
    get boxTypeUnderlineRippleColor() {
        return brushToString(this.i.pd);
    }
    set boxTypeUnderlineRippleColor(v) {
        this.i.pd = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the underline element when type is box.
    */
    get boxTypeHoverUnderlineColor() {
        return brushToString(this.i.pb);
    }
    set boxTypeHoverUnderlineColor(v) {
        this.i.pb = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the underline element when type is box.
    */
    get boxTypeFocusUnderlineColor() {
        return brushToString(this.i.pa);
    }
    set boxTypeFocusUnderlineColor(v) {
        this.i.pa = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the underline element when type is box.
    */
    get boxTypeUnderlineOpacity() {
        return this.i.c1;
    }
    set boxTypeUnderlineOpacity(v) {
        this.i.c1 = +v;
    }
    /**
     * Gets or sets the color to use for the underline element when type is box.
    */
    get boxTypeHoverUnderlineOpacity() {
        return this.i.cz;
    }
    set boxTypeHoverUnderlineOpacity(v) {
        this.i.cz = +v;
    }
    /**
     * Gets or sets the color to use for the underline element when type is box.
    */
    get boxTypeFocusUnderlineOpacity() {
        return this.i.cx;
    }
    set boxTypeFocusUnderlineOpacity(v) {
        this.i.cx = +v;
    }
    /**
     * Gets or sets the opacity to use for the underline ripple element when focused when type is box.
    */
    get boxTypeFocusUnderlineRippleOpacity() {
        return this.i.cy;
    }
    set boxTypeFocusUnderlineRippleOpacity(v) {
        this.i.cy = +v;
    }
    /**
     * Gets or sets the opacity to use for the underline ripple element when type is box.
    */
    get boxTypeUnderlineRippleOpacity() {
        return this.i.c2;
    }
    set boxTypeUnderlineRippleOpacity(v) {
        this.i.c2 = +v;
    }
    /**
     * Gets or sets the background color to use for the input group when type is box.
    */
    get boxTypeBackgroundColor() {
        return brushToString(this.i.o7);
    }
    set boxTypeBackgroundColor(v) {
        this.i.o7 = stringToBrush(v);
    }
    /**
     * Gets or sets the border width to use for the border of the item group when using type line.
    */
    get borderTypeBorderWidth() {
        return this.i.ck;
    }
    set borderTypeBorderWidth(v) {
        this.i.ck = +v;
    }
    /**
     * Gets or sets the border width to use for the border of the item group when focused when type is border.
    */
    get borderTypeFocusBorderWidth() {
        return this.i.cl;
    }
    set borderTypeFocusBorderWidth(v) {
        this.i.cl = +v;
    }
    /**
     * Gets or sets the focus color to use the border of the input group when type is border.
    */
    get borderTypeFocusBorderColor() {
        return brushToString(this.i.o2);
    }
    set borderTypeFocusBorderColor(v) {
        this.i.o2 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use the border of the input group when type is border.
    */
    get borderTypeBorderColor() {
        return brushToString(this.i.o1);
    }
    set borderTypeBorderColor(v) {
        this.i.o1 = stringToBrush(v);
    }
    get borderTypeCornerRadiusBottomRight() {
        return this.i.m0 ? this.i.m0.b : NaN;
    }
    set borderTypeCornerRadiusBottomRight(v) {
        this.ensureBorderTypeCornerRadius();
        this.i.m0.b = +v;
        this.i.m0 = this.i.m0;
    }
    get borderTypeCornerRadiusBottomLeft() {
        return this.i.m0 ? this.i.m0.a : NaN;
    }
    set borderTypeCornerRadiusBottomLeft(v) {
        this.ensureBorderTypeCornerRadius();
        this.i.m0.a = +v;
        this.i.m0 = this.i.m0;
    }
    get borderTypeCornerRadiusTopLeft() {
        return this.i.m0 ? this.i.m0.c : NaN;
    }
    set borderTypeCornerRadiusTopLeft(v) {
        this.ensureBorderTypeCornerRadius();
        this.i.m0.c = +v;
        this.i.m0 = this.i.m0;
    }
    get borderTypeCornerRadiusTopRight() {
        return this.i.m0 ? this.i.m0.d : NaN;
    }
    set borderTypeCornerRadiusTopRight(v) {
        this.ensureBorderTypeCornerRadius();
        this.i.m0.d = +v;
        this.i.m0 = this.i.m0;
    }
    ensureBorderTypeCornerRadius() {
        if (this.i.m0) {
            return;
        }
        this.i.m0 = new CornerRadius(2);
    }
    get borderTypeContentPaddingBottom() {
        return this.i.tg ? this.i.tg.b : NaN;
    }
    set borderTypeContentPaddingBottom(v) {
        this.ensureBorderTypeContentPadding();
        this.i.tg.b = +v;
        this.i.tg = this.i.tg;
    }
    get borderTypeContentPaddingLeft() {
        return this.i.tg ? this.i.tg.c : NaN;
    }
    set borderTypeContentPaddingLeft(v) {
        this.ensureBorderTypeContentPadding();
        this.i.tg.c = +v;
        this.i.tg = this.i.tg;
    }
    get borderTypeContentPaddingRight() {
        return this.i.tg ? this.i.tg.d : NaN;
    }
    set borderTypeContentPaddingRight(v) {
        this.ensureBorderTypeContentPadding();
        this.i.tg.d = +v;
        this.i.tg = this.i.tg;
    }
    get borderTypeContentPaddingTop() {
        return this.i.tg ? this.i.tg.e : NaN;
    }
    set borderTypeContentPaddingTop(v) {
        this.ensureBorderTypeContentPadding();
        this.i.tg.e = +v;
        this.i.tg = this.i.tg;
    }
    ensureBorderTypeContentPadding() {
        if (this.i.tg) {
            return;
        }
        this.i.tg = new Thickness(2);
    }
    /**
     * Gets or sets the width to use for the underline element when type is border.
    */
    get borderTypeUnderlineWidth() {
        return this.i.ct;
    }
    set borderTypeUnderlineWidth(v) {
        this.i.ct = +v;
    }
    /**
     * Gets or sets the width to use for the underline element when type is border.
    */
    get borderTypeUnderlineRippleWidth() {
        return this.i.cs;
    }
    set borderTypeUnderlineRippleWidth(v) {
        this.i.cs = +v;
    }
    /**
     * Gets or sets the width to use for the underline element when hovered when type is border.
    */
    get borderTypeHoverUnderlineWidth() {
        return this.i.cp;
    }
    set borderTypeHoverUnderlineWidth(v) {
        this.i.cp = +v;
    }
    /**
     * Gets or sets the color to use for the underline element when type is border.
    */
    get borderTypeUnderlineColor() {
        return brushToString(this.i.o5);
    }
    set borderTypeUnderlineColor(v) {
        this.i.o5 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the underline ripple element when type is border.
    */
    get borderTypeUnderlineRippleColor() {
        return brushToString(this.i.o6);
    }
    set borderTypeUnderlineRippleColor(v) {
        this.i.o6 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the underline element when type is border.
    */
    get borderTypeHoverUnderlineColor() {
        return brushToString(this.i.o4);
    }
    set borderTypeHoverUnderlineColor(v) {
        this.i.o4 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the underline element when type is border.
    */
    get borderTypeFocusUnderlineColor() {
        return brushToString(this.i.o3);
    }
    set borderTypeFocusUnderlineColor(v) {
        this.i.o3 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the underline element when type is border.
    */
    get borderTypeUnderlineOpacity() {
        return this.i.cq;
    }
    set borderTypeUnderlineOpacity(v) {
        this.i.cq = +v;
    }
    /**
     * Gets or sets the color to use for the underline element when type is border.
    */
    get borderTypeHoverUnderlineOpacity() {
        return this.i.co;
    }
    set borderTypeHoverUnderlineOpacity(v) {
        this.i.co = +v;
    }
    /**
     * Gets or sets the color to use for the underline element when type is border.
    */
    get borderTypeFocusUnderlineOpacity() {
        return this.i.cm;
    }
    set borderTypeFocusUnderlineOpacity(v) {
        this.i.cm = +v;
    }
    /**
     * Gets or sets the opacity to use for the underline ripple element when focused when type is border.
    */
    get borderTypeFocusUnderlineRippleOpacity() {
        return this.i.cn;
    }
    set borderTypeFocusUnderlineRippleOpacity(v) {
        this.i.cn = +v;
    }
    /**
     * Gets or sets the opacity to use for the underline ripple element when type is border.
    */
    get borderTypeUnderlineRippleOpacity() {
        return this.i.cr;
    }
    set borderTypeUnderlineRippleOpacity(v) {
        this.i.cr = +v;
    }
    /**
     * Gets or sets the background color to use for the input group when type is border.
    */
    get borderTypeBackgroundColor() {
        return brushToString(this.i.o0);
    }
    set borderTypeBackgroundColor(v) {
        this.i.o0 = stringToBrush(v);
    }
    /**
     * Gets or sets the search width to use for the border of the item group when using type line.
    */
    get searchTypeBorderWidth() {
        return this.i.hr;
    }
    set searchTypeBorderWidth(v) {
        this.i.hr = +v;
    }
    /**
     * Gets or sets the search width to use for the border of the item group when focused when type is search.
    */
    get searchTypeFocusBorderWidth() {
        return this.i.hs;
    }
    set searchTypeFocusBorderWidth(v) {
        this.i.hs = +v;
    }
    /**
     * Gets or sets the focus color to use the search of the input group when type is search.
    */
    get searchTypeFocusBorderColor() {
        return brushToString(this.i.s2);
    }
    set searchTypeFocusBorderColor(v) {
        this.i.s2 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use the search of the input group when type is search.
    */
    get searchTypeBorderColor() {
        return brushToString(this.i.s1);
    }
    set searchTypeBorderColor(v) {
        this.i.s1 = stringToBrush(v);
    }
    get searchTypeCornerRadiusBottomRight() {
        return this.i.nk ? this.i.nk.b : NaN;
    }
    set searchTypeCornerRadiusBottomRight(v) {
        this.ensureSearchTypeCornerRadius();
        this.i.nk.b = +v;
        this.i.nk = this.i.nk;
    }
    get searchTypeCornerRadiusBottomLeft() {
        return this.i.nk ? this.i.nk.a : NaN;
    }
    set searchTypeCornerRadiusBottomLeft(v) {
        this.ensureSearchTypeCornerRadius();
        this.i.nk.a = +v;
        this.i.nk = this.i.nk;
    }
    get searchTypeCornerRadiusTopLeft() {
        return this.i.nk ? this.i.nk.c : NaN;
    }
    set searchTypeCornerRadiusTopLeft(v) {
        this.ensureSearchTypeCornerRadius();
        this.i.nk.c = +v;
        this.i.nk = this.i.nk;
    }
    get searchTypeCornerRadiusTopRight() {
        return this.i.nk ? this.i.nk.d : NaN;
    }
    set searchTypeCornerRadiusTopRight(v) {
        this.ensureSearchTypeCornerRadius();
        this.i.nk.d = +v;
        this.i.nk = this.i.nk;
    }
    ensureSearchTypeCornerRadius() {
        if (this.i.nk) {
            return;
        }
        this.i.nk = new CornerRadius(2);
    }
    get searchTypeContentPaddingBottom() {
        return this.i.t0 ? this.i.t0.b : NaN;
    }
    set searchTypeContentPaddingBottom(v) {
        this.ensureSearchTypeContentPadding();
        this.i.t0.b = +v;
        this.i.t0 = this.i.t0;
    }
    get searchTypeContentPaddingLeft() {
        return this.i.t0 ? this.i.t0.c : NaN;
    }
    set searchTypeContentPaddingLeft(v) {
        this.ensureSearchTypeContentPadding();
        this.i.t0.c = +v;
        this.i.t0 = this.i.t0;
    }
    get searchTypeContentPaddingRight() {
        return this.i.t0 ? this.i.t0.d : NaN;
    }
    set searchTypeContentPaddingRight(v) {
        this.ensureSearchTypeContentPadding();
        this.i.t0.d = +v;
        this.i.t0 = this.i.t0;
    }
    get searchTypeContentPaddingTop() {
        return this.i.t0 ? this.i.t0.e : NaN;
    }
    set searchTypeContentPaddingTop(v) {
        this.ensureSearchTypeContentPadding();
        this.i.t0.e = +v;
        this.i.t0 = this.i.t0;
    }
    ensureSearchTypeContentPadding() {
        if (this.i.t0) {
            return;
        }
        this.i.t0 = new Thickness(2);
    }
    /**
     * Gets or sets the width to use for the underline element when type is search.
    */
    get searchTypeUnderlineWidth() {
        return this.i.h0;
    }
    set searchTypeUnderlineWidth(v) {
        this.i.h0 = +v;
    }
    /**
     * Gets or sets the width to use for the underline element when type is search.
    */
    get searchTypeUnderlineRippleWidth() {
        return this.i.hz;
    }
    set searchTypeUnderlineRippleWidth(v) {
        this.i.hz = +v;
    }
    /**
     * Gets or sets the width to use for the underline element when hovered when type is search.
    */
    get searchTypeHoverUnderlineWidth() {
        return this.i.hw;
    }
    set searchTypeHoverUnderlineWidth(v) {
        this.i.hw = +v;
    }
    /**
     * Gets or sets the color to use for the underline element when type is search.
    */
    get searchTypeUnderlineColor() {
        return brushToString(this.i.s5);
    }
    set searchTypeUnderlineColor(v) {
        this.i.s5 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the underline ripple element when type is search.
    */
    get searchTypeUnderlineRippleColor() {
        return brushToString(this.i.s6);
    }
    set searchTypeUnderlineRippleColor(v) {
        this.i.s6 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the underline element when type is search.
    */
    get searchTypeHoverUnderlineColor() {
        return brushToString(this.i.s4);
    }
    set searchTypeHoverUnderlineColor(v) {
        this.i.s4 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the underline element when type is search.
    */
    get searchTypeFocusUnderlineColor() {
        return brushToString(this.i.s3);
    }
    set searchTypeFocusUnderlineColor(v) {
        this.i.s3 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the underline element when type is search.
    */
    get searchTypeUnderlineOpacity() {
        return this.i.hx;
    }
    set searchTypeUnderlineOpacity(v) {
        this.i.hx = +v;
    }
    /**
     * Gets or sets the color to use for the underline element when type is search.
    */
    get searchTypeHoverUnderlineOpacity() {
        return this.i.hv;
    }
    set searchTypeHoverUnderlineOpacity(v) {
        this.i.hv = +v;
    }
    /**
     * Gets or sets the color to use for the underline element when type is search.
    */
    get searchTypeFocusUnderlineOpacity() {
        return this.i.ht;
    }
    set searchTypeFocusUnderlineOpacity(v) {
        this.i.ht = +v;
    }
    /**
     * Gets or sets the opacity to use for the underline ripple element when focused when type is search.
    */
    get searchTypeFocusUnderlineRippleOpacity() {
        return this.i.hu;
    }
    set searchTypeFocusUnderlineRippleOpacity(v) {
        this.i.hu = +v;
    }
    /**
     * Gets or sets the opacity to use for the underline ripple element when type is search.
    */
    get searchTypeUnderlineRippleOpacity() {
        return this.i.hy;
    }
    set searchTypeUnderlineRippleOpacity(v) {
        this.i.hy = +v;
    }
    /**
     * Gets or sets the background color to use for the input group when type is search.
    */
    get searchTypeBackgroundColor() {
        return brushToString(this.i.s0);
    }
    set searchTypeBackgroundColor(v) {
        this.i.s0 = stringToBrush(v);
    }
    /**
     * Gets or sets whether the input group is expanded or not.
    */
    get isExpanded() {
        return this.i.ah;
    }
    set isExpanded(v) {
        this.i.ah = ensureBool(v);
    }
    /**
     * Gets or sets whether the input group is hovered or not.
    */
    get isHovered() {
        return this.i.aj;
    }
    set isHovered(v) {
        this.i.aj = ensureBool(v);
    }
    /**
     * Gets or sets whether the input group is hovered or not.
    */
    get isFocused() {
        return this.i.ai;
    }
    set isFocused(v) {
        this.i.ai = ensureBool(v);
    }
    /**
     * Gets or sets whether the input group is expanded or not.
    */
    get actualIsExpanded() {
        return this.i.ac;
    }
    set actualIsExpanded(v) {
        this.i.ac = ensureBool(v);
    }
    /**
     * Gets or sets the color to use the hovered background of the inputs in the group.
    */
    get focusBorderColor() {
        return brushToString(this.i.sq);
    }
    set focusBorderColor(v) {
        this.i.sq = stringToBrush(v);
    }
    /**
     * Gets or sets the id to use for the checkbox.
    */
    get id() {
        return this.i.ki;
    }
    set id(v) {
        this.i.ki = v;
    }
    /**
     * Gets or sets whether the checkbox is disabled.
    */
    get disabled() {
        return this.i.disabled;
    }
    set disabled(v) {
        this.i.disabled = ensureBool(v);
    }
    findByName(name) {
        if (this.inputs != null && this.inputs.findByName && this.inputs.findByName(name)) {
            return this.inputs.findByName(name);
        }
        return null;
    }
    get hasUserValues() {
        return this._hasUserValues;
    }
    __m(propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    }
    _styling(container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        let genericPrefix = "";
        let typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("InputGroup");
        let additionalPrefixes = [];
        let prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        let b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            let basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            let parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            let parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    }
    onDetachedFromUI() {
        this.i.onDetachedFromUI();
    }
    onAttachedToUI() {
        this.i.onAttachedToUI();
    }
    /**
     * Exports visual information about the current state of the grid.
    
    */
    exportVisualModel() {
        let iv = this.i.ia();
        return (iv);
    }
    /**
     * Returns a serialized copy of the exported visual model
    
    */
    exportSerializedVisualModel() {
        let iv = this.i.j9();
        return (iv);
    }
}
//# sourceMappingURL=igr-input-group.js.map
