import * as React from 'react';
import { Label } from "./Label";
import { ensureEnum, brushToString, stringToBrush, ensureBool, NamePatcher, isValidProp, getModifiedProps } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { IgrInputGroupItem } from './igr-input-group-item';
import { ControlDisplayDensity_$type } from "igniteui-react-core";
import { BaseControlTheme_$type } from "igniteui-react-core";
export class IgrLabel extends IgrInputGroupItem {
    constructor(props) {
        super(props);
        this._wrapper = null;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this._getMainRef = this._getMainRef.bind(this);
        var container;
        if (document) {
            container = document.createElement("div");
        }
        var root;
        root = container;
        if (container != null) {
            root = container;
        }
        this.requestRender = this.requestRender.bind(this);
        this._portalManager = new PortalManager("labelContent", this.requestRender);
        var ren = new ReactRenderer(root, document, true, {}, this._portalManager);
        this._wrapper = ren;
        this._container = this._wrapper.rootWrapper;
        this._container.setStyleProperty("display", "inline-block");
        this._container.setStyleProperty("vertical-align", "middle");
        var label = this.i;
        this._label = label;
        label.provideContainer(ren);
        if (props) {
            this.initializeProperties();
        }
    }
    _getMainRef(ref) {
        this._elRef = ref;
    }
    render() {
        let propChildren = this.props.children;
        let children = [];
        React.Children.forEach(propChildren, (ch) => {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        let div = React.createElement("div", {
            className: "ig-label igr-label",
            ref: this._getMainRef,
            children: children
        });
        return div;
    }
    requestRender() {
        if (this._initialized) {
            this.setState({});
        }
    }
    //private _getLabelPortal(element: DomWrapper, portalCallback: (portal: DomPortal) => void): void {
    //    this._portalManager.getPortal(element, "TemplateContent", portalCallback);
    //}
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    initializeProperties() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    // supports angular themes or custom properties set in CSS
    updateStyle() {
        this._styling(this._elRef, this);
    }
    componentWillUnmount() {
        this._label.destroy();
        this._wrapper.destroy();
    }
    componentDidMount() {
        this._elRef.appendChild(this._container.getNativeElement());
        this.initializeContent();
    }
    initializeContent() {
        this._styling(this._container.getNativeElement(), this);
        this.updateStyle();
    }
    createImplementation() {
        return new Label();
    }
    _onDisplayChanged() {
        this._container.setStyleProperty("display", this.display);
    }
    _onFlexDirectionChanged() {
        this._container.setStyleProperty("flex-direction", this.flexDirection);
    }
    _onFlexGrowChanged() {
        this._container.setStyleProperty("flex-grow", this.flexGrow);
    }
    _onAlignItemsChanged() {
        this._container.setStyleProperty("align-items", this.alignItems);
    }
    /**
                             * @hidden
                             */
    get i() {
        return this._implementation;
    }
    /**
 * Gets or sets the base built in theme to use for the label.
*/
    get baseTheme() {
        return this.i.l;
    }
    set baseTheme(v) {
        this.i.l = ensureEnum(BaseControlTheme_$type, v);
    }
    /**
     * Gets or sets the display density to use for the label.
    */
    get density() {
        return this.i.p;
    }
    set density(v) {
        this.i.p = ensureEnum(ControlDisplayDensity_$type, v);
    }
    /**
     * Gets the actual display density to use for the label.
    */
    get actualDensity() {
        return this.i.o;
    }
    set actualDensity(v) {
        this.i.o = ensureEnum(ControlDisplayDensity_$type, v);
    }
    /**
     * Gets the actual color to use for the text color.
    */
    get actualTextColor() {
        return brushToString(this.i.cw);
    }
    set actualTextColor(v) {
        this.i.cw = stringToBrush(v);
    }
    /**
     * Gets the actual color to use for the text color.
    */
    get actualHighlightTextColor() {
        return brushToString(this.i.ct);
    }
    set actualHighlightTextColor(v) {
        this.i.ct = stringToBrush(v);
    }
    /**
     * Gets the actual color to use for the text color when highlighted and hovered.
    */
    get actualHoverHighlightTextColor() {
        return brushToString(this.i.cu);
    }
    set actualHoverHighlightTextColor(v) {
        this.i.cu = stringToBrush(v);
    }
    /**
     * Gets the actual hover color to use for the text.
    */
    get actualHoverTextColor() {
        return brushToString(this.i.cv);
    }
    set actualHoverTextColor(v) {
        this.i.cv = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the text.
    */
    get textColor() {
        return brushToString(this.i.dc);
    }
    set textColor(v) {
        this.i.dc = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the text.
    */
    get highlightTextColor() {
        return brushToString(this.i.c9);
    }
    set highlightTextColor(v) {
        this.i.c9 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the text.
    */
    get hoverHighlightTextColor() {
        return brushToString(this.i.da);
    }
    set hoverHighlightTextColor(v) {
        this.i.da = stringToBrush(v);
    }
    /**
     * Gets or sets the use for the button.
    */
    get textStyle() {
        if (this.i.y == null) {
            return null;
        }
        return this.i.y.fontString;
    }
    set textStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.y = fi;
    }
    /**
     * Gets or sets the color to use for the hovered text of the button regardless of type.
    */
    get hoverTextColor() {
        return brushToString(this.i.db);
    }
    set hoverTextColor(v) {
        this.i.db = stringToBrush(v);
    }
    /**
     * Gets or sets the id to use for the checkbox.
    */
    get id() {
        return this.i.br;
    }
    set id(v) {
        this.i.br = v;
    }
    /**
     * Gets or sets the id to use for the checkbox.
    */
    get display() {
        return this.i.bf;
    }
    set display(v) {
        this.i.bf = v;
    }
    /**
     * Gets or sets the id to use for the checkbox.
    */
    get flexDirection() {
        return this.i.bi;
    }
    set flexDirection(v) {
        this.i.bi = v;
    }
    /**
     * Gets or sets the flex-grow setting for the button.
    */
    get flexGrow() {
        return this.i.bk;
    }
    set flexGrow(v) {
        this.i.bk = v;
    }
    /**
     * Gets or sets the id to use for the checkbox.
    */
    get alignItems() {
        return this.i.a9;
    }
    set alignItems(v) {
        this.i.a9 = v;
    }
    /**
     * Gets or sets TabIndex to use for the checkbox.
    */
    get tabIndex() {
        return this.i.as;
    }
    set tabIndex(v) {
        this.i.as = +v;
    }
    /**
     * Gets or sets the for attribute to use for the label.
    */
    get for() {
        return this.i.bm;
    }
    set for(v) {
        this.i.bm = v;
    }
    /**
     * Gets or sets the value of the aria-label attribute.
    */
    get ariaLabel() {
        return this.i.bb;
    }
    set ariaLabel(v) {
        this.i.bb = v;
    }
    /**
     * Gets or sets the text for the label.
    */
    get text() {
        return this.i.text;
    }
    set text(v) {
        this.i.text = v;
    }
    /**
     * Gets or sets whether the label is hovered.
    */
    get isHover() {
        return this.i.am;
    }
    set isHover(v) {
        this.i.am = ensureBool(v);
    }
    /**
     * Gets or sets the value for the label.
    */
    get value() {
        return this.i.aq;
    }
    set value(v) {
        this.i.aq = ensureBool(v);
    }
    /**
     * Gets or sets whether the checkbox is disabled.
    */
    get disabled() {
        return this.i.disabled;
    }
    set disabled(v) {
        this.i.disabled = ensureBool(v);
    }
    onDetachedFromUI() {
        this.i.onDetachedFromUI();
    }
    onAttachedToUI() {
        this.i.onAttachedToUI();
    }
    /**
     * Exports visual information about the current state of the grid.
    
    */
    exportVisualModel() {
        let iv = this.i.au();
        return (iv);
    }
    /**
     * Returns a serialized copy of the exported visual model
    
    */
    exportSerializedVisualModel() {
        let iv = this.i.bh();
        return (iv);
    }
}
//# sourceMappingURL=igr-label.js.map
