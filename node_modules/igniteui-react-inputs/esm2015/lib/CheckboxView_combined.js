/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, Delegate_$type, fromEnum, runOn, markType, INotifyPropertyChanged_$type, PropertyChangedEventArgs, enumGetBox } from "igniteui-react-core";
import { Ripple } from "./Ripple";
import { List$1 } from "igniteui-react-core";
import { KeyFrameAnimationFactory } from "igniteui-react-core";
import { AnimationKeyFrameEffect } from "igniteui-react-core";
import { AnimationKeyFrameEffectTiming } from "igniteui-react-core";
import { stringReplace } from "igniteui-react-core";
import { BaseControlTheme_$type } from "igniteui-react-core";
import { CheckboxLabelPosition_$type } from "./CheckboxLabelPosition";
import { ThemeResolver } from "./ThemeResolver";
import { CornerRadius } from "igniteui-react-core";
import { NativeUI } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { CheckboxChangeEventArgs } from "./CheckboxChangeEventArgs";
import { BrushUtil } from "igniteui-react-core";
import { AnimationKeyFrameProperty } from "igniteui-react-core";
import { TransformGroup } from "igniteui-react-core";
import { RotateTransform } from "igniteui-react-core";
import { TranslateTransform } from "igniteui-react-core";
import { CheckboxVisualModelExport } from "./CheckboxVisualModelExport";
import { AppearanceHelper } from "igniteui-react-core";
import { isNaN_ } from "igniteui-react-core";
/**
 * @hidden
 */
export let CheckboxView = /*@__PURE__*/ (() => {
    class CheckboxView extends Base {
        constructor() {
            super();
            this.c = null;
            this.l = null;
            this.f = null;
            this.j = new List$1(Delegate_$type, 0);
            this.g = true;
            this.q = null;
            this.m = null;
            this.p = null;
            this.n = null;
            this.d = null;
            this.o = null;
        }
        ad() {
        }
        i() {
            return true;
        }
        ab(a) {
            if (a == null) {
                for (let b of fromEnum(this.j)) {
                    b();
                }
                this.j.clear();
                return;
            }
            this.l = a;
            this.l.rootWrapper.setStyleProperty("display", "flex");
            this.l.rootWrapper.setStyleProperty("flex-direction", "row");
            this.l.rootWrapper.setStyleProperty("flex-wrap", "no-wrap");
            this.l.rootWrapper.setStyleProperty("align-items", "center");
            let c = this.l.createElement("input");
            this.q = c;
            this.q.addClass("ig-native-checkbox");
            this.q.setStyleProperty("position", "absolute");
            this.q.setStyleProperty("width", "1px");
            this.q.setStyleProperty("height", "1px");
            this.q.setStyleProperty("margin", "-1px");
            this.q.setStyleProperty("border", "none");
            this.q.setStyleProperty("clip", "rect(0, 0, 0, 0)");
            this.q.setStyleProperty("outline", "0");
            this.q.setStyleProperty("pointer-events", "none");
            this.q.setStyleProperty("overflow", "hidden");
            this.q.setStyleProperty("-webkit-appearance", "none");
            this.q.setStyleProperty("-moz-appearance", "none");
            this.q.setStyleProperty("appearance", "none");
            this.q.setAttribute("type", "checkbox");
            this.q.setAttribute("id", this.c.by);
            this.ag();
            this.j.add(c.listen("change", runOn(this, this.v)));
            this.j.add(c.listen("click", runOn(this, this.w)));
            this.j.add(c.listen("focus", runOn(this, this.x)));
            this.j.add(c.listen("blur", runOn(this, this.u)));
            this.l.append(c);
            let d = this.l.createElement("div");
            d.addClass("ig-checkbox-box");
            d.setStyleProperty("width", "1.25em");
            d.setStyleProperty("height", "1.25em");
            d.setStyleProperty("position", "relative");
            this.m = d;
            this.l.append(d);
            let e = this.l.createElement("label");
            e.setAttribute("for", this.c.by);
            e.addClass("ig-checkbox-composite");
            e.setStyleProperty("box-sizing", "border-box");
            e.setStyleProperty("position", "relative");
            e.setStyleProperty("display", "inline-block");
            e.setStyleProperty("cursor", "pointer");
            e.setStyleProperty("width", "1.25em");
            e.setStyleProperty("height", "1.25em");
            e.setStyleProperty("min-width", "1.25em");
            e.setStyleProperty("border-width", "0.125rem");
            e.setStyleProperty("border-style", "solid");
            e.setStyleProperty("border-color", "rgba(0,0,0,0.54)");
            e.setStyleProperty("border-top-color", "rgba(0, 0, 0, 0.54)");
            e.setStyleProperty("border-right-color", "rgba(0, 0, 0, 0.54)");
            e.setStyleProperty("border-bottom-color", "rgba(0, 0, 0, 0.54)");
            e.setStyleProperty("border-left-color", "rgba(0, 0, 0, 0.54)");
            e.setStyleProperty("border-radius", "2px");
            e.setStyleProperty("-webkit-tap-highlight-color", "transparent");
            e.setStyleProperty("overflow", "hidden");
            this.p = e;
            this.m.append(e);
            let f = this.l.createElementNS("svg", "http://www.w3.org/2000/svg");
            f.setAttribute("viewBox", "0 0 24 24");
            f.addClass("ig-checkbox-mark");
            f.setStyleProperty("position", "absolute");
            f.setStyleProperty("top", "0");
            f.setStyleProperty("left", "0");
            f.setStyleProperty("right", "0");
            f.setStyleProperty("bottom", "0");
            f.setStyleProperty("stroke", "#fff");
            f.setStyleProperty("stroke-linecap", "square");
            f.setStyleProperty("stroke-width", "3");
            f.setStyleProperty("stroke-dasharray", "24");
            f.setStyleProperty("stroke-dashoffset", "24");
            f.setStyleProperty("fill", "none");
            f.setStyleProperty("opacity", "0");
            f.setStyleProperty("z-index", "1");
            this.n = f;
            e.append(f);
            let g = this.l.createElementNS("path", "http://www.w3.org/2000/svg");
            g.setAttribute("d", "M4.1,12.7 9,17.6 20.3,6.3");
            f.append(g);
            let h = this.l.createElement("div");
            let i = this.l.getSubRenderer(h);
            h.setStyleProperty("position", "absolute");
            h.setStyleProperty("width", "3em");
            h.setStyleProperty("height", "3em");
            h.setStyleProperty("right", "calc(50% - 1.5em)");
            h.setStyleProperty("top", "calc(50% - 1.5em)");
            h.setStyleProperty("border-radius", "24px");
            h.setStyleProperty("overflow", "hidden");
            let j = new Ripple();
            j.provideContainer(i);
            j.q = d;
            let k = this.l.getExternal(j, this.l.rootWrapper, this.l.getExternal(this.c, null, null));
            j.h = true;
            j.k = true;
            this.d = j;
            d.append(h);
            let l = this.l.createElement("span");
            l.addClass("ig-checkbox-label");
            l.setStyleProperty("font-family", "'Segoe UI', Verdana");
            l.setStyleProperty("font-weight", "400");
            l.setStyleProperty("font-size", "1rem");
            l.setStyleProperty("letter-spacing", ".00937rem");
            l.setStyleProperty("text-transform", "none");
            l.setStyleProperty("line-height", "1.5rem");
            l.setStyleProperty("margin-left", "8px");
            l.setStyleProperty("margin-top", "0");
            l.setStyleProperty("margin-bottom", "0");
            l.setStyleProperty("cursor", "pointer");
            l.setStyleProperty("role", "label");
            this.o = l;
            this.j.add(l.listen("click", runOn(this, this.t)));
            this.l.append(l);
            this.l.getPortal(l, "ChildContent", (m) => {
            }, true);
            this.c.cm();
        }
        t(a) {
            this.c.toggle();
        }
        ag() {
            if (this.i()) {
                let a = this.c.by;
                this.q.setAttribute("name", this.c.b7);
                this.q.setProperty("value", this.c.a5);
                if (this.c.v) {
                    this.q.setAttribute("tabindex", this.c.a0.toString());
                }
                this.q.setProperty("disabled", this.c.disabled);
                this.q.setProperty("indeterminate", this.c.indeterminate);
                this.q.setProperty("checked", this.c.checked);
                this.q.setProperty("required", this.c.az);
                if (this.c.indeterminate) {
                    this.q.setAttribute("aria-checked", "mixed");
                }
                else {
                    this.q.setAttribute("aria-checked", this.c.checked ? "true" : "false");
                }
                this.q.setAttribute("aria-labelledby", this.c.bl);
                this.q.setAttribute("aria-label", this.c.bk);
            }
        }
        ae() {
            if (this.i()) {
                let a = this.c.by;
                this.q.setAttribute("id", a);
                this.p.setAttribute("for", a);
            }
        }
        u(a) {
            this.c.focused = false;
        }
        x(a) {
            this.c.focused = true;
        }
        w(a) {
            a.stopPropagation();
            if (this.h()) {
                let native_ = this.q.getNativeElement();
                native_.blur();
            }
            this.c.toggle();
        }
        h() {
            return false;
        }
        v(a) {
            a.stopPropagation();
        }
        y() {
            if (KeyFrameAnimationFactory.h == null) {
                KeyFrameAnimationFactory.h = this.l;
            }
        }
        a(a) {
            return new AnimationKeyFrameEffect(0, this.p, 0, null, a);
        }
        b(a) {
            return new AnimationKeyFrameEffect(0, this.n, 0, null, a);
        }
        z(a) {
        }
        get r() {
            return this.p;
        }
        get e() {
            return this.d;
        }
        get s() {
            return this.n;
        }
        aa() {
            this.g = true;
            this.j.add(this.q.listen("change", runOn(this, this.v)));
            this.j.add(this.q.listen("click", runOn(this, this.w)));
            this.j.add(this.q.listen("focus", runOn(this, this.x)));
            this.j.add(this.q.listen("blur", runOn(this, this.u)));
            this.j.add(this.o.listen("click", runOn(this, this.t)));
        }
        ac() {
            this.g = false;
            for (let a of fromEnum(this.j)) {
                a();
            }
            this.j.clear();
        }
        af() {
            let model_ = this.c;
            if (model_.externalObject && model_.externalObject.refreshDefaults) {
                model_.externalObject.refreshDefaults();
            }
            ;
        }
        ah(a, b) {
            this.d.ax = a;
            this.d.aw = b;
        }
        k() {
            let a = this.p.getStyleProperty("border-top-width");
            a = stringReplace(a, "px", "");
            return parseFloat(a);
        }
    }
    CheckboxView.$t = /*@__PURE__*/ markType(CheckboxView, 'CheckboxView');
    return CheckboxView;
})();
/**
 * @hidden
 */
export let Checkbox = /*@__PURE__*/ (() => {
    class Checkbox extends Base {
        constructor() {
            super();
            this._view = null;
            this.b = 0;
            this.n = false;
            this.ab = false;
            this.c3 = null;
            this.cy = ThemeResolver.e(Checkbox.c, Checkbox.dm, Checkbox.dh);
            this.c0 = null;
            this.c2 = null;
            this.cx = ThemeResolver.e(Checkbox.c, Checkbox.dl, Checkbox.dg);
            this.c4 = null;
            this.c1 = null;
            this.dr = ThemeResolver.e(Checkbox.c, Checkbox.dn, Checkbox.di);
            this.dd = ThemeResolver.e(Checkbox.c, Checkbox.dk, Checkbox.df);
            this.an = ThemeResolver.b(Checkbox.c, Checkbox.as, Checkbox.ap);
            this.dc = ThemeResolver.e(Checkbox.c, Checkbox.dj, Checkbox.de);
            this.ao = ThemeResolver.b(Checkbox.c, Checkbox.at, Checkbox.aq);
            this.dp = ThemeResolver.e(Checkbox.c, Checkbox.dl, Checkbox.dg);
            this.av = ThemeResolver.b(Checkbox.c, Checkbox.au, Checkbox.ar);
            this.dq = ThemeResolver.e(Checkbox.c, Checkbox.dm, Checkbox.dh);
            this.cz = ThemeResolver.e(Checkbox.c, Checkbox.dn, Checkbox.di);
            this.cw = ThemeResolver.e(Checkbox.c, Checkbox.dk, Checkbox.df);
            this.af = NaN;
            this.ac = ThemeResolver.b(Checkbox.c, Checkbox.as, Checkbox.ap);
            this.ag = NaN;
            this.ah = NaN;
            this.ae = ThemeResolver.b(Checkbox.c, Checkbox.au, Checkbox.ar);
            this.ad = ThemeResolver.b(Checkbox.c, Checkbox.at, Checkbox.aq);
            this.cv = ThemeResolver.e(Checkbox.c, Checkbox.dj, Checkbox.de);
            this.a9 = "ig-native-checkbox-" + Checkbox.a2++;
            this.a8 = "ig-checkbox-" + Checkbox.a1++;
            this.ba = null;
            this.a3 = null;
            this.bb = null;
            this.ay = 0;
            this.o = false;
            this.ax = 0;
            this.r = false;
            this.a7 = null;
            this.a6 = null;
            this.change = null;
            this.g = 0;
            this.l = false;
            this.p = false;
            this.s = false;
            this.q = false;
            this.m = false;
            this.j = null;
            this.k = null;
            this.propertyChanged = null;
            this.ba = this.a8 + "-label";
            this.a7 = this.ba;
            let a = new CheckboxView();
            a.c = this;
            this.view = a;
            this.view.ad();
        }
        get view() {
            return this._view;
        }
        set view(a) {
            this._view = a;
        }
        get d() {
            return this.b;
        }
        set d(a) {
            let b = this.b;
            this.b = a;
            if (b != this.b) {
                this.cl("BaseTheme", enumGetBox(BaseControlTheme_$type, b), enumGetBox(BaseControlTheme_$type, a));
            }
        }
        destroy() {
            this.provideContainer(null);
        }
        cl(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            this.cn(a, b, c);
        }
        cr() {
            this.c7 = this.ds != null ? this.ds : this.dp;
            this.c9 = this.du != null ? this.du : this.dr;
            this.c6 = this.db != null ? this.db : this.dd;
            this.ai = !isNaN_(this.al) ? this.al : this.an;
            this.c5 = this.da != null ? this.da : this.dc;
            this.c8 = this.dt != null ? this.dt : this.dq;
            this.aj = !isNaN_(this.am) ? this.am : this.ao;
            this.ak = !isNaN_(this.aw) ? this.aw : this.av;
        }
        cn(a, b, c) {
            switch (a) {
                case "BaseTheme":
                    this.cu(this.d);
                    this.cr();
                    break;
                case "TickColor":
                    this.c7 = this.ds != null ? this.ds : this.dp;
                    break;
                case "UncheckedBorderColor":
                    this.c9 = this.du != null ? this.du : this.dr;
                    break;
                case "CheckedBorderColor":
                    this.c6 = this.db != null ? this.db : this.dd;
                    break;
                case "BorderWidth":
                    this.ai = !isNaN_(this.al) ? this.al : this.an;
                    break;
                case "CheckedBackgroundColor":
                    this.c5 = this.da != null ? this.da : this.dc;
                    break;
                case "UncheckedBackgroundColor":
                    this.c8 = this.dt != null ? this.dt : this.dq;
                    break;
                case "CornerRadius":
                    this.aj = !isNaN_(this.am) ? this.am : this.ao;
                    break;
                case "TickStrokeWidth":
                    this.ak = !isNaN_(this.aw) ? this.aw : this.av;
                    break;
                case "ActualTickStrokeWidth":
                case "ActualTickColor":
                    this.ct();
                    break;
                case "ActualCheckedBackgroundColor":
                case "ActualUncheckedBackgroundColor":
                case "ActualUncheckedBorderColor":
                case "ActualCheckedBorderColor":
                case "ActualBorderWidth":
                    if (this.j != null) {
                        this.j.cancel();
                    }
                    if (this.k != null) {
                        this.k.cancel();
                    }
                    this.j = null;
                    this.k = null;
                    this.cq();
                    let d = (this.u);
                    this.u = true;
                    this.cs(this.indeterminate);
                    this.u = d;
                    break;
                case "ActualCornerRadius":
                    this.cq();
                    break;
                case "IsChecked":
                    if (!this.n) {
                        let e = this.indeterminate;
                        this.n = true;
                        this.indeterminate = false;
                        this.n = false;
                        let f = (this.u);
                        this.u = true;
                        this.cs(e);
                        this.u = f;
                    }
                    break;
                case "IsIndeterminate":
                    if (!this.n) {
                        this.cs(b);
                    }
                    break;
                case "DisableRipple":
                    this.view.e.i = this.t;
                    break;
                case "InputId":
                    this.view.ae();
                    break;
            }
        }
        cq() {
            let a = this.view.r;
            NativeUI.l(a, new CornerRadius(0, this.aj));
            if (!isNaN_(this.ai)) {
                NativeUI.m(a, new Thickness(0, this.ai));
            }
            if (this.checked) {
                NativeUI.j(a, this.c5);
                NativeUI.k(a, this.c6);
            }
            else {
                NativeUI.j(a, this.c8);
                NativeUI.k(a, this.c9);
            }
        }
        ct() {
            let a = this.view.s;
            NativeUI.v(a, this.c7);
            NativeUI.y(a, this.ak);
        }
        get dt() {
            return this.c3;
        }
        set dt(a) {
            let b = this.c3;
            this.c3 = a;
            if (b != this.c3) {
                this.cl("UncheckedBackgroundColor", b, a);
            }
        }
        get c8() {
            return this.cy;
        }
        set c8(a) {
            let b = this.cy;
            this.cy = a;
            if (b != this.cy) {
                this.cl("ActualUncheckedBackgroundColor", b, a);
            }
        }
        get da() {
            return this.c0;
        }
        set da(a) {
            let b = this.c0;
            this.c0 = a;
            if (b != this.c0) {
                this.cl("CheckedBackgroundColor", b, a);
            }
        }
        get ds() {
            return this.c2;
        }
        set ds(a) {
            let b = this.c2;
            this.c2 = a;
            if (b != this.c2) {
                this.cl("TickColor", b, a);
            }
        }
        get c7() {
            return this.cx;
        }
        set c7(a) {
            let b = this.cx;
            this.cx = a;
            if (b != this.cx) {
                this.cl("ActualTickColor", b, a);
            }
        }
        get du() {
            return this.c4;
        }
        set du(a) {
            let b = this.c4;
            this.c4 = a;
            if (b != this.c4) {
                this.cl("UncheckedBorderColor", b, a);
            }
        }
        get db() {
            return this.c1;
        }
        set db(a) {
            let b = this.c1;
            this.c1 = a;
            if (b != this.c1) {
                this.cl("CheckedBorderColor", b, a);
            }
        }
        cu(a) {
            this.dr = ThemeResolver.e(a, Checkbox.dn, Checkbox.di);
            this.dd = ThemeResolver.e(a, Checkbox.dk, Checkbox.df);
            this.an = ThemeResolver.b(a, Checkbox.as, Checkbox.ap);
            this.dc = ThemeResolver.e(a, Checkbox.dj, Checkbox.de);
            this.ao = ThemeResolver.b(a, Checkbox.at, Checkbox.aq);
            this.dp = ThemeResolver.e(a, Checkbox.dl, Checkbox.dg);
            this.av = ThemeResolver.b(a, Checkbox.au, Checkbox.ar);
            this.dq = ThemeResolver.e(a, Checkbox.dm, Checkbox.dh);
        }
        get c9() {
            return this.cz;
        }
        set c9(a) {
            let b = this.cz;
            this.cz = a;
            if (b != this.cz) {
                this.cl("ActualUncheckedBorderColor", b, a);
            }
        }
        get c6() {
            return this.cw;
        }
        set c6(a) {
            let b = this.cw;
            this.cw = a;
            if (b != this.cw) {
                this.cl("ActualCheckedBorderColor", b, a);
            }
        }
        get al() {
            return this.af;
        }
        set al(a) {
            let b = this.af;
            this.af = a;
            if (b != this.af) {
                this.cl("BorderWidth", b, a);
            }
        }
        get ai() {
            return this.ac;
        }
        set ai(a) {
            let b = this.ac;
            this.ac = a;
            if (b != this.ac) {
                this.cl("ActualBorderWidth", b, a);
            }
        }
        get am() {
            return this.ag;
        }
        set am(a) {
            let b = this.ag;
            this.ag = a;
            if (b != this.ag) {
                this.cl("CornerRadius", b, a);
            }
        }
        get aw() {
            return this.ah;
        }
        set aw(a) {
            let b = this.ah;
            this.ah = a;
            if (b != this.ah) {
                this.cl("TickStrokeWidth", b, a);
            }
        }
        get ak() {
            return this.ae;
        }
        set ak(a) {
            let b = this.ae;
            this.ae = a;
            if (b != this.ae) {
                this.cl("ActualTickStrokeWidth", b, a);
            }
        }
        get aj() {
            return this.ad;
        }
        set aj(a) {
            let b = this.ad;
            this.ad = a;
            if (b != this.ad) {
                this.cl("ActualCornerRadius", b, a);
            }
        }
        get c5() {
            return this.cv;
        }
        set c5(a) {
            let b = this.cv;
            this.cv = a;
            if (b != this.cv) {
                this.cl("ActualCheckedBackgroundColor", b, a);
            }
        }
        get by() {
            return this.a9;
        }
        set by(a) {
            let b = this.a9;
            this.a9 = a;
            if (b != this.a9) {
                this.cl("InputId", b, a);
            }
        }
        get bw() {
            return this.a8;
        }
        set bw(a) {
            let b = this.a8;
            this.a8 = a;
            if (b != this.a8) {
                this.cl("Id", b, a);
            }
        }
        get labelId() {
            return this.ba;
        }
        set labelId(a) {
            let b = this.ba;
            this.ba = a;
            if (b != this.ba) {
                this.cl("LabelId", b, a);
            }
        }
        get a5() {
            return this.a3;
        }
        set a5(a) {
            let b = this.a3;
            this.a3 = a;
            if (b != this.a3) {
                this.cl("Value", b, a);
            }
        }
        get b7() {
            return this.bb;
        }
        set b7(a) {
            let b = this.bb;
            this.bb = a;
            if (b != this.bb) {
                this.cl("Name", b, a);
            }
        }
        get v() {
            return this.o;
        }
        get a0() {
            return this.ay;
        }
        set a0(a) {
            let b = this.ay;
            this.ay = a;
            this.o = true;
            if (b != this.ay) {
                this.cl("TabIndex", b, a);
            }
        }
        get az() {
            return this.ax;
        }
        set az(a) {
            let b = this.ax;
            this.ax = a;
            if (b != this.ax) {
                this.cl("Required", b, a);
            }
        }
        get focused() {
            return this.r;
        }
        set focused(a) {
            let b = this.r;
            this.r = a;
            if (b != this.r) {
                this.cl("IsFocused", b, a);
            }
        }
        get bl() {
            return this.a7;
        }
        set bl(a) {
            let b = this.a7;
            this.a7 = a;
            if (b != this.a7) {
                this.cl("AriaLabelledBy", b, a);
            }
        }
        get bk() {
            return this.a6;
        }
        set bk(a) {
            let b = this.a6;
            this.a6 = a;
            if (b != this.a6) {
                this.cl("AriaLabel", b, a);
            }
        }
        get h() {
            return this.g;
        }
        set h(a) {
            let b = this.g;
            this.g = a;
            if (b != this.g) {
                this.cl("LabelPosition", enumGetBox(CheckboxLabelPosition_$type, b), enumGetBox(CheckboxLabelPosition_$type, a));
            }
        }
        get t() {
            return this.l;
        }
        set t(a) {
            let b = this.l;
            this.l = a;
            if (b != this.l) {
                this.cl("DisableRipple", b, a);
            }
        }
        get checked() {
            return this.p;
        }
        set checked(a) {
            let b = this.p;
            this.p = a;
            if (b != this.p) {
                this.cl("IsChecked", b, a);
            }
        }
        get indeterminate() {
            return this.s;
        }
        set indeterminate(a) {
            let b = this.s;
            this.s = a;
            if (b != this.s) {
                this.cl("IsIndeterminate", b, a);
            }
        }
        get disabled() {
            return this.q;
        }
        set disabled(a) {
            let b = this.q;
            this.q = a;
            if (b != this.q) {
                this.cl("IsDisabled", b, a);
            }
        }
        get u() {
            return this.m;
        }
        set u(a) {
            let b = this.m;
            this.m = a;
            if (b != this.m) {
                this.cl("DisableTransitions", b, a);
            }
        }
        cm() {
            this.ch();
            if (this.checked) {
                this.view.ah(BrushUtil.n(this.c5, 0.6), BrushUtil.n(this.c5, 0.1));
            }
            else {
                this.view.ah(BrushUtil.n(this.c5, 0.6), BrushUtil.n(this.c9, 0.1));
            }
        }
        get a() {
            let a = new AnimationKeyFrameEffectTiming();
            a.g = 300;
            a.b = 0;
            return a;
        }
        ch() {
            this.view.y();
            let a = false;
            if (this.j == null) {
                if (!a) {
                    a = true;
                    this.view.af();
                }
                this.j = KeyFrameAnimationFactory.f.c(this.view.a(this.a).m(new AnimationKeyFrameProperty(2, this.c8), new AnimationKeyFrameProperty(3, this.c9)).m(new AnimationKeyFrameProperty(2, this.c5), new AnimationKeyFrameProperty(3, this.c6)));
                this.k = KeyFrameAnimationFactory.f.c(this.view.b(this.a).m(new AnimationKeyFrameProperty(19, 24), new AnimationKeyFrameProperty(1, 0)).m(new AnimationKeyFrameProperty(19, 0), new AnimationKeyFrameProperty(1, 1)));
            }
        }
        toggle() {
            if (this.disabled) {
                return;
            }
            this.ch();
            this.focused = false;
            this.n = true;
            let a = false;
            if (this.indeterminate) {
                a = true;
                this.checked = true;
            }
            this.indeterminate = false;
            this.checked = !this.checked;
            this.n = false;
            this.cs(a);
            if (this.change != null) {
                let b = new CheckboxChangeEventArgs();
                b.isChecked = this.checked;
                b.isIndeterminate = this.indeterminate;
                this.change(this, b);
            }
        }
        cs(a) {
            this.ch();
            let b = this.checked;
            if (this.indeterminate) {
                b = true;
            }
            let c = 1;
            if (!b) {
                c = -1;
            }
            if (b) {
                this.view.ah(BrushUtil.n(this.c5, 0.6), BrushUtil.n(this.c5, 0.1));
            }
            else {
                this.view.ah(BrushUtil.n(this.c5, 0.6), BrushUtil.n(this.c9, 0.1));
            }
            if (!this.indeterminate) {
                NativeUI.z(this.view.s, null);
            }
            if (this.u || this.indeterminate || a) {
                let d = this.view.r;
                let e = this.view.s;
                if (this.indeterminate) {
                    let f = new TransformGroup();
                    f.j.add(((() => {
                        let $ret = new RotateTransform();
                        $ret.j = 45;
                        return $ret;
                    })()));
                    f.j.add(((() => {
                        let $ret = new TranslateTransform();
                        $ret.j = -this.view.k();
                        return $ret;
                    })()));
                    NativeUI.j(d, this.c5);
                    NativeUI.k(d, this.c6);
                    NativeUI.t(e, 1);
                    NativeUI.x(e, 41);
                    NativeUI.z(e, f);
                }
                else if (b) {
                    NativeUI.j(d, this.c5);
                    NativeUI.k(d, this.c6);
                    NativeUI.t(e, 1);
                    NativeUI.x(e, 0);
                }
                else {
                    NativeUI.j(d, this.c8);
                    NativeUI.k(d, this.c9);
                    NativeUI.t(e, 0);
                    NativeUI.x(e, 24);
                }
                return;
            }
            if ((c > 0 && this.j.playbackRate < 0) || (c < 0 && this.j.playbackRate > 0)) {
                this.j.reverse();
                this.j.finished.f((g) => {
                    if (this.j != null) {
                        this.j.commitStyles();
                    }
                });
                this.k.reverse();
                this.k.finished.f((g) => {
                    if (this.k != null) {
                        this.k.commitStyles();
                    }
                });
            }
            else {
                this.j.play();
                this.j.finished.f((g) => {
                    if (this.j != null) {
                        this.j.commitStyles();
                    }
                });
                this.k.play();
                this.k.finished.f((g) => {
                    if (this.k != null) {
                        this.k.commitStyles();
                    }
                });
            }
        }
        onDetachedFromUI() {
            this.view.ac();
        }
        onAttachedToUI() {
            this.view.aa();
        }
        onContentReady() {
            if (this.indeterminate) {
                this.cs(false);
            }
        }
        aa() {
            return this.view.i();
        }
        a4() {
            return this.e();
        }
        bv() {
            let a = this.e();
            return a.s();
        }
        e() {
            let a = new CheckboxVisualModelExport();
            a.f = this.d;
            a.d = AppearanceHelper.a(this.c8);
            a.c = AppearanceHelper.a(this.c7);
            a.e = AppearanceHelper.a(this.c9);
            a.b = AppearanceHelper.a(this.c6);
            a.o = this.al;
            a.l = this.ai;
            a.p = this.am;
            a.q = this.aw;
            a.n = this.ak;
            a.m = this.aj;
            a.a = AppearanceHelper.a(this.c5);
            a.r = this.a5;
            a.j = this.focused;
            a.g = this.t;
            a.h = this.checked;
            a.k = this.indeterminate;
            a.i = this.disabled;
            return a;
        }
        provideContainer(a) {
            this.view.ab(a);
        }
    }
    Checkbox.$t = /*@__PURE__*/ markType(Checkbox, 'Checkbox', Base.$, [INotifyPropertyChanged_$type]);
    Checkbox.dn = /*@__PURE__*/ BrushUtil.g(138, 0, 0, 0);
    Checkbox.dk = /*@__PURE__*/ BrushUtil.g(138, 0, 0, 0);
    Checkbox.as = NaN;
    Checkbox.dj = /*@__PURE__*/ BrushUtil.g(255, 228, 28, 119);
    Checkbox.at = 2;
    Checkbox.dl = /*@__PURE__*/ BrushUtil.g(255, 255, 255, 255);
    Checkbox.au = 3;
    Checkbox.dm = /*@__PURE__*/ BrushUtil.g(255, 255, 255, 255);
    Checkbox.di = /*@__PURE__*/ BrushUtil.g(255, 153, 153, 153);
    Checkbox.df = /*@__PURE__*/ BrushUtil.g(138, 33, 150, 243);
    Checkbox.ap = NaN;
    Checkbox.de = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    Checkbox.aq = 2;
    Checkbox.dg = /*@__PURE__*/ BrushUtil.g(255, 255, 255, 255);
    Checkbox.ar = 3;
    Checkbox.dh = /*@__PURE__*/ BrushUtil.g(255, 255, 255, 255);
    Checkbox.c = 2;
    Checkbox.a2 = 0;
    Checkbox.a1 = 0;
    return Checkbox;
})();
//# sourceMappingURL=CheckboxView_combined.js.map
