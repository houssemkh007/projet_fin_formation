import * as React from 'react';
import { ensureEnum, brushToString, stringToBrush, initializePropertiesFromCss, NamePatcher, isValidProp, toSpinal, getModifiedProps } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
import { ReactRenderer } from "igniteui-react-core";
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { Calendar } from './Calendar';
import { IgrValueChangedEventArgs } from "./igr-value-changed-event-args";
import { ControlDisplayDensity_$type } from "igniteui-react-core";
import { BaseControlTheme_$type } from "igniteui-react-core";
export class IgrCalendar extends React.Component {
    constructor(props) {
        super(props);
        this._implementation = null;
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        this._valueChanged = null;
        this._valueChanged_wrapped = null;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._getMainRef = this._getMainRef.bind(this);
        this._implementation = this.createImplementation();
        var calendar = this.i;
        this._calendar = calendar;
        calendar.notifySizeChanged();
        if (props) {
            this.initializeProperties();
        }
    }
    set height(value) {
        this._height = value;
        if (this._elRef) {
            this._elRef.style.height = value;
            this._calendar.notifySizeChanged();
        }
    }
    get height() {
        return this._height;
    }
    set width(value) {
        this._width = value;
        if (this._elRef) {
            this._elRef.style.height = value;
            this._calendar.notifySizeChanged();
        }
    }
    get width() {
        return this._width;
    }
    _getMainRef(ref) {
        this._elRef = ref;
        if (this._elRef != null) {
            this._renderer = new ReactRenderer(this._elRef, document, false, null);
            this._calendar.provideContainer(this._renderer);
        }
    }
    render() {
        let children = [];
        let div = React.createElement("div", {
            className: "ig-calendar igr-calendar",
            ref: this._getMainRef,
            children: children
        });
        return div;
    }
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    initializeProperties() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    // supports angular themes or custom properties set in CSS
    updateStyle() {
        this._styling(this._elRef, this);
    }
    componentWillUnmount() {
        this._calendar.destroy();
        if (this._renderer) {
            this._renderer.destroy();
        }
    }
    componentDidMount() {
        this._elRef.style.width = this._width ? this._width : "";
        this._elRef.style.height = this._height ? this._height : "";
        this._calendar.notifySizeChanged();
        this.initializeContent();
    }
    initializeContent() {
        this.updateStyle();
        this.i.notifySizeChanged();
    }
    createImplementation() {
        return new Calendar();
    }
    get i() {
        return this._implementation;
    }
    /**
 * Gets or Sets the value for the calendar.
*/
    get value() {
        return this.i.u;
    }
    set value(v) {
        this.i.u = v;
    }
    /**
     * Gets or sets the display density to use for the calendar.
    */
    get density() {
        return this.i.d;
    }
    set density(v) {
        this.i.d = ensureEnum(ControlDisplayDensity_$type, v);
    }
    /**
     * Gets or sets the base built in theme to use for the calendar.
    */
    get baseTheme() {
        return this.i.b;
    }
    set baseTheme(v) {
        this.i.b = ensureEnum(BaseControlTheme_$type, v);
    }
    /**
     * Gets or Sets the selected date background color
    */
    get backgroundColor() {
        return brushToString(this.i.bv);
    }
    set backgroundColor(v) {
        this.i.bv = stringToBrush(v);
    }
    /**
     * Gets or Sets the selected date background color
    */
    get selectedDateBackgroundColor() {
        return brushToString(this.i.b0);
    }
    set selectedDateBackgroundColor(v) {
        this.i.b0 = stringToBrush(v);
    }
    /**
     * Gets or Sets the selected date background color
    */
    get selectedFocusDateBackgroundColor() {
        return brushToString(this.i.b2);
    }
    set selectedFocusDateBackgroundColor(v) {
        this.i.b2 = stringToBrush(v);
    }
    /**
     * Gets or Sets the focus date background color
    */
    get focusDateBackgroundColor() {
        return brushToString(this.i.bx);
    }
    set focusDateBackgroundColor(v) {
        this.i.bx = stringToBrush(v);
    }
    /**
     * Gets or Sets the focus date background color
    */
    get hoverBackgroundColor() {
        return brushToString(this.i.bz);
    }
    set hoverBackgroundColor(v) {
        this.i.bz = stringToBrush(v);
    }
    /**
     * Gets or Sets the selected date text color
    */
    get textColor() {
        return brushToString(this.i.b3);
    }
    set textColor(v) {
        this.i.b3 = stringToBrush(v);
    }
    /**
     * Gets or Sets the selected date text color
    */
    get selectedDateTextColor() {
        return brushToString(this.i.b1);
    }
    set selectedDateTextColor(v) {
        this.i.b1 = stringToBrush(v);
    }
    /**
     * Gets or Sets the focus date text color
    */
    get focusDateTextColor() {
        return brushToString(this.i.by);
    }
    set focusDateTextColor(v) {
        this.i.by = stringToBrush(v);
    }
    /**
     * Gets or Sets the current date text color
    */
    get currentDateTextColor() {
        return brushToString(this.i.bw);
    }
    set currentDateTextColor(v) {
        this.i.bw = stringToBrush(v);
    }
    /**
     * Gets or sets the font to use for the combobox.
    */
    get textStyle() {
        if (this.i.l == null) {
            return null;
        }
        return this.i.l.fontString;
    }
    set textStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.l = fi;
    }
    get hasUserValues() {
        return this._hasUserValues;
    }
    __m(propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    }
    _styling(container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        let genericPrefix = "";
        let typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("Calendar");
        let additionalPrefixes = [];
        let prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        let b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            let basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            let parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            let parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    }
    /**
 * Exports visual information about the current state of the grid.

*/
    exportVisualModel() {
        let iv = this.i.x();
        return (iv);
    }
    /**
     * Returns a serialized copy of the exported visual model
    
    */
    exportSerializedVisualModel() {
        let iv = this.i.af();
        return (iv);
    }
    /**
     * Called when date is selected.
    */
    get valueChanged() {
        return this._valueChanged;
    }
    set valueChanged(ev) {
        if (this._valueChanged_wrapped !== null) {
            this.i.valueChanged = delegateRemove(this.i.valueChanged, this._valueChanged_wrapped);
            this._valueChanged_wrapped = null;
            this._valueChanged = null;
        }
        this._valueChanged = ev;
        this._valueChanged_wrapped = (o, e) => {
            let outerArgs = new IgrValueChangedEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeValueChanged) {
                this.beforeValueChanged(this, outerArgs);
            }
            if (this._valueChanged) {
                this._valueChanged(this, outerArgs);
            }
        };
        this.i.valueChanged = delegateCombine(this.i.valueChanged, this._valueChanged_wrapped);
    }
}
//# sourceMappingURL=igr-calendar.js.map
