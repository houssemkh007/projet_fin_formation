/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, Delegate_$type, fromEnum, runOn, markType, Point_$type, typeGetValue, INotifyPropertyChanged_$type, PropertyChangedEventArgs, enumGetBox, EventArgs, delegateCombine, typeCast, fromEn, toNullable, Number_$type } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { ScaleTransform } from "igniteui-react-core";
import { NativeUI } from "igniteui-react-core";
import { ControlDisplayDensity_$type } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
import { KeyFrameAnimationFactory } from "igniteui-react-core";
import { AnimationKeyFrameEffect } from "igniteui-react-core";
import { AnimationKeyFrameEffectTiming } from "igniteui-react-core";
import { stringReplace, stringIsNullOrEmpty } from "igniteui-react-core";
import { TransformGroup } from "igniteui-react-core";
import { TranslateTransform } from "igniteui-react-core";
import { SuffixShiftType_$type } from "./SuffixShiftType";
import { PrefixShiftType_$type } from "./PrefixShiftType";
import { LabelShiftType_$type } from "./LabelShiftType";
import { MouseButtonEventArgs } from "igniteui-react-core";
import { KeyEventArgs } from "igniteui-react-core";
import { InputShiftType_$type } from "./InputShiftType";
import { SuffixVisualModelExport } from "./SuffixVisualModelExport";
import { PrefixVisualModelExport } from "./PrefixVisualModelExport";
import { InputGroupDisplayType_$type } from "./InputGroupDisplayType";
import { BaseControlTheme_$type } from "igniteui-react-core";
import { CornerRadius } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { ThemeResolver } from "./ThemeResolver";
import { ObservableCollection$1 } from "igniteui-react-core";
import { AnimationKeyFrameProperty } from "igniteui-react-core";
import { InputGroupVisualModelExport } from "./InputGroupVisualModelExport";
import { AppearanceHelper } from "igniteui-react-core";
import { LabelVisualModelExport } from "./LabelVisualModelExport";
import { InputVisualModelExport } from "./InputVisualModelExport";
import { BrushUtil } from "igniteui-react-core";
import { isNaN_ } from "igniteui-react-core";
import { FontUtil } from "igniteui-react-core";
import { MaskParsingService } from "./MaskParsingService";
import { InputChangeEventArgs } from "./InputChangeEventArgs";
import { MaskOptions } from "./MaskOptions";
/**
 * @hidden
 */
export let InputGroupView = /*@__PURE__*/ (() => {
    class InputGroupView extends Base {
        constructor() {
            super();
            this.d = null;
            this.l = null;
            this.e = null;
            this.i = new List$1(Delegate_$type, 0);
            this.y = null;
            this.f = true;
            this.n = null;
            this.o = null;
            this.p = null;
            this.s = null;
            this.r = null;
            this.q = null;
            this.m = null;
        }
        ag() {
        }
        g() {
            return true;
        }
        get v() {
            return this.n;
        }
        get ao() {
            return null;
        }
        get h() {
            return true;
        }
        ad(a) {
            if (a == null) {
                for (let b of fromEnum(this.i)) {
                    b();
                }
                this.i.clear();
            }
            this.l = a;
            a.rootWrapper.setStyleProperty("position", "relative");
            a.rootWrapper.setStyleProperty("box-sizing", "border-box");
            a.rootWrapper.setStyleProperty("border-width", "0px");
            a.rootWrapper.setStyleProperty("border-style", "solid");
            let c = this.u;
            this.i.add(c.listen("focusin", runOn(this, this.af)));
            this.i.add(c.listen("focusout", runOn(this, this.ai)));
            let d = this.l.createElement("div");
            d.setStyleProperty("position", "absolute");
            d.setStyleProperty("width", "100%");
            d.setStyleProperty("height", "100%");
            d.setStyleProperty("border-style", "solid");
            d.setStyleProperty("box-sizing", "border-box");
            d.setStyleProperty("left", "0px");
            d.setStyleProperty("top", "0px");
            this.l.append(d);
            this.m = d;
            let e = this.l.createElement("div");
            e.addClass("ig-input-content");
            e.setStyleProperty("width", "100%");
            e.setStyleProperty("position", "relative");
            e.setStyleProperty("display", "flex");
            e.setStyleProperty("flex-direction", "row");
            e.setStyleProperty("flex-wrap", "no-wrap");
            e.setStyleProperty("flex-flow", "row nowrap");
            e.setStyleProperty("flex-grow", "1");
            e.setStyleProperty("align-items", "center");
            e.setStyleProperty("padding-top", "1.125rem");
            this.p = e;
            this.i.add(e.listen("click", runOn(this, this.z)));
            this.l.append(e);
            this.l.getPortal(e, "ChildContent", (f) => {
                let comp_ = f.componentRef;
                this.s = comp_;
                this.p.setStyleProperty("flex-direction", "row");
            }, true);
            let f = this.l.createElement("div");
            f.setStyleProperty("position", "absolute");
            f.setStyleProperty("width", "100%");
            f.setStyleProperty("background-color", "rgba(0, 0, 0, 0.54)");
            f.setStyleProperty("height", "1px");
            f.setStyleProperty("pointer-events", "none");
            f.setStyleProperty("left", "0px");
            f.setStyleProperty("bottom", "1px");
            f.setStyleProperty("overflow", "visible");
            let g = this.l.createElement("span");
            g.setStyleProperty("width", "100%");
            g.setStyleProperty("height", "2px");
            g.setStyleProperty("display", "block");
            g.setStyleProperty("pointer-events", "none");
            NativeUI.z(g, ((() => {
                let $ret = new ScaleTransform();
                $ret.l = 0.5;
                $ret.m = 1;
                return $ret;
            })()));
            g.setStyleProperty("opacity", "0");
            this.r = g;
            f.append(this.r);
            this.q = f;
            this.l.append(f);
            this.d.me();
        }
        get u() {
            return this.l.rootWrapper;
        }
        get t() {
            return this.m;
        }
        get w() {
            return this.q;
        }
        get x() {
            return this.r;
        }
        am(a) {
            if (this.y != a) {
                this.y = a;
                if (this.o != null) {
                    this.o.setAttribute("d", this.y);
                }
            }
        }
        al() {
            switch (this.d.g) {
                case 1:
                    this.p.setStyleProperty("padding-top", "1.125rem");
                    break;
                case 2:
                    this.p.setStyleProperty("padding-top", ".94737rem");
                    break;
                case 3:
                    this.p.setStyleProperty("padding-top", ".81818rem");
                    break;
            }
        }
        z(a) {
        }
        ah() {
            if (this.g()) {
            }
        }
        j() {
            let a = this.l.rootWrapper.getStyleProperty("height");
            return parseFloat(stringReplace(a, "px", ""));
        }
        ac() {
            this.f = true;
        }
        ae() {
            this.f = false;
            for (let a of fromEnum(this.i)) {
                a();
            }
            this.i.clear();
        }
        an(a) {
            if (a != null) {
                this.l.rootWrapper.setStyleProperty("font", a.fontString);
            }
        }
        k(a) {
            return a.view.h();
        }
        ab() {
            if (KeyFrameAnimationFactory.h == null) {
                KeyFrameAnimationFactory.h = this.l;
            }
        }
        a(a) {
            return new AnimationKeyFrameEffect(0, this.t, 0, null, a);
        }
        c(a) {
            return new AnimationKeyFrameEffect(0, this.w, 0, null, a);
        }
        b(a) {
            return new AnimationKeyFrameEffect(0, this.r, 0, null, a);
        }
        ak(a) {
        }
        aa(a) {
            this.p.append(a);
        }
        aj(a) {
            this.p.removeChild(a);
        }
        af(a) {
            this.d.ma();
        }
        ai(a) {
            this.d.mc();
        }
    }
    InputGroupView.$t = /*@__PURE__*/ markType(InputGroupView, 'InputGroupView');
    return InputGroupView;
})();
/**
 * @hidden
 */
export let SuffixView = /*@__PURE__*/ (() => {
    class SuffixView extends Base {
        constructor() {
            super();
            this.a = null;
            this.g = null;
            this.b = null;
            this.e = new List$1(Delegate_$type, 0);
            this.c = true;
            this.h = null;
        }
        o() {
        }
        d() {
            return true;
        }
        get r() {
            return null;
        }
        m(a) {
            if (a == null) {
                for (let b of fromEnum(this.e)) {
                    b();
                }
                this.e.clear();
            }
            this.g = a;
            this.g.rootWrapper.setStyleProperty("display", "inline-block");
            let c = this.g.createElement("div");
            c.addClass("ig-suffix-content");
            this.g.append(c);
            c.setStyleProperty("cursor", "pointer");
            this.h = c;
            this.g.getPortal(c, "ChildContent", (d) => {
            }, true);
            this.a.am();
        }
        q() {
            let a = new TransformGroup();
            a.j.add(((() => {
                let $ret = new TranslateTransform();
                $ret.k = this.a.k == 2 ? (this.f() * -0.25) : 0;
                return $ret;
            })()));
            a.j.add(((() => {
                let $ret = new ScaleTransform();
                $ret.l = 1;
                $ret.m = 1;
                return $ret;
            })()));
            NativeUI.z(this.g.rootWrapper, a);
            this.g.rootWrapper.setStyleProperty("transform-origin", "0px 0px");
        }
        f() {
            let a = this.g.rootWrapper.getStyleProperty("height");
            return parseFloat(stringReplace(a, "px", ""));
        }
        p() {
            if (this.d()) {
            }
        }
        i(a) {
            this.a.aj();
        }
        j(a) {
            this.a.ak();
        }
        l() {
            this.c = true;
            this.e.add(this.g.rootWrapper.listen("mouseenter", runOn(this, this.i)));
            this.e.add(this.g.rootWrapper.listen("mouseleave", runOn(this, this.j)));
        }
        n() {
            this.c = false;
            for (let a of fromEnum(this.e)) {
                a();
            }
            this.e.clear();
        }
        k(a) {
            this.h.append(a);
        }
    }
    SuffixView.$t = /*@__PURE__*/ markType(SuffixView, 'SuffixView');
    return SuffixView;
})();
/**
 * @hidden
 */
export let PrefixView = /*@__PURE__*/ (() => {
    class PrefixView extends Base {
        constructor() {
            super();
            this.a = null;
            this.g = null;
            this.b = null;
            this.e = new List$1(Delegate_$type, 0);
            this.c = true;
            this.h = null;
        }
        o() {
        }
        d() {
            return true;
        }
        get r() {
            return null;
        }
        m(a) {
            if (a == null) {
                for (let b of fromEnum(this.e)) {
                    b();
                }
                this.e.clear();
            }
            this.g = a;
            this.g.rootWrapper.setStyleProperty("display", "inline-block");
            let c = this.g.createElement("div");
            c.addClass("ig-prefix-content");
            this.g.append(c);
            c.setStyleProperty("cursor", "pointer");
            this.h = c;
            this.g.getPortal(c, "ChildContent", (d) => {
            }, true);
            this.a.am();
        }
        q() {
            let a = new TransformGroup();
            a.j.add(((() => {
                let $ret = new TranslateTransform();
                $ret.k = this.a.k == 2 ? (this.f() * -0.25) : 0;
                return $ret;
            })()));
            a.j.add(((() => {
                let $ret = new ScaleTransform();
                $ret.l = 1;
                $ret.m = 1;
                return $ret;
            })()));
            NativeUI.z(this.g.rootWrapper, a);
            this.g.rootWrapper.setStyleProperty("transform-origin", "0px 0px");
        }
        f() {
            let a = this.g.rootWrapper.getStyleProperty("height");
            return parseFloat(stringReplace(a, "px", ""));
        }
        p() {
            if (this.d()) {
            }
        }
        i(a) {
            this.a.aj();
        }
        j(a) {
            this.a.ak();
        }
        l() {
            this.c = true;
            this.e.add(this.g.rootWrapper.listen("mouseenter", runOn(this, this.i)));
            this.e.add(this.g.rootWrapper.listen("mouseleave", runOn(this, this.j)));
        }
        n() {
            this.c = false;
            for (let a of fromEnum(this.e)) {
                a();
            }
            this.e.clear();
        }
        k(a) {
            this.h.append(a);
        }
    }
    PrefixView.$t = /*@__PURE__*/ markType(PrefixView, 'PrefixView');
    return PrefixView;
})();
/**
 * @hidden
 */
export let LabelView = /*@__PURE__*/ (() => {
    class LabelView extends Base {
        constructor() {
            super();
            this.b = null;
            this.i = null;
            this.c = null;
            this.g = new List$1(Delegate_$type, 0);
            this.m = null;
            this.d = true;
            this.j = null;
            this.k = null;
        }
        y() {
        }
        e() {
            return true;
        }
        get l() {
            return this.j;
        }
        get ag() {
            return null;
        }
        get f() {
            return true;
        }
        q() {
            if (KeyFrameAnimationFactory.h == null) {
                KeyFrameAnimationFactory.h = this.i;
            }
        }
        a(a) {
            return new AnimationKeyFrameEffect(0, this.i.rootWrapper, 0, null, a);
        }
        t(a) {
            if (a == null) {
                for (let b of fromEnum(this.g)) {
                    b();
                }
                this.g.clear();
            }
            this.i = a;
            this.i.rootWrapper.setStyleProperty("display", "inline-block");
            this.i.rootWrapper.setStyleProperty("position", "relative");
            let c = this.i.createElement("label");
            c.setStyleProperty("position", "relative");
            c.setStyleProperty("display", "inline-block");
            c.setStyleProperty("white-space", "nowrap");
            c.setStyleProperty("text-overflow", "ellipsis");
            c.setStyleProperty("line-height", "1");
            c.setStyleProperty("overflow", "hidden");
            c.setStyleProperty("height", "1.125rem");
            c.setStyleProperty("backface-visibility", "hidden");
            NativeUI.n(this.i.rootWrapper, this.b.cw);
            c.setStyleProperty("outline-style", "none");
            c.setStyleProperty("box-shadow", "none");
            c.setStyleProperty("font-family", "'Segoe UI', Verdana");
            c.setStyleProperty("font-size", "1rem");
            this.j = c;
            this.i.append(this.j);
            this.b.ce();
        }
        ac() {
            this.b.bf = "block";
            let a = new TransformGroup();
            a.j.add(((() => {
                let $ret = new TranslateTransform();
                $ret.k = this.b.s == 0 ? (this.h() * 0.5) : 0;
                return $ret;
            })()));
            a.j.add(((() => {
                let $ret = new ScaleTransform();
                $ret.l = 1;
                $ret.m = 1;
                return $ret;
            })()));
            NativeUI.z(this.i.rootWrapper, a);
            this.j.setStyleProperty("height", "1.125rem");
            this.i.rootWrapper.setStyleProperty("position", "absolute");
            this.i.rootWrapper.setStyleProperty("transform-origin", "0px 0px");
        }
        ad() {
            switch (this.b.o) {
                case 1:
                    this.i.rootWrapper.setStyleProperty("margin-top", "0px");
                    break;
                case 2:
                    this.i.rootWrapper.setStyleProperty("margin-top", "-.125rem");
                    break;
                case 3:
                    this.i.rootWrapper.setStyleProperty("margin-top", "-.25rem");
                    break;
            }
        }
        ab() {
            this.j.setText(this.b.text != null ? this.b.text : "");
        }
        ae(a) {
            if (this.m != a) {
                this.m = a;
                if (this.k != null) {
                    this.k.setAttribute("d", this.m);
                }
            }
        }
        v() {
            if (this.i != null) {
                this.i.rootWrapper.setStyleProperty("display", this.b.bf);
                this.j.setStyleProperty("display", this.b.bf);
                let ext_ = this.i.getExternal(this.b, null, null);
                if (ext_ && ext_._onDisplayChanged) {
                    ext_._onDisplayChanged();
                }
                ;
            }
        }
        r() {
            if (this.i != null) {
                this.i.rootWrapper.setStyleProperty("align-items", this.b.a9);
                this.j.setStyleProperty("align-items", this.b.a9);
                let ext_ = this.i.getExternal(this.b, null, null);
                if (ext_ && ext_._onAlignItemsChanged) {
                    ext_._onAlignItemsChanged();
                }
                ;
            }
        }
        w() {
            if (this.i != null) {
                this.i.rootWrapper.setStyleProperty("flex-direction", this.b.bi);
                this.j.setStyleProperty("flex-direction", this.b.bi);
                let ext_ = this.i.getExternal(this.b, null, null);
                if (ext_ && ext_._onFlexDirectionChanged) {
                    ext_._onFlexDirectionChanged();
                }
                ;
            }
        }
        x() {
            if (this.i != null) {
                this.i.rootWrapper.setStyleProperty("flex-grow", this.b.bk);
                this.j.setStyleProperty("flex-grow", this.b.bk);
                let ext_ = this.i.getExternal(this.b, null, null);
                if (ext_ && ext_._onFlexGrowChanged) {
                    ext_._onFlexGrowChanged();
                }
                ;
            }
        }
        n(a) {
        }
        z() {
            if (this.e()) {
            }
        }
        h() {
            let a = this.i.rootWrapper.getStyleProperty("height");
            return parseFloat(stringReplace(a, "px", ""));
        }
        o(a) {
            this.b.cb();
        }
        p(a) {
            this.b.cc();
        }
        s() {
            this.d = true;
            this.g.add(this.i.rootWrapper.listen("mouseenter", runOn(this, this.o)));
            this.g.add(this.i.rootWrapper.listen("mouseleave", runOn(this, this.p)));
        }
        u() {
            this.d = false;
            for (let a of fromEnum(this.g)) {
                a();
            }
            this.g.clear();
        }
        af(a) {
            if (a != null) {
                this.j.setStyleProperty("font", a.fontString);
            }
        }
        aa(a) {
            NativeUI.n(this.j, a);
        }
    }
    LabelView.$t = /*@__PURE__*/ markType(LabelView, 'LabelView');
    return LabelView;
})();
/**
 * @hidden
 */
export let InputView = /*@__PURE__*/ (() => {
    class InputView extends Base {
        constructor() {
            super();
            this.b = null;
            this.j = null;
            this.c = null;
            this.h = new List$1(Delegate_$type, 0);
            this.e = false;
            this.p = null;
            this.d = true;
            this.k = null;
            this.l = null;
        }
        an() {
        }
        f() {
            return true;
        }
        get o() {
            return this.k;
        }
        get a2() {
            return null;
        }
        get g() {
            return true;
        }
        ak(a) {
            if (a == null) {
                for (let b of fromEnum(this.h)) {
                    b();
                }
                this.h.clear();
            }
            this.j = a;
            this.j.rootWrapper.setStyleProperty("display", "inline-block");
            let c = this.j.createElement("input");
            c.setAttribute("type", this.b.b0);
            c.setStyleProperty("position", "relative");
            c.setStyleProperty("box-sizing", "border-box");
            c.setStyleProperty("display", "inline-block");
            c.setStyleProperty("border", "none");
            c.setStyleProperty("height", "2rem");
            c.setStyleProperty("line-height", "0");
            c.setStyleProperty("width", "100%");
            c.setStyleProperty("min-width", "0");
            c.setStyleProperty("overflow", "visible");
            c.setStyleProperty("background", "transparent");
            c.setStyleProperty("background-position-x", "initial");
            c.setStyleProperty("background-position-y", "initial");
            c.setStyleProperty("background-size", "initial");
            c.setStyleProperty("background-repeat-x", "initial");
            c.setStyleProperty("background-repeat-y", "initial");
            c.setStyleProperty("background-attachment", "initial");
            c.setStyleProperty("background-origin", "initial");
            c.setStyleProperty("background-color", "transparent");
            NativeUI.n(c, this.b.dp);
            c.setStyleProperty("outline-style", "none");
            c.setStyleProperty("box-shadow", "none");
            c.setStyleProperty("border-top", "0.1875rem solid transparent");
            c.setStyleProperty("padding-bottom", "0.1875rem");
            c.setStyleProperty("font-family", "'Segoe UI', Verdana");
            c.setStyleProperty("font-size", "1rem");
            this.h.add(c.listen("change", runOn(this, this.v)));
            this.h.add(c.listen("input", runOn(this, this.w)));
            this.h.add(c.listen("focus", runOn(this, this.ab)));
            this.h.add(c.listen("blur", runOn(this, this.u)));
            this.h.add(c.listen("mouseenter", runOn(this, this.s)));
            this.h.add(c.listen("mouseleave", runOn(this, this.t)));
            this.h.add(c.listen("keydown", runOn(this, this.ac)));
            this.h.add(c.listen("keyup", runOn(this, this.ae)));
            this.h.add(c.listen("keypress", runOn(this, this.ad)));
            this.h.add(c.listen("paste", runOn(this, this.ah)));
            this.h.add(c.listen("dragenter", runOn(this, this.z)));
            this.h.add(c.listen("dragleave", runOn(this, this.aa)));
            this.h.add(c.listen("compositionstart", runOn(this, this.y)));
            this.h.add(c.listen("compositionend", runOn(this, this.x)));
            this.h.add(c.listen("mousedown", runOn(this, this.af)));
            this.h.add(c.listen("mouseup", runOn(this, this.ag)));
            this.k = c;
            this.j.append(this.k);
            this.b.c8();
        }
        at(a) {
            this.k.setAttribute("readonly", a.toString());
        }
        y(a) {
            this.e = true;
            this.b.cq();
        }
        x(a) {
            this.e = false;
            this.b.cp();
        }
        ar() {
            this.k.setAttribute("type", this.b.b0);
            if (this.b.b0 == "date") {
                this.k.setStyleProperty("line-height", "normal");
            }
            else {
                this.k.setStyleProperty("line-height", "0");
            }
        }
        ap() {
            this.k.setAttribute("placeholder", this.b.b7);
        }
        ay() {
            switch (this.b.l) {
                case 1:
                    this.k.setStyleProperty("height", "2rem");
                    this.k.setStyleProperty("font-size", "1rem");
                    break;
                case 2:
                    this.k.setStyleProperty("height", "1.68421rem");
                    this.k.setStyleProperty("font-size", "1rem");
                    break;
                case 3:
                    this.k.setStyleProperty("height", "1.45455rem");
                    this.k.setStyleProperty("font-size", ".95455rem");
                    break;
            }
        }
        ax() {
            let a = new TransformGroup();
            a.j.add(((() => {
                let $ret = new TranslateTransform();
                $ret.k = this.b.r == 2 ? (this.i() * -0.25) : 0;
                return $ret;
            })()));
            a.j.add(((() => {
                let $ret = new ScaleTransform();
                $ret.l = 1;
                $ret.m = 1;
                return $ret;
            })()));
            NativeUI.z(this.j.rootWrapper, a);
            this.j.rootWrapper.setStyleProperty("transform-origin", "0px 0px");
        }
        i() {
            let a = this.j.rootWrapper.getStyleProperty("height");
            let b = parseFloat(stringReplace(a, "px", ""));
            return b;
        }
        as(a) {
            this.k.setProperty("value", a);
        }
        u(a) {
            this.b.cm();
        }
        ab(a) {
            this.b.cu();
        }
        af(a) {
            let b = this.a1(a);
            this.b.c0(b);
            if (b.handled) {
                a.preventDefault();
            }
        }
        ag(a) {
            let b = this.a1(a);
            this.b.c3(b);
            if (b.handled) {
                a.preventDefault();
            }
        }
        a1(a) {
            let b = new MouseButtonEventArgs();
            b.position = { $type: Point_$type, x: a.offsetX, y: a.offsetY };
            return b;
        }
        v(a) {
            this.b.cn();
        }
        w(a) {
            this.b.co();
        }
        ac(a) {
            let b = new KeyEventArgs(0, a);
            this.b.cx(b);
        }
        ae(a) {
            let b = new KeyEventArgs(0, a);
            this.b.cz(b);
        }
        ad(a) {
            let b = new KeyEventArgs(0, a);
            this.b.cy(b);
        }
        ah(a) {
            this.b.c4();
        }
        z(a) {
            this.b.cs();
        }
        aa(a) {
            this.b.ct();
        }
        az(a) {
            if (this.p != a) {
                this.p = a;
                if (this.l != null) {
                    this.l.setAttribute("d", this.p);
                }
            }
        }
        q() {
            return this.k.getProperty("value");
        }
        r(a) {
        }
        n() {
            let a = this.k.getProperty("selectionStart");
            return typeGetValue(a);
        }
        m() {
            let a = this.k.getProperty("selectionEnd");
            return typeGetValue(a);
        }
        aw(a) {
            this.k.setProperty("selectionStart", a);
        }
        au(a) {
            this.k.setProperty("selectionEnd", a);
        }
        ao() {
            if (this.f()) {
            }
        }
        s(a) {
            this.b.c1();
        }
        t(a) {
            this.b.c2();
        }
        aj() {
            this.d = true;
            this.h.add(this.k.listen("change", runOn(this, this.v)));
            this.h.add(this.k.listen("input", runOn(this, this.w)));
            this.h.add(this.k.listen("focus", runOn(this, this.ab)));
            this.h.add(this.k.listen("blur", runOn(this, this.u)));
            this.h.add(this.k.listen("mouseenter", runOn(this, this.s)));
            this.h.add(this.k.listen("mouseleave", runOn(this, this.t)));
            this.h.add(this.k.listen("keydown", runOn(this, this.ac)));
            this.h.add(this.k.listen("paste", runOn(this, this.ah)));
            this.h.add(this.k.listen("dragenter", runOn(this, this.z)));
            this.h.add(this.k.listen("dragleave", runOn(this, this.aa)));
            this.h.add(this.k.listen("compositionstart", runOn(this, this.y)));
            this.h.add(this.k.listen("compositionend", runOn(this, this.x)));
            this.h.add(this.k.listen("mousedown", runOn(this, this.af)));
            this.h.add(this.k.listen("mouseup", runOn(this, this.ag)));
        }
        al() {
            this.d = false;
            for (let a of fromEnum(this.h)) {
                a();
            }
            this.h.clear();
        }
        a0(a) {
            if (a != null) {
                this.k.setStyleProperty("font", a.fontString);
            }
        }
        am() {
            if (this.k != null) {
                this.k.focus(false);
            }
        }
        aq() {
            if (this.k != null) {
                let nativeInput_ = this.k;
                nativeInput_.getNativeElement().select();
            }
        }
        av(a, b) {
            if (this.k != null) {
                let c = this.k.getNativeElement();
                c.setSelectionRange(a, b);
            }
        }
        ai() {
            if (KeyFrameAnimationFactory.h == null) {
                KeyFrameAnimationFactory.h = this.j;
            }
        }
        a(a) {
            return new AnimationKeyFrameEffect(0, this.j.rootWrapper, 0, null, a);
        }
    }
    InputView.$t = /*@__PURE__*/ markType(InputView, 'InputView');
    return InputView;
})();
/**
 * @hidden
 */
export let InputGroupItem = /*@__PURE__*/ (() => {
    class InputGroupItem extends Base {
        constructor() {
            super(...arguments);
            this.c = null;
            this.a = null;
            this.propertyChanged = null;
        }
        get e() {
            return this.c;
        }
        set e(a) {
            let b = this.c;
            this.c = a;
            if (b != this.c) {
                this.g("Name", b, a);
            }
        }
        get b() {
            return this.a;
        }
        set b(a) {
            let b = this.a;
            this.a = a;
            if (b != this.a) {
                this.g("InputGroup", b, a);
            }
        }
        g(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            this.h(a, b, c);
        }
        h(a, b, c) {
        }
    }
    InputGroupItem.$t = /*@__PURE__*/ markType(InputGroupItem, 'InputGroupItem', Base.$, [INotifyPropertyChanged_$type]);
    return InputGroupItem;
})();
/**
 * @hidden
 */
export let Suffix = /*@__PURE__*/ (() => {
    class Suffix extends InputGroupItem {
        constructor() {
            super();
            this._view = null;
            this.j = 0;
            this.v = "ig-suffix-" + Suffix.s++;
            this.u = null;
            this.n = false;
            this.m = false;
            this.o = false;
            let a = new SuffixView();
            a.a = this;
            this.view = a;
            this.view.o();
        }
        get view() {
            return this._view;
        }
        set view(a) {
            this._view = a;
        }
        destroy() {
            this.provideContainer(null);
        }
        get k() {
            return this.j;
        }
        set k(a) {
            let b = this.j;
            this.j = a;
            if (b != this.j) {
                this.g("ShiftType", enumGetBox(SuffixShiftType_$type, b), enumGetBox(SuffixShiftType_$type, a));
            }
        }
        h(a, b, c) {
            super.h(a, b, c);
            switch (a) {
                case "InputGroup":
                    this.ai();
                    break;
                case "ShiftType":
                    this.al();
                    break;
            }
        }
        al() {
            this.view.q();
        }
        ai() {
            this.view.q();
        }
        ap() {
        }
        ao() {
        }
        aj() {
            this.q = true;
        }
        ak() {
            this.q = false;
        }
        get z() {
            return this.v;
        }
        set z(a) {
            let b = this.v;
            this.v = a;
            if (b != this.v) {
                this.g("Id", b, a);
            }
        }
        get w() {
            return this.u;
        }
        set w(a) {
            let b = this.u;
            this.u = a;
            if (b != this.u) {
                this.g("AriaLabel", b, a);
            }
        }
        get q() {
            return this.n;
        }
        set q(a) {
            let b = this.n;
            this.n = a;
            if (b != this.n) {
                this.g("IsHover", b, a);
            }
        }
        get disabled() {
            return this.m;
        }
        set disabled(a) {
            let b = this.m;
            this.m = a;
            if (b != this.m) {
                this.g("IsDisabled", b, a);
            }
        }
        am() {
        }
        onDetachedFromUI() {
            this.view.n();
        }
        onAttachedToUI() {
            this.view.l();
        }
        r() {
            return this.view.d();
        }
        t() {
            return this.i();
        }
        y() {
            let a = this.i();
            return a.e();
        }
        i() {
            let a = new SuffixVisualModelExport();
            a.a = this.k;
            a.c = this.q;
            a.b = this.disabled;
            a.d = this.e;
            return a;
        }
        appendContentChild(a) {
            this.view.k(a);
        }
        provideContainer(a) {
            this.view.m(a);
        }
    }
    Suffix.$t = /*@__PURE__*/ markType(Suffix, 'Suffix', InputGroupItem.$);
    Suffix.s = 0;
    return Suffix;
})();
/**
 * @hidden
 */
export let Prefix = /*@__PURE__*/ (() => {
    class Prefix extends InputGroupItem {
        constructor() {
            super();
            this._view = null;
            this.j = 0;
            this.v = "ig-prefix-" + Prefix.s++;
            this.u = null;
            this.n = false;
            this.m = false;
            this.o = false;
            let a = new PrefixView();
            a.a = this;
            this.view = a;
            this.view.o();
        }
        get view() {
            return this._view;
        }
        set view(a) {
            this._view = a;
        }
        destroy() {
            this.provideContainer(null);
        }
        get k() {
            return this.j;
        }
        set k(a) {
            let b = this.j;
            this.j = a;
            if (b != this.j) {
                this.g("ShiftType", enumGetBox(PrefixShiftType_$type, b), enumGetBox(PrefixShiftType_$type, a));
            }
        }
        h(a, b, c) {
            super.h(a, b, c);
            switch (a) {
                case "InputGroup":
                    this.ai();
                    break;
                case "ShiftType":
                    this.al();
                    break;
            }
        }
        al() {
            this.view.q();
        }
        ai() {
            this.view.q();
        }
        ap() {
        }
        ao() {
        }
        aj() {
            this.q = true;
        }
        ak() {
            this.q = false;
        }
        get z() {
            return this.v;
        }
        set z(a) {
            let b = this.v;
            this.v = a;
            if (b != this.v) {
                this.g("Id", b, a);
            }
        }
        get w() {
            return this.u;
        }
        set w(a) {
            let b = this.u;
            this.u = a;
            if (b != this.u) {
                this.g("AriaLabel", b, a);
            }
        }
        get q() {
            return this.n;
        }
        set q(a) {
            let b = this.n;
            this.n = a;
            if (b != this.n) {
                this.g("IsHover", b, a);
            }
        }
        get disabled() {
            return this.m;
        }
        set disabled(a) {
            let b = this.m;
            this.m = a;
            if (b != this.m) {
                this.g("IsDisabled", b, a);
            }
        }
        am() {
        }
        onDetachedFromUI() {
            this.view.n();
        }
        onAttachedToUI() {
            this.view.l();
        }
        r() {
            return this.view.d();
        }
        t() {
            return this.i();
        }
        y() {
            let a = this.i();
            return a.e();
        }
        i() {
            let a = new PrefixVisualModelExport();
            a.a = this.k;
            a.c = this.q;
            a.b = this.disabled;
            a.d = this.e;
            return a;
        }
        appendContentChild(a) {
            this.view.k(a);
        }
        provideContainer(a) {
            this.view.m(a);
        }
    }
    Prefix.$t = /*@__PURE__*/ markType(Prefix, 'Prefix', InputGroupItem.$);
    Prefix.s = 0;
    return Prefix;
})();
/**
 * @hidden
 */
export let InputGroup = /*@__PURE__*/ (() => {
    class InputGroup extends Base {
        constructor() {
            super();
            this.j = 0;
            this.f = 1;
            this.e = 1;
            this.ad = false;
            this.b = 0;
            this._view = null;
            this.q = null;
            this.o = null;
            this.lostFocus = null;
            this.gotFocus = null;
            this.df = ThemeResolver.b(InputGroup.c, InputGroup.fu, InputGroup.d1);
            this.e5 = ThemeResolver.b(InputGroup.c, InputGroup.f5, InputGroup.ec);
            this.m6 = ThemeResolver.d(InputGroup.c, InputGroup.nf, InputGroup.m9);
            this.tm = ThemeResolver.f(InputGroup.c, InputGroup.tv, InputGroup.tp);
            this.pf = ThemeResolver.e(InputGroup.c, InputGroup.rd, InputGroup.px);
            this.q0 = ThemeResolver.e(InputGroup.c, InputGroup.ru, InputGroup.qe);
            this.q1 = ThemeResolver.e(InputGroup.c, InputGroup.rv, InputGroup.qf);
            this.hb = ThemeResolver.b(InputGroup.c, InputGroup.gx, InputGroup.e4);
            this.ha = ThemeResolver.b(InputGroup.c, InputGroup.gw, InputGroup.e3);
            this.e9 = ThemeResolver.b(InputGroup.c, InputGroup.f9, InputGroup.eg);
            this.so = ThemeResolver.e(InputGroup.c, InputGroup.se, InputGroup.qy);
            this.sp = ThemeResolver.e(InputGroup.c, InputGroup.sf, InputGroup.qz);
            this.q3 = ThemeResolver.e(InputGroup.c, InputGroup.rx, InputGroup.qh);
            this.q2 = ThemeResolver.e(InputGroup.c, InputGroup.rw, InputGroup.qg);
            this.g8 = ThemeResolver.b(InputGroup.c, InputGroup.gu, InputGroup.e1);
            this.e8 = ThemeResolver.b(InputGroup.c, InputGroup.f8, InputGroup.ef);
            this.e6 = ThemeResolver.b(InputGroup.c, InputGroup.f6, InputGroup.ed);
            this.e7 = ThemeResolver.b(InputGroup.c, InputGroup.f7, InputGroup.ee);
            this.g9 = ThemeResolver.b(InputGroup.c, InputGroup.gv, InputGroup.e2);
            this.pe = ThemeResolver.e(InputGroup.c, InputGroup.rc, InputGroup.pw);
            this.fa = ThemeResolver.b(InputGroup.c, InputGroup.ga, InputGroup.eh);
            this.fb = ThemeResolver.b(InputGroup.c, InputGroup.gb, InputGroup.ei);
            this.nc = ThemeResolver.d(InputGroup.c, InputGroup.ng, InputGroup.na);
            this.ts = ThemeResolver.f(InputGroup.c, InputGroup.tw, InputGroup.tq);
            this.q5 = ThemeResolver.e(InputGroup.c, InputGroup.rz, InputGroup.qj);
            this.q6 = ThemeResolver.e(InputGroup.c, InputGroup.r0, InputGroup.qk);
            this.q7 = ThemeResolver.e(InputGroup.c, InputGroup.r1, InputGroup.ql);
            this.fj = ThemeResolver.b(InputGroup.c, InputGroup.gj, InputGroup.eq);
            this.fi = ThemeResolver.b(InputGroup.c, InputGroup.gi, InputGroup.ep);
            this.ff = ThemeResolver.b(InputGroup.c, InputGroup.gf, InputGroup.em);
            this.ra = ThemeResolver.e(InputGroup.c, InputGroup.r4, InputGroup.qo);
            this.rb = ThemeResolver.e(InputGroup.c, InputGroup.r5, InputGroup.qp);
            this.q9 = ThemeResolver.e(InputGroup.c, InputGroup.r3, InputGroup.qn);
            this.q8 = ThemeResolver.e(InputGroup.c, InputGroup.r2, InputGroup.qm);
            this.fg = ThemeResolver.b(InputGroup.c, InputGroup.gg, InputGroup.en);
            this.fe = ThemeResolver.b(InputGroup.c, InputGroup.ge, InputGroup.el);
            this.fc = ThemeResolver.b(InputGroup.c, InputGroup.gc, InputGroup.ej);
            this.fd = ThemeResolver.b(InputGroup.c, InputGroup.gd, InputGroup.ek);
            this.fh = ThemeResolver.b(InputGroup.c, InputGroup.gh, InputGroup.eo);
            this.q4 = ThemeResolver.e(InputGroup.c, InputGroup.ry, InputGroup.qi);
            this.dg = ThemeResolver.b(InputGroup.c, InputGroup.fv, InputGroup.d2);
            this.dh = ThemeResolver.b(InputGroup.c, InputGroup.fw, InputGroup.d3);
            this.m5 = ThemeResolver.d(InputGroup.c, InputGroup.ne, InputGroup.m8);
            this.tl = ThemeResolver.f(InputGroup.c, InputGroup.tu, InputGroup.to);
            this.pp = ThemeResolver.e(InputGroup.c, InputGroup.rn, InputGroup.p7);
            this.pq = ThemeResolver.e(InputGroup.c, InputGroup.ro, InputGroup.p8);
            this.pr = ThemeResolver.e(InputGroup.c, InputGroup.rp, InputGroup.p9);
            this.dq = ThemeResolver.b(InputGroup.c, InputGroup.f4, InputGroup.eb);
            this.dp = ThemeResolver.b(InputGroup.c, InputGroup.f3, InputGroup.ea);
            this.dl = ThemeResolver.b(InputGroup.c, InputGroup.f0, InputGroup.d7);
            this.pu = ThemeResolver.e(InputGroup.c, InputGroup.rs, InputGroup.qc);
            this.pv = ThemeResolver.e(InputGroup.c, InputGroup.rt, InputGroup.qd);
            this.pt = ThemeResolver.e(InputGroup.c, InputGroup.rr, InputGroup.qb);
            this.ps = ThemeResolver.e(InputGroup.c, InputGroup.rq, InputGroup.qa);
            this.dm = ThemeResolver.b(InputGroup.c, InputGroup.f1, InputGroup.d8);
            this.dk = ThemeResolver.b(InputGroup.c, InputGroup.fz, InputGroup.d6);
            this.di = ThemeResolver.b(InputGroup.c, InputGroup.fx, InputGroup.d4);
            this.dj = ThemeResolver.b(InputGroup.c, InputGroup.fy, InputGroup.d5);
            this.dn = ThemeResolver.b(InputGroup.c, InputGroup.f2, InputGroup.d9);
            this.po = ThemeResolver.e(InputGroup.c, InputGroup.rm, InputGroup.p6);
            this.c5 = ThemeResolver.b(InputGroup.c, InputGroup.fk, InputGroup.dr);
            this.c6 = ThemeResolver.b(InputGroup.c, InputGroup.fl, InputGroup.ds);
            this.m4 = ThemeResolver.d(InputGroup.c, InputGroup.nd, InputGroup.m7);
            this.tk = ThemeResolver.f(InputGroup.c, InputGroup.tt, InputGroup.tn);
            this.ph = ThemeResolver.e(InputGroup.c, InputGroup.rf, InputGroup.pz);
            this.pi = ThemeResolver.e(InputGroup.c, InputGroup.rg, InputGroup.p0);
            this.pj = ThemeResolver.e(InputGroup.c, InputGroup.rh, InputGroup.p1);
            this.de = ThemeResolver.b(InputGroup.c, InputGroup.ft, InputGroup.d0);
            this.dd = ThemeResolver.b(InputGroup.c, InputGroup.fs, InputGroup.dz);
            this.da = ThemeResolver.b(InputGroup.c, InputGroup.fp, InputGroup.dw);
            this.pm = ThemeResolver.e(InputGroup.c, InputGroup.rk, InputGroup.p4);
            this.pn = ThemeResolver.e(InputGroup.c, InputGroup.rl, InputGroup.p5);
            this.pl = ThemeResolver.e(InputGroup.c, InputGroup.rj, InputGroup.p3);
            this.pk = ThemeResolver.e(InputGroup.c, InputGroup.ri, InputGroup.p2);
            this.db = ThemeResolver.b(InputGroup.c, InputGroup.fq, InputGroup.dx);
            this.c9 = ThemeResolver.b(InputGroup.c, InputGroup.fo, InputGroup.dv);
            this.c7 = ThemeResolver.b(InputGroup.c, InputGroup.fm, InputGroup.dt);
            this.c8 = ThemeResolver.b(InputGroup.c, InputGroup.fn, InputGroup.du);
            this.dc = ThemeResolver.b(InputGroup.c, InputGroup.fr, InputGroup.dy);
            this.pg = ThemeResolver.e(InputGroup.c, InputGroup.re, InputGroup.py);
            this.gy = ThemeResolver.b(InputGroup.c, InputGroup.gk, InputGroup.er);
            this.gz = ThemeResolver.b(InputGroup.c, InputGroup.gl, InputGroup.es);
            this.ni = ThemeResolver.d(InputGroup.c, InputGroup.nh, InputGroup.nb);
            this.ty = ThemeResolver.f(InputGroup.c, InputGroup.tx, InputGroup.tr);
            this.sh = ThemeResolver.e(InputGroup.c, InputGroup.r7, InputGroup.qr);
            this.si = ThemeResolver.e(InputGroup.c, InputGroup.r8, InputGroup.qs);
            this.sj = ThemeResolver.e(InputGroup.c, InputGroup.r9, InputGroup.qt);
            this.g7 = ThemeResolver.b(InputGroup.c, InputGroup.gt, InputGroup.e0);
            this.g6 = ThemeResolver.b(InputGroup.c, InputGroup.gs, InputGroup.ez);
            this.g3 = ThemeResolver.b(InputGroup.c, InputGroup.gp, InputGroup.ew);
            this.sm = ThemeResolver.e(InputGroup.c, InputGroup.sc, InputGroup.qw);
            this.sn = ThemeResolver.e(InputGroup.c, InputGroup.sd, InputGroup.qx);
            this.sl = ThemeResolver.e(InputGroup.c, InputGroup.sb, InputGroup.qv);
            this.sk = ThemeResolver.e(InputGroup.c, InputGroup.sa, InputGroup.qu);
            this.g4 = ThemeResolver.b(InputGroup.c, InputGroup.gq, InputGroup.ex);
            this.g2 = ThemeResolver.b(InputGroup.c, InputGroup.go, InputGroup.ev);
            this.g0 = ThemeResolver.b(InputGroup.c, InputGroup.gm, InputGroup.et);
            this.g1 = ThemeResolver.b(InputGroup.c, InputGroup.gn, InputGroup.eu);
            this.g5 = ThemeResolver.b(InputGroup.c, InputGroup.gr, InputGroup.ey);
            this.sg = ThemeResolver.e(InputGroup.c, InputGroup.r6, InputGroup.qq);
            this.nm = ThemeResolver.e(InputGroup.c, InputGroup.rd, InputGroup.px);
            this.nn = ThemeResolver.e(InputGroup.c, InputGroup.ru, InputGroup.qe);
            this.am = ThemeResolver.b(InputGroup.c, InputGroup.fu, InputGroup.d1);
            this.an = ThemeResolver.b(InputGroup.c, InputGroup.f5, InputGroup.ec);
            this.mt = ThemeResolver.d(InputGroup.c, InputGroup.nf, InputGroup.m9);
            this.s9 = ThemeResolver.f(InputGroup.c, InputGroup.tv, InputGroup.tp);
            this.av = ThemeResolver.b(InputGroup.c, InputGroup.gx, InputGroup.e4);
            this.au = ThemeResolver.b(InputGroup.c, InputGroup.gw, InputGroup.e3);
            this.ar = ThemeResolver.b(InputGroup.c, InputGroup.f9, InputGroup.eg);
            this.nq = ThemeResolver.e(InputGroup.c, InputGroup.se, InputGroup.qy);
            this.nr = ThemeResolver.e(InputGroup.c, InputGroup.sf, InputGroup.qz);
            this.np = ThemeResolver.e(InputGroup.c, InputGroup.rx, InputGroup.qh);
            this.no = ThemeResolver.e(InputGroup.c, InputGroup.rw, InputGroup.qg);
            this.as = ThemeResolver.b(InputGroup.c, InputGroup.gu, InputGroup.e1);
            this.aq = ThemeResolver.b(InputGroup.c, InputGroup.f8, InputGroup.ef);
            this.ao = ThemeResolver.b(InputGroup.c, InputGroup.f6, InputGroup.ed);
            this.ap = ThemeResolver.b(InputGroup.c, InputGroup.f7, InputGroup.ee);
            this.at = ThemeResolver.b(InputGroup.c, InputGroup.gv, InputGroup.e2);
            this.nl = ThemeResolver.e(InputGroup.c, InputGroup.rc, InputGroup.pw);
            this.a6 = NaN;
            this.bh = NaN;
            this.nt = null;
            this.mw = new CornerRadius(1, NaN, NaN, NaN, NaN);
            this.tc = new Thickness(1, NaN, NaN, NaN, NaN);
            this.b9 = NaN;
            this.b8 = NaN;
            this.bl = NaN;
            this.op = null;
            this.oq = null;
            this.oa = null;
            this.n9 = null;
            this.b6 = NaN;
            this.bk = NaN;
            this.bi = NaN;
            this.bj = NaN;
            this.b7 = NaN;
            this.ns = null;
            this.bm = NaN;
            this.bn = NaN;
            this.od = null;
            this.oc = null;
            this.mx = new CornerRadius(1, NaN, NaN, NaN, NaN);
            this.td = new Thickness(1, NaN, NaN, NaN, NaN);
            this.bv = NaN;
            this.bu = NaN;
            this.br = NaN;
            this.og = null;
            this.oh = null;
            this.of = null;
            this.oe = null;
            this.bs = NaN;
            this.bq = NaN;
            this.bo = NaN;
            this.bp = NaN;
            this.bt = NaN;
            this.ob = null;
            this.a7 = NaN;
            this.a8 = NaN;
            this.n3 = null;
            this.n2 = null;
            this.mv = new CornerRadius(1, NaN, NaN, NaN, NaN);
            this.tb = new Thickness(1, NaN, NaN, NaN, NaN);
            this.bg = NaN;
            this.bf = NaN;
            this.bc = NaN;
            this.n6 = null;
            this.n7 = null;
            this.n5 = null;
            this.n4 = null;
            this.bd = NaN;
            this.bb = NaN;
            this.a9 = NaN;
            this.ba = NaN;
            this.be = NaN;
            this.n1 = null;
            this.aw = NaN;
            this.ax = NaN;
            this.nw = null;
            this.nv = null;
            this.mu = new CornerRadius(1, NaN, NaN, NaN, NaN);
            this.ta = new Thickness(1, NaN, NaN, NaN, NaN);
            this.a5 = NaN;
            this.a4 = NaN;
            this.a1 = NaN;
            this.nz = null;
            this.n0 = null;
            this.ny = null;
            this.nx = null;
            this.a2 = NaN;
            this.a0 = NaN;
            this.ay = NaN;
            this.az = NaN;
            this.a3 = NaN;
            this.nu = null;
            this.bw = NaN;
            this.bx = NaN;
            this.ok = null;
            this.oj = null;
            this.my = new CornerRadius(1, NaN, NaN, NaN, NaN);
            this.te = new Thickness(1, NaN, NaN, NaN, NaN);
            this.b5 = NaN;
            this.b4 = NaN;
            this.b1 = NaN;
            this.on = null;
            this.oo = null;
            this.om = null;
            this.ol = null;
            this.b2 = NaN;
            this.b0 = NaN;
            this.by = NaN;
            this.bz = NaN;
            this.b3 = NaN;
            this.oi = null;
            this.x = false;
            this.t = false;
            this.z = false;
            this.v = false;
            this.y = false;
            this.u = false;
            this.r = false;
            this.n8 = null;
            this.ib = "ig-inputgroup-" + InputGroup.h8++;
            this.w = false;
            this.propertyChanged = null;
            this.l = new InputGroupInputCollection();
            this.p = null;
            this.ab = false;
            this.s = false;
            this.aa = false;
            this.h9 = toNullable(Number_$type, null);
            let a = new InputGroupView();
            a.d = this;
            this.view = a;
            this.view.ag();
            let b = this.l;
            b.collectionChanged = delegateCombine(b.collectionChanged, runOn(this, this.lx));
            let c = this.l;
            c.collectionResetting = delegateCombine(c.collectionResetting, runOn(this, this.ly));
        }
        ly(a, b) {
            this.mm();
        }
        appendContentChild(a) {
            this.view.aa(a);
        }
        mi(a) {
            this.view.aj(a);
        }
        get k() {
            return this.j;
        }
        set k(a) {
            let b = this.j;
            this.j = a;
            if (b != this.j) {
                this.md("DisplayType", enumGetBox(InputGroupDisplayType_$type, b), enumGetBox(InputGroupDisplayType_$type, a));
            }
        }
        get h() {
            return this.f;
        }
        set h(a) {
            let b = this.f;
            this.f = a;
            if (b != this.f) {
                this.md("Density", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, a));
            }
        }
        get g() {
            return this.e;
        }
        set g(a) {
            let b = this.e;
            this.e = a;
            if (b != this.e) {
                this.md("ActualDensity", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, a));
            }
        }
        l3(a) {
            for (let b = 0; b < this.inputs.count; b++) {
                if (typeCast(Label.$, this.inputs._inner[b]) !== null) {
                    a(this.inputs._inner[b]);
                }
            }
        }
        l4(a) {
            for (let b = 0; b < this.inputs.count; b++) {
                if (typeCast(Prefix.$, this.inputs._inner[b]) !== null) {
                    a(this.inputs._inner[b]);
                }
            }
        }
        l2(a) {
            for (let b = 0; b < this.inputs.count; b++) {
                if (typeCast(Input.$, this.inputs._inner[b]) !== null) {
                    a(this.inputs._inner[b]);
                }
            }
        }
        l5(a) {
            for (let b = 0; b < this.inputs.count; b++) {
                if (typeCast(Suffix.$, this.inputs._inner[b]) !== null) {
                    a(this.inputs._inner[b]);
                }
            }
        }
        lx(a, b) {
            if (b.oldItems != null) {
                for (let c of fromEn(b.oldItems)) {
                    let d = c;
                    if (d != null) {
                        d.b = null;
                    }
                }
            }
            if (b.newItems != null) {
                for (let e of fromEn(b.newItems)) {
                    let f = e;
                    if (f != null) {
                        f.b = this;
                    }
                }
            }
            this.mk();
            this.ad = true;
            try {
                this.ms();
            }
            finally {
                this.ad = false;
            }
            this.mp();
            this.mo();
            this.mq();
            this.mr();
            this.mm();
        }
        get d() {
            return this.b;
        }
        set d(a) {
            let b = this.b;
            this.b = a;
            if (b != this.b) {
                this.md("BaseTheme", enumGetBox(BaseControlTheme_$type, b), enumGetBox(BaseControlTheme_$type, a));
            }
        }
        get view() {
            return this._view;
        }
        set view(a) {
            this._view = a;
        }
        destroy() {
            this.provideContainer(null);
        }
        md(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            this.mg(a, b, c);
        }
        mg(a, b, c) {
            switch (a) {
                case "BaseTheme":
                    this.ml(this.d);
                    this.mn();
                    this.l3((d) => d.l = this.d == 0 ? 2 : this.d);
                    break;
                case "ActualBorderColor":
                case "ActualBackgroundColor":
                case "ActualBorderWidth":
                case "ActualFocusBorderColor":
                case "ActualFocusBorderWidth":
                case "ActualCornerRadius":
                case "ActualContentPadding":
                case "ActualUnderlineOpacity":
                case "ActualUnderlineRippleOpacity":
                case "ActualUnderlineRippleWidth":
                case "ActualUnderlineRippleColor":
                case "ActualUnderlineColor":
                case "ActualHoverUnderlineColor":
                case "ActualUnderlineWidth":
                case "ActualHoverUnderlineWidth":
                case "ActualHoverUnderlineOpacity":
                case "ActualFocusUnderlineColor":
                case "ActualFocusUnderlineOpacity":
                case "ActualFocusUnderlineRippleOpacity":
                case "IsHovered":
                    this.aa = true;
                    this.ab = true;
                    this.s = true;
                    this.mm();
                    break;
                case "BorderColor":
                case "BackgroundColor":
                case "BorderWidth":
                case "FocusBorderColor":
                case "FocusBorderWidth":
                case "CornerRadius":
                case "ContentPadding":
                case "UnderlineOpacity":
                case "UnderlineRippleOpacity":
                case "UnderlineRippleWidth":
                case "UnderlineRippleColor":
                case "UnderlineColor":
                case "HoverUnderlineColor":
                case "UnderlineWidth":
                case "HoverUnderlineWidth":
                case "HoverUnderlineOpacity":
                case "FocusUnderlineColor":
                case "FocusUnderlineOpacity":
                case "FocusUnderlineRippleOpacity":
                case "LineTypeBorderColor":
                case "LineTypeBackgroundColor":
                case "LineTypeBorderWidth":
                case "LineTypeFocusBorderColor":
                case "LineTypeFocusBorderWidth":
                case "LineTypeCornerRadius":
                case "LineTypeContentPadding":
                case "LineTypeUnderlineOpacity":
                case "LineTypeUnderlineRippleOpacity":
                case "LineTypeUnderlineRippleWidth":
                case "LineTypeUnderlineRippleColor":
                case "LineTypeUnderlineColor":
                case "LineTypeHoverUnderlineColor":
                case "LineTypeUnderlineWidth":
                case "LineTypeHoverUnderlineWidth":
                case "LineTypeHoverUnderlineOpacity":
                case "LineTypeFocusUnderlineColor":
                case "LineTypeFocusUnderlineOpacity":
                case "LineTypeFocusUnderlineRippleOpacity":
                case "BoxTypeBorderColor":
                case "BoxTypeBackgroundColor":
                case "BoxTypeBorderWidth":
                case "BoxTypeFocusBorderColor":
                case "BoxTypeFocusBorderWidth":
                case "BoxTypeCornerRadius":
                case "BoxTypeContentPadding":
                case "BoxTypeUnderlineOpacity":
                case "BoxTypeUnderlineRippleOpacity":
                case "BoxTypeUnderlineRippleWidth":
                case "BoxTypeUnderlineRippleColor":
                case "BoxTypeUnderlineColor":
                case "BoxTypeHoverUnderlineColor":
                case "BoxTypeUnderlineWidth":
                case "BoxTypeHoverUnderlineWidth":
                case "BoxTypeHoverUnderlineOpacity":
                case "BoxTypeFocusUnderlineColor":
                case "BoxTypeFocusUnderlineOpacity":
                case "BoxTypeFocusUnderlineRippleOpacity":
                case "BorderTypeBorderColor":
                case "BorderTypeBackgroundColor":
                case "BorderTypeBorderWidth":
                case "BorderTypeFocusBorderColor":
                case "BorderTypeFocusBorderWidth":
                case "BorderTypeCornerRadius":
                case "BorderTypeContentPadding":
                case "BorderTypeUnderlineOpacity":
                case "BorderTypeUnderlineRippleOpacity":
                case "BorderTypeUnderlineRippleWidth":
                case "BorderTypeUnderlineRippleColor":
                case "BorderTypeUnderlineColor":
                case "BorderTypeHoverUnderlineColor":
                case "BorderTypeUnderlineWidth":
                case "BorderTypeHoverUnderlineWidth":
                case "BorderTypeHoverUnderlineOpacity":
                case "BorderTypeFocusUnderlineColor":
                case "BorderTypeFocusUnderlineOpacity":
                case "BorderTypeFocusUnderlineRippleOpacity":
                case "DisplayType":
                    this.mn();
                    break;
                case "ActualDensity":
                    this.view.al();
                    this.mn();
                    break;
                case "Density":
                    this.g = this.h == 0 ? 1 : this.h;
                    break;
                case "IsFocused":
                    this.mb();
                    this.mm();
                    break;
                case "IsExpanded":
                    this.t = true;
                    this.ac = this.ah;
                    break;
                case "ActualIsExpanded":
                    this.l6();
                    break;
            }
        }
        static m2(a, b) {
            return new CornerRadius(1, !isNaN_(a.c) ? a.c : b.c, !isNaN_(a.d) ? a.d : b.d, !isNaN_(a.b) ? a.b : b.b, !isNaN_(a.a) ? a.a : b.a);
        }
        static ti(a, b) {
            return new Thickness(1, !isNaN_(a.c) ? a.c : b.c, !isNaN_(a.e) ? a.e : b.e, !isNaN_(a.d) ? a.d : b.d, !isNaN_(a.b) ? a.b : b.b);
        }
        mp() {
            this.l3((a) => {
                a.p = this.g;
                a.l = this.d == 0 ? 2 : this.d;
                switch (this.k) {
                    case 0:
                        a.s = 0;
                        break;
                    case 1:
                        a.s = 1;
                        break;
                    case 2:
                    case 3:
                        a.s = 2;
                        break;
                }
                a.ch(this.ac, false);
            });
        }
        mq() {
            this.l4((a) => {
                switch (this.k) {
                    case 0:
                        a.k = 0;
                        break;
                    case 1:
                        a.k = 1;
                        break;
                    case 2:
                    case 3:
                        a.k = 2;
                        break;
                }
            });
        }
        mo() {
            this.l2((a) => {
                a.m = this.g;
                switch (this.k) {
                    case 0:
                        a.r = 0;
                        break;
                    case 1:
                        a.r = 1;
                        break;
                    case 2:
                    case 3:
                        a.r = 2;
                        break;
                }
                a.dc(this.al, false);
            });
        }
        mr() {
            this.l5((a) => {
                switch (this.k) {
                    case 0:
                        a.k = 0;
                        break;
                    case 1:
                        a.k = 1;
                        break;
                    case 2:
                    case 3:
                        a.k = 2;
                        break;
                }
            });
        }
        mn() {
            this.mp();
            this.mo();
            this.mq();
            this.mr();
            switch (this.k) {
                case 0:
                    this.os = this.oz != null ? this.oz : this.su != null ? this.su : this.q5;
                    this.or = this.oy != null ? this.oy : this.st != null ? this.st : this.q4;
                    this.ca = !isNaN_(this.cu) ? this.cu : !isNaN_(this.hh) ? this.hh : this.fa;
                    this.ot = this.sq != null ? this.sq : this.sv != null ? this.sv : this.q6;
                    this.cb = !isNaN_(this.hc) ? this.hc : !isNaN_(this.hi) ? this.hi : this.fb;
                    this.mz = InputGroup.m2(this.m3, InputGroup.m2(this.nj, this.nc));
                    this.tf = InputGroup.ti(this.tj, InputGroup.ti(this.tz, this.ts));
                    this.cg = !isNaN_(this.h1) ? this.h1 : !isNaN_(this.hn) ? this.hn : this.fg;
                    this.ch = !isNaN_(this.h2) ? this.h2 : !isNaN_(this.ho) ? this.ho : this.fh;
                    this.ci = !isNaN_(this.h3) ? this.h3 : !isNaN_(this.hp) ? this.hp : this.fi;
                    this.ox = this.s8 != null ? this.s8 : this.sz != null ? this.sz : this.rb;
                    this.ow = this.s7 != null ? this.s7 : this.sy != null ? this.sy : this.ra;
                    this.ov = this.ss != null ? this.ss : this.sx != null ? this.sx : this.q9;
                    this.cj = !isNaN_(this.h4) ? this.h4 : !isNaN_(this.hq) ? this.hq : this.fj;
                    this.cf = !isNaN_(this.hg) ? this.hg : !isNaN_(this.hm) ? this.hm : this.ff;
                    this.ce = !isNaN_(this.hf) ? this.hf : !isNaN_(this.hl) ? this.hl : this.fe;
                    this.ou = this.sr != null ? this.sr : this.sw != null ? this.sw : this.q8;
                    this.cc = !isNaN_(this.hd) ? this.hd : !isNaN_(this.hj) ? this.hj : this.fc;
                    this.cd = !isNaN_(this.he) ? this.he : !isNaN_(this.hk) ? this.hk : this.fd;
                    break;
                case 1:
                    this.os = this.oz != null ? this.oz : this.o8 != null ? this.o8 : this.pp;
                    this.or = this.oy != null ? this.oy : this.o7 != null ? this.o7 : this.po;
                    this.ca = !isNaN_(this.cu) ? this.cu : !isNaN_(this.cv) ? this.cv : this.dg;
                    this.ot = this.sq != null ? this.sq : this.o9 != null ? this.o9 : this.pq;
                    this.cb = !isNaN_(this.hc) ? this.hc : !isNaN_(this.cw) ? this.cw : this.dh;
                    this.mz = InputGroup.m2(this.m3, InputGroup.m2(this.m1, this.m5));
                    this.tf = InputGroup.ti(this.tj, InputGroup.ti(this.th, this.tl));
                    this.cg = !isNaN_(this.h1) ? this.h1 : !isNaN_(this.c1) ? this.c1 : this.dm;
                    this.ch = !isNaN_(this.h2) ? this.h2 : !isNaN_(this.c2) ? this.c2 : this.dn;
                    this.ci = !isNaN_(this.h3) ? this.h3 : !isNaN_(this.c3) ? this.c3 : this.dp;
                    this.ox = this.s8 != null ? this.s8 : this.pd != null ? this.pd : this.pv;
                    this.ow = this.s7 != null ? this.s7 : this.pc != null ? this.pc : this.pu;
                    this.ov = this.ss != null ? this.ss : this.pb != null ? this.pb : this.pt;
                    this.cj = !isNaN_(this.h4) ? this.h4 : !isNaN_(this.c4) ? this.c4 : this.dq;
                    this.cf = !isNaN_(this.hg) ? this.hg : !isNaN_(this.c0) ? this.c0 : this.dl;
                    this.ce = !isNaN_(this.hf) ? this.hf : !isNaN_(this.cz) ? this.cz : this.dk;
                    this.ou = this.sr != null ? this.sr : this.pa != null ? this.pa : this.ps;
                    this.cc = !isNaN_(this.hd) ? this.hd : !isNaN_(this.cx) ? this.cx : this.di;
                    this.cd = !isNaN_(this.he) ? this.he : !isNaN_(this.cy) ? this.cy : this.dj;
                    break;
                case 2:
                    this.os = this.oz != null ? this.oz : this.o1 != null ? this.o1 : this.ph;
                    this.or = this.oy != null ? this.oy : this.o0 != null ? this.o0 : this.pg;
                    this.ca = !isNaN_(this.cu) ? this.cu : !isNaN_(this.ck) ? this.ck : this.c5;
                    this.ot = this.sq != null ? this.sq : this.o2 != null ? this.o2 : this.pi;
                    this.cb = !isNaN_(this.hc) ? this.hc : !isNaN_(this.cl) ? this.cl : this.c6;
                    this.mz = InputGroup.m2(this.m3, InputGroup.m2(this.m0, this.m4));
                    this.tf = InputGroup.ti(this.tj, InputGroup.ti(this.tg, this.tk));
                    this.cg = !isNaN_(this.h1) ? this.h1 : !isNaN_(this.cq) ? this.cq : this.db;
                    this.ch = !isNaN_(this.h2) ? this.h2 : !isNaN_(this.cr) ? this.cr : this.dc;
                    this.ci = !isNaN_(this.h3) ? this.h3 : !isNaN_(this.cs) ? this.cs : this.dd;
                    this.ox = this.s8 != null ? this.s8 : this.o6 != null ? this.o6 : this.pn;
                    this.ow = this.s7 != null ? this.s7 : this.o5 != null ? this.o5 : this.pm;
                    this.ov = this.ss != null ? this.ss : this.o4 != null ? this.o4 : this.pl;
                    this.cj = !isNaN_(this.h4) ? this.h4 : !isNaN_(this.ct) ? this.ct : this.de;
                    this.cf = !isNaN_(this.hg) ? this.hg : !isNaN_(this.cp) ? this.cp : this.da;
                    this.ce = !isNaN_(this.hf) ? this.hf : !isNaN_(this.co) ? this.co : this.c9;
                    this.ou = this.sr != null ? this.sr : this.o3 != null ? this.o3 : this.pk;
                    this.cc = !isNaN_(this.hd) ? this.hd : !isNaN_(this.cm) ? this.cm : this.c7;
                    this.cd = !isNaN_(this.he) ? this.he : !isNaN_(this.cn) ? this.cn : this.c8;
                    break;
                case 3:
                    this.os = this.oz != null ? this.oz : this.s1 != null ? this.s1 : this.sh;
                    this.or = this.oy != null ? this.oy : this.s0 != null ? this.s0 : this.sg;
                    this.ca = !isNaN_(this.cu) ? this.cu : !isNaN_(this.hr) ? this.hr : this.gy;
                    this.ot = this.sq != null ? this.sq : this.s2 != null ? this.s2 : this.si;
                    this.cb = !isNaN_(this.hc) ? this.hc : !isNaN_(this.hs) ? this.hs : this.gz;
                    this.mz = InputGroup.m2(this.m3, InputGroup.m2(this.nk, this.ni));
                    this.tf = InputGroup.ti(this.tj, InputGroup.ti(this.t0, this.ty));
                    this.cg = !isNaN_(this.h1) ? this.h1 : !isNaN_(this.hx) ? this.hx : this.g4;
                    this.ch = !isNaN_(this.h2) ? this.h2 : !isNaN_(this.hy) ? this.hy : this.g5;
                    this.ci = !isNaN_(this.h3) ? this.h3 : !isNaN_(this.hz) ? this.hz : this.g6;
                    this.ox = this.s8 != null ? this.s8 : this.s6 != null ? this.s6 : this.sn;
                    this.ow = this.s7 != null ? this.s7 : this.s5 != null ? this.s5 : this.sm;
                    this.ov = this.ss != null ? this.ss : this.s4 != null ? this.s4 : this.sl;
                    this.cj = !isNaN_(this.h4) ? this.h4 : !isNaN_(this.h0) ? this.h0 : this.g7;
                    this.cf = !isNaN_(this.hg) ? this.hg : !isNaN_(this.hw) ? this.hw : this.g3;
                    this.ce = !isNaN_(this.hf) ? this.hf : !isNaN_(this.hv) ? this.hv : this.g2;
                    this.ou = this.sr != null ? this.sr : this.s3 != null ? this.s3 : this.sk;
                    this.cc = !isNaN_(this.hd) ? this.hd : !isNaN_(this.ht) ? this.ht : this.g0;
                    this.cd = !isNaN_(this.he) ? this.he : !isNaN_(this.hu) ? this.hu : this.g1;
                    break;
            }
        }
        mm() {
            this.l3((a) => {
            });
            this.l2((a) => {
            });
            let a = this.view.u;
            let b = this.view.t;
            let c = this.view.w;
            let d = this.view.x;
            let e = this.p != null && this.p.playState == 1;
            let f = this.q != null && this.q.playState == 1;
            let g = this.o != null && this.o.playState == 1;
            NativeUI.l(a, this.mz);
            NativeUI.l(b, this.mz);
            NativeUI.j(a, this.or);
            NativeUI.u(a, this.tf);
            if (this.ai) {
                if (!g) {
                    NativeUI.k(b, this.ot);
                    NativeUI.m(b, new Thickness(0, this.cb));
                }
                if (!f) {
                    NativeUI.j(c, this.ou);
                }
            }
            else {
                if (!f) {
                    if (this.aj) {
                        NativeUI.j(c, this.ov);
                        NativeUI.t(c, this.ce);
                        NativeUI.q(c, this.cf);
                    }
                    else {
                        NativeUI.j(c, this.ow);
                        NativeUI.t(c, this.cg);
                        NativeUI.q(c, this.cj);
                    }
                }
                if (!g) {
                    NativeUI.k(b, this.os);
                    NativeUI.m(b, new Thickness(0, this.ca));
                }
                if (!f) {
                    NativeUI.j(a, this.or);
                }
            }
            if (!e) {
                NativeUI.j(d, this.ox);
                NativeUI.q(d, this.ci);
                NativeUI.t(d, this.ch);
            }
        }
        get a() {
            let a = new AnimationKeyFrameEffectTiming();
            a.g = 300;
            a.b = 0;
            return a;
        }
        onChildrenMutated() {
            this.l2((a) => a.view.ax());
            this.l3((a) => a.view.ac());
            this.l4((a) => a.view.q());
            this.l5((a) => a.view.q());
        }
        l1() {
            this.view.ab();
            let a = false;
            if (this.q == null) {
                this.q = KeyFrameAnimationFactory.f.c(this.view.c(this.a).m(new AnimationKeyFrameProperty(2, this.os)).m(new AnimationKeyFrameProperty(2, this.ot)));
            }
            if (this.o == null) {
                this.o = KeyFrameAnimationFactory.f.c(this.view.a(this.a).m(new AnimationKeyFrameProperty(3, this.os), new AnimationKeyFrameProperty(4, this.k == 2 || this.k == 3 ? new Thickness(0, this.ca) : new Thickness(0, 0))).m(new AnimationKeyFrameProperty(3, this.ot), new AnimationKeyFrameProperty(4, this.k == 2 || this.k == 3 ? new Thickness(0, this.cb) : new Thickness(0, 0))));
            }
            if (this.p == null) {
                this.p = KeyFrameAnimationFactory.f.c(this.view.b(this.a).m(new AnimationKeyFrameProperty(2, this.ot), new AnimationKeyFrameProperty(14, ((() => {
                    let $ret = new ScaleTransform();
                    $ret.l = 0.5;
                    $ret.m = 1;
                    return $ret;
                })())), new AnimationKeyFrameProperty(1, 0)).m(new AnimationKeyFrameProperty(2, this.ot), new AnimationKeyFrameProperty(14, ((() => {
                    let $ret = new ScaleTransform();
                    $ret.l = 1;
                    $ret.m = 1;
                    return $ret;
                })())), new AnimationKeyFrameProperty(1, 1)));
            }
        }
        get af() {
            let a = false;
            this.l2((b) => {
                if (b.ao) {
                    a = true;
                }
            });
            return a;
        }
        mc() {
            this.ac = this.t ? this.ah : this.af ? true : false;
            this.ai = false;
            if (null != this.lostFocus) {
                this.lostFocus(this, EventArgs.empty);
            }
        }
        ml(a) {
            this.df = ThemeResolver.b(a, InputGroup.fu, InputGroup.d1);
            this.e5 = ThemeResolver.b(a, InputGroup.f5, InputGroup.ec);
            this.m6 = ThemeResolver.d(a, InputGroup.nf, InputGroup.m9);
            this.tm = ThemeResolver.f(a, InputGroup.tv, InputGroup.tp);
            this.pf = ThemeResolver.e(a, InputGroup.rd, InputGroup.px);
            this.q0 = ThemeResolver.e(a, InputGroup.ru, InputGroup.qe);
            this.q1 = ThemeResolver.e(a, InputGroup.rv, InputGroup.qf);
            this.hb = ThemeResolver.b(a, InputGroup.gx, InputGroup.e4);
            this.ha = ThemeResolver.b(a, InputGroup.gw, InputGroup.e3);
            this.e9 = ThemeResolver.b(a, InputGroup.f9, InputGroup.eg);
            this.so = ThemeResolver.e(a, InputGroup.se, InputGroup.qy);
            this.sp = ThemeResolver.e(a, InputGroup.sf, InputGroup.qz);
            this.q3 = ThemeResolver.e(a, InputGroup.rx, InputGroup.qh);
            this.q2 = ThemeResolver.e(a, InputGroup.rw, InputGroup.qg);
            this.g8 = ThemeResolver.b(a, InputGroup.gu, InputGroup.e1);
            this.e8 = ThemeResolver.b(a, InputGroup.f8, InputGroup.ef);
            this.e6 = ThemeResolver.b(a, InputGroup.f6, InputGroup.ed);
            this.e7 = ThemeResolver.b(a, InputGroup.f7, InputGroup.ee);
            this.g9 = ThemeResolver.b(a, InputGroup.gv, InputGroup.e2);
            this.pe = ThemeResolver.e(a, InputGroup.rc, InputGroup.pw);
            this.fa = ThemeResolver.b(a, InputGroup.ga, InputGroup.eh);
            this.fb = ThemeResolver.b(a, InputGroup.gb, InputGroup.ei);
            this.nc = ThemeResolver.d(a, InputGroup.ng, InputGroup.na);
            this.ts = ThemeResolver.f(a, InputGroup.tw, InputGroup.tq);
            this.q5 = ThemeResolver.e(a, InputGroup.rz, InputGroup.qj);
            this.q6 = ThemeResolver.e(a, InputGroup.r0, InputGroup.qk);
            this.q7 = ThemeResolver.e(a, InputGroup.r1, InputGroup.ql);
            this.fj = ThemeResolver.b(a, InputGroup.gj, InputGroup.eq);
            this.fi = ThemeResolver.b(a, InputGroup.gi, InputGroup.ep);
            this.ff = ThemeResolver.b(a, InputGroup.gf, InputGroup.em);
            this.ra = ThemeResolver.e(a, InputGroup.r4, InputGroup.qo);
            this.rb = ThemeResolver.e(a, InputGroup.r5, InputGroup.qp);
            this.q9 = ThemeResolver.e(a, InputGroup.r3, InputGroup.qn);
            this.q8 = ThemeResolver.e(a, InputGroup.r2, InputGroup.qm);
            this.fg = ThemeResolver.b(a, InputGroup.gg, InputGroup.en);
            this.fe = ThemeResolver.b(a, InputGroup.ge, InputGroup.el);
            this.fc = ThemeResolver.b(a, InputGroup.gc, InputGroup.ej);
            this.fd = ThemeResolver.b(a, InputGroup.gd, InputGroup.ek);
            this.fh = ThemeResolver.b(a, InputGroup.gh, InputGroup.eo);
            this.q4 = ThemeResolver.e(a, InputGroup.ry, InputGroup.qi);
            this.dg = ThemeResolver.b(a, InputGroup.fv, InputGroup.d2);
            this.dh = ThemeResolver.b(a, InputGroup.fw, InputGroup.d3);
            this.m5 = ThemeResolver.d(a, InputGroup.ne, InputGroup.m8);
            this.tl = ThemeResolver.f(a, InputGroup.tu, InputGroup.to);
            this.pp = ThemeResolver.e(a, InputGroup.rn, InputGroup.p7);
            this.pq = ThemeResolver.e(a, InputGroup.ro, InputGroup.p8);
            this.pr = ThemeResolver.e(a, InputGroup.rp, InputGroup.p9);
            this.dq = ThemeResolver.b(a, InputGroup.f4, InputGroup.eb);
            this.dp = ThemeResolver.b(a, InputGroup.f3, InputGroup.ea);
            this.dl = ThemeResolver.b(a, InputGroup.f0, InputGroup.d7);
            this.pu = ThemeResolver.e(a, InputGroup.rs, InputGroup.qc);
            this.pv = ThemeResolver.e(a, InputGroup.rt, InputGroup.qd);
            this.pt = ThemeResolver.e(a, InputGroup.rr, InputGroup.qb);
            this.ps = ThemeResolver.e(a, InputGroup.rq, InputGroup.qa);
            this.dm = ThemeResolver.b(a, InputGroup.f1, InputGroup.d8);
            this.dk = ThemeResolver.b(a, InputGroup.fz, InputGroup.d6);
            this.di = ThemeResolver.b(a, InputGroup.fx, InputGroup.d4);
            this.dj = ThemeResolver.b(a, InputGroup.fy, InputGroup.d5);
            this.dn = ThemeResolver.b(a, InputGroup.f2, InputGroup.d9);
            this.po = ThemeResolver.e(a, InputGroup.rm, InputGroup.p6);
            this.c5 = ThemeResolver.b(a, InputGroup.fk, InputGroup.dr);
            this.c6 = ThemeResolver.b(a, InputGroup.fl, InputGroup.ds);
            this.m4 = ThemeResolver.d(a, InputGroup.nd, InputGroup.m7);
            this.tk = ThemeResolver.f(a, InputGroup.tt, InputGroup.tn);
            this.ph = ThemeResolver.e(a, InputGroup.rf, InputGroup.pz);
            this.pi = ThemeResolver.e(a, InputGroup.rg, InputGroup.p0);
            this.pj = ThemeResolver.e(a, InputGroup.rh, InputGroup.p1);
            this.de = ThemeResolver.b(a, InputGroup.ft, InputGroup.d0);
            this.dd = ThemeResolver.b(a, InputGroup.fs, InputGroup.dz);
            this.da = ThemeResolver.b(a, InputGroup.fp, InputGroup.dw);
            this.pm = ThemeResolver.e(a, InputGroup.rk, InputGroup.p4);
            this.pn = ThemeResolver.e(a, InputGroup.rl, InputGroup.p5);
            this.pl = ThemeResolver.e(a, InputGroup.rj, InputGroup.p3);
            this.pk = ThemeResolver.e(a, InputGroup.ri, InputGroup.p2);
            this.db = ThemeResolver.b(a, InputGroup.fq, InputGroup.dx);
            this.c9 = ThemeResolver.b(a, InputGroup.fo, InputGroup.dv);
            this.c7 = ThemeResolver.b(a, InputGroup.fm, InputGroup.dt);
            this.c8 = ThemeResolver.b(a, InputGroup.fn, InputGroup.du);
            this.dc = ThemeResolver.b(a, InputGroup.fr, InputGroup.dy);
            this.pg = ThemeResolver.e(a, InputGroup.re, InputGroup.py);
            this.gy = ThemeResolver.b(a, InputGroup.gk, InputGroup.er);
            this.gz = ThemeResolver.b(a, InputGroup.gl, InputGroup.es);
            this.ni = ThemeResolver.d(a, InputGroup.nh, InputGroup.nb);
            this.ty = ThemeResolver.f(a, InputGroup.tx, InputGroup.tr);
            this.sh = ThemeResolver.e(a, InputGroup.r7, InputGroup.qr);
            this.si = ThemeResolver.e(a, InputGroup.r8, InputGroup.qs);
            this.sj = ThemeResolver.e(a, InputGroup.r9, InputGroup.qt);
            this.g7 = ThemeResolver.b(a, InputGroup.gt, InputGroup.e0);
            this.g6 = ThemeResolver.b(a, InputGroup.gs, InputGroup.ez);
            this.g3 = ThemeResolver.b(a, InputGroup.gp, InputGroup.ew);
            this.sm = ThemeResolver.e(a, InputGroup.sc, InputGroup.qw);
            this.sn = ThemeResolver.e(a, InputGroup.sd, InputGroup.qx);
            this.sl = ThemeResolver.e(a, InputGroup.sb, InputGroup.qv);
            this.sk = ThemeResolver.e(a, InputGroup.sa, InputGroup.qu);
            this.g4 = ThemeResolver.b(a, InputGroup.gq, InputGroup.ex);
            this.g2 = ThemeResolver.b(a, InputGroup.go, InputGroup.ev);
            this.g0 = ThemeResolver.b(a, InputGroup.gm, InputGroup.et);
            this.g1 = ThemeResolver.b(a, InputGroup.gn, InputGroup.eu);
            this.g5 = ThemeResolver.b(a, InputGroup.gr, InputGroup.ey);
            this.sg = ThemeResolver.e(a, InputGroup.r6, InputGroup.qq);
        }
        l6() {
            this.l1();
            if (this.ac) {
                this.l3((a) => a.ch(true, !this.ad));
                this.l2((a) => a.dc(this.al, !this.ad));
            }
            else {
                this.l3((a) => a.ch(false, !this.ad));
                this.l2((a) => a.dc(this.al, !this.ad));
            }
        }
        mb() {
            this.l1();
            if (this.ai) {
                let a = 1;
                this.l3((b) => b.al = true);
                this.mf(a);
            }
            else {
                let b = -1;
                this.l3((c) => c.al = false);
                this.mf(b);
            }
        }
        ma() {
            this.ac = this.t ? this.ah : true;
            this.ai = true;
            if (null != this.gotFocus) {
                this.gotFocus(this, EventArgs.empty);
            }
        }
        ms() {
            if (this.t) {
                this.ac = this.t;
            }
            else if (this.ai) {
                this.ac = true;
            }
            else {
                this.ac = this.af ? true : false;
            }
        }
        mf(a) {
            if ((a > 0 && this.q.playbackRate < 0) || (a < 0 && this.q.playbackRate > 0)) {
                this.q.reverse();
                this.q.finished.f((b) => {
                    if (this.q != null) {
                        this.q.commitStyles();
                    }
                    if (this.ab) {
                        this.q = null;
                        this.ab = false;
                    }
                });
                this.o.reverse();
                this.o.finished.f((b) => {
                    if (this.o != null) {
                        this.o.commitStyles();
                    }
                    if (this.s) {
                        this.o = null;
                        this.s = false;
                    }
                });
                this.p.reverse();
                this.p.finished.f((b) => {
                    if (this.p != null) {
                        this.p.commitStyles();
                    }
                    if (this.aa) {
                        this.p = null;
                        this.aa = false;
                    }
                });
            }
            else {
                this.q.play();
                this.q.finished.f((b) => {
                    if (this.q != null) {
                        this.q.commitStyles();
                    }
                    if (this.ab) {
                        this.q = null;
                        this.ab = false;
                    }
                });
                this.o.play();
                this.o.finished.f((b) => {
                    if (this.o != null) {
                        this.o.commitStyles();
                    }
                    if (this.s) {
                        this.o = null;
                        this.s = false;
                    }
                });
                this.p.play();
                this.p.finished.f((b) => {
                    if (this.p != null) {
                        this.p.commitStyles();
                    }
                    if (this.aa) {
                        this.p = null;
                        this.aa = false;
                    }
                });
            }
        }
        get os() {
            return this.nm;
        }
        set os(a) {
            let b = this.nm;
            this.nm = a;
            if (b != this.nm) {
                this.md("ActualBorderColor", b, a);
            }
        }
        get ot() {
            return this.nn;
        }
        set ot(a) {
            let b = this.nn;
            this.nn = a;
            if (b != this.nn) {
                this.md("ActualFocusBorderColor", b, a);
            }
        }
        get ca() {
            return this.am;
        }
        set ca(a) {
            let b = this.am;
            this.am = a;
            if (b != this.am) {
                this.md("ActualBorderWidth", b, a);
            }
        }
        get cb() {
            return this.an;
        }
        set cb(a) {
            let b = this.an;
            this.an = a;
            if (b != this.an) {
                this.md("ActualFocusBorderWidth", b, a);
            }
        }
        get mz() {
            return this.mt;
        }
        set mz(a) {
            let b = this.mt;
            this.mt = a;
            if (b != this.mt) {
                this.md("ActualCornerRadius", b, a);
            }
        }
        get tf() {
            return this.s9;
        }
        set tf(a) {
            let b = this.s9;
            this.s9 = a;
            if (b != this.s9) {
                this.md("ActualContentPadding", b, a);
            }
        }
        get cj() {
            return this.av;
        }
        set cj(a) {
            let b = this.av;
            this.av = a;
            if (b != this.av) {
                this.md("ActualUnderlineWidth", b, a);
            }
        }
        get ci() {
            return this.au;
        }
        set ci(a) {
            let b = this.au;
            this.au = a;
            if (b != this.au) {
                this.md("ActualUnderlineRippleWidth", b, a);
            }
        }
        get cf() {
            return this.ar;
        }
        set cf(a) {
            let b = this.ar;
            this.ar = a;
            if (b != this.ar) {
                this.md("ActualHoverUnderlineWidth", b, a);
            }
        }
        get ow() {
            return this.nq;
        }
        set ow(a) {
            let b = this.nq;
            this.nq = a;
            if (b != this.nq) {
                this.md("ActualUnderlineColor", b, a);
            }
        }
        get ox() {
            return this.nr;
        }
        set ox(a) {
            let b = this.nr;
            this.nr = a;
            if (b != this.nr) {
                this.md("ActualUnderlineRippleColor", b, a);
            }
        }
        get ov() {
            return this.np;
        }
        set ov(a) {
            let b = this.np;
            this.np = a;
            if (b != this.np) {
                this.md("ActualHoverUnderlineColor", b, a);
            }
        }
        get ou() {
            return this.no;
        }
        set ou(a) {
            let b = this.no;
            this.n9 = a;
            if (b != this.no) {
                this.md("ActualFocusUnderlineColor", b, a);
            }
        }
        get cg() {
            return this.as;
        }
        set cg(a) {
            let b = this.as;
            this.as = a;
            if (b != this.as) {
                this.md("ActualUnderlineOpacity", b, a);
            }
        }
        get ce() {
            return this.aq;
        }
        set ce(a) {
            let b = this.aq;
            this.aq = a;
            if (b != this.aq) {
                this.md("ActualHoverUnderlineOpacity", b, a);
            }
        }
        get cc() {
            return this.ao;
        }
        set cc(a) {
            let b = this.ao;
            this.ao = a;
            if (b != this.ao) {
                this.md("ActualFocusUnderlineOpacity", b, a);
            }
        }
        get cd() {
            return this.ap;
        }
        set cd(a) {
            let b = this.ap;
            this.ap = a;
            if (b != this.ap) {
                this.md("ActualFocusUnderlineRippleOpacity", b, a);
            }
        }
        get ch() {
            return this.at;
        }
        set ch(a) {
            let b = this.at;
            this.at = a;
            if (b != this.at) {
                this.md("ActualUnderlineRippleOpacity", b, a);
            }
        }
        get or() {
            return this.nl;
        }
        set or(a) {
            let b = this.nl;
            this.nl = a;
            if (b != this.nl) {
                this.md("ActualBackgroundColor", b, a);
            }
        }
        get cu() {
            return this.a6;
        }
        set cu(a) {
            let b = this.a6;
            this.a6 = a;
            if (b != this.a6) {
                this.md("BorderWidth", b, a);
            }
        }
        get hc() {
            return this.bh;
        }
        set hc(a) {
            let b = this.bh;
            this.bh = a;
            if (b != this.bh) {
                this.md("FocusBorderWidth", b, a);
            }
        }
        get oz() {
            return this.nt;
        }
        set oz(a) {
            let b = this.nt;
            this.nt = a;
            if (b != this.nt) {
                this.md("BorderColor", b, a);
            }
        }
        get m3() {
            return this.mw;
        }
        set m3(a) {
            let b = this.mw;
            this.mw = a;
            if (b != this.mw) {
                this.md("CornerRadius", b, a);
            }
        }
        get tj() {
            return this.tc;
        }
        set tj(a) {
            let b = this.tc;
            this.tc = a;
            if (b != this.tc) {
                this.md("ContentPadding", b, a);
            }
        }
        get h4() {
            return this.b9;
        }
        set h4(a) {
            let b = this.b9;
            this.b9 = a;
            if (b != this.b9) {
                this.md("UnderlineWidth", b, a);
            }
        }
        get h3() {
            return this.b8;
        }
        set h3(a) {
            let b = this.b8;
            this.b8 = a;
            if (b != this.b8) {
                this.md("UnderlineRippleWidth", b, a);
            }
        }
        get hg() {
            return this.bl;
        }
        set hg(a) {
            let b = this.bl;
            this.bl = a;
            if (b != this.bl) {
                this.md("HoverUnderlineWidth", b, a);
            }
        }
        get s7() {
            return this.op;
        }
        set s7(a) {
            let b = this.op;
            this.op = a;
            if (b != this.op) {
                this.md("UnderlineColor", b, a);
            }
        }
        get s8() {
            return this.oq;
        }
        set s8(a) {
            let b = this.oq;
            this.oq = a;
            if (b != this.oq) {
                this.md("UnderlineRippleColor", b, a);
            }
        }
        get ss() {
            return this.oa;
        }
        set ss(a) {
            let b = this.oa;
            this.oa = a;
            if (b != this.oa) {
                this.md("HoverUnderlineColor", b, a);
            }
        }
        get sr() {
            return this.n9;
        }
        set sr(a) {
            let b = this.n9;
            this.n9 = a;
            if (b != this.n9) {
                this.md("FocusUnderlineColor", b, a);
            }
        }
        get h1() {
            return this.b6;
        }
        set h1(a) {
            let b = this.b6;
            this.b6 = a;
            if (b != this.b6) {
                this.md("UnderlineOpacity", b, a);
            }
        }
        get hf() {
            return this.bk;
        }
        set hf(a) {
            let b = this.bk;
            this.bk = a;
            if (b != this.bk) {
                this.md("HoverUnderlineOpacity", b, a);
            }
        }
        get hd() {
            return this.bi;
        }
        set hd(a) {
            let b = this.bi;
            this.bi = a;
            if (b != this.bi) {
                this.md("FocusUnderlineOpacity", b, a);
            }
        }
        get he() {
            return this.bj;
        }
        set he(a) {
            let b = this.bj;
            this.bj = a;
            if (b != this.bj) {
                this.md("FocusUnderlineRippleOpacity", b, a);
            }
        }
        get h2() {
            return this.b7;
        }
        set h2(a) {
            let b = this.b7;
            this.b7 = a;
            if (b != this.b7) {
                this.md("UnderlineRippleOpacity", b, a);
            }
        }
        get oy() {
            return this.ns;
        }
        set oy(a) {
            let b = this.ns;
            this.ns = a;
            if (b != this.ns) {
                this.md("BackgroundColor", b, a);
            }
        }
        get hh() {
            return this.bm;
        }
        set hh(a) {
            let b = this.bm;
            this.bm = a;
            if (b != this.bm) {
                this.md("LineTypeBorderWidth", b, a);
            }
        }
        get hi() {
            return this.bn;
        }
        set hi(a) {
            let b = this.bn;
            this.bn = a;
            if (b != this.bn) {
                this.md("LineTypeFocusBorderWidth", b, a);
            }
        }
        get sv() {
            return this.od;
        }
        set sv(a) {
            let b = this.od;
            this.od = a;
            if (b != this.od) {
                this.md("LineTypeFocusBorderColor", b, a);
            }
        }
        get su() {
            return this.oc;
        }
        set su(a) {
            let b = this.oc;
            this.oc = a;
            if (b != this.oc) {
                this.md("LineTypeBorderColor", b, a);
            }
        }
        get nj() {
            return this.mx;
        }
        set nj(a) {
            let b = this.mx;
            this.mx = a;
            if (b != this.mx) {
                this.md("LineTypeCornerRadius", b, a);
            }
        }
        get tz() {
            return this.td;
        }
        set tz(a) {
            let b = this.td;
            this.td = a;
            if (b != this.td) {
                this.md("LineTypeContentPadding", b, a);
            }
        }
        get hq() {
            return this.bv;
        }
        set hq(a) {
            let b = this.bv;
            this.bv = a;
            if (b != this.bv) {
                this.md("LineTypeUnderlineWidth", b, a);
            }
        }
        get hp() {
            return this.bu;
        }
        set hp(a) {
            let b = this.bu;
            this.bu = a;
            if (b != this.bu) {
                this.md("LineTypeUnderlineRippleWidth", b, a);
            }
        }
        get hm() {
            return this.br;
        }
        set hm(a) {
            let b = this.br;
            this.br = a;
            if (b != this.br) {
                this.md("LineTypeHoverUnderlineWidth", b, a);
            }
        }
        get sy() {
            return this.og;
        }
        set sy(a) {
            let b = this.og;
            this.og = a;
            if (b != this.og) {
                this.md("LineTypeUnderlineColor", b, a);
            }
        }
        get sz() {
            return this.oh;
        }
        set sz(a) {
            let b = this.oh;
            this.oh = a;
            if (b != this.oh) {
                this.md("LineTypeUnderlineRippleColor", b, a);
            }
        }
        get sx() {
            return this.of;
        }
        set sx(a) {
            let b = this.of;
            this.oa = a;
            if (b != this.of) {
                this.md("LineTypeHoverUnderlineColor", b, a);
            }
        }
        get sw() {
            return this.oe;
        }
        set sw(a) {
            let b = this.oe;
            this.oe = a;
            if (b != this.oe) {
                this.md("LineTypeFocusUnderlineColor", b, a);
            }
        }
        get hn() {
            return this.bs;
        }
        set hn(a) {
            let b = this.bs;
            this.bs = a;
            if (b != this.bs) {
                this.md("LineTypeUnderlineOpacity", b, a);
            }
        }
        get hl() {
            return this.bq;
        }
        set hl(a) {
            let b = this.bq;
            this.bq = a;
            if (b != this.bq) {
                this.md("LineTypeHoverUnderlineOpacity", b, a);
            }
        }
        get hj() {
            return this.bo;
        }
        set hj(a) {
            let b = this.bo;
            this.bo = a;
            if (b != this.bo) {
                this.md("LineTypeFocusUnderlineOpacity", b, a);
            }
        }
        get hk() {
            return this.bp;
        }
        set hk(a) {
            let b = this.bp;
            this.bp = a;
            if (b != this.bp) {
                this.md("LineTypeFocusUnderlineRippleOpacity", b, a);
            }
        }
        get ho() {
            return this.bt;
        }
        set ho(a) {
            let b = this.bt;
            this.bt = a;
            if (b != this.bt) {
                this.md("LineTypeUnderlineRippleOpacity", b, a);
            }
        }
        get st() {
            return this.ob;
        }
        set st(a) {
            let b = this.ob;
            this.ob = a;
            if (b != this.ob) {
                this.md("LineTypeBackgroundColor", b, a);
            }
        }
        get cv() {
            return this.a7;
        }
        set cv(a) {
            let b = this.a7;
            this.a7 = a;
            if (b != this.a7) {
                this.md("BoxTypeBorderWidth", b, a);
            }
        }
        get cw() {
            return this.a8;
        }
        set cw(a) {
            let b = this.a8;
            this.a8 = a;
            if (b != this.a8) {
                this.md("BoxTypeFocusBorderWidth", b, a);
            }
        }
        get o9() {
            return this.n3;
        }
        set o9(a) {
            let b = this.n3;
            this.n3 = a;
            if (b != this.n3) {
                this.md("BoxTypeFocusBorderColor", b, a);
            }
        }
        get o8() {
            return this.n2;
        }
        set o8(a) {
            let b = this.n2;
            this.n2 = a;
            if (b != this.n2) {
                this.md("BoxTypeBorderColor", b, a);
            }
        }
        get m1() {
            return this.mv;
        }
        set m1(a) {
            let b = this.mv;
            this.mv = a;
            if (b != this.mv) {
                this.md("BoxTypeCornerRadius", b, a);
            }
        }
        get th() {
            return this.tb;
        }
        set th(a) {
            let b = this.tb;
            this.tb = a;
            if (b != this.tb) {
                this.md("BoxTypeContentPadding", b, a);
            }
        }
        get c4() {
            return this.bg;
        }
        set c4(a) {
            let b = this.bg;
            this.bg = a;
            if (b != this.bg) {
                this.md("BoxTypeUnderlineWidth", b, a);
            }
        }
        get c3() {
            return this.bf;
        }
        set c3(a) {
            let b = this.bf;
            this.bf = a;
            if (b != this.bf) {
                this.md("BoxTypeUnderlineRippleWidth", b, a);
            }
        }
        get c0() {
            return this.bc;
        }
        set c0(a) {
            let b = this.bc;
            this.bc = a;
            if (b != this.bc) {
                this.md("BoxTypeHoverUnderlineWidth", b, a);
            }
        }
        get pc() {
            return this.n6;
        }
        set pc(a) {
            let b = this.n6;
            this.n6 = a;
            if (b != this.n6) {
                this.md("BoxTypeUnderlineColor", b, a);
            }
        }
        get pd() {
            return this.n7;
        }
        set pd(a) {
            let b = this.n7;
            this.n7 = a;
            if (b != this.n7) {
                this.md("BoxTypeUnderlineRippleColor", b, a);
            }
        }
        get pb() {
            return this.n5;
        }
        set pb(a) {
            let b = this.n5;
            this.oa = a;
            if (b != this.n5) {
                this.md("BoxTypeHoverUnderlineColor", b, a);
            }
        }
        get pa() {
            return this.n4;
        }
        set pa(a) {
            let b = this.n4;
            this.n4 = a;
            if (b != this.n4) {
                this.md("BoxTypeFocusUnderlineColor", b, a);
            }
        }
        get c1() {
            return this.bd;
        }
        set c1(a) {
            let b = this.bd;
            this.bd = a;
            if (b != this.bd) {
                this.md("BoxTypeUnderlineOpacity", b, a);
            }
        }
        get cz() {
            return this.bb;
        }
        set cz(a) {
            let b = this.bb;
            this.bb = a;
            if (b != this.bb) {
                this.md("BoxTypeHoverUnderlineOpacity", b, a);
            }
        }
        get cx() {
            return this.a9;
        }
        set cx(a) {
            let b = this.a9;
            this.a9 = a;
            if (b != this.a9) {
                this.md("BoxTypeFocusUnderlineOpacity", b, a);
            }
        }
        get cy() {
            return this.ba;
        }
        set cy(a) {
            let b = this.ba;
            this.ba = a;
            if (b != this.ba) {
                this.md("BoxTypeFocusUnderlineRippleOpacity", b, a);
            }
        }
        get c2() {
            return this.be;
        }
        set c2(a) {
            let b = this.be;
            this.be = a;
            if (b != this.be) {
                this.md("BoxTypeUnderlineRippleOpacity", b, a);
            }
        }
        get o7() {
            return this.n1;
        }
        set o7(a) {
            let b = this.n1;
            this.n1 = a;
            if (b != this.n1) {
                this.md("BoxTypeBackgroundColor", b, a);
            }
        }
        get ck() {
            return this.aw;
        }
        set ck(a) {
            let b = this.aw;
            this.aw = a;
            if (b != this.aw) {
                this.md("BorderTypeBorderWidth", b, a);
            }
        }
        get cl() {
            return this.ax;
        }
        set cl(a) {
            let b = this.ax;
            this.ax = a;
            if (b != this.ax) {
                this.md("BorderTypeFocusBorderWidth", b, a);
            }
        }
        get o2() {
            return this.nw;
        }
        set o2(a) {
            let b = this.nw;
            this.nw = a;
            if (b != this.nw) {
                this.md("BorderTypeFocusBorderColor", b, a);
            }
        }
        get o1() {
            return this.nv;
        }
        set o1(a) {
            let b = this.nv;
            this.nv = a;
            if (b != this.nv) {
                this.md("BorderTypeBorderColor", b, a);
            }
        }
        get m0() {
            return this.mu;
        }
        set m0(a) {
            let b = this.mu;
            this.mu = a;
            if (b != this.mu) {
                this.md("BorderTypeCornerRadius", b, a);
            }
        }
        get tg() {
            return this.ta;
        }
        set tg(a) {
            let b = this.ta;
            this.ta = a;
            if (b != this.ta) {
                this.md("BorderTypeContentPadding", b, a);
            }
        }
        get ct() {
            return this.a5;
        }
        set ct(a) {
            let b = this.a5;
            this.a5 = a;
            if (b != this.a5) {
                this.md("BorderTypeUnderlineWidth", b, a);
            }
        }
        get cs() {
            return this.a4;
        }
        set cs(a) {
            let b = this.a4;
            this.a4 = a;
            if (b != this.a4) {
                this.md("BorderTypeUnderlineRippleWidth", b, a);
            }
        }
        get cp() {
            return this.a1;
        }
        set cp(a) {
            let b = this.a1;
            this.a1 = a;
            if (b != this.a1) {
                this.md("BorderTypeHoverUnderlineWidth", b, a);
            }
        }
        get o5() {
            return this.nz;
        }
        set o5(a) {
            let b = this.nz;
            this.nz = a;
            if (b != this.nz) {
                this.md("BorderTypeUnderlineColor", b, a);
            }
        }
        get o6() {
            return this.n0;
        }
        set o6(a) {
            let b = this.n0;
            this.n0 = a;
            if (b != this.n0) {
                this.md("BorderTypeUnderlineRippleColor", b, a);
            }
        }
        get o4() {
            return this.ny;
        }
        set o4(a) {
            let b = this.ny;
            this.oa = a;
            if (b != this.ny) {
                this.md("BorderTypeHoverUnderlineColor", b, a);
            }
        }
        get o3() {
            return this.nx;
        }
        set o3(a) {
            let b = this.nx;
            this.nx = a;
            if (b != this.nx) {
                this.md("BorderTypeFocusUnderlineColor", b, a);
            }
        }
        get cq() {
            return this.a2;
        }
        set cq(a) {
            let b = this.a2;
            this.a2 = a;
            if (b != this.a2) {
                this.md("BorderTypeUnderlineOpacity", b, a);
            }
        }
        get co() {
            return this.a0;
        }
        set co(a) {
            let b = this.a0;
            this.a0 = a;
            if (b != this.a0) {
                this.md("BorderTypeHoverUnderlineOpacity", b, a);
            }
        }
        get cm() {
            return this.ay;
        }
        set cm(a) {
            let b = this.ay;
            this.ay = a;
            if (b != this.ay) {
                this.md("BorderTypeFocusUnderlineOpacity", b, a);
            }
        }
        get cn() {
            return this.az;
        }
        set cn(a) {
            let b = this.az;
            this.az = a;
            if (b != this.az) {
                this.md("BorderTypeFocusUnderlineRippleOpacity", b, a);
            }
        }
        get cr() {
            return this.a3;
        }
        set cr(a) {
            let b = this.a3;
            this.a3 = a;
            if (b != this.a3) {
                this.md("BorderTypeUnderlineRippleOpacity", b, a);
            }
        }
        get o0() {
            return this.nu;
        }
        set o0(a) {
            let b = this.nu;
            this.nu = a;
            if (b != this.nu) {
                this.md("BorderTypeBackgroundColor", b, a);
            }
        }
        get hr() {
            return this.bw;
        }
        set hr(a) {
            let b = this.bw;
            this.bw = a;
            if (b != this.bw) {
                this.md("SearchTypeBorderWidth", b, a);
            }
        }
        get hs() {
            return this.bx;
        }
        set hs(a) {
            let b = this.bx;
            this.bx = a;
            if (b != this.bx) {
                this.md("SearchTypeFocusBorderWidth", b, a);
            }
        }
        get s2() {
            return this.ok;
        }
        set s2(a) {
            let b = this.ok;
            this.ok = a;
            if (b != this.ok) {
                this.md("SearchTypeFocusBorderColor", b, a);
            }
        }
        get s1() {
            return this.oj;
        }
        set s1(a) {
            let b = this.oj;
            this.oj = a;
            if (b != this.oj) {
                this.md("SearchTypeBorderColor", b, a);
            }
        }
        get nk() {
            return this.my;
        }
        set nk(a) {
            let b = this.my;
            this.my = a;
            if (b != this.my) {
                this.md("SearchTypeCornerRadius", b, a);
            }
        }
        get t0() {
            return this.te;
        }
        set t0(a) {
            let b = this.te;
            this.te = a;
            if (b != this.te) {
                this.md("SearchTypeContentPadding", b, a);
            }
        }
        get h0() {
            return this.b5;
        }
        set h0(a) {
            let b = this.b5;
            this.b5 = a;
            if (b != this.b5) {
                this.md("SearchTypeUnderlineWidth", b, a);
            }
        }
        get hz() {
            return this.b4;
        }
        set hz(a) {
            let b = this.b4;
            this.b4 = a;
            if (b != this.b4) {
                this.md("SearchTypeUnderlineRippleWidth", b, a);
            }
        }
        get hw() {
            return this.b1;
        }
        set hw(a) {
            let b = this.b1;
            this.b1 = a;
            if (b != this.b1) {
                this.md("SearchTypeHoverUnderlineWidth", b, a);
            }
        }
        get s5() {
            return this.on;
        }
        set s5(a) {
            let b = this.on;
            this.on = a;
            if (b != this.on) {
                this.md("SearchTypeUnderlineColor", b, a);
            }
        }
        get s6() {
            return this.oo;
        }
        set s6(a) {
            let b = this.oo;
            this.oo = a;
            if (b != this.oo) {
                this.md("SearchTypeUnderlineRippleColor", b, a);
            }
        }
        get s4() {
            return this.om;
        }
        set s4(a) {
            let b = this.om;
            this.oa = a;
            if (b != this.om) {
                this.md("SearchTypeHoverUnderlineColor", b, a);
            }
        }
        get s3() {
            return this.ol;
        }
        set s3(a) {
            let b = this.ol;
            this.ol = a;
            if (b != this.ol) {
                this.md("SearchTypeFocusUnderlineColor", b, a);
            }
        }
        get hx() {
            return this.b2;
        }
        set hx(a) {
            let b = this.b2;
            this.b2 = a;
            if (b != this.b2) {
                this.md("SearchTypeUnderlineOpacity", b, a);
            }
        }
        get hv() {
            return this.b0;
        }
        set hv(a) {
            let b = this.b0;
            this.b0 = a;
            if (b != this.b0) {
                this.md("SearchTypeHoverUnderlineOpacity", b, a);
            }
        }
        get ht() {
            return this.by;
        }
        set ht(a) {
            let b = this.by;
            this.by = a;
            if (b != this.by) {
                this.md("SearchTypeFocusUnderlineOpacity", b, a);
            }
        }
        get hu() {
            return this.bz;
        }
        set hu(a) {
            let b = this.bz;
            this.bz = a;
            if (b != this.bz) {
                this.md("SearchTypeFocusUnderlineRippleOpacity", b, a);
            }
        }
        get hy() {
            return this.b3;
        }
        set hy(a) {
            let b = this.b3;
            this.b3 = a;
            if (b != this.b3) {
                this.md("SearchTypeUnderlineRippleOpacity", b, a);
            }
        }
        get s0() {
            return this.oi;
        }
        set s0(a) {
            let b = this.oi;
            this.oi = a;
            if (b != this.oi) {
                this.md("SearchTypeBackgroundColor", b, a);
            }
        }
        get ah() {
            return this.x;
        }
        set ah(a) {
            let b = this.x;
            this.x = a;
            if (b != this.x) {
                this.md("IsExpanded", b, a);
            }
        }
        mj() {
            this.x = false;
            this.t = false;
            this.ms();
        }
        get aj() {
            return this.z;
        }
        set aj(a) {
            let b = this.z;
            this.z = a;
            if (b != this.z) {
                this.md("IsHovered", b, a);
            }
        }
        get ai() {
            return this.y;
        }
        set ai(a) {
            let b = this.y;
            this.y = a;
            if (b != this.y) {
                this.md("IsFocused", b, a);
            }
        }
        get ac() {
            return this.r;
        }
        set ac(a) {
            let b = this.r;
            this.r = a;
            if (b != this.r) {
                this.md("ActualIsExpanded", b, a);
            }
        }
        get sq() {
            return this.n8;
        }
        set sq(a) {
            let b = this.n8;
            this.n8 = a;
            if (b != this.n8) {
                this.md("FocusBorderColor", b, a);
            }
        }
        get ki() {
            return this.ib;
        }
        set ki(a) {
            let b = this.ib;
            this.ib = a;
            if (b != this.ib) {
                this.md("Id", b, a);
            }
        }
        get disabled() {
            return this.w;
        }
        set disabled(a) {
            let b = this.w;
            this.w = a;
            if (b != this.w) {
                this.md("IsDisabled", b, a);
            }
        }
        me() {
        }
        onDetachedFromUI() {
            this.view.ae();
        }
        onAttachedToUI() {
            this.view.ac();
        }
        ak() {
            return this.view.g();
        }
        ia() {
            return this.i();
        }
        j9() {
            let a = this.i();
            return a.y();
        }
        i() {
            let a = new InputGroupVisualModelExport();
            a.f = this.g;
            a.e = this.d;
            a.b = AppearanceHelper.a(this.os);
            a.o = this.ca;
            a.p = this.cb;
            a.z = this.mz;
            a.aa = this.tf;
            a.x = this.cj;
            a.w = this.ci;
            a.t = this.cf;
            a.c = AppearanceHelper.a(this.ow);
            a.d = AppearanceHelper.a(this.ox);
            a.u = this.cg;
            a.s = this.ce;
            a.q = this.cc;
            a.r = this.cd;
            a.v = this.ch;
            a.a = AppearanceHelper.a(this.or);
            a.g = this.ac;
            a.j = this.aj;
            a.i = this.ai;
            a.h = this.disabled;
            a.m = new List$1(PrefixVisualModelExport.$, 0);
            a.l = new List$1(LabelVisualModelExport.$, 0);
            a.k = new List$1(InputVisualModelExport.$, 0);
            a.n = new List$1(SuffixVisualModelExport.$, 0);
            for (let b = 0; b < this.inputs.count; b++) {
                if (typeCast(Prefix.$, this.inputs._inner[b]) !== null) {
                    if (this.inputs._inner[b].e == null) {
                        this.inputs._inner[b].e = "Prefix" + a.m.count.toString();
                    }
                    a.m.add1(this.inputs._inner[b].t());
                }
                else if (typeCast(Label.$, this.inputs._inner[b]) !== null) {
                    if (this.inputs._inner[b].e == null) {
                        this.inputs._inner[b].e = "Label" + a.l.count.toString();
                    }
                    a.l.add1(this.inputs._inner[b].au());
                }
                else if (typeCast(Input.$, this.inputs._inner[b]) !== null) {
                    if (this.inputs._inner[b].e == null) {
                        this.inputs._inner[b].e = "Input" + a.k.count.toString();
                    }
                    a.k.add1(this.inputs._inner[b].ba());
                }
                else if (typeCast(Suffix.$, this.inputs._inner[b]) !== null) {
                    if (this.inputs._inner[b].e == null) {
                        this.inputs._inner[b].e = "Suffix" + a.n.count.toString();
                    }
                    a.n.add1(this.inputs._inner[b].t());
                }
            }
            return a;
        }
        provideContainer(a) {
            this.view.ad(a);
        }
        get inputs() {
            return this.l;
        }
        get h7() {
            if (!this.h9.hasValue) {
                let a = 0;
                this.l3((b) => a++);
                this.h9 = toNullable(Number_$type, a);
            }
            return this.h9.value;
        }
        mk() {
            this.h9 = toNullable(Number_$type, null);
        }
        get ae() {
            return this.h7 > 0;
        }
        get al() {
            return !this.ae || this.ac;
        }
    }
    InputGroup.$t = /*@__PURE__*/ markType(InputGroup, 'InputGroup', Base.$, [INotifyPropertyChanged_$type]);
    InputGroup.c = 2;
    InputGroup.fu = 0;
    InputGroup.f5 = 0;
    InputGroup.nf = /*@__PURE__*/ new CornerRadius(1, 0, 0, 0, 0);
    InputGroup.tv = /*@__PURE__*/ new Thickness(1, 0, 0, 0, 0);
    InputGroup.rd = /*@__PURE__*/ BrushUtil.g(138, 0, 0, 0);
    InputGroup.ru = /*@__PURE__*/ BrushUtil.g(255, 0, 153, 155);
    InputGroup.rv = /*@__PURE__*/ BrushUtil.g(255, 0, 153, 155);
    InputGroup.gx = 1;
    InputGroup.gw = 2;
    InputGroup.f9 = 2;
    InputGroup.se = /*@__PURE__*/ BrushUtil.g(138, 0, 0, 0);
    InputGroup.sf = /*@__PURE__*/ BrushUtil.g(255, 0, 153, 155);
    InputGroup.rx = /*@__PURE__*/ BrushUtil.g(138, 0, 0, 0);
    InputGroup.rw = /*@__PURE__*/ BrushUtil.g(255, 0, 153, 155);
    InputGroup.gu = 1;
    InputGroup.f8 = 1;
    InputGroup.f6 = 1;
    InputGroup.f7 = 1;
    InputGroup.gv = 0;
    InputGroup.rc = /*@__PURE__*/ BrushUtil.g(0, 0, 0, 0);
    InputGroup.ga = 0;
    InputGroup.gb = 0;
    InputGroup.ng = /*@__PURE__*/ new CornerRadius(1, 0, 0, 0, 0);
    InputGroup.tw = /*@__PURE__*/ new Thickness(1, 0, 0, 0, 0);
    InputGroup.rz = /*@__PURE__*/ BrushUtil.g(138, 0, 0, 0);
    InputGroup.r0 = /*@__PURE__*/ BrushUtil.g(255, 0, 153, 155);
    InputGroup.r1 = /*@__PURE__*/ BrushUtil.g(255, 0, 153, 155);
    InputGroup.gj = 1;
    InputGroup.gi = 2;
    InputGroup.gf = 2;
    InputGroup.r4 = /*@__PURE__*/ BrushUtil.g(138, 0, 0, 0);
    InputGroup.r5 = /*@__PURE__*/ BrushUtil.g(255, 0, 153, 155);
    InputGroup.r3 = /*@__PURE__*/ BrushUtil.g(138, 0, 0, 0);
    InputGroup.r2 = /*@__PURE__*/ BrushUtil.g(255, 0, 153, 155);
    InputGroup.gg = 1;
    InputGroup.ge = 1;
    InputGroup.gc = 1;
    InputGroup.gd = 1;
    InputGroup.gh = 0;
    InputGroup.ry = /*@__PURE__*/ BrushUtil.g(0, 0, 0, 0);
    InputGroup.fv = 0;
    InputGroup.fw = 0;
    InputGroup.ne = /*@__PURE__*/ new CornerRadius(1, 4, 4, 0, 0);
    InputGroup.tu = /*@__PURE__*/ new Thickness(1, 16, 0, 16, 0);
    InputGroup.rn = /*@__PURE__*/ BrushUtil.g(138, 0, 0, 0);
    InputGroup.ro = /*@__PURE__*/ BrushUtil.g(255, 0, 153, 155);
    InputGroup.rp = /*@__PURE__*/ BrushUtil.g(255, 0, 153, 155);
    InputGroup.f4 = 1;
    InputGroup.f3 = 2;
    InputGroup.f0 = 2;
    InputGroup.rs = /*@__PURE__*/ BrushUtil.g(138, 0, 0, 0);
    InputGroup.rt = /*@__PURE__*/ BrushUtil.g(255, 0, 153, 155);
    InputGroup.rr = /*@__PURE__*/ BrushUtil.g(138, 0, 0, 0);
    InputGroup.rq = /*@__PURE__*/ BrushUtil.g(255, 0, 153, 155);
    InputGroup.f1 = 1;
    InputGroup.fz = 1;
    InputGroup.fx = 1;
    InputGroup.fy = 1;
    InputGroup.f2 = 0;
    InputGroup.rm = /*@__PURE__*/ BrushUtil.g(20, 0, 0, 0);
    InputGroup.fk = 1;
    InputGroup.fl = 2;
    InputGroup.nd = /*@__PURE__*/ new CornerRadius(1, 4, 4, 4, 4);
    InputGroup.tt = /*@__PURE__*/ new Thickness(1, 16, 0, 16, 0);
    InputGroup.rf = /*@__PURE__*/ BrushUtil.g(138, 0, 0, 0);
    InputGroup.rg = /*@__PURE__*/ BrushUtil.g(255, 0, 153, 155);
    InputGroup.rh = /*@__PURE__*/ BrushUtil.g(255, 0, 153, 155);
    InputGroup.ft = 1;
    InputGroup.fs = 2;
    InputGroup.fp = 2;
    InputGroup.rk = /*@__PURE__*/ BrushUtil.g(138, 0, 0, 0);
    InputGroup.rl = /*@__PURE__*/ BrushUtil.g(255, 0, 153, 155);
    InputGroup.rj = /*@__PURE__*/ BrushUtil.g(138, 0, 0, 0);
    InputGroup.ri = /*@__PURE__*/ BrushUtil.g(255, 0, 153, 155);
    InputGroup.fq = 0;
    InputGroup.fo = 0;
    InputGroup.fm = 0;
    InputGroup.fn = 0;
    InputGroup.fr = 0;
    InputGroup.re = /*@__PURE__*/ BrushUtil.g(0, 0, 0, 0);
    InputGroup.gk = 1;
    InputGroup.gl = 2;
    InputGroup.nh = /*@__PURE__*/ new CornerRadius(1, 4, 4, 4, 4);
    InputGroup.tx = /*@__PURE__*/ new Thickness(1, 16, 0, 16, 0);
    InputGroup.r7 = /*@__PURE__*/ BrushUtil.g(138, 0, 0, 0);
    InputGroup.r8 = /*@__PURE__*/ BrushUtil.g(255, 0, 153, 155);
    InputGroup.r9 = /*@__PURE__*/ BrushUtil.g(255, 0, 153, 155);
    InputGroup.gt = 1;
    InputGroup.gs = 2;
    InputGroup.gp = 2;
    InputGroup.sc = /*@__PURE__*/ BrushUtil.g(138, 0, 0, 0);
    InputGroup.sd = /*@__PURE__*/ BrushUtil.g(255, 0, 153, 155);
    InputGroup.sb = /*@__PURE__*/ BrushUtil.g(138, 0, 0, 0);
    InputGroup.sa = /*@__PURE__*/ BrushUtil.g(255, 0, 153, 155);
    InputGroup.gq = 0;
    InputGroup.go = 0;
    InputGroup.gm = 0;
    InputGroup.gn = 0;
    InputGroup.gr = 0;
    InputGroup.r6 = /*@__PURE__*/ BrushUtil.g(0, 0, 0, 0);
    InputGroup.d1 = 0;
    InputGroup.ec = 0;
    InputGroup.m9 = /*@__PURE__*/ new CornerRadius(1, 0, 0, 0, 0);
    InputGroup.tp = /*@__PURE__*/ new Thickness(1, 0, 0, 0, 0);
    InputGroup.px = /*@__PURE__*/ BrushUtil.g(255, 186, 191, 199);
    InputGroup.qe = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    InputGroup.qf = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    InputGroup.e4 = 1;
    InputGroup.e3 = 2;
    InputGroup.eg = 2;
    InputGroup.qy = /*@__PURE__*/ BrushUtil.g(255, 186, 191, 199);
    InputGroup.qz = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    InputGroup.qh = /*@__PURE__*/ BrushUtil.g(255, 186, 191, 199);
    InputGroup.qg = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    InputGroup.e1 = 1;
    InputGroup.ef = 1;
    InputGroup.ed = 1;
    InputGroup.ee = 1;
    InputGroup.e2 = 0;
    InputGroup.pw = /*@__PURE__*/ BrushUtil.g(0, 0, 0, 0);
    InputGroup.eh = 0;
    InputGroup.ei = 0;
    InputGroup.na = /*@__PURE__*/ new CornerRadius(1, 0, 0, 0, 0);
    InputGroup.tq = /*@__PURE__*/ new Thickness(1, 0, 0, 0, 0);
    InputGroup.qj = /*@__PURE__*/ BrushUtil.g(255, 186, 191, 199);
    InputGroup.qk = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    InputGroup.ql = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    InputGroup.eq = 1;
    InputGroup.ep = 2;
    InputGroup.em = 2;
    InputGroup.qo = /*@__PURE__*/ BrushUtil.g(255, 186, 191, 199);
    InputGroup.qp = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    InputGroup.qn = /*@__PURE__*/ BrushUtil.g(255, 186, 191, 199);
    InputGroup.qm = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    InputGroup.en = 1;
    InputGroup.el = 1;
    InputGroup.ej = 1;
    InputGroup.ek = 1;
    InputGroup.eo = 0;
    InputGroup.qi = /*@__PURE__*/ BrushUtil.g(0, 0, 0, 0);
    InputGroup.d2 = 0;
    InputGroup.d3 = 0;
    InputGroup.m8 = /*@__PURE__*/ new CornerRadius(1, 4, 4, 0, 0);
    InputGroup.to = /*@__PURE__*/ new Thickness(1, 16, 0, 16, 0);
    InputGroup.p7 = /*@__PURE__*/ BrushUtil.g(255, 186, 191, 199);
    InputGroup.p8 = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    InputGroup.p9 = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    InputGroup.eb = 1;
    InputGroup.ea = 2;
    InputGroup.d7 = 2;
    InputGroup.qc = /*@__PURE__*/ BrushUtil.g(255, 186, 191, 199);
    InputGroup.qd = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    InputGroup.qb = /*@__PURE__*/ BrushUtil.g(255, 186, 191, 199);
    InputGroup.qa = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    InputGroup.d8 = 1;
    InputGroup.d6 = 1;
    InputGroup.d4 = 1;
    InputGroup.d5 = 1;
    InputGroup.d9 = 0;
    InputGroup.p6 = /*@__PURE__*/ BrushUtil.g(20, 0, 0, 0);
    InputGroup.dr = 1;
    InputGroup.ds = 2;
    InputGroup.m7 = /*@__PURE__*/ new CornerRadius(1, 4, 4, 4, 4);
    InputGroup.tn = /*@__PURE__*/ new Thickness(1, 16, 0, 16, 0);
    InputGroup.pz = /*@__PURE__*/ BrushUtil.g(255, 186, 191, 199);
    InputGroup.p0 = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    InputGroup.p1 = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    InputGroup.d0 = 1;
    InputGroup.dz = 2;
    InputGroup.dw = 2;
    InputGroup.p4 = /*@__PURE__*/ BrushUtil.g(255, 186, 191, 199);
    InputGroup.p5 = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    InputGroup.p3 = /*@__PURE__*/ BrushUtil.g(255, 186, 191, 199);
    InputGroup.p2 = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    InputGroup.dx = 0;
    InputGroup.dv = 0;
    InputGroup.dt = 0;
    InputGroup.du = 0;
    InputGroup.dy = 0;
    InputGroup.py = /*@__PURE__*/ BrushUtil.g(0, 0, 0, 0);
    InputGroup.er = 1;
    InputGroup.es = 2;
    InputGroup.nb = /*@__PURE__*/ new CornerRadius(1, 4, 4, 4, 4);
    InputGroup.tr = /*@__PURE__*/ new Thickness(1, 16, 0, 16, 0);
    InputGroup.qr = /*@__PURE__*/ BrushUtil.g(255, 186, 191, 199);
    InputGroup.qs = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    InputGroup.qt = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    InputGroup.e0 = 1;
    InputGroup.ez = 2;
    InputGroup.ew = 2;
    InputGroup.qw = /*@__PURE__*/ BrushUtil.g(255, 186, 191, 199);
    InputGroup.qx = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    InputGroup.qv = /*@__PURE__*/ BrushUtil.g(255, 186, 191, 199);
    InputGroup.qu = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    InputGroup.ex = 0;
    InputGroup.ev = 0;
    InputGroup.et = 0;
    InputGroup.eu = 0;
    InputGroup.ey = 0;
    InputGroup.qq = /*@__PURE__*/ BrushUtil.g(0, 0, 0, 0);
    InputGroup.h8 = 0;
    return InputGroup;
})();
/**
 * @hidden
 */
export let InputGroupInputCollection = /*@__PURE__*/ (() => {
    class InputGroupInputCollection extends ObservableCollection$1 {
        constructor() {
            super(InputGroupItem.$, 0);
            this.collectionResetting = null;
        }
        p() {
            if (this.collectionResetting != null) {
                this.collectionResetting(this, null);
            }
            super.p();
        }
    }
    InputGroupInputCollection.$t = /*@__PURE__*/ markType(InputGroupInputCollection, 'InputGroupInputCollection', /*@__PURE__*/ ObservableCollection$1.$.specialize(InputGroupItem.$));
    return InputGroupInputCollection;
})();
/**
 * @hidden
 */
export let Label = /*@__PURE__*/ (() => {
    class Label extends InputGroupItem {
        constructor() {
            super();
            this.j = 0;
            this._view = null;
            this.aa = null;
            this.z = null;
            this.n = 0;
            this.m = 1;
            this.co = ThemeResolver.e(Label.k, Label.c7, Label.c0);
            this.cl = ThemeResolver.e(Label.k, Label.c4, Label.cx);
            this.cm = ThemeResolver.e(Label.k, Label.c5, Label.cy);
            this.cn = ThemeResolver.e(Label.k, Label.c6, Label.cz);
            this.u = null;
            this.cs = Label.c8;
            this.cp = Label.c1;
            this.cq = Label.c2;
            this.r = 0;
            this.af = false;
            this.ad = false;
            this.v = null;
            this.cr = null;
            this.a1 = "ig-label-" + Label.at++;
            this.ax = "inline-block";
            this.ay = "inline-block";
            this.az = null;
            this.av = "center";
            this.ar = 0;
            this.ab = false;
            this.a0 = null;
            this.aw = null;
            this.a2 = null;
            this.ae = false;
            this.ai = false;
            this.ac = false;
            this.ah = false;
            this.ag = false;
            this.ap = false;
            let a = new LabelView();
            a.b = this;
            this.view = a;
            this.view.y();
        }
        get l() {
            return this.j;
        }
        set l(a) {
            let b = this.j;
            this.j = a;
            if (b != this.j) {
                this.g("BaseTheme", enumGetBox(BaseControlTheme_$type, b), enumGetBox(BaseControlTheme_$type, a));
            }
        }
        get view() {
            return this._view;
        }
        set view(a) {
            this._view = a;
        }
        destroy() {
            this.provideContainer(null);
        }
        get i() {
            let a = new AnimationKeyFrameEffectTiming();
            a.g = 300;
            a.b = 0;
            return a;
        }
        b5() {
            this.view.q();
            let a = false;
            if (this.aa == null) {
                let b = new TransformGroup();
                b.j.add(((() => {
                    let $ret = new TranslateTransform();
                    $ret.k = this.s == 0 ? (this.view.h() * 0.5) : 0;
                    return $ret;
                })()));
                b.j.add(((() => {
                    let $ret = new ScaleTransform();
                    $ret.l = 1;
                    $ret.m = 1;
                    return $ret;
                })()));
                let c = -(this.view.h() * 1.3);
                if (this.o == 2) {
                    c = -(this.view.h() * 1.05);
                }
                if (this.o == 3) {
                    c = -(this.view.h() * 1.01);
                }
                let d = new TransformGroup();
                d.j.add(((() => {
                    let $ret = new TranslateTransform();
                    $ret.k = this.s == 2 ? c : -(this.view.h() * 0.5);
                    return $ret;
                })()));
                d.j.add(((() => {
                    let $ret = new ScaleTransform();
                    $ret.l = 0.75;
                    $ret.m = 0.75;
                    return $ret;
                })()));
                this.aa = KeyFrameAnimationFactory.f.c(this.view.a(this.i).m(new AnimationKeyFrameProperty(14, b), new AnimationKeyFrameProperty(2, BrushUtil.g(0, 255, 255, 255))).m(new AnimationKeyFrameProperty(14, d), new AnimationKeyFrameProperty(2, BrushUtil.g(this.s == 2 ? 255 : 0, 255, 255, 255))));
            }
            if (this.z == null) {
                this.z = KeyFrameAnimationFactory.f.c(this.view.a(this.i).m(new AnimationKeyFrameProperty(7, this.cw)).m(new AnimationKeyFrameProperty(7, this.ct)));
            }
        }
        cf(a, b) {
            if ((b > 0 && a.playbackRate < 0) || (b < 0 && a.playbackRate > 0)) {
                a.reverse();
                if (this.ap) {
                    a.finish();
                    this.b6(a);
                    return;
                }
                a.finished.f((c) => this.b6(a));
            }
            else {
                a.play();
                if (this.ap) {
                    a.finish();
                    this.b6(a);
                    return;
                }
                a.finished.f((c) => this.b6(a));
            }
        }
        b6(a) {
            a.commitStyles();
            if (a == this.aa && this.ah) {
                this.aa = null;
            }
            if (a == this.z && this.ag) {
                this.z = null;
            }
        }
        h(a, b, c) {
            super.h(a, b, c);
            switch (a) {
                case "BaseTheme":
                    this.ci(this.l);
                    this.ck();
                    break;
                case "TextColor":
                case "HoverTextColor":
                case "TextStyle":
                case "HighlightTextColor":
                case "HoverHighlightTextColor":
                    this.ck();
                    break;
                case "ActualTextColor":
                case "ActualHoverTextColor":
                case "ActualTextStyle":
                case "ActualHighlightTextColor":
                case "ActualHoverHighlightTextColor":
                    if (this.aa != null) {
                        if (this.aa.playState == 3) {
                            this.aa = null;
                        }
                        else {
                            this.ah = true;
                        }
                    }
                    if (this.z != null) {
                        if (this.z.playState == 3) {
                            this.z = null;
                        }
                        else {
                            this.ag = true;
                        }
                    }
                    this.cj();
                    break;
                case "Text":
                    this.view.ab();
                    break;
                case "Density":
                    this.o = this.p == 0 ? 1 : this.p;
                    break;
                case "ActualDensity":
                    this.view.ad();
                    this.view.ac();
                    break;
                case "InputGroup":
                    this.view.ac();
                    break;
                case "IsHighlighted":
                    this.b9();
                    break;
                case "IsShifted":
                    this.ca();
                    break;
                case "ShiftType":
                    if (this.aa != null) {
                        if (this.aa.playState == 3) {
                            this.aa = null;
                        }
                        else {
                            this.ah = true;
                        }
                    }
                    this.cd();
                    break;
                case "Display":
                    this.view.v();
                    break;
                case "FlexDirection":
                    this.view.w();
                    break;
                case "FlexGrow":
                    this.view.x();
                    break;
                case "AlignItems":
                    this.view.r();
                    break;
            }
        }
        cd() {
            this.view.ac();
        }
        ca() {
            this.b5();
            let a = 1;
            let b = this.an;
            if (!b) {
                a = -1;
            }
            this.cf(this.aa, a);
        }
        b9() {
            this.b5();
            let a = 1;
            let b = this.al;
            if (!b) {
                a = -1;
            }
            this.cf(this.z, a);
        }
        ck() {
            this.cw = this.dc != null ? this.dc : Label.c8;
            this.cv = this.db != null ? this.db : Label.c8;
            this.ct = this.c9 != null ? this.c9 : Label.c1;
            this.w = this.y != null ? this.y : Label.x;
        }
        cj() {
            if (this.w != null) {
                this.view.af(this.w);
            }
            this.view.aa(this.cw);
        }
        ci(a) {
            Label.c8 = ThemeResolver.e(a, Label.c7, Label.c0);
            Label.c1 = ThemeResolver.e(a, Label.c4, Label.cx);
            Label.c3 = ThemeResolver.e(a, Label.c6, Label.cz);
            Label.c2 = ThemeResolver.e(a, Label.c5, Label.cy);
        }
        get p() {
            return this.n;
        }
        set p(a) {
            let b = this.n;
            this.n = a;
            if (b != this.n) {
                this.g("Density", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, a));
            }
        }
        get o() {
            return this.m;
        }
        set o(a) {
            let b = this.m;
            this.m = a;
            if (b != this.m) {
                this.g("ActualDensity", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, a));
            }
        }
        get cw() {
            return this.co;
        }
        set cw(a) {
            let b = this.co;
            this.co = a;
            if (b != this.co) {
                this.g("ActualTextColor", b, a);
            }
        }
        get ct() {
            return this.cl;
        }
        set ct(a) {
            let b = this.cl;
            this.cl = a;
            if (b != this.cl) {
                this.g("ActualHighlightTextColor", b, a);
            }
        }
        get cu() {
            return this.cm;
        }
        set cu(a) {
            let b = this.cm;
            this.cm = a;
            if (b != this.cm) {
                this.g("ActualHoverHighlightTextColor", b, a);
            }
        }
        get cv() {
            return this.cn;
        }
        set cv(a) {
            let b = this.cn;
            this.cn = a;
            if (b != this.cn) {
                this.g("ActualHoverTextColor", b, a);
            }
        }
        get w() {
            return this.u;
        }
        set w(a) {
            let b = this.u;
            this.u = a;
            if (b != this.u) {
                this.g("ActualTextStyle", b, a);
            }
        }
        get dc() {
            return this.cs;
        }
        set dc(a) {
            let b = this.cs;
            this.cs = a;
            if (b != this.cs) {
                this.g("TextColor", b, a);
            }
        }
        get c9() {
            return this.cp;
        }
        set c9(a) {
            let b = this.cp;
            this.cp = a;
            if (b != this.cp) {
                this.g("HighlightTextColor", b, a);
            }
        }
        get da() {
            return this.cq;
        }
        set da(a) {
            let b = this.cq;
            this.cq = a;
            if (b != this.cq) {
                this.g("HoverHighlightTextColor", b, a);
            }
        }
        get s() {
            return this.r;
        }
        set s(a) {
            let b = this.r;
            this.r = a;
            if (b != this.r) {
                this.g("ShiftType", enumGetBox(LabelShiftType_$type, b), enumGetBox(LabelShiftType_$type, a));
            }
        }
        get an() {
            return this.af;
        }
        set an(a) {
            let b = this.af;
            this.af = a;
            if (b != this.af) {
                this.g("IsShifted", b, a);
            }
        }
        ch(a, b = true) {
            let c = this.ap;
            if (!b) {
                this.ap = true;
            }
            try {
                this.an = a;
            }
            finally {
                if (!b) {
                    this.ap = c;
                }
            }
        }
        get al() {
            return this.ad;
        }
        set al(a) {
            let b = this.ad;
            this.ad = a;
            if (b != this.ad) {
                this.g("IsHighlighted", b, a);
            }
        }
        cb() {
            this.am = true;
        }
        cc() {
            this.am = false;
        }
        get y() {
            return this.v;
        }
        set y(a) {
            let b = this.v;
            this.v = a;
            if (b != this.v) {
                this.g("TextStyle", b, a);
            }
        }
        get db() {
            return this.cr;
        }
        set db(a) {
            let b = this.cr;
            this.cr = a;
            if (b != this.cr) {
                this.g("HoverTextColor", b, a);
            }
        }
        get br() {
            return this.a1;
        }
        set br(a) {
            let b = this.a1;
            this.a1 = a;
            if (b != this.a1) {
                this.g("Id", b, a);
            }
        }
        get bf() {
            return this.ax;
        }
        set bf(a) {
            let b = this.ax;
            this.ax = a;
            if (b != this.ax) {
                this.g("Display", b, a);
            }
        }
        get bi() {
            return this.ay;
        }
        set bi(a) {
            let b = this.ay;
            this.ay = a;
            if (b != this.ay) {
                this.g("FlexDirection", b, a);
            }
        }
        get bk() {
            return this.az;
        }
        set bk(a) {
            let b = this.az;
            this.az = a;
            if (b != this.az) {
                this.g("FlexGrow", b, a);
            }
        }
        get a9() {
            return this.av;
        }
        set a9(a) {
            let b = this.av;
            this.av = a;
            if (b != this.av) {
                this.g("AlignItems", b, a);
            }
        }
        get aj() {
            return this.ab;
        }
        get as() {
            return this.ar;
        }
        set as(a) {
            let b = this.ar;
            this.ar = a;
            this.ab = true;
            if (b != this.ar) {
                this.g("TabIndex", b, a);
            }
        }
        get bm() {
            return this.a0;
        }
        set bm(a) {
            let b = this.a0;
            this.a0 = a;
            if (b != this.a0) {
                this.g("TabIndex", b, a);
            }
        }
        get bb() {
            return this.aw;
        }
        set bb(a) {
            let b = this.aw;
            this.aw = a;
            if (b != this.aw) {
                this.g("AriaLabel", b, a);
            }
        }
        get text() {
            return this.a2;
        }
        set text(a) {
            let b = this.a2;
            this.a2 = a;
            if (b != this.a2) {
                this.g("Text", b, a);
            }
        }
        get am() {
            return this.ae;
        }
        set am(a) {
            let b = this.ae;
            this.ae = a;
            if (b != this.ae) {
                this.g("IsHover", b, a);
            }
        }
        get aq() {
            return this.ai;
        }
        set aq(a) {
            let b = this.ai;
            this.ai = a;
            if (b != this.ai) {
                this.g("Value", b, a);
            }
        }
        get disabled() {
            return this.ac;
        }
        set disabled(a) {
            let b = this.ac;
            this.ac = a;
            if (b != this.ac) {
                this.g("IsDisabled", b, a);
            }
        }
        ce() {
            this.view.ab();
        }
        onDetachedFromUI() {
            this.view.u();
        }
        onAttachedToUI() {
            this.view.s();
        }
        ao() {
            return this.view.e();
        }
        au() {
            return this.q();
        }
        bh() {
            let a = this.q();
            return a.r();
        }
        q() {
            let a = new LabelVisualModelExport();
            a.c = this.l;
            a.e = this.p;
            a.d = this.o;
            a.b = AppearanceHelper.a(this.cw);
            a.a = AppearanceHelper.a(this.ct);
            a.f = this.s;
            a.j = this.an;
            a.h = this.al;
            a.n = this.bf;
            a.o = this.bi;
            a.p = this.bk;
            a.m = this.a9;
            a.s = this.text;
            a.i = this.am;
            a.k = this.aq;
            a.g = this.disabled;
            a.q = this.e;
            if (this.w != null) {
                let b = this.w;
                if (this.view != null && b.n == null) {
                    let c = this.view.i;
                    let d = FontUtil.getFontInfoFromString(c, b.fontString);
                    b.n = d.n;
                    b.d = d.d;
                    b.o = d.o;
                    b.q = d.q;
                    b.r = d.r;
                    b.s = d.s;
                }
                if (b.n != null) {
                    a.t = b.n;
                }
                if (!isNaN_(b.d)) {
                    a.l = b.d;
                }
                if (b.s != null) {
                    a.x = b.s;
                }
                if (b.q != null) {
                    a.v = b.q;
                }
                if (b.o != null) {
                    a.u = b.q;
                }
            }
            return a;
        }
        provideContainer(a) {
            this.view.t(a);
        }
    }
    Label.$t = /*@__PURE__*/ markType(Label, 'Label', InputGroupItem.$);
    Label.c7 = /*@__PURE__*/ BrushUtil.g(221, 0, 0, 0);
    Label.c4 = /*@__PURE__*/ BrushUtil.g(255, 0, 153, 155);
    Label.c6 = /*@__PURE__*/ BrushUtil.g(221, 0, 0, 0);
    Label.c5 = /*@__PURE__*/ BrushUtil.g(255, 0, 153, 155);
    Label.c0 = /*@__PURE__*/ BrushUtil.g(255, 24, 29, 31);
    Label.cx = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    Label.cz = /*@__PURE__*/ BrushUtil.g(255, 24, 29, 31);
    Label.cy = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    Label.k = 2;
    Label.c8 = /*@__PURE__*/ ThemeResolver.e(Label.k, Label.c7, Label.c0);
    Label.c1 = /*@__PURE__*/ ThemeResolver.e(Label.k, Label.c4, Label.cx);
    Label.c3 = /*@__PURE__*/ ThemeResolver.e(Label.k, Label.c6, Label.cz);
    Label.c2 = /*@__PURE__*/ ThemeResolver.e(Label.k, Label.c5, Label.cy);
    Label.x = null;
    Label.at = 0;
    return Label;
})();
/**
 * @hidden
 */
export let Input = /*@__PURE__*/ (() => {
    class Input extends InputGroupItem {
        constructor() {
            super();
            this.x = null;
            this.a1 = 0;
            this.a2 = 0;
            this.t = 0;
            this.bi = "";
            this.bc = "";
            this.ae = false;
            this.bd = null;
            this.af = false;
            this.am = false;
            this._view = null;
            this.q = 0;
            this.k = 1;
            this.j = 1;
            this.bh = null;
            this.bk = "_";
            this.ah = false;
            this.dk = Input.dr;
            this.dj = Input.dq;
            this.y = null;
            this.dm = Input.dr;
            this.keyDown = null;
            this.keyUp = null;
            this.keyPress = null;
            this.gotFocus = null;
            this.lostFocus = null;
            this.mouseDown = null;
            this.mouseUp = null;
            this.z = null;
            this.bg = "text";
            this.bj = "text";
            this.dl = null;
            this.bf = "ig-input-" + Input.a9++;
            this.a3 = 0;
            this.ag = false;
            this.be = null;
            this.bb = null;
            this.ak = false;
            this.bl = null;
            this.aj = false;
            this.ai = false;
            this.change = null;
            this.changing = null;
            this.compositionStart = null;
            this.compositionEnd = null;
            this.al = true;
            this.ad = null;
            this.au = false;
            this.x = new MaskParsingService();
            let a = new InputView();
            a.b = this;
            this.view = a;
            this.view.an();
            Input.ab = new FontInfo();
            Input.ab.n = "'Segoe UI', Verdana";
        }
        get view() {
            return this._view;
        }
        set view(a) {
            this._view = a;
        }
        destroy() {
            this.provideContainer(null);
        }
        get r() {
            return this.q;
        }
        set r(a) {
            let b = this.q;
            this.q = a;
            if (b != this.q) {
                this.g("ShiftType", enumGetBox(InputShiftType_$type, b), enumGetBox(InputShiftType_$type, a));
            }
        }
        get m() {
            return this.k;
        }
        set m(a) {
            let b = this.k;
            this.k = a;
            if (b != this.k) {
                this.g("Density", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, a));
            }
        }
        get l() {
            return this.j;
        }
        set l(a) {
            let b = this.j;
            this.j = a;
            if (b != this.j) {
                this.g("ActualDensity", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, a));
            }
        }
        get b5() {
            return this.bh;
        }
        set b5(a) {
            let b = this.bh;
            this.bh = a;
            if (b != this.bh) {
                this.g("Mask", b, a);
            }
        }
        get b9() {
            return this.bk;
        }
        set b9(a) {
            let b = this.bk;
            this.bk = a;
            if (b != this.bk) {
                this.g("PromptChar", b, a);
            }
        }
        get ap() {
            return this.ah;
        }
        set ap(a) {
            let b = this.ah;
            this.ah = a;
            if (b != this.ah) {
                this.g("IncludeLiterals", b, a);
            }
        }
        h(a, b, c) {
            super.h(a, b, c);
            switch (a) {
                case "TextColor":
                case "HoverTextColor":
                case "TextStyle":
                    this.dh();
                    break;
                case "ActualTextColor":
                case "ActualHoverTextColor":
                case "ActualTextStyle":
                    this.dg();
                    break;
                case "Value":
                    if (!this.ai) {
                        this.view.as(this.cf);
                        if (this.b != null) {
                            this.b.ms();
                        }
                        if (this.b5 != null && !this.am) {
                            this.di(this.cf);
                        }
                    }
                    break;
                case "Density":
                    this.l = this.m == 0 ? 1 : this.m;
                    break;
                case "ActualDensity":
                    this.view.ay();
                    this.view.ax();
                    break;
                case "InputGroup":
                    this.cv();
                    break;
                case "ShiftType":
                    this.c6();
                    break;
                case "InputType":
                    this.c7();
                    break;
                case "Placeholder":
                    this.c5();
                    break;
                case "Mask":
                    this.b7 = this.b5;
                    break;
                case "PromptChar": break;
                case "IncludeLiterals": break;
                case "IsShown":
                    this.cw();
                    break;
                case "IsDisabled":
                    this.view.at(this.aj);
                    break;
            }
        }
        c5() {
            this.view.ap();
        }
        c7() {
            this.view.ar();
        }
        c6() {
            this.view.ax();
        }
        cv() {
            this.view.ax();
        }
        dh() {
            this.dp = this.dt != null ? this.dt : Input.dr;
            this.dn = this.ds != null ? this.ds : Input.dr;
            this.aa = this.ac != null ? this.ac : Input.ab;
        }
        dg() {
            if (this.aa != null) {
                this.view.a0(this.aa);
            }
            NativeUI.n(this.view.o, this.dp);
        }
        get dp() {
            return this.dk;
        }
        set dp(a) {
            let b = this.dk;
            this.dk = a;
            if (b != this.dk) {
                this.g("ActualTextColor", b, a);
            }
        }
        get dn() {
            return this.dj;
        }
        set dn(a) {
            let b = this.dj;
            this.dj = a;
            if (b != this.dj) {
                this.g("ActualHoverTextColor", b, a);
            }
        }
        get aa() {
            return this.y;
        }
        set aa(a) {
            let b = this.y;
            this.y = a;
            if (b != this.y) {
                this.g("ActualTextStyle", b, a);
            }
        }
        get dt() {
            return this.dm;
        }
        set dt(a) {
            let b = this.dm;
            this.dm = a;
            if (b != this.dm) {
                this.g("TextColor", b, a);
            }
        }
        cm() {
            if (this.b5 != null) {
                this.de(this.cf);
            }
            if (null != this.lostFocus) {
                this.lostFocus(this, EventArgs.empty);
            }
        }
        cu() {
            if (this.b5 != null) {
                this.df(this.cf);
            }
            if (null != this.gotFocus) {
                this.gotFocus(this, EventArgs.empty);
            }
        }
        cx(a) {
            if (this.b5 != null) {
                let b = a.keyCode;
                if ((b == 17 && b == 90) || (b == 17 && b == 89)) {
                    a.preventDefault();
                }
                this.t = b;
                this.a2 = this.a5();
                this.a1 = this.a4();
            }
            if (null != this.keyDown) {
                this.keyDown(this, a);
            }
        }
        cz(a) {
            if (null != this.keyUp) {
                this.keyUp(this, a);
            }
        }
        cy(a) {
            if (null != this.keyPress) {
                this.keyPress(this, a);
            }
        }
        c0(a) {
            if (null != this.mouseDown) {
                this.mouseDown(this, a);
            }
        }
        c3(a) {
            if (null != this.mouseUp) {
                this.mouseUp(this, a);
            }
        }
        c4() {
            if (this.b5 != null) {
                this.bi = this.cf;
                this.a2 = this.a5();
            }
        }
        cs() {
            if (this.b5 != null) {
                if (!this.ae) {
                    this.df(this.bc);
                }
            }
        }
        ct() {
            if (this.b5 != null) {
                if (!this.ae) {
                    this.de(this.cf);
                }
            }
        }
        cn() {
            this.ai = true;
            this.cf = this.view.q();
            if (this.change != null) {
                this.change(this, ((() => {
                    let $ret = new InputChangeEventArgs();
                    $ret.value = this.cf;
                    $ret.isCompositionInProgress = this.view.e;
                    return $ret;
                })()));
            }
            this.ai = false;
        }
        co() {
            this.ai = true;
            this.cf = this.view.q();
            this.ai = false;
            if (this.b5 != null) {
                this.am = true;
                if (this.af) {
                    this.a2 = this.a5();
                }
                if (this.cf.length < this.bi.length && this.t == 229) {
                    this.t = 8;
                }
                let a = this.a5();
                let b = this.a4();
                let c = "";
                switch (this.t) {
                    case 46:
                        this.a1 = this.a2 == this.a1 ? ++this.a1 : this.a1;
                        break;
                    case 8:
                        this.a2 = this.a5();
                        break;
                    default:
                        c = this.cf.substr(this.a2, this.a4() - this.a2);
                        break;
                }
                let d = new MaskOptions();
                d.a = this.b5;
                d.b = this.b9;
                let e = this.x.a(this.bi, c, d, this.a2, this.a1);
                this.cf = e.b;
                if (this.t == 8) {
                    e.a = this.a2;
                }
                this.dd(e.a, e.a);
                let f = this.x.h(this.cf, d);
                this.bc = this.ap ? this.cf : f;
                this.ch();
                this.am = false;
            }
            this.ai = true;
            if (this.changing != null) {
                this.changing(this, ((() => {
                    let $ret = new InputChangeEventArgs();
                    $ret.value = this.cf;
                    $ret.isCompositionInProgress = this.view.e;
                    return $ret;
                })()));
            }
            this.ai = false;
        }
        cq() {
            if (this.compositionStart != null) {
                this.compositionStart(this, new EventArgs());
            }
        }
        cp() {
            if (this.compositionEnd != null) {
                this.compositionEnd(this, new EventArgs());
            }
        }
        c1() {
            this.ar = true;
        }
        c2() {
            this.ar = false;
        }
        get ac() {
            return this.z;
        }
        set ac(a) {
            let b = this.z;
            this.z = a;
            if (b != this.z) {
                this.g("TextStyle", b, a);
            }
        }
        get b0() {
            return this.bg;
        }
        set b0(a) {
            let b = this.bg;
            this.bg = a;
            if (b != this.bg) {
                this.g("InputType", b, a);
            }
        }
        get b7() {
            return this.bj;
        }
        set b7(a) {
            let b = this.bj;
            this.bj = a;
            if (b != this.bj) {
                this.g("Placeholder", b, a);
            }
        }
        get ds() {
            return this.dl;
        }
        set ds(a) {
            let b = this.dl;
            this.dl = a;
            if (b != this.dl) {
                this.g("HoverTextColor", b, a);
            }
        }
        get bx() {
            return this.bf;
        }
        set bx(a) {
            let b = this.bf;
            this.bf = a;
            if (b != this.bf) {
                this.g("Id", b, a);
            }
        }
        get an() {
            return this.ag;
        }
        get a8() {
            return this.a3;
        }
        set a8(a) {
            let b = this.a3;
            this.a3 = a;
            this.ag = true;
            if (b != this.a3) {
                this.g("TabIndex", b, a);
            }
        }
        get bu() {
            return this.be;
        }
        set bu(a) {
            let b = this.be;
            this.be = a;
            if (b != this.be) {
                this.g("TabIndex", b, a);
            }
        }
        get bq() {
            return this.bb;
        }
        set bq(a) {
            let b = this.bb;
            this.bb = a;
            if (b != this.bb) {
                this.g("AriaLabel", b, a);
            }
        }
        get ar() {
            return this.ak;
        }
        set ar(a) {
            let b = this.ak;
            this.ak = a;
            if (b != this.ak) {
                this.g("IsHover", b, a);
            }
        }
        get cf() {
            return this.bl;
        }
        set cf(a) {
            let b = this.bl;
            this.bl = a;
            if (b != this.bl) {
                this.g("Value", b, a);
            }
        }
        get ao() {
            return !stringIsNullOrEmpty(this.cf);
        }
        get disabled() {
            return this.aj;
        }
        set disabled(a) {
            let b = this.aj;
            this.aj = a;
            if (b != this.aj) {
                this.g("IsDisabled", b, a);
            }
        }
        c8() {
        }
        onDetachedFromUI() {
            this.view.al();
        }
        onAttachedToUI() {
            this.view.aj();
        }
        at() {
            return this.view.f();
        }
        ba() {
            return this.n();
        }
        bt() {
            let a = this.n();
            return a.n();
        }
        n() {
            let a = new InputVisualModelExport();
            a.h = this.view.j.rootWrapper.getNativeElement().offsetTop;
            a.f = this.view.j.rootWrapper.getNativeElement().offsetLeft;
            a.c = this.r;
            a.b = this.l;
            a.j = this.b5;
            a.m = this.b9;
            a.d = this.ap;
            a.a = AppearanceHelper.a(this.dp);
            a.i = this.b0;
            a.l = this.b7;
            a.e = this.ar;
            a.t = this.cf;
            a.k = this.e;
            if (this.aa != null) {
                let b = this.aa;
                if (this.view != null && b.n == null) {
                    let c = this.view.j;
                    let d = FontUtil.getFontInfoFromString(c, b.fontString);
                    b.n = d.n;
                    b.d = d.d;
                    b.o = d.o;
                    b.q = d.q;
                    b.r = d.r;
                    b.s = d.s;
                }
                if (b.n != null) {
                    a.o = b.n;
                }
                if (!isNaN_(b.d)) {
                    a.g = b.d;
                }
                if (b.s != null) {
                    a.s = b.s;
                }
                if (b.q != null) {
                    a.q = b.q;
                }
                if (b.o != null) {
                    a.p = b.q;
                }
            }
            return a;
        }
        provideContainer(a) {
            this.view.ak(a);
        }
        ck() {
            this.cu();
            this.view.am();
        }
        db() {
            this.view.aq();
        }
        dd(a, b) {
            this.view.av(a, b);
        }
        df(a) {
            this.am = true;
            let b = new MaskOptions();
            b.a = this.b5;
            b.b = this.b9;
            this.cf = this.x.g(this.cf, b);
            this.bi = this.cf;
            this.am = false;
        }
        de(a) {
            this.am = true;
            let b = new MaskOptions();
            b.a = this.b5;
            b.b = this.b9;
            if (a == this.x.g(null, b)) {
                this.cf = "";
            }
            this.am = false;
        }
        di(a) {
            let b = new MaskOptions();
            b.a = this.b5;
            b.b = this.b9;
            if (this.b9 != null && this.b9.length > 1) {
                b.b = this.b9.substr(0, 1);
            }
            this.cf = a != null ? this.x.g(a, b) : "";
            this.bc = this.ap ? this.cf : a;
            if (this.changing != null) {
                this.changing(this, ((() => {
                    let $ret = new InputChangeEventArgs();
                    $ret.value = this.cf;
                    $ret.isCompositionInProgress = this.view.e;
                    return $ret;
                })()));
            }
        }
        ch() {
            this.bi = this.cf;
            this.af = false;
            this.a2 = 0;
            this.a1 = 0;
            this.t = 0;
        }
        a5() {
            let a = this.view.n();
            let b = this.view.m();
            return a == b && this.af ? b - this.bd.length : a;
        }
        a4() {
            return this.view.m();
        }
        get selectionStart() {
            return this.a5();
        }
        set selectionStart(a) {
            this.view.aw(a);
        }
        get selectionEnd() {
            return this.a4();
        }
        set selectionEnd(a) {
            this.view.au(a);
        }
        get as() {
            return this.al;
        }
        set as(a) {
            let b = this.al;
            this.al = a;
            if (b != this.al) {
                this.g("IsShown", b, a);
            }
        }
        dc(a, b = true) {
            let c = this.au;
            if (!b) {
                this.au = true;
            }
            try {
                this.as = a;
            }
            finally {
                if (!b) {
                    this.au = c;
                }
            }
        }
        cw() {
            this.cj();
            this.c9(this.ad, this.as);
        }
        cj() {
            this.view.ai();
            if (this.ad == null) {
                this.ad = KeyFrameAnimationFactory.f.c(this.view.a(this.i).m(new AnimationKeyFrameProperty(1, 0)).m(new AnimationKeyFrameProperty(1, 1)));
            }
        }
        get i() {
            let a = new AnimationKeyFrameEffectTiming();
            a.g = 300;
            a.b = 0;
            return a;
        }
        c9(a, b) {
            let c = a.playbackRate < 0;
            if (b != c) {
                a.play();
            }
            else {
                a.reverse();
            }
            if (this.au) {
                a.finish();
                a.commitStyles();
                return;
            }
            a.finished.f((d) => a.commitStyles());
        }
    }
    Input.$t = /*@__PURE__*/ markType(Input, 'Input', InputGroupItem.$);
    Input.dr = /*@__PURE__*/ BrushUtil.g(221, 0, 0, 0);
    Input.dq = /*@__PURE__*/ BrushUtil.g(221, 0, 0, 0);
    Input.ab = null;
    Input.a9 = 0;
    return Input;
})();
//# sourceMappingURL=InputGroupView_combined.js.map
