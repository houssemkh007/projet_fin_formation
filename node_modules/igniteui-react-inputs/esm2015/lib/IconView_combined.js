/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, Delegate_$type, fromEnum, runOn, markType, INotifyPropertyChanged_$type, PropertyChangedEventArgs } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { IIcon_$type } from "igniteui-react-core";
import { NativeUI } from "igniteui-react-core";
import { IconVisualModelExport } from "./IconVisualModelExport";
import { AppearanceHelper } from "igniteui-react-core";
import { FontUtil } from "igniteui-react-core";
import { isNaN_ } from "igniteui-react-core";
/**
 * @hidden
 */
export let IconView = /*@__PURE__*/ (() => {
    class IconView extends Base {
        constructor() {
            super();
            this.a = null;
            this.g = null;
            this.b = null;
            this.f = new List$1(Delegate_$type, 0);
            this.k = null;
            this.c = true;
            this.h = null;
            this.i = null;
        }
        r() {
        }
        d() {
            return true;
        }
        get j() {
            return this.h;
        }
        get w() {
            return null;
        }
        get e() {
            return true;
        }
        p(a) {
            if (a == null) {
                for (let b of fromEnum(this.f)) {
                    b();
                }
                this.f.clear();
            }
            this.g = a;
            a.rootWrapper.setStyleProperty("position", "relative");
            this.g.rootWrapper.setStyleProperty("display", "flex");
            this.g.rootWrapper.setStyleProperty("flex-direction", "row");
            this.g.rootWrapper.setStyleProperty("flex-wrap", "no-wrap");
            this.g.rootWrapper.setStyleProperty("align-items", "center");
            this.t();
            let c = this.g.createElementNS("svg", "http://www.w3.org/2000/svg");
            c.setStyleProperty("position", "absolute");
            c.setStyleProperty("top", "0");
            c.setStyleProperty("left", "0");
            c.setStyleProperty("right", "0");
            c.setStyleProperty("bottom", "0");
            c.setAttribute("viewBox", "0 0 24 24");
            this.h = c;
            let d = this.g.createElementNS("path", "http://www.w3.org/2000/svg");
            d.setAttribute("d", "");
            this.h.append(d);
            if (this.k != null) {
                d.setAttribute("d", this.k);
            }
            this.i = d;
            this.g.append(this.h);
            this.a.a8();
        }
        u(a) {
            if (this.k != a) {
                this.k = a;
                if (this.i != null) {
                    this.i.setAttribute("d", this.k);
                }
            }
        }
        t() {
            this.g.rootWrapper.setStyleProperty("width", "1.5rem");
            this.g.rootWrapper.setStyleProperty("height", "1.5rem");
        }
        l(a) {
        }
        s() {
            if (this.d()) {
            }
        }
        m(a) {
            this.a.a5();
        }
        n(a) {
            this.a.a6();
        }
        o() {
            this.c = true;
            this.f.add(this.g.rootWrapper.listen("mouseenter", runOn(this, this.m)));
            this.f.add(this.g.rootWrapper.listen("mouseleave", runOn(this, this.n)));
        }
        q() {
            this.c = false;
            for (let a of fromEnum(this.f)) {
                a();
            }
            this.f.clear();
        }
        v(a) {
            if (a != null) {
                this.g.rootWrapper.setStyleProperty("font", a.fontString);
            }
        }
    }
    IconView.$t = /*@__PURE__*/ markType(IconView, 'IconView');
    return IconView;
})();
/**
 * @hidden
 */
export let Icon = /*@__PURE__*/ (() => {
    class Icon extends Base {
        constructor() {
            super();
            this._view = null;
            this.bd = Icon.bt;
            this.bh = Icon.bx;
            this.be = Icon.bu;
            this.bf = Icon.bv;
            this.bg = Icon.bw;
            this.m = Icon.s;
            this.n = Icon.t;
            this.bi = Icon.bt;
            this.bn = Icon.bx;
            this.ac = null;
            this.bj = Icon.bu;
            this.bk = Icon.bv;
            this.bm = Icon.bw;
            this.o = Icon.s;
            this.p = Icon.t;
            this.c = null;
            this.bl = null;
            this.ab = "ig-icon-" + Icon.y++;
            this.w = 0;
            this.e = false;
            this.aa = null;
            this.g = false;
            this.f = false;
            this.propertyChanged = null;
            let a = new IconView();
            a.a = this;
            this.view = a;
            this.view.r();
        }
        get view() {
            return this._view;
        }
        set view(a) {
            this._view = a;
        }
        destroy() {
            this.provideContainer(null);
        }
        a7(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            this.a9(a, b, c);
        }
        a9(a, b, c) {
            switch (a) {
                case "Fill":
                case "Stroke":
                case "StrokeThickness":
                case "HoverFill":
                case "HoverStroke":
                case "HoverStrokeThickness":
                    this.bc();
                    break;
                case "ActualFill":
                case "ActualStroke":
                case "ActualHoverFill":
                case "ActualHoverStroke":
                case "ActualStrokeThickness":
                case "ActualHoverStrokeThickness":
                case "SVGPath":
                    this.bb();
                    break;
            }
        }
        bc() {
            this.bo = this.fill != null ? this.fill : Icon.bt;
            this.bp = this.by != null ? this.by : Icon.bu;
            this.br = this.b1 != null ? this.b1 : Icon.bw;
            this.bq = this.bz != null ? this.bz : Icon.bv;
            this.r = !isNaN_(this.v) ? this.v : Icon.t;
            this.q = !isNaN_(this.u) ? this.u : Icon.s;
            this.bs = this.b2 != null ? this.b2 : Icon.bx;
        }
        get i() {
            return this.svgPath != null && !this.view.e;
        }
        bb() {
            let a = this.view.j;
            if (this.i) {
                let b = this.view.w;
                if (this.k) {
                    b._fill = this.bp;
                    b._stroke = this.bq;
                    b.ac = this.q;
                }
                else {
                    b._fill = this.bo;
                    b._stroke = this.br;
                    b.ac = this.r;
                }
            }
            else {
                if (this.svgPath != null) {
                    this.view.u(this.svgPath);
                }
                let c = this.view.j;
                if (this.k) {
                    if (this.bp != null) {
                        NativeUI.o(c, this.bp);
                    }
                    if (this.bq != null) {
                        NativeUI.v(c, this.bq);
                    }
                    if (!isNaN_(this.q)) {
                        NativeUI.y(c, this.q);
                    }
                }
                else {
                    if (this.bo != null) {
                        NativeUI.o(c, this.bo);
                    }
                    if (this.br != null) {
                        NativeUI.v(c, this.br);
                    }
                    if (!isNaN_(this.r)) {
                        NativeUI.y(c, this.r);
                    }
                }
            }
            if (this.d != null) {
                this.view.v(this.d);
            }
            if (this.bs != null) {
                NativeUI.n(this.view.j, this.bs);
            }
        }
        get bo() {
            return this.bd;
        }
        set bo(a) {
            let b = this.bd;
            this.bd = a;
            if (b != this.bd) {
                this.a7("ActualFill", b, a);
            }
        }
        get bs() {
            return this.bh;
        }
        set bs(a) {
            let b = this.bh;
            this.bh = a;
            if (b != this.bh) {
                this.a7("ActualTextColor", b, a);
            }
        }
        get bp() {
            return this.be;
        }
        set bp(a) {
            let b = this.be;
            this.be = a;
            if (b != this.be) {
                this.a7("ActualHoverFill", b, a);
            }
        }
        get bq() {
            return this.bf;
        }
        set bq(a) {
            let b = this.bf;
            this.bf = a;
            if (b != this.bf) {
                this.a7("ActualHoverStroke", b, a);
            }
        }
        get br() {
            return this.bg;
        }
        set br(a) {
            let b = this.bg;
            this.bg = a;
            if (b != this.bg) {
                this.a7("ActualStroke", b, a);
            }
        }
        get q() {
            return this.m;
        }
        set q(a) {
            let b = this.m;
            this.m = a;
            if (b != this.m) {
                this.a7("ActualHoverStrokeThickness", b, a);
            }
        }
        get r() {
            return this.n;
        }
        set r(a) {
            let b = this.n;
            this.n = a;
            if (b != this.n) {
                this.a7("ActualStrokeThickness", b, a);
            }
        }
        get fill() {
            return this.bi;
        }
        set fill(a) {
            let b = this.bi;
            this.bi = a;
            if (b != this.bi) {
                this.a7("Fill", b, a);
            }
        }
        get b2() {
            return this.bn;
        }
        set b2(a) {
            let b = this.bn;
            this.bn = a;
            if (b != this.bn) {
                this.a7("TextColor", b, a);
            }
        }
        get svgPath() {
            return this.ac;
        }
        set svgPath(a) {
            let b = this.ac;
            this.ac = a;
            if (b != this.ac) {
                this.a7("SVGPath", b, a);
            }
        }
        get by() {
            return this.bj;
        }
        set by(a) {
            let b = this.bj;
            this.bj = a;
            if (b != this.bj) {
                this.a7("HoverFill", b, a);
            }
        }
        get bz() {
            return this.bk;
        }
        set bz(a) {
            let b = this.bk;
            this.bk = a;
            if (b != this.bk) {
                this.a7("HoverStroke", b, a);
            }
        }
        get b1() {
            return this.bm;
        }
        set b1(a) {
            let b = this.bm;
            this.bm = a;
            if (b != this.bm) {
                this.a7("Stroke", b, a);
            }
        }
        get u() {
            return this.o;
        }
        set u(a) {
            let b = this.o;
            this.o = a;
            if (b != this.o) {
                this.a7("HoverStrokeThickness", b, a);
            }
        }
        get v() {
            return this.p;
        }
        set v(a) {
            let b = this.p;
            this.p = a;
            if (b != this.p) {
                this.a7("StrokeThickness", b, a);
            }
        }
        a5() {
            this.k = true;
        }
        a6() {
            this.k = false;
        }
        get d() {
            return this.c;
        }
        set d(a) {
            let b = this.c;
            this.c = a;
            if (b != this.c) {
                this.a7("TextStyle", b, a);
            }
        }
        get b0() {
            return this.bl;
        }
        set b0(a) {
            let b = this.bl;
            this.bl = a;
            if (b != this.bl) {
                this.a7("HoverTextColor", b, a);
            }
        }
        get as() {
            return this.ab;
        }
        set as(a) {
            let b = this.ab;
            this.ab = a;
            if (b != this.ab) {
                this.a7("Id", b, a);
            }
        }
        get h() {
            return this.e;
        }
        get x() {
            return this.w;
        }
        set x(a) {
            let b = this.w;
            this.w = a;
            this.e = true;
            if (b != this.w) {
                this.a7("TabIndex", b, a);
            }
        }
        get ak() {
            return this.aa;
        }
        set ak(a) {
            let b = this.aa;
            this.aa = a;
            if (b != this.aa) {
                this.a7("AriaLabel", b, a);
            }
        }
        get k() {
            return this.g;
        }
        set k(a) {
            let b = this.g;
            this.g = a;
            if (b != this.g) {
                this.a7("IsHover", b, a);
            }
        }
        get disabled() {
            return this.f;
        }
        set disabled(a) {
            let b = this.f;
            this.f = a;
            if (b != this.f) {
                this.a7("IsDisabled", b, a);
            }
        }
        a8() {
        }
        onDetachedFromUI() {
            this.view.q();
        }
        onAttachedToUI() {
            this.view.o();
        }
        l() {
            return this.view.d();
        }
        z() {
            return this.a();
        }
        am() {
            let a = this.a();
            return a.f();
        }
        a() {
            let a = new IconVisualModelExport();
            a.a = AppearanceHelper.a(this.bo);
            a.c = AppearanceHelper.a(this.bs);
            a.b = AppearanceHelper.a(this.br);
            a.d = this.r;
            if (this.d != null) {
                let b = this.d;
                if (this.view != null && b.n == null) {
                    let c = this.view.g;
                    let d = FontUtil.getFontInfoFromString(c, b.fontString);
                    b.n = d.n;
                    b.d = d.d;
                    b.o = d.o;
                    b.q = d.q;
                    b.r = d.r;
                    b.s = d.s;
                }
                if (b.n != null) {
                    a.h = b.n;
                }
                if (!isNaN_(b.d)) {
                    a.e = b.d;
                }
                if (b.s != null) {
                    a.l = b.s;
                }
                if (b.q != null) {
                    a.j = b.q;
                }
                if (b.o != null) {
                    a.i = b.q;
                }
            }
            return a;
        }
        provideContainer(a) {
            this.view.p(a);
        }
    }
    Icon.$t = /*@__PURE__*/ markType(Icon, 'Icon', Base.$, [INotifyPropertyChanged_$type, IIcon_$type]);
    Icon.bt = null;
    Icon.bx = null;
    Icon.bw = null;
    Icon.bu = null;
    Icon.bv = null;
    Icon.t = 0;
    Icon.s = 0;
    Icon.y = 0;
    return Icon;
})();
//# sourceMappingURL=IconView_combined.js.map
