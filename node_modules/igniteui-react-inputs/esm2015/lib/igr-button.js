import * as React from 'react';
import { Button } from "./Button";
import { ensureEnum, brushToString, stringToBrush, ensureBool, initializePropertiesFromCss, NamePatcher, isValidProp, toSpinal, getModifiedProps } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { CornerRadius } from "igniteui-react-core";
import { ButtonDisplayStyle_$type } from './ButtonDisplayStyle';
import { IgrButtonClickEventArgs } from './igr-button-click-event-args';
import { TypeRegistrar } from "igniteui-react-core";
import { ControlDisplayDensity_$type } from "igniteui-react-core";
import { BaseControlTheme_$type } from "igniteui-react-core";
import { ElevationMode_$type } from "igniteui-react-core";
export class IgrButton extends React.Component {
    constructor(props) {
        super(props);
        this._wrapper = null;
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        this._clicked = null;
        this._clicked_wrapped = null;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this._getMainRef = this._getMainRef.bind(this);
        var container;
        if (document) {
            container = document.createElement("div");
        }
        var root;
        root = container;
        if (container != null) {
            root = container;
        }
        this.requestRender = this.requestRender.bind(this);
        this._portalManager = new PortalManager("buttonContent", this.requestRender);
        var ren = new ReactRenderer(root, document, true, {}, this._portalManager);
        this._wrapper = ren;
        this._container = this._wrapper.rootWrapper;
        this._container.setStyleProperty("display", "inline-block");
        var button = this.i;
        this._button = button;
        button.provideContainer(ren);
        if (props) {
            this.initializeProperties();
        }
    }
    _getMainRef(ref) {
        this._elRef = ref;
    }
    render() {
        let propChildren = this.props.children;
        let children = [];
        React.Children.forEach(propChildren, (ch) => {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        let div = React.createElement("div", {
            className: "ig-button igr-button",
            ref: this._getMainRef,
            children: children
        });
        return div;
    }
    requestRender() {
        if (this._initialized) {
            this.setState({});
        }
    }
    _onDisplayChanged() {
        this._container.setStyleProperty("display", this.display);
    }
    _onFlexDirectionChanged() {
        this._container.setStyleProperty("flex-direction", this.flexDirection);
    }
    _onFlexGrowChanged() {
        this._container.setStyleProperty("flex-grow", this.flexGrow);
    }
    _onAlignItemsChanged() {
        this._container.setStyleProperty("align-items", this.alignItems);
    }
    //private _getLabelPortal(element: DomWrapper, portalCallback: (portal: DomPortal) => void): void {
    //    this._portalManager.getPortal(element, "TemplateContent", portalCallback);
    //}
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    initializeProperties() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    // supports angular themes or custom properties set in CSS
    updateStyle() {
        this._styling(this._elRef, this);
    }
    componentWillUnmount() {
        this._button.destroy();
        this._wrapper.destroy();
    }
    componentDidMount() {
        this._elRef.appendChild(this._container.getNativeElement());
        this.initializeContent();
    }
    initializeContent() {
        this._styling(this._container.getNativeElement(), this);
        this.updateStyle();
    }
    createImplementation() {
        return new Button();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    } /**
                                 * @hidden
                                 */
    static _createFromInternal(internal) {
        if (!internal) {
            return null;
        }
        if (!internal.$type) {
            return null;
        }
        let name = internal.$type.name;
        let externalName = "Igr" + name;
        if (!TypeRegistrar.isRegistered(externalName)) {
            return null;
        }
        return TypeRegistrar.create(externalName);
    }
    /**
 * Gets or sets the min width to use for the button.
*/
    get minWidth() {
        return this.i.bh;
    }
    set minWidth(v) {
        this.i.bh = +v;
    }
    /**
     * Gets or sets the min height to use for the button.
    */
    get minHeight() {
        return this.i.bg;
    }
    set minHeight(v) {
        this.i.bg = +v;
    }
    /**
     * Gets or sets the display style to use for the button.
    */
    get displayType() {
        return this.i.s;
    }
    set displayType(v) {
        this.i.s = ensureEnum(ButtonDisplayStyle_$type, v);
    }
    /**
     * Gets or sets the display density to use for the button.
    */
    get density() {
        return this.i.h;
    }
    set density(v) {
        this.i.h = ensureEnum(ControlDisplayDensity_$type, v);
    }
    /**
     * Gets or sets the base built in theme to use for the button.
    */
    get baseTheme() {
        return this.i.d;
    }
    set baseTheme(v) {
        this.i.d = ensureEnum(BaseControlTheme_$type, v);
    }
    /**
     * Gets the actual display density to use for the label.
    */
    get actualDensity() {
        return this.i.g;
    }
    set actualDensity(v) {
        this.i.g = ensureEnum(ControlDisplayDensity_$type, v);
    }
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    get actualBorderColor() {
        return brushToString(this.i.m8);
    }
    set actualBorderColor(v) {
        this.i.m8 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    get actualUmbraShadowColor() {
        return brushToString(this.i.nj);
    }
    set actualUmbraShadowColor(v) {
        this.i.nj = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    get actualPenumbraShadowColor() {
        return brushToString(this.i.ng);
    }
    set actualPenumbraShadowColor(v) {
        this.i.ng = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    get actualAmbientShadowColor() {
        return brushToString(this.i.m6);
    }
    set actualAmbientShadowColor(v) {
        this.i.m6 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    get actualRestingElevation() {
        return this.i.cg;
    }
    set actualRestingElevation(v) {
        this.i.cg = +v;
    }
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    get actualFocusElevation() {
        return this.i.ce;
    }
    set actualFocusElevation(v) {
        this.i.ce = +v;
    }
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    get actualHoverElevation() {
        return this.i.cf;
    }
    set actualHoverElevation(v) {
        this.i.cf = +v;
    }
    /**
     * Gets or sets the color to use for the ripple when the button is pressed.
    */
    get actualRippleColor() {
        return brushToString(this.i.nh);
    }
    set actualRippleColor(v) {
        this.i.nh = stringToBrush(v);
    }
    get actualCornerRadiusBottomRight() {
        return this.i.kb ? this.i.kb.b : NaN;
    }
    set actualCornerRadiusBottomRight(v) {
        this.ensureActualCornerRadius();
        this.i.kb.b = +v;
        this.i.kb = this.i.kb;
    }
    get actualCornerRadiusBottomLeft() {
        return this.i.kb ? this.i.kb.a : NaN;
    }
    set actualCornerRadiusBottomLeft(v) {
        this.ensureActualCornerRadius();
        this.i.kb.a = +v;
        this.i.kb = this.i.kb;
    }
    get actualCornerRadiusTopLeft() {
        return this.i.kb ? this.i.kb.c : NaN;
    }
    set actualCornerRadiusTopLeft(v) {
        this.ensureActualCornerRadius();
        this.i.kb.c = +v;
        this.i.kb = this.i.kb;
    }
    get actualCornerRadiusTopRight() {
        return this.i.kb ? this.i.kb.d : NaN;
    }
    set actualCornerRadiusTopRight(v) {
        this.ensureActualCornerRadius();
        this.i.kb.d = +v;
        this.i.kb = this.i.kb;
    }
    ensureActualCornerRadius() {
        if (this.i.kb) {
            return;
        }
        this.i.kb = new CornerRadius(2);
    }
    /**
     * Gets the color to use for the actual background.
    */
    get actualBackgroundColor() {
        return brushToString(this.i.m7);
    }
    set actualBackgroundColor(v) {
        this.i.m7 = stringToBrush(v);
    }
    /**
     * Gets the actual color to use for the disabled background of the button.
    */
    get actualDisabledBackgroundColor() {
        return brushToString(this.i.m9);
    }
    set actualDisabledBackgroundColor(v) {
        this.i.m9 = stringToBrush(v);
    }
    /**
     * Gets the actual color to use for the disabled border of the button.
    */
    get actualDisabledBorderColor() {
        return brushToString(this.i.na);
    }
    set actualDisabledBorderColor(v) {
        this.i.na = stringToBrush(v);
    }
    /**
     * Gets the actual color to use for the disabled text of the button.
    */
    get actualDisabledTextColor() {
        return brushToString(this.i.nb);
    }
    set actualDisabledTextColor(v) {
        this.i.nb = stringToBrush(v);
    }
    /**
     * Gets the actual disabled elevation to use for the button.
    */
    get actualDisabledElevation() {
        return this.i.cd;
    }
    set actualDisabledElevation(v) {
        this.i.cd = +v;
    }
    /**
     * Gets the actual disabled elevation to use for the button.
    */
    get actualElevationMode() {
        return this.i.k;
    }
    set actualElevationMode(v) {
        this.i.k = ensureEnum(ElevationMode_$type, v);
    }
    /**
     * Gets the color to use for the actual background.
    */
    get actualTextColor() {
        return brushToString(this.i.ni);
    }
    set actualTextColor(v) {
        this.i.ni = stringToBrush(v);
    }
    /**
     * Gets the color to use for the actual background.
    */
    get actualHoverTextColor() {
        return brushToString(this.i.nf);
    }
    set actualHoverTextColor(v) {
        this.i.nf = stringToBrush(v);
    }
    /**
     * Gets the color to use for the actual background.
    */
    get actualFocusBackgroundColor() {
        return brushToString(this.i.nc);
    }
    set actualFocusBackgroundColor(v) {
        this.i.nc = stringToBrush(v);
    }
    /**
     * Gets the actual color to use for the focused text.
    */
    get actualFocusTextColor() {
        return brushToString(this.i.nd);
    }
    set actualFocusTextColor(v) {
        this.i.nd = stringToBrush(v);
    }
    /**
     * Gets the hover color to use for the actual background.
    */
    get actualHoverBackgroundColor() {
        return brushToString(this.i.ne);
    }
    set actualHoverBackgroundColor(v) {
        this.i.ne = stringToBrush(v);
    }
    /**
     * Gets or sets the Width to use for the check mark when the checkbox is checked.
    */
    get actualBorderWidth() {
        return this.i.aw;
    }
    set actualBorderWidth(v) {
        this.i.aw = +v;
    }
    /**
     * Gets or sets the color to use for the background of the button when the  type is raised.
    */
    get raisedBackgroundColor() {
        return brushToString(this.i.tv);
    }
    set raisedBackgroundColor(v) {
        this.i.tv = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the disabled background of the button when the type is raised.
    */
    get raisedDisabledBackgroundColor() {
        return brushToString(this.i.tx);
    }
    set raisedDisabledBackgroundColor(v) {
        this.i.tx = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the disabled border of the button when the type is raised.
    */
    get raisedDisabledBorderColor() {
        return brushToString(this.i.ty);
    }
    set raisedDisabledBorderColor(v) {
        this.i.ty = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the disabled text of the button when the type is raised.
    */
    get raisedDisabledTextColor() {
        return brushToString(this.i.tz);
    }
    set raisedDisabledTextColor(v) {
        this.i.tz = stringToBrush(v);
    }
    /**
     * Gets or sets the disabled elevation to use for the button when the type is raised.
    */
    get raisedDisabledElevation() {
        return this.i.ep;
    }
    set raisedDisabledElevation(v) {
        this.i.ep = +v;
    }
    /**
     * Gets or sets the hover color to use for the background of the button when the  type is raised.
    */
    get raisedHoverBackgroundColor() {
        return brushToString(this.i.t2);
    }
    set raisedHoverBackgroundColor(v) {
        this.i.t2 = stringToBrush(v);
    }
    /**
     * Gets or sets the border color to use for the button when the type is raised.
    */
    get raisedBorderColor() {
        return brushToString(this.i.tw);
    }
    set raisedBorderColor(v) {
        this.i.tw = stringToBrush(v);
    }
    /**
     * Gets or sets the elevation to use for the button when the type is raised.
    */
    get raisedRestingElevation() {
        return this.i.es;
    }
    set raisedRestingElevation(v) {
        this.i.es = +v;
    }
    /**
     * Gets or sets the hover elevation to use for the button when the type is raised.
    */
    get raisedHoverElevation() {
        return this.i.er;
    }
    set raisedHoverElevation(v) {
        this.i.er = +v;
    }
    /**
     * Gets or sets the focus elevation to use for the button when the type is raised.
    */
    get raisedFocusElevation() {
        return this.i.eq;
    }
    set raisedFocusElevation(v) {
        this.i.eq = +v;
    }
    /**
     * Gets or sets the width to use for the button border when the type is raised.
    */
    get raisedBorderWidth() {
        return this.i.bj;
    }
    set raisedBorderWidth(v) {
        this.i.bj = +v;
    }
    get raisedCornerRadiusBottomRight() {
        return this.i.kx ? this.i.kx.b : NaN;
    }
    set raisedCornerRadiusBottomRight(v) {
        this.ensureRaisedCornerRadius();
        this.i.kx.b = +v;
        this.i.kx = this.i.kx;
    }
    get raisedCornerRadiusBottomLeft() {
        return this.i.kx ? this.i.kx.a : NaN;
    }
    set raisedCornerRadiusBottomLeft(v) {
        this.ensureRaisedCornerRadius();
        this.i.kx.a = +v;
        this.i.kx = this.i.kx;
    }
    get raisedCornerRadiusTopLeft() {
        return this.i.kx ? this.i.kx.c : NaN;
    }
    set raisedCornerRadiusTopLeft(v) {
        this.ensureRaisedCornerRadius();
        this.i.kx.c = +v;
        this.i.kx = this.i.kx;
    }
    get raisedCornerRadiusTopRight() {
        return this.i.kx ? this.i.kx.d : NaN;
    }
    set raisedCornerRadiusTopRight(v) {
        this.ensureRaisedCornerRadius();
        this.i.kx.d = +v;
        this.i.kx = this.i.kx;
    }
    ensureRaisedCornerRadius() {
        if (this.i.kx) {
            return;
        }
        this.i.kx = new CornerRadius(2);
    }
    /**
     * Gets or sets the color to use for the background when the button is pressed and the type is floating action button.
    */
    get raisedRippleColor() {
        return brushToString(this.i.t4);
    }
    set raisedRippleColor(v) {
        this.i.t4 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the background of the button when the type is flat.
    */
    get flatBackgroundColor() {
        return brushToString(this.i.su);
    }
    set flatBackgroundColor(v) {
        this.i.su = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the disabled background of the button when the type is flat.
    */
    get flatDisabledBackgroundColor() {
        return brushToString(this.i.sw);
    }
    set flatDisabledBackgroundColor(v) {
        this.i.sw = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the disabled border of the button when the type is flat.
    */
    get flatDisabledBorderColor() {
        return brushToString(this.i.sx);
    }
    set flatDisabledBorderColor(v) {
        this.i.sx = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the disabled text of the button when the type is flat.
    */
    get flatDisabledTextColor() {
        return brushToString(this.i.sy);
    }
    set flatDisabledTextColor(v) {
        this.i.sy = stringToBrush(v);
    }
    /**
     * Gets or sets the disabled elevation to use for the button when the type is flat.
    */
    get flatDisabledElevation() {
        return this.i.eb;
    }
    set flatDisabledElevation(v) {
        this.i.eb = +v;
    }
    /**
     * Gets or sets the hover color to use for the background of the button when the type is flat.
    */
    get flatHoverBackgroundColor() {
        return brushToString(this.i.s1);
    }
    set flatHoverBackgroundColor(v) {
        this.i.s1 = stringToBrush(v);
    }
    /**
     * Gets or sets the border color to use for the button when the type is flat.
    */
    get flatBorderColor() {
        return brushToString(this.i.sv);
    }
    set flatBorderColor(v) {
        this.i.sv = stringToBrush(v);
    }
    /**
     * Gets or sets the elevation to use for the button when the type is flat.
    */
    get flatRestingElevation() {
        return this.i.ee;
    }
    set flatRestingElevation(v) {
        this.i.ee = +v;
    }
    /**
     * Gets or sets the hover elevation to use for the button when the type is flat.
    */
    get flatHoverElevation() {
        return this.i.ed;
    }
    set flatHoverElevation(v) {
        this.i.ed = +v;
    }
    /**
     * Gets or sets the focus elevation to use for the button when the type is flat.
    */
    get flatFocusElevation() {
        return this.i.ec;
    }
    set flatFocusElevation(v) {
        this.i.ec = +v;
    }
    /**
     * Gets or sets the color to use for the background when the button is pressed and the type is floating action button.
    */
    get flatRippleColor() {
        return brushToString(this.i.s3);
    }
    set flatRippleColor(v) {
        this.i.s3 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the text of the button when type is flat.
    */
    get flatTextColor() {
        return brushToString(this.i.s4);
    }
    set flatTextColor(v) {
        this.i.s4 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the hovered text of the button when type is flat.
    */
    get flatHoverTextColor() {
        return brushToString(this.i.s2);
    }
    set flatHoverTextColor(v) {
        this.i.s2 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the backround the button when it is focused and flat.
    */
    get flatFocusBackgroundColor() {
        return brushToString(this.i.sz);
    }
    set flatFocusBackgroundColor(v) {
        this.i.sz = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the text the button when it is focused and flat.
    */
    get flatFocusTextColor() {
        return brushToString(this.i.s0);
    }
    set flatFocusTextColor(v) {
        this.i.s0 = stringToBrush(v);
    }
    /**
     * Gets or sets the width to use for the button border when the type is flat.
    */
    get flatBorderWidth() {
        return this.i.be;
    }
    set flatBorderWidth(v) {
        this.i.be = +v;
    }
    get flatCornerRadiusBottomRight() {
        return this.i.ku ? this.i.ku.b : NaN;
    }
    set flatCornerRadiusBottomRight(v) {
        this.ensureFlatCornerRadius();
        this.i.ku.b = +v;
        this.i.ku = this.i.ku;
    }
    get flatCornerRadiusBottomLeft() {
        return this.i.ku ? this.i.ku.a : NaN;
    }
    set flatCornerRadiusBottomLeft(v) {
        this.ensureFlatCornerRadius();
        this.i.ku.a = +v;
        this.i.ku = this.i.ku;
    }
    get flatCornerRadiusTopLeft() {
        return this.i.ku ? this.i.ku.c : NaN;
    }
    set flatCornerRadiusTopLeft(v) {
        this.ensureFlatCornerRadius();
        this.i.ku.c = +v;
        this.i.ku = this.i.ku;
    }
    get flatCornerRadiusTopRight() {
        return this.i.ku ? this.i.ku.d : NaN;
    }
    set flatCornerRadiusTopRight(v) {
        this.ensureFlatCornerRadius();
        this.i.ku.d = +v;
        this.i.ku = this.i.ku;
    }
    ensureFlatCornerRadius() {
        if (this.i.ku) {
            return;
        }
        this.i.ku = new CornerRadius(2);
    }
    /**
     * Gets or sets the color to use for the background when the button regardless of type.
    */
    get backgroundColor() {
        return brushToString(this.i.nk);
    }
    set backgroundColor(v) {
        this.i.nk = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the disabled background of the button when the type is disabled.
    */
    get disabledBackgroundColor() {
        return brushToString(this.i.sg);
    }
    set disabledBackgroundColor(v) {
        this.i.sg = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the disabled border of the button when the type is raised.
    */
    get disabledBorderColor() {
        return brushToString(this.i.sh);
    }
    set disabledBorderColor(v) {
        this.i.sh = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the disabled text of the button when the type is raised.
    */
    get disabledTextColor() {
        return brushToString(this.i.si);
    }
    set disabledTextColor(v) {
        this.i.si = stringToBrush(v);
    }
    /**
     * Gets or sets the disabled elevation to use for the button when the type is raised.
    */
    get disabledElevation() {
        return this.i.d6;
    }
    set disabledElevation(v) {
        this.i.d6 = +v;
    }
    /**
     * Gets or sets the disabled elevation to use for the button when the type is raised.
    */
    get elevationMode() {
        return this.i.o;
    }
    set elevationMode(v) {
        this.i.o = ensureEnum(ElevationMode_$type, v);
    }
    /**
     * Gets or sets the hover color to use for the background of the button when the  type is hovered.
    */
    get hoverBackgroundColor() {
        return brushToString(this.i.s7);
    }
    set hoverBackgroundColor(v) {
        this.i.s7 = stringToBrush(v);
    }
    /**
     * Gets or sets the border color to use for the button regardless of type.
    */
    get borderColor() {
        return brushToString(this.i.nl);
    }
    set borderColor(v) {
        this.i.nl = stringToBrush(v);
    }
    /**
     * Gets or sets the elevation to use for the button regardless of type.
    */
    get restingElevation() {
        return this.i.et;
    }
    set restingElevation(v) {
        this.i.et = +v;
    }
    /**
     * Gets or sets the hover elevation to use for the button regardless of type.
    */
    get hoverElevation() {
        return this.i.eg;
    }
    set hoverElevation(v) {
        this.i.eg = +v;
    }
    /**
     * Gets or sets the focus elevation to use for the button regardless of type.
    */
    get focusElevation() {
        return this.i.ef;
    }
    set focusElevation(v) {
        this.i.ef = +v;
    }
    /**
     * Gets or sets the use for the button.
    */
    get textStyle() {
        if (this.i.v == null) {
            return null;
        }
        return this.i.v.fontString;
    }
    set textStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.v = fi;
    }
    /**
     * Gets or sets the color to use for the text of the button regardless of type.
    */
    get textColor() {
        return brushToString(this.i.t7);
    }
    set textColor(v) {
        this.i.t7 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the hovered text of the button regardless of type.
    */
    get hoverTextColor() {
        return brushToString(this.i.s8);
    }
    set hoverTextColor(v) {
        this.i.s8 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the background of the button regardless of type.
    */
    get rippleColor() {
        return brushToString(this.i.t6);
    }
    set rippleColor(v) {
        this.i.t6 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the text of the button when type is raised.
    */
    get raisedTextColor() {
        return brushToString(this.i.t5);
    }
    set raisedTextColor(v) {
        this.i.t5 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the hovered text of the button when type is raised.
    */
    get raisedHoverTextColor() {
        return brushToString(this.i.t3);
    }
    set raisedHoverTextColor(v) {
        this.i.t3 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the backround the button when it is focused and raised.
    */
    get raisedFocusBackgroundColor() {
        return brushToString(this.i.t0);
    }
    set raisedFocusBackgroundColor(v) {
        this.i.t0 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the text the button when it is focused and raised.
    */
    get raisedFocusTextColor() {
        return brushToString(this.i.t1);
    }
    set raisedFocusTextColor(v) {
        this.i.t1 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the backround the button when it is focused.
    */
    get focusBackgroundColor() {
        return brushToString(this.i.s5);
    }
    set focusBackgroundColor(v) {
        this.i.s5 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the text of the button when it is focused.
    */
    get focusTextColor() {
        return brushToString(this.i.s6);
    }
    set focusTextColor(v) {
        this.i.s6 = stringToBrush(v);
    }
    /**
     * Gets or sets the width to use for the button border regardless of type.
    */
    get borderWidth() {
        return this.i.ax;
    }
    set borderWidth(v) {
        this.i.ax = +v;
    }
    get cornerRadiusBottomRight() {
        return this.i.kd ? this.i.kd.b : NaN;
    }
    set cornerRadiusBottomRight(v) {
        this.ensureCornerRadius();
        this.i.kd.b = +v;
        this.i.kd = this.i.kd;
    }
    get cornerRadiusBottomLeft() {
        return this.i.kd ? this.i.kd.a : NaN;
    }
    set cornerRadiusBottomLeft(v) {
        this.ensureCornerRadius();
        this.i.kd.a = +v;
        this.i.kd = this.i.kd;
    }
    get cornerRadiusTopLeft() {
        return this.i.kd ? this.i.kd.c : NaN;
    }
    set cornerRadiusTopLeft(v) {
        this.ensureCornerRadius();
        this.i.kd.c = +v;
        this.i.kd = this.i.kd;
    }
    get cornerRadiusTopRight() {
        return this.i.kd ? this.i.kd.d : NaN;
    }
    set cornerRadiusTopRight(v) {
        this.ensureCornerRadius();
        this.i.kd.d = +v;
        this.i.kd = this.i.kd;
    }
    ensureCornerRadius() {
        if (this.i.kd) {
            return;
        }
        this.i.kd = new CornerRadius(2);
    }
    /**
     * Gets or sets the color to use for the background of the button when the  type is outlined.
    */
    get outlinedBackgroundColor() {
        return brushToString(this.i.tk);
    }
    set outlinedBackgroundColor(v) {
        this.i.tk = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the disabled background of the button when the type is outlined.
    */
    get outlinedDisabledBackgroundColor() {
        return brushToString(this.i.tm);
    }
    set outlinedDisabledBackgroundColor(v) {
        this.i.tm = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the disabled border of the button when the type is outlined.
    */
    get outlinedDisabledBorderColor() {
        return brushToString(this.i.tn);
    }
    set outlinedDisabledBorderColor(v) {
        this.i.tn = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the disabled text of the button when the type is outlined.
    */
    get outlinedDisabledTextColor() {
        return brushToString(this.i.to);
    }
    set outlinedDisabledTextColor(v) {
        this.i.to = stringToBrush(v);
    }
    /**
     * Gets or sets the disabled elevation to use for the button when the type is outlined.
    */
    get outlinedDisabledElevation() {
        return this.i.el;
    }
    set outlinedDisabledElevation(v) {
        this.i.el = +v;
    }
    /**
     * Gets or sets the hover color to use for the background of the button when the  type is hoveredOutlined.
    */
    get outlinedHoverBackgroundColor() {
        return brushToString(this.i.tr);
    }
    set outlinedHoverBackgroundColor(v) {
        this.i.tr = stringToBrush(v);
    }
    /**
     * Gets or sets the border color to use for the button when the type is outlined.
    */
    get outlinedBorderColor() {
        return brushToString(this.i.tl);
    }
    set outlinedBorderColor(v) {
        this.i.tl = stringToBrush(v);
    }
    /**
     * Gets or sets the elevation to use for the button when the type is outlined.
    */
    get outlinedRestingElevation() {
        return this.i.eo;
    }
    set outlinedRestingElevation(v) {
        this.i.eo = +v;
    }
    /**
     * Gets or sets the hover elevation to use for the button when the type is outlined.
    */
    get outlinedHoverElevation() {
        return this.i.en;
    }
    set outlinedHoverElevation(v) {
        this.i.en = +v;
    }
    /**
     * Gets or sets the focus elevation to use for the button when the type is outlined.
    */
    get outlinedFocusElevation() {
        return this.i.em;
    }
    set outlinedFocusElevation(v) {
        this.i.em = +v;
    }
    /**
     * Gets or sets the width to use for the button border when the type is outlined.
    */
    get outlinedBorderWidth() {
        return this.i.bi;
    }
    set outlinedBorderWidth(v) {
        this.i.bi = +v;
    }
    get outlinedCornerRadiusBottomRight() {
        return this.i.kw ? this.i.kw.b : NaN;
    }
    set outlinedCornerRadiusBottomRight(v) {
        this.ensureOutlinedCornerRadius();
        this.i.kw.b = +v;
        this.i.kw = this.i.kw;
    }
    get outlinedCornerRadiusBottomLeft() {
        return this.i.kw ? this.i.kw.a : NaN;
    }
    set outlinedCornerRadiusBottomLeft(v) {
        this.ensureOutlinedCornerRadius();
        this.i.kw.a = +v;
        this.i.kw = this.i.kw;
    }
    get outlinedCornerRadiusTopLeft() {
        return this.i.kw ? this.i.kw.c : NaN;
    }
    set outlinedCornerRadiusTopLeft(v) {
        this.ensureOutlinedCornerRadius();
        this.i.kw.c = +v;
        this.i.kw = this.i.kw;
    }
    get outlinedCornerRadiusTopRight() {
        return this.i.kw ? this.i.kw.d : NaN;
    }
    set outlinedCornerRadiusTopRight(v) {
        this.ensureOutlinedCornerRadius();
        this.i.kw.d = +v;
        this.i.kw = this.i.kw;
    }
    ensureOutlinedCornerRadius() {
        if (this.i.kw) {
            return;
        }
        this.i.kw = new CornerRadius(2);
    }
    /**
     * Gets or sets the color to use for the background when the button is pressed and the type is floating action button.
    */
    get outlinedRippleColor() {
        return brushToString(this.i.tt);
    }
    set outlinedRippleColor(v) {
        this.i.tt = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the text of the button when type is outlined.
    */
    get outlinedTextColor() {
        return brushToString(this.i.tu);
    }
    set outlinedTextColor(v) {
        this.i.tu = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the hovered text of the button when type is outlined.
    */
    get outlinedHoverTextColor() {
        return brushToString(this.i.ts);
    }
    set outlinedHoverTextColor(v) {
        this.i.ts = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the backround the button when it is focused and outlined.
    */
    get outlinedFocusBackgroundColor() {
        return brushToString(this.i.tp);
    }
    set outlinedFocusBackgroundColor(v) {
        this.i.tp = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the text the button when it is focused and outlined.
    */
    get outlinedFocusTextColor() {
        return brushToString(this.i.tq);
    }
    set outlinedFocusTextColor(v) {
        this.i.tq = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the background of the button when the  type is floating action button.
    */
    get fabBackgroundColor() {
        return brushToString(this.i.sj);
    }
    set fabBackgroundColor(v) {
        this.i.sj = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the disabled background of the button when the type is fab.
    */
    get fabDisabledBackgroundColor() {
        return brushToString(this.i.sl);
    }
    set fabDisabledBackgroundColor(v) {
        this.i.sl = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the disabled border of the button when the type is fab.
    */
    get fabDisabledBorderColor() {
        return brushToString(this.i.sm);
    }
    set fabDisabledBorderColor(v) {
        this.i.sm = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the disabled text of the button when the type is fab.
    */
    get fabDisabledTextColor() {
        return brushToString(this.i.sn);
    }
    set fabDisabledTextColor(v) {
        this.i.sn = stringToBrush(v);
    }
    /**
     * Gets or sets the disabled elevation to use for the button when the type is fab.
    */
    get fabDisabledElevation() {
        return this.i.d7;
    }
    set fabDisabledElevation(v) {
        this.i.d7 = +v;
    }
    /**
     * Gets or sets the hover color to use for the background of the button when the  type is hoveredFab.
    */
    get fabHoverBackgroundColor() {
        return brushToString(this.i.sq);
    }
    set fabHoverBackgroundColor(v) {
        this.i.sq = stringToBrush(v);
    }
    /**
     * Gets or sets the border color to use for the button when the type is floating action button.
    */
    get fabBorderColor() {
        return brushToString(this.i.sk);
    }
    set fabBorderColor(v) {
        this.i.sk = stringToBrush(v);
    }
    /**
     * Gets or sets the elevation to use for the button when the type is floating action button.
    */
    get fabRestingElevation() {
        return this.i.ea;
    }
    set fabRestingElevation(v) {
        this.i.ea = +v;
    }
    /**
     * Gets or sets the hover elevation to use for the button when the type is floating action button.
    */
    get fabHoverElevation() {
        return this.i.d9;
    }
    set fabHoverElevation(v) {
        this.i.d9 = +v;
    }
    /**
     * Gets or sets the focus elevation to use for the button when the type is floating action button.
    */
    get fabFocusElevation() {
        return this.i.d8;
    }
    set fabFocusElevation(v) {
        this.i.d8 = +v;
    }
    /**
     * Gets or sets the width to use for the button border when the type is floating action button.
    */
    get fabBorderWidth() {
        return this.i.bd;
    }
    set fabBorderWidth(v) {
        this.i.bd = +v;
    }
    get fabCornerRadiusBottomRight() {
        return this.i.kt ? this.i.kt.b : NaN;
    }
    set fabCornerRadiusBottomRight(v) {
        this.ensureFabCornerRadius();
        this.i.kt.b = +v;
        this.i.kt = this.i.kt;
    }
    get fabCornerRadiusBottomLeft() {
        return this.i.kt ? this.i.kt.a : NaN;
    }
    set fabCornerRadiusBottomLeft(v) {
        this.ensureFabCornerRadius();
        this.i.kt.a = +v;
        this.i.kt = this.i.kt;
    }
    get fabCornerRadiusTopLeft() {
        return this.i.kt ? this.i.kt.c : NaN;
    }
    set fabCornerRadiusTopLeft(v) {
        this.ensureFabCornerRadius();
        this.i.kt.c = +v;
        this.i.kt = this.i.kt;
    }
    get fabCornerRadiusTopRight() {
        return this.i.kt ? this.i.kt.d : NaN;
    }
    set fabCornerRadiusTopRight(v) {
        this.ensureFabCornerRadius();
        this.i.kt.d = +v;
        this.i.kt = this.i.kt;
    }
    ensureFabCornerRadius() {
        if (this.i.kt) {
            return;
        }
        this.i.kt = new CornerRadius(2);
    }
    /**
     * Gets or sets the color to use for the background when the button is pressed and the type is floating action button.
    */
    get fabRippleColor() {
        return brushToString(this.i.ss);
    }
    set fabRippleColor(v) {
        this.i.ss = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the text of the button when type is floating action button.
    */
    get fabTextColor() {
        return brushToString(this.i.st);
    }
    set fabTextColor(v) {
        this.i.st = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the hovered text of the button when type is floating action button.
    */
    get fabHoverTextColor() {
        return brushToString(this.i.sr);
    }
    set fabHoverTextColor(v) {
        this.i.sr = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the backround the button when it is focused and fab.
    */
    get fabFocusBackgroundColor() {
        return brushToString(this.i.so);
    }
    set fabFocusBackgroundColor(v) {
        this.i.so = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the text the button when it is focused and fab.
    */
    get fabFocusTextColor() {
        return brushToString(this.i.sp);
    }
    set fabFocusTextColor(v) {
        this.i.sp = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the background of the button when the  type is icon.
    */
    get iconBackgroundColor() {
        return brushToString(this.i.s9);
    }
    set iconBackgroundColor(v) {
        this.i.s9 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the disabled background of the button when the type is icon.
    */
    get iconDisabledBackgroundColor() {
        return brushToString(this.i.tb);
    }
    set iconDisabledBackgroundColor(v) {
        this.i.tb = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the disabled border of the button when the type is icon.
    */
    get iconDisabledBorderColor() {
        return brushToString(this.i.tc);
    }
    set iconDisabledBorderColor(v) {
        this.i.tc = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the disabled text of the button when the type is icon.
    */
    get iconDisabledTextColor() {
        return brushToString(this.i.td);
    }
    set iconDisabledTextColor(v) {
        this.i.td = stringToBrush(v);
    }
    /**
     * Gets or sets the disabled elevation to use for the button when the type is icon.
    */
    get iconDisabledElevation() {
        return this.i.eh;
    }
    set iconDisabledElevation(v) {
        this.i.eh = +v;
    }
    /**
     * Gets or sets the hover color to use for the background of the button when the  type is hoveredIcon.
    */
    get iconHoverBackgroundColor() {
        return brushToString(this.i.tg);
    }
    set iconHoverBackgroundColor(v) {
        this.i.tg = stringToBrush(v);
    }
    /**
     * Gets or sets the border color to use for the button when the type is icon.
    */
    get iconBorderColor() {
        return brushToString(this.i.ta);
    }
    set iconBorderColor(v) {
        this.i.ta = stringToBrush(v);
    }
    /**
     * Gets or sets the elevation to use for the button when the type is icon.
    */
    get iconRestingElevation() {
        return this.i.ek;
    }
    set iconRestingElevation(v) {
        this.i.ek = +v;
    }
    /**
     * Gets or sets the hover elevation to use for the button when the type is icon.
    */
    get iconHoverElevation() {
        return this.i.ej;
    }
    set iconHoverElevation(v) {
        this.i.ej = +v;
    }
    /**
     * Gets or sets the focus elevation to use for the button when the type is icon.
    */
    get iconFocusElevation() {
        return this.i.ei;
    }
    set iconFocusElevation(v) {
        this.i.ei = +v;
    }
    /**
     * Gets or sets the width to use for the button border when the type is icon.
    */
    get iconBorderWidth() {
        return this.i.bf;
    }
    set iconBorderWidth(v) {
        this.i.bf = +v;
    }
    get iconCornerRadiusBottomRight() {
        return this.i.kv ? this.i.kv.b : NaN;
    }
    set iconCornerRadiusBottomRight(v) {
        this.ensureIconCornerRadius();
        this.i.kv.b = +v;
        this.i.kv = this.i.kv;
    }
    get iconCornerRadiusBottomLeft() {
        return this.i.kv ? this.i.kv.a : NaN;
    }
    set iconCornerRadiusBottomLeft(v) {
        this.ensureIconCornerRadius();
        this.i.kv.a = +v;
        this.i.kv = this.i.kv;
    }
    get iconCornerRadiusTopLeft() {
        return this.i.kv ? this.i.kv.c : NaN;
    }
    set iconCornerRadiusTopLeft(v) {
        this.ensureIconCornerRadius();
        this.i.kv.c = +v;
        this.i.kv = this.i.kv;
    }
    get iconCornerRadiusTopRight() {
        return this.i.kv ? this.i.kv.d : NaN;
    }
    set iconCornerRadiusTopRight(v) {
        this.ensureIconCornerRadius();
        this.i.kv.d = +v;
        this.i.kv = this.i.kv;
    }
    ensureIconCornerRadius() {
        if (this.i.kv) {
            return;
        }
        this.i.kv = new CornerRadius(2);
    }
    /**
     * Gets or sets the color to use for the background when the button is pressed and the type is floating action button.
    */
    get iconRippleColor() {
        return brushToString(this.i.ti);
    }
    set iconRippleColor(v) {
        this.i.ti = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the text of the button when type is icon.
    */
    get iconTextColor() {
        return brushToString(this.i.tj);
    }
    set iconTextColor(v) {
        this.i.tj = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the hovered text of the button when type is icon.
    */
    get iconHoverTextColor() {
        return brushToString(this.i.th);
    }
    set iconHoverTextColor(v) {
        this.i.th = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the backround the button when it is focused and icon.
    */
    get iconFocusBackgroundColor() {
        return brushToString(this.i.te);
    }
    set iconFocusBackgroundColor(v) {
        this.i.te = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the text the button when it is focused and icon.
    */
    get iconFocusTextColor() {
        return brushToString(this.i.tf);
    }
    set iconFocusTextColor(v) {
        this.i.tf = stringToBrush(v);
    }
    /**
     * Gets or sets the id to use for the internal native checkbox.
    */
    get inputId() {
        return this.i.h7;
    }
    set inputId(v) {
        this.i.h7 = v;
    }
    /**
     * Gets or sets the id to use for the checkbox.
    */
    get id() {
        return this.i.h5;
    }
    set id(v) {
        this.i.h5 = v;
    }
    /**
     * Gets or sets the id to use for the checkbox.
    */
    get display() {
        return this.i.gb;
    }
    set display(v) {
        this.i.gb = v;
    }
    /**
     * Gets or sets the id to use for the checkbox.
    */
    get flexDirection() {
        return this.i.he;
    }
    set flexDirection(v) {
        this.i.he = v;
    }
    /**
     * Gets or sets the flex-grow setting for the button.
    */
    get flexGrow() {
        return this.i.hg;
    }
    set flexGrow(v) {
        this.i.hg = v;
    }
    /**
     * Gets or sets the id to use for the checkbox.
    */
    get alignItems() {
        return this.i.fv;
    }
    set alignItems(v) {
        this.i.fv = v;
    }
    /**
     * Gets or sets value to use for the checkbox.
    */
    get value() {
        return this.i.ez;
    }
    set value(v) {
        this.i.ez = v;
    }
    /**
     * Gets or sets name to use for the button.
    */
    get name() {
        return this.i.ig;
    }
    set name(v) {
        this.i.ig = v;
    }
    /**
     * Gets or sets TabIndex to use for the checkbox.
    */
    get tabIndex() {
        return this.i.eu;
    }
    set tabIndex(v) {
        this.i.eu = +v;
    }
    /**
     * Gets or sets if the checkbox is Focused.
    */
    get focused() {
        return this.i.focused;
    }
    set focused(v) {
        this.i.focused = ensureBool(v);
    }
    /**
     * Gets or sets if the button show use styling to show focus.
    */
    get isFocusStyleEnabled() {
        return this.i.ak;
    }
    set isFocusStyleEnabled(v) {
        this.i.ak = ensureBool(v);
    }
    /**
     * Gets or sets the value of the aria-label attribute.
    */
    get ariaLabel() {
        return this.i.fx;
    }
    set ariaLabel(v) {
        this.i.fx = v;
    }
    /**
     * Gets or sets whether to disable the ripple effect for the button.
    */
    get disableRipple() {
        return this.i.af;
    }
    set disableRipple(v) {
        this.i.af = ensureBool(v);
    }
    /**
     * Gets whether to actually disable the ripple effect for the button.
    */
    get actualDisableRipple() {
        return this.i.ae;
    }
    set actualDisableRipple(v) {
        this.i.ae = ensureBool(v);
    }
    /**
     * Gets or sets whether the checkbox is checked.
    */
    get isHover() {
        return this.i.al;
    }
    set isHover(v) {
        this.i.al = ensureBool(v);
    }
    /**
     * Gets or sets whether the checkbox is disabled.
    */
    get disabled() {
        return this.i.disabled;
    }
    set disabled(v) {
        this.i.disabled = ensureBool(v);
    }
    /**
     * Gets or sets whether the checkbox transitions are disabled.
    */
    get disableTransitions() {
        return this.i.ag;
    }
    set disableTransitions(v) {
        this.i.ag = ensureBool(v);
    }
    findByName(name) {
        return null;
    }
    get hasUserValues() {
        return this._hasUserValues;
    }
    __m(propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    }
    _styling(container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        let genericPrefix = "";
        let typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("Button");
        let additionalPrefixes = [];
        let prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        let b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            let basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            let parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            let parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    }
    onDetachedFromUI() {
        this.i.onDetachedFromUI();
    }
    onAttachedToUI() {
        this.i.onAttachedToUI();
    }
    /**
     * Exports visual information about the current state of the grid.
    
    */
    exportVisualModel() {
        let iv = this.i.ey();
        return (iv);
    }
    /**
     * Returns a serialized copy of the exported visual model
    
    */
    exportSerializedVisualModel() {
        let iv = this.i.gf();
        return (iv);
    }
    get clicked() {
        return this._clicked;
    }
    set clicked(ev) {
        if (this._clicked_wrapped !== null) {
            this.i.clicked = delegateRemove(this.i.clicked, this._clicked_wrapped);
            this._clicked_wrapped = null;
            this._clicked = null;
        }
        this._clicked = ev;
        this._clicked_wrapped = (o, e) => {
            let outerArgs = new IgrButtonClickEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeClicked) {
                this.beforeClicked(this, outerArgs);
            }
            if (this._clicked) {
                this._clicked(this, outerArgs);
            }
        };
        this.i.clicked = delegateCombine(this.i.clicked, this._clicked_wrapped);
    }
}
//# sourceMappingURL=igr-button.js.map
