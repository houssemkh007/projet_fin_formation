import * as tslib_1 from "tslib";
import * as React from 'react';
import { InputGroup } from "./InputGroup";
import { InputGroupItem } from "./InputGroupItem";
import { ensureEnum, brushToString, stringToBrush, ensureBool, initializePropertiesFromCss, NamePatcher, isValidProp, toSpinal, getModifiedProps } from "igniteui-react-core";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { IgrInputGroupInputCollection } from './igr-input-group-input-collection';
import { CollectionAdapter } from "igniteui-react-core";
import { NotifyCollectionChangedAction } from "igniteui-react-core";
import { ContentChildrenManager } from "igniteui-react-core";
import { InputGroupDisplayType_$type } from './InputGroupDisplayType';
import { CornerRadius } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { ControlDisplayDensity_$type } from "igniteui-react-core";
import { BaseControlTheme_$type } from "igniteui-react-core";
var IgrInputGroup = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(IgrInputGroup, _super);
    function IgrInputGroup(props) {
        var _this = _super.call(this, props) || this;
        _this._wrapper = null;
        _this.contentInputs = [];
        /**
        * The style mappings actually present in the treemap. Do not directly modify this array.
        * This array's contents can be modified by causing React to reproject the child content.
        * Or adding and removing ranges from the manual ranges collection on the ranges property.
        */
        _this.actualInputs = [];
        _this._inputs = null;
        _this._inputsAdapter = null;
        _this._implementation = null;
        _this.__p = null;
        _this._hasUserValues = new Set();
        _this._stylingContainer = null;
        _this._stylingParent = null;
        _this._inStyling = false;
        if (_this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));
        }
        _this._contentChildrenManager = new ContentChildrenManager(function (ch) { return ch.props.name || ch.key || ch.props.id; }, function (ch) { return ch.name || ch.key || ch.id; }, function () { return _this._updateContentChildren(); });
        _this._implementation = _this.createImplementation();
        _this._implementation.externalObject = _this;
        _this._getMainRef = _this._getMainRef.bind(_this);
        var container;
        if (document) {
            container = document.createElement("div");
        }
        var root;
        root = container;
        if (container != null) {
            root = container;
        }
        _this.requestRender = _this.requestRender.bind(_this);
        _this._portalManager = new PortalManager("inputContent", _this.requestRender);
        var ren = new ReactRenderer(root, document, true, {}, _this._portalManager);
        _this._wrapper = ren;
        _this._container = _this._wrapper.rootWrapper;
        _this._container.setStyleProperty("display", "inline-block");
        var inputGroup = _this.i;
        _this._inputGroup = inputGroup;
        _this._inputsAdapter = new CollectionAdapter(_this.contentInputs, _this.i.inputs, _this.actualInputs, function (c) { return c.i; }, function (i) {
            if (_this._container && _this._container.getNativeElement().parentElement) {
                i._styling(_this._container.getNativeElement(), _this, _this);
            }
        }, function (i) { });
        inputGroup.provideContainer(ren);
        if (props) {
            _this.initializeProperties();
        }
        return _this;
    }
    IgrInputGroup.prototype._getMainRef = function (ref) {
        var _this = this;
        this._elRef = ref;
        if (this._elRef) {
            var mut = new MutationObserver(function (list) {
                var e_1, _a;
                try {
                    for (var list_1 = tslib_1.__values(list), list_1_1 = list_1.next(); !list_1_1.done; list_1_1 = list_1.next()) {
                        var mutation = list_1_1.value;
                        if (mutation.type == 'childList') {
                            _this.i.onChildrenMutated();
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (list_1_1 && !list_1_1.done && (_a = list_1.return))
                            _a.call(list_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
            });
            mut.observe(this._elRef, {
                childList: true,
                subtree: true
            });
        }
    };
    IgrInputGroup.prototype._updateContentChildren = function () {
        this.contentInputs.length = 0;
        var contentChildrenActual = this._contentChildrenManager.contentChildrenActual;
        for (var i = 0; i < contentChildrenActual.length; i++) {
            if ((InputGroupItem.$type).isAssignableFrom(contentChildrenActual[i].i.$type)) {
                this.contentInputs.push(contentChildrenActual[i]);
            }
        }
        if (this._inputsAdapter !== null) {
            this._inputsAdapter.notifyContentChanged();
        }
    };
    Object.defineProperty(IgrInputGroup.prototype, "inputs", {
        /**
         * A collection of manually added style mappings for the treemap.
        */
        get: function () {
            var _this = this;
            if (this._inputs === null) {
                var coll = new IgrInputGroupInputCollection();
                var inner = coll._innerColl;
                inner.addListener(function (sender, e) {
                    switch (e.action) {
                        case NotifyCollectionChangedAction.Add:
                            _this._inputsAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));
                            break;
                        case NotifyCollectionChangedAction.Remove:
                            _this._inputsAdapter.removeManualItemAt(e.oldStartingIndex);
                            break;
                        case NotifyCollectionChangedAction.Replace:
                            _this._inputsAdapter.removeManualItemAt(e.oldStartingIndex);
                            _this._inputsAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));
                            break;
                        case NotifyCollectionChangedAction.Reset:
                            _this._inputsAdapter.clearManualItems();
                            break;
                    }
                });
                this._inputs = coll;
            }
            return this._inputs;
        },
        enumerable: true,
        configurable: true
    });
    IgrInputGroup.prototype.render = function () {
        var children = this._contentChildrenManager.getChildren(this.props.children);
        this._portalManager.onRender(children);
        var div = React.createElement("div", {
            className: "ig-input-group igr-input-group",
            ref: this._getMainRef,
            children: children
        });
        return div;
    };
    IgrInputGroup.prototype.requestRender = function () {
        if (this._initialized) {
            this.setState({});
        }
    };
    //private _getLabelPortal(element: DomWrapper, portalCallback: (portal: DomPortal) => void): void {
    //    this._portalManager.getPortal(element, "TemplateContent", portalCallback);
    //}
    IgrInputGroup.prototype.shouldComponentUpdate = function (nextProps, nextState) {
        var e_2, _a;
        var mod = getModifiedProps(this.props, nextProps);
        try {
            for (var _b = tslib_1.__values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                if (isValidProp(this, p)) {
                    this[p] = mod[p];
                }
            }
        }
        catch (e_2_1) {
            e_2 = { error: e_2_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_2)
                    throw e_2.error;
            }
        }
        return true;
    };
    IgrInputGroup.prototype.initializeProperties = function () {
        var e_3, _a;
        try {
            for (var _b = tslib_1.__values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                if (isValidProp(this, p)) {
                    this[p] = this.props[p];
                }
            }
        }
        catch (e_3_1) {
            e_3 = { error: e_3_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_3)
                    throw e_3.error;
            }
        }
    };
    // supports angular themes or custom properties set in CSS
    IgrInputGroup.prototype.updateStyle = function () {
        this._styling(this._elRef, this);
    };
    IgrInputGroup.prototype.componentWillUnmount = function () {
        this._inputGroup.destroy();
        this._wrapper.destroy();
    };
    IgrInputGroup.prototype.componentDidMount = function () {
        this._elRef.appendChild(this._container.getNativeElement());
        this.initializeContent();
    };
    IgrInputGroup.prototype.initializeContent = function () {
        this._styling(this._container.getNativeElement(), this);
        this.updateStyle();
    };
    IgrInputGroup.prototype.createImplementation = function () {
        return new InputGroup();
    };
    Object.defineProperty(IgrInputGroup.prototype, "i", {
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "displayType", {
        /**
     * Gets or sets the display style to use for the button.
    */
        get: function () {
            return this.i.k;
        },
        set: function (v) {
            this.i.k = ensureEnum(InputGroupDisplayType_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "density", {
        /**
         * Gets or sets the display density to use for the input group.
        */
        get: function () {
            return this.i.h;
        },
        set: function (v) {
            this.i.h = ensureEnum(ControlDisplayDensity_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "actualDensity", {
        /**
         * Gets the actual display density to use for the input group.
        */
        get: function () {
            return this.i.g;
        },
        set: function (v) {
            this.i.g = ensureEnum(ControlDisplayDensity_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "baseTheme", {
        /**
         * Gets or sets the base built in theme to use for the label.
        */
        get: function () {
            return this.i.d;
        },
        set: function (v) {
            this.i.d = ensureEnum(BaseControlTheme_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "inputHasValue", {
        get: function () {
            return this.i.af;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "actualBorderColor", {
        /**
         * Gets the actual item background color.
        */
        get: function () {
            return brushToString(this.i.os);
        },
        set: function (v) {
            this.i.os = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "actualFocusBorderColor", {
        /**
         * Gets the actual item border color.
        */
        get: function () {
            return brushToString(this.i.ot);
        },
        set: function (v) {
            this.i.ot = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "actualBorderWidth", {
        /**
         * Gets the actual item border width.
        */
        get: function () {
            return this.i.ca;
        },
        set: function (v) {
            this.i.ca = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "actualFocusBorderWidth", {
        /**
         * Gets the actual item border width.
        */
        get: function () {
            return this.i.cb;
        },
        set: function (v) {
            this.i.cb = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "actualCornerRadiusBottomRight", {
        get: function () {
            return this.i.mz ? this.i.mz.b : NaN;
        },
        set: function (v) {
            this.ensureActualCornerRadius();
            this.i.mz.b = +v;
            this.i.mz = this.i.mz;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "actualCornerRadiusBottomLeft", {
        get: function () {
            return this.i.mz ? this.i.mz.a : NaN;
        },
        set: function (v) {
            this.ensureActualCornerRadius();
            this.i.mz.a = +v;
            this.i.mz = this.i.mz;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "actualCornerRadiusTopLeft", {
        get: function () {
            return this.i.mz ? this.i.mz.c : NaN;
        },
        set: function (v) {
            this.ensureActualCornerRadius();
            this.i.mz.c = +v;
            this.i.mz = this.i.mz;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "actualCornerRadiusTopRight", {
        get: function () {
            return this.i.mz ? this.i.mz.d : NaN;
        },
        set: function (v) {
            this.ensureActualCornerRadius();
            this.i.mz.d = +v;
            this.i.mz = this.i.mz;
        },
        enumerable: true,
        configurable: true
    });
    IgrInputGroup.prototype.ensureActualCornerRadius = function () {
        if (this.i.mz) {
            return;
        }
        this.i.mz = new CornerRadius(2);
    };
    Object.defineProperty(IgrInputGroup.prototype, "actualContentPaddingBottom", {
        get: function () {
            return this.i.tf ? this.i.tf.b : NaN;
        },
        set: function (v) {
            this.ensureActualContentPadding();
            this.i.tf.b = +v;
            this.i.tf = this.i.tf;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "actualContentPaddingLeft", {
        get: function () {
            return this.i.tf ? this.i.tf.c : NaN;
        },
        set: function (v) {
            this.ensureActualContentPadding();
            this.i.tf.c = +v;
            this.i.tf = this.i.tf;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "actualContentPaddingRight", {
        get: function () {
            return this.i.tf ? this.i.tf.d : NaN;
        },
        set: function (v) {
            this.ensureActualContentPadding();
            this.i.tf.d = +v;
            this.i.tf = this.i.tf;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "actualContentPaddingTop", {
        get: function () {
            return this.i.tf ? this.i.tf.e : NaN;
        },
        set: function (v) {
            this.ensureActualContentPadding();
            this.i.tf.e = +v;
            this.i.tf = this.i.tf;
        },
        enumerable: true,
        configurable: true
    });
    IgrInputGroup.prototype.ensureActualContentPadding = function () {
        if (this.i.tf) {
            return;
        }
        this.i.tf = new Thickness(2);
    };
    Object.defineProperty(IgrInputGroup.prototype, "actualUnderlineWidth", {
        /**
         * Gets the actual width to use for the underline element.
        */
        get: function () {
            return this.i.cj;
        },
        set: function (v) {
            this.i.cj = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "actualUnderlineRippleWidth", {
        /**
         * Gets the actual width to use for the underline element.
        */
        get: function () {
            return this.i.ci;
        },
        set: function (v) {
            this.i.ci = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "actualHoverUnderlineWidth", {
        /**
         * Gets the width to use for the underline element when hovered.
        */
        get: function () {
            return this.i.cf;
        },
        set: function (v) {
            this.i.cf = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "actualUnderlineColor", {
        /**
         * Gets the actual color to use for the underline element.
        */
        get: function () {
            return brushToString(this.i.ow);
        },
        set: function (v) {
            this.i.ow = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "actualUnderlineRippleColor", {
        /**
         * Gets the actual color to use for the underline ripple element.
        */
        get: function () {
            return brushToString(this.i.ox);
        },
        set: function (v) {
            this.i.ox = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "actualHoverUnderlineColor", {
        /**
         * Gets the actual color to use for the underline element.
        */
        get: function () {
            return brushToString(this.i.ov);
        },
        set: function (v) {
            this.i.ov = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "actualFocusUnderlineColor", {
        /**
         * Gets the actual color to use for the underline element when focused.
        */
        get: function () {
            return brushToString(this.i.ou);
        },
        set: function (v) {
            this.i.ou = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "actualUnderlineOpacity", {
        /**
         * Gets the actual opacity to use for the underline element.
        */
        get: function () {
            return this.i.cg;
        },
        set: function (v) {
            this.i.cg = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "actualHoverUnderlineOpacity", {
        /**
         * Gets the actual opacity to use for the underline element when hovered.
        */
        get: function () {
            return this.i.ce;
        },
        set: function (v) {
            this.i.ce = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "actualFocusUnderlineOpacity", {
        /**
         * Gets the actual opacity to use for the underline element when focused.
        */
        get: function () {
            return this.i.cc;
        },
        set: function (v) {
            this.i.cc = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "actualFocusUnderlineRippleOpacity", {
        /**
         * Gets the actual opacity to use for the underline ripple element when focused.
        */
        get: function () {
            return this.i.cd;
        },
        set: function (v) {
            this.i.cd = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "actualUnderlineRippleOpacity", {
        /**
         * Gets the actual opacity to use for the underline ripple element.
        */
        get: function () {
            return this.i.ch;
        },
        set: function (v) {
            this.i.ch = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "actualBackgroundColor", {
        /**
         * Gets the actual opacity to use for the underline ripple element.
        */
        get: function () {
            return brushToString(this.i.or);
        },
        set: function (v) {
            this.i.or = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "borderWidth", {
        /**
         * Gets or sets the border width to use for the border of the item group.
        */
        get: function () {
            return this.i.cu;
        },
        set: function (v) {
            this.i.cu = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "focusBorderWidth", {
        /**
         * Gets or sets the border width to use for the border of the item group when focused.
        */
        get: function () {
            return this.i.hc;
        },
        set: function (v) {
            this.i.hc = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "borderColor", {
        /**
         * Gets or sets the color to use the border of the input group.
        */
        get: function () {
            return brushToString(this.i.oz);
        },
        set: function (v) {
            this.i.oz = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "cornerRadiusBottomRight", {
        get: function () {
            return this.i.m3 ? this.i.m3.b : NaN;
        },
        set: function (v) {
            this.ensureCornerRadius();
            this.i.m3.b = +v;
            this.i.m3 = this.i.m3;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "cornerRadiusBottomLeft", {
        get: function () {
            return this.i.m3 ? this.i.m3.a : NaN;
        },
        set: function (v) {
            this.ensureCornerRadius();
            this.i.m3.a = +v;
            this.i.m3 = this.i.m3;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "cornerRadiusTopLeft", {
        get: function () {
            return this.i.m3 ? this.i.m3.c : NaN;
        },
        set: function (v) {
            this.ensureCornerRadius();
            this.i.m3.c = +v;
            this.i.m3 = this.i.m3;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "cornerRadiusTopRight", {
        get: function () {
            return this.i.m3 ? this.i.m3.d : NaN;
        },
        set: function (v) {
            this.ensureCornerRadius();
            this.i.m3.d = +v;
            this.i.m3 = this.i.m3;
        },
        enumerable: true,
        configurable: true
    });
    IgrInputGroup.prototype.ensureCornerRadius = function () {
        if (this.i.m3) {
            return;
        }
        this.i.m3 = new CornerRadius(2);
    };
    Object.defineProperty(IgrInputGroup.prototype, "contentPaddingBottom", {
        get: function () {
            return this.i.tj ? this.i.tj.b : NaN;
        },
        set: function (v) {
            this.ensureContentPadding();
            this.i.tj.b = +v;
            this.i.tj = this.i.tj;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "contentPaddingLeft", {
        get: function () {
            return this.i.tj ? this.i.tj.c : NaN;
        },
        set: function (v) {
            this.ensureContentPadding();
            this.i.tj.c = +v;
            this.i.tj = this.i.tj;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "contentPaddingRight", {
        get: function () {
            return this.i.tj ? this.i.tj.d : NaN;
        },
        set: function (v) {
            this.ensureContentPadding();
            this.i.tj.d = +v;
            this.i.tj = this.i.tj;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "contentPaddingTop", {
        get: function () {
            return this.i.tj ? this.i.tj.e : NaN;
        },
        set: function (v) {
            this.ensureContentPadding();
            this.i.tj.e = +v;
            this.i.tj = this.i.tj;
        },
        enumerable: true,
        configurable: true
    });
    IgrInputGroup.prototype.ensureContentPadding = function () {
        if (this.i.tj) {
            return;
        }
        this.i.tj = new Thickness(2);
    };
    Object.defineProperty(IgrInputGroup.prototype, "underlineWidth", {
        /**
         * Gets or sets the width to use for the underline element.
        */
        get: function () {
            return this.i.h4;
        },
        set: function (v) {
            this.i.h4 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "underlineRippleWidth", {
        /**
         * Gets or sets the width to use for the underline element.
        */
        get: function () {
            return this.i.h3;
        },
        set: function (v) {
            this.i.h3 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "hoverUnderlineWidth", {
        /**
         * Gets or sets the width to use for the underline element when hovered.
        */
        get: function () {
            return this.i.hg;
        },
        set: function (v) {
            this.i.hg = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "underlineColor", {
        /**
         * Gets or sets the color to use for the underline element.
        */
        get: function () {
            return brushToString(this.i.s7);
        },
        set: function (v) {
            this.i.s7 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "underlineRippleColor", {
        /**
         * Gets or sets the color to use for the underline ripple element.
        */
        get: function () {
            return brushToString(this.i.s8);
        },
        set: function (v) {
            this.i.s8 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "hoverUnderlineColor", {
        /**
         * Gets or sets the color to use for the underline element.
        */
        get: function () {
            return brushToString(this.i.ss);
        },
        set: function (v) {
            this.i.ss = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "focusUnderlineColor", {
        /**
         * Gets or sets the color to use for the underline element.
        */
        get: function () {
            return brushToString(this.i.sr);
        },
        set: function (v) {
            this.i.sr = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "underlineOpacity", {
        /**
         * Gets or sets the color to use for the underline element.
        */
        get: function () {
            return this.i.h1;
        },
        set: function (v) {
            this.i.h1 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "hoverUnderlineOpacity", {
        /**
         * Gets or sets the color to use for the underline element.
        */
        get: function () {
            return this.i.hf;
        },
        set: function (v) {
            this.i.hf = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "focusUnderlineOpacity", {
        /**
         * Gets or sets the color to use for the underline element.
        */
        get: function () {
            return this.i.hd;
        },
        set: function (v) {
            this.i.hd = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "focusUnderlineRippleOpacity", {
        /**
         * Gets or sets the opacity to use for the underline ripple element when focused.
        */
        get: function () {
            return this.i.he;
        },
        set: function (v) {
            this.i.he = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "underlineRippleOpacity", {
        /**
         * Gets or sets the opacity to use for the underline ripple element.
        */
        get: function () {
            return this.i.h2;
        },
        set: function (v) {
            this.i.h2 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "backgroundColor", {
        /**
         * Gets or sets the background color to use for the input group.
        */
        get: function () {
            return brushToString(this.i.oy);
        },
        set: function (v) {
            this.i.oy = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "lineTypeBorderWidth", {
        /**
         * Gets or sets the border width to use for the border of the item group when using type line.
        */
        get: function () {
            return this.i.hh;
        },
        set: function (v) {
            this.i.hh = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "lineTypeFocusBorderWidth", {
        /**
         * Gets or sets the border width to use for the border of the item group when focused when type is line.
        */
        get: function () {
            return this.i.hi;
        },
        set: function (v) {
            this.i.hi = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "lineTypeFocusBorderColor", {
        /**
         * Gets or sets the focus color to use the border of the input group when type is line.
        */
        get: function () {
            return brushToString(this.i.sv);
        },
        set: function (v) {
            this.i.sv = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "lineTypeBorderColor", {
        /**
         * Gets or sets the color to use the border of the input group when type is line.
        */
        get: function () {
            return brushToString(this.i.su);
        },
        set: function (v) {
            this.i.su = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "lineTypeCornerRadiusBottomRight", {
        get: function () {
            return this.i.nj ? this.i.nj.b : NaN;
        },
        set: function (v) {
            this.ensureLineTypeCornerRadius();
            this.i.nj.b = +v;
            this.i.nj = this.i.nj;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "lineTypeCornerRadiusBottomLeft", {
        get: function () {
            return this.i.nj ? this.i.nj.a : NaN;
        },
        set: function (v) {
            this.ensureLineTypeCornerRadius();
            this.i.nj.a = +v;
            this.i.nj = this.i.nj;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "lineTypeCornerRadiusTopLeft", {
        get: function () {
            return this.i.nj ? this.i.nj.c : NaN;
        },
        set: function (v) {
            this.ensureLineTypeCornerRadius();
            this.i.nj.c = +v;
            this.i.nj = this.i.nj;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "lineTypeCornerRadiusTopRight", {
        get: function () {
            return this.i.nj ? this.i.nj.d : NaN;
        },
        set: function (v) {
            this.ensureLineTypeCornerRadius();
            this.i.nj.d = +v;
            this.i.nj = this.i.nj;
        },
        enumerable: true,
        configurable: true
    });
    IgrInputGroup.prototype.ensureLineTypeCornerRadius = function () {
        if (this.i.nj) {
            return;
        }
        this.i.nj = new CornerRadius(2);
    };
    Object.defineProperty(IgrInputGroup.prototype, "lineTypeContentPaddingBottom", {
        get: function () {
            return this.i.tz ? this.i.tz.b : NaN;
        },
        set: function (v) {
            this.ensureLineTypeContentPadding();
            this.i.tz.b = +v;
            this.i.tz = this.i.tz;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "lineTypeContentPaddingLeft", {
        get: function () {
            return this.i.tz ? this.i.tz.c : NaN;
        },
        set: function (v) {
            this.ensureLineTypeContentPadding();
            this.i.tz.c = +v;
            this.i.tz = this.i.tz;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "lineTypeContentPaddingRight", {
        get: function () {
            return this.i.tz ? this.i.tz.d : NaN;
        },
        set: function (v) {
            this.ensureLineTypeContentPadding();
            this.i.tz.d = +v;
            this.i.tz = this.i.tz;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "lineTypeContentPaddingTop", {
        get: function () {
            return this.i.tz ? this.i.tz.e : NaN;
        },
        set: function (v) {
            this.ensureLineTypeContentPadding();
            this.i.tz.e = +v;
            this.i.tz = this.i.tz;
        },
        enumerable: true,
        configurable: true
    });
    IgrInputGroup.prototype.ensureLineTypeContentPadding = function () {
        if (this.i.tz) {
            return;
        }
        this.i.tz = new Thickness(2);
    };
    Object.defineProperty(IgrInputGroup.prototype, "lineTypeUnderlineWidth", {
        /**
         * Gets or sets the width to use for the underline element when type is line.
        */
        get: function () {
            return this.i.hq;
        },
        set: function (v) {
            this.i.hq = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "lineTypeUnderlineRippleWidth", {
        /**
         * Gets or sets the width to use for the underline element when type is line.
        */
        get: function () {
            return this.i.hp;
        },
        set: function (v) {
            this.i.hp = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "lineTypeHoverUnderlineWidth", {
        /**
         * Gets or sets the width to use for the underline element when hovered when type is line.
        */
        get: function () {
            return this.i.hm;
        },
        set: function (v) {
            this.i.hm = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "lineTypeUnderlineColor", {
        /**
         * Gets or sets the color to use for the underline element when type is line.
        */
        get: function () {
            return brushToString(this.i.sy);
        },
        set: function (v) {
            this.i.sy = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "lineTypeUnderlineRippleColor", {
        /**
         * Gets or sets the color to use for the underline ripple element when type is line.
        */
        get: function () {
            return brushToString(this.i.sz);
        },
        set: function (v) {
            this.i.sz = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "lineTypeHoverUnderlineColor", {
        /**
         * Gets or sets the color to use for the underline element when type is line.
        */
        get: function () {
            return brushToString(this.i.sx);
        },
        set: function (v) {
            this.i.sx = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "lineTypeFocusUnderlineColor", {
        /**
         * Gets or sets the color to use for the underline element when type is line.
        */
        get: function () {
            return brushToString(this.i.sw);
        },
        set: function (v) {
            this.i.sw = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "lineTypeUnderlineOpacity", {
        /**
         * Gets or sets the color to use for the underline element when type is line.
        */
        get: function () {
            return this.i.hn;
        },
        set: function (v) {
            this.i.hn = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "lineTypeHoverUnderlineOpacity", {
        /**
         * Gets or sets the color to use for the underline element when type is line.
        */
        get: function () {
            return this.i.hl;
        },
        set: function (v) {
            this.i.hl = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "lineTypeFocusUnderlineOpacity", {
        /**
         * Gets or sets the color to use for the underline element when type is line.
        */
        get: function () {
            return this.i.hj;
        },
        set: function (v) {
            this.i.hj = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "lineTypeFocusUnderlineRippleOpacity", {
        /**
         * Gets or sets the opacity to use for the underline ripple element when focused when type is line.
        */
        get: function () {
            return this.i.hk;
        },
        set: function (v) {
            this.i.hk = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "lineTypeUnderlineRippleOpacity", {
        /**
         * Gets or sets the opacity to use for the underline ripple element when type is line.
        */
        get: function () {
            return this.i.ho;
        },
        set: function (v) {
            this.i.ho = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "lineTypeBackgroundColor", {
        /**
         * Gets or sets the background color to use for the input group when type is line.
        */
        get: function () {
            return brushToString(this.i.st);
        },
        set: function (v) {
            this.i.st = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "boxTypeBorderWidth", {
        /**
         * Gets or sets the border width to use for the border of the item group when using type line.
        */
        get: function () {
            return this.i.cv;
        },
        set: function (v) {
            this.i.cv = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "boxTypeFocusBorderWidth", {
        /**
         * Gets or sets the border width to use for the border of the item group when focused when type is box.
        */
        get: function () {
            return this.i.cw;
        },
        set: function (v) {
            this.i.cw = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "boxTypeFocusBorderColor", {
        /**
         * Gets or sets the focus color to use the border of the input group when type is box.
        */
        get: function () {
            return brushToString(this.i.o9);
        },
        set: function (v) {
            this.i.o9 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "boxTypeBorderColor", {
        /**
         * Gets or sets the color to use the border of the input group when type is box.
        */
        get: function () {
            return brushToString(this.i.o8);
        },
        set: function (v) {
            this.i.o8 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "boxTypeCornerRadiusBottomRight", {
        get: function () {
            return this.i.m1 ? this.i.m1.b : NaN;
        },
        set: function (v) {
            this.ensureBoxTypeCornerRadius();
            this.i.m1.b = +v;
            this.i.m1 = this.i.m1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "boxTypeCornerRadiusBottomLeft", {
        get: function () {
            return this.i.m1 ? this.i.m1.a : NaN;
        },
        set: function (v) {
            this.ensureBoxTypeCornerRadius();
            this.i.m1.a = +v;
            this.i.m1 = this.i.m1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "boxTypeCornerRadiusTopLeft", {
        get: function () {
            return this.i.m1 ? this.i.m1.c : NaN;
        },
        set: function (v) {
            this.ensureBoxTypeCornerRadius();
            this.i.m1.c = +v;
            this.i.m1 = this.i.m1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "boxTypeCornerRadiusTopRight", {
        get: function () {
            return this.i.m1 ? this.i.m1.d : NaN;
        },
        set: function (v) {
            this.ensureBoxTypeCornerRadius();
            this.i.m1.d = +v;
            this.i.m1 = this.i.m1;
        },
        enumerable: true,
        configurable: true
    });
    IgrInputGroup.prototype.ensureBoxTypeCornerRadius = function () {
        if (this.i.m1) {
            return;
        }
        this.i.m1 = new CornerRadius(2);
    };
    Object.defineProperty(IgrInputGroup.prototype, "boxTypeContentPaddingBottom", {
        get: function () {
            return this.i.th ? this.i.th.b : NaN;
        },
        set: function (v) {
            this.ensureBoxTypeContentPadding();
            this.i.th.b = +v;
            this.i.th = this.i.th;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "boxTypeContentPaddingLeft", {
        get: function () {
            return this.i.th ? this.i.th.c : NaN;
        },
        set: function (v) {
            this.ensureBoxTypeContentPadding();
            this.i.th.c = +v;
            this.i.th = this.i.th;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "boxTypeContentPaddingRight", {
        get: function () {
            return this.i.th ? this.i.th.d : NaN;
        },
        set: function (v) {
            this.ensureBoxTypeContentPadding();
            this.i.th.d = +v;
            this.i.th = this.i.th;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "boxTypeContentPaddingTop", {
        get: function () {
            return this.i.th ? this.i.th.e : NaN;
        },
        set: function (v) {
            this.ensureBoxTypeContentPadding();
            this.i.th.e = +v;
            this.i.th = this.i.th;
        },
        enumerable: true,
        configurable: true
    });
    IgrInputGroup.prototype.ensureBoxTypeContentPadding = function () {
        if (this.i.th) {
            return;
        }
        this.i.th = new Thickness(2);
    };
    Object.defineProperty(IgrInputGroup.prototype, "boxTypeUnderlineWidth", {
        /**
         * Gets or sets the width to use for the underline element when type is box.
        */
        get: function () {
            return this.i.c4;
        },
        set: function (v) {
            this.i.c4 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "boxTypeUnderlineRippleWidth", {
        /**
         * Gets or sets the width to use for the underline element when type is box.
        */
        get: function () {
            return this.i.c3;
        },
        set: function (v) {
            this.i.c3 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "boxTypeHoverUnderlineWidth", {
        /**
         * Gets or sets the width to use for the underline element when hovered when type is box.
        */
        get: function () {
            return this.i.c0;
        },
        set: function (v) {
            this.i.c0 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "boxTypeUnderlineColor", {
        /**
         * Gets or sets the color to use for the underline element when type is box.
        */
        get: function () {
            return brushToString(this.i.pc);
        },
        set: function (v) {
            this.i.pc = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "boxTypeUnderlineRippleColor", {
        /**
         * Gets or sets the color to use for the underline ripple element when type is box.
        */
        get: function () {
            return brushToString(this.i.pd);
        },
        set: function (v) {
            this.i.pd = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "boxTypeHoverUnderlineColor", {
        /**
         * Gets or sets the color to use for the underline element when type is box.
        */
        get: function () {
            return brushToString(this.i.pb);
        },
        set: function (v) {
            this.i.pb = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "boxTypeFocusUnderlineColor", {
        /**
         * Gets or sets the color to use for the underline element when type is box.
        */
        get: function () {
            return brushToString(this.i.pa);
        },
        set: function (v) {
            this.i.pa = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "boxTypeUnderlineOpacity", {
        /**
         * Gets or sets the color to use for the underline element when type is box.
        */
        get: function () {
            return this.i.c1;
        },
        set: function (v) {
            this.i.c1 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "boxTypeHoverUnderlineOpacity", {
        /**
         * Gets or sets the color to use for the underline element when type is box.
        */
        get: function () {
            return this.i.cz;
        },
        set: function (v) {
            this.i.cz = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "boxTypeFocusUnderlineOpacity", {
        /**
         * Gets or sets the color to use for the underline element when type is box.
        */
        get: function () {
            return this.i.cx;
        },
        set: function (v) {
            this.i.cx = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "boxTypeFocusUnderlineRippleOpacity", {
        /**
         * Gets or sets the opacity to use for the underline ripple element when focused when type is box.
        */
        get: function () {
            return this.i.cy;
        },
        set: function (v) {
            this.i.cy = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "boxTypeUnderlineRippleOpacity", {
        /**
         * Gets or sets the opacity to use for the underline ripple element when type is box.
        */
        get: function () {
            return this.i.c2;
        },
        set: function (v) {
            this.i.c2 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "boxTypeBackgroundColor", {
        /**
         * Gets or sets the background color to use for the input group when type is box.
        */
        get: function () {
            return brushToString(this.i.o7);
        },
        set: function (v) {
            this.i.o7 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "borderTypeBorderWidth", {
        /**
         * Gets or sets the border width to use for the border of the item group when using type line.
        */
        get: function () {
            return this.i.ck;
        },
        set: function (v) {
            this.i.ck = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "borderTypeFocusBorderWidth", {
        /**
         * Gets or sets the border width to use for the border of the item group when focused when type is border.
        */
        get: function () {
            return this.i.cl;
        },
        set: function (v) {
            this.i.cl = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "borderTypeFocusBorderColor", {
        /**
         * Gets or sets the focus color to use the border of the input group when type is border.
        */
        get: function () {
            return brushToString(this.i.o2);
        },
        set: function (v) {
            this.i.o2 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "borderTypeBorderColor", {
        /**
         * Gets or sets the color to use the border of the input group when type is border.
        */
        get: function () {
            return brushToString(this.i.o1);
        },
        set: function (v) {
            this.i.o1 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "borderTypeCornerRadiusBottomRight", {
        get: function () {
            return this.i.m0 ? this.i.m0.b : NaN;
        },
        set: function (v) {
            this.ensureBorderTypeCornerRadius();
            this.i.m0.b = +v;
            this.i.m0 = this.i.m0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "borderTypeCornerRadiusBottomLeft", {
        get: function () {
            return this.i.m0 ? this.i.m0.a : NaN;
        },
        set: function (v) {
            this.ensureBorderTypeCornerRadius();
            this.i.m0.a = +v;
            this.i.m0 = this.i.m0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "borderTypeCornerRadiusTopLeft", {
        get: function () {
            return this.i.m0 ? this.i.m0.c : NaN;
        },
        set: function (v) {
            this.ensureBorderTypeCornerRadius();
            this.i.m0.c = +v;
            this.i.m0 = this.i.m0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "borderTypeCornerRadiusTopRight", {
        get: function () {
            return this.i.m0 ? this.i.m0.d : NaN;
        },
        set: function (v) {
            this.ensureBorderTypeCornerRadius();
            this.i.m0.d = +v;
            this.i.m0 = this.i.m0;
        },
        enumerable: true,
        configurable: true
    });
    IgrInputGroup.prototype.ensureBorderTypeCornerRadius = function () {
        if (this.i.m0) {
            return;
        }
        this.i.m0 = new CornerRadius(2);
    };
    Object.defineProperty(IgrInputGroup.prototype, "borderTypeContentPaddingBottom", {
        get: function () {
            return this.i.tg ? this.i.tg.b : NaN;
        },
        set: function (v) {
            this.ensureBorderTypeContentPadding();
            this.i.tg.b = +v;
            this.i.tg = this.i.tg;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "borderTypeContentPaddingLeft", {
        get: function () {
            return this.i.tg ? this.i.tg.c : NaN;
        },
        set: function (v) {
            this.ensureBorderTypeContentPadding();
            this.i.tg.c = +v;
            this.i.tg = this.i.tg;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "borderTypeContentPaddingRight", {
        get: function () {
            return this.i.tg ? this.i.tg.d : NaN;
        },
        set: function (v) {
            this.ensureBorderTypeContentPadding();
            this.i.tg.d = +v;
            this.i.tg = this.i.tg;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "borderTypeContentPaddingTop", {
        get: function () {
            return this.i.tg ? this.i.tg.e : NaN;
        },
        set: function (v) {
            this.ensureBorderTypeContentPadding();
            this.i.tg.e = +v;
            this.i.tg = this.i.tg;
        },
        enumerable: true,
        configurable: true
    });
    IgrInputGroup.prototype.ensureBorderTypeContentPadding = function () {
        if (this.i.tg) {
            return;
        }
        this.i.tg = new Thickness(2);
    };
    Object.defineProperty(IgrInputGroup.prototype, "borderTypeUnderlineWidth", {
        /**
         * Gets or sets the width to use for the underline element when type is border.
        */
        get: function () {
            return this.i.ct;
        },
        set: function (v) {
            this.i.ct = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "borderTypeUnderlineRippleWidth", {
        /**
         * Gets or sets the width to use for the underline element when type is border.
        */
        get: function () {
            return this.i.cs;
        },
        set: function (v) {
            this.i.cs = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "borderTypeHoverUnderlineWidth", {
        /**
         * Gets or sets the width to use for the underline element when hovered when type is border.
        */
        get: function () {
            return this.i.cp;
        },
        set: function (v) {
            this.i.cp = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "borderTypeUnderlineColor", {
        /**
         * Gets or sets the color to use for the underline element when type is border.
        */
        get: function () {
            return brushToString(this.i.o5);
        },
        set: function (v) {
            this.i.o5 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "borderTypeUnderlineRippleColor", {
        /**
         * Gets or sets the color to use for the underline ripple element when type is border.
        */
        get: function () {
            return brushToString(this.i.o6);
        },
        set: function (v) {
            this.i.o6 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "borderTypeHoverUnderlineColor", {
        /**
         * Gets or sets the color to use for the underline element when type is border.
        */
        get: function () {
            return brushToString(this.i.o4);
        },
        set: function (v) {
            this.i.o4 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "borderTypeFocusUnderlineColor", {
        /**
         * Gets or sets the color to use for the underline element when type is border.
        */
        get: function () {
            return brushToString(this.i.o3);
        },
        set: function (v) {
            this.i.o3 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "borderTypeUnderlineOpacity", {
        /**
         * Gets or sets the color to use for the underline element when type is border.
        */
        get: function () {
            return this.i.cq;
        },
        set: function (v) {
            this.i.cq = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "borderTypeHoverUnderlineOpacity", {
        /**
         * Gets or sets the color to use for the underline element when type is border.
        */
        get: function () {
            return this.i.co;
        },
        set: function (v) {
            this.i.co = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "borderTypeFocusUnderlineOpacity", {
        /**
         * Gets or sets the color to use for the underline element when type is border.
        */
        get: function () {
            return this.i.cm;
        },
        set: function (v) {
            this.i.cm = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "borderTypeFocusUnderlineRippleOpacity", {
        /**
         * Gets or sets the opacity to use for the underline ripple element when focused when type is border.
        */
        get: function () {
            return this.i.cn;
        },
        set: function (v) {
            this.i.cn = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "borderTypeUnderlineRippleOpacity", {
        /**
         * Gets or sets the opacity to use for the underline ripple element when type is border.
        */
        get: function () {
            return this.i.cr;
        },
        set: function (v) {
            this.i.cr = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "borderTypeBackgroundColor", {
        /**
         * Gets or sets the background color to use for the input group when type is border.
        */
        get: function () {
            return brushToString(this.i.o0);
        },
        set: function (v) {
            this.i.o0 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "searchTypeBorderWidth", {
        /**
         * Gets or sets the search width to use for the border of the item group when using type line.
        */
        get: function () {
            return this.i.hr;
        },
        set: function (v) {
            this.i.hr = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "searchTypeFocusBorderWidth", {
        /**
         * Gets or sets the search width to use for the border of the item group when focused when type is search.
        */
        get: function () {
            return this.i.hs;
        },
        set: function (v) {
            this.i.hs = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "searchTypeFocusBorderColor", {
        /**
         * Gets or sets the focus color to use the search of the input group when type is search.
        */
        get: function () {
            return brushToString(this.i.s2);
        },
        set: function (v) {
            this.i.s2 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "searchTypeBorderColor", {
        /**
         * Gets or sets the color to use the search of the input group when type is search.
        */
        get: function () {
            return brushToString(this.i.s1);
        },
        set: function (v) {
            this.i.s1 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "searchTypeCornerRadiusBottomRight", {
        get: function () {
            return this.i.nk ? this.i.nk.b : NaN;
        },
        set: function (v) {
            this.ensureSearchTypeCornerRadius();
            this.i.nk.b = +v;
            this.i.nk = this.i.nk;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "searchTypeCornerRadiusBottomLeft", {
        get: function () {
            return this.i.nk ? this.i.nk.a : NaN;
        },
        set: function (v) {
            this.ensureSearchTypeCornerRadius();
            this.i.nk.a = +v;
            this.i.nk = this.i.nk;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "searchTypeCornerRadiusTopLeft", {
        get: function () {
            return this.i.nk ? this.i.nk.c : NaN;
        },
        set: function (v) {
            this.ensureSearchTypeCornerRadius();
            this.i.nk.c = +v;
            this.i.nk = this.i.nk;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "searchTypeCornerRadiusTopRight", {
        get: function () {
            return this.i.nk ? this.i.nk.d : NaN;
        },
        set: function (v) {
            this.ensureSearchTypeCornerRadius();
            this.i.nk.d = +v;
            this.i.nk = this.i.nk;
        },
        enumerable: true,
        configurable: true
    });
    IgrInputGroup.prototype.ensureSearchTypeCornerRadius = function () {
        if (this.i.nk) {
            return;
        }
        this.i.nk = new CornerRadius(2);
    };
    Object.defineProperty(IgrInputGroup.prototype, "searchTypeContentPaddingBottom", {
        get: function () {
            return this.i.t0 ? this.i.t0.b : NaN;
        },
        set: function (v) {
            this.ensureSearchTypeContentPadding();
            this.i.t0.b = +v;
            this.i.t0 = this.i.t0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "searchTypeContentPaddingLeft", {
        get: function () {
            return this.i.t0 ? this.i.t0.c : NaN;
        },
        set: function (v) {
            this.ensureSearchTypeContentPadding();
            this.i.t0.c = +v;
            this.i.t0 = this.i.t0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "searchTypeContentPaddingRight", {
        get: function () {
            return this.i.t0 ? this.i.t0.d : NaN;
        },
        set: function (v) {
            this.ensureSearchTypeContentPadding();
            this.i.t0.d = +v;
            this.i.t0 = this.i.t0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "searchTypeContentPaddingTop", {
        get: function () {
            return this.i.t0 ? this.i.t0.e : NaN;
        },
        set: function (v) {
            this.ensureSearchTypeContentPadding();
            this.i.t0.e = +v;
            this.i.t0 = this.i.t0;
        },
        enumerable: true,
        configurable: true
    });
    IgrInputGroup.prototype.ensureSearchTypeContentPadding = function () {
        if (this.i.t0) {
            return;
        }
        this.i.t0 = new Thickness(2);
    };
    Object.defineProperty(IgrInputGroup.prototype, "searchTypeUnderlineWidth", {
        /**
         * Gets or sets the width to use for the underline element when type is search.
        */
        get: function () {
            return this.i.h0;
        },
        set: function (v) {
            this.i.h0 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "searchTypeUnderlineRippleWidth", {
        /**
         * Gets or sets the width to use for the underline element when type is search.
        */
        get: function () {
            return this.i.hz;
        },
        set: function (v) {
            this.i.hz = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "searchTypeHoverUnderlineWidth", {
        /**
         * Gets or sets the width to use for the underline element when hovered when type is search.
        */
        get: function () {
            return this.i.hw;
        },
        set: function (v) {
            this.i.hw = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "searchTypeUnderlineColor", {
        /**
         * Gets or sets the color to use for the underline element when type is search.
        */
        get: function () {
            return brushToString(this.i.s5);
        },
        set: function (v) {
            this.i.s5 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "searchTypeUnderlineRippleColor", {
        /**
         * Gets or sets the color to use for the underline ripple element when type is search.
        */
        get: function () {
            return brushToString(this.i.s6);
        },
        set: function (v) {
            this.i.s6 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "searchTypeHoverUnderlineColor", {
        /**
         * Gets or sets the color to use for the underline element when type is search.
        */
        get: function () {
            return brushToString(this.i.s4);
        },
        set: function (v) {
            this.i.s4 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "searchTypeFocusUnderlineColor", {
        /**
         * Gets or sets the color to use for the underline element when type is search.
        */
        get: function () {
            return brushToString(this.i.s3);
        },
        set: function (v) {
            this.i.s3 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "searchTypeUnderlineOpacity", {
        /**
         * Gets or sets the color to use for the underline element when type is search.
        */
        get: function () {
            return this.i.hx;
        },
        set: function (v) {
            this.i.hx = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "searchTypeHoverUnderlineOpacity", {
        /**
         * Gets or sets the color to use for the underline element when type is search.
        */
        get: function () {
            return this.i.hv;
        },
        set: function (v) {
            this.i.hv = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "searchTypeFocusUnderlineOpacity", {
        /**
         * Gets or sets the color to use for the underline element when type is search.
        */
        get: function () {
            return this.i.ht;
        },
        set: function (v) {
            this.i.ht = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "searchTypeFocusUnderlineRippleOpacity", {
        /**
         * Gets or sets the opacity to use for the underline ripple element when focused when type is search.
        */
        get: function () {
            return this.i.hu;
        },
        set: function (v) {
            this.i.hu = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "searchTypeUnderlineRippleOpacity", {
        /**
         * Gets or sets the opacity to use for the underline ripple element when type is search.
        */
        get: function () {
            return this.i.hy;
        },
        set: function (v) {
            this.i.hy = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "searchTypeBackgroundColor", {
        /**
         * Gets or sets the background color to use for the input group when type is search.
        */
        get: function () {
            return brushToString(this.i.s0);
        },
        set: function (v) {
            this.i.s0 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "isExpanded", {
        /**
         * Gets or sets whether the input group is expanded or not.
        */
        get: function () {
            return this.i.ah;
        },
        set: function (v) {
            this.i.ah = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "isHovered", {
        /**
         * Gets or sets whether the input group is hovered or not.
        */
        get: function () {
            return this.i.aj;
        },
        set: function (v) {
            this.i.aj = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "isFocused", {
        /**
         * Gets or sets whether the input group is hovered or not.
        */
        get: function () {
            return this.i.ai;
        },
        set: function (v) {
            this.i.ai = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "actualIsExpanded", {
        /**
         * Gets or sets whether the input group is expanded or not.
        */
        get: function () {
            return this.i.ac;
        },
        set: function (v) {
            this.i.ac = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "focusBorderColor", {
        /**
         * Gets or sets the color to use the hovered background of the inputs in the group.
        */
        get: function () {
            return brushToString(this.i.sq);
        },
        set: function (v) {
            this.i.sq = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "id", {
        /**
         * Gets or sets the id to use for the checkbox.
        */
        get: function () {
            return this.i.ki;
        },
        set: function (v) {
            this.i.ki = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInputGroup.prototype, "disabled", {
        /**
         * Gets or sets whether the checkbox is disabled.
        */
        get: function () {
            return this.i.disabled;
        },
        set: function (v) {
            this.i.disabled = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    IgrInputGroup.prototype.findByName = function (name) {
        if (this.inputs != null && this.inputs.findByName && this.inputs.findByName(name)) {
            return this.inputs.findByName(name);
        }
        return null;
    };
    Object.defineProperty(IgrInputGroup.prototype, "hasUserValues", {
        get: function () {
            return this._hasUserValues;
        },
        enumerable: true,
        configurable: true
    });
    IgrInputGroup.prototype.__m = function (propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    };
    IgrInputGroup.prototype._styling = function (container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        var genericPrefix = "";
        var typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("InputGroup");
        var additionalPrefixes = [];
        var prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        var b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            var basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            var parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            var parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    };
    IgrInputGroup.prototype.onDetachedFromUI = function () {
        this.i.onDetachedFromUI();
    };
    IgrInputGroup.prototype.onAttachedToUI = function () {
        this.i.onAttachedToUI();
    };
    /**
     * Exports visual information about the current state of the grid.
    
    */
    IgrInputGroup.prototype.exportVisualModel = function () {
        var iv = this.i.ia();
        return (iv);
    };
    /**
     * Returns a serialized copy of the exported visual model
    
    */
    IgrInputGroup.prototype.exportSerializedVisualModel = function () {
        var iv = this.i.j9();
        return (iv);
    };
    return IgrInputGroup;
}(React.Component));
export { IgrInputGroup };
//# sourceMappingURL=igr-input-group.js.map
