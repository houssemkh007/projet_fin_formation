/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { Base, markType } from "igniteui-react-core";
import { StringBuilder } from "igniteui-react-core";
/**
 * @hidden
 */
var InputGroupVisualModelExport = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(InputGroupVisualModelExport, _super);
    function InputGroupVisualModelExport() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.f = 0;
        _this.e = 0;
        _this.b = null;
        _this.o = 0;
        _this.p = 0;
        _this.z = null;
        _this.aa = null;
        _this.x = 0;
        _this.w = 0;
        _this.t = 0;
        _this.c = null;
        _this.d = null;
        _this.u = 0;
        _this.s = 0;
        _this.q = 0;
        _this.r = 0;
        _this.v = 0;
        _this.a = null;
        _this.g = false;
        _this.j = false;
        _this.i = false;
        _this.h = false;
        _this.m = null;
        _this.l = null;
        _this.k = null;
        _this.n = null;
        return _this;
    }
    InputGroupVisualModelExport.prototype.y = function () {
        var a = new StringBuilder(0);
        a.l("{");
        a.l("actualDensity : " + this.f + ", ");
        a.l("baseTheme : " + this.e + ", ");
        a.l("actualBorderColor : " + this.b.serialize() + ", ");
        a.l("actualBorderWidth : " + this.o + ", ");
        a.l("actualFocusBorderWidth : " + this.p + ", ");
        a.l("actualContentPadding : { left: " + this.aa.c + ",top: " + this.aa.e + ",right: " + this.aa.d + ",bottom: " + this.aa.b + "},");
        a.l("actualUnderlineWidth : " + this.x + ", ");
        a.l("actualUnderlineRippleWidth : " + this.w + ", ");
        a.l("actualBackgroundColor : " + this.a.serialize() + ", ");
        a.l("actualHoverUnderlineWidth : " + this.t + ", ");
        a.l("actualUnderlineColor : " + this.c.serialize() + ", ");
        a.l("actualUnderlineRippleColor : " + this.d.serialize() + ", ");
        a.l("actualUnderlineOpacity : " + this.u + ", ");
        a.l("actualHoverUnderlineOpacity : " + this.s + ", ");
        a.l("actualFocusUnderlineOpacity : " + this.q + ", ");
        a.l("actualFocusUnderlineRippleOpacity : " + this.r + ", ");
        a.l("actualUnderlineRippleOpacity : " + this.v + ", ");
        a.l("actualBackgroundColor : " + this.a.serialize() + ", ");
        a.l("actualIsExpanded : " + this.g + ", ");
        a.l("isHovered : " + this.j + ", ");
        a.l("isFocused : " + this.i + ", ");
        a.l("isDisabled : " + this.h + ", ");
        a.l("prefixModels : [");
        for (var b = 0; b < this.m.count; b++) {
            if (b != 0) {
                a.l(",");
            }
            a.l(this.m._inner[b].e());
        }
        a.l("],");
        a.l("labelModels: [");
        for (var c = 0; c < this.l.count; c++) {
            if (c != 0) {
                a.l(",");
            }
            var d = this.l._inner[c].q.charAt(0).toString().toLowerCase() + this.l._inner[c].q.substr(1);
            a.l(this.l._inner[c].r());
        }
        a.l("],");
        a.l("inputModels : [");
        for (var e = 0; e < this.k.count; e++) {
            if (e != 0) {
                a.l(",");
            }
            var f = this.k._inner[e].k.charAt(0).toString().toLowerCase() + this.k._inner[e].k.substr(1);
            a.l(this.k._inner[e].n());
        }
        a.l("],");
        a.l("suffixModels : [");
        for (var g = 0; g < this.n.count; g++) {
            if (g != 0) {
                a.l(",");
            }
            var h = this.n._inner[g].d.charAt(0).toString().toLowerCase() + this.n._inner[g].d.substr(1);
            a.l(this.n._inner[g].e());
        }
        a.l("]");
        a.l("}");
        return a.toString();
    };
    InputGroupVisualModelExport.$t = markType(InputGroupVisualModelExport, 'InputGroupVisualModelExport');
    return InputGroupVisualModelExport;
}(Base));
export { InputGroupVisualModelExport };
//# sourceMappingURL=InputGroupVisualModelExport.js.map
