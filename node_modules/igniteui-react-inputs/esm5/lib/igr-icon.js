import * as tslib_1 from "tslib";
import * as React from 'react';
import { Icon } from "./Icon";
import { brushToString, stringToBrush, ensureBool, initializePropertiesFromCss, NamePatcher, isValidProp, toSpinal, getModifiedProps } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
var IgrIcon = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(IgrIcon, _super);
    function IgrIcon(props) {
        var _this = _super.call(this, props) || this;
        _this._wrapper = null;
        _this._implementation = null;
        _this.__p = null;
        _this._hasUserValues = new Set();
        _this._stylingContainer = null;
        _this._stylingParent = null;
        _this._inStyling = false;
        if (_this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));
        }
        _this._implementation = _this.createImplementation();
        _this._implementation.externalObject = _this;
        _this._getMainRef = _this._getMainRef.bind(_this);
        var container;
        if (document) {
            container = document.createElement("div");
        }
        var root;
        root = container;
        if (container != null) {
            root = container;
        }
        _this.requestRender = _this.requestRender.bind(_this);
        _this._portalManager = new PortalManager("iconContent", _this.requestRender);
        var ren = new ReactRenderer(root, document, true, {}, _this._portalManager);
        _this._wrapper = ren;
        _this._container = _this._wrapper.rootWrapper;
        _this._container.setStyleProperty("display", "inline-block");
        _this._container.setStyleProperty("vertical-align", "middle");
        var icon = _this.i;
        _this._icon = icon;
        icon.provideContainer(ren);
        if (props) {
            _this.initializeProperties();
        }
        return _this;
    }
    IgrIcon.prototype._getMainRef = function (ref) {
        this._elRef = ref;
    };
    IgrIcon.prototype.render = function () {
        var propChildren = this.props.children;
        var children = [];
        React.Children.forEach(propChildren, function (ch) {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        var div = React.createElement("div", {
            className: "ig-icon igr-icon",
            ref: this._getMainRef,
            children: children
        });
        return div;
    };
    IgrIcon.prototype.requestRender = function () {
        if (this._initialized) {
            this.setState({});
        }
    };
    //private _getLabelPortal(element: DomWrapper, portalCallback: (portal: DomPortal) => void): void {
    //    this._portalManager.getPortal(element, "TemplateContent", portalCallback);
    //}
    IgrIcon.prototype.shouldComponentUpdate = function (nextProps, nextState) {
        var e_1, _a;
        var mod = getModifiedProps(this.props, nextProps);
        try {
            for (var _b = tslib_1.__values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                if (isValidProp(this, p)) {
                    this[p] = mod[p];
                }
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
        return true;
    };
    IgrIcon.prototype.initializeProperties = function () {
        var e_2, _a;
        try {
            for (var _b = tslib_1.__values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                if (isValidProp(this, p)) {
                    this[p] = this.props[p];
                }
            }
        }
        catch (e_2_1) {
            e_2 = { error: e_2_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_2)
                    throw e_2.error;
            }
        }
    };
    // supports angular themes or custom properties set in CSS
    IgrIcon.prototype.updateStyle = function () {
        this._styling(this._elRef, this);
    };
    IgrIcon.prototype.componentWillUnmount = function () {
        this._icon.destroy();
        this._wrapper.destroy();
    };
    IgrIcon.prototype.componentDidMount = function () {
        this._elRef.appendChild(this._container.getNativeElement());
        this.initializeContent();
    };
    IgrIcon.prototype.initializeContent = function () {
        this._styling(this._container.getNativeElement(), this);
        this.updateStyle();
    };
    IgrIcon.prototype.createImplementation = function () {
        return new Icon();
    };
    Object.defineProperty(IgrIcon.prototype, "i", {
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrIcon.prototype, "actualFill", {
        /**
     * Gets the color to use for the actual background.
    */
        get: function () {
            return brushToString(this.i.bo);
        },
        set: function (v) {
            this.i.bo = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrIcon.prototype, "actualTextColor", {
        /**
         * Gets the color to use for the actual text color.
        */
        get: function () {
            return brushToString(this.i.bs);
        },
        set: function (v) {
            this.i.bs = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrIcon.prototype, "actualHoverFill", {
        /**
         * Gets the color to use for the actual background.
        */
        get: function () {
            return brushToString(this.i.bp);
        },
        set: function (v) {
            this.i.bp = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrIcon.prototype, "actualHoverStroke", {
        /**
         * Gets the hover stroke to use for the icon.
        */
        get: function () {
            return brushToString(this.i.bq);
        },
        set: function (v) {
            this.i.bq = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrIcon.prototype, "actualStroke", {
        /**
         * Gets the stroke to use for the icon.
        */
        get: function () {
            return brushToString(this.i.br);
        },
        set: function (v) {
            this.i.br = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrIcon.prototype, "actualHoverStrokeThickness", {
        /**
         * Gets the hover stroke to use for the icon.
        */
        get: function () {
            return this.i.q;
        },
        set: function (v) {
            this.i.q = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrIcon.prototype, "actualStrokeThickness", {
        /**
         * Gets the stroke to use for the icon.
        */
        get: function () {
            return this.i.r;
        },
        set: function (v) {
            this.i.r = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrIcon.prototype, "fill", {
        /**
         * Gets or sets the color to use for the actual background.
        */
        get: function () {
            return brushToString(this.i.fill);
        },
        set: function (v) {
            this.i.fill = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrIcon.prototype, "textColor", {
        /**
         * Gets or sets the color to use for the text.
        */
        get: function () {
            return brushToString(this.i.b2);
        },
        set: function (v) {
            this.i.b2 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrIcon.prototype, "svgPath", {
        /**
         * Gets or sets the color to use for the text.
        */
        get: function () {
            return this.i.svgPath;
        },
        set: function (v) {
            this.i.svgPath = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrIcon.prototype, "hoverFill", {
        /**
         * Gets or sets the color to use for the actual background.
        */
        get: function () {
            return brushToString(this.i.by);
        },
        set: function (v) {
            this.i.by = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrIcon.prototype, "hoverStroke", {
        /**
         * Gets or sets the hover stroke to use for the icon.
        */
        get: function () {
            return brushToString(this.i.bz);
        },
        set: function (v) {
            this.i.bz = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrIcon.prototype, "stroke", {
        /**
         * Gets or sets the stroke to use for the icon.
        */
        get: function () {
            return brushToString(this.i.b1);
        },
        set: function (v) {
            this.i.b1 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrIcon.prototype, "hoverStrokeThickness", {
        /**
         * Gets or sets the hover stroke to use for the icon.
        */
        get: function () {
            return this.i.u;
        },
        set: function (v) {
            this.i.u = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrIcon.prototype, "strokeThickness", {
        /**
         * Gets or sets the stroke to use for the icon.
        */
        get: function () {
            return this.i.v;
        },
        set: function (v) {
            this.i.v = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrIcon.prototype, "textStyle", {
        /**
         * Gets or sets the use for the button.
        */
        get: function () {
            if (this.i.d == null) {
                return null;
            }
            return this.i.d.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.d = fi;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrIcon.prototype, "hoverTextColor", {
        /**
         * Gets or sets the color to use for the hovered text of the button regardless of type.
        */
        get: function () {
            return brushToString(this.i.b0);
        },
        set: function (v) {
            this.i.b0 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrIcon.prototype, "id", {
        /**
         * Gets or sets the id to use for the checkbox.
        */
        get: function () {
            return this.i.as;
        },
        set: function (v) {
            this.i.as = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrIcon.prototype, "tabIndex", {
        /**
         * Gets or sets TabIndex to use for the checkbox.
        */
        get: function () {
            return this.i.x;
        },
        set: function (v) {
            this.i.x = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrIcon.prototype, "ariaLabel", {
        /**
         * Gets or sets the value of the aria-label attribute.
        */
        get: function () {
            return this.i.ak;
        },
        set: function (v) {
            this.i.ak = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrIcon.prototype, "isHover", {
        /**
         * Gets or sets whether the icon is hovered.
        */
        get: function () {
            return this.i.k;
        },
        set: function (v) {
            this.i.k = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrIcon.prototype, "disabled", {
        /**
         * Gets or sets whether the checkbox is disabled.
        */
        get: function () {
            return this.i.disabled;
        },
        set: function (v) {
            this.i.disabled = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    IgrIcon.prototype.findByName = function (name) {
        return null;
    };
    Object.defineProperty(IgrIcon.prototype, "hasUserValues", {
        get: function () {
            return this._hasUserValues;
        },
        enumerable: true,
        configurable: true
    });
    IgrIcon.prototype.__m = function (propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    };
    IgrIcon.prototype._styling = function (container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        var genericPrefix = "";
        var typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("Icon");
        var additionalPrefixes = [];
        var prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        var b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            var basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            var parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            var parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    };
    IgrIcon.prototype.onDetachedFromUI = function () {
        this.i.onDetachedFromUI();
    };
    IgrIcon.prototype.onAttachedToUI = function () {
        this.i.onAttachedToUI();
    };
    /**
     * Exports visual information about the current state of the grid.
    
    */
    IgrIcon.prototype.exportVisualModel = function () {
        var iv = this.i.z();
        return (iv);
    };
    /**
     * Returns a serialized copy of the exported visual model
    
    */
    IgrIcon.prototype.exportSerializedVisualModel = function () {
        var iv = this.i.am();
        return (iv);
    };
    return IgrIcon;
}(React.Component));
export { IgrIcon };
//# sourceMappingURL=igr-icon.js.map
