import * as tslib_1 from "tslib";
import * as React from 'react';
import { Label } from "./Label";
import { ensureEnum, brushToString, stringToBrush, ensureBool, NamePatcher, isValidProp, getModifiedProps } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { IgrInputGroupItem } from './igr-input-group-item';
import { ControlDisplayDensity_$type } from "igniteui-react-core";
import { BaseControlTheme_$type } from "igniteui-react-core";
var IgrLabel = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(IgrLabel, _super);
    function IgrLabel(props) {
        var _this = _super.call(this, props) || this;
        _this._wrapper = null;
        if (_this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));
        }
        _this._implementation = _this.createImplementation();
        _this._implementation.externalObject = _this;
        _this._getMainRef = _this._getMainRef.bind(_this);
        var container;
        if (document) {
            container = document.createElement("div");
        }
        var root;
        root = container;
        if (container != null) {
            root = container;
        }
        _this.requestRender = _this.requestRender.bind(_this);
        _this._portalManager = new PortalManager("labelContent", _this.requestRender);
        var ren = new ReactRenderer(root, document, true, {}, _this._portalManager);
        _this._wrapper = ren;
        _this._container = _this._wrapper.rootWrapper;
        _this._container.setStyleProperty("display", "inline-block");
        _this._container.setStyleProperty("vertical-align", "middle");
        var label = _this.i;
        _this._label = label;
        label.provideContainer(ren);
        if (props) {
            _this.initializeProperties();
        }
        return _this;
    }
    IgrLabel.prototype._getMainRef = function (ref) {
        this._elRef = ref;
    };
    IgrLabel.prototype.render = function () {
        var propChildren = this.props.children;
        var children = [];
        React.Children.forEach(propChildren, function (ch) {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        var div = React.createElement("div", {
            className: "ig-label igr-label",
            ref: this._getMainRef,
            children: children
        });
        return div;
    };
    IgrLabel.prototype.requestRender = function () {
        if (this._initialized) {
            this.setState({});
        }
    };
    //private _getLabelPortal(element: DomWrapper, portalCallback: (portal: DomPortal) => void): void {
    //    this._portalManager.getPortal(element, "TemplateContent", portalCallback);
    //}
    IgrLabel.prototype.shouldComponentUpdate = function (nextProps, nextState) {
        var e_1, _a;
        var mod = getModifiedProps(this.props, nextProps);
        try {
            for (var _b = tslib_1.__values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                if (isValidProp(this, p)) {
                    this[p] = mod[p];
                }
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
        return true;
    };
    IgrLabel.prototype.initializeProperties = function () {
        var e_2, _a;
        try {
            for (var _b = tslib_1.__values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                if (isValidProp(this, p)) {
                    this[p] = this.props[p];
                }
            }
        }
        catch (e_2_1) {
            e_2 = { error: e_2_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_2)
                    throw e_2.error;
            }
        }
    };
    // supports angular themes or custom properties set in CSS
    IgrLabel.prototype.updateStyle = function () {
        this._styling(this._elRef, this);
    };
    IgrLabel.prototype.componentWillUnmount = function () {
        this._label.destroy();
        this._wrapper.destroy();
    };
    IgrLabel.prototype.componentDidMount = function () {
        this._elRef.appendChild(this._container.getNativeElement());
        this.initializeContent();
    };
    IgrLabel.prototype.initializeContent = function () {
        this._styling(this._container.getNativeElement(), this);
        this.updateStyle();
    };
    IgrLabel.prototype.createImplementation = function () {
        return new Label();
    };
    IgrLabel.prototype._onDisplayChanged = function () {
        this._container.setStyleProperty("display", this.display);
    };
    IgrLabel.prototype._onFlexDirectionChanged = function () {
        this._container.setStyleProperty("flex-direction", this.flexDirection);
    };
    IgrLabel.prototype._onFlexGrowChanged = function () {
        this._container.setStyleProperty("flex-grow", this.flexGrow);
    };
    IgrLabel.prototype._onAlignItemsChanged = function () {
        this._container.setStyleProperty("align-items", this.alignItems);
    };
    Object.defineProperty(IgrLabel.prototype, "i", {
        /**
                                 * @hidden
                                 */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrLabel.prototype, "baseTheme", {
        /**
     * Gets or sets the base built in theme to use for the label.
    */
        get: function () {
            return this.i.l;
        },
        set: function (v) {
            this.i.l = ensureEnum(BaseControlTheme_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrLabel.prototype, "density", {
        /**
         * Gets or sets the display density to use for the label.
        */
        get: function () {
            return this.i.p;
        },
        set: function (v) {
            this.i.p = ensureEnum(ControlDisplayDensity_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrLabel.prototype, "actualDensity", {
        /**
         * Gets the actual display density to use for the label.
        */
        get: function () {
            return this.i.o;
        },
        set: function (v) {
            this.i.o = ensureEnum(ControlDisplayDensity_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrLabel.prototype, "actualTextColor", {
        /**
         * Gets the actual color to use for the text color.
        */
        get: function () {
            return brushToString(this.i.cw);
        },
        set: function (v) {
            this.i.cw = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrLabel.prototype, "actualHighlightTextColor", {
        /**
         * Gets the actual color to use for the text color.
        */
        get: function () {
            return brushToString(this.i.ct);
        },
        set: function (v) {
            this.i.ct = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrLabel.prototype, "actualHoverHighlightTextColor", {
        /**
         * Gets the actual color to use for the text color when highlighted and hovered.
        */
        get: function () {
            return brushToString(this.i.cu);
        },
        set: function (v) {
            this.i.cu = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrLabel.prototype, "actualHoverTextColor", {
        /**
         * Gets the actual hover color to use for the text.
        */
        get: function () {
            return brushToString(this.i.cv);
        },
        set: function (v) {
            this.i.cv = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrLabel.prototype, "textColor", {
        /**
         * Gets or sets the color to use for the text.
        */
        get: function () {
            return brushToString(this.i.dc);
        },
        set: function (v) {
            this.i.dc = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrLabel.prototype, "highlightTextColor", {
        /**
         * Gets or sets the color to use for the text.
        */
        get: function () {
            return brushToString(this.i.c9);
        },
        set: function (v) {
            this.i.c9 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrLabel.prototype, "hoverHighlightTextColor", {
        /**
         * Gets or sets the color to use for the text.
        */
        get: function () {
            return brushToString(this.i.da);
        },
        set: function (v) {
            this.i.da = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrLabel.prototype, "textStyle", {
        /**
         * Gets or sets the use for the button.
        */
        get: function () {
            if (this.i.y == null) {
                return null;
            }
            return this.i.y.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.y = fi;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrLabel.prototype, "hoverTextColor", {
        /**
         * Gets or sets the color to use for the hovered text of the button regardless of type.
        */
        get: function () {
            return brushToString(this.i.db);
        },
        set: function (v) {
            this.i.db = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrLabel.prototype, "id", {
        /**
         * Gets or sets the id to use for the checkbox.
        */
        get: function () {
            return this.i.br;
        },
        set: function (v) {
            this.i.br = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrLabel.prototype, "display", {
        /**
         * Gets or sets the id to use for the checkbox.
        */
        get: function () {
            return this.i.bf;
        },
        set: function (v) {
            this.i.bf = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrLabel.prototype, "flexDirection", {
        /**
         * Gets or sets the id to use for the checkbox.
        */
        get: function () {
            return this.i.bi;
        },
        set: function (v) {
            this.i.bi = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrLabel.prototype, "flexGrow", {
        /**
         * Gets or sets the flex-grow setting for the button.
        */
        get: function () {
            return this.i.bk;
        },
        set: function (v) {
            this.i.bk = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrLabel.prototype, "alignItems", {
        /**
         * Gets or sets the id to use for the checkbox.
        */
        get: function () {
            return this.i.a9;
        },
        set: function (v) {
            this.i.a9 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrLabel.prototype, "tabIndex", {
        /**
         * Gets or sets TabIndex to use for the checkbox.
        */
        get: function () {
            return this.i.as;
        },
        set: function (v) {
            this.i.as = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrLabel.prototype, "for", {
        /**
         * Gets or sets the for attribute to use for the label.
        */
        get: function () {
            return this.i.bm;
        },
        set: function (v) {
            this.i.bm = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrLabel.prototype, "ariaLabel", {
        /**
         * Gets or sets the value of the aria-label attribute.
        */
        get: function () {
            return this.i.bb;
        },
        set: function (v) {
            this.i.bb = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrLabel.prototype, "text", {
        /**
         * Gets or sets the text for the label.
        */
        get: function () {
            return this.i.text;
        },
        set: function (v) {
            this.i.text = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrLabel.prototype, "isHover", {
        /**
         * Gets or sets whether the label is hovered.
        */
        get: function () {
            return this.i.am;
        },
        set: function (v) {
            this.i.am = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrLabel.prototype, "value", {
        /**
         * Gets or sets the value for the label.
        */
        get: function () {
            return this.i.aq;
        },
        set: function (v) {
            this.i.aq = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrLabel.prototype, "disabled", {
        /**
         * Gets or sets whether the checkbox is disabled.
        */
        get: function () {
            return this.i.disabled;
        },
        set: function (v) {
            this.i.disabled = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    IgrLabel.prototype.onDetachedFromUI = function () {
        this.i.onDetachedFromUI();
    };
    IgrLabel.prototype.onAttachedToUI = function () {
        this.i.onAttachedToUI();
    };
    /**
     * Exports visual information about the current state of the grid.
    
    */
    IgrLabel.prototype.exportVisualModel = function () {
        var iv = this.i.au();
        return (iv);
    };
    /**
     * Returns a serialized copy of the exported visual model
    
    */
    IgrLabel.prototype.exportSerializedVisualModel = function () {
        var iv = this.i.bh();
        return (iv);
    };
    return IgrLabel;
}(IgrInputGroupItem));
export { IgrLabel };
//# sourceMappingURL=igr-label.js.map
