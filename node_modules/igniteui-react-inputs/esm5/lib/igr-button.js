import * as tslib_1 from "tslib";
import * as React from 'react';
import { Button } from "./Button";
import { ensureEnum, brushToString, stringToBrush, ensureBool, initializePropertiesFromCss, NamePatcher, isValidProp, toSpinal, getModifiedProps } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { CornerRadius } from "igniteui-react-core";
import { ButtonDisplayStyle_$type } from './ButtonDisplayStyle';
import { IgrButtonClickEventArgs } from './igr-button-click-event-args';
import { TypeRegistrar } from "igniteui-react-core";
import { ControlDisplayDensity_$type } from "igniteui-react-core";
import { BaseControlTheme_$type } from "igniteui-react-core";
import { ElevationMode_$type } from "igniteui-react-core";
var IgrButton = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(IgrButton, _super);
    function IgrButton(props) {
        var _this = _super.call(this, props) || this;
        _this._wrapper = null;
        _this.__p = null;
        _this._hasUserValues = new Set();
        _this._stylingContainer = null;
        _this._stylingParent = null;
        _this._inStyling = false;
        _this._clicked = null;
        _this._clicked_wrapped = null;
        if (_this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));
        }
        _this._implementation = _this.createImplementation();
        _this._implementation.externalObject = _this;
        _this._getMainRef = _this._getMainRef.bind(_this);
        var container;
        if (document) {
            container = document.createElement("div");
        }
        var root;
        root = container;
        if (container != null) {
            root = container;
        }
        _this.requestRender = _this.requestRender.bind(_this);
        _this._portalManager = new PortalManager("buttonContent", _this.requestRender);
        var ren = new ReactRenderer(root, document, true, {}, _this._portalManager);
        _this._wrapper = ren;
        _this._container = _this._wrapper.rootWrapper;
        _this._container.setStyleProperty("display", "inline-block");
        var button = _this.i;
        _this._button = button;
        button.provideContainer(ren);
        if (props) {
            _this.initializeProperties();
        }
        return _this;
    }
    IgrButton.prototype._getMainRef = function (ref) {
        this._elRef = ref;
    };
    IgrButton.prototype.render = function () {
        var propChildren = this.props.children;
        var children = [];
        React.Children.forEach(propChildren, function (ch) {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        var div = React.createElement("div", {
            className: "ig-button igr-button",
            ref: this._getMainRef,
            children: children
        });
        return div;
    };
    IgrButton.prototype.requestRender = function () {
        if (this._initialized) {
            this.setState({});
        }
    };
    IgrButton.prototype._onDisplayChanged = function () {
        this._container.setStyleProperty("display", this.display);
    };
    IgrButton.prototype._onFlexDirectionChanged = function () {
        this._container.setStyleProperty("flex-direction", this.flexDirection);
    };
    IgrButton.prototype._onFlexGrowChanged = function () {
        this._container.setStyleProperty("flex-grow", this.flexGrow);
    };
    IgrButton.prototype._onAlignItemsChanged = function () {
        this._container.setStyleProperty("align-items", this.alignItems);
    };
    //private _getLabelPortal(element: DomWrapper, portalCallback: (portal: DomPortal) => void): void {
    //    this._portalManager.getPortal(element, "TemplateContent", portalCallback);
    //}
    IgrButton.prototype.shouldComponentUpdate = function (nextProps, nextState) {
        var e_1, _a;
        var mod = getModifiedProps(this.props, nextProps);
        try {
            for (var _b = tslib_1.__values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                if (isValidProp(this, p)) {
                    this[p] = mod[p];
                }
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
        return true;
    };
    IgrButton.prototype.initializeProperties = function () {
        var e_2, _a;
        try {
            for (var _b = tslib_1.__values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                if (isValidProp(this, p)) {
                    this[p] = this.props[p];
                }
            }
        }
        catch (e_2_1) {
            e_2 = { error: e_2_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_2)
                    throw e_2.error;
            }
        }
    };
    // supports angular themes or custom properties set in CSS
    IgrButton.prototype.updateStyle = function () {
        this._styling(this._elRef, this);
    };
    IgrButton.prototype.componentWillUnmount = function () {
        this._button.destroy();
        this._wrapper.destroy();
    };
    IgrButton.prototype.componentDidMount = function () {
        this._elRef.appendChild(this._container.getNativeElement());
        this.initializeContent();
    };
    IgrButton.prototype.initializeContent = function () {
        this._styling(this._container.getNativeElement(), this);
        this.updateStyle();
    };
    IgrButton.prototype.createImplementation = function () {
        return new Button();
    };
    Object.defineProperty(IgrButton.prototype, "i", {
        /**
         * @hidden
         */
        get: function () {
            return this._implementation;
        } /**
                                     * @hidden
                                     */,
        enumerable: true,
        configurable: true
    });
    IgrButton._createFromInternal = function (internal) {
        if (!internal) {
            return null;
        }
        if (!internal.$type) {
            return null;
        }
        var name = internal.$type.name;
        var externalName = "Igr" + name;
        if (!TypeRegistrar.isRegistered(externalName)) {
            return null;
        }
        return TypeRegistrar.create(externalName);
    };
    Object.defineProperty(IgrButton.prototype, "minWidth", {
        /**
     * Gets or sets the min width to use for the button.
    */
        get: function () {
            return this.i.bh;
        },
        set: function (v) {
            this.i.bh = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "minHeight", {
        /**
         * Gets or sets the min height to use for the button.
        */
        get: function () {
            return this.i.bg;
        },
        set: function (v) {
            this.i.bg = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "displayType", {
        /**
         * Gets or sets the display style to use for the button.
        */
        get: function () {
            return this.i.s;
        },
        set: function (v) {
            this.i.s = ensureEnum(ButtonDisplayStyle_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "density", {
        /**
         * Gets or sets the display density to use for the button.
        */
        get: function () {
            return this.i.h;
        },
        set: function (v) {
            this.i.h = ensureEnum(ControlDisplayDensity_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "baseTheme", {
        /**
         * Gets or sets the base built in theme to use for the button.
        */
        get: function () {
            return this.i.d;
        },
        set: function (v) {
            this.i.d = ensureEnum(BaseControlTheme_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "actualDensity", {
        /**
         * Gets the actual display density to use for the label.
        */
        get: function () {
            return this.i.g;
        },
        set: function (v) {
            this.i.g = ensureEnum(ControlDisplayDensity_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "actualBorderColor", {
        /**
         * Gets or sets the color to use for the check mark when the checkbox is checked.
        */
        get: function () {
            return brushToString(this.i.m8);
        },
        set: function (v) {
            this.i.m8 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "actualUmbraShadowColor", {
        /**
         * Gets or sets the color to use for the check mark when the checkbox is checked.
        */
        get: function () {
            return brushToString(this.i.nj);
        },
        set: function (v) {
            this.i.nj = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "actualPenumbraShadowColor", {
        /**
         * Gets or sets the color to use for the check mark when the checkbox is checked.
        */
        get: function () {
            return brushToString(this.i.ng);
        },
        set: function (v) {
            this.i.ng = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "actualAmbientShadowColor", {
        /**
         * Gets or sets the color to use for the check mark when the checkbox is checked.
        */
        get: function () {
            return brushToString(this.i.m6);
        },
        set: function (v) {
            this.i.m6 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "actualRestingElevation", {
        /**
         * Gets or sets the color to use for the check mark when the checkbox is checked.
        */
        get: function () {
            return this.i.cg;
        },
        set: function (v) {
            this.i.cg = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "actualFocusElevation", {
        /**
         * Gets or sets the color to use for the check mark when the checkbox is checked.
        */
        get: function () {
            return this.i.ce;
        },
        set: function (v) {
            this.i.ce = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "actualHoverElevation", {
        /**
         * Gets or sets the color to use for the check mark when the checkbox is checked.
        */
        get: function () {
            return this.i.cf;
        },
        set: function (v) {
            this.i.cf = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "actualRippleColor", {
        /**
         * Gets or sets the color to use for the ripple when the button is pressed.
        */
        get: function () {
            return brushToString(this.i.nh);
        },
        set: function (v) {
            this.i.nh = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "actualCornerRadiusBottomRight", {
        get: function () {
            return this.i.kb ? this.i.kb.b : NaN;
        },
        set: function (v) {
            this.ensureActualCornerRadius();
            this.i.kb.b = +v;
            this.i.kb = this.i.kb;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "actualCornerRadiusBottomLeft", {
        get: function () {
            return this.i.kb ? this.i.kb.a : NaN;
        },
        set: function (v) {
            this.ensureActualCornerRadius();
            this.i.kb.a = +v;
            this.i.kb = this.i.kb;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "actualCornerRadiusTopLeft", {
        get: function () {
            return this.i.kb ? this.i.kb.c : NaN;
        },
        set: function (v) {
            this.ensureActualCornerRadius();
            this.i.kb.c = +v;
            this.i.kb = this.i.kb;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "actualCornerRadiusTopRight", {
        get: function () {
            return this.i.kb ? this.i.kb.d : NaN;
        },
        set: function (v) {
            this.ensureActualCornerRadius();
            this.i.kb.d = +v;
            this.i.kb = this.i.kb;
        },
        enumerable: true,
        configurable: true
    });
    IgrButton.prototype.ensureActualCornerRadius = function () {
        if (this.i.kb) {
            return;
        }
        this.i.kb = new CornerRadius(2);
    };
    Object.defineProperty(IgrButton.prototype, "actualBackgroundColor", {
        /**
         * Gets the color to use for the actual background.
        */
        get: function () {
            return brushToString(this.i.m7);
        },
        set: function (v) {
            this.i.m7 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "actualDisabledBackgroundColor", {
        /**
         * Gets the actual color to use for the disabled background of the button.
        */
        get: function () {
            return brushToString(this.i.m9);
        },
        set: function (v) {
            this.i.m9 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "actualDisabledBorderColor", {
        /**
         * Gets the actual color to use for the disabled border of the button.
        */
        get: function () {
            return brushToString(this.i.na);
        },
        set: function (v) {
            this.i.na = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "actualDisabledTextColor", {
        /**
         * Gets the actual color to use for the disabled text of the button.
        */
        get: function () {
            return brushToString(this.i.nb);
        },
        set: function (v) {
            this.i.nb = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "actualDisabledElevation", {
        /**
         * Gets the actual disabled elevation to use for the button.
        */
        get: function () {
            return this.i.cd;
        },
        set: function (v) {
            this.i.cd = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "actualElevationMode", {
        /**
         * Gets the actual disabled elevation to use for the button.
        */
        get: function () {
            return this.i.k;
        },
        set: function (v) {
            this.i.k = ensureEnum(ElevationMode_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "actualTextColor", {
        /**
         * Gets the color to use for the actual background.
        */
        get: function () {
            return brushToString(this.i.ni);
        },
        set: function (v) {
            this.i.ni = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "actualHoverTextColor", {
        /**
         * Gets the color to use for the actual background.
        */
        get: function () {
            return brushToString(this.i.nf);
        },
        set: function (v) {
            this.i.nf = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "actualFocusBackgroundColor", {
        /**
         * Gets the color to use for the actual background.
        */
        get: function () {
            return brushToString(this.i.nc);
        },
        set: function (v) {
            this.i.nc = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "actualFocusTextColor", {
        /**
         * Gets the actual color to use for the focused text.
        */
        get: function () {
            return brushToString(this.i.nd);
        },
        set: function (v) {
            this.i.nd = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "actualHoverBackgroundColor", {
        /**
         * Gets the hover color to use for the actual background.
        */
        get: function () {
            return brushToString(this.i.ne);
        },
        set: function (v) {
            this.i.ne = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "actualBorderWidth", {
        /**
         * Gets or sets the Width to use for the check mark when the checkbox is checked.
        */
        get: function () {
            return this.i.aw;
        },
        set: function (v) {
            this.i.aw = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "raisedBackgroundColor", {
        /**
         * Gets or sets the color to use for the background of the button when the  type is raised.
        */
        get: function () {
            return brushToString(this.i.tv);
        },
        set: function (v) {
            this.i.tv = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "raisedDisabledBackgroundColor", {
        /**
         * Gets or sets the color to use for the disabled background of the button when the type is raised.
        */
        get: function () {
            return brushToString(this.i.tx);
        },
        set: function (v) {
            this.i.tx = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "raisedDisabledBorderColor", {
        /**
         * Gets or sets the color to use for the disabled border of the button when the type is raised.
        */
        get: function () {
            return brushToString(this.i.ty);
        },
        set: function (v) {
            this.i.ty = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "raisedDisabledTextColor", {
        /**
         * Gets or sets the color to use for the disabled text of the button when the type is raised.
        */
        get: function () {
            return brushToString(this.i.tz);
        },
        set: function (v) {
            this.i.tz = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "raisedDisabledElevation", {
        /**
         * Gets or sets the disabled elevation to use for the button when the type is raised.
        */
        get: function () {
            return this.i.ep;
        },
        set: function (v) {
            this.i.ep = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "raisedHoverBackgroundColor", {
        /**
         * Gets or sets the hover color to use for the background of the button when the  type is raised.
        */
        get: function () {
            return brushToString(this.i.t2);
        },
        set: function (v) {
            this.i.t2 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "raisedBorderColor", {
        /**
         * Gets or sets the border color to use for the button when the type is raised.
        */
        get: function () {
            return brushToString(this.i.tw);
        },
        set: function (v) {
            this.i.tw = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "raisedRestingElevation", {
        /**
         * Gets or sets the elevation to use for the button when the type is raised.
        */
        get: function () {
            return this.i.es;
        },
        set: function (v) {
            this.i.es = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "raisedHoverElevation", {
        /**
         * Gets or sets the hover elevation to use for the button when the type is raised.
        */
        get: function () {
            return this.i.er;
        },
        set: function (v) {
            this.i.er = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "raisedFocusElevation", {
        /**
         * Gets or sets the focus elevation to use for the button when the type is raised.
        */
        get: function () {
            return this.i.eq;
        },
        set: function (v) {
            this.i.eq = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "raisedBorderWidth", {
        /**
         * Gets or sets the width to use for the button border when the type is raised.
        */
        get: function () {
            return this.i.bj;
        },
        set: function (v) {
            this.i.bj = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "raisedCornerRadiusBottomRight", {
        get: function () {
            return this.i.kx ? this.i.kx.b : NaN;
        },
        set: function (v) {
            this.ensureRaisedCornerRadius();
            this.i.kx.b = +v;
            this.i.kx = this.i.kx;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "raisedCornerRadiusBottomLeft", {
        get: function () {
            return this.i.kx ? this.i.kx.a : NaN;
        },
        set: function (v) {
            this.ensureRaisedCornerRadius();
            this.i.kx.a = +v;
            this.i.kx = this.i.kx;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "raisedCornerRadiusTopLeft", {
        get: function () {
            return this.i.kx ? this.i.kx.c : NaN;
        },
        set: function (v) {
            this.ensureRaisedCornerRadius();
            this.i.kx.c = +v;
            this.i.kx = this.i.kx;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "raisedCornerRadiusTopRight", {
        get: function () {
            return this.i.kx ? this.i.kx.d : NaN;
        },
        set: function (v) {
            this.ensureRaisedCornerRadius();
            this.i.kx.d = +v;
            this.i.kx = this.i.kx;
        },
        enumerable: true,
        configurable: true
    });
    IgrButton.prototype.ensureRaisedCornerRadius = function () {
        if (this.i.kx) {
            return;
        }
        this.i.kx = new CornerRadius(2);
    };
    Object.defineProperty(IgrButton.prototype, "raisedRippleColor", {
        /**
         * Gets or sets the color to use for the background when the button is pressed and the type is floating action button.
        */
        get: function () {
            return brushToString(this.i.t4);
        },
        set: function (v) {
            this.i.t4 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "flatBackgroundColor", {
        /**
         * Gets or sets the color to use for the background of the button when the type is flat.
        */
        get: function () {
            return brushToString(this.i.su);
        },
        set: function (v) {
            this.i.su = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "flatDisabledBackgroundColor", {
        /**
         * Gets or sets the color to use for the disabled background of the button when the type is flat.
        */
        get: function () {
            return brushToString(this.i.sw);
        },
        set: function (v) {
            this.i.sw = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "flatDisabledBorderColor", {
        /**
         * Gets or sets the color to use for the disabled border of the button when the type is flat.
        */
        get: function () {
            return brushToString(this.i.sx);
        },
        set: function (v) {
            this.i.sx = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "flatDisabledTextColor", {
        /**
         * Gets or sets the color to use for the disabled text of the button when the type is flat.
        */
        get: function () {
            return brushToString(this.i.sy);
        },
        set: function (v) {
            this.i.sy = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "flatDisabledElevation", {
        /**
         * Gets or sets the disabled elevation to use for the button when the type is flat.
        */
        get: function () {
            return this.i.eb;
        },
        set: function (v) {
            this.i.eb = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "flatHoverBackgroundColor", {
        /**
         * Gets or sets the hover color to use for the background of the button when the type is flat.
        */
        get: function () {
            return brushToString(this.i.s1);
        },
        set: function (v) {
            this.i.s1 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "flatBorderColor", {
        /**
         * Gets or sets the border color to use for the button when the type is flat.
        */
        get: function () {
            return brushToString(this.i.sv);
        },
        set: function (v) {
            this.i.sv = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "flatRestingElevation", {
        /**
         * Gets or sets the elevation to use for the button when the type is flat.
        */
        get: function () {
            return this.i.ee;
        },
        set: function (v) {
            this.i.ee = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "flatHoverElevation", {
        /**
         * Gets or sets the hover elevation to use for the button when the type is flat.
        */
        get: function () {
            return this.i.ed;
        },
        set: function (v) {
            this.i.ed = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "flatFocusElevation", {
        /**
         * Gets or sets the focus elevation to use for the button when the type is flat.
        */
        get: function () {
            return this.i.ec;
        },
        set: function (v) {
            this.i.ec = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "flatRippleColor", {
        /**
         * Gets or sets the color to use for the background when the button is pressed and the type is floating action button.
        */
        get: function () {
            return brushToString(this.i.s3);
        },
        set: function (v) {
            this.i.s3 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "flatTextColor", {
        /**
         * Gets or sets the color to use for the text of the button when type is flat.
        */
        get: function () {
            return brushToString(this.i.s4);
        },
        set: function (v) {
            this.i.s4 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "flatHoverTextColor", {
        /**
         * Gets or sets the color to use for the hovered text of the button when type is flat.
        */
        get: function () {
            return brushToString(this.i.s2);
        },
        set: function (v) {
            this.i.s2 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "flatFocusBackgroundColor", {
        /**
         * Gets or sets the color to use for the backround the button when it is focused and flat.
        */
        get: function () {
            return brushToString(this.i.sz);
        },
        set: function (v) {
            this.i.sz = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "flatFocusTextColor", {
        /**
         * Gets or sets the color to use for the text the button when it is focused and flat.
        */
        get: function () {
            return brushToString(this.i.s0);
        },
        set: function (v) {
            this.i.s0 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "flatBorderWidth", {
        /**
         * Gets or sets the width to use for the button border when the type is flat.
        */
        get: function () {
            return this.i.be;
        },
        set: function (v) {
            this.i.be = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "flatCornerRadiusBottomRight", {
        get: function () {
            return this.i.ku ? this.i.ku.b : NaN;
        },
        set: function (v) {
            this.ensureFlatCornerRadius();
            this.i.ku.b = +v;
            this.i.ku = this.i.ku;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "flatCornerRadiusBottomLeft", {
        get: function () {
            return this.i.ku ? this.i.ku.a : NaN;
        },
        set: function (v) {
            this.ensureFlatCornerRadius();
            this.i.ku.a = +v;
            this.i.ku = this.i.ku;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "flatCornerRadiusTopLeft", {
        get: function () {
            return this.i.ku ? this.i.ku.c : NaN;
        },
        set: function (v) {
            this.ensureFlatCornerRadius();
            this.i.ku.c = +v;
            this.i.ku = this.i.ku;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "flatCornerRadiusTopRight", {
        get: function () {
            return this.i.ku ? this.i.ku.d : NaN;
        },
        set: function (v) {
            this.ensureFlatCornerRadius();
            this.i.ku.d = +v;
            this.i.ku = this.i.ku;
        },
        enumerable: true,
        configurable: true
    });
    IgrButton.prototype.ensureFlatCornerRadius = function () {
        if (this.i.ku) {
            return;
        }
        this.i.ku = new CornerRadius(2);
    };
    Object.defineProperty(IgrButton.prototype, "backgroundColor", {
        /**
         * Gets or sets the color to use for the background when the button regardless of type.
        */
        get: function () {
            return brushToString(this.i.nk);
        },
        set: function (v) {
            this.i.nk = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "disabledBackgroundColor", {
        /**
         * Gets or sets the color to use for the disabled background of the button when the type is disabled.
        */
        get: function () {
            return brushToString(this.i.sg);
        },
        set: function (v) {
            this.i.sg = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "disabledBorderColor", {
        /**
         * Gets or sets the color to use for the disabled border of the button when the type is raised.
        */
        get: function () {
            return brushToString(this.i.sh);
        },
        set: function (v) {
            this.i.sh = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "disabledTextColor", {
        /**
         * Gets or sets the color to use for the disabled text of the button when the type is raised.
        */
        get: function () {
            return brushToString(this.i.si);
        },
        set: function (v) {
            this.i.si = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "disabledElevation", {
        /**
         * Gets or sets the disabled elevation to use for the button when the type is raised.
        */
        get: function () {
            return this.i.d6;
        },
        set: function (v) {
            this.i.d6 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "elevationMode", {
        /**
         * Gets or sets the disabled elevation to use for the button when the type is raised.
        */
        get: function () {
            return this.i.o;
        },
        set: function (v) {
            this.i.o = ensureEnum(ElevationMode_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "hoverBackgroundColor", {
        /**
         * Gets or sets the hover color to use for the background of the button when the  type is hovered.
        */
        get: function () {
            return brushToString(this.i.s7);
        },
        set: function (v) {
            this.i.s7 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "borderColor", {
        /**
         * Gets or sets the border color to use for the button regardless of type.
        */
        get: function () {
            return brushToString(this.i.nl);
        },
        set: function (v) {
            this.i.nl = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "restingElevation", {
        /**
         * Gets or sets the elevation to use for the button regardless of type.
        */
        get: function () {
            return this.i.et;
        },
        set: function (v) {
            this.i.et = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "hoverElevation", {
        /**
         * Gets or sets the hover elevation to use for the button regardless of type.
        */
        get: function () {
            return this.i.eg;
        },
        set: function (v) {
            this.i.eg = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "focusElevation", {
        /**
         * Gets or sets the focus elevation to use for the button regardless of type.
        */
        get: function () {
            return this.i.ef;
        },
        set: function (v) {
            this.i.ef = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "textStyle", {
        /**
         * Gets or sets the use for the button.
        */
        get: function () {
            if (this.i.v == null) {
                return null;
            }
            return this.i.v.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.v = fi;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "textColor", {
        /**
         * Gets or sets the color to use for the text of the button regardless of type.
        */
        get: function () {
            return brushToString(this.i.t7);
        },
        set: function (v) {
            this.i.t7 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "hoverTextColor", {
        /**
         * Gets or sets the color to use for the hovered text of the button regardless of type.
        */
        get: function () {
            return brushToString(this.i.s8);
        },
        set: function (v) {
            this.i.s8 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "rippleColor", {
        /**
         * Gets or sets the color to use for the background of the button regardless of type.
        */
        get: function () {
            return brushToString(this.i.t6);
        },
        set: function (v) {
            this.i.t6 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "raisedTextColor", {
        /**
         * Gets or sets the color to use for the text of the button when type is raised.
        */
        get: function () {
            return brushToString(this.i.t5);
        },
        set: function (v) {
            this.i.t5 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "raisedHoverTextColor", {
        /**
         * Gets or sets the color to use for the hovered text of the button when type is raised.
        */
        get: function () {
            return brushToString(this.i.t3);
        },
        set: function (v) {
            this.i.t3 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "raisedFocusBackgroundColor", {
        /**
         * Gets or sets the color to use for the backround the button when it is focused and raised.
        */
        get: function () {
            return brushToString(this.i.t0);
        },
        set: function (v) {
            this.i.t0 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "raisedFocusTextColor", {
        /**
         * Gets or sets the color to use for the text the button when it is focused and raised.
        */
        get: function () {
            return brushToString(this.i.t1);
        },
        set: function (v) {
            this.i.t1 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "focusBackgroundColor", {
        /**
         * Gets or sets the color to use for the backround the button when it is focused.
        */
        get: function () {
            return brushToString(this.i.s5);
        },
        set: function (v) {
            this.i.s5 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "focusTextColor", {
        /**
         * Gets or sets the color to use for the text of the button when it is focused.
        */
        get: function () {
            return brushToString(this.i.s6);
        },
        set: function (v) {
            this.i.s6 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "borderWidth", {
        /**
         * Gets or sets the width to use for the button border regardless of type.
        */
        get: function () {
            return this.i.ax;
        },
        set: function (v) {
            this.i.ax = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "cornerRadiusBottomRight", {
        get: function () {
            return this.i.kd ? this.i.kd.b : NaN;
        },
        set: function (v) {
            this.ensureCornerRadius();
            this.i.kd.b = +v;
            this.i.kd = this.i.kd;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "cornerRadiusBottomLeft", {
        get: function () {
            return this.i.kd ? this.i.kd.a : NaN;
        },
        set: function (v) {
            this.ensureCornerRadius();
            this.i.kd.a = +v;
            this.i.kd = this.i.kd;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "cornerRadiusTopLeft", {
        get: function () {
            return this.i.kd ? this.i.kd.c : NaN;
        },
        set: function (v) {
            this.ensureCornerRadius();
            this.i.kd.c = +v;
            this.i.kd = this.i.kd;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "cornerRadiusTopRight", {
        get: function () {
            return this.i.kd ? this.i.kd.d : NaN;
        },
        set: function (v) {
            this.ensureCornerRadius();
            this.i.kd.d = +v;
            this.i.kd = this.i.kd;
        },
        enumerable: true,
        configurable: true
    });
    IgrButton.prototype.ensureCornerRadius = function () {
        if (this.i.kd) {
            return;
        }
        this.i.kd = new CornerRadius(2);
    };
    Object.defineProperty(IgrButton.prototype, "outlinedBackgroundColor", {
        /**
         * Gets or sets the color to use for the background of the button when the  type is outlined.
        */
        get: function () {
            return brushToString(this.i.tk);
        },
        set: function (v) {
            this.i.tk = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "outlinedDisabledBackgroundColor", {
        /**
         * Gets or sets the color to use for the disabled background of the button when the type is outlined.
        */
        get: function () {
            return brushToString(this.i.tm);
        },
        set: function (v) {
            this.i.tm = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "outlinedDisabledBorderColor", {
        /**
         * Gets or sets the color to use for the disabled border of the button when the type is outlined.
        */
        get: function () {
            return brushToString(this.i.tn);
        },
        set: function (v) {
            this.i.tn = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "outlinedDisabledTextColor", {
        /**
         * Gets or sets the color to use for the disabled text of the button when the type is outlined.
        */
        get: function () {
            return brushToString(this.i.to);
        },
        set: function (v) {
            this.i.to = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "outlinedDisabledElevation", {
        /**
         * Gets or sets the disabled elevation to use for the button when the type is outlined.
        */
        get: function () {
            return this.i.el;
        },
        set: function (v) {
            this.i.el = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "outlinedHoverBackgroundColor", {
        /**
         * Gets or sets the hover color to use for the background of the button when the  type is hoveredOutlined.
        */
        get: function () {
            return brushToString(this.i.tr);
        },
        set: function (v) {
            this.i.tr = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "outlinedBorderColor", {
        /**
         * Gets or sets the border color to use for the button when the type is outlined.
        */
        get: function () {
            return brushToString(this.i.tl);
        },
        set: function (v) {
            this.i.tl = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "outlinedRestingElevation", {
        /**
         * Gets or sets the elevation to use for the button when the type is outlined.
        */
        get: function () {
            return this.i.eo;
        },
        set: function (v) {
            this.i.eo = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "outlinedHoverElevation", {
        /**
         * Gets or sets the hover elevation to use for the button when the type is outlined.
        */
        get: function () {
            return this.i.en;
        },
        set: function (v) {
            this.i.en = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "outlinedFocusElevation", {
        /**
         * Gets or sets the focus elevation to use for the button when the type is outlined.
        */
        get: function () {
            return this.i.em;
        },
        set: function (v) {
            this.i.em = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "outlinedBorderWidth", {
        /**
         * Gets or sets the width to use for the button border when the type is outlined.
        */
        get: function () {
            return this.i.bi;
        },
        set: function (v) {
            this.i.bi = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "outlinedCornerRadiusBottomRight", {
        get: function () {
            return this.i.kw ? this.i.kw.b : NaN;
        },
        set: function (v) {
            this.ensureOutlinedCornerRadius();
            this.i.kw.b = +v;
            this.i.kw = this.i.kw;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "outlinedCornerRadiusBottomLeft", {
        get: function () {
            return this.i.kw ? this.i.kw.a : NaN;
        },
        set: function (v) {
            this.ensureOutlinedCornerRadius();
            this.i.kw.a = +v;
            this.i.kw = this.i.kw;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "outlinedCornerRadiusTopLeft", {
        get: function () {
            return this.i.kw ? this.i.kw.c : NaN;
        },
        set: function (v) {
            this.ensureOutlinedCornerRadius();
            this.i.kw.c = +v;
            this.i.kw = this.i.kw;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "outlinedCornerRadiusTopRight", {
        get: function () {
            return this.i.kw ? this.i.kw.d : NaN;
        },
        set: function (v) {
            this.ensureOutlinedCornerRadius();
            this.i.kw.d = +v;
            this.i.kw = this.i.kw;
        },
        enumerable: true,
        configurable: true
    });
    IgrButton.prototype.ensureOutlinedCornerRadius = function () {
        if (this.i.kw) {
            return;
        }
        this.i.kw = new CornerRadius(2);
    };
    Object.defineProperty(IgrButton.prototype, "outlinedRippleColor", {
        /**
         * Gets or sets the color to use for the background when the button is pressed and the type is floating action button.
        */
        get: function () {
            return brushToString(this.i.tt);
        },
        set: function (v) {
            this.i.tt = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "outlinedTextColor", {
        /**
         * Gets or sets the color to use for the text of the button when type is outlined.
        */
        get: function () {
            return brushToString(this.i.tu);
        },
        set: function (v) {
            this.i.tu = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "outlinedHoverTextColor", {
        /**
         * Gets or sets the color to use for the hovered text of the button when type is outlined.
        */
        get: function () {
            return brushToString(this.i.ts);
        },
        set: function (v) {
            this.i.ts = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "outlinedFocusBackgroundColor", {
        /**
         * Gets or sets the color to use for the backround the button when it is focused and outlined.
        */
        get: function () {
            return brushToString(this.i.tp);
        },
        set: function (v) {
            this.i.tp = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "outlinedFocusTextColor", {
        /**
         * Gets or sets the color to use for the text the button when it is focused and outlined.
        */
        get: function () {
            return brushToString(this.i.tq);
        },
        set: function (v) {
            this.i.tq = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "fabBackgroundColor", {
        /**
         * Gets or sets the color to use for the background of the button when the  type is floating action button.
        */
        get: function () {
            return brushToString(this.i.sj);
        },
        set: function (v) {
            this.i.sj = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "fabDisabledBackgroundColor", {
        /**
         * Gets or sets the color to use for the disabled background of the button when the type is fab.
        */
        get: function () {
            return brushToString(this.i.sl);
        },
        set: function (v) {
            this.i.sl = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "fabDisabledBorderColor", {
        /**
         * Gets or sets the color to use for the disabled border of the button when the type is fab.
        */
        get: function () {
            return brushToString(this.i.sm);
        },
        set: function (v) {
            this.i.sm = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "fabDisabledTextColor", {
        /**
         * Gets or sets the color to use for the disabled text of the button when the type is fab.
        */
        get: function () {
            return brushToString(this.i.sn);
        },
        set: function (v) {
            this.i.sn = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "fabDisabledElevation", {
        /**
         * Gets or sets the disabled elevation to use for the button when the type is fab.
        */
        get: function () {
            return this.i.d7;
        },
        set: function (v) {
            this.i.d7 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "fabHoverBackgroundColor", {
        /**
         * Gets or sets the hover color to use for the background of the button when the  type is hoveredFab.
        */
        get: function () {
            return brushToString(this.i.sq);
        },
        set: function (v) {
            this.i.sq = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "fabBorderColor", {
        /**
         * Gets or sets the border color to use for the button when the type is floating action button.
        */
        get: function () {
            return brushToString(this.i.sk);
        },
        set: function (v) {
            this.i.sk = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "fabRestingElevation", {
        /**
         * Gets or sets the elevation to use for the button when the type is floating action button.
        */
        get: function () {
            return this.i.ea;
        },
        set: function (v) {
            this.i.ea = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "fabHoverElevation", {
        /**
         * Gets or sets the hover elevation to use for the button when the type is floating action button.
        */
        get: function () {
            return this.i.d9;
        },
        set: function (v) {
            this.i.d9 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "fabFocusElevation", {
        /**
         * Gets or sets the focus elevation to use for the button when the type is floating action button.
        */
        get: function () {
            return this.i.d8;
        },
        set: function (v) {
            this.i.d8 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "fabBorderWidth", {
        /**
         * Gets or sets the width to use for the button border when the type is floating action button.
        */
        get: function () {
            return this.i.bd;
        },
        set: function (v) {
            this.i.bd = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "fabCornerRadiusBottomRight", {
        get: function () {
            return this.i.kt ? this.i.kt.b : NaN;
        },
        set: function (v) {
            this.ensureFabCornerRadius();
            this.i.kt.b = +v;
            this.i.kt = this.i.kt;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "fabCornerRadiusBottomLeft", {
        get: function () {
            return this.i.kt ? this.i.kt.a : NaN;
        },
        set: function (v) {
            this.ensureFabCornerRadius();
            this.i.kt.a = +v;
            this.i.kt = this.i.kt;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "fabCornerRadiusTopLeft", {
        get: function () {
            return this.i.kt ? this.i.kt.c : NaN;
        },
        set: function (v) {
            this.ensureFabCornerRadius();
            this.i.kt.c = +v;
            this.i.kt = this.i.kt;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "fabCornerRadiusTopRight", {
        get: function () {
            return this.i.kt ? this.i.kt.d : NaN;
        },
        set: function (v) {
            this.ensureFabCornerRadius();
            this.i.kt.d = +v;
            this.i.kt = this.i.kt;
        },
        enumerable: true,
        configurable: true
    });
    IgrButton.prototype.ensureFabCornerRadius = function () {
        if (this.i.kt) {
            return;
        }
        this.i.kt = new CornerRadius(2);
    };
    Object.defineProperty(IgrButton.prototype, "fabRippleColor", {
        /**
         * Gets or sets the color to use for the background when the button is pressed and the type is floating action button.
        */
        get: function () {
            return brushToString(this.i.ss);
        },
        set: function (v) {
            this.i.ss = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "fabTextColor", {
        /**
         * Gets or sets the color to use for the text of the button when type is floating action button.
        */
        get: function () {
            return brushToString(this.i.st);
        },
        set: function (v) {
            this.i.st = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "fabHoverTextColor", {
        /**
         * Gets or sets the color to use for the hovered text of the button when type is floating action button.
        */
        get: function () {
            return brushToString(this.i.sr);
        },
        set: function (v) {
            this.i.sr = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "fabFocusBackgroundColor", {
        /**
         * Gets or sets the color to use for the backround the button when it is focused and fab.
        */
        get: function () {
            return brushToString(this.i.so);
        },
        set: function (v) {
            this.i.so = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "fabFocusTextColor", {
        /**
         * Gets or sets the color to use for the text the button when it is focused and fab.
        */
        get: function () {
            return brushToString(this.i.sp);
        },
        set: function (v) {
            this.i.sp = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "iconBackgroundColor", {
        /**
         * Gets or sets the color to use for the background of the button when the  type is icon.
        */
        get: function () {
            return brushToString(this.i.s9);
        },
        set: function (v) {
            this.i.s9 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "iconDisabledBackgroundColor", {
        /**
         * Gets or sets the color to use for the disabled background of the button when the type is icon.
        */
        get: function () {
            return brushToString(this.i.tb);
        },
        set: function (v) {
            this.i.tb = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "iconDisabledBorderColor", {
        /**
         * Gets or sets the color to use for the disabled border of the button when the type is icon.
        */
        get: function () {
            return brushToString(this.i.tc);
        },
        set: function (v) {
            this.i.tc = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "iconDisabledTextColor", {
        /**
         * Gets or sets the color to use for the disabled text of the button when the type is icon.
        */
        get: function () {
            return brushToString(this.i.td);
        },
        set: function (v) {
            this.i.td = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "iconDisabledElevation", {
        /**
         * Gets or sets the disabled elevation to use for the button when the type is icon.
        */
        get: function () {
            return this.i.eh;
        },
        set: function (v) {
            this.i.eh = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "iconHoverBackgroundColor", {
        /**
         * Gets or sets the hover color to use for the background of the button when the  type is hoveredIcon.
        */
        get: function () {
            return brushToString(this.i.tg);
        },
        set: function (v) {
            this.i.tg = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "iconBorderColor", {
        /**
         * Gets or sets the border color to use for the button when the type is icon.
        */
        get: function () {
            return brushToString(this.i.ta);
        },
        set: function (v) {
            this.i.ta = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "iconRestingElevation", {
        /**
         * Gets or sets the elevation to use for the button when the type is icon.
        */
        get: function () {
            return this.i.ek;
        },
        set: function (v) {
            this.i.ek = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "iconHoverElevation", {
        /**
         * Gets or sets the hover elevation to use for the button when the type is icon.
        */
        get: function () {
            return this.i.ej;
        },
        set: function (v) {
            this.i.ej = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "iconFocusElevation", {
        /**
         * Gets or sets the focus elevation to use for the button when the type is icon.
        */
        get: function () {
            return this.i.ei;
        },
        set: function (v) {
            this.i.ei = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "iconBorderWidth", {
        /**
         * Gets or sets the width to use for the button border when the type is icon.
        */
        get: function () {
            return this.i.bf;
        },
        set: function (v) {
            this.i.bf = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "iconCornerRadiusBottomRight", {
        get: function () {
            return this.i.kv ? this.i.kv.b : NaN;
        },
        set: function (v) {
            this.ensureIconCornerRadius();
            this.i.kv.b = +v;
            this.i.kv = this.i.kv;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "iconCornerRadiusBottomLeft", {
        get: function () {
            return this.i.kv ? this.i.kv.a : NaN;
        },
        set: function (v) {
            this.ensureIconCornerRadius();
            this.i.kv.a = +v;
            this.i.kv = this.i.kv;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "iconCornerRadiusTopLeft", {
        get: function () {
            return this.i.kv ? this.i.kv.c : NaN;
        },
        set: function (v) {
            this.ensureIconCornerRadius();
            this.i.kv.c = +v;
            this.i.kv = this.i.kv;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "iconCornerRadiusTopRight", {
        get: function () {
            return this.i.kv ? this.i.kv.d : NaN;
        },
        set: function (v) {
            this.ensureIconCornerRadius();
            this.i.kv.d = +v;
            this.i.kv = this.i.kv;
        },
        enumerable: true,
        configurable: true
    });
    IgrButton.prototype.ensureIconCornerRadius = function () {
        if (this.i.kv) {
            return;
        }
        this.i.kv = new CornerRadius(2);
    };
    Object.defineProperty(IgrButton.prototype, "iconRippleColor", {
        /**
         * Gets or sets the color to use for the background when the button is pressed and the type is floating action button.
        */
        get: function () {
            return brushToString(this.i.ti);
        },
        set: function (v) {
            this.i.ti = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "iconTextColor", {
        /**
         * Gets or sets the color to use for the text of the button when type is icon.
        */
        get: function () {
            return brushToString(this.i.tj);
        },
        set: function (v) {
            this.i.tj = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "iconHoverTextColor", {
        /**
         * Gets or sets the color to use for the hovered text of the button when type is icon.
        */
        get: function () {
            return brushToString(this.i.th);
        },
        set: function (v) {
            this.i.th = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "iconFocusBackgroundColor", {
        /**
         * Gets or sets the color to use for the backround the button when it is focused and icon.
        */
        get: function () {
            return brushToString(this.i.te);
        },
        set: function (v) {
            this.i.te = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "iconFocusTextColor", {
        /**
         * Gets or sets the color to use for the text the button when it is focused and icon.
        */
        get: function () {
            return brushToString(this.i.tf);
        },
        set: function (v) {
            this.i.tf = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "inputId", {
        /**
         * Gets or sets the id to use for the internal native checkbox.
        */
        get: function () {
            return this.i.h7;
        },
        set: function (v) {
            this.i.h7 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "id", {
        /**
         * Gets or sets the id to use for the checkbox.
        */
        get: function () {
            return this.i.h5;
        },
        set: function (v) {
            this.i.h5 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "display", {
        /**
         * Gets or sets the id to use for the checkbox.
        */
        get: function () {
            return this.i.gb;
        },
        set: function (v) {
            this.i.gb = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "flexDirection", {
        /**
         * Gets or sets the id to use for the checkbox.
        */
        get: function () {
            return this.i.he;
        },
        set: function (v) {
            this.i.he = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "flexGrow", {
        /**
         * Gets or sets the flex-grow setting for the button.
        */
        get: function () {
            return this.i.hg;
        },
        set: function (v) {
            this.i.hg = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "alignItems", {
        /**
         * Gets or sets the id to use for the checkbox.
        */
        get: function () {
            return this.i.fv;
        },
        set: function (v) {
            this.i.fv = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "value", {
        /**
         * Gets or sets value to use for the checkbox.
        */
        get: function () {
            return this.i.ez;
        },
        set: function (v) {
            this.i.ez = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "name", {
        /**
         * Gets or sets name to use for the button.
        */
        get: function () {
            return this.i.ig;
        },
        set: function (v) {
            this.i.ig = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "tabIndex", {
        /**
         * Gets or sets TabIndex to use for the checkbox.
        */
        get: function () {
            return this.i.eu;
        },
        set: function (v) {
            this.i.eu = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "focused", {
        /**
         * Gets or sets if the checkbox is Focused.
        */
        get: function () {
            return this.i.focused;
        },
        set: function (v) {
            this.i.focused = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "isFocusStyleEnabled", {
        /**
         * Gets or sets if the button show use styling to show focus.
        */
        get: function () {
            return this.i.ak;
        },
        set: function (v) {
            this.i.ak = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "ariaLabel", {
        /**
         * Gets or sets the value of the aria-label attribute.
        */
        get: function () {
            return this.i.fx;
        },
        set: function (v) {
            this.i.fx = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "disableRipple", {
        /**
         * Gets or sets whether to disable the ripple effect for the button.
        */
        get: function () {
            return this.i.af;
        },
        set: function (v) {
            this.i.af = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "actualDisableRipple", {
        /**
         * Gets whether to actually disable the ripple effect for the button.
        */
        get: function () {
            return this.i.ae;
        },
        set: function (v) {
            this.i.ae = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "isHover", {
        /**
         * Gets or sets whether the checkbox is checked.
        */
        get: function () {
            return this.i.al;
        },
        set: function (v) {
            this.i.al = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "disabled", {
        /**
         * Gets or sets whether the checkbox is disabled.
        */
        get: function () {
            return this.i.disabled;
        },
        set: function (v) {
            this.i.disabled = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrButton.prototype, "disableTransitions", {
        /**
         * Gets or sets whether the checkbox transitions are disabled.
        */
        get: function () {
            return this.i.ag;
        },
        set: function (v) {
            this.i.ag = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    IgrButton.prototype.findByName = function (name) {
        return null;
    };
    Object.defineProperty(IgrButton.prototype, "hasUserValues", {
        get: function () {
            return this._hasUserValues;
        },
        enumerable: true,
        configurable: true
    });
    IgrButton.prototype.__m = function (propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    };
    IgrButton.prototype._styling = function (container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        var genericPrefix = "";
        var typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("Button");
        var additionalPrefixes = [];
        var prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        var b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            var basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            var parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            var parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    };
    IgrButton.prototype.onDetachedFromUI = function () {
        this.i.onDetachedFromUI();
    };
    IgrButton.prototype.onAttachedToUI = function () {
        this.i.onAttachedToUI();
    };
    /**
     * Exports visual information about the current state of the grid.
    
    */
    IgrButton.prototype.exportVisualModel = function () {
        var iv = this.i.ey();
        return (iv);
    };
    /**
     * Returns a serialized copy of the exported visual model
    
    */
    IgrButton.prototype.exportSerializedVisualModel = function () {
        var iv = this.i.gf();
        return (iv);
    };
    Object.defineProperty(IgrButton.prototype, "clicked", {
        get: function () {
            return this._clicked;
        },
        set: function (ev) {
            var _this = this;
            if (this._clicked_wrapped !== null) {
                this.i.clicked = delegateRemove(this.i.clicked, this._clicked_wrapped);
                this._clicked_wrapped = null;
                this._clicked = null;
            }
            this._clicked = ev;
            this._clicked_wrapped = function (o, e) {
                var outerArgs = new IgrButtonClickEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeClicked) {
                    _this.beforeClicked(_this, outerArgs);
                }
                if (_this._clicked) {
                    _this._clicked(_this, outerArgs);
                }
            };
            this.i.clicked = delegateCombine(this.i.clicked, this._clicked_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    return IgrButton;
}(React.Component));
export { IgrButton };
//# sourceMappingURL=igr-button.js.map
