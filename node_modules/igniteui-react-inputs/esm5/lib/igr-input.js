import * as tslib_1 from "tslib";
import * as React from 'react';
import { Input } from "./Input";
import { ensureEnum, brushToString, stringToBrush, ensureBool, NamePatcher, isValidProp, getModifiedProps } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { IgrInputGroupItem } from './igr-input-group-item';
import { IgrInputChangeEventArgs } from './igr-input-change-event-args';
import { ControlDisplayDensity_$type } from "igniteui-react-core";
import { IgrKeyEventArgs } from "igniteui-react-core";
var requiredStyle = "\n.ig-input input::-ms-clear {\n    display: none;\n    width: 0;\n    height: 0;\n}\n\n";
var pending = [];
var checked = /*@__PURE__*/ new WeakMap(); // TODO why not WeakSet?
function ensureCss() {
    if (!document) {
        return;
    }
    if (checked.has(document)) {
        return;
    }
    injectCss(requiredStyle, "data-ig-input-style", function () {
        var temp = pending;
        pending = null;
        temp.forEach(function (v, i, a) {
            //v.styleUpdated();
        });
    });
    checked.set(document, true);
}
function injectCss(style, attributeName, onload) {
    if (onload === void 0) {
        onload = null;
    }
    for (var i = 0; i < document.head.children.length; i++) {
        var child = document.head.children[i];
        if (child.tagName == "link" && child.hasAttribute(attributeName)) {
            return;
        }
    }
    var link = document.createElement("link");
    link.setAttribute('href', 'data:text/css;charset=UTF-8,' + encodeURIComponent(style));
    link.setAttribute('rel', 'stylesheet');
    link.setAttribute('type', 'text/css');
    link.setAttribute(attributeName, 'true');
    if (onload) {
        var onloadResolved = function () {
            link.onload = null;
            onload();
        };
        link.onload = onloadResolved;
    }
    document.head.appendChild(link);
}
var IgrInput = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(IgrInput, _super);
    function IgrInput(props) {
        var _this = _super.call(this, props) || this;
        _this._wrapper = null;
        _this._keyDown = null;
        _this._keyDown_wrapped = null;
        _this._keyUp = null;
        _this._keyUp_wrapped = null;
        _this._keyPress = null;
        _this._keyPress_wrapped = null;
        _this._change = null;
        _this._change_wrapped = null;
        _this._changing = null;
        _this._changing_wrapped = null;
        ensureCss();
        if (_this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));
        }
        _this._implementation = _this.createImplementation();
        _this._implementation.externalObject = _this;
        _this._getMainRef = _this._getMainRef.bind(_this);
        var container;
        if (document) {
            container = document.createElement("div");
        }
        var root;
        root = container;
        if (container != null) {
            root = container;
        }
        _this.requestRender = _this.requestRender.bind(_this);
        _this._portalManager = new PortalManager("inputContent", _this.requestRender);
        var ren = new ReactRenderer(root, document, true, {}, _this._portalManager);
        _this._wrapper = ren;
        _this._container = _this._wrapper.rootWrapper;
        _this._container.setStyleProperty("display", "inline-block");
        _this._container.setStyleProperty("vertical-align", "middle");
        var input = _this.i;
        _this._input = input;
        input.provideContainer(ren);
        if (props) {
            _this.initializeProperties();
        }
        return _this;
    }
    IgrInput.prototype._getMainRef = function (ref) {
        this._elRef = ref;
    };
    IgrInput.prototype.render = function () {
        var propChildren = this.props.children;
        var children = [];
        React.Children.forEach(propChildren, function (ch) {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        var div = React.createElement("div", {
            className: "ig-input igr-input",
            ref: this._getMainRef,
            children: children
        });
        return div;
    };
    IgrInput.prototype.requestRender = function () {
        if (this._initialized) {
            this.setState({});
        }
    };
    //private _getLabelPortal(element: DomWrapper, portalCallback: (portal: DomPortal) => void): void {
    //    this._portalManager.getPortal(element, "TemplateContent", portalCallback);
    //}
    IgrInput.prototype.shouldComponentUpdate = function (nextProps, nextState) {
        var e_1, _a;
        var mod = getModifiedProps(this.props, nextProps);
        try {
            for (var _b = tslib_1.__values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                if (isValidProp(this, p)) {
                    this[p] = mod[p];
                }
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
        return true;
    };
    IgrInput.prototype.initializeProperties = function () {
        var e_2, _a;
        try {
            for (var _b = tslib_1.__values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                if (isValidProp(this, p)) {
                    this[p] = this.props[p];
                }
            }
        }
        catch (e_2_1) {
            e_2 = { error: e_2_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_2)
                    throw e_2.error;
            }
        }
    };
    // supports angular themes or custom properties set in CSS
    IgrInput.prototype.updateStyle = function () {
        this._styling(this._elRef, this);
    };
    IgrInput.prototype.componentWillUnmount = function () {
        this._input.destroy();
        this._wrapper.destroy();
    };
    IgrInput.prototype.componentDidMount = function () {
        this._elRef.appendChild(this._container.getNativeElement());
        this.initializeContent();
    };
    IgrInput.prototype.initializeContent = function () {
        this._styling(this._container.getNativeElement(), this);
        this.updateStyle();
    };
    IgrInput.prototype.createImplementation = function () {
        return new Input();
    };
    Object.defineProperty(IgrInput.prototype, "i", {
        /**
                                 * @hidden
                                 */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInput.prototype, "density", {
        /**
     * Gets or sets the display density to use for the input.
    */
        get: function () {
            return this.i.m;
        },
        set: function (v) {
            this.i.m = ensureEnum(ControlDisplayDensity_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInput.prototype, "actualDensity", {
        /**
         * Gets the actual display density to use for the label.
        */
        get: function () {
            return this.i.l;
        },
        set: function (v) {
            this.i.l = ensureEnum(ControlDisplayDensity_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInput.prototype, "mask", {
        /**
         * Gets/Sets the input mask for the input.
        */
        get: function () {
            return this.i.b5;
        },
        set: function (v) {
            this.i.b5 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInput.prototype, "promptChar", {
        /**
         * Gets/Sets the character representing a fillable spot in the input mask
        */
        get: function () {
            return this.i.b9;
        },
        set: function (v) {
            this.i.b9 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInput.prototype, "includeLiterals", {
        /**
         * Specifies if the bound value includes the formatting symbols.
        */
        get: function () {
            return this.i.ap;
        },
        set: function (v) {
            this.i.ap = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInput.prototype, "actualTextColor", {
        /**
         * Gets the actual color to use for the text color.
        */
        get: function () {
            return brushToString(this.i.dp);
        },
        set: function (v) {
            this.i.dp = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInput.prototype, "actualHoverTextColor", {
        /**
         * Gets the actual hover color to use for the text.
        */
        get: function () {
            return brushToString(this.i.dn);
        },
        set: function (v) {
            this.i.dn = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInput.prototype, "textColor", {
        /**
         * Gets or sets the color to use for the text.
        */
        get: function () {
            return brushToString(this.i.dt);
        },
        set: function (v) {
            this.i.dt = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInput.prototype, "textStyle", {
        /**
         * Gets or sets the use for the button.
        */
        get: function () {
            if (this.i.ac == null) {
                return null;
            }
            return this.i.ac.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.ac = fi;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInput.prototype, "inputType", {
        /**
         * Gets or sets the type to use for the input.
        */
        get: function () {
            return this.i.b0;
        },
        set: function (v) {
            this.i.b0 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInput.prototype, "placeholder", {
        /**
         * Gets or sets the placeholder to use for the input.
        */
        get: function () {
            return this.i.b7;
        },
        set: function (v) {
            this.i.b7 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInput.prototype, "hoverTextColor", {
        /**
         * Gets or sets the color to use for the hovered text of the button regardless of type.
        */
        get: function () {
            return brushToString(this.i.ds);
        },
        set: function (v) {
            this.i.ds = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInput.prototype, "id", {
        /**
         * Gets or sets the id to use for the checkbox.
        */
        get: function () {
            return this.i.bx;
        },
        set: function (v) {
            this.i.bx = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInput.prototype, "tabIndex", {
        /**
         * Gets or sets TabIndex to use for the checkbox.
        */
        get: function () {
            return this.i.a8;
        },
        set: function (v) {
            this.i.a8 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInput.prototype, "for", {
        /**
         * Gets or sets the for attribute to use for the input.
        */
        get: function () {
            return this.i.bu;
        },
        set: function (v) {
            this.i.bu = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInput.prototype, "ariaLabel", {
        /**
         * Gets or sets the value of the aria-label attribute.
        */
        get: function () {
            return this.i.bq;
        },
        set: function (v) {
            this.i.bq = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInput.prototype, "isHover", {
        /**
         * Gets or sets whether the input is hovered.
        */
        get: function () {
            return this.i.ar;
        },
        set: function (v) {
            this.i.ar = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInput.prototype, "value", {
        /**
         * Gets or sets the value for the input.
        */
        get: function () {
            return this.i.cf;
        },
        set: function (v) {
            this.i.cf = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInput.prototype, "hasValue", {
        get: function () {
            return this.i.ao;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInput.prototype, "disabled", {
        /**
         * Gets or sets whether the checkbox is disabled.
        */
        get: function () {
            return this.i.disabled;
        },
        set: function (v) {
            this.i.disabled = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInput.prototype, "selectionStart", {
        /**
         * Returns / Sets the beginning index of the selected text. When nothing is selected, this returns the position of the text input cursor (caret) inside of the input.
        */
        get: function () {
            return this.i.selectionStart;
        },
        set: function (v) {
            this.i.selectionStart = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInput.prototype, "selectionEnd", {
        /**
         * Returns / Sets the end index of the selected text. When nothing is selected, this returns the position of the text input cursor (caret) inside of the input.
        */
        get: function () {
            return this.i.selectionEnd;
        },
        set: function (v) {
            this.i.selectionEnd = +v;
        },
        enumerable: true,
        configurable: true
    });
    IgrInput.prototype.onDetachedFromUI = function () {
        this.i.onDetachedFromUI();
    };
    IgrInput.prototype.onAttachedToUI = function () {
        this.i.onAttachedToUI();
    };
    /**
     * Exports visual information about the current state of the grid.
    
    */
    IgrInput.prototype.exportVisualModel = function () {
        var iv = this.i.ba();
        return (iv);
    };
    /**
     * Returns a serialized copy of the exported visual model
    
    */
    IgrInput.prototype.exportSerializedVisualModel = function () {
        var iv = this.i.bt();
        return (iv);
    };
    IgrInput.prototype.focus = function () {
        this.i.ck();
    };
    IgrInput.prototype.select = function () {
        this.i.db();
    };
    IgrInput.prototype.setSelectionRange = function (selectionStart, selectionEnd) {
        this.i.dd(selectionStart, selectionEnd);
    };
    Object.defineProperty(IgrInput.prototype, "keyDown", {
        get: function () {
            return this._keyDown;
        },
        set: function (ev) {
            var _this = this;
            if (this._keyDown_wrapped !== null) {
                this.i.keyDown = delegateRemove(this.i.keyDown, this._keyDown_wrapped);
                this._keyDown_wrapped = null;
                this._keyDown = null;
            }
            this._keyDown = ev;
            this._keyDown_wrapped = function (o, e) {
                var outerArgs = new IgrKeyEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeKeyDown) {
                    _this.beforeKeyDown(_this, outerArgs);
                }
                if (_this._keyDown) {
                    _this._keyDown(_this, outerArgs);
                }
            };
            this.i.keyDown = delegateCombine(this.i.keyDown, this._keyDown_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInput.prototype, "keyUp", {
        get: function () {
            return this._keyUp;
        },
        set: function (ev) {
            var _this = this;
            if (this._keyUp_wrapped !== null) {
                this.i.keyUp = delegateRemove(this.i.keyUp, this._keyUp_wrapped);
                this._keyUp_wrapped = null;
                this._keyUp = null;
            }
            this._keyUp = ev;
            this._keyUp_wrapped = function (o, e) {
                var outerArgs = new IgrKeyEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeKeyUp) {
                    _this.beforeKeyUp(_this, outerArgs);
                }
                if (_this._keyUp) {
                    _this._keyUp(_this, outerArgs);
                }
            };
            this.i.keyUp = delegateCombine(this.i.keyUp, this._keyUp_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInput.prototype, "keyPress", {
        get: function () {
            return this._keyPress;
        },
        set: function (ev) {
            var _this = this;
            if (this._keyPress_wrapped !== null) {
                this.i.keyPress = delegateRemove(this.i.keyPress, this._keyPress_wrapped);
                this._keyPress_wrapped = null;
                this._keyPress = null;
            }
            this._keyPress = ev;
            this._keyPress_wrapped = function (o, e) {
                var outerArgs = new IgrKeyEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeKeyPress) {
                    _this.beforeKeyPress(_this, outerArgs);
                }
                if (_this._keyPress) {
                    _this._keyPress(_this, outerArgs);
                }
            };
            this.i.keyPress = delegateCombine(this.i.keyPress, this._keyPress_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInput.prototype, "change", {
        get: function () {
            return this._change;
        },
        set: function (ev) {
            var _this = this;
            if (this._change_wrapped !== null) {
                this.i.change = delegateRemove(this.i.change, this._change_wrapped);
                this._change_wrapped = null;
                this._change = null;
            }
            this._change = ev;
            this._change_wrapped = function (o, e) {
                var outerArgs = new IgrInputChangeEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeChange) {
                    _this.beforeChange(_this, outerArgs);
                }
                if (_this._change) {
                    _this._change(_this, outerArgs);
                }
            };
            this.i.change = delegateCombine(this.i.change, this._change_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrInput.prototype, "changing", {
        get: function () {
            return this._changing;
        },
        set: function (ev) {
            var _this = this;
            if (this._changing_wrapped !== null) {
                this.i.changing = delegateRemove(this.i.changing, this._changing_wrapped);
                this._changing_wrapped = null;
                this._changing = null;
            }
            this._changing = ev;
            this._changing_wrapped = function (o, e) {
                var outerArgs = new IgrInputChangeEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeChanging) {
                    _this.beforeChanging(_this, outerArgs);
                }
                if (_this._changing) {
                    _this._changing(_this, outerArgs);
                }
            };
            this.i.changing = delegateCombine(this.i.changing, this._changing_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    return IgrInput;
}(IgrInputGroupItem));
export { IgrInput };
//# sourceMappingURL=igr-input.js.map
