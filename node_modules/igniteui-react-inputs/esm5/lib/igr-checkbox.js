import * as tslib_1 from "tslib";
import * as React from 'react';
import { Checkbox } from "./Checkbox";
import { ensureEnum, brushToString, stringToBrush, ensureBool, initializePropertiesFromCss, NamePatcher, isValidProp, toSpinal, getModifiedProps } from "igniteui-react-core";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { IgrCheckboxChangeEventArgs } from './igr-checkbox-change-event-args';
import { CheckboxLabelPosition_$type } from './CheckboxLabelPosition';
import { BaseControlTheme_$type } from "igniteui-react-core";
var requiredStyle = "\n\n/*.ig-checkbox-mark {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    stroke: #fff;\n    stroke-linecap: square;\n    stroke-width: 3;\n    stroke-dasharray: 24;\n    stroke-dashoffset: 24;\n    fill: none;\n    opacity: 0;\n    z-index: 1;\n}*/\n\n/*.ig-native-checkbox {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    margin: -1px;\n    border: none;\n    clip: rect(0, 0, 0, 0);\n    outline: 0;\n    pointer-events: none;\n    overflow: hidden;\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    appearance: none;\n}*/\n\n/*.ig-checkbox-box {\n    width: 1.25em;\n    height: 1.25em;\n}*/\n\n/*.ig-checkbox-composite {\n    box-sizing: border-box;\n    position: relative;\n    display: inline-block;\n    cursor: pointer;\n    width: 1.25em;\n    height: 1.25em;\n    min-width: 1.25em;\n    border-width: .125rem;\n    border-style: solid;\n    border-color: rgba(0,0,0,0.54);\n    border-top-color: rgba(0, 0, 0, 0.54);\n    border-right-color: rgba(0, 0, 0, 0.54);\n    border-bottom-color: rgba(0, 0, 0, 0.54);\n    border-left-color: rgba(0, 0, 0, 0.54);\n    border-radius: 2px;\n    -webkit-tap-highlight-color: transparent;\n    overflow: hidden;\n}*/\n\n/*.ig-checkbox-label {\n    font-family: \"Titillium Web\", Verdana;\n    font-weight: 400;\n    font-size: 1rem;\n    letter-spacing: .00937rem;\n    text-transform: none;\n    line-height: 1.5rem;\n    margin-left: 8px;\n    margin-top: 0;\n    margin-bottom: 0;\n    cursor: pointer;\n}*/\n";
var IgrCheckbox = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(IgrCheckbox, _super);
    function IgrCheckbox(props) {
        var _this = _super.call(this, props) || this;
        _this._wrapper = null;
        _this._implementation = null;
        _this.__p = null;
        _this._hasUserValues = new Set();
        _this._stylingContainer = null;
        _this._stylingParent = null;
        _this._inStyling = false;
        _this._change = null;
        _this._change_wrapped = null;
        if (_this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));
        }
        _this._implementation = _this.createImplementation();
        _this._implementation.externalObject = _this;
        _this._getMainRef = _this._getMainRef.bind(_this);
        var container;
        if (document) {
            container = document.createElement("div");
        }
        var root;
        root = container;
        if (container != null) {
            root = container;
        }
        _this.requestRender = _this.requestRender.bind(_this);
        _this._portalManager = new PortalManager("checkboxLabel", _this.requestRender);
        var ren = new ReactRenderer(root, document, true, {}, _this._portalManager);
        _this._wrapper = ren;
        _this._container = _this._wrapper.rootWrapper;
        _this._container.setStyleProperty("display", "inline-block");
        var checkbox = _this.i;
        _this._checkbox = checkbox;
        checkbox.provideContainer(ren);
        if (props) {
            _this.initializeProperties();
        }
        return _this;
    }
    IgrCheckbox.prototype._getMainRef = function (ref) {
        this._elRef = ref;
    };
    IgrCheckbox.prototype.render = function () {
        var propChildren = this.props.children;
        var children = [];
        React.Children.forEach(propChildren, function (ch) {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        var div = React.createElement("div", {
            className: "ig-checkbox igr-checkbox",
            ref: this._getMainRef,
            children: children
        });
        return div;
    };
    IgrCheckbox.prototype.requestRender = function () {
        if (this._initialized) {
            this.setState({});
        }
    };
    //private _getLabelPortal(element: DomWrapper, portalCallback: (portal: DomPortal) => void): void {
    //    this._portalManager.getPortal(element, "TemplateContent", portalCallback);
    //}
    IgrCheckbox.prototype.shouldComponentUpdate = function (nextProps, nextState) {
        var e_1, _a;
        var mod = getModifiedProps(this.props, nextProps);
        try {
            for (var _b = tslib_1.__values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                if (isValidProp(this, p)) {
                    this[p] = mod[p];
                }
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
        return true;
    };
    IgrCheckbox.prototype.initializeProperties = function () {
        var e_2, _a;
        try {
            for (var _b = tslib_1.__values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                if (isValidProp(this, p)) {
                    this[p] = this.props[p];
                }
            }
        }
        catch (e_2_1) {
            e_2 = { error: e_2_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_2)
                    throw e_2.error;
            }
        }
    };
    // supports angular themes or custom properties set in CSS
    IgrCheckbox.prototype.updateStyle = function () {
        this._styling(this._elRef, this);
    };
    IgrCheckbox.prototype.componentWillUnmount = function () {
        this._checkbox.destroy();
        this._wrapper.destroy();
    };
    IgrCheckbox.prototype.componentDidMount = function () {
        this._elRef.appendChild(this._container.getNativeElement());
        this.initializeContent();
    };
    IgrCheckbox.prototype.initializeContent = function () {
        this._styling(this._container.getNativeElement(), this);
        this.updateStyle();
        this.i.onContentReady();
    };
    IgrCheckbox.prototype.createImplementation = function () {
        return new Checkbox();
    };
    Object.defineProperty(IgrCheckbox.prototype, "i", {
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckbox.prototype, "baseTheme", {
        /**
     * Gets or sets the base built in theme to use for the checkbox.
    */
        get: function () {
            return this.i.d;
        },
        set: function (v) {
            this.i.d = ensureEnum(BaseControlTheme_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckbox.prototype, "uncheckedBackgroundColor", {
        /**
         * Gets or sets the color to use for the background when the checkbox is unchecked.
        */
        get: function () {
            return brushToString(this.i.dt);
        },
        set: function (v) {
            this.i.dt = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckbox.prototype, "actualUncheckedBackgroundColor", {
        /**
         * Gets or sets the color to use for the actual background when the checkbox is unchecked.
        */
        get: function () {
            return brushToString(this.i.c8);
        },
        set: function (v) {
            this.i.c8 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckbox.prototype, "checkedBackgroundColor", {
        /**
         * Gets or sets the color to use for the background when the checkbox is checked.
        */
        get: function () {
            return brushToString(this.i.da);
        },
        set: function (v) {
            this.i.da = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckbox.prototype, "tickColor", {
        /**
         * Gets or sets the color to use for the check mark when the checkbox is checked.
        */
        get: function () {
            return brushToString(this.i.ds);
        },
        set: function (v) {
            this.i.ds = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckbox.prototype, "actualTickColor", {
        /**
         * Gets or sets the color to use for the check mark when the checkbox is checked.
        */
        get: function () {
            return brushToString(this.i.c7);
        },
        set: function (v) {
            this.i.c7 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckbox.prototype, "uncheckedBorderColor", {
        /**
         * Gets or sets the color to use for the check mark when the checkbox is unchecked.
        */
        get: function () {
            return brushToString(this.i.du);
        },
        set: function (v) {
            this.i.du = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckbox.prototype, "checkedBorderColor", {
        /**
         * Gets or sets the color to use for the check mark when the checkbox is checked.
        */
        get: function () {
            return brushToString(this.i.db);
        },
        set: function (v) {
            this.i.db = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckbox.prototype, "actualUncheckedBorderColor", {
        /**
         * Gets or sets the color to use for the check mark when the checkbox is checked.
        */
        get: function () {
            return brushToString(this.i.c9);
        },
        set: function (v) {
            this.i.c9 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckbox.prototype, "actualCheckedBorderColor", {
        /**
         * Gets or sets the color to use for the check mark when the checkbox is checked.
        */
        get: function () {
            return brushToString(this.i.c6);
        },
        set: function (v) {
            this.i.c6 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckbox.prototype, "borderWidth", {
        /**
         * Gets or sets the Width to use for the check mark when the checkbox is checked.
        */
        get: function () {
            return this.i.al;
        },
        set: function (v) {
            this.i.al = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckbox.prototype, "actualBorderWidth", {
        /**
         * Gets or sets the Width to use for the check mark when the checkbox is checked.
        */
        get: function () {
            return this.i.ai;
        },
        set: function (v) {
            this.i.ai = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckbox.prototype, "cornerRadius", {
        /**
         * Gets or sets the corner radius to use for the checkbox.
        */
        get: function () {
            return this.i.am;
        },
        set: function (v) {
            this.i.am = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckbox.prototype, "tickStrokeWidth", {
        /**
         * Gets or sets the corner radius to use for the checkbox.
        */
        get: function () {
            return this.i.aw;
        },
        set: function (v) {
            this.i.aw = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckbox.prototype, "actualTickStrokeWidth", {
        /**
         * Gets or sets the stroke width to use for the check mark.
        */
        get: function () {
            return this.i.ak;
        },
        set: function (v) {
            this.i.ak = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckbox.prototype, "actualCornerRadius", {
        /**
         * Gets the actual corner radius to use for the checkbox.
        */
        get: function () {
            return this.i.aj;
        },
        set: function (v) {
            this.i.aj = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckbox.prototype, "actualCheckedBackgroundColor", {
        /**
         * Gets or sets the color to use for the actual background when the checkbox is checked.
        */
        get: function () {
            return brushToString(this.i.c5);
        },
        set: function (v) {
            this.i.c5 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckbox.prototype, "inputId", {
        /**
         * Gets or sets the id to use for the internal native checkbox.
        */
        get: function () {
            return this.i.by;
        },
        set: function (v) {
            this.i.by = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckbox.prototype, "id", {
        /**
         * Gets or sets the id to use for the checkbox.
        */
        get: function () {
            return this.i.bw;
        },
        set: function (v) {
            this.i.bw = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckbox.prototype, "labelId", {
        /**
         * Gets or sets id to use for the checkbox label.
        */
        get: function () {
            return this.i.labelId;
        },
        set: function (v) {
            this.i.labelId = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckbox.prototype, "value", {
        /**
         * Gets or sets value to use for the checkbox.
        */
        get: function () {
            return this.i.a5;
        },
        set: function (v) {
            this.i.a5 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckbox.prototype, "name", {
        /**
         * Gets or sets name to use for the checkbox.
        */
        get: function () {
            return this.i.b7;
        },
        set: function (v) {
            this.i.b7 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckbox.prototype, "tabIndex", {
        /**
         * Gets or sets TabIndex to use for the checkbox.
        */
        get: function () {
            return this.i.a0;
        },
        set: function (v) {
            this.i.a0 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckbox.prototype, "required", {
        /**
         * Gets or sets if the checkbox is required.
        */
        get: function () {
            return this.i.az;
        },
        set: function (v) {
            this.i.az = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckbox.prototype, "focused", {
        /**
         * Gets or sets if the checkbox is Focused.
        */
        get: function () {
            return this.i.focused;
        },
        set: function (v) {
            this.i.focused = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckbox.prototype, "ariaLabelledBy", {
        /**
         * Gets or sets the value of the aria-labelledby attribute.
        */
        get: function () {
            return this.i.bl;
        },
        set: function (v) {
            this.i.bl = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckbox.prototype, "ariaLabel", {
        /**
         * Gets or sets the value of the aria-label attribute.
        */
        get: function () {
            return this.i.bk;
        },
        set: function (v) {
            this.i.bk = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckbox.prototype, "labelPosition", {
        /**
         * Gets or sets LabelPosition to use for the checkbox.
        */
        get: function () {
            return this.i.h;
        },
        set: function (v) {
            this.i.h = ensureEnum(CheckboxLabelPosition_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckbox.prototype, "disableRipple", {
        /**
         * Gets or sets whether to disable the ripple effect for the checkbox.
        */
        get: function () {
            return this.i.t;
        },
        set: function (v) {
            this.i.t = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckbox.prototype, "checked", {
        /**
         * Gets or sets whether the checkbox is checked.
        */
        get: function () {
            return this.i.checked;
        },
        set: function (v) {
            this.i.checked = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckbox.prototype, "indeterminate", {
        /**
         * Gets or sets whether the checkbox is indeterminate.
        */
        get: function () {
            return this.i.indeterminate;
        },
        set: function (v) {
            this.i.indeterminate = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckbox.prototype, "disabled", {
        /**
         * Gets or sets whether the checkbox is disabled.
        */
        get: function () {
            return this.i.disabled;
        },
        set: function (v) {
            this.i.disabled = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckbox.prototype, "disableTransitions", {
        /**
         * Gets or sets whether the checkbox transitions are disabled.
        */
        get: function () {
            return this.i.u;
        },
        set: function (v) {
            this.i.u = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    IgrCheckbox.prototype.findByName = function (name) {
        return null;
    };
    Object.defineProperty(IgrCheckbox.prototype, "hasUserValues", {
        get: function () {
            return this._hasUserValues;
        },
        enumerable: true,
        configurable: true
    });
    IgrCheckbox.prototype.__m = function (propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    };
    IgrCheckbox.prototype._styling = function (container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        var genericPrefix = "";
        var typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("Checkbox");
        var additionalPrefixes = [];
        var prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        var b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            var basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            var parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            var parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    };
    IgrCheckbox.prototype.onDetachedFromUI = function () {
        this.i.onDetachedFromUI();
    };
    IgrCheckbox.prototype.onAttachedToUI = function () {
        this.i.onAttachedToUI();
    };
    /**
     * Exports visual information about the current state of the grid.
    
    */
    IgrCheckbox.prototype.exportVisualModel = function () {
        var iv = this.i.a4();
        return (iv);
    };
    /**
     * Returns a serialized copy of the exported visual model
    
    */
    IgrCheckbox.prototype.exportSerializedVisualModel = function () {
        var iv = this.i.bv();
        return (iv);
    };
    Object.defineProperty(IgrCheckbox.prototype, "change", {
        get: function () {
            return this._change;
        },
        set: function (ev) {
            var _this = this;
            if (this._change_wrapped !== null) {
                this.i.change = delegateRemove(this.i.change, this._change_wrapped);
                this._change_wrapped = null;
                this._change = null;
            }
            this._change = ev;
            this._change_wrapped = function (o, e) {
                var outerArgs = new IgrCheckboxChangeEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeChange) {
                    _this.beforeChange(_this, outerArgs);
                }
                if (_this._change) {
                    _this._change(_this, outerArgs);
                }
            };
            this.i.change = delegateCombine(this.i.change, this._change_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    return IgrCheckbox;
}(React.Component));
export { IgrCheckbox };
//# sourceMappingURL=igr-checkbox.js.map
