/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { Base, String_$type, fromEnum, Number_$type, markType } from "igniteui-react-core";
import { Dictionary$2 } from "igniteui-react-core";
import { ObservableCollection$1 } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { Replaced } from "./Replaced";
/**
 * @hidden
 */
var MaskParsingService = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(MaskParsingService, _super);
    function MaskParsingService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MaskParsingService.prototype.g = function (a, b) {
        var e_1, _a, e_2, _b;
        var c = "";
        var d = "";
        var e = b.a;
        var f = this.c(e);
        var g = f.keys;
        var h = this.e(e, g);
        var i = f.values;
        if (a != null) {
            d = a.toString();
        }
        for (var j = 0; j < e.length; j++) {
            c += b.b;
        }
        try {
            for (var _c = tslib_1.__values(fromEnum(f)), _d = _c.next(); !_d.done; _d = _c.next()) {
                var k = _d.value;
                c = this.i(c, k.key, k.value);
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return))
                    _a.call(_c);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
        if (d == "") {
            return c;
        }
        var l = this.f(d, i);
        for (var m = 0; m < l.count; m++) {
            var n = l._inner[m];
            var o = this.b(n, h._inner[m], e);
            if (!o && n != b.b) {
                l.item(m, b.b);
            }
        }
        if (l.count > h.count) {
            l.v(h.count + 1, l.count);
        }
        var p = 0;
        try {
            for (var _e = tslib_1.__values(fromEnum(l)), _f = _e.next(); !_f.done; _f = _e.next()) {
                var q = _f.value;
                var r = q;
                c = this.i(c, h._inner[p++], r);
            }
        }
        catch (e_2_1) {
            e_2 = { error: e_2_1 };
        }
        finally {
            try {
                if (_f && !_f.done && (_b = _e.return))
                    _b.call(_e);
            }
            finally {
                if (e_2)
                    throw e_2.error;
            }
        }
        return c;
    };
    MaskParsingService.prototype.h = function (a, b) {
        var c = "";
        var d = b.a;
        var e = this.c(d);
        var f = e.values;
        for (var g = 0; g < a.length; g++) {
            var h = a.charAt(g).toString();
            if (!f.contains(h)) {
                if (h != b.b) {
                    c += h;
                }
            }
        }
        return c;
    };
    MaskParsingService.prototype.a = function (a, b, c, d, e) {
        var f = this.c(c.a).keys;
        var g = new ObservableCollection$1(String_$type, 0);
        for (var h = 0; h < b.length; h++) {
            g.add(b.charAt(h).toString());
        }
        var i = d;
        e = Math.min(e, a.length);
        for (var j = d; j < e || (g.count > 0 && j < a.length); j++) {
            if (f.contains(j)) {
                if (g._inner[0] == a.charAt(j).toString()) {
                    i = j + 1;
                    g.removeAt(0);
                }
                continue;
            }
            if (g._inner[0] != null && !this.b(g._inner[0].toString(), j, c.a) && g._inner[0].toString() != c.b) {
                break;
            }
            var k = c.b;
            if (g.count > 0) {
                i = j + 1;
                k = g._inner[0];
                g.removeAt(0);
            }
            a = this.i(a, j, k);
        }
        var l = new Replaced();
        l.b = a;
        l.a = i;
        return l;
    };
    MaskParsingService.prototype.i = function (a, b, c) {
        if (a != null) {
            return a.substr(0, b) + c + a.substr(b + 1);
        }
        return null;
    };
    MaskParsingService.prototype.b = function (a, b, c) {
        var d;
        var e;
        var f = "[\\d\\u00C0-\\u1FFF\\u2C00-\\uD7FFa-zA-Z]";
        var g = "[\\d\\u00C0-\\u1FFF\\u2C00-\\uD7FFa-zA-Z\\u0020]";
        var h = "[\\u00C0-\\u1FFF\\u2C00-\\uD7FFa-zA-Z]";
        var i = "[\\u00C0-\\u1FFF\\u2C00-\\uD7FFa-zA-Z\\u0020]";
        var j = "[\\d]";
        var k = "[\\d\\u0020]";
        var l = "[\\d-\\+\\s]";
        switch (c.charAt(b)) {
            case 'C':
                e = a != "";
                break;
            case '&':
                d = new RegExp("[\\u0020]");
                e = !d.test(a);
                break;
            case 'a':
                d = new RegExp(g);
                e = d.test(a);
                break;
            case 'A':
                d = new RegExp(f);
                e = d.test(a);
                break;
            case '?':
                d = new RegExp(i);
                e = d.test(a);
                break;
            case 'L':
                d = new RegExp(h);
                e = d.test(a);
                break;
            case '0':
                d = new RegExp(j);
                e = d.test(a);
                break;
            case '9':
                d = new RegExp(k);
                e = d.test(a);
                break;
            case '#':
                d = new RegExp(l);
                e = d.test(a);
                break;
            default:
                e = false;
                break;
        }
        return e;
    };
    MaskParsingService.prototype.c = function (a) {
        var b = new Dictionary$2(Number_$type, String_$type, 0);
        for (var c = 0; c < a.length; c++) {
            var d = a.charAt(c);
            if (!MaskParsingService.d.contains(d)) {
                b.addItem(c, d.toString());
            }
        }
        return b;
    };
    MaskParsingService.prototype.e = function (a, b) {
        var c = new ObservableCollection$1(Number_$type, 0);
        for (var d = 0; d < a.length; d++) {
            if (!b.contains(d)) {
                c.add(d);
            }
        }
        return c;
    };
    MaskParsingService.prototype.f = function (a, b) {
        var c = new ObservableCollection$1(String_$type, 0);
        for (var d = 0; d < a.length; d++) {
            var e = a.charAt(d).toString();
            if (!b.contains(e)) {
                b.remove(e);
                c.add(e);
            }
        }
        return c;
    };
    MaskParsingService.$t = markType(MaskParsingService, 'MaskParsingService');
    MaskParsingService.d = ((function () {
        var $ret = new List$1(String_$type, 0);
        $ret.add('C');
        $ret.add('&');
        $ret.add('a');
        $ret.add('A');
        $ret.add('?');
        $ret.add('L');
        $ret.add('9');
        $ret.add('0');
        $ret.add('#');
        return $ret;
    })());
    return MaskParsingService;
}(Base));
export { MaskParsingService };
//# sourceMappingURL=MaskParsingService.js.map
