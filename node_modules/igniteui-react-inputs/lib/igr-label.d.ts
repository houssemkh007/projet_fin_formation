import * as React from 'react';
import { Label } from "./Label";
import { IgrInputGroupItem, IIgrInputGroupItemProps } from './igr-input-group-item';
import { ControlDisplayDensity } from "igniteui-react-core";
import { BaseControlTheme } from "igniteui-react-core";
export declare class IgrLabel extends IgrInputGroupItem<IIgrLabelProps> {
    private _container;
    private _initialized;
    private _elRef;
    private _portalManager;
    private _wrapper;
    private _getMainRef;
    render(): React.DetailedReactHTMLElement<{
        className: string;
        ref: (ref: any) => void;
        children: any[];
    }, any>;
    private requestRender;
    constructor(props: IIgrLabelProps);
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    protected initializeProperties(): void;
    updateStyle(): void;
    componentWillUnmount(): void;
    componentDidMount(): void;
    initializeContent(): void;
    protected createImplementation(): Label;
    private _label;
    private _onDisplayChanged;
    private _onFlexDirectionChanged;
    private _onFlexGrowChanged;
    private _onAlignItemsChanged;
    /**
                             * @hidden
                             */
    readonly i: Label;
    /**
 * Gets or sets the base built in theme to use for the label.
*/
    baseTheme: BaseControlTheme;
    /**
     * Gets or sets the display density to use for the label.
    */
    density: ControlDisplayDensity;
    /**
     * Gets the actual display density to use for the label.
    */
    actualDensity: ControlDisplayDensity;
    /**
     * Gets the actual color to use for the text color.
    */
    actualTextColor: string;
    /**
     * Gets the actual color to use for the text color.
    */
    actualHighlightTextColor: string;
    /**
     * Gets the actual color to use for the text color when highlighted and hovered.
    */
    actualHoverHighlightTextColor: string;
    /**
     * Gets the actual hover color to use for the text.
    */
    actualHoverTextColor: string;
    /**
     * Gets or sets the color to use for the text.
    */
    textColor: string;
    /**
     * Gets or sets the color to use for the text.
    */
    highlightTextColor: string;
    /**
     * Gets or sets the color to use for the text.
    */
    hoverHighlightTextColor: string;
    /**
     * Gets or sets the use for the button.
    */
    textStyle: string;
    /**
     * Gets or sets the color to use for the hovered text of the button regardless of type.
    */
    hoverTextColor: string;
    /**
     * Gets or sets the id to use for the checkbox.
    */
    id: string;
    /**
     * Gets or sets the id to use for the checkbox.
    */
    display: string;
    /**
     * Gets or sets the id to use for the checkbox.
    */
    flexDirection: string;
    /**
     * Gets or sets the flex-grow setting for the button.
    */
    flexGrow: string;
    /**
     * Gets or sets the id to use for the checkbox.
    */
    alignItems: string;
    /**
     * Gets or sets TabIndex to use for the checkbox.
    */
    tabIndex: number;
    /**
     * Gets or sets the for attribute to use for the label.
    */
    for: string;
    /**
     * Gets or sets the value of the aria-label attribute.
    */
    ariaLabel: string;
    /**
     * Gets or sets the text for the label.
    */
    text: string;
    /**
     * Gets or sets whether the label is hovered.
    */
    isHover: boolean;
    /**
     * Gets or sets the value for the label.
    */
    value: boolean;
    /**
     * Gets or sets whether the checkbox is disabled.
    */
    disabled: boolean;
    onDetachedFromUI(): void;
    onAttachedToUI(): void;
    /**
     * Exports visual information about the current state of the grid.
    
    */
    exportVisualModel(): any;
    /**
     * Returns a serialized copy of the exported visual model
    
    */
    exportSerializedVisualModel(): string;
}
export interface IIgrLabelProps extends IIgrInputGroupItemProps {
    /**
 * Gets or sets the base built in theme to use for the label.
*/
    baseTheme?: BaseControlTheme | string;
    /**
     * Gets or sets the display density to use for the label.
    */
    density?: ControlDisplayDensity | string;
    /**
     * Gets the actual display density to use for the label.
    */
    actualDensity?: ControlDisplayDensity | string;
    /**
     * Gets the actual color to use for the text color.
    */
    actualTextColor?: string;
    /**
     * Gets the actual color to use for the text color.
    */
    actualHighlightTextColor?: string;
    /**
     * Gets the actual color to use for the text color when highlighted and hovered.
    */
    actualHoverHighlightTextColor?: string;
    /**
     * Gets the actual hover color to use for the text.
    */
    actualHoverTextColor?: string;
    /**
     * Gets or sets the color to use for the text.
    */
    textColor?: string;
    /**
     * Gets or sets the color to use for the text.
    */
    highlightTextColor?: string;
    /**
     * Gets or sets the color to use for the text.
    */
    hoverHighlightTextColor?: string;
    /**
     * Gets or sets the use for the button.
    */
    textStyle?: string;
    /**
     * Gets or sets the color to use for the hovered text of the button regardless of type.
    */
    hoverTextColor?: string;
    /**
     * Gets or sets the id to use for the checkbox.
    */
    id?: string;
    /**
     * Gets or sets the id to use for the checkbox.
    */
    display?: string;
    /**
     * Gets or sets the id to use for the checkbox.
    */
    flexDirection?: string;
    /**
     * Gets or sets the flex-grow setting for the button.
    */
    flexGrow?: string;
    /**
     * Gets or sets the id to use for the checkbox.
    */
    alignItems?: string;
    /**
     * Gets or sets TabIndex to use for the checkbox.
    */
    tabIndex?: number | string;
    /**
     * Gets or sets the for attribute to use for the label.
    */
    for?: string;
    /**
     * Gets or sets the value of the aria-label attribute.
    */
    ariaLabel?: string;
    /**
     * Gets or sets the text for the label.
    */
    text?: string;
    /**
     * Gets or sets whether the label is hovered.
    */
    isHover?: boolean | string;
    /**
     * Gets or sets the value for the label.
    */
    value?: boolean | string;
    /**
     * Gets or sets whether the checkbox is disabled.
    */
    disabled?: boolean | string;
}
