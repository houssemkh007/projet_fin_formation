import { Base, Type, INotifyPropertyChanged, PropertyChangedEventArgs } from "igniteui-react-core";
import { DomRenderer, DomWrapper } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { ControlDisplayDensity } from "igniteui-react-core";
import { BaseControlTheme } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
import { ValueChangedEventArgs } from "./ValueChangedEventArgs";
import { CalendarVisualModelExport } from "./CalendarVisualModelExport";
/**
 * @hidden
 */
export declare class CalendarView extends Base {
    static $t: Type;
    private g;
    private i;
    private j;
    private c;
    private b;
    private d;
    private e;
    private h;
    private l;
    constructor();
    a: Calendar;
    y(): void;
    f: DomRenderer;
    x(a: DomRenderer): void;
    m(): string;
    private p;
    private ai;
    private aj;
    private ah;
    ag(): void;
    ac(a?: boolean): void;
    af(): void;
    ak(): void;
    ab(): void;
    ad(): void;
    ae(a: DomWrapper): void;
    r(): void;
    private aa;
    private v;
    private al;
    private am;
    private n;
    private o;
    private k;
    private z;
    private u;
    private t;
    private ap;
    private q;
    private s;
    private an;
    private ao;
    w(): void;
}
/**
 * @hidden
 */
export declare class Calendar extends Base implements INotifyPropertyChanged {
    static $t: Type;
    private h;
    private static readonly y;
    private static readonly z;
    s: Date;
    t: Date;
    private r;
    private n;
    private o;
    private m;
    private p;
    private q;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    constructor();
    close: (sender: any) => void;
    a2(): void;
    valueChanged: (sender: any, args: ValueChangedEventArgs) => void;
    a4(a: Date): void;
    ay(a: string, b: string, c: string): void;
    notifySizeChanged(): void;
    destroy(): void;
    provideContainer(a: DomRenderer): void;
    private w;
    u: Date;
    private c;
    d: ControlDisplayDensity;
    private a;
    b: BaseControlTheme;
    private bm;
    bv: Brush;
    private br;
    b0: Brush;
    private bt;
    b2: Brush;
    private bo;
    bx: Brush;
    private bq;
    bz: Brush;
    private bu;
    b3: Brush;
    private bs;
    b1: Brush;
    private bp;
    by: Brush;
    private bn;
    bw: Brush;
    private k;
    l: FontInfo;
    protected a3(a: string, b: any, c: any): void;
    protected a5(a: string, b: any, c: any): void;
    private bk;
    private bl;
    a0(): void;
    private bc;
    private ba;
    private as;
    ax(): void;
    private a7;
    at(a: DomRenderer, b: DomWrapper, c: List$1<DomWrapper>): void;
    av(a: DomRenderer, b: DomWrapper, c: List$1<DomWrapper>): void;
    aw(a: DomRenderer, b: DomWrapper, c: List$1<DomWrapper>): void;
    private au;
    be(a: DomRenderer, b: DomWrapper, c: List$1<DomWrapper>): void;
    bb(a: DomWrapper): void;
    bj(a: DomWrapper): void;
    bg(a: DomWrapper): void;
    bd(a: List$1<DomWrapper>, b?: boolean): void;
    bf(a: List$1<DomWrapper>): void;
    bi(a: List$1<DomWrapper>): void;
    bh(a: List$1<DomWrapper>, b: number, c?: boolean): void;
    private g;
    private f;
    ap(a: number): void;
    aq(a: number): void;
    ar(a: number): void;
    a9(a: List$1<DomWrapper>, b: number): void;
    a8(): void;
    x(): any;
    af(): string;
    e(): CalendarVisualModelExport;
}
