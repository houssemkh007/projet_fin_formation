import * as React from 'react';
import { Button } from "./Button";
import { ButtonDisplayStyle } from './ButtonDisplayStyle';
import { IgrButtonClickEventArgs } from './igr-button-click-event-args';
import { ControlDisplayDensity } from "igniteui-react-core";
import { BaseControlTheme } from "igniteui-react-core";
import { ElevationMode } from "igniteui-react-core";
export declare class IgrButton extends React.Component<IIgrButtonProps> {
    private _container;
    private _initialized;
    private _elRef;
    private _portalManager;
    private _wrapper;
    private _getMainRef;
    render(): React.DetailedReactHTMLElement<{
        className: string;
        ref: (ref: any) => void;
        children: any[];
    }, any>;
    private requestRender;
    constructor(props: IIgrButtonProps);
    private _onDisplayChanged;
    private _onFlexDirectionChanged;
    private _onFlexGrowChanged;
    private _onAlignItemsChanged;
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    protected initializeProperties(): void;
    updateStyle(): void;
    componentWillUnmount(): void;
    componentDidMount(): void;
    initializeContent(): void;
    protected createImplementation(): Button;
    protected _implementation: any;
    /**
     * @hidden
     */
    readonly i: Button; /**
                                 * @hidden
                                 */
    static _createFromInternal(internal: any): IgrButton;
    private _button;
    /**
 * Gets or sets the min width to use for the button.
*/
    minWidth: number;
    /**
     * Gets or sets the min height to use for the button.
    */
    minHeight: number;
    /**
     * Gets or sets the display style to use for the button.
    */
    displayType: ButtonDisplayStyle;
    /**
     * Gets or sets the display density to use for the button.
    */
    density: ControlDisplayDensity;
    /**
     * Gets or sets the base built in theme to use for the button.
    */
    baseTheme: BaseControlTheme;
    /**
     * Gets the actual display density to use for the label.
    */
    actualDensity: ControlDisplayDensity;
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    actualBorderColor: string;
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    actualUmbraShadowColor: string;
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    actualPenumbraShadowColor: string;
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    actualAmbientShadowColor: string;
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    actualRestingElevation: number;
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    actualFocusElevation: number;
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    actualHoverElevation: number;
    /**
     * Gets or sets the color to use for the ripple when the button is pressed.
    */
    actualRippleColor: string;
    actualCornerRadiusBottomRight: number;
    actualCornerRadiusBottomLeft: number;
    actualCornerRadiusTopLeft: number;
    actualCornerRadiusTopRight: number;
    ensureActualCornerRadius(): void;
    /**
     * Gets the color to use for the actual background.
    */
    actualBackgroundColor: string;
    /**
     * Gets the actual color to use for the disabled background of the button.
    */
    actualDisabledBackgroundColor: string;
    /**
     * Gets the actual color to use for the disabled border of the button.
    */
    actualDisabledBorderColor: string;
    /**
     * Gets the actual color to use for the disabled text of the button.
    */
    actualDisabledTextColor: string;
    /**
     * Gets the actual disabled elevation to use for the button.
    */
    actualDisabledElevation: number;
    /**
     * Gets the actual disabled elevation to use for the button.
    */
    actualElevationMode: ElevationMode;
    /**
     * Gets the color to use for the actual background.
    */
    actualTextColor: string;
    /**
     * Gets the color to use for the actual background.
    */
    actualHoverTextColor: string;
    /**
     * Gets the color to use for the actual background.
    */
    actualFocusBackgroundColor: string;
    /**
     * Gets the actual color to use for the focused text.
    */
    actualFocusTextColor: string;
    /**
     * Gets the hover color to use for the actual background.
    */
    actualHoverBackgroundColor: string;
    /**
     * Gets or sets the Width to use for the check mark when the checkbox is checked.
    */
    actualBorderWidth: number;
    /**
     * Gets or sets the color to use for the background of the button when the  type is raised.
    */
    raisedBackgroundColor: string;
    /**
     * Gets or sets the color to use for the disabled background of the button when the type is raised.
    */
    raisedDisabledBackgroundColor: string;
    /**
     * Gets or sets the color to use for the disabled border of the button when the type is raised.
    */
    raisedDisabledBorderColor: string;
    /**
     * Gets or sets the color to use for the disabled text of the button when the type is raised.
    */
    raisedDisabledTextColor: string;
    /**
     * Gets or sets the disabled elevation to use for the button when the type is raised.
    */
    raisedDisabledElevation: number;
    /**
     * Gets or sets the hover color to use for the background of the button when the  type is raised.
    */
    raisedHoverBackgroundColor: string;
    /**
     * Gets or sets the border color to use for the button when the type is raised.
    */
    raisedBorderColor: string;
    /**
     * Gets or sets the elevation to use for the button when the type is raised.
    */
    raisedRestingElevation: number;
    /**
     * Gets or sets the hover elevation to use for the button when the type is raised.
    */
    raisedHoverElevation: number;
    /**
     * Gets or sets the focus elevation to use for the button when the type is raised.
    */
    raisedFocusElevation: number;
    /**
     * Gets or sets the width to use for the button border when the type is raised.
    */
    raisedBorderWidth: number;
    raisedCornerRadiusBottomRight: number;
    raisedCornerRadiusBottomLeft: number;
    raisedCornerRadiusTopLeft: number;
    raisedCornerRadiusTopRight: number;
    ensureRaisedCornerRadius(): void;
    /**
     * Gets or sets the color to use for the background when the button is pressed and the type is floating action button.
    */
    raisedRippleColor: string;
    /**
     * Gets or sets the color to use for the background of the button when the type is flat.
    */
    flatBackgroundColor: string;
    /**
     * Gets or sets the color to use for the disabled background of the button when the type is flat.
    */
    flatDisabledBackgroundColor: string;
    /**
     * Gets or sets the color to use for the disabled border of the button when the type is flat.
    */
    flatDisabledBorderColor: string;
    /**
     * Gets or sets the color to use for the disabled text of the button when the type is flat.
    */
    flatDisabledTextColor: string;
    /**
     * Gets or sets the disabled elevation to use for the button when the type is flat.
    */
    flatDisabledElevation: number;
    /**
     * Gets or sets the hover color to use for the background of the button when the type is flat.
    */
    flatHoverBackgroundColor: string;
    /**
     * Gets or sets the border color to use for the button when the type is flat.
    */
    flatBorderColor: string;
    /**
     * Gets or sets the elevation to use for the button when the type is flat.
    */
    flatRestingElevation: number;
    /**
     * Gets or sets the hover elevation to use for the button when the type is flat.
    */
    flatHoverElevation: number;
    /**
     * Gets or sets the focus elevation to use for the button when the type is flat.
    */
    flatFocusElevation: number;
    /**
     * Gets or sets the color to use for the background when the button is pressed and the type is floating action button.
    */
    flatRippleColor: string;
    /**
     * Gets or sets the color to use for the text of the button when type is flat.
    */
    flatTextColor: string;
    /**
     * Gets or sets the color to use for the hovered text of the button when type is flat.
    */
    flatHoverTextColor: string;
    /**
     * Gets or sets the color to use for the backround the button when it is focused and flat.
    */
    flatFocusBackgroundColor: string;
    /**
     * Gets or sets the color to use for the text the button when it is focused and flat.
    */
    flatFocusTextColor: string;
    /**
     * Gets or sets the width to use for the button border when the type is flat.
    */
    flatBorderWidth: number;
    flatCornerRadiusBottomRight: number;
    flatCornerRadiusBottomLeft: number;
    flatCornerRadiusTopLeft: number;
    flatCornerRadiusTopRight: number;
    ensureFlatCornerRadius(): void;
    /**
     * Gets or sets the color to use for the background when the button regardless of type.
    */
    backgroundColor: string;
    /**
     * Gets or sets the color to use for the disabled background of the button when the type is disabled.
    */
    disabledBackgroundColor: string;
    /**
     * Gets or sets the color to use for the disabled border of the button when the type is raised.
    */
    disabledBorderColor: string;
    /**
     * Gets or sets the color to use for the disabled text of the button when the type is raised.
    */
    disabledTextColor: string;
    /**
     * Gets or sets the disabled elevation to use for the button when the type is raised.
    */
    disabledElevation: number;
    /**
     * Gets or sets the disabled elevation to use for the button when the type is raised.
    */
    elevationMode: ElevationMode;
    /**
     * Gets or sets the hover color to use for the background of the button when the  type is hovered.
    */
    hoverBackgroundColor: string;
    /**
     * Gets or sets the border color to use for the button regardless of type.
    */
    borderColor: string;
    /**
     * Gets or sets the elevation to use for the button regardless of type.
    */
    restingElevation: number;
    /**
     * Gets or sets the hover elevation to use for the button regardless of type.
    */
    hoverElevation: number;
    /**
     * Gets or sets the focus elevation to use for the button regardless of type.
    */
    focusElevation: number;
    /**
     * Gets or sets the use for the button.
    */
    textStyle: string;
    /**
     * Gets or sets the color to use for the text of the button regardless of type.
    */
    textColor: string;
    /**
     * Gets or sets the color to use for the hovered text of the button regardless of type.
    */
    hoverTextColor: string;
    /**
     * Gets or sets the color to use for the background of the button regardless of type.
    */
    rippleColor: string;
    /**
     * Gets or sets the color to use for the text of the button when type is raised.
    */
    raisedTextColor: string;
    /**
     * Gets or sets the color to use for the hovered text of the button when type is raised.
    */
    raisedHoverTextColor: string;
    /**
     * Gets or sets the color to use for the backround the button when it is focused and raised.
    */
    raisedFocusBackgroundColor: string;
    /**
     * Gets or sets the color to use for the text the button when it is focused and raised.
    */
    raisedFocusTextColor: string;
    /**
     * Gets or sets the color to use for the backround the button when it is focused.
    */
    focusBackgroundColor: string;
    /**
     * Gets or sets the color to use for the text of the button when it is focused.
    */
    focusTextColor: string;
    /**
     * Gets or sets the width to use for the button border regardless of type.
    */
    borderWidth: number;
    cornerRadiusBottomRight: number;
    cornerRadiusBottomLeft: number;
    cornerRadiusTopLeft: number;
    cornerRadiusTopRight: number;
    ensureCornerRadius(): void;
    /**
     * Gets or sets the color to use for the background of the button when the  type is outlined.
    */
    outlinedBackgroundColor: string;
    /**
     * Gets or sets the color to use for the disabled background of the button when the type is outlined.
    */
    outlinedDisabledBackgroundColor: string;
    /**
     * Gets or sets the color to use for the disabled border of the button when the type is outlined.
    */
    outlinedDisabledBorderColor: string;
    /**
     * Gets or sets the color to use for the disabled text of the button when the type is outlined.
    */
    outlinedDisabledTextColor: string;
    /**
     * Gets or sets the disabled elevation to use for the button when the type is outlined.
    */
    outlinedDisabledElevation: number;
    /**
     * Gets or sets the hover color to use for the background of the button when the  type is hoveredOutlined.
    */
    outlinedHoverBackgroundColor: string;
    /**
     * Gets or sets the border color to use for the button when the type is outlined.
    */
    outlinedBorderColor: string;
    /**
     * Gets or sets the elevation to use for the button when the type is outlined.
    */
    outlinedRestingElevation: number;
    /**
     * Gets or sets the hover elevation to use for the button when the type is outlined.
    */
    outlinedHoverElevation: number;
    /**
     * Gets or sets the focus elevation to use for the button when the type is outlined.
    */
    outlinedFocusElevation: number;
    /**
     * Gets or sets the width to use for the button border when the type is outlined.
    */
    outlinedBorderWidth: number;
    outlinedCornerRadiusBottomRight: number;
    outlinedCornerRadiusBottomLeft: number;
    outlinedCornerRadiusTopLeft: number;
    outlinedCornerRadiusTopRight: number;
    ensureOutlinedCornerRadius(): void;
    /**
     * Gets or sets the color to use for the background when the button is pressed and the type is floating action button.
    */
    outlinedRippleColor: string;
    /**
     * Gets or sets the color to use for the text of the button when type is outlined.
    */
    outlinedTextColor: string;
    /**
     * Gets or sets the color to use for the hovered text of the button when type is outlined.
    */
    outlinedHoverTextColor: string;
    /**
     * Gets or sets the color to use for the backround the button when it is focused and outlined.
    */
    outlinedFocusBackgroundColor: string;
    /**
     * Gets or sets the color to use for the text the button when it is focused and outlined.
    */
    outlinedFocusTextColor: string;
    /**
     * Gets or sets the color to use for the background of the button when the  type is floating action button.
    */
    fabBackgroundColor: string;
    /**
     * Gets or sets the color to use for the disabled background of the button when the type is fab.
    */
    fabDisabledBackgroundColor: string;
    /**
     * Gets or sets the color to use for the disabled border of the button when the type is fab.
    */
    fabDisabledBorderColor: string;
    /**
     * Gets or sets the color to use for the disabled text of the button when the type is fab.
    */
    fabDisabledTextColor: string;
    /**
     * Gets or sets the disabled elevation to use for the button when the type is fab.
    */
    fabDisabledElevation: number;
    /**
     * Gets or sets the hover color to use for the background of the button when the  type is hoveredFab.
    */
    fabHoverBackgroundColor: string;
    /**
     * Gets or sets the border color to use for the button when the type is floating action button.
    */
    fabBorderColor: string;
    /**
     * Gets or sets the elevation to use for the button when the type is floating action button.
    */
    fabRestingElevation: number;
    /**
     * Gets or sets the hover elevation to use for the button when the type is floating action button.
    */
    fabHoverElevation: number;
    /**
     * Gets or sets the focus elevation to use for the button when the type is floating action button.
    */
    fabFocusElevation: number;
    /**
     * Gets or sets the width to use for the button border when the type is floating action button.
    */
    fabBorderWidth: number;
    fabCornerRadiusBottomRight: number;
    fabCornerRadiusBottomLeft: number;
    fabCornerRadiusTopLeft: number;
    fabCornerRadiusTopRight: number;
    ensureFabCornerRadius(): void;
    /**
     * Gets or sets the color to use for the background when the button is pressed and the type is floating action button.
    */
    fabRippleColor: string;
    /**
     * Gets or sets the color to use for the text of the button when type is floating action button.
    */
    fabTextColor: string;
    /**
     * Gets or sets the color to use for the hovered text of the button when type is floating action button.
    */
    fabHoverTextColor: string;
    /**
     * Gets or sets the color to use for the backround the button when it is focused and fab.
    */
    fabFocusBackgroundColor: string;
    /**
     * Gets or sets the color to use for the text the button when it is focused and fab.
    */
    fabFocusTextColor: string;
    /**
     * Gets or sets the color to use for the background of the button when the  type is icon.
    */
    iconBackgroundColor: string;
    /**
     * Gets or sets the color to use for the disabled background of the button when the type is icon.
    */
    iconDisabledBackgroundColor: string;
    /**
     * Gets or sets the color to use for the disabled border of the button when the type is icon.
    */
    iconDisabledBorderColor: string;
    /**
     * Gets or sets the color to use for the disabled text of the button when the type is icon.
    */
    iconDisabledTextColor: string;
    /**
     * Gets or sets the disabled elevation to use for the button when the type is icon.
    */
    iconDisabledElevation: number;
    /**
     * Gets or sets the hover color to use for the background of the button when the  type is hoveredIcon.
    */
    iconHoverBackgroundColor: string;
    /**
     * Gets or sets the border color to use for the button when the type is icon.
    */
    iconBorderColor: string;
    /**
     * Gets or sets the elevation to use for the button when the type is icon.
    */
    iconRestingElevation: number;
    /**
     * Gets or sets the hover elevation to use for the button when the type is icon.
    */
    iconHoverElevation: number;
    /**
     * Gets or sets the focus elevation to use for the button when the type is icon.
    */
    iconFocusElevation: number;
    /**
     * Gets or sets the width to use for the button border when the type is icon.
    */
    iconBorderWidth: number;
    iconCornerRadiusBottomRight: number;
    iconCornerRadiusBottomLeft: number;
    iconCornerRadiusTopLeft: number;
    iconCornerRadiusTopRight: number;
    ensureIconCornerRadius(): void;
    /**
     * Gets or sets the color to use for the background when the button is pressed and the type is floating action button.
    */
    iconRippleColor: string;
    /**
     * Gets or sets the color to use for the text of the button when type is icon.
    */
    iconTextColor: string;
    /**
     * Gets or sets the color to use for the hovered text of the button when type is icon.
    */
    iconHoverTextColor: string;
    /**
     * Gets or sets the color to use for the backround the button when it is focused and icon.
    */
    iconFocusBackgroundColor: string;
    /**
     * Gets or sets the color to use for the text the button when it is focused and icon.
    */
    iconFocusTextColor: string;
    /**
     * Gets or sets the id to use for the internal native checkbox.
    */
    inputId: string;
    /**
     * Gets or sets the id to use for the checkbox.
    */
    id: string;
    /**
     * Gets or sets the id to use for the checkbox.
    */
    display: string;
    /**
     * Gets or sets the id to use for the checkbox.
    */
    flexDirection: string;
    /**
     * Gets or sets the flex-grow setting for the button.
    */
    flexGrow: string;
    /**
     * Gets or sets the id to use for the checkbox.
    */
    alignItems: string;
    /**
     * Gets or sets value to use for the checkbox.
    */
    value: any;
    /**
     * Gets or sets name to use for the button.
    */
    name: string;
    /**
     * Gets or sets TabIndex to use for the checkbox.
    */
    tabIndex: number;
    /**
     * Gets or sets if the checkbox is Focused.
    */
    focused: boolean;
    /**
     * Gets or sets if the button show use styling to show focus.
    */
    isFocusStyleEnabled: boolean;
    /**
     * Gets or sets the value of the aria-label attribute.
    */
    ariaLabel: string;
    /**
     * Gets or sets whether to disable the ripple effect for the button.
    */
    disableRipple: boolean;
    /**
     * Gets whether to actually disable the ripple effect for the button.
    */
    actualDisableRipple: boolean;
    /**
     * Gets or sets whether the checkbox is checked.
    */
    isHover: boolean;
    /**
     * Gets or sets whether the checkbox is disabled.
    */
    disabled: boolean;
    /**
     * Gets or sets whether the checkbox transitions are disabled.
    */
    disableTransitions: boolean;
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected readonly hasUserValues: Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    onDetachedFromUI(): void;
    onAttachedToUI(): void;
    /**
     * Exports visual information about the current state of the grid.
    
    */
    exportVisualModel(): any;
    /**
     * Returns a serialized copy of the exported visual model
    
    */
    exportSerializedVisualModel(): string;
    private _clicked;
    private _clicked_wrapped;
    clicked: (s: IgrButton, e: IgrButtonClickEventArgs) => void;
}
export interface IIgrButtonProps {
    /**
 * Gets or sets the min width to use for the button.
*/
    minWidth?: number | string;
    /**
     * Gets or sets the min height to use for the button.
    */
    minHeight?: number | string;
    /**
     * Gets or sets the display style to use for the button.
    */
    displayType?: ButtonDisplayStyle | string;
    /**
     * Gets or sets the display density to use for the button.
    */
    density?: ControlDisplayDensity | string;
    /**
     * Gets or sets the base built in theme to use for the button.
    */
    baseTheme?: BaseControlTheme | string;
    /**
     * Gets the actual display density to use for the label.
    */
    actualDensity?: ControlDisplayDensity | string;
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    actualBorderColor?: string;
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    actualUmbraShadowColor?: string;
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    actualPenumbraShadowColor?: string;
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    actualAmbientShadowColor?: string;
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    actualRestingElevation?: number | string;
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    actualFocusElevation?: number | string;
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    actualHoverElevation?: number | string;
    /**
     * Gets or sets the color to use for the ripple when the button is pressed.
    */
    actualRippleColor?: string;
    actualCornerRadiusBottomRight?: number | string;
    actualCornerRadiusBottomLeft?: number | string;
    actualCornerRadiusTopLeft?: number | string;
    actualCornerRadiusTopRight?: number | string;
    /**
     * Gets the color to use for the actual background.
    */
    actualBackgroundColor?: string;
    /**
     * Gets the actual color to use for the disabled background of the button.
    */
    actualDisabledBackgroundColor?: string;
    /**
     * Gets the actual color to use for the disabled border of the button.
    */
    actualDisabledBorderColor?: string;
    /**
     * Gets the actual color to use for the disabled text of the button.
    */
    actualDisabledTextColor?: string;
    /**
     * Gets the actual disabled elevation to use for the button.
    */
    actualDisabledElevation?: number | string;
    /**
     * Gets the actual disabled elevation to use for the button.
    */
    actualElevationMode?: ElevationMode | string;
    /**
     * Gets the color to use for the actual background.
    */
    actualTextColor?: string;
    /**
     * Gets the color to use for the actual background.
    */
    actualHoverTextColor?: string;
    /**
     * Gets the color to use for the actual background.
    */
    actualFocusBackgroundColor?: string;
    /**
     * Gets the actual color to use for the focused text.
    */
    actualFocusTextColor?: string;
    /**
     * Gets the hover color to use for the actual background.
    */
    actualHoverBackgroundColor?: string;
    /**
     * Gets or sets the Width to use for the check mark when the checkbox is checked.
    */
    actualBorderWidth?: number | string;
    /**
     * Gets or sets the color to use for the background of the button when the  type is raised.
    */
    raisedBackgroundColor?: string;
    /**
     * Gets or sets the color to use for the disabled background of the button when the type is raised.
    */
    raisedDisabledBackgroundColor?: string;
    /**
     * Gets or sets the color to use for the disabled border of the button when the type is raised.
    */
    raisedDisabledBorderColor?: string;
    /**
     * Gets or sets the color to use for the disabled text of the button when the type is raised.
    */
    raisedDisabledTextColor?: string;
    /**
     * Gets or sets the disabled elevation to use for the button when the type is raised.
    */
    raisedDisabledElevation?: number | string;
    /**
     * Gets or sets the hover color to use for the background of the button when the  type is raised.
    */
    raisedHoverBackgroundColor?: string;
    /**
     * Gets or sets the border color to use for the button when the type is raised.
    */
    raisedBorderColor?: string;
    /**
     * Gets or sets the elevation to use for the button when the type is raised.
    */
    raisedRestingElevation?: number | string;
    /**
     * Gets or sets the hover elevation to use for the button when the type is raised.
    */
    raisedHoverElevation?: number | string;
    /**
     * Gets or sets the focus elevation to use for the button when the type is raised.
    */
    raisedFocusElevation?: number | string;
    /**
     * Gets or sets the width to use for the button border when the type is raised.
    */
    raisedBorderWidth?: number | string;
    raisedCornerRadiusBottomRight?: number | string;
    raisedCornerRadiusBottomLeft?: number | string;
    raisedCornerRadiusTopLeft?: number | string;
    raisedCornerRadiusTopRight?: number | string;
    /**
     * Gets or sets the color to use for the background when the button is pressed and the type is floating action button.
    */
    raisedRippleColor?: string;
    /**
     * Gets or sets the color to use for the background of the button when the type is flat.
    */
    flatBackgroundColor?: string;
    /**
     * Gets or sets the color to use for the disabled background of the button when the type is flat.
    */
    flatDisabledBackgroundColor?: string;
    /**
     * Gets or sets the color to use for the disabled border of the button when the type is flat.
    */
    flatDisabledBorderColor?: string;
    /**
     * Gets or sets the color to use for the disabled text of the button when the type is flat.
    */
    flatDisabledTextColor?: string;
    /**
     * Gets or sets the disabled elevation to use for the button when the type is flat.
    */
    flatDisabledElevation?: number | string;
    /**
     * Gets or sets the hover color to use for the background of the button when the type is flat.
    */
    flatHoverBackgroundColor?: string;
    /**
     * Gets or sets the border color to use for the button when the type is flat.
    */
    flatBorderColor?: string;
    /**
     * Gets or sets the elevation to use for the button when the type is flat.
    */
    flatRestingElevation?: number | string;
    /**
     * Gets or sets the hover elevation to use for the button when the type is flat.
    */
    flatHoverElevation?: number | string;
    /**
     * Gets or sets the focus elevation to use for the button when the type is flat.
    */
    flatFocusElevation?: number | string;
    /**
     * Gets or sets the color to use for the background when the button is pressed and the type is floating action button.
    */
    flatRippleColor?: string;
    /**
     * Gets or sets the color to use for the text of the button when type is flat.
    */
    flatTextColor?: string;
    /**
     * Gets or sets the color to use for the hovered text of the button when type is flat.
    */
    flatHoverTextColor?: string;
    /**
     * Gets or sets the color to use for the backround the button when it is focused and flat.
    */
    flatFocusBackgroundColor?: string;
    /**
     * Gets or sets the color to use for the text the button when it is focused and flat.
    */
    flatFocusTextColor?: string;
    /**
     * Gets or sets the width to use for the button border when the type is flat.
    */
    flatBorderWidth?: number | string;
    flatCornerRadiusBottomRight?: number | string;
    flatCornerRadiusBottomLeft?: number | string;
    flatCornerRadiusTopLeft?: number | string;
    flatCornerRadiusTopRight?: number | string;
    /**
     * Gets or sets the color to use for the background when the button regardless of type.
    */
    backgroundColor?: string;
    /**
     * Gets or sets the color to use for the disabled background of the button when the type is disabled.
    */
    disabledBackgroundColor?: string;
    /**
     * Gets or sets the color to use for the disabled border of the button when the type is raised.
    */
    disabledBorderColor?: string;
    /**
     * Gets or sets the color to use for the disabled text of the button when the type is raised.
    */
    disabledTextColor?: string;
    /**
     * Gets or sets the disabled elevation to use for the button when the type is raised.
    */
    disabledElevation?: number | string;
    /**
     * Gets or sets the disabled elevation to use for the button when the type is raised.
    */
    elevationMode?: ElevationMode | string;
    /**
     * Gets or sets the hover color to use for the background of the button when the  type is hovered.
    */
    hoverBackgroundColor?: string;
    /**
     * Gets or sets the border color to use for the button regardless of type.
    */
    borderColor?: string;
    /**
     * Gets or sets the elevation to use for the button regardless of type.
    */
    restingElevation?: number | string;
    /**
     * Gets or sets the hover elevation to use for the button regardless of type.
    */
    hoverElevation?: number | string;
    /**
     * Gets or sets the focus elevation to use for the button regardless of type.
    */
    focusElevation?: number | string;
    /**
     * Gets or sets the use for the button.
    */
    textStyle?: string;
    /**
     * Gets or sets the color to use for the text of the button regardless of type.
    */
    textColor?: string;
    /**
     * Gets or sets the color to use for the hovered text of the button regardless of type.
    */
    hoverTextColor?: string;
    /**
     * Gets or sets the color to use for the background of the button regardless of type.
    */
    rippleColor?: string;
    /**
     * Gets or sets the color to use for the text of the button when type is raised.
    */
    raisedTextColor?: string;
    /**
     * Gets or sets the color to use for the hovered text of the button when type is raised.
    */
    raisedHoverTextColor?: string;
    /**
     * Gets or sets the color to use for the backround the button when it is focused and raised.
    */
    raisedFocusBackgroundColor?: string;
    /**
     * Gets or sets the color to use for the text the button when it is focused and raised.
    */
    raisedFocusTextColor?: string;
    /**
     * Gets or sets the color to use for the backround the button when it is focused.
    */
    focusBackgroundColor?: string;
    /**
     * Gets or sets the color to use for the text of the button when it is focused.
    */
    focusTextColor?: string;
    /**
     * Gets or sets the width to use for the button border regardless of type.
    */
    borderWidth?: number | string;
    cornerRadiusBottomRight?: number | string;
    cornerRadiusBottomLeft?: number | string;
    cornerRadiusTopLeft?: number | string;
    cornerRadiusTopRight?: number | string;
    /**
     * Gets or sets the color to use for the background of the button when the  type is outlined.
    */
    outlinedBackgroundColor?: string;
    /**
     * Gets or sets the color to use for the disabled background of the button when the type is outlined.
    */
    outlinedDisabledBackgroundColor?: string;
    /**
     * Gets or sets the color to use for the disabled border of the button when the type is outlined.
    */
    outlinedDisabledBorderColor?: string;
    /**
     * Gets or sets the color to use for the disabled text of the button when the type is outlined.
    */
    outlinedDisabledTextColor?: string;
    /**
     * Gets or sets the disabled elevation to use for the button when the type is outlined.
    */
    outlinedDisabledElevation?: number | string;
    /**
     * Gets or sets the hover color to use for the background of the button when the  type is hoveredOutlined.
    */
    outlinedHoverBackgroundColor?: string;
    /**
     * Gets or sets the border color to use for the button when the type is outlined.
    */
    outlinedBorderColor?: string;
    /**
     * Gets or sets the elevation to use for the button when the type is outlined.
    */
    outlinedRestingElevation?: number | string;
    /**
     * Gets or sets the hover elevation to use for the button when the type is outlined.
    */
    outlinedHoverElevation?: number | string;
    /**
     * Gets or sets the focus elevation to use for the button when the type is outlined.
    */
    outlinedFocusElevation?: number | string;
    /**
     * Gets or sets the width to use for the button border when the type is outlined.
    */
    outlinedBorderWidth?: number | string;
    outlinedCornerRadiusBottomRight?: number | string;
    outlinedCornerRadiusBottomLeft?: number | string;
    outlinedCornerRadiusTopLeft?: number | string;
    outlinedCornerRadiusTopRight?: number | string;
    /**
     * Gets or sets the color to use for the background when the button is pressed and the type is floating action button.
    */
    outlinedRippleColor?: string;
    /**
     * Gets or sets the color to use for the text of the button when type is outlined.
    */
    outlinedTextColor?: string;
    /**
     * Gets or sets the color to use for the hovered text of the button when type is outlined.
    */
    outlinedHoverTextColor?: string;
    /**
     * Gets or sets the color to use for the backround the button when it is focused and outlined.
    */
    outlinedFocusBackgroundColor?: string;
    /**
     * Gets or sets the color to use for the text the button when it is focused and outlined.
    */
    outlinedFocusTextColor?: string;
    /**
     * Gets or sets the color to use for the background of the button when the  type is floating action button.
    */
    fabBackgroundColor?: string;
    /**
     * Gets or sets the color to use for the disabled background of the button when the type is fab.
    */
    fabDisabledBackgroundColor?: string;
    /**
     * Gets or sets the color to use for the disabled border of the button when the type is fab.
    */
    fabDisabledBorderColor?: string;
    /**
     * Gets or sets the color to use for the disabled text of the button when the type is fab.
    */
    fabDisabledTextColor?: string;
    /**
     * Gets or sets the disabled elevation to use for the button when the type is fab.
    */
    fabDisabledElevation?: number | string;
    /**
     * Gets or sets the hover color to use for the background of the button when the  type is hoveredFab.
    */
    fabHoverBackgroundColor?: string;
    /**
     * Gets or sets the border color to use for the button when the type is floating action button.
    */
    fabBorderColor?: string;
    /**
     * Gets or sets the elevation to use for the button when the type is floating action button.
    */
    fabRestingElevation?: number | string;
    /**
     * Gets or sets the hover elevation to use for the button when the type is floating action button.
    */
    fabHoverElevation?: number | string;
    /**
     * Gets or sets the focus elevation to use for the button when the type is floating action button.
    */
    fabFocusElevation?: number | string;
    /**
     * Gets or sets the width to use for the button border when the type is floating action button.
    */
    fabBorderWidth?: number | string;
    fabCornerRadiusBottomRight?: number | string;
    fabCornerRadiusBottomLeft?: number | string;
    fabCornerRadiusTopLeft?: number | string;
    fabCornerRadiusTopRight?: number | string;
    /**
     * Gets or sets the color to use for the background when the button is pressed and the type is floating action button.
    */
    fabRippleColor?: string;
    /**
     * Gets or sets the color to use for the text of the button when type is floating action button.
    */
    fabTextColor?: string;
    /**
     * Gets or sets the color to use for the hovered text of the button when type is floating action button.
    */
    fabHoverTextColor?: string;
    /**
     * Gets or sets the color to use for the backround the button when it is focused and fab.
    */
    fabFocusBackgroundColor?: string;
    /**
     * Gets or sets the color to use for the text the button when it is focused and fab.
    */
    fabFocusTextColor?: string;
    /**
     * Gets or sets the color to use for the background of the button when the  type is icon.
    */
    iconBackgroundColor?: string;
    /**
     * Gets or sets the color to use for the disabled background of the button when the type is icon.
    */
    iconDisabledBackgroundColor?: string;
    /**
     * Gets or sets the color to use for the disabled border of the button when the type is icon.
    */
    iconDisabledBorderColor?: string;
    /**
     * Gets or sets the color to use for the disabled text of the button when the type is icon.
    */
    iconDisabledTextColor?: string;
    /**
     * Gets or sets the disabled elevation to use for the button when the type is icon.
    */
    iconDisabledElevation?: number | string;
    /**
     * Gets or sets the hover color to use for the background of the button when the  type is hoveredIcon.
    */
    iconHoverBackgroundColor?: string;
    /**
     * Gets or sets the border color to use for the button when the type is icon.
    */
    iconBorderColor?: string;
    /**
     * Gets or sets the elevation to use for the button when the type is icon.
    */
    iconRestingElevation?: number | string;
    /**
     * Gets or sets the hover elevation to use for the button when the type is icon.
    */
    iconHoverElevation?: number | string;
    /**
     * Gets or sets the focus elevation to use for the button when the type is icon.
    */
    iconFocusElevation?: number | string;
    /**
     * Gets or sets the width to use for the button border when the type is icon.
    */
    iconBorderWidth?: number | string;
    iconCornerRadiusBottomRight?: number | string;
    iconCornerRadiusBottomLeft?: number | string;
    iconCornerRadiusTopLeft?: number | string;
    iconCornerRadiusTopRight?: number | string;
    /**
     * Gets or sets the color to use for the background when the button is pressed and the type is floating action button.
    */
    iconRippleColor?: string;
    /**
     * Gets or sets the color to use for the text of the button when type is icon.
    */
    iconTextColor?: string;
    /**
     * Gets or sets the color to use for the hovered text of the button when type is icon.
    */
    iconHoverTextColor?: string;
    /**
     * Gets or sets the color to use for the backround the button when it is focused and icon.
    */
    iconFocusBackgroundColor?: string;
    /**
     * Gets or sets the color to use for the text the button when it is focused and icon.
    */
    iconFocusTextColor?: string;
    /**
     * Gets or sets the id to use for the internal native checkbox.
    */
    inputId?: string;
    /**
     * Gets or sets the id to use for the checkbox.
    */
    id?: string;
    /**
     * Gets or sets the id to use for the checkbox.
    */
    display?: string;
    /**
     * Gets or sets the id to use for the checkbox.
    */
    flexDirection?: string;
    /**
     * Gets or sets the flex-grow setting for the button.
    */
    flexGrow?: string;
    /**
     * Gets or sets the id to use for the checkbox.
    */
    alignItems?: string;
    /**
     * Gets or sets value to use for the checkbox.
    */
    value?: any;
    /**
     * Gets or sets name to use for the button.
    */
    name?: string;
    /**
     * Gets or sets TabIndex to use for the checkbox.
    */
    tabIndex?: number | string;
    /**
     * Gets or sets if the checkbox is Focused.
    */
    focused?: boolean | string;
    /**
     * Gets or sets if the button show use styling to show focus.
    */
    isFocusStyleEnabled?: boolean | string;
    /**
     * Gets or sets the value of the aria-label attribute.
    */
    ariaLabel?: string;
    /**
     * Gets or sets whether to disable the ripple effect for the button.
    */
    disableRipple?: boolean | string;
    /**
     * Gets whether to actually disable the ripple effect for the button.
    */
    actualDisableRipple?: boolean | string;
    /**
     * Gets or sets whether the checkbox is checked.
    */
    isHover?: boolean | string;
    /**
     * Gets or sets whether the checkbox is disabled.
    */
    disabled?: boolean | string;
    /**
     * Gets or sets whether the checkbox transitions are disabled.
    */
    disableTransitions?: boolean | string;
    clicked?: (s: IgrButton, e: IgrButtonClickEventArgs) => void;
}
