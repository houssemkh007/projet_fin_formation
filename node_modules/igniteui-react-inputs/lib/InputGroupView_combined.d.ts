import { Base, Type, INotifyPropertyChanged, PropertyChangedEventArgs, EventArgs } from "igniteui-react-core";
import { DomRenderer } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { ControlDisplayDensity } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
import { AnimationKeyFrameEffect } from "igniteui-react-core";
import { AnimationKeyFrameEffectTiming } from "igniteui-react-core";
import { SuffixShiftType } from "./SuffixShiftType";
import { PrefixShiftType } from "./PrefixShiftType";
import { Brush } from "igniteui-react-core";
import { LabelShiftType } from "./LabelShiftType";
import { MouseButtonEventArgs } from "igniteui-react-core";
import { KeyEventArgs } from "igniteui-react-core";
import { InputShiftType } from "./InputShiftType";
import { SuffixVisualModelExport } from "./SuffixVisualModelExport";
import { PrefixVisualModelExport } from "./PrefixVisualModelExport";
import { InputGroupDisplayType } from "./InputGroupDisplayType";
import { BaseControlTheme } from "igniteui-react-core";
import { CornerRadius } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { ObservableCollection$1 } from "igniteui-react-core";
import { InputGroupVisualModelExport } from "./InputGroupVisualModelExport";
import { LabelVisualModelExport } from "./LabelVisualModelExport";
import { InputVisualModelExport } from "./InputVisualModelExport";
import { InputChangeEventArgs } from "./InputChangeEventArgs";
/**
 * @hidden
 */
export declare class InputGroupView extends Base {
    static $t: Type;
    constructor();
    d: InputGroup;
    ag(): void;
    g(): boolean;
    private l;
    private e;
    private i;
    readonly v: any;
    readonly ao: Path;
    readonly h: boolean;
    ad(a: DomRenderer): void;
    readonly u: any;
    readonly t: any;
    readonly w: any;
    readonly x: any;
    private y;
    am(a: string): void;
    al(): void;
    private z;
    ah(): void;
    j(): number;
    private f;
    private n;
    private o;
    private p;
    private s;
    private r;
    private q;
    private m;
    ac(): void;
    ae(): void;
    an(a: FontInfo): void;
    k(a: Label): number;
    ab(): void;
    a(a: AnimationKeyFrameEffectTiming): AnimationKeyFrameEffect;
    c(a: AnimationKeyFrameEffectTiming): AnimationKeyFrameEffect;
    b(a: AnimationKeyFrameEffectTiming): AnimationKeyFrameEffect;
    ak(a: Input): void;
    aa(a: any): void;
    aj(a: any): void;
    private af;
    private ai;
}
/**
 * @hidden
 */
export declare class SuffixView extends Base {
    static $t: Type;
    constructor();
    a: Suffix;
    o(): void;
    d(): boolean;
    private g;
    private b;
    private e;
    readonly r: Path;
    m(a: DomRenderer): void;
    q(): void;
    private f;
    p(): void;
    private i;
    private j;
    private c;
    private h;
    l(): void;
    n(): void;
    k(a: any): void;
}
/**
 * @hidden
 */
export declare class PrefixView extends Base {
    static $t: Type;
    constructor();
    a: Prefix;
    o(): void;
    d(): boolean;
    private g;
    private b;
    private e;
    readonly r: Path;
    m(a: DomRenderer): void;
    q(): void;
    private f;
    p(): void;
    private i;
    private j;
    private c;
    private h;
    l(): void;
    n(): void;
    k(a: any): void;
}
/**
 * @hidden
 */
export declare class LabelView extends Base {
    static $t: Type;
    constructor();
    b: Label;
    y(): void;
    e(): boolean;
    i: DomRenderer;
    private c;
    private g;
    readonly l: any;
    readonly ag: Path;
    readonly f: boolean;
    q(): void;
    a(a: AnimationKeyFrameEffectTiming): AnimationKeyFrameEffect;
    t(a: DomRenderer): void;
    ac(): void;
    ad(): void;
    ab(): void;
    private m;
    ae(a: string): void;
    v(): void;
    r(): void;
    w(): void;
    x(): void;
    private n;
    z(): void;
    h(): number;
    private o;
    private p;
    private d;
    private j;
    private k;
    s(): void;
    u(): void;
    af(a: FontInfo): void;
    aa(a: Brush): void;
}
/**
 * @hidden
 */
export declare class InputView extends Base {
    static $t: Type;
    constructor();
    b: Input;
    an(): void;
    f(): boolean;
    j: DomRenderer;
    private c;
    private h;
    readonly o: any;
    readonly a2: Path;
    readonly g: boolean;
    ak(a: DomRenderer): void;
    at(a: boolean): void;
    e: boolean;
    private y;
    private x;
    ar(): void;
    ap(): void;
    ay(): void;
    ax(): void;
    private i;
    as(a: string): void;
    private u;
    private ab;
    private af;
    private ag;
    private a1;
    private v;
    private w;
    private ac;
    private ae;
    private ad;
    private ah;
    private z;
    private aa;
    private p;
    az(a: string): void;
    q(): string;
    private r;
    n(): number;
    m(): number;
    aw(a: number): void;
    au(a: number): void;
    ao(): void;
    private s;
    private t;
    private d;
    private k;
    private l;
    aj(): void;
    al(): void;
    a0(a: FontInfo): void;
    am(): void;
    aq(): void;
    av(a: number, b: number): void;
    ai(): void;
    a(a: AnimationKeyFrameEffectTiming): AnimationKeyFrameEffect;
}
/**
 * @hidden
 */
export declare abstract class InputGroupItem extends Base implements INotifyPropertyChanged {
    static $t: Type;
    private c;
    e: string;
    private a;
    b: InputGroup;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    protected g(a: string, b: any, c: any): void;
    protected h(a: string, b: any, c: any): void;
}
/**
 * @hidden
 */
export declare class Suffix extends InputGroupItem {
    static $t: Type;
    constructor();
    private _view;
    view: SuffixView;
    destroy(): void;
    private j;
    k: SuffixShiftType;
    protected h(a: string, b: any, c: any): void;
    private al;
    private ai;
    private ap;
    private ao;
    aj(): void;
    ak(): void;
    private static s;
    private v;
    z: string;
    private u;
    w: string;
    private n;
    q: boolean;
    private m;
    private o;
    disabled: boolean;
    am(): void;
    onDetachedFromUI(): void;
    onAttachedToUI(): void;
    protected r(): boolean;
    t(): any;
    y(): string;
    i(): SuffixVisualModelExport;
    appendContentChild(a: any): void;
    provideContainer(a: DomRenderer): void;
}
/**
 * @hidden
 */
export declare class Prefix extends InputGroupItem {
    static $t: Type;
    constructor();
    private _view;
    view: PrefixView;
    destroy(): void;
    private j;
    k: PrefixShiftType;
    protected h(a: string, b: any, c: any): void;
    private al;
    private ai;
    private ap;
    private ao;
    aj(): void;
    ak(): void;
    private static s;
    private v;
    z: string;
    private u;
    w: string;
    private n;
    q: boolean;
    private m;
    private o;
    disabled: boolean;
    am(): void;
    onDetachedFromUI(): void;
    onAttachedToUI(): void;
    protected r(): boolean;
    t(): any;
    y(): string;
    i(): PrefixVisualModelExport;
    appendContentChild(a: any): void;
    provideContainer(a: DomRenderer): void;
}
/**
 * @hidden
 */
export declare class InputGroup extends Base implements INotifyPropertyChanged {
    static $t: Type;
    constructor();
    private ly;
    appendContentChild(a: any): void;
    mi(a: any): void;
    private j;
    k: InputGroupDisplayType;
    private f;
    h: ControlDisplayDensity;
    private e;
    g: ControlDisplayDensity;
    private l3;
    private l4;
    private l2;
    private l5;
    private ad;
    private lx;
    private b;
    d: BaseControlTheme;
    private _view;
    view: InputGroupView;
    destroy(): void;
    protected md(a: string, b: any, c: any): void;
    protected mg(a: string, b: any, c: any): void;
    static m2(a: CornerRadius, b: CornerRadius): CornerRadius;
    static ti(a: Thickness, b: Thickness): Thickness;
    private mp;
    private mq;
    private mo;
    private mr;
    private mn;
    private mm;
    private q;
    private o;
    private readonly a;
    onChildrenMutated(): void;
    private l1;
    readonly af: boolean;
    mc(): void;
    lostFocus: (sender: any, e: EventArgs) => void;
    gotFocus: (sender: any, e: EventArgs) => void;
    static c: BaseControlTheme;
    static fu: number;
    static f5: number;
    static nf: CornerRadius;
    static tv: Thickness;
    static rd: Brush;
    static ru: Brush;
    private static rv;
    static gx: number;
    static gw: number;
    static f9: number;
    static se: Brush;
    static sf: Brush;
    static rx: Brush;
    static rw: Brush;
    static gu: number;
    static f8: number;
    static f6: number;
    static f7: number;
    static gv: number;
    static rc: Brush;
    private static ga;
    private static gb;
    private static ng;
    private static tw;
    private static rz;
    private static r0;
    private static r1;
    private static gj;
    private static gi;
    private static gf;
    private static r4;
    private static r5;
    private static r3;
    private static r2;
    private static gg;
    private static ge;
    private static gc;
    private static gd;
    private static gh;
    private static ry;
    private static fv;
    private static fw;
    private static ne;
    private static tu;
    private static rn;
    private static ro;
    private static rp;
    private static f4;
    private static f3;
    private static f0;
    private static rs;
    private static rt;
    private static rr;
    private static rq;
    private static f1;
    private static fz;
    private static fx;
    private static fy;
    private static f2;
    private static rm;
    private static fk;
    private static fl;
    private static nd;
    private static tt;
    private static rf;
    private static rg;
    private static rh;
    private static ft;
    private static fs;
    private static fp;
    private static rk;
    private static rl;
    private static rj;
    private static ri;
    private static fq;
    private static fo;
    private static fm;
    private static fn;
    private static fr;
    private static re;
    static gk: number;
    static gl: number;
    static nh: CornerRadius;
    static tx: Thickness;
    static r7: Brush;
    static r8: Brush;
    private static r9;
    static gt: number;
    static gs: number;
    static gp: number;
    static sc: Brush;
    static sd: Brush;
    static sb: Brush;
    static sa: Brush;
    static gq: number;
    static go: number;
    static gm: number;
    static gn: number;
    static gr: number;
    static r6: Brush;
    static d1: number;
    static ec: number;
    static m9: CornerRadius;
    static tp: Thickness;
    static px: Brush;
    static qe: Brush;
    private static qf;
    static e4: number;
    static e3: number;
    static eg: number;
    static qy: Brush;
    static qz: Brush;
    static qh: Brush;
    static qg: Brush;
    static e1: number;
    static ef: number;
    static ed: number;
    static ee: number;
    static e2: number;
    static pw: Brush;
    private static eh;
    private static ei;
    private static na;
    private static tq;
    private static qj;
    private static qk;
    private static ql;
    private static eq;
    private static ep;
    private static em;
    private static qo;
    private static qp;
    private static qn;
    private static qm;
    private static en;
    private static el;
    private static ej;
    private static ek;
    private static eo;
    private static qi;
    private static d2;
    private static d3;
    private static m8;
    private static to;
    private static p7;
    private static p8;
    private static p9;
    private static eb;
    private static ea;
    private static d7;
    private static qc;
    private static qd;
    private static qb;
    private static qa;
    private static d8;
    private static d6;
    private static d4;
    private static d5;
    private static d9;
    private static p6;
    private static dr;
    private static ds;
    private static m7;
    private static tn;
    private static pz;
    private static p0;
    private static p1;
    private static d0;
    private static dz;
    private static dw;
    private static p4;
    private static p5;
    private static p3;
    private static p2;
    private static dx;
    private static dv;
    private static dt;
    private static du;
    private static dy;
    private static py;
    static er: number;
    static es: number;
    static nb: CornerRadius;
    static tr: Thickness;
    static qr: Brush;
    static qs: Brush;
    private static qt;
    static e0: number;
    static ez: number;
    static ew: number;
    static qw: Brush;
    static qx: Brush;
    static qv: Brush;
    static qu: Brush;
    static ex: number;
    static ev: number;
    static et: number;
    static eu: number;
    static ey: number;
    static qq: Brush;
    private df;
    private e5;
    private m6;
    private tm;
    private pf;
    private q0;
    private q1;
    private hb;
    private ha;
    private e9;
    private so;
    private sp;
    private q3;
    private q2;
    private g8;
    private e8;
    private e6;
    private e7;
    private g9;
    private pe;
    private fa;
    private fb;
    private nc;
    private ts;
    private q5;
    private q6;
    private q7;
    private fj;
    private fi;
    private ff;
    private ra;
    private rb;
    private q9;
    private q8;
    private fg;
    private fe;
    private fc;
    private fd;
    private fh;
    private q4;
    private dg;
    private dh;
    private m5;
    private tl;
    private pp;
    private pq;
    private pr;
    private dq;
    private dp;
    private dl;
    private pu;
    private pv;
    private pt;
    private ps;
    private dm;
    private dk;
    private di;
    private dj;
    private dn;
    private po;
    private c5;
    private c6;
    private m4;
    private tk;
    private ph;
    private pi;
    private pj;
    private de;
    private dd;
    private da;
    private pm;
    private pn;
    private pl;
    private pk;
    private db;
    private c9;
    private c7;
    private c8;
    private dc;
    private pg;
    private gy;
    private gz;
    private ni;
    private ty;
    private sh;
    private si;
    private sj;
    private g7;
    private g6;
    private g3;
    private sm;
    private sn;
    private sl;
    private sk;
    private g4;
    private g2;
    private g0;
    private g1;
    private g5;
    private sg;
    private ml;
    l6(): void;
    mb(): void;
    ma(): void;
    ms(): void;
    private mf;
    private nm;
    os: Brush;
    private nn;
    ot: Brush;
    private am;
    ca: number;
    private an;
    cb: number;
    private mt;
    mz: CornerRadius;
    private s9;
    tf: Thickness;
    private av;
    cj: number;
    private au;
    ci: number;
    private ar;
    cf: number;
    private nq;
    ow: Brush;
    private nr;
    ox: Brush;
    private np;
    ov: Brush;
    private no;
    ou: Brush;
    private as;
    cg: number;
    private aq;
    ce: number;
    private ao;
    cc: number;
    private ap;
    cd: number;
    private at;
    ch: number;
    private nl;
    or: Brush;
    private a6;
    cu: number;
    private bh;
    hc: number;
    private nt;
    oz: Brush;
    private mw;
    m3: CornerRadius;
    private tc;
    tj: Thickness;
    private b9;
    h4: number;
    private b8;
    h3: number;
    private bl;
    hg: number;
    private op;
    s7: Brush;
    private oq;
    s8: Brush;
    private oa;
    ss: Brush;
    private n9;
    sr: Brush;
    private b6;
    h1: number;
    private bk;
    hf: number;
    private bi;
    hd: number;
    private bj;
    he: number;
    private b7;
    h2: number;
    private ns;
    oy: Brush;
    private bm;
    hh: number;
    private bn;
    hi: number;
    private od;
    sv: Brush;
    private oc;
    su: Brush;
    private mx;
    nj: CornerRadius;
    private td;
    tz: Thickness;
    private bv;
    hq: number;
    private bu;
    hp: number;
    private br;
    hm: number;
    private og;
    sy: Brush;
    private oh;
    sz: Brush;
    private of;
    sx: Brush;
    private oe;
    sw: Brush;
    private bs;
    hn: number;
    private bq;
    hl: number;
    private bo;
    hj: number;
    private bp;
    hk: number;
    private bt;
    ho: number;
    private ob;
    st: Brush;
    private a7;
    cv: number;
    private a8;
    cw: number;
    private n3;
    o9: Brush;
    private n2;
    o8: Brush;
    private mv;
    m1: CornerRadius;
    private tb;
    th: Thickness;
    private bg;
    c4: number;
    private bf;
    c3: number;
    private bc;
    c0: number;
    private n6;
    pc: Brush;
    private n7;
    pd: Brush;
    private n5;
    pb: Brush;
    private n4;
    pa: Brush;
    private bd;
    c1: number;
    private bb;
    cz: number;
    private a9;
    cx: number;
    private ba;
    cy: number;
    private be;
    c2: number;
    private n1;
    o7: Brush;
    private aw;
    ck: number;
    private ax;
    cl: number;
    private nw;
    o2: Brush;
    private nv;
    o1: Brush;
    private mu;
    m0: CornerRadius;
    private ta;
    tg: Thickness;
    private a5;
    ct: number;
    private a4;
    cs: number;
    private a1;
    cp: number;
    private nz;
    o5: Brush;
    private n0;
    o6: Brush;
    private ny;
    o4: Brush;
    private nx;
    o3: Brush;
    private a2;
    cq: number;
    private a0;
    co: number;
    private ay;
    cm: number;
    private az;
    cn: number;
    private a3;
    cr: number;
    private nu;
    o0: Brush;
    private bw;
    hr: number;
    private bx;
    hs: number;
    private ok;
    s2: Brush;
    private oj;
    s1: Brush;
    private my;
    nk: CornerRadius;
    private te;
    t0: Thickness;
    private b5;
    h0: number;
    private b4;
    hz: number;
    private b1;
    hw: number;
    private on;
    s5: Brush;
    private oo;
    s6: Brush;
    private om;
    s4: Brush;
    private ol;
    s3: Brush;
    private b2;
    hx: number;
    private b0;
    hv: number;
    private by;
    ht: number;
    private bz;
    hu: number;
    private b3;
    hy: number;
    private oi;
    s0: Brush;
    private x;
    private t;
    ah: boolean;
    mj(): void;
    private z;
    private v;
    aj: boolean;
    private y;
    private u;
    ai: boolean;
    private r;
    ac: boolean;
    private n8;
    sq: Brush;
    private static h8;
    private ib;
    ki: string;
    private w;
    disabled: boolean;
    me(): void;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    onDetachedFromUI(): void;
    onAttachedToUI(): void;
    protected ak(): boolean;
    ia(): any;
    j9(): string;
    i(): InputGroupVisualModelExport;
    provideContainer(a: DomRenderer): void;
    private l;
    private p;
    private ab;
    private s;
    private aa;
    readonly inputs: InputGroupInputCollection;
    private h9;
    private readonly h7;
    private mk;
    private readonly ae;
    private readonly al;
}
/**
 * @hidden
 */
export declare class InputGroupInputCollection extends ObservableCollection$1<InputGroupItem> {
    static $t: Type;
    constructor();
    collectionResetting: (sender: any, e: EventArgs) => void;
    protected p(): void;
}
/**
 * @hidden
 */
export declare class Label extends InputGroupItem {
    static $t: Type;
    constructor();
    private j;
    l: BaseControlTheme;
    private _view;
    view: LabelView;
    destroy(): void;
    private readonly i;
    private aa;
    private z;
    private b5;
    private cf;
    private b6;
    protected h(a: string, b: any, c: any): void;
    private cd;
    private ca;
    private b9;
    private ck;
    private cj;
    static c7: Brush;
    private static c4;
    private static c6;
    private static c5;
    static c0: Brush;
    private static cx;
    private static cz;
    private static cy;
    private static k;
    private static c8;
    private static c1;
    private static c3;
    private static c2;
    private ci;
    private static x;
    private n;
    p: ControlDisplayDensity;
    private m;
    o: ControlDisplayDensity;
    private co;
    cw: Brush;
    private cl;
    ct: Brush;
    private cm;
    cu: Brush;
    private cn;
    cv: Brush;
    private u;
    w: FontInfo;
    private cs;
    dc: Brush;
    private cp;
    c9: Brush;
    private cq;
    da: Brush;
    private r;
    s: LabelShiftType;
    private af;
    an: boolean;
    ch(a: boolean, b?: boolean): void;
    private ad;
    al: boolean;
    cb(): void;
    cc(): void;
    private v;
    y: FontInfo;
    private cr;
    db: Brush;
    private static at;
    private a1;
    br: string;
    private ax;
    bf: string;
    private ay;
    bi: string;
    private az;
    bk: string;
    private av;
    a9: string;
    private ar;
    private ab;
    readonly aj: boolean;
    as: number;
    private a0;
    bm: string;
    private aw;
    bb: string;
    private a2;
    text: string;
    private ae;
    am: boolean;
    private ai;
    aq: boolean;
    private ac;
    private ah;
    private ag;
    ap: boolean;
    disabled: boolean;
    ce(): void;
    onDetachedFromUI(): void;
    onAttachedToUI(): void;
    protected ao(): boolean;
    au(): any;
    bh(): string;
    q(): LabelVisualModelExport;
    provideContainer(a: DomRenderer): void;
}
/**
 * @hidden
 */
export declare class Input extends InputGroupItem {
    static $t: Type;
    private x;
    private a1;
    private a2;
    private t;
    private bi;
    private bc;
    private ae;
    private bd;
    private af;
    private am;
    constructor();
    private _view;
    view: InputView;
    destroy(): void;
    private q;
    r: InputShiftType;
    private k;
    m: ControlDisplayDensity;
    private j;
    l: ControlDisplayDensity;
    private bh;
    b5: string;
    private bk;
    b9: string;
    private ah;
    ap: boolean;
    protected h(a: string, b: any, c: any): void;
    private c5;
    private c7;
    private c6;
    private cv;
    private dh;
    private dg;
    private static dr;
    private static dq;
    private static ab;
    private dk;
    dp: Brush;
    private dj;
    dn: Brush;
    private y;
    aa: FontInfo;
    private dm;
    dt: Brush;
    cm(): void;
    cu(): void;
    keyDown: (sender: any, args: KeyEventArgs) => void;
    keyUp: (sender: any, args: KeyEventArgs) => void;
    keyPress: (sender: any, args: KeyEventArgs) => void;
    gotFocus: (sender: any, e: EventArgs) => void;
    lostFocus: (sender: any, e: EventArgs) => void;
    mouseDown: (sender: any, e: MouseButtonEventArgs) => void;
    mouseUp: (sender: any, e: MouseButtonEventArgs) => void;
    cx(a: KeyEventArgs): void;
    cz(a: KeyEventArgs): void;
    cy(a: KeyEventArgs): void;
    c0(a: MouseButtonEventArgs): void;
    c3(a: MouseButtonEventArgs): void;
    c4(): void;
    cs(): void;
    ct(): void;
    cn(): void;
    co(): void;
    cq(): void;
    cp(): void;
    c1(): void;
    c2(): void;
    private z;
    ac: FontInfo;
    private bg;
    b0: string;
    private bj;
    b7: string;
    private dl;
    ds: Brush;
    private static a9;
    private bf;
    bx: string;
    private a3;
    private ag;
    readonly an: boolean;
    a8: number;
    private be;
    bu: string;
    private bb;
    bq: string;
    private ak;
    ar: boolean;
    private bl;
    cf: string;
    readonly ao: boolean;
    private aj;
    private ai;
    disabled: boolean;
    c8(): void;
    onDetachedFromUI(): void;
    onAttachedToUI(): void;
    protected at(): boolean;
    ba(): any;
    bt(): string;
    n(): InputVisualModelExport;
    change: (sender: any, args: InputChangeEventArgs) => void;
    changing: (sender: any, args: InputChangeEventArgs) => void;
    compositionStart: (sender: any, e: EventArgs) => void;
    compositionEnd: (sender: any, e: EventArgs) => void;
    provideContainer(a: DomRenderer): void;
    ck(): void;
    db(): void;
    dd(a: number, b: number): void;
    private df;
    private de;
    private di;
    private ch;
    private a5;
    private a4;
    selectionStart: number;
    selectionEnd: number;
    private al;
    as: boolean;
    dc(a: boolean, b?: boolean): void;
    private cw;
    private ad;
    au: boolean;
    private cj;
    private readonly i;
    private c9;
}
