import { Base, Type, INotifyPropertyChanged, PropertyChangedEventArgs } from "igniteui-react-core";
import { DomRenderer } from "igniteui-react-core";
import { Ripple } from "./Ripple";
import { AnimationKeyFrameEffect } from "igniteui-react-core";
import { AnimationKeyFrameEffectTiming } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { BaseControlTheme } from "igniteui-react-core";
import { CheckboxLabelPosition } from "./CheckboxLabelPosition";
import { CheckboxChangeEventArgs } from "./CheckboxChangeEventArgs";
import { CheckboxVisualModelExport } from "./CheckboxVisualModelExport";
/**
 * @hidden
 */
export declare class CheckboxView extends Base {
    static $t: Type;
    constructor();
    c: Checkbox;
    ad(): void;
    i(): boolean;
    private l;
    private f;
    private j;
    ab(a: DomRenderer): void;
    private t;
    ag(): void;
    ae(): void;
    private u;
    private x;
    private w;
    private h;
    private v;
    y(): void;
    a(a: AnimationKeyFrameEffectTiming): AnimationKeyFrameEffect;
    b(a: AnimationKeyFrameEffectTiming): AnimationKeyFrameEffect;
    private z;
    private g;
    private q;
    private m;
    private p;
    readonly r: any;
    readonly e: Ripple;
    private n;
    readonly s: any;
    private d;
    private o;
    aa(): void;
    ac(): void;
    af(): void;
    ah(a: Brush, b: Brush): void;
    k(): number;
}
/**
 * @hidden
 */
export declare class Checkbox extends Base implements INotifyPropertyChanged {
    static $t: Type;
    constructor();
    private _view;
    view: CheckboxView;
    private b;
    d: BaseControlTheme;
    destroy(): void;
    protected cl(a: string, b: any, c: any): void;
    private cr;
    protected cn(a: string, b: any, c: any): void;
    private n;
    private cq;
    private ct;
    ab: boolean;
    private c3;
    dt: Brush;
    private cy;
    c8: Brush;
    private c0;
    da: Brush;
    private c2;
    ds: Brush;
    private cx;
    c7: Brush;
    private c4;
    du: Brush;
    private c1;
    db: Brush;
    private static dn;
    private static dk;
    private static as;
    private static dj;
    private static at;
    private static dl;
    private static au;
    private static dm;
    private static di;
    private static df;
    private static ap;
    private static de;
    private static aq;
    private static dg;
    private static ar;
    private static dh;
    private static c;
    private dr;
    private dd;
    private an;
    private dc;
    private ao;
    private dp;
    private av;
    private dq;
    private cu;
    private cz;
    c9: Brush;
    private cw;
    c6: Brush;
    private af;
    al: number;
    private ac;
    ai: number;
    private ag;
    am: number;
    private ah;
    aw: number;
    private ae;
    ak: number;
    private ad;
    aj: number;
    private cv;
    c5: Brush;
    private static a2;
    private a9;
    by: string;
    private static a1;
    private a8;
    bw: string;
    private ba;
    labelId: string;
    private a3;
    a5: any;
    private bb;
    b7: string;
    private ay;
    private o;
    readonly v: boolean;
    a0: number;
    private ax;
    az: number;
    private r;
    focused: boolean;
    private a7;
    bl: string;
    private a6;
    bk: string;
    change: (sender: any, args: CheckboxChangeEventArgs) => void;
    private g;
    h: CheckboxLabelPosition;
    private l;
    t: boolean;
    private p;
    checked: boolean;
    private s;
    indeterminate: boolean;
    private q;
    disabled: boolean;
    private m;
    u: boolean;
    cm(): void;
    private readonly a;
    private ch;
    toggle(): void;
    private cs;
    private j;
    private k;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    onDetachedFromUI(): void;
    onAttachedToUI(): void;
    onContentReady(): void;
    protected aa(): boolean;
    a4(): any;
    bv(): string;
    e(): CheckboxVisualModelExport;
    provideContainer(a: DomRenderer): void;
}
