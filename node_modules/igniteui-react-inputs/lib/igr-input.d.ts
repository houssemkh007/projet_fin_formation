import * as React from 'react';
import { Input } from "./Input";
import { IgrInputGroupItem, IIgrInputGroupItemProps } from './igr-input-group-item';
import { IgrInputChangeEventArgs } from './igr-input-change-event-args';
import { ControlDisplayDensity } from "igniteui-react-core";
import { IgrKeyEventArgs } from "igniteui-react-core";
export declare class IgrInput extends IgrInputGroupItem<IIgrInputProps> {
    private _container;
    private _initialized;
    private _elRef;
    private _portalManager;
    private _wrapper;
    private _getMainRef;
    render(): React.DetailedReactHTMLElement<{
        className: string;
        ref: (ref: any) => void;
        children: any[];
    }, any>;
    private requestRender;
    constructor(props: IIgrInputProps);
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    protected initializeProperties(): void;
    updateStyle(): void;
    componentWillUnmount(): void;
    componentDidMount(): void;
    initializeContent(): void;
    protected createImplementation(): Input;
    private _input;
    /**
                             * @hidden
                             */
    readonly i: Input;
    /**
 * Gets or sets the display density to use for the input.
*/
    density: ControlDisplayDensity;
    /**
     * Gets the actual display density to use for the label.
    */
    actualDensity: ControlDisplayDensity;
    /**
     * Gets/Sets the input mask for the input.
    */
    mask: string;
    /**
     * Gets/Sets the character representing a fillable spot in the input mask
    */
    promptChar: string;
    /**
     * Specifies if the bound value includes the formatting symbols.
    */
    includeLiterals: boolean;
    /**
     * Gets the actual color to use for the text color.
    */
    actualTextColor: string;
    /**
     * Gets the actual hover color to use for the text.
    */
    actualHoverTextColor: string;
    /**
     * Gets or sets the color to use for the text.
    */
    textColor: string;
    /**
     * Gets or sets the use for the button.
    */
    textStyle: string;
    /**
     * Gets or sets the type to use for the input.
    */
    inputType: string;
    /**
     * Gets or sets the placeholder to use for the input.
    */
    placeholder: string;
    /**
     * Gets or sets the color to use for the hovered text of the button regardless of type.
    */
    hoverTextColor: string;
    /**
     * Gets or sets the id to use for the checkbox.
    */
    id: string;
    /**
     * Gets or sets TabIndex to use for the checkbox.
    */
    tabIndex: number;
    /**
     * Gets or sets the for attribute to use for the input.
    */
    for: string;
    /**
     * Gets or sets the value of the aria-label attribute.
    */
    ariaLabel: string;
    /**
     * Gets or sets whether the input is hovered.
    */
    isHover: boolean;
    /**
     * Gets or sets the value for the input.
    */
    value: string;
    readonly hasValue: boolean;
    /**
     * Gets or sets whether the checkbox is disabled.
    */
    disabled: boolean;
    /**
     * Returns / Sets the beginning index of the selected text. When nothing is selected, this returns the position of the text input cursor (caret) inside of the input.
    */
    selectionStart: number;
    /**
     * Returns / Sets the end index of the selected text. When nothing is selected, this returns the position of the text input cursor (caret) inside of the input.
    */
    selectionEnd: number;
    onDetachedFromUI(): void;
    onAttachedToUI(): void;
    /**
     * Exports visual information about the current state of the grid.
    
    */
    exportVisualModel(): any;
    /**
     * Returns a serialized copy of the exported visual model
    
    */
    exportSerializedVisualModel(): string;
    focus(): void;
    select(): void;
    setSelectionRange(selectionStart: number, selectionEnd: number): void;
    private _keyDown;
    private _keyDown_wrapped;
    keyDown: (s: IgrInput, e: IgrKeyEventArgs) => void;
    private _keyUp;
    private _keyUp_wrapped;
    keyUp: (s: IgrInput, e: IgrKeyEventArgs) => void;
    private _keyPress;
    private _keyPress_wrapped;
    keyPress: (s: IgrInput, e: IgrKeyEventArgs) => void;
    private _change;
    private _change_wrapped;
    change: (s: IgrInput, e: IgrInputChangeEventArgs) => void;
    private _changing;
    private _changing_wrapped;
    changing: (s: IgrInput, e: IgrInputChangeEventArgs) => void;
}
export interface IIgrInputProps extends IIgrInputGroupItemProps {
    /**
 * Gets or sets the display density to use for the input.
*/
    density?: ControlDisplayDensity | string;
    /**
     * Gets the actual display density to use for the label.
    */
    actualDensity?: ControlDisplayDensity | string;
    /**
     * Gets/Sets the input mask for the input.
    */
    mask?: string;
    /**
     * Gets/Sets the character representing a fillable spot in the input mask
    */
    promptChar?: string;
    /**
     * Specifies if the bound value includes the formatting symbols.
    */
    includeLiterals?: boolean | string;
    /**
     * Gets the actual color to use for the text color.
    */
    actualTextColor?: string;
    /**
     * Gets the actual hover color to use for the text.
    */
    actualHoverTextColor?: string;
    /**
     * Gets or sets the color to use for the text.
    */
    textColor?: string;
    /**
     * Gets or sets the use for the button.
    */
    textStyle?: string;
    /**
     * Gets or sets the type to use for the input.
    */
    inputType?: string;
    /**
     * Gets or sets the placeholder to use for the input.
    */
    placeholder?: string;
    /**
     * Gets or sets the color to use for the hovered text of the button regardless of type.
    */
    hoverTextColor?: string;
    /**
     * Gets or sets the id to use for the checkbox.
    */
    id?: string;
    /**
     * Gets or sets TabIndex to use for the checkbox.
    */
    tabIndex?: number | string;
    /**
     * Gets or sets the for attribute to use for the input.
    */
    for?: string;
    /**
     * Gets or sets the value of the aria-label attribute.
    */
    ariaLabel?: string;
    /**
     * Gets or sets whether the input is hovered.
    */
    isHover?: boolean | string;
    /**
     * Gets or sets the value for the input.
    */
    value?: string;
    /**
     * Gets or sets whether the checkbox is disabled.
    */
    disabled?: boolean | string;
    /**
     * Returns / Sets the beginning index of the selected text. When nothing is selected, this returns the position of the text input cursor (caret) inside of the input.
    */
    selectionStart?: number | string;
    /**
     * Returns / Sets the end index of the selected text. When nothing is selected, this returns the position of the text input cursor (caret) inside of the input.
    */
    selectionEnd?: number | string;
    keyDown?: (s: IgrInput, e: IgrKeyEventArgs) => void;
    keyUp?: (s: IgrInput, e: IgrKeyEventArgs) => void;
    keyPress?: (s: IgrInput, e: IgrKeyEventArgs) => void;
    change?: (s: IgrInput, e: IgrInputChangeEventArgs) => void;
    changing?: (s: IgrInput, e: IgrInputChangeEventArgs) => void;
}
