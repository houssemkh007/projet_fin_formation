import * as React from 'react';
import { Checkbox } from "./Checkbox";
import { IgrCheckboxChangeEventArgs } from './igr-checkbox-change-event-args';
import { CheckboxLabelPosition } from './CheckboxLabelPosition';
import { BaseControlTheme } from "igniteui-react-core";
export declare class IgrCheckbox extends React.Component<IIgrCheckboxProps> {
    private _container;
    private _initialized;
    private _elRef;
    private _portalManager;
    private _wrapper;
    private _getMainRef;
    render(): React.DetailedReactHTMLElement<{
        className: string;
        ref: (ref: any) => void;
        children: any[];
    }, any>;
    private requestRender;
    constructor(props: IIgrCheckboxProps);
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    protected initializeProperties(): void;
    updateStyle(): void;
    componentWillUnmount(): void;
    private _implementation;
    componentDidMount(): void;
    initializeContent(): void;
    protected createImplementation(): Checkbox;
    readonly i: Checkbox;
    private _checkbox;
    /**
 * Gets or sets the base built in theme to use for the checkbox.
*/
    baseTheme: BaseControlTheme;
    /**
     * Gets or sets the color to use for the background when the checkbox is unchecked.
    */
    uncheckedBackgroundColor: string;
    /**
     * Gets or sets the color to use for the actual background when the checkbox is unchecked.
    */
    actualUncheckedBackgroundColor: string;
    /**
     * Gets or sets the color to use for the background when the checkbox is checked.
    */
    checkedBackgroundColor: string;
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    tickColor: string;
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    actualTickColor: string;
    /**
     * Gets or sets the color to use for the check mark when the checkbox is unchecked.
    */
    uncheckedBorderColor: string;
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    checkedBorderColor: string;
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    actualUncheckedBorderColor: string;
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    actualCheckedBorderColor: string;
    /**
     * Gets or sets the Width to use for the check mark when the checkbox is checked.
    */
    borderWidth: number;
    /**
     * Gets or sets the Width to use for the check mark when the checkbox is checked.
    */
    actualBorderWidth: number;
    /**
     * Gets or sets the corner radius to use for the checkbox.
    */
    cornerRadius: number;
    /**
     * Gets or sets the corner radius to use for the checkbox.
    */
    tickStrokeWidth: number;
    /**
     * Gets or sets the stroke width to use for the check mark.
    */
    actualTickStrokeWidth: number;
    /**
     * Gets the actual corner radius to use for the checkbox.
    */
    actualCornerRadius: number;
    /**
     * Gets or sets the color to use for the actual background when the checkbox is checked.
    */
    actualCheckedBackgroundColor: string;
    /**
     * Gets or sets the id to use for the internal native checkbox.
    */
    inputId: string;
    /**
     * Gets or sets the id to use for the checkbox.
    */
    id: string;
    /**
     * Gets or sets id to use for the checkbox label.
    */
    labelId: string;
    /**
     * Gets or sets value to use for the checkbox.
    */
    value: any;
    /**
     * Gets or sets name to use for the checkbox.
    */
    name: string;
    /**
     * Gets or sets TabIndex to use for the checkbox.
    */
    tabIndex: number;
    /**
     * Gets or sets if the checkbox is required.
    */
    required: number;
    /**
     * Gets or sets if the checkbox is Focused.
    */
    focused: boolean;
    /**
     * Gets or sets the value of the aria-labelledby attribute.
    */
    ariaLabelledBy: string;
    /**
     * Gets or sets the value of the aria-label attribute.
    */
    ariaLabel: string;
    /**
     * Gets or sets LabelPosition to use for the checkbox.
    */
    labelPosition: CheckboxLabelPosition;
    /**
     * Gets or sets whether to disable the ripple effect for the checkbox.
    */
    disableRipple: boolean;
    /**
     * Gets or sets whether the checkbox is checked.
    */
    checked: boolean;
    /**
     * Gets or sets whether the checkbox is indeterminate.
    */
    indeterminate: boolean;
    /**
     * Gets or sets whether the checkbox is disabled.
    */
    disabled: boolean;
    /**
     * Gets or sets whether the checkbox transitions are disabled.
    */
    disableTransitions: boolean;
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected readonly hasUserValues: Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    onDetachedFromUI(): void;
    onAttachedToUI(): void;
    /**
     * Exports visual information about the current state of the grid.
    
    */
    exportVisualModel(): any;
    /**
     * Returns a serialized copy of the exported visual model
    
    */
    exportSerializedVisualModel(): string;
    private _change;
    private _change_wrapped;
    change: (s: IgrCheckbox, e: IgrCheckboxChangeEventArgs) => void;
}
export interface IIgrCheckboxProps {
    /**
 * Gets or sets the base built in theme to use for the checkbox.
*/
    baseTheme?: BaseControlTheme | string;
    /**
     * Gets or sets the color to use for the background when the checkbox is unchecked.
    */
    uncheckedBackgroundColor?: string;
    /**
     * Gets or sets the color to use for the actual background when the checkbox is unchecked.
    */
    actualUncheckedBackgroundColor?: string;
    /**
     * Gets or sets the color to use for the background when the checkbox is checked.
    */
    checkedBackgroundColor?: string;
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    tickColor?: string;
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    actualTickColor?: string;
    /**
     * Gets or sets the color to use for the check mark when the checkbox is unchecked.
    */
    uncheckedBorderColor?: string;
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    checkedBorderColor?: string;
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    actualUncheckedBorderColor?: string;
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    actualCheckedBorderColor?: string;
    /**
     * Gets or sets the Width to use for the check mark when the checkbox is checked.
    */
    borderWidth?: number | string;
    /**
     * Gets or sets the Width to use for the check mark when the checkbox is checked.
    */
    actualBorderWidth?: number | string;
    /**
     * Gets or sets the corner radius to use for the checkbox.
    */
    cornerRadius?: number | string;
    /**
     * Gets or sets the corner radius to use for the checkbox.
    */
    tickStrokeWidth?: number | string;
    /**
     * Gets or sets the stroke width to use for the check mark.
    */
    actualTickStrokeWidth?: number | string;
    /**
     * Gets the actual corner radius to use for the checkbox.
    */
    actualCornerRadius?: number | string;
    /**
     * Gets or sets the color to use for the actual background when the checkbox is checked.
    */
    actualCheckedBackgroundColor?: string;
    /**
     * Gets or sets the id to use for the internal native checkbox.
    */
    inputId?: string;
    /**
     * Gets or sets the id to use for the checkbox.
    */
    id?: string;
    /**
     * Gets or sets id to use for the checkbox label.
    */
    labelId?: string;
    /**
     * Gets or sets value to use for the checkbox.
    */
    value?: any;
    /**
     * Gets or sets name to use for the checkbox.
    */
    name?: string;
    /**
     * Gets or sets TabIndex to use for the checkbox.
    */
    tabIndex?: number | string;
    /**
     * Gets or sets if the checkbox is required.
    */
    required?: number | string;
    /**
     * Gets or sets if the checkbox is Focused.
    */
    focused?: boolean | string;
    /**
     * Gets or sets the value of the aria-labelledby attribute.
    */
    ariaLabelledBy?: string;
    /**
     * Gets or sets the value of the aria-label attribute.
    */
    ariaLabel?: string;
    /**
     * Gets or sets LabelPosition to use for the checkbox.
    */
    labelPosition?: CheckboxLabelPosition | string;
    /**
     * Gets or sets whether to disable the ripple effect for the checkbox.
    */
    disableRipple?: boolean | string;
    /**
     * Gets or sets whether the checkbox is checked.
    */
    checked?: boolean | string;
    /**
     * Gets or sets whether the checkbox is indeterminate.
    */
    indeterminate?: boolean | string;
    /**
     * Gets or sets whether the checkbox is disabled.
    */
    disabled?: boolean | string;
    /**
     * Gets or sets whether the checkbox transitions are disabled.
    */
    disableTransitions?: boolean | string;
    change?: (s: IgrCheckbox, e: IgrCheckboxChangeEventArgs) => void;
}
