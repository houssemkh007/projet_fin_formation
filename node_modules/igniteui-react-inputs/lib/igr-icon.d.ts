import * as React from 'react';
import { Icon } from "./Icon";
export declare class IgrIcon extends React.Component<IIgrIconProps> {
    private _container;
    private _initialized;
    private _elRef;
    private _portalManager;
    private _wrapper;
    private _getMainRef;
    render(): React.DetailedReactHTMLElement<{
        className: string;
        ref: (ref: any) => void;
        children: any[];
    }, any>;
    private requestRender;
    constructor(props: IIgrIconProps);
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    protected initializeProperties(): void;
    updateStyle(): void;
    componentWillUnmount(): void;
    private _implementation;
    componentDidMount(): void;
    initializeContent(): void;
    protected createImplementation(): Icon;
    readonly i: Icon;
    private _icon;
    /**
 * Gets the color to use for the actual background.
*/
    actualFill: string;
    /**
     * Gets the color to use for the actual text color.
    */
    actualTextColor: string;
    /**
     * Gets the color to use for the actual background.
    */
    actualHoverFill: string;
    /**
     * Gets the hover stroke to use for the icon.
    */
    actualHoverStroke: string;
    /**
     * Gets the stroke to use for the icon.
    */
    actualStroke: string;
    /**
     * Gets the hover stroke to use for the icon.
    */
    actualHoverStrokeThickness: number;
    /**
     * Gets the stroke to use for the icon.
    */
    actualStrokeThickness: number;
    /**
     * Gets or sets the color to use for the actual background.
    */
    fill: string;
    /**
     * Gets or sets the color to use for the text.
    */
    textColor: string;
    /**
     * Gets or sets the color to use for the text.
    */
    svgPath: string;
    /**
     * Gets or sets the color to use for the actual background.
    */
    hoverFill: string;
    /**
     * Gets or sets the hover stroke to use for the icon.
    */
    hoverStroke: string;
    /**
     * Gets or sets the stroke to use for the icon.
    */
    stroke: string;
    /**
     * Gets or sets the hover stroke to use for the icon.
    */
    hoverStrokeThickness: number;
    /**
     * Gets or sets the stroke to use for the icon.
    */
    strokeThickness: number;
    /**
     * Gets or sets the use for the button.
    */
    textStyle: string;
    /**
     * Gets or sets the color to use for the hovered text of the button regardless of type.
    */
    hoverTextColor: string;
    /**
     * Gets or sets the id to use for the checkbox.
    */
    id: string;
    /**
     * Gets or sets TabIndex to use for the checkbox.
    */
    tabIndex: number;
    /**
     * Gets or sets the value of the aria-label attribute.
    */
    ariaLabel: string;
    /**
     * Gets or sets whether the icon is hovered.
    */
    isHover: boolean;
    /**
     * Gets or sets whether the checkbox is disabled.
    */
    disabled: boolean;
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected readonly hasUserValues: Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    onDetachedFromUI(): void;
    onAttachedToUI(): void;
    /**
     * Exports visual information about the current state of the grid.
    
    */
    exportVisualModel(): any;
    /**
     * Returns a serialized copy of the exported visual model
    
    */
    exportSerializedVisualModel(): string;
}
export interface IIgrIconProps {
    /**
 * Gets the color to use for the actual background.
*/
    actualFill?: string;
    /**
     * Gets the color to use for the actual text color.
    */
    actualTextColor?: string;
    /**
     * Gets the color to use for the actual background.
    */
    actualHoverFill?: string;
    /**
     * Gets the hover stroke to use for the icon.
    */
    actualHoverStroke?: string;
    /**
     * Gets the stroke to use for the icon.
    */
    actualStroke?: string;
    /**
     * Gets the hover stroke to use for the icon.
    */
    actualHoverStrokeThickness?: number | string;
    /**
     * Gets the stroke to use for the icon.
    */
    actualStrokeThickness?: number | string;
    /**
     * Gets or sets the color to use for the actual background.
    */
    fill?: string;
    /**
     * Gets or sets the color to use for the text.
    */
    textColor?: string;
    /**
     * Gets or sets the color to use for the text.
    */
    svgPath?: string;
    /**
     * Gets or sets the color to use for the actual background.
    */
    hoverFill?: string;
    /**
     * Gets or sets the hover stroke to use for the icon.
    */
    hoverStroke?: string;
    /**
     * Gets or sets the stroke to use for the icon.
    */
    stroke?: string;
    /**
     * Gets or sets the hover stroke to use for the icon.
    */
    hoverStrokeThickness?: number | string;
    /**
     * Gets or sets the stroke to use for the icon.
    */
    strokeThickness?: number | string;
    /**
     * Gets or sets the use for the button.
    */
    textStyle?: string;
    /**
     * Gets or sets the color to use for the hovered text of the button regardless of type.
    */
    hoverTextColor?: string;
    /**
     * Gets or sets the id to use for the checkbox.
    */
    id?: string;
    /**
     * Gets or sets TabIndex to use for the checkbox.
    */
    tabIndex?: number | string;
    /**
     * Gets or sets the value of the aria-label attribute.
    */
    ariaLabel?: string;
    /**
     * Gets or sets whether the icon is hovered.
    */
    isHover?: boolean | string;
    /**
     * Gets or sets whether the checkbox is disabled.
    */
    disabled?: boolean | string;
}
