import * as React from 'react';
import { Ripple } from "./Ripple";
export declare class IgrRipple extends React.Component<IIgrRippleProps> {
    private _container;
    private _initialized;
    private _elRef;
    private _height;
    private _width;
    height: string;
    width: string;
    private _top;
    private _left;
    top: string;
    left: string;
    private _position;
    position: string;
    private _wrapper;
    private _getMainRef;
    render(): React.DetailedReactHTMLElement<{
        className: string;
        ref: (ref: any) => void;
    }, any>;
    constructor(props: IIgrRippleProps);
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    protected initializeProperties(): void;
    updateStyle(): void;
    componentWillUnmount(): void;
    private _implementation;
    componentDidMount(): void;
    initializeContent(): void;
    protected createImplementation(): Ripple;
    readonly i: Ripple;
    private _ripple;
    /**
 * Gets or sets the target element to inject ripples into.
*/
    eventSource: any;
    /**
     * Gets or sets the color to use for the background when the checkbox is unchecked.
    */
    rippleColor: string;
    /**
     * Gets or sets the color to use for the background when the ripple is hovered.
    */
    hoverColor: string;
    /**
     * Gets or sets the actual color to use for the background when the ripple is hovered.
    */
    actualHoverColor: string;
    /**
     * Gets or sets the color to use for the actual background when the checkbox is unchecked.
    */
    actualRippleColor: string;
    /**
     * Gets or sets the duration to use for the ripple animation.
    */
    rippleDuration: number;
    /**
     * Gets or sets if the ripple is disabled.
    */
    isDisabled: boolean;
    /**
     * Gets or sets if the ripple is centered.
    */
    isCentered: boolean;
    /**
     * Gets or sets if the ripple is centered.
    */
    isHoverEnabled: boolean;
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected readonly hasUserValues: Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    onDetachedFromUI(): void;
    onAttachedToUI(): void;
    /**
     * Exports visual information about the current state of the grid.
    
    */
    exportVisualModel(): any;
    /**
     * Returns a serialized copy of the exported visual model
    
    */
    exportSerializedVisualModel(): string;
}
export interface IIgrRippleProps {
    /**
 * Gets or sets the target element to inject ripples into.
*/
    eventSource?: any;
    /**
     * Gets or sets the color to use for the background when the checkbox is unchecked.
    */
    rippleColor?: string;
    /**
     * Gets or sets the color to use for the background when the ripple is hovered.
    */
    hoverColor?: string;
    /**
     * Gets or sets the actual color to use for the background when the ripple is hovered.
    */
    actualHoverColor?: string;
    /**
     * Gets or sets the color to use for the actual background when the checkbox is unchecked.
    */
    actualRippleColor?: string;
    /**
     * Gets or sets the duration to use for the ripple animation.
    */
    rippleDuration?: number | string;
    /**
     * Gets or sets if the ripple is disabled.
    */
    isDisabled?: boolean | string;
    /**
     * Gets or sets if the ripple is centered.
    */
    isCentered?: boolean | string;
    /**
     * Gets or sets if the ripple is centered.
    */
    isHoverEnabled?: boolean | string;
}
