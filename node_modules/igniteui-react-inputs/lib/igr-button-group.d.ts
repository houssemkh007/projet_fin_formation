import * as React from 'react';
import { ButtonGroup } from "./ButtonGroup";
import { IgrButton } from './igr-button';
import { IgrButtonGroupButtonCollection } from './igr-button-group-button-collection';
import { IgrButtonGroupSelectionChangedEventArgs } from './igr-button-group-selection-changed-event-args';
import { ButtonGroupOrientation } from './ButtonGroupOrientation';
import { ControlDisplayDensity } from "igniteui-react-core";
import { BaseControlTheme } from "igniteui-react-core";
import { ButtonGroupDisplayStyle } from './ButtonGroupDisplayStyle';
export declare class IgrButtonGroup extends React.Component<IIgrButtonGroupProps> {
    private _container;
    private _initialized;
    private _elRef;
    private _portalManager;
    private _wrapper;
    private _getMainRef;
    private _contentChildrenManager;
    private _updateContentChildren;
    contentButtons: IgrButton[];
    /**
    * The style mappings actually present in the treemap. Do not directly modify this array.
    * This array's contents can be modified by causing React to reproject the child content.
    * Or adding and removing ranges from the manual ranges collection on the ranges property.
    */
    actualButtons: IgrButton[];
    private _buttons;
    private _buttonsAdapter;
    /**
     * A collection of manually added style mappings for the treemap.
    */
    readonly buttons: IgrButtonGroupButtonCollection;
    render(): React.DetailedReactHTMLElement<{
        className: string;
        ref: (ref: any) => void;
        children: any[];
    }, any>;
    private requestRender;
    constructor(props: IIgrButtonGroupProps);
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    protected initializeProperties(): void;
    updateStyle(): void;
    componentWillUnmount(): void;
    private _implementation;
    componentDidMount(): void;
    initializeContent(): void;
    protected createImplementation(): ButtonGroup;
    readonly i: ButtonGroup;
    private _buttonGroup;
    /**
 * Gets or sets the display style to use for the button.
*/
    displayType: ButtonGroupDisplayStyle;
    /**
     * Gets or sets the base built in theme to use for the button group.
    */
    baseTheme: BaseControlTheme;
    /**
     * Gets or sets the display density to use for the button group.
    */
    density: ControlDisplayDensity;
    /**
     * Gets the actual display density to use for the button group.
    */
    actualDensity: ControlDisplayDensity;
    /**
     * Gets the currently selected button indices.
    */
    selectedIndices: number[];
    /**
     * Gets the actual item corner radius for the appropriate corners.
    */
    actualItemCornerRadius: number;
    /**
     * Gets the actual item background color.
    */
    actualItemBackgroundColor: string;
    /**
     * Gets the actual item background color.
    */
    actualItemDisabledBackgroundColor: string;
    /**
     * Gets the actual item text color.
    */
    actualItemTextColor: string;
    /**
     * Gets the actual item text color.
    */
    actualItemDisabledTextColor: string;
    /**
     * Gets the actual item border color.
    */
    actualItemBorderColor: string;
    /**
     * Gets the actual item border color.
    */
    actualItemDisabledBorderColor: string;
    /**
     * Gets the actual item border width.
    */
    actualItemBorderWidth: number;
    /**
     * Gets the actual selected item background color.
    */
    actualSelectedItemBackgroundColor: string;
    /**
     * Gets the stroke actual selected item text color.
    */
    actualSelectedItemTextColor: string;
    /**
     * Gets the actual item hovered background color.
    */
    actualItemHoverBackgroundColor: string;
    /**
     * Gets the actual item text color.
    */
    actualItemHoverTextColor: string;
    /**
     * Gets the actual selected item hovered background color.
    */
    actualSelectedItemHoverBackgroundColor: string;
    /**
     * Gets the actual selected item hovered text color.
    */
    actualSelectedItemHoverTextColor: string;
    /**
     * Gets or sets the corner radius to use for the appropriate corners for the item buttons.
    */
    itemCornerRadius: number;
    /**
     * Gets or sets the color to use the background of the buttons in the group.
    */
    itemBackgroundColor: string;
    /**
     * Gets or sets the disabled color to use the background of the buttons in the group.
    */
    itemDisabledBackgroundColor: string;
    /**
     * Gets or sets the color to use the text of the buttons in the group.
    */
    itemTextColor: string;
    /**
     * Gets or sets the disabled color to use the text of the buttons in the group.
    */
    itemDisabledTextColor: string;
    /**
     * Gets or sets the color to use the hovered background of the buttons in the group.
    */
    itemHoverBackgroundColor: string;
    /**
     * Gets or sets the color to use the border of the buttons in the group.
    */
    itemBorderColor: string;
    /**
     * Gets or sets the disabled color to use the border of the buttons in the group.
    */
    itemDisabledBorderColor: string;
    /**
     * Gets or sets the border width to use for the buttons in the group.
    */
    itemBorderWidth: number;
    /**
     * Gets or sets the color to use the hovered text of the buttons in the group.
    */
    itemHoverTextColor: string;
    /**
     * Gets or sets the color to use the background of the buttons in the group that are selected.
    */
    selectedItemBackgroundColor: string;
    /**
     * Gets or sets the color to use the text of the buttons in the group that are selected.
    */
    selectedItemTextColor: string;
    /**
     * Gets or sets the color to use the hovered background of the buttons in the group that are selected.
    */
    selectedItemHoverBackgroundColor: string;
    /**
     * Gets or sets the color to use the hovered text of the buttons in the group that are selected.
    */
    selectedItemHoverTextColor: string;
    /**
     * Gets or sets the corner radius to use for the appropriate corners for the outlined type item buttons.
    */
    outlinedItemCornerRadius: number;
    /**
     * Gets or sets the color to use the background of the buttons in the group when type is outlined.
    */
    outlinedItemBackgroundColor: string;
    /**
     * Gets or sets the disabled color to use the background of the buttons in the group when type is outlined.
    */
    outlinedItemDisabledBackgroundColor: string;
    /**
     * Gets or sets the color to use the text of the buttons in the group when type is outlined.
    */
    outlinedItemTextColor: string;
    /**
     * Gets or sets the disabled color to use the text of the buttons in the group when type is outlined.
    */
    outlinedItemDisabledTextColor: string;
    /**
     * Gets or sets the color to use the hovered background of the buttons in the group when type is outlined.
    */
    outlinedItemHoverBackgroundColor: string;
    /**
     * Gets or sets the color to use the border of the buttons in the group when type is outlined.
    */
    outlinedItemBorderColor: string;
    /**
     * Gets or sets the disabled color to use the border of the buttons in the group when type is outlined.
    */
    outlinedItemDisabledBorderColor: string;
    /**
     * Gets or sets the border width to use for the buttons in the group when type is outlined.
    */
    outlinedItemBorderWidth: number;
    /**
     * Gets or sets the color to use the hovered text of the buttons in the group when type is outlined.
    */
    outlinedItemHoverTextColor: string;
    /**
     * Gets or sets the color to use the background of the buttons in the group that are selected when type is outlined.
    */
    outlinedSelectedItemBackgroundColor: string;
    /**
     * Gets or sets the color to use the text of the buttons in the group that are selected when type is outlined.
    */
    outlinedSelectedItemTextColor: string;
    /**
     * Gets or sets the color to use the hovered background of the buttons in the group that are selected when type is outlined.
    */
    outlinedSelectedItemHoverBackgroundColor: string;
    /**
     * Gets or sets the color to use the hovered text of the buttons in the group that are selected when type is outlined.
    */
    outlinedSelectedItemHoverTextColor: string;
    /**
     * Gets or sets the corner radius to use for the appropriate corners for the flat type item buttons.
    */
    flatItemCornerRadius: number;
    /**
     * Gets or sets the color to use the background of the buttons in the group when type is flat.
    */
    flatItemBackgroundColor: string;
    /**
     * Gets or sets the disabled color to use the background of the buttons in the group when type is flat.
    */
    flatItemDisabledBackgroundColor: string;
    /**
     * Gets or sets the color to use the text of the buttons in the group when type is flat.
    */
    flatItemTextColor: string;
    /**
     * Gets or sets the disabled color to use the text of the buttons in the group when type is flat.
    */
    flatItemDisabledTextColor: string;
    /**
     * Gets or sets the color to use the hovered background of the buttons in the group when type is flat.
    */
    flatItemHoverBackgroundColor: string;
    /**
     * Gets or sets the color to use the border of the buttons in the group when type is flat.
    */
    flatItemBorderColor: string;
    /**
     * Gets or sets the disabled color to use the border of the buttons in the group when type is flat.
    */
    flatItemDisabledBorderColor: string;
    /**
     * Gets or sets the border width to use for the buttons in the group when type is flat.
    */
    flatItemBorderWidth: number;
    /**
     * Gets or sets the color to use the hovered text of the buttons in the group when type is flat.
    */
    flatItemHoverTextColor: string;
    /**
     * Gets or sets the color to use the background of the buttons in the group that are selected when type is flat.
    */
    flatSelectedItemBackgroundColor: string;
    /**
     * Gets or sets the color to use the text of the buttons in the group that are selected when type is flat.
    */
    flatSelectedItemTextColor: string;
    /**
     * Gets or sets the color to use the hovered background of the buttons in the group that are selected when type is flat.
    */
    flatSelectedItemHoverBackgroundColor: string;
    /**
     * Gets or sets the color to use the hovered text of the buttons in the group that are selected when type is flat.
    */
    flatSelectedItemHoverTextColor: string;
    /**
     * Gets or sets the oreientation to use the button group when type is outlined.
    */
    orientation: ButtonGroupOrientation;
    /**
     * Gets or sets the id to use for the button group.
    */
    id: string;
    /**
     * Gets or sets whether the checkbox is disabled.
    */
    disabled: boolean;
    /**
     * Gets or sets whether the group supports multi-select.
    */
    isMultiSelect: boolean;
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected readonly hasUserValues: Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    onDetachedFromUI(): void;
    onAttachedToUI(): void;
    /**
     * Exports visual information about the current state of the grid.
    
    */
    exportVisualModel(): any;
    /**
     * Returns a serialized copy of the exported visual model
    
    */
    exportSerializedVisualModel(): string;
    private _selectionChanged;
    private _selectionChanged_wrapped;
    selectionChanged: (s: IgrButtonGroup, e: IgrButtonGroupSelectionChangedEventArgs) => void;
}
export interface IIgrButtonGroupProps {
    /**
 * Gets or sets the display style to use for the button.
*/
    displayType?: ButtonGroupDisplayStyle | string;
    /**
     * Gets or sets the base built in theme to use for the button group.
    */
    baseTheme?: BaseControlTheme | string;
    /**
     * Gets or sets the display density to use for the button group.
    */
    density?: ControlDisplayDensity | string;
    /**
     * Gets the actual display density to use for the button group.
    */
    actualDensity?: ControlDisplayDensity | string;
    /**
     * Gets the currently selected button indices.
    */
    selectedIndices?: number[];
    /**
     * Gets the actual item corner radius for the appropriate corners.
    */
    actualItemCornerRadius?: number | string;
    /**
     * Gets the actual item background color.
    */
    actualItemBackgroundColor?: string;
    /**
     * Gets the actual item background color.
    */
    actualItemDisabledBackgroundColor?: string;
    /**
     * Gets the actual item text color.
    */
    actualItemTextColor?: string;
    /**
     * Gets the actual item text color.
    */
    actualItemDisabledTextColor?: string;
    /**
     * Gets the actual item border color.
    */
    actualItemBorderColor?: string;
    /**
     * Gets the actual item border color.
    */
    actualItemDisabledBorderColor?: string;
    /**
     * Gets the actual item border width.
    */
    actualItemBorderWidth?: number | string;
    /**
     * Gets the actual selected item background color.
    */
    actualSelectedItemBackgroundColor?: string;
    /**
     * Gets the stroke actual selected item text color.
    */
    actualSelectedItemTextColor?: string;
    /**
     * Gets the actual item hovered background color.
    */
    actualItemHoverBackgroundColor?: string;
    /**
     * Gets the actual item text color.
    */
    actualItemHoverTextColor?: string;
    /**
     * Gets the actual selected item hovered background color.
    */
    actualSelectedItemHoverBackgroundColor?: string;
    /**
     * Gets the actual selected item hovered text color.
    */
    actualSelectedItemHoverTextColor?: string;
    /**
     * Gets or sets the corner radius to use for the appropriate corners for the item buttons.
    */
    itemCornerRadius?: number | string;
    /**
     * Gets or sets the color to use the background of the buttons in the group.
    */
    itemBackgroundColor?: string;
    /**
     * Gets or sets the disabled color to use the background of the buttons in the group.
    */
    itemDisabledBackgroundColor?: string;
    /**
     * Gets or sets the color to use the text of the buttons in the group.
    */
    itemTextColor?: string;
    /**
     * Gets or sets the disabled color to use the text of the buttons in the group.
    */
    itemDisabledTextColor?: string;
    /**
     * Gets or sets the color to use the hovered background of the buttons in the group.
    */
    itemHoverBackgroundColor?: string;
    /**
     * Gets or sets the color to use the border of the buttons in the group.
    */
    itemBorderColor?: string;
    /**
     * Gets or sets the disabled color to use the border of the buttons in the group.
    */
    itemDisabledBorderColor?: string;
    /**
     * Gets or sets the border width to use for the buttons in the group.
    */
    itemBorderWidth?: number | string;
    /**
     * Gets or sets the color to use the hovered text of the buttons in the group.
    */
    itemHoverTextColor?: string;
    /**
     * Gets or sets the color to use the background of the buttons in the group that are selected.
    */
    selectedItemBackgroundColor?: string;
    /**
     * Gets or sets the color to use the text of the buttons in the group that are selected.
    */
    selectedItemTextColor?: string;
    /**
     * Gets or sets the color to use the hovered background of the buttons in the group that are selected.
    */
    selectedItemHoverBackgroundColor?: string;
    /**
     * Gets or sets the color to use the hovered text of the buttons in the group that are selected.
    */
    selectedItemHoverTextColor?: string;
    /**
     * Gets or sets the corner radius to use for the appropriate corners for the outlined type item buttons.
    */
    outlinedItemCornerRadius?: number | string;
    /**
     * Gets or sets the color to use the background of the buttons in the group when type is outlined.
    */
    outlinedItemBackgroundColor?: string;
    /**
     * Gets or sets the disabled color to use the background of the buttons in the group when type is outlined.
    */
    outlinedItemDisabledBackgroundColor?: string;
    /**
     * Gets or sets the color to use the text of the buttons in the group when type is outlined.
    */
    outlinedItemTextColor?: string;
    /**
     * Gets or sets the disabled color to use the text of the buttons in the group when type is outlined.
    */
    outlinedItemDisabledTextColor?: string;
    /**
     * Gets or sets the color to use the hovered background of the buttons in the group when type is outlined.
    */
    outlinedItemHoverBackgroundColor?: string;
    /**
     * Gets or sets the color to use the border of the buttons in the group when type is outlined.
    */
    outlinedItemBorderColor?: string;
    /**
     * Gets or sets the disabled color to use the border of the buttons in the group when type is outlined.
    */
    outlinedItemDisabledBorderColor?: string;
    /**
     * Gets or sets the border width to use for the buttons in the group when type is outlined.
    */
    outlinedItemBorderWidth?: number | string;
    /**
     * Gets or sets the color to use the hovered text of the buttons in the group when type is outlined.
    */
    outlinedItemHoverTextColor?: string;
    /**
     * Gets or sets the color to use the background of the buttons in the group that are selected when type is outlined.
    */
    outlinedSelectedItemBackgroundColor?: string;
    /**
     * Gets or sets the color to use the text of the buttons in the group that are selected when type is outlined.
    */
    outlinedSelectedItemTextColor?: string;
    /**
     * Gets or sets the color to use the hovered background of the buttons in the group that are selected when type is outlined.
    */
    outlinedSelectedItemHoverBackgroundColor?: string;
    /**
     * Gets or sets the color to use the hovered text of the buttons in the group that are selected when type is outlined.
    */
    outlinedSelectedItemHoverTextColor?: string;
    /**
     * Gets or sets the corner radius to use for the appropriate corners for the flat type item buttons.
    */
    flatItemCornerRadius?: number | string;
    /**
     * Gets or sets the color to use the background of the buttons in the group when type is flat.
    */
    flatItemBackgroundColor?: string;
    /**
     * Gets or sets the disabled color to use the background of the buttons in the group when type is flat.
    */
    flatItemDisabledBackgroundColor?: string;
    /**
     * Gets or sets the color to use the text of the buttons in the group when type is flat.
    */
    flatItemTextColor?: string;
    /**
     * Gets or sets the disabled color to use the text of the buttons in the group when type is flat.
    */
    flatItemDisabledTextColor?: string;
    /**
     * Gets or sets the color to use the hovered background of the buttons in the group when type is flat.
    */
    flatItemHoverBackgroundColor?: string;
    /**
     * Gets or sets the color to use the border of the buttons in the group when type is flat.
    */
    flatItemBorderColor?: string;
    /**
     * Gets or sets the disabled color to use the border of the buttons in the group when type is flat.
    */
    flatItemDisabledBorderColor?: string;
    /**
     * Gets or sets the border width to use for the buttons in the group when type is flat.
    */
    flatItemBorderWidth?: number | string;
    /**
     * Gets or sets the color to use the hovered text of the buttons in the group when type is flat.
    */
    flatItemHoverTextColor?: string;
    /**
     * Gets or sets the color to use the background of the buttons in the group that are selected when type is flat.
    */
    flatSelectedItemBackgroundColor?: string;
    /**
     * Gets or sets the color to use the text of the buttons in the group that are selected when type is flat.
    */
    flatSelectedItemTextColor?: string;
    /**
     * Gets or sets the color to use the hovered background of the buttons in the group that are selected when type is flat.
    */
    flatSelectedItemHoverBackgroundColor?: string;
    /**
     * Gets or sets the color to use the hovered text of the buttons in the group that are selected when type is flat.
    */
    flatSelectedItemHoverTextColor?: string;
    /**
     * Gets or sets the oreientation to use the button group when type is outlined.
    */
    orientation?: ButtonGroupOrientation | string;
    /**
     * Gets or sets the id to use for the button group.
    */
    id?: string;
    /**
     * Gets or sets whether the checkbox is disabled.
    */
    disabled?: boolean | string;
    /**
     * Gets or sets whether the group supports multi-select.
    */
    isMultiSelect?: boolean | string;
    selectionChanged?: (s: IgrButtonGroup, e: IgrButtonGroupSelectionChangedEventArgs) => void;
}
