import { Component, createElement, Children, cloneElement } from 'react';
import { Base, markType, StringBuilder, List$1, Delegate_$type, fromEnum, runOn, NativeUI, ScaleTransform, KeyFrameAnimationFactory, AnimationKeyFrameEffect, LinkedList$1, IKeyFrameAnimation_$type, PropertyChangedEventArgs, AnimationKeyFrameProperty, AnimationKeyFrameEffectTiming, AppearanceHelper, INotifyPropertyChanged_$type, BrushUtil, markEnum, EventArgs, stringIsNullOrEmpty, isNaN_, CornerRadius, Thickness, enumGetBox, ControlDisplayDensity_$type, BaseControlTheme_$type, ElevationMode_$type, FontUtil, IIcon_$type, DomWrapper_$type, dateNow, toNullable, Date_$type, dateAddYears, ObservableCollection$1, nullableNotEquals, dateFromValues, unwrapNullable, dateAddDays, dateGetMonth, dateAddMonths, NamePatcher, ReactRenderer, getModifiedProps, isValidProp, ensureEnum, brushToString, stringToBrush, FontInfo, toSpinal, initializePropertiesFromCss, delegateRemove, delegateCombine, ensureBool, TypeRegistrar, PortalManager, IgrChildContentModule, String_$type, Dictionary$2, Number_$type, stringReplace, TransformGroup, TranslateTransform, MouseButtonEventArgs, Point_$type, KeyEventArgs, typeGetValue, typeCast, fromEn, dateToStringFormat, nullableEquals, IgrKeyEventArgs, IgCollection, SyncableObservableCollection$2, ContentChildrenManager, CollectionAdapter, NotifyCollectionChangedAction, RotateTransform } from 'igniteui-react-core';
import { Popup } from 'igniteui-react-layouts';

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let DayInfo = /*@__PURE__*/ (() => {
    class DayInfo extends Base {
        constructor() {
            super();
            this.b = 0;
            this.c = 0;
            this.d = 0;
            this.a = 0;
        }
    }
    DayInfo.$t = /*@__PURE__*/ markType(DayInfo, 'DayInfo');
    return DayInfo;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let RippleVisualModelExport = /*@__PURE__*/ (() => {
    class RippleVisualModelExport extends Base {
        constructor() {
            super(...arguments);
            this.a = null;
            this.b = null;
            this.f = 0;
            this.d = false;
            this.c = false;
            this.e = false;
        }
        g() {
            let a = new StringBuilder(0);
            a.l("{");
            a.l("ActualHoverColor : " + this.a.serialize() + ", ");
            a.l("ActualRippleColor : " + this.b.serialize() + ", ");
            a.l("RippleDuration : " + this.f + ", ");
            a.l("IsDisabled : " + this.d + ", ");
            a.l("IsCentered : " + this.c + ", ");
            a.l("IsHoverEnabled : " + this.e + ", ");
            a.l("}");
            return a.toString();
        }
    }
    RippleVisualModelExport.$t = /*@__PURE__*/ markType(RippleVisualModelExport, 'RippleVisualModelExport');
    return RippleVisualModelExport;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let RippleView = /*@__PURE__*/ (() => {
    class RippleView extends Base {
        constructor() {
            super();
            this.b = null;
            this.g = null;
            this.c = null;
            this.f = new List$1(Delegate_$type, 0);
            this.l = null;
            this.d = true;
            this.k = null;
            this.h = null;
            this.j = null;
            this.i = null;
        }
        w() {
        }
        e() {
            return true;
        }
        t(a) {
            if (a == null) {
                for (let b of fromEnum(this.f)) {
                    b();
                }
                this.f.clear();
            }
            this.g = a;
            this.b.ai();
        }
        v() {
            if (this.b.q == null) {
                this.l = null;
                for (let a of fromEnum(this.f)) {
                    a();
                }
                this.f.clear();
            }
            else {
                let b = this.b.q;
                let c = this.g.getWrapper(b);
                this.l = c;
                this.f.add(c.listen("click", runOn(this, this.p)));
                this.f.add(c.listen("mouseenter", runOn(this, this.q)));
                this.f.add(c.listen("mouseleave", runOn(this, this.r)));
            }
        }
        r(a) {
            this.b.ag();
        }
        q(a) {
            this.b.af();
        }
        p(a) {
            if (this.l == null) {
                return;
            }
            let b = this.g.rootWrapper.getOffset();
            let c = a.pageX - b.left;
            let d = a.pageY - b.top;
            this.b.al(c, d, this.g.rootWrapper.outerWidth(), this.g.rootWrapper.outerHeight());
        }
        aa() {
            if (this.b.j) {
                this.g.rootWrapper.setStyleProperty("background-color", this.b.as._fill);
            }
        }
        x() {
            this.g.rootWrapper.setStyleProperty("background-color", "transparent");
        }
        z() {
            this.g.rootWrapper.setStyleProperty("background-color", this.b.as._fill);
        }
        m(a, b, c) {
            let d = this.g.createElement("span");
            d.setStyleProperty("width", c * 2 + "px");
            d.setStyleProperty("height", c * 2 + "px");
            d.setStyleProperty("top", b + "px");
            d.setStyleProperty("left", a + "px");
            d.setStyleProperty("background-color", this.b.at._fill);
            d.setStyleProperty("position", "absolute");
            d.setStyleProperty("pointer-events", "none");
            d.setStyleProperty("border-radius", c + "px");
            d.setStyleProperty("opacity", ".5");
            NativeUI.z(d, ((() => {
                let $ret = new ScaleTransform();
                $ret.l = 0.3;
                $ret.m = 0.3;
                return $ret;
            })()));
            this.g.append(d);
            return d;
        }
        y(a) {
            let b = a;
            b.remove();
        }
        n() {
            if (KeyFrameAnimationFactory.h == null) {
                KeyFrameAnimationFactory.h = this.g;
            }
        }
        a(a, b) {
            return new AnimationKeyFrameEffect(0, a, 0, null, b);
        }
        o(a) {
        }
        s() {
            this.d = true;
            this.v();
        }
        u() {
            this.d = false;
            for (let a of fromEnum(this.f)) {
                a();
            }
            this.f.clear();
        }
    }
    RippleView.$t = /*@__PURE__*/ markType(RippleView, 'RippleView');
    return RippleView;
})();
/**
 * @hidden
 */
let Ripple = /*@__PURE__*/ (() => {
    class Ripple extends Base {
        constructor() {
            super();
            this.c = null;
            this.j = false;
            this.p = null;
            this.ar = null;
            this.aq = null;
            this.ao = Ripple.au;
            this.m = new LinkedList$1(IKeyFrameAnimation_$type);
            this.ap = Ripple.av;
            this.n = 600;
            this.f = false;
            this.e = false;
            this.g = false;
            this.propertyChanged = null;
            let a = new RippleView();
            a.b = this;
            this.c = a;
            this.c.w();
        }
        destroy() {
            this.provideContainer(null);
        }
        ah(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            this.aj(a, b, c);
        }
        aj(a, b, c) {
            switch (a) {
                case "RippleColor":
                    this.at = this.ax != null ? this.ax : Ripple.av;
                    break;
                case "HoverColor":
                    this.as = this.aw != null ? this.aw : Ripple.au;
                    break;
                case "EventSource":
                    if (this.c.e()) {
                        this.c.v();
                    }
                    break;
                case "ActualRippleColor":
                    this.an();
                    break;
                case "ActualHoverColor":
                    this.am();
                    break;
            }
        }
        am() {
            if (this.i) {
                this.c.x();
                return;
            }
            this.c.aa();
        }
        an() {
        }
        af() {
            this.j = true;
            if (this.i) {
                this.c.x();
                return;
            }
            if (this.k) {
                this.c.z();
            }
        }
        ag() {
            this.j = false;
            if (this.k || this.i) {
                this.c.x();
            }
        }
        get q() {
            return this.p;
        }
        set q(a) {
            let b = this.p;
            this.p = a;
            if (b != this.p) {
                this.ah("EventSource", b, a);
            }
        }
        get ax() {
            return this.ar;
        }
        set ax(a) {
            let b = this.ar;
            this.ar = a;
            if (b != this.ar) {
                this.ah("RippleColor", b, a);
            }
        }
        get aw() {
            return this.aq;
        }
        set aw(a) {
            let b = this.aq;
            this.aq = a;
            if (b != this.aq) {
                this.ah("HoverColor", b, a);
            }
        }
        get as() {
            return this.ao;
        }
        set as(a) {
            let b = this.ao;
            this.ao = a;
            if (b != this.ao) {
                this.ah("ActualHoverColor", b, a);
            }
        }
        al(a, b, c, d) {
            if (this.i) {
                return;
            }
            let e = Math.max(c, d);
            let f = e / 2;
            let g = a - f;
            let h = b - f;
            if (this.h) {
                g = 0;
                h = 0;
            }
            let i = this.c.m(g, h, f);
            let j = this.d(i);
            this.m.f(j);
            let k = this.m.d;
            j.play();
            j.finished.f((l) => {
                j.commitStyles();
                this.m.h(k);
                this.c.y(i);
            });
        }
        d(a) {
            let b = this.a;
            let c = KeyFrameAnimationFactory.f.c(this.c.a(a, b).m(new AnimationKeyFrameProperty(1, 0.5), new AnimationKeyFrameProperty(14, ((() => {
                let $ret = new ScaleTransform();
                $ret.l = 0.3;
                $ret.m = 0.3;
                return $ret;
            })()))).m(new AnimationKeyFrameProperty(1, 0), new AnimationKeyFrameProperty(14, ((() => {
                let $ret = new ScaleTransform();
                $ret.l = 2;
                $ret.m = 2;
                return $ret;
            })()))));
            return c;
        }
        get at() {
            return this.ap;
        }
        set at(a) {
            let b = this.ap;
            this.ap = a;
            if (b != this.ap) {
                this.ah("ActualRippleColor", b, a);
            }
        }
        get o() {
            return this.n;
        }
        set o(a) {
            let b = this.n;
            this.n = a;
            if (b != this.n) {
                this.ah("RippleDuration", b, a);
            }
        }
        get i() {
            return this.f;
        }
        set i(a) {
            let b = this.f;
            this.f = a;
            if (b != this.f) {
                this.ah("IsDisabled", b, a);
            }
        }
        get h() {
            return this.e;
        }
        set h(a) {
            let b = this.e;
            this.e = a;
            if (b != this.e) {
                this.ah("IsCentered", b, a);
            }
        }
        get k() {
            return this.g;
        }
        set k(a) {
            let b = this.g;
            this.g = a;
            if (b != this.g) {
                this.ah("IsHoverEnabled", b, a);
            }
        }
        ai() {
            this.c.v();
        }
        get a() {
            let a = new AnimationKeyFrameEffectTiming();
            a.g = this.o;
            a.b = 0;
            return a;
        }
        onDetachedFromUI() {
            this.c.u();
        }
        onAttachedToUI() {
            this.c.s();
        }
        l() {
            return this.c.e();
        }
        r() {
            return this.b();
        }
        v() {
            let a = this.b();
            return a.g();
        }
        b() {
            let a = new RippleVisualModelExport();
            a.a = AppearanceHelper.a(this.as);
            a.b = AppearanceHelper.a(this.at);
            a.f = this.o;
            a.d = this.i;
            a.c = this.h;
            a.e = this.k;
            return a;
        }
        provideContainer(a) {
            this.c.t(a);
        }
    }
    Ripple.$t = /*@__PURE__*/ markType(Ripple, 'Ripple', Base.$, [INotifyPropertyChanged_$type]);
    Ripple.au = /*@__PURE__*/ BrushUtil.g(40, 0, 0, 0);
    Ripple.av = /*@__PURE__*/ BrushUtil.g(189, 0, 0, 0);
    return Ripple;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let ElevationHelper = /*@__PURE__*/ (() => {
    class ElevationHelper extends Base {
        static g(a, b) {
            if (ElevationHelper.c == null) {
                ElevationHelper.c = ["0 1px 3px 0 ", "0 1px 5px 0 ", "0 1px 8px 0 ", "0 2px 4px -1px ", "0 3px 5px -1px ", "0 3px 5px -1px ", "0 4px 5px -2px ", "0 5px 5px -3px ", "0 5px 6px -3px ", "0 6px 6px -3px ", "0 6px 7px -4px ", "0 7px 8px -4px ", "0 7px 8px -4px ", "0 7px 9px -4px ", "0 8px 9px -5px ", "0 8px 10px -5px ", "0 8px 11px -5px ", "0 9px 11px -5px ", "0 9px 12px -6px ", "0 10px 13px -6px ", "0 10px 13px -6px ", "0 10px 14px -6px ", "0 11px 14px -7px ", "0 11px 15px -7px "];
            }
            a--;
            if (a < 0) {
                return "";
            }
            if (a > ElevationHelper.c.length - 1) {
                a = ElevationHelper.c.length - 1;
            }
            return ElevationHelper.c[a] + b;
        }
        static f(a, b) {
            if (ElevationHelper.b == null) {
                ElevationHelper.b = ["0 1px 1px 0 ", "0 2px 2px 0 ", "0 3px 4px 0 ", "0 4px 5px 0 ", "0 5px 8px 0 ", "0 6px 10px 0 ", "0 7px 10px 1px ", "0 8px 10px 1px ", "0 9px 12px 1px ", "0 10px 14px 1px ", "0 11px 15px 1px ", "0 12px 17px 2px ", "0 13px 19px 2px ", "0 14px 21px 2px ", "0 15px 22px 2px ", "0 16px 24px 2px ", "0 17px 26px 2px ", "0 18px 28px 2px ", "0 19px 29px 2px ", "0 20px 31px 3px ", "0 21px 33px 3px ", "0 22px 35px 3px ", "0 23px 36px 3px ", "0 24px 38px 3px "];
            }
            a--;
            if (a < 0) {
                return "";
            }
            if (a > ElevationHelper.b.length - 1) {
                a = ElevationHelper.b.length - 1;
            }
            return ElevationHelper.b[a] + b;
        }
        static d(a, b) {
            if (ElevationHelper.a == null) {
                ElevationHelper.a = ["0 2px 1px -1px ", "0 3px 1px -2px ", "0 3px 3px -2px ", "0 1px 10px 0 ", "0 1px 14px 0 ", "0 1px 18px 0 ", "0 2px 16px 1px ", "0 3px 14px 2px ", "0 3px 16px 2px ", "0 4px 18px 3px ", "0 4px 20px 3px ", "0 5px 22px 4px ", "0 5px 24px 4px ", "0 5px 26px 4px ", "0 6px 28px 5px ", "0 6px 30px 5px ", "0 6px 32px 5px ", "0 7px 34px 6px ", "0 7px 36px 6px ", "0 8px 38px 7px ", "0 8px 40px 7px ", "0 8px 42px 7px ", "0 9px 44px 8px ", "0 9px 46px 8px "];
            }
            a--;
            if (a < 0) {
                return "";
            }
            if (a > ElevationHelper.a.length - 1) {
                a = ElevationHelper.a.length - 1;
            }
            return ElevationHelper.a[a] + b;
        }
        static e(a, b, c, d, e) {
            if (e == 2) {
                return "0 0 " + a + "px " + (a / 20) + "rem " + b._fill;
            }
            if (a == 0) {
                return "";
            }
            return ElevationHelper.g(a, b._fill) + ", " + ElevationHelper.f(a, c._fill) + ", " + ElevationHelper.d(a, d._fill);
        }
    }
    ElevationHelper.$t = /*@__PURE__*/ markType(ElevationHelper, 'ElevationHelper');
    ElevationHelper.c = null;
    ElevationHelper.b = null;
    ElevationHelper.a = null;
    return ElevationHelper;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let ButtonDisplayStyle_$type = /*@__PURE__*/ markEnum('ButtonDisplayStyle', 'Raised,0|Flat,1|Outlined,2|Fab,3|Icon,4');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let ThemeResolver = /*@__PURE__*/ (() => {
    class ThemeResolver extends Base {
        static e(a, b, c) {
            if (a == 1) {
                return c;
            }
            return b;
        }
        static c(a, b, c) {
            if (a == 1) {
                return c;
            }
            return b;
        }
        static b(a, b, c) {
            if (a == 1) {
                return c;
            }
            return b;
        }
        static d(a, b, c) {
            if (a == 1) {
                return c;
            }
            return b;
        }
        static f(a, b, c) {
            if (a == 1) {
                return c;
            }
            return b;
        }
        static a(a, b, c) {
            if (a == 1) {
                return c;
            }
            return b;
        }
    }
    ThemeResolver.$t = /*@__PURE__*/ markType(ThemeResolver, 'ThemeResolver');
    return ThemeResolver;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let ButtonClickEventArgs = /*@__PURE__*/ (() => {
    class ButtonClickEventArgs extends EventArgs {
    }
    ButtonClickEventArgs.$t = /*@__PURE__*/ markType(ButtonClickEventArgs, 'ButtonClickEventArgs', EventArgs.$);
    return ButtonClickEventArgs;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let ButtonVisualModelExport = /*@__PURE__*/ (() => {
    class ButtonVisualModelExport extends Base {
        constructor() {
            super(...arguments);
            this.s = 0;
            this.q = 0;
            this.p = 0;
            this.t = 0;
            this.h = 0;
            this.i = 0;
            this.c = null;
            this.g = null;
            this.d = null;
            this.a = null;
            this.u = 0;
            this.e = null;
            this.ah = null;
            this.b = null;
            this.j = 0;
            this.f = null;
            this.o = 0;
            this.ae = null;
            this.af = null;
            this.ag = null;
            this.r = 0;
            this.ac = null;
            this.ad = null;
            this.x = null;
            this.y = null;
            this.z = null;
            this.w = null;
            this.v = null;
            this.aa = null;
            this.m = false;
            this.k = false;
            this.n = false;
            this.l = false;
        }
        ab() {
            let a = new StringBuilder(0);
            a.l("{");
            a.l("top : " + this.s + ", ");
            a.l("left : " + this.q + ", ");
            a.l("top : " + this.p + ", ");
            a.l("left : " + this.t + ", ");
            a.l("baseTheme : " + this.h + ", ");
            a.l("actualDensity : " + this.i + ", ");
            a.l("actualBorderColor : " + this.c.serialize() + ", ");
            a.l("actualUmbraShadowColor : " + this.g.serialize() + ", ");
            a.l("actualPenumbraShadowColor : " + this.d.serialize() + ", ");
            a.l("actualAmbientShadowColor : " + this.a.serialize() + ", ");
            a.l("actualRestingElevation : " + this.u + ", ");
            if (this.e != null) {
                a.l("actualRippleColor : " + this.e.serialize() + ", ");
            }
            a.l("actualBackgroundColor : " + this.b.serialize() + ", ");
            a.l("actualElevationMode : " + this.j + ", ");
            a.l("actualTextColor : " + this.f.serialize() + ", ");
            a.l("actualBorderWidth : " + this.o + ", ");
            if (!stringIsNullOrEmpty(this.ae)) {
                a.l("textStyleFontStyle : \"" + this.ae + "\", ");
            }
            if (!stringIsNullOrEmpty(this.af)) {
                a.l("textStyleFontVariant : \"" + this.af + "\", ");
            }
            if (!stringIsNullOrEmpty(this.ag)) {
                a.l("textStyleFontWeight : \"" + this.ag + "\", ");
            }
            if (!stringIsNullOrEmpty(this.ac)) {
                a.l("textStyleFontFamily : \"" + this.ac + "\", ");
            }
            if (!stringIsNullOrEmpty(this.ad)) {
                a.l("textStyleFontStretch : \"" + this.ad + "\", ");
            }
            if (!isNaN_(this.r)) {
                a.l("textStyleFontSize : " + this.r + ", ");
            }
            a.l("display : \"" + this.x + "\", ");
            a.l("flexDirection : \"" + this.y + "\", ");
            a.l("flexGrow : \"" + this.z + "\", ");
            a.l("alignItems : \"" + this.w + "\", ");
            if (this.v != null) {
                a.l("value : \"" + this.v.toString() + "\", ");
            }
            a.l("name : \"" + this.aa + "\", ");
            a.l("isFocused : " + this.m + ", ");
            a.l("actualDisableRipple : " + this.k + ", ");
            a.l("isHover : " + this.n + ", ");
            a.l("isDisabled : " + this.l + ", ");
            a.l("}");
            return a.toString();
        }
    }
    ButtonVisualModelExport.$t = /*@__PURE__*/ markType(ButtonVisualModelExport, 'ButtonVisualModelExport');
    return ButtonVisualModelExport;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let ButtonView = /*@__PURE__*/ (() => {
    class ButtonView extends Base {
        constructor() {
            super();
            this.a = null;
            this.j = null;
            this.c = null;
            this.g = new List$1(Delegate_$type, 0);
            this.d = true;
            this.m = null;
            this.i = NaN;
            this.h = NaN;
            this.k = null;
            this.b = null;
            this.l = null;
            this.o = null;
            this.n = null;
        }
        ai() {
        }
        f() {
            return true;
        }
        get p() {
            return this.m;
        }
        get q() {
            return this.l;
        }
        ac(a) {
            if (a == null) {
                for (let b of fromEnum(this.g)) {
                    b();
                }
                this.g.clear();
                return;
            }
            this.j = a;
            this.j.rootWrapper.setStyleProperty("display", "flex");
            this.j.rootWrapper.setStyleProperty("flex-direction", "row");
            this.j.rootWrapper.setStyleProperty("flex-wrap", "no-wrap");
            this.j.rootWrapper.setStyleProperty("align-items", "center");
            let c = this.j.createElement("button");
            this.m = c;
            this.m.setStyleProperty("position", "relative");
            this.m.setStyleProperty("display", "inline-flex");
            this.m.setStyleProperty("align-items", "center");
            this.m.setStyleProperty("justify-content", "center");
            this.ar();
            this.m.setStyleProperty("border", "none");
            this.m.setStyleProperty("cursor", "pointer");
            this.m.setStyleProperty("user-select", "none");
            this.m.setStyleProperty("outline-style", "none");
            this.m.setStyleProperty("-webkit-tap-highlight-color", "transparent");
            this.m.setStyleProperty("overflow", "hidden");
            this.m.setStyleProperty("white-space", "no-wrap");
            this.m.setStyleProperty("color", "#000");
            this.m.setStyleProperty("background", this.a.m7._fill);
            NativeUI.l(this.m, this.a.kb);
            this.m.setAttribute("id", this.a.h7);
            this.ao();
            this.g.add(c.listen("change", runOn(this, this.v)));
            this.g.add(c.listen("click", runOn(this, this.w)));
            this.g.add(c.listen("focus", runOn(this, this.x)));
            this.g.add(c.listen("blur", runOn(this, this.u)));
            this.g.add(this.j.rootWrapper.listen("mouseenter", runOn(this, this.s)));
            this.g.add(this.j.rootWrapper.listen("mouseleave", runOn(this, this.t)));
            this.j.append(c);
            let d = this.j.createElement("div");
            let e = this.j.getSubRenderer(d);
            d.setStyleProperty("position", "absolute");
            d.setStyleProperty("width", "100%");
            d.setStyleProperty("height", "100%");
            d.setStyleProperty("left", "0px");
            d.setStyleProperty("top", "0px");
            d.setStyleProperty("overflow", "hidden");
            let f = new Ripple();
            f.provideContainer(e);
            f.q = c;
            let g = this.j.getExternal(f, this.j.rootWrapper, this.j.getExternal(this.a, null, null));
            f.h = false;
            f.k = true;
            this.b = f;
            this.m.append(d);
            let h = this.j.createElement("div");
            h.addClass("ig-button-content");
            h.setStyleProperty("font-family", "'Segoe UI', Verdana");
            h.setStyleProperty("font-weight", "400");
            h.setStyleProperty("font-size", ".875rem");
            h.setStyleProperty("cursor", "pointer");
            this.l = h;
            this.g.add(h.listen("click", runOn(this, this.r)));
            this.m.append(h);
            this.n = h;
            this.j.getPortal(h, "ChildContent", (i) => {
                let comp_ = i.componentRef;
                this.o = comp_;
                {
                    this.n.setStyleProperty("flex-direction", this.a.he);
                    this.n.setStyleProperty("align-items", this.a.fv);
                    let direction_ = this.a.he;
                    let display_ = this.a.gb;
                    let alignItems_ = this.a.fv;
                    comp_.display = display_;
                    comp_.flexDirection = direction_;
                    comp_.alignItems = alignItems_;
                }
            }, true);
            this.a.jy();
        }
        ae() {
            this.b.i = this.a.ae;
        }
        ar() {
            let a = "2.25rem";
            let b = "2.25rem";
            let c = "2.25rem";
            let d = "2.25rem";
            let e = "3.5rem";
            let f = "3.5rem";
            let g = "3.5rem";
            let h = "3.5rem";
            let i = "5.5rem";
            let j = "2.25rem";
            let k = "0px";
            let l = ".9375rem";
            let m = ".5625rem 1rem";
            switch (this.a.g) {
                case 2:
                    m = ".375rem .75rem";
                    j = "1.875rem";
                    e = "3rem";
                    f = "3rem";
                    g = "3rem";
                    h = "3rem";
                    l = ".6875rem";
                    break;
                case 3:
                    m = ".1875rem 1rem";
                    j = "1.5rem";
                    f = "2.5rem";
                    e = "2.5rem";
                    h = "2.5rem";
                    g = "2.5rem";
                    l = ".4375rem";
                    break;
            }
            if (this.a.s == 4) {
                this.m.setStyleProperty("min-width", a);
                this.m.setStyleProperty("min-height", b);
                this.m.setStyleProperty("padding", k);
                this.m.setStyleProperty("width", c);
                this.m.setStyleProperty("height", d);
            }
            else if (this.a.s == 3) {
                this.m.setStyleProperty("min-width", e);
                this.m.setStyleProperty("min-height", f);
                this.m.setStyleProperty("padding", l);
                this.m.setStyleProperty("width", g);
                this.m.setStyleProperty("height", h);
            }
            else {
                this.m.setStyleProperty("min-width", i);
                this.m.setStyleProperty("min-height", j);
                this.m.setStyleProperty("padding", m);
            }
            if (!isNaN_(this.a.aw) && this.a.aw > 0) {
                this.m.setStyleProperty("border-style", "solid");
            }
            else {
                this.m.setStyleProperty("border-style", "none");
            }
            if (!isNaN_(this.i)) {
                this.m.setStyleProperty("min-width", this.i.toString() + "px");
            }
            if (!isNaN_(this.h)) {
                this.m.setStyleProperty("min-height", this.h.toString() + "px");
            }
        }
        an(a) {
            this.i = a;
        }
        am(a) {
            this.h = a;
        }
        ak() {
            this.m.setAttribute("disabled", this.a.disabled ? "true" : "false");
            this.m.setProperty("disabled", this.a.disabled);
        }
        af() {
            if (this.j != null) {
                this.j.rootWrapper.setStyleProperty("display", this.a.gb);
                let comp_ = this.o;
                if (this.o != null) {
                    this.n.setStyleProperty("display", this.a.gb);
                    let display_ = this.a.gb;
                    comp_.display = display_;
                }
                let ext_ = this.j.getExternal(this.a, null, null);
                if (ext_ && ext_._onDisplayChanged) {
                    ext_._onDisplayChanged();
                }
                ;
            }
        }
        aa() {
            if (this.j != null) {
                this.j.rootWrapper.setStyleProperty("align-items", this.a.fv);
                this.m.setStyleProperty("align-items", this.a.fv);
                let comp_ = this.o;
                if (this.o != null) {
                    this.n.setStyleProperty("align-items", this.a.fv);
                    let alignItems_ = this.a.fv;
                    comp_.alignItems = alignItems_;
                }
                let ext_ = this.j.getExternal(this.a, null, null);
                if (ext_ && ext_._onAlignItemsChanged) {
                    ext_._onAlignItemsChanged();
                }
                ;
            }
        }
        ag() {
            if (this.j != null) {
                this.j.rootWrapper.setStyleProperty("flex-direction", this.a.he);
                this.m.setStyleProperty("flex-direction", this.a.he);
                let ext_ = this.j.getExternal(this.a, null, null);
                let comp_ = this.o;
                if (this.o != null) {
                    this.n.setStyleProperty("flex-direction", this.a.he);
                    let direction_ = this.a.he;
                    comp_.flexDirection = direction_;
                }
                if (ext_ && ext_._onFlexDirectionChanged) {
                    ext_._onFlexDirectionChanged();
                }
                ;
            }
        }
        ah() {
            if (this.j != null) {
                this.j.rootWrapper.setStyleProperty("flex-grow", this.a.hg);
                this.m.setStyleProperty("flex-grow", this.a.hg);
                let ext_ = this.j.getExternal(this.a, null, null);
                if (ext_ && ext_._onFlexGrowChanged) {
                    ext_._onFlexGrowChanged();
                }
                ;
            }
        }
        r(a) {
        }
        ao() {
            if (this.f()) {
                let a = this.a.h7;
                this.m.setAttribute("name", this.a.ig);
                this.m.setProperty("value", this.a.ez);
                if (this.a.ah) {
                    this.m.setAttribute("tabindex", this.a.eu.toString());
                }
                this.m.setProperty("disabled", this.a.disabled);
                {
                }
                this.m.setAttribute("aria-label", this.a.fx);
            }
        }
        aj() {
            if (this.f()) {
                let a = this.a.h7;
                this.m.setAttribute("id", a);
            }
        }
        s(a) {
            this.a.jv();
        }
        t(a) {
            this.a.jw();
        }
        u(a) {
            this.a.jr();
        }
        x(a) {
            this.a.ju();
        }
        w(a) {
            this.a.js();
        }
        e() {
            return false;
        }
        v(a) {
        }
        z() {
            if (KeyFrameAnimationFactory.h == null) {
                KeyFrameAnimationFactory.h = this.j;
            }
        }
        ab() {
            this.d = true;
            this.g.add(this.m.listen("change", runOn(this, this.v)));
            this.g.add(this.m.listen("click", runOn(this, this.w)));
            this.g.add(this.m.listen("focus", runOn(this, this.x)));
            this.g.add(this.m.listen("blur", runOn(this, this.u)));
            this.g.add(this.l.listen("click", runOn(this, this.r)));
            this.g.add(this.m.listen("mouseenter", runOn(this, this.s)));
            this.g.add(this.m.listen("mouseleave", runOn(this, this.t)));
        }
        ad() {
            this.d = false;
            for (let a of fromEnum(this.g)) {
                a();
            }
            this.g.clear();
        }
        al() {
            let model_ = this.a;
            if (model_.externalObject && model_.externalObject.refreshDefaults) {
                model_.externalObject.refreshDefaults();
            }
            ;
        }
        ap(a, b) {
            this.b.ax = a;
            this.b.aw = b;
        }
        aq(a, b) {
            let c = ElevationHelper.e(a, this.a.nj, this.a.ng, this.a.m6, b);
            this.m.setStyleProperty("box-shadow", c);
        }
        as(a) {
            if (a != null) {
                this.l.setStyleProperty("font", a.fontString);
            }
        }
        y(a) {
            this.l.append(a);
        }
    }
    ButtonView.$t = /*@__PURE__*/ markType(ButtonView, 'ButtonView');
    return ButtonView;
})();
/**
 * @hidden
 */
let Button = /*@__PURE__*/ (() => {
    class Button extends Base {
        constructor() {
            super();
            this._view = null;
            this.sf = ThemeResolver.e(Button.c, Button.rr, Button.o8);
            this.r3 = ThemeResolver.e(Button.c, Button.rf, Button.ow);
            this.nm = ThemeResolver.e(Button.c, Button.p6, Button.nn);
            this.m = ThemeResolver.a(Button.c, Button.n, Button.l);
            this.r6 = ThemeResolver.e(Button.c, Button.ri, Button.oz);
            this.r7 = ThemeResolver.e(Button.c, Button.rj, Button.o0);
            this.r8 = ThemeResolver.e(Button.c, Button.rk, Button.o1);
            this.d2 = ThemeResolver.c(Button.c, Button.du, Button.cx);
            this.d5 = ThemeResolver.c(Button.c, Button.dx, Button.c0);
            this.d4 = ThemeResolver.c(Button.c, Button.dw, Button.cz);
            this.d3 = ThemeResolver.c(Button.c, Button.dv, Button.cy);
            this.r5 = ThemeResolver.e(Button.c, Button.rh, Button.oy);
            this.sd = ThemeResolver.e(Button.c, Button.rp, Button.o6);
            this.ks = ThemeResolver.d(Button.c, Button.kq, Button.ki);
            this.bc = ThemeResolver.b(Button.c, Button.ba, Button.a2);
            this.r4 = ThemeResolver.e(Button.c, Button.rg, Button.ox);
            this.se = ThemeResolver.e(Button.c, Button.rq, Button.o7);
            this.sc = ThemeResolver.e(Button.c, Button.ro, Button.o5);
            this.sb = ThemeResolver.e(Button.c, Button.rn, Button.o4);
            this.r9 = ThemeResolver.e(Button.c, Button.rl, Button.o2);
            this.sa = ThemeResolver.e(Button.c, Button.rm, Button.o3);
            this.pm = ThemeResolver.e(Button.c, Button.qk, Button.n1);
            this.pn = ThemeResolver.e(Button.c, Button.ql, Button.n2);
            this.po = ThemeResolver.e(Button.c, Button.qm, Button.n3);
            this.c5 = ThemeResolver.c(Button.c, Button.dh, Button.cl);
            this.c8 = ThemeResolver.c(Button.c, Button.dk, Button.co);
            this.c7 = ThemeResolver.c(Button.c, Button.dj, Button.cn);
            this.c6 = ThemeResolver.c(Button.c, Button.di, Button.cm);
            this.pl = ThemeResolver.e(Button.c, Button.qj, Button.n0);
            this.pt = ThemeResolver.e(Button.c, Button.qr, Button.n8);
            this.kk = ThemeResolver.d(Button.c, Button.kn, Button.kf);
            this.a4 = ThemeResolver.b(Button.c, Button.a7, Button.az);
            this.pk = ThemeResolver.e(Button.c, Button.qi, Button.nz);
            this.pu = ThemeResolver.e(Button.c, Button.qs, Button.n9);
            this.ps = ThemeResolver.e(Button.c, Button.qq, Button.n7);
            this.pr = ThemeResolver.e(Button.c, Button.qp, Button.n6);
            this.pp = ThemeResolver.e(Button.c, Button.qn, Button.n4);
            this.pq = ThemeResolver.e(Button.c, Button.qo, Button.n5);
            this.ru = ThemeResolver.e(Button.c, Button.q6, Button.on);
            this.rv = ThemeResolver.e(Button.c, Button.q7, Button.oo);
            this.rw = ThemeResolver.e(Button.c, Button.q8, Button.op);
            this.dy = ThemeResolver.c(Button.c, Button.dq, Button.ct);
            this.d1 = ThemeResolver.c(Button.c, Button.dt, Button.cw);
            this.d0 = ThemeResolver.c(Button.c, Button.ds, Button.cv);
            this.dz = ThemeResolver.c(Button.c, Button.dr, Button.cu);
            this.rt = ThemeResolver.e(Button.c, Button.q5, Button.om);
            this.r1 = ThemeResolver.e(Button.c, Button.rd, Button.ou);
            this.kr = ThemeResolver.d(Button.c, Button.kp, Button.kh);
            this.bb = ThemeResolver.b(Button.c, Button.a9, Button.a1);
            this.rs = ThemeResolver.e(Button.c, Button.q4, Button.ol);
            this.r2 = ThemeResolver.e(Button.c, Button.re, Button.ov);
            this.r0 = ThemeResolver.e(Button.c, Button.rc, Button.ot);
            this.rz = ThemeResolver.e(Button.c, Button.rb, Button.os);
            this.rx = ThemeResolver.e(Button.c, Button.q9, Button.oq);
            this.ry = ThemeResolver.e(Button.c, Button.ra, Button.or);
            this.px = ThemeResolver.e(Button.c, Button.qv, Button.oc);
            this.py = ThemeResolver.e(Button.c, Button.qw, Button.od);
            this.pz = ThemeResolver.e(Button.c, Button.qx, Button.oe);
            this.c9 = ThemeResolver.c(Button.c, Button.dl, Button.cp);
            this.dc = ThemeResolver.c(Button.c, Button.dp, Button.cs);
            this.db = ThemeResolver.c(Button.c, Button.dn, Button.cr);
            this.da = ThemeResolver.c(Button.c, Button.dm, Button.cq);
            this.pw = ThemeResolver.e(Button.c, Button.qu, Button.ob);
            this.p4 = ThemeResolver.e(Button.c, Button.q2, Button.oj);
            this.kl = ThemeResolver.d(Button.c, Button.ko, Button.kg);
            this.a5 = ThemeResolver.b(Button.c, Button.a8, Button.a0);
            this.pv = ThemeResolver.e(Button.c, Button.qt, Button.oa);
            this.p5 = ThemeResolver.e(Button.c, Button.q3, Button.ok);
            this.p3 = ThemeResolver.e(Button.c, Button.q1, Button.oi);
            this.p2 = ThemeResolver.e(Button.c, Button.q0, Button.oh);
            this.p0 = ThemeResolver.e(Button.c, Button.qy, Button.of);
            this.p1 = ThemeResolver.e(Button.c, Button.qz, Button.og);
            this.pb = ThemeResolver.e(Button.c, Button.p9, Button.nq);
            this.pc = ThemeResolver.e(Button.c, Button.qa, Button.nr);
            this.pd = ThemeResolver.e(Button.c, Button.qb, Button.ns);
            this.c1 = ThemeResolver.c(Button.c, Button.dd, Button.ch);
            this.c4 = ThemeResolver.c(Button.c, Button.dg, Button.ck);
            this.c3 = ThemeResolver.c(Button.c, Button.df, Button.cj);
            this.c2 = ThemeResolver.c(Button.c, Button.de, Button.ci);
            this.pa = ThemeResolver.e(Button.c, Button.p8, Button.np);
            this.pi = ThemeResolver.e(Button.c, Button.qg, Button.nx);
            this.kj = ThemeResolver.d(Button.c, Button.km, Button.ke);
            this.a3 = ThemeResolver.b(Button.c, Button.a6, Button.ay);
            this.o9 = ThemeResolver.e(Button.c, Button.p7, Button.no);
            this.pj = ThemeResolver.e(Button.c, Button.qh, Button.ny);
            this.ph = ThemeResolver.e(Button.c, Button.qf, Button.nw);
            this.pg = ThemeResolver.e(Button.c, Button.qe, Button.nv);
            this.pe = ThemeResolver.e(Button.c, Button.qc, Button.nt);
            this.pf = ThemeResolver.e(Button.c, Button.qd, Button.nu);
            this.at = NaN;
            this.as = NaN;
            this.r = 0;
            this.f = 0;
            this.b = 0;
            this.e = 1;
            this.k0 = ThemeResolver.e(Button.c, Button.rh, Button.oy);
            this.lb = ThemeResolver.e(Button.c, Button.rr, Button.o8);
            this.k8 = ThemeResolver.e(Button.c, Button.rf, Button.ow);
            this.ky = ThemeResolver.e(Button.c, Button.p6, Button.nn);
            this.bn = ThemeResolver.c(Button.c, Button.dx, Button.c0);
            this.bl = ThemeResolver.c(Button.c, Button.dv, Button.cy);
            this.bm = ThemeResolver.c(Button.c, Button.dw, Button.cz);
            this.k9 = ThemeResolver.e(Button.c, Button.rp, Button.o6);
            this.j4 = ThemeResolver.d(Button.c, Button.kq, Button.ki);
            this.kz = ThemeResolver.e(Button.c, Button.rg, Button.ox);
            this.k1 = ThemeResolver.e(Button.c, Button.ri, Button.oz);
            this.k2 = ThemeResolver.e(Button.c, Button.rj, Button.o0);
            this.k3 = ThemeResolver.e(Button.c, Button.rk, Button.o1);
            this.bk = ThemeResolver.c(Button.c, Button.du, Button.cx);
            this.i = ThemeResolver.a(Button.c, Button.n, Button.l);
            this.la = ThemeResolver.e(Button.c, Button.rq, Button.o7);
            this.k7 = ThemeResolver.e(Button.c, Button.ro, Button.o5);
            this.k4 = ThemeResolver.e(Button.c, Button.rl, Button.o2);
            this.k5 = ThemeResolver.e(Button.c, Button.rm, Button.o3);
            this.k6 = ThemeResolver.e(Button.c, Button.rn, Button.o4);
            this.an = ThemeResolver.b(Button.c, Button.ba, Button.a2);
            this.mt = null;
            this.mv = null;
            this.mw = null;
            this.mx = null;
            this.b7 = -1;
            this.m0 = null;
            this.mu = null;
            this.ca = -1;
            this.b9 = -1;
            this.b8 = -1;
            this.av = NaN;
            this.ka = new CornerRadius(1, NaN, NaN, NaN, NaN);
            this.m2 = null;
            this.lr = null;
            this.lt = null;
            this.lu = null;
            this.lv = null;
            this.bt = -1;
            this.ly = null;
            this.ls = null;
            this.bw = -1;
            this.bv = -1;
            this.bu = -1;
            this.l0 = null;
            this.l1 = null;
            this.lz = null;
            this.lw = null;
            this.lx = null;
            this.aq = NaN;
            this.j7 = new CornerRadius(1, NaN, NaN, NaN, NaN);
            this.lc = null;
            this.le = null;
            this.lf = null;
            this.lg = null;
            this.bo = -1;
            this.j = 0;
            this.l4 = null;
            this.ld = null;
            this.cb = -1;
            this.by = -1;
            this.bx = -1;
            this.u = null;
            this.m5 = null;
            this.l6 = null;
            this.m4 = null;
            this.m3 = null;
            this.m1 = null;
            this.my = null;
            this.mz = null;
            this.l2 = null;
            this.l3 = null;
            this.ao = NaN;
            this.j5 = new CornerRadius(1, NaN, NaN, NaN, NaN);
            this.mi = null;
            this.mk = null;
            this.ml = null;
            this.mm = null;
            this.b3 = -1;
            this.mp = null;
            this.mj = null;
            this.b6 = -1;
            this.b5 = -1;
            this.b4 = -1;
            this.au = NaN;
            this.j9 = new CornerRadius(1, NaN, NaN, NaN, NaN);
            this.mr = null;
            this.ms = null;
            this.mq = null;
            this.mn = null;
            this.mo = null;
            this.lh = null;
            this.lj = null;
            this.lk = null;
            this.ll = null;
            this.bp = -1;
            this.l5 = null;
            this.li = null;
            this.bs = -1;
            this.br = -1;
            this.bq = -1;
            this.ap = NaN;
            this.j6 = new CornerRadius(1, NaN, NaN, NaN, NaN);
            this.lp = null;
            this.lq = null;
            this.lo = null;
            this.lm = null;
            this.ln = null;
            this.l7 = null;
            this.l9 = null;
            this.ma = null;
            this.mb = null;
            this.bz = -1;
            this.me = null;
            this.l8 = null;
            this.b2 = -1;
            this.b1 = -1;
            this.b0 = -1;
            this.ar = NaN;
            this.j8 = new CornerRadius(1, NaN, NaN, NaN, NaN);
            this.mg = null;
            this.mh = null;
            this.mf = null;
            this.mc = null;
            this.md = null;
            this.e6 = "ig-native-button-" + Button.ew++;
            this.e5 = "ig-button-" + Button.ev++;
            this.e2 = "inline-block";
            this.e3 = "inline-block";
            this.e4 = null;
            this.e0 = "center";
            this.ex = null;
            this.e7 = null;
            this.cc = 0;
            this.z = false;
            this.ab = false;
            this.ac = true;
            this.e1 = null;
            this.x = false;
            this.w = false;
            this.ad = false;
            this.aa = false;
            this.y = false;
            this.propertyChanged = null;
            this.clicked = null;
            let a = new ButtonView();
            a.a = this;
            this.view = a;
            this.view.ai();
        }
        get view() {
            return this._view;
        }
        set view(a) {
            this._view = a;
        }
        destroy() {
            this.provideContainer(null);
        }
        jx(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            this.jz(a, b, c);
        }
        jz(a, b, c) {
            switch (a) {
                case "CornerRadius":
                case "BorderColor":
                case "RestingElevation":
                case "HoverElevation":
                case "FocusElevation":
                case "RippleColor":
                case "BorderWidth":
                case "BackgroundColor":
                case "DisabledBackgroundColor":
                case "DisabledBorderColor":
                case "DisabledTextColor":
                case "DisabledElevation":
                case "HoverBackgroundColor":
                case "TextStyle":
                case "FocusTextColor":
                case "TextColor":
                case "HoverTextColor":
                case "FocusBackgroundColor":
                case "RaisedBorderColor":
                case "RaisedRestingElevation":
                case "RaisedFocusElevation":
                case "RaisedHoverElevation":
                case "RaisedRippleColor":
                case "RaisedBorderWidth":
                case "RaisedBackgroundColor":
                case "RaisedDisabledBackgroundColor":
                case "RaisedDisabledBorderColor":
                case "RaisedDisabledTextColor":
                case "RaisedDisabledElevation":
                case "RaisedHoverBackgroundColor":
                case "RaisedCornerRadius":
                case "RaisedFocusBackgroundColor":
                case "RaisedFocusTextColor":
                case "RaisedTextColor":
                case "RaisedHoverTextColor":
                case "FlatBorderColor":
                case "FlatRestingElevation":
                case "FlatFocusElevation":
                case "FlatHoverElevation":
                case "FlatRippleColor":
                case "FlatBorderWidth":
                case "FlatBackgroundColor":
                case "FlatDisabledBackgroundColor":
                case "FlatDisabledBorderColor":
                case "FlatDisabledTextColor":
                case "FlatDisabledElevation":
                case "FlatHoverBackgroundColor":
                case "FlatCornerRadius":
                case "FlatFocusBackgroundColor":
                case "FlatFocusTextColor":
                case "FlatTextColor":
                case "FlatHoverTextColor":
                case "OutlinedRippleColor":
                case "OutlinedRestingElevation":
                case "OutlinedFocusElevation":
                case "OutlinedHoverElevation":
                case "OutlinedBorderColor":
                case "OutlinedBorderWidth":
                case "OutlinedBackgroundColor":
                case "OutlinedDisabledBackgroundColor":
                case "OutlinedDisabledBorderColor":
                case "OutlinedDisabledTextColor":
                case "OutlinedDisabledElevation":
                case "OutlinedHoverBackgroundColor":
                case "OutlinedCornerRadius":
                case "OutlinedFocusBackgroundColor":
                case "OutlinedFocusTextColor":
                case "OutlinedTextColor":
                case "OutlinedHoverTextColor":
                case "FabBorderColor":
                case "FabRippleColor":
                case "FabRestingElevation":
                case "FabFocusElevation":
                case "FabHoverElevation":
                case "FabBorderWidth":
                case "FabBackgroundColor":
                case "FabDisabledBackgroundColor":
                case "FabDisabledBorderColor":
                case "FabDisabledTextColor":
                case "FabDisabledElevation":
                case "FabHoverBackgroundColor":
                case "FabCornerRadius":
                case "FabFocusBackgroundColor":
                case "FabFocusTextColor":
                case "FabTextColor":
                case "FabHoverTextColor":
                case "IconRestingElevation":
                case "IconFocusElevation":
                case "IconHoverElevation":
                case "IconBorderColor":
                case "IconRippleColor":
                case "IconBorderWidth":
                case "IconBackgroundColor":
                case "IconDisabledBackgroundColor":
                case "IconDisabledBorderColor":
                case "IconDisabledTextColor":
                case "IconDisabledElevation":
                case "IconHoverBackgroundColor":
                case "IconCornerRadius":
                case "IconFocusBackgroundColor":
                case "IconFocusTextColor":
                case "IconTextColor":
                case "IconHoverTextColor":
                case "ElevationMode":
                    this.j2();
                    break;
                case "BaseTheme":
                    this.j3(this.d == 0 ? 2 : this.d);
                    this.j2();
                    break;
                case "IsDisabled":
                    this.ae = this.disabled || this.af;
                    this.j2();
                    this.view.ak();
                    break;
                case "DisableRipple":
                    this.ae = this.disabled || this.af;
                    this.j2();
                    break;
                case "ActualDisableRipple":
                    this.view.ae();
                    break;
                case "ActualBackgroundColor":
                case "ActualDisabledBackgroundColor":
                case "ActualDisabledBorderColor":
                case "ActualDisabledTextColor":
                case "ActualDisabledElevation":
                case "ActualHoverBackgroundColor":
                case "ActualBorderColor":
                case "ActualFocusTextColor":
                case "ActualHoverTextColor":
                case "ActualElevationMode":
                    this.j1();
                    break;
                case "Density":
                    this.g = this.h == 0 ? 1 : this.h;
                    break;
                case "ActualDensity":
                case "ActualBorderWidth":
                case "ActualCornerRadius":
                    this.view.ar();
                    this.j1();
                    break;
                case "DisplayType":
                    this.view.ar();
                    this.j2();
                    this.j1();
                    break;
                case "InputId":
                    this.view.aj();
                    break;
                case "Display":
                    this.view.af();
                    break;
                case "FlexDirection":
                    this.view.ag();
                    break;
                case "FlexGrow":
                    this.view.ah();
                    break;
                case "AlignItems":
                    this.view.aa();
                    break;
                case "MinWidth":
                    this.view.an(this.bh);
                    this.view.ar();
                    break;
                case "MinHeight":
                    this.view.am(this.bg);
                    this.view.ar();
                    break;
                case "TabIndex":
                    this.view.ao();
                    break;
            }
        }
        kc(a, b) {
            return new CornerRadius(1, !isNaN_(a.c) ? a.c : b.c, !isNaN_(a.d) ? a.d : b.d, !isNaN_(a.b) ? a.b : b.b, !isNaN_(a.a) ? a.a : b.a);
        }
        j2() {
            this.k = this.o != 0 ? this.o : this.m;
            this.nj = this.sf;
            this.ng = this.r3;
            this.m6 = this.nm;
            switch (this.s) {
                case 0:
                    this.m9 = this.sg != null ? this.sg : this.tx != null ? this.tx : this.r6;
                    this.na = this.sh != null ? this.sh : this.ty != null ? this.ty : this.r7;
                    this.nb = this.si != null ? this.si : this.tz != null ? this.tz : this.r8;
                    this.cd = this.d6 >= 0 ? this.d6 : this.ep >= 0 ? this.ep : this.d2;
                    this.cg = this.et >= 0 ? this.et : this.es >= 0 ? this.es : this.d5;
                    this.cf = this.eg >= 0 ? this.eg : this.er >= 0 ? this.er : this.d4;
                    this.ce = this.ef >= 0 ? this.ef : this.eq >= 0 ? this.eq : this.d3;
                    this.m8 = this.nl != null ? this.nl : this.tw != null ? this.tw : this.r5;
                    this.m7 = this.nk != null ? this.nk : this.tv != null ? this.tv : this.r4;
                    this.ne = this.s7 != null ? this.s7 : this.t2 != null ? this.t2 : this.sb;
                    this.kb = this.kc(this.kd, this.kc(this.kx, this.ks));
                    this.aw = !isNaN_(this.ax) ? this.ax : !isNaN_(this.bj) ? this.bj : this.bc;
                    this.nh = this.t6 != null ? this.t6 : this.t4 != null ? this.t4 : this.sd;
                    this.nc = this.s5 != null ? this.s5 : this.t0 != null ? this.t0 : this.r9;
                    this.nd = this.s6 != null ? this.s6 : this.t1 != null ? this.t1 : this.sa;
                    this.ni = this.t7 != null ? this.t7 : this.t5 != null ? this.t5 : this.se;
                    this.nf = this.s8 != null ? this.s8 : this.t3 != null ? this.t3 : this.sc;
                    break;
                case 2:
                    this.m9 = this.sg != null ? this.sg : this.tm != null ? this.tm : this.ru;
                    this.na = this.sh != null ? this.sh : this.tn != null ? this.tn : this.rv;
                    this.nb = this.si != null ? this.si : this.to != null ? this.to : this.rw;
                    this.cd = this.d6 >= 0 ? this.d6 : this.el >= 0 ? this.el : this.dy;
                    this.cg = this.et >= 0 ? this.et : this.eo >= 0 ? this.eo : this.d1;
                    this.cf = this.eg >= 0 ? this.eg : this.en >= 0 ? this.en : this.d0;
                    this.ce = this.ef >= 0 ? this.ef : this.em >= 0 ? this.em : this.dz;
                    this.m8 = this.nl != null ? this.nl : this.tl != null ? this.tl : this.rt;
                    this.m7 = this.s7 != null ? this.s7 : this.nk != null ? this.nk : this.tk != null ? this.tk : this.rs;
                    this.ne = this.tr != null ? this.tr : this.rz;
                    this.kb = this.kc(this.kd, this.kc(this.kw, this.kr));
                    this.aw = !isNaN_(this.ax) ? this.ax : !isNaN_(this.bi) ? this.bi : this.bb;
                    this.nh = this.t6 != null ? this.t6 : this.tt != null ? this.tt : this.r1;
                    this.nc = this.s5 != null ? this.s5 : this.tp != null ? this.tp : this.rx;
                    this.nd = this.s6 != null ? this.s6 : this.tq != null ? this.tq : this.ry;
                    this.ni = this.t7 != null ? this.t7 : this.tu != null ? this.tu : this.r2;
                    this.nf = this.s8 != null ? this.s8 : this.ts != null ? this.ts : this.r0;
                    break;
                case 1:
                    this.m9 = this.sg != null ? this.sg : this.sw != null ? this.sw : this.pm;
                    this.na = this.sh != null ? this.sh : this.sx != null ? this.sx : this.pn;
                    this.nb = this.si != null ? this.si : this.sy != null ? this.sy : this.po;
                    this.cd = this.d6 >= 0 ? this.d6 : this.eb >= 0 ? this.eb : this.c5;
                    this.cg = this.et >= 0 ? this.et : this.ee >= 0 ? this.ee : this.c8;
                    this.cf = this.eg >= 0 ? this.eg : this.ed >= 0 ? this.ed : this.c7;
                    this.ce = this.ef >= 0 ? this.ef : this.ec >= 0 ? this.ec : this.c6;
                    this.m8 = this.nl != null ? this.nl : this.sv != null ? this.sv : this.pl;
                    this.m7 = this.nk != null ? this.nk : this.su != null ? this.su : this.pk;
                    this.ne = this.s7 != null ? this.s7 : this.s1 != null ? this.s1 : this.pr;
                    this.kb = this.kc(this.kd, this.kc(this.ku, this.kk));
                    this.aw = !isNaN_(this.ax) ? this.ax : !isNaN_(this.be) ? this.be : this.a4;
                    this.nh = this.t6 != null ? this.t6 : this.s3 != null ? this.s3 : this.pt;
                    this.nc = this.s5 != null ? this.s5 : this.sz != null ? this.sz : this.pp;
                    this.nd = this.s6 != null ? this.s6 : this.s0 != null ? this.s0 : this.pq;
                    this.ni = this.t7 != null ? this.t7 : this.s4 != null ? this.s4 : this.pu;
                    this.nf = this.s8 != null ? this.s8 : this.s2 != null ? this.s2 : this.ps;
                    break;
                case 4:
                    this.m9 = this.sg != null ? this.sg : this.tb != null ? this.tb : this.px;
                    this.na = this.sh != null ? this.sh : this.tc != null ? this.tc : this.py;
                    this.nb = this.si != null ? this.si : this.td != null ? this.td : this.pz;
                    this.cd = this.d6 >= 0 ? this.d6 : this.eh >= 0 ? this.eh : this.c9;
                    this.cg = this.et >= 0 ? this.et : this.ek >= 0 ? this.ek : this.dc;
                    this.cf = this.eg >= 0 ? this.eg : this.ej >= 0 ? this.ej : this.db;
                    this.ce = this.ef >= 0 ? this.ef : this.ei >= 0 ? this.ei : this.da;
                    this.m8 = this.nl != null ? this.nl : this.ta != null ? this.ta : this.pw;
                    this.m7 = this.nk != null ? this.nk : this.s9 != null ? this.s9 : this.pv;
                    this.ne = this.s7 != null ? this.s7 : this.tg != null ? this.tg : this.p2;
                    this.kb = this.kc(this.kd, this.kc(this.kv, this.kl));
                    this.aw = !isNaN_(this.ax) ? this.ax : !isNaN_(this.bf) ? this.bf : this.a5;
                    this.nh = this.t6 != null ? this.t6 : this.ti != null ? this.ti : this.p4;
                    this.nc = this.s5 != null ? this.s5 : this.te != null ? this.te : this.p0;
                    this.nd = this.s6 != null ? this.s6 : this.tf != null ? this.tf : this.p1;
                    this.ni = this.t7 != null ? this.t7 : this.tj != null ? this.tj : this.p5;
                    this.nf = this.s8 != null ? this.s8 : this.th != null ? this.th : this.p3;
                    break;
                case 3:
                    this.m9 = this.sg != null ? this.sg : this.sl != null ? this.sl : this.pb;
                    this.na = this.sh != null ? this.sh : this.sm != null ? this.sm : this.pc;
                    this.nb = this.si != null ? this.si : this.sn != null ? this.sn : this.pd;
                    this.cd = this.d6 >= 0 ? this.d6 : this.d7 >= 0 ? this.d7 : this.c1;
                    this.cg = this.et >= 0 ? this.et : this.ea >= 0 ? this.ea : this.c4;
                    this.cf = this.eg >= 0 ? this.eg : this.d9 >= 0 ? this.d9 : this.c3;
                    this.ce = this.ef >= 0 ? this.ef : this.d8 >= 0 ? this.d8 : this.c2;
                    this.m8 = this.nl != null ? this.nl : this.sk != null ? this.sk : this.pa;
                    this.m7 = this.nk != null ? this.nk : this.sj != null ? this.sj : this.o9;
                    this.ne = this.s7 != null ? this.s7 : this.sq != null ? this.sq : this.pg;
                    this.kb = this.kc(this.kd, this.kc(this.kt, this.kj));
                    this.aw = !isNaN_(this.ax) ? this.ax : !isNaN_(this.bd) ? this.bd : this.a3;
                    this.nh = this.t6 != null ? this.t6 : this.ss != null ? this.ss : this.sd;
                    this.nc = this.s5 != null ? this.s5 : this.so != null ? this.so : this.pe;
                    this.nd = this.s6 != null ? this.s6 : this.sp != null ? this.sp : this.pf;
                    this.ni = this.t7 != null ? this.t7 : this.st != null ? this.st : this.pj;
                    this.nf = this.s8 != null ? this.s8 : this.sr != null ? this.sr : this.ph;
                    break;
            }
        }
        js() {
            if (this.disabled) {
                return;
            }
            if (this.clicked != null) {
                this.clicked(this, new ButtonClickEventArgs());
            }
        }
        jr() {
            this.focused = false;
            this.j1();
        }
        ju() {
            this.focused = true;
            this.j1();
        }
        jw() {
            this.al = false;
            this.j1();
        }
        jv() {
            this.al = true;
            this.j1();
        }
        j1() {
            let a = this.view.p;
            NativeUI.l(a, this.kb);
            NativeUI.k(a, this.m8);
            if (!isNaN_(this.aw)) {
                NativeUI.m(a, new Thickness(0, this.aw));
            }
            if (this.disabled) {
                this.view.aq(this.cd, this.k);
            }
            else if (this.focused && this.ak) {
                this.view.aq(this.ce, this.k);
            }
            else {
                if (this.al) {
                    this.view.aq(this.cf, this.k);
                }
                else {
                    this.view.aq(this.cg, this.k);
                }
            }
            if (this.disabled) {
                NativeUI.j(a, this.m9);
            }
            else if (this.focused && this.ak) {
                NativeUI.j(a, this.nc);
            }
            else {
                if (this.al) {
                    NativeUI.j(a, this.ne);
                }
                else {
                    NativeUI.j(a, this.m7);
                }
            }
            this.view.ap(this.nh, BrushUtil.g(0, 0, 0, 0));
            if (this.v != null) {
                this.view.as(this.v);
            }
            if (this.disabled) {
                NativeUI.n(this.view.q, this.nb);
                NativeUI.o(this.view.q, this.nb);
            }
            else if (this.focused && this.ak) {
                NativeUI.n(this.view.q, this.nd);
                NativeUI.o(this.view.q, this.nd);
            }
            else {
                if (this.al) {
                    NativeUI.n(this.view.q, this.nf);
                    NativeUI.o(this.view.q, this.nf);
                }
                else {
                    NativeUI.n(this.view.q, this.ni);
                    NativeUI.o(this.view.q, this.ni);
                }
            }
        }
        j3(a) {
            this.sf = ThemeResolver.e(a, Button.rr, Button.o8);
            this.r3 = ThemeResolver.e(a, Button.rf, Button.ow);
            this.nm = ThemeResolver.e(a, Button.p6, Button.nn);
            this.m = ThemeResolver.a(a, Button.n, Button.l);
            this.r6 = ThemeResolver.e(a, Button.ri, Button.oz);
            this.r7 = ThemeResolver.e(a, Button.rj, Button.o0);
            this.r8 = ThemeResolver.e(a, Button.rk, Button.o1);
            this.d2 = ThemeResolver.c(a, Button.du, Button.cx);
            this.d5 = ThemeResolver.c(a, Button.dx, Button.c0);
            this.d4 = ThemeResolver.c(a, Button.dw, Button.cz);
            this.d3 = ThemeResolver.c(a, Button.dv, Button.cy);
            this.r5 = ThemeResolver.e(a, Button.rh, Button.oy);
            this.sd = ThemeResolver.e(a, Button.rp, Button.o6);
            this.ks = ThemeResolver.d(a, Button.kq, Button.ki);
            this.bc = ThemeResolver.b(a, Button.ba, Button.a2);
            this.r4 = ThemeResolver.e(a, Button.rg, Button.ox);
            this.se = ThemeResolver.e(a, Button.rq, Button.o7);
            this.sc = ThemeResolver.e(a, Button.ro, Button.o5);
            this.sb = ThemeResolver.e(a, Button.rn, Button.o4);
            this.r9 = ThemeResolver.e(a, Button.rl, Button.o2);
            this.sa = ThemeResolver.e(a, Button.rm, Button.o3);
            this.pm = ThemeResolver.e(a, Button.qk, Button.n1);
            this.pn = ThemeResolver.e(a, Button.ql, Button.n2);
            this.po = ThemeResolver.e(a, Button.qm, Button.n3);
            this.c5 = ThemeResolver.c(a, Button.dh, Button.cl);
            this.c8 = ThemeResolver.c(a, Button.dk, Button.co);
            this.c7 = ThemeResolver.c(a, Button.dj, Button.cn);
            this.c6 = ThemeResolver.c(a, Button.di, Button.cm);
            this.pl = ThemeResolver.e(a, Button.qj, Button.n0);
            this.pt = ThemeResolver.e(a, Button.qr, Button.n8);
            this.kk = ThemeResolver.d(a, Button.kn, Button.kf);
            this.a4 = ThemeResolver.b(a, Button.a7, Button.az);
            this.pk = ThemeResolver.e(a, Button.qi, Button.nz);
            this.pu = ThemeResolver.e(a, Button.qs, Button.n9);
            this.ps = ThemeResolver.e(a, Button.qq, Button.n7);
            this.pr = ThemeResolver.e(a, Button.qp, Button.n6);
            this.pp = ThemeResolver.e(a, Button.qn, Button.n4);
            this.pq = ThemeResolver.e(a, Button.qo, Button.n5);
            this.ru = ThemeResolver.e(a, Button.q6, Button.on);
            this.rv = ThemeResolver.e(a, Button.q7, Button.oo);
            this.rw = ThemeResolver.e(a, Button.q8, Button.op);
            this.dy = ThemeResolver.c(a, Button.dq, Button.ct);
            this.d1 = ThemeResolver.c(a, Button.dt, Button.cw);
            this.d0 = ThemeResolver.c(a, Button.ds, Button.cv);
            this.dz = ThemeResolver.c(a, Button.dr, Button.cu);
            this.rt = ThemeResolver.e(a, Button.q5, Button.om);
            this.r1 = ThemeResolver.e(a, Button.rd, Button.ou);
            this.kr = ThemeResolver.d(a, Button.kp, Button.kh);
            this.bb = ThemeResolver.b(a, Button.a9, Button.a1);
            this.rs = ThemeResolver.e(a, Button.q4, Button.ol);
            this.r2 = ThemeResolver.e(a, Button.re, Button.ov);
            this.r0 = ThemeResolver.e(a, Button.rc, Button.ot);
            this.rz = ThemeResolver.e(a, Button.rb, Button.os);
            this.rx = ThemeResolver.e(a, Button.q9, Button.oq);
            this.ry = ThemeResolver.e(a, Button.ra, Button.or);
            this.px = ThemeResolver.e(a, Button.qv, Button.oc);
            this.py = ThemeResolver.e(a, Button.qw, Button.od);
            this.pz = ThemeResolver.e(a, Button.qx, Button.oe);
            this.c9 = ThemeResolver.c(a, Button.dl, Button.cp);
            this.dc = ThemeResolver.c(a, Button.dp, Button.cs);
            this.db = ThemeResolver.c(a, Button.dn, Button.cr);
            this.da = ThemeResolver.c(a, Button.dm, Button.cq);
            this.pw = ThemeResolver.e(a, Button.qu, Button.ob);
            this.p4 = ThemeResolver.e(a, Button.q2, Button.oj);
            this.kl = ThemeResolver.d(a, Button.ko, Button.kg);
            this.a5 = ThemeResolver.b(a, Button.a8, Button.a0);
            this.pv = ThemeResolver.e(a, Button.qt, Button.oa);
            this.p5 = ThemeResolver.e(a, Button.q3, Button.ok);
            this.p3 = ThemeResolver.e(a, Button.q1, Button.oi);
            this.p2 = ThemeResolver.e(a, Button.q0, Button.oh);
            this.p0 = ThemeResolver.e(a, Button.qy, Button.of);
            this.p1 = ThemeResolver.e(a, Button.qz, Button.og);
            this.pb = ThemeResolver.e(a, Button.p9, Button.nq);
            this.pc = ThemeResolver.e(a, Button.qa, Button.nr);
            this.pd = ThemeResolver.e(a, Button.qb, Button.ns);
            this.c1 = ThemeResolver.c(a, Button.dd, Button.ch);
            this.c4 = ThemeResolver.c(a, Button.dg, Button.ck);
            this.c3 = ThemeResolver.c(a, Button.df, Button.cj);
            this.c2 = ThemeResolver.c(a, Button.de, Button.ci);
            this.pa = ThemeResolver.e(a, Button.p8, Button.np);
            this.pi = ThemeResolver.e(a, Button.qg, Button.nx);
            this.kj = ThemeResolver.d(a, Button.km, Button.ke);
            this.a3 = ThemeResolver.b(a, Button.a6, Button.ay);
            this.o9 = ThemeResolver.e(a, Button.p7, Button.no);
            this.pj = ThemeResolver.e(a, Button.qh, Button.ny);
            this.ph = ThemeResolver.e(a, Button.qf, Button.nw);
            this.pg = ThemeResolver.e(a, Button.qe, Button.nv);
            this.pe = ThemeResolver.e(a, Button.qc, Button.nt);
            this.pf = ThemeResolver.e(a, Button.qd, Button.nu);
        }
        get bh() {
            return this.at;
        }
        set bh(a) {
            let b = this.at;
            this.at = a;
            if (b != this.at) {
                this.jx("MinWidth", b, a);
            }
        }
        get bg() {
            return this.as;
        }
        set bg(a) {
            let b = this.as;
            this.as = a;
            if (b != this.as) {
                this.jx("MinHeight", b, a);
            }
        }
        get s() {
            return this.r;
        }
        set s(a) {
            let b = this.r;
            this.r = a;
            if (b != this.r) {
                this.jx("DisplayType", enumGetBox(ButtonDisplayStyle_$type, b), enumGetBox(ButtonDisplayStyle_$type, a));
            }
        }
        get h() {
            return this.f;
        }
        set h(a) {
            let b = this.f;
            this.f = a;
            if (b != this.f) {
                this.jx("Density", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, a));
            }
        }
        get d() {
            return this.b;
        }
        set d(a) {
            let b = this.b;
            this.b = a;
            if (b != this.b) {
                this.jx("BaseTheme", enumGetBox(BaseControlTheme_$type, b), enumGetBox(BaseControlTheme_$type, a));
            }
        }
        get g() {
            return this.e;
        }
        set g(a) {
            let b = this.e;
            this.e = a;
            if (b != this.e) {
                this.jx("ActualDensity", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, a));
            }
        }
        get m8() {
            return this.k0;
        }
        set m8(a) {
            let b = this.k0;
            this.k0 = a;
            if (b != this.k0) {
                this.jx("ActualBorderColor", b, a);
            }
        }
        get nj() {
            return this.lb;
        }
        set nj(a) {
            let b = this.lb;
            this.lb = a;
            if (b != this.lb) {
                this.jx("ActualUmbraShadowColor", b, a);
            }
        }
        get ng() {
            return this.k8;
        }
        set ng(a) {
            let b = this.k8;
            this.k8 = a;
            if (b != this.k8) {
                this.jx("ActualPenumbraShadowColor", b, a);
            }
        }
        get m6() {
            return this.ky;
        }
        set m6(a) {
            let b = this.ky;
            this.ky = a;
            if (b != this.ky) {
                this.jx("ActualAmbientShadowColor", b, a);
            }
        }
        get cg() {
            return this.bn;
        }
        set cg(a) {
            let b = this.bn;
            this.bn = a;
            if (b != this.bn) {
                this.jx("ActualRestingElevation", b, a);
            }
        }
        get ce() {
            return this.bl;
        }
        set ce(a) {
            let b = this.bl;
            this.bl = a;
            if (b != this.bl) {
                this.jx("ActualFocusElevation", b, a);
            }
        }
        get cf() {
            return this.bm;
        }
        set cf(a) {
            let b = this.bm;
            this.bm = a;
            if (b != this.bm) {
                this.jx("ActualHoverElevation", b, a);
            }
        }
        get nh() {
            return this.k9;
        }
        set nh(a) {
            let b = this.k9;
            this.k9 = a;
            if (b != this.k9) {
                this.jx("ActualRippleColor", b, a);
            }
        }
        get kb() {
            return this.j4;
        }
        set kb(a) {
            let b = this.j4;
            this.j4 = a;
            if (b != this.j4) {
                this.jx("ActualCornerRadius", b, a);
            }
        }
        get m7() {
            return this.kz;
        }
        set m7(a) {
            let b = this.kz;
            this.kz = a;
            if (b != this.kz) {
                this.jx("ActualBackgroundColor", b, a);
            }
        }
        get m9() {
            return this.k1;
        }
        set m9(a) {
            let b = this.k1;
            this.k1 = a;
            if (b != this.k1) {
                this.jx("ActualDisabledBackgroundColor", b, a);
            }
        }
        get na() {
            return this.k2;
        }
        set na(a) {
            let b = this.k2;
            this.k2 = a;
            if (b != this.k2) {
                this.jx("ActualDisabledBorderColor", b, a);
            }
        }
        get nb() {
            return this.k3;
        }
        set nb(a) {
            let b = this.k3;
            this.k3 = a;
            if (b != this.k3) {
                this.jx("ActualDisabledTextColor", b, a);
            }
        }
        get cd() {
            return this.bk;
        }
        set cd(a) {
            let b = this.bk;
            this.bk = a;
            if (b != this.bk) {
                this.jx("ActualDisabledElevation", b, a);
            }
        }
        get k() {
            return this.i;
        }
        set k(a) {
            let b = this.i;
            this.i = a;
            if (b != this.i) {
                this.jx("ActualElevationMode", enumGetBox(ElevationMode_$type, b), enumGetBox(ElevationMode_$type, a));
            }
        }
        get ni() {
            return this.la;
        }
        set ni(a) {
            let b = this.la;
            this.la = a;
            if (b != this.la) {
                this.jx("ActualTextColor", b, a);
            }
        }
        get nf() {
            return this.k7;
        }
        set nf(a) {
            let b = this.k7;
            this.k7 = a;
            if (b != this.k7) {
                this.jx("ActualHoverTextColor", b, a);
            }
        }
        get nc() {
            return this.k4;
        }
        set nc(a) {
            let b = this.k4;
            this.k4 = a;
            if (b != this.k4) {
                this.jx("ActualFocusBackgroundColor", b, a);
            }
        }
        get nd() {
            return this.k5;
        }
        set nd(a) {
            let b = this.k5;
            this.k5 = a;
            if (b != this.k5) {
                this.jx("ActualFocusTextColor", b, a);
            }
        }
        get ne() {
            return this.k6;
        }
        set ne(a) {
            let b = this.k6;
            this.k6 = a;
            if (b != this.k6) {
                this.jx("ActualHoverBackgroundColor", b, a);
            }
        }
        get aw() {
            return this.an;
        }
        set aw(a) {
            let b = this.an;
            this.an = a;
            if (b != this.an) {
                this.jx("ActualBorderWidth", b, a);
            }
        }
        get tv() {
            return this.mt;
        }
        set tv(a) {
            let b = this.mt;
            this.mt = a;
            if (b != this.mt) {
                this.jx("RaisedBackgroundColor", b, a);
            }
        }
        get tx() {
            return this.mv;
        }
        set tx(a) {
            let b = this.mv;
            this.mv = a;
            if (b != this.mv) {
                this.jx("RaisedDisabledBackgroundColor", b, a);
            }
        }
        get ty() {
            return this.mw;
        }
        set ty(a) {
            let b = this.mw;
            this.mw = a;
            if (b != this.mw) {
                this.jx("RaisedDisabledBorderColor", b, a);
            }
        }
        get tz() {
            return this.mx;
        }
        set tz(a) {
            let b = this.mx;
            this.mx = a;
            if (b != this.mx) {
                this.jx("RaisedDisabledTextColor", b, a);
            }
        }
        get ep() {
            return this.b7;
        }
        set ep(a) {
            let b = this.b7;
            this.b7 = a;
            if (b != this.b7) {
                this.jx("RaisedDisabledElevation", b, a);
            }
        }
        get t2() {
            return this.m0;
        }
        set t2(a) {
            let b = this.m0;
            this.m0 = a;
            if (b != this.m0) {
                this.jx("RaisedHoverBackgroundColor", b, a);
            }
        }
        get tw() {
            return this.mu;
        }
        set tw(a) {
            let b = this.mu;
            this.mu = a;
            if (b != this.mu) {
                this.jx("RaisedBorderColor", b, a);
            }
        }
        get es() {
            return this.ca;
        }
        set es(a) {
            let b = this.ca;
            this.ca = a;
            if (b != this.ca) {
                this.jx("RaisedRestingElevation", b, a);
            }
        }
        get er() {
            return this.b9;
        }
        set er(a) {
            let b = this.b9;
            this.b9 = a;
            if (b != this.b9) {
                this.jx("RaisedHoverElevation", b, a);
            }
        }
        get eq() {
            return this.b8;
        }
        set eq(a) {
            let b = this.b8;
            this.b8 = a;
            if (b != this.b8) {
                this.jx("RaisedFocusElevation", b, a);
            }
        }
        get bj() {
            return this.av;
        }
        set bj(a) {
            let b = this.av;
            this.av = a;
            if (b != this.av) {
                this.jx("RaisedBorderWidth", b, a);
            }
        }
        get kx() {
            return this.ka;
        }
        set kx(a) {
            let b = this.ka;
            this.ka = a;
            {
                this.jx("RaisedCornerRadius", b, a);
            }
        }
        get t4() {
            return this.m2;
        }
        set t4(a) {
            let b = this.m2;
            this.m2 = a;
            if (b != this.m2) {
                this.jx("RaisedRippleColor", b, a);
            }
        }
        get su() {
            return this.lr;
        }
        set su(a) {
            let b = this.lr;
            this.lr = a;
            if (b != this.lr) {
                this.jx("FlatBackgroundColor", b, a);
            }
        }
        get sw() {
            return this.lt;
        }
        set sw(a) {
            let b = this.lt;
            this.lt = a;
            if (b != this.lt) {
                this.jx("FlatDisabledBackgroundColor", b, a);
            }
        }
        get sx() {
            return this.lu;
        }
        set sx(a) {
            let b = this.lu;
            this.lu = a;
            if (b != this.lu) {
                this.jx("FlatDisabledBorderColor", b, a);
            }
        }
        get sy() {
            return this.lv;
        }
        set sy(a) {
            let b = this.lv;
            this.lv = a;
            if (b != this.lv) {
                this.jx("FlatDisabledTextColor", b, a);
            }
        }
        get eb() {
            return this.bt;
        }
        set eb(a) {
            let b = this.bt;
            this.bt = a;
            if (b != this.bt) {
                this.jx("FlatDisabledElevation", b, a);
            }
        }
        get s1() {
            return this.ly;
        }
        set s1(a) {
            let b = this.ly;
            this.ly = a;
            if (b != this.ly) {
                this.jx("FlatHoverBackgroundColor", b, a);
            }
        }
        get sv() {
            return this.ls;
        }
        set sv(a) {
            let b = this.ls;
            this.ls = a;
            if (b != this.ls) {
                this.jx("FlatBorderColor", b, a);
            }
        }
        get ee() {
            return this.bw;
        }
        set ee(a) {
            let b = this.bw;
            this.bw = a;
            if (b != this.bw) {
                this.jx("FlatRestingElevation", b, a);
            }
        }
        get ed() {
            return this.bv;
        }
        set ed(a) {
            let b = this.bv;
            this.bv = a;
            if (b != this.bv) {
                this.jx("FlatHoverElevation", b, a);
            }
        }
        get ec() {
            return this.bu;
        }
        set ec(a) {
            let b = this.bu;
            this.bu = a;
            if (b != this.bu) {
                this.jx("FlatFocusElevation", b, a);
            }
        }
        get s3() {
            return this.l0;
        }
        set s3(a) {
            let b = this.l0;
            this.l0 = a;
            if (b != this.l0) {
                this.jx("FlatRippleColor", b, a);
            }
        }
        get s4() {
            return this.l1;
        }
        set s4(a) {
            let b = this.l1;
            this.l1 = a;
            if (b != this.l1) {
                this.jx("FlatTextColor", b, a);
            }
        }
        get s2() {
            return this.lz;
        }
        set s2(a) {
            let b = this.lz;
            this.lz = a;
            if (b != this.lz) {
                this.jx("FlatHoverTextColor", b, a);
            }
        }
        get sz() {
            return this.lw;
        }
        set sz(a) {
            let b = this.lw;
            this.lw = a;
            if (b != this.lw) {
                this.jx("FlatFocusBackgroundColor", b, a);
            }
        }
        get s0() {
            return this.lx;
        }
        set s0(a) {
            let b = this.lx;
            this.lx = a;
            if (b != this.lx) {
                this.jx("FlatFocusTextColor", b, a);
            }
        }
        get be() {
            return this.aq;
        }
        set be(a) {
            let b = this.aq;
            this.aq = a;
            if (b != this.aq) {
                this.jx("FlatBorderWidth", b, a);
            }
        }
        get ku() {
            return this.j7;
        }
        set ku(a) {
            let b = this.j7;
            this.j7 = a;
            {
                this.jx("FlatCornerRadius", b, a);
            }
        }
        get nk() {
            return this.lc;
        }
        set nk(a) {
            let b = this.lc;
            this.lc = a;
            if (b != this.lc) {
                this.jx("BackgroundColor", b, a);
            }
        }
        get sg() {
            return this.le;
        }
        set sg(a) {
            let b = this.le;
            this.le = a;
            if (b != this.le) {
                this.jx("DisabledBackgroundColor", b, a);
            }
        }
        get sh() {
            return this.lf;
        }
        set sh(a) {
            let b = this.lf;
            this.lf = a;
            if (b != this.lf) {
                this.jx("DisabledBorderColor", b, a);
            }
        }
        get si() {
            return this.lg;
        }
        set si(a) {
            let b = this.lg;
            this.lg = a;
            if (b != this.lg) {
                this.jx("DisabledTextColor", b, a);
            }
        }
        get d6() {
            return this.bo;
        }
        set d6(a) {
            let b = this.bo;
            this.bo = a;
            if (b != this.bo) {
                this.jx("DisabledElevation", b, a);
            }
        }
        get o() {
            return this.j;
        }
        set o(a) {
            let b = this.j;
            this.j = a;
            if (b != this.j) {
                this.jx("ElevationMode", enumGetBox(ElevationMode_$type, b), enumGetBox(ElevationMode_$type, a));
            }
        }
        get s7() {
            return this.l4;
        }
        set s7(a) {
            let b = this.l4;
            this.l4 = a;
            if (b != this.l4) {
                this.jx("HoverBackgroundColor", b, a);
            }
        }
        get nl() {
            return this.ld;
        }
        set nl(a) {
            let b = this.ld;
            this.ld = a;
            if (b != this.ld) {
                this.jx("BorderColor", b, a);
            }
        }
        get et() {
            return this.cb;
        }
        set et(a) {
            let b = this.cb;
            this.cb = a;
            if (b != this.cb) {
                this.jx("RestingElevation", b, a);
            }
        }
        get eg() {
            return this.by;
        }
        set eg(a) {
            let b = this.by;
            this.by = a;
            if (b != this.by) {
                this.jx("HoverElevation", b, a);
            }
        }
        get ef() {
            return this.bx;
        }
        set ef(a) {
            let b = this.bx;
            this.bx = a;
            if (b != this.bx) {
                this.jx("FocusElevation", b, a);
            }
        }
        get v() {
            return this.u;
        }
        set v(a) {
            let b = this.u;
            this.u = a;
            if (b != this.u) {
                this.jx("TextStyle", b, a);
            }
        }
        get t7() {
            return this.m5;
        }
        set t7(a) {
            let b = this.m5;
            this.m5 = a;
            if (b != this.m5) {
                this.jx("TextColor", b, a);
            }
        }
        get s8() {
            return this.l6;
        }
        set s8(a) {
            let b = this.l6;
            this.l6 = a;
            if (b != this.l6) {
                this.jx("HoverTextColor", b, a);
            }
        }
        get t6() {
            return this.m4;
        }
        set t6(a) {
            let b = this.m4;
            this.m4 = a;
            if (b != this.m4) {
                this.jx("RippleColor", b, a);
            }
        }
        get t5() {
            return this.m3;
        }
        set t5(a) {
            let b = this.m3;
            this.m3 = a;
            if (b != this.m3) {
                this.jx("RaisedTextColor", b, a);
            }
        }
        get t3() {
            return this.m1;
        }
        set t3(a) {
            let b = this.m1;
            this.m1 = a;
            if (b != this.m1) {
                this.jx("RaisedHoverTextColor", b, a);
            }
        }
        get t0() {
            return this.my;
        }
        set t0(a) {
            let b = this.my;
            this.my = a;
            if (b != this.my) {
                this.jx("RaisedFocusBackgroundColor", b, a);
            }
        }
        get t1() {
            return this.mz;
        }
        set t1(a) {
            let b = this.mz;
            this.mz = a;
            if (b != this.mz) {
                this.jx("RaisedFocusTextColor", b, a);
            }
        }
        get s5() {
            return this.l2;
        }
        set s5(a) {
            let b = this.l2;
            this.l2 = a;
            if (b != this.l2) {
                this.jx("FocusBackgroundColor", b, a);
            }
        }
        get s6() {
            return this.l3;
        }
        set s6(a) {
            let b = this.l3;
            this.l3 = a;
            if (b != this.l3) {
                this.jx("FocusTextColor", b, a);
            }
        }
        get ax() {
            return this.ao;
        }
        set ax(a) {
            let b = this.ao;
            this.ao = a;
            if (b != this.ao) {
                this.jx("BorderWidth", b, a);
            }
        }
        get kd() {
            return this.j5;
        }
        set kd(a) {
            let b = this.j5;
            this.j5 = a;
            {
                this.jx("CornerRadius", b, a);
            }
        }
        get tk() {
            return this.mi;
        }
        set tk(a) {
            let b = this.mi;
            this.mi = a;
            if (b != this.mi) {
                this.jx("OutlinedBackgroundColor", b, a);
            }
        }
        get tm() {
            return this.mk;
        }
        set tm(a) {
            let b = this.mk;
            this.mk = a;
            if (b != this.mk) {
                this.jx("OutlinedDisabledBackgroundColor", b, a);
            }
        }
        get tn() {
            return this.ml;
        }
        set tn(a) {
            let b = this.ml;
            this.ml = a;
            if (b != this.ml) {
                this.jx("OutlinedDisabledBorderColor", b, a);
            }
        }
        get to() {
            return this.mm;
        }
        set to(a) {
            let b = this.mm;
            this.mm = a;
            if (b != this.mm) {
                this.jx("OutlinedDisabledTextColor", b, a);
            }
        }
        get el() {
            return this.b3;
        }
        set el(a) {
            let b = this.b3;
            this.b3 = a;
            if (b != this.b3) {
                this.jx("OutlinedDisabledElevation", b, a);
            }
        }
        get tr() {
            return this.mp;
        }
        set tr(a) {
            let b = this.mp;
            this.mp = a;
            if (b != this.mp) {
                this.jx("OutlinedHoverBackgroundColor", b, a);
            }
        }
        get tl() {
            return this.mj;
        }
        set tl(a) {
            let b = this.mj;
            this.mj = a;
            if (b != this.mj) {
                this.jx("OutlinedBorderColor", b, a);
            }
        }
        get eo() {
            return this.b6;
        }
        set eo(a) {
            let b = this.b6;
            this.b6 = a;
            if (b != this.b6) {
                this.jx("OutlinedRestingElevation", b, a);
            }
        }
        get en() {
            return this.b5;
        }
        set en(a) {
            let b = this.b5;
            this.b5 = a;
            if (b != this.b5) {
                this.jx("OutlinedHoverElevation", b, a);
            }
        }
        get em() {
            return this.b4;
        }
        set em(a) {
            let b = this.b4;
            this.b4 = a;
            if (b != this.b4) {
                this.jx("OutlinedFocusElevation", b, a);
            }
        }
        get bi() {
            return this.au;
        }
        set bi(a) {
            let b = this.au;
            this.au = a;
            if (b != this.au) {
                this.jx("OutlinedBorderWidth", b, a);
            }
        }
        get kw() {
            return this.j9;
        }
        set kw(a) {
            let b = this.j9;
            this.j9 = a;
            {
                this.jx("OutlinedCornerRadius", b, a);
            }
        }
        get tt() {
            return this.mr;
        }
        set tt(a) {
            let b = this.mr;
            this.mr = a;
            if (b != this.mr) {
                this.jx("OutlinedRippleColor", b, a);
            }
        }
        get tu() {
            return this.ms;
        }
        set tu(a) {
            let b = this.ms;
            this.ms = a;
            if (b != this.ms) {
                this.jx("OutlinedTextColor", b, a);
            }
        }
        get ts() {
            return this.mq;
        }
        set ts(a) {
            let b = this.mq;
            this.mq = a;
            if (b != this.mq) {
                this.jx("OutlinedHoverTextColor", b, a);
            }
        }
        get tp() {
            return this.mn;
        }
        set tp(a) {
            let b = this.mn;
            this.mn = a;
            if (b != this.mn) {
                this.jx("OutlinedFocusBackgroundColor", b, a);
            }
        }
        get tq() {
            return this.mo;
        }
        set tq(a) {
            let b = this.mo;
            this.mo = a;
            if (b != this.mo) {
                this.jx("OutlinedFocusTextColor", b, a);
            }
        }
        get sj() {
            return this.lh;
        }
        set sj(a) {
            let b = this.lh;
            this.lh = a;
            if (b != this.lh) {
                this.jx("FabBackgroundColor", b, a);
            }
        }
        get sl() {
            return this.lj;
        }
        set sl(a) {
            let b = this.lj;
            this.lj = a;
            if (b != this.lj) {
                this.jx("FabDisabledBackgroundColor", b, a);
            }
        }
        get sm() {
            return this.lk;
        }
        set sm(a) {
            let b = this.lk;
            this.lk = a;
            if (b != this.lk) {
                this.jx("FabDisabledBorderColor", b, a);
            }
        }
        get sn() {
            return this.ll;
        }
        set sn(a) {
            let b = this.ll;
            this.ll = a;
            if (b != this.ll) {
                this.jx("FabDisabledTextColor", b, a);
            }
        }
        get d7() {
            return this.bp;
        }
        set d7(a) {
            let b = this.bp;
            this.bp = a;
            if (b != this.bp) {
                this.jx("FabDisabledElevation", b, a);
            }
        }
        get sq() {
            return this.l5;
        }
        set sq(a) {
            let b = this.l5;
            this.l5 = a;
            if (b != this.l5) {
                this.jx("FabHoverBackgroundColor", b, a);
            }
        }
        get sk() {
            return this.li;
        }
        set sk(a) {
            let b = this.li;
            this.li = a;
            if (b != this.li) {
                this.jx("FabBorderColor", b, a);
            }
        }
        get ea() {
            return this.bs;
        }
        set ea(a) {
            let b = this.bs;
            this.bs = a;
            if (b != this.bs) {
                this.jx("FabRestingElevation", b, a);
            }
        }
        get d9() {
            return this.br;
        }
        set d9(a) {
            let b = this.br;
            this.br = a;
            if (b != this.br) {
                this.jx("FabHoverElevation", b, a);
            }
        }
        get d8() {
            return this.bq;
        }
        set d8(a) {
            let b = this.bq;
            this.bq = a;
            if (b != this.bq) {
                this.jx("FabFocusElevation", b, a);
            }
        }
        get bd() {
            return this.ap;
        }
        set bd(a) {
            let b = this.ap;
            this.ap = a;
            if (b != this.ap) {
                this.jx("FabBorderWidth", b, a);
            }
        }
        get kt() {
            return this.j6;
        }
        set kt(a) {
            let b = this.j6;
            this.j6 = a;
            {
                this.jx("FabCornerRadius", b, a);
            }
        }
        get ss() {
            return this.lp;
        }
        set ss(a) {
            let b = this.lp;
            this.lp = a;
            if (b != this.lp) {
                this.jx("FabRippleColor", b, a);
            }
        }
        get st() {
            return this.lq;
        }
        set st(a) {
            let b = this.lq;
            this.lq = a;
            if (b != this.lq) {
                this.jx("FabTextColor", b, a);
            }
        }
        get sr() {
            return this.lo;
        }
        set sr(a) {
            let b = this.lo;
            this.lo = a;
            if (b != this.lo) {
                this.jx("FabHoverTextColor", b, a);
            }
        }
        get so() {
            return this.lm;
        }
        set so(a) {
            let b = this.lm;
            this.lm = a;
            if (b != this.lm) {
                this.jx("FabFocusBackgroundColor", b, a);
            }
        }
        get sp() {
            return this.ln;
        }
        set sp(a) {
            let b = this.ln;
            this.ln = a;
            if (b != this.ln) {
                this.jx("FabFocusTextColor", b, a);
            }
        }
        get s9() {
            return this.l7;
        }
        set s9(a) {
            let b = this.l7;
            this.l7 = a;
            if (b != this.l7) {
                this.jx("IconBackgroundColor", b, a);
            }
        }
        get tb() {
            return this.l9;
        }
        set tb(a) {
            let b = this.l9;
            this.l9 = a;
            if (b != this.l9) {
                this.jx("IconDisabledBackgroundColor", b, a);
            }
        }
        get tc() {
            return this.ma;
        }
        set tc(a) {
            let b = this.ma;
            this.ma = a;
            if (b != this.ma) {
                this.jx("IconDisabledBorderColor", b, a);
            }
        }
        get td() {
            return this.mb;
        }
        set td(a) {
            let b = this.mb;
            this.mb = a;
            if (b != this.mb) {
                this.jx("IconDisabledTextColor", b, a);
            }
        }
        get eh() {
            return this.bz;
        }
        set eh(a) {
            let b = this.bz;
            this.bz = a;
            if (b != this.bz) {
                this.jx("IconDisabledElevation", b, a);
            }
        }
        get tg() {
            return this.me;
        }
        set tg(a) {
            let b = this.me;
            this.me = a;
            if (b != this.me) {
                this.jx("IconHoverBackgroundColor", b, a);
            }
        }
        get ta() {
            return this.l8;
        }
        set ta(a) {
            let b = this.l8;
            this.l8 = a;
            if (b != this.l8) {
                this.jx("IconBorderColor", b, a);
            }
        }
        get ek() {
            return this.b2;
        }
        set ek(a) {
            let b = this.b2;
            this.b2 = a;
            if (b != this.b2) {
                this.jx("IconRestingElevation", b, a);
            }
        }
        get ej() {
            return this.b1;
        }
        set ej(a) {
            let b = this.b1;
            this.b1 = a;
            if (b != this.b1) {
                this.jx("IconHoverElevation", b, a);
            }
        }
        get ei() {
            return this.b0;
        }
        set ei(a) {
            let b = this.b0;
            this.b0 = a;
            if (b != this.b0) {
                this.jx("IconFocusElevation", b, a);
            }
        }
        get bf() {
            return this.ar;
        }
        set bf(a) {
            let b = this.ar;
            this.ar = a;
            if (b != this.ar) {
                this.jx("IconBorderWidth", b, a);
            }
        }
        get kv() {
            return this.j8;
        }
        set kv(a) {
            let b = this.j8;
            this.j8 = a;
            {
                this.jx("IconCornerRadius", b, a);
            }
        }
        get ti() {
            return this.mg;
        }
        set ti(a) {
            let b = this.mg;
            this.mg = a;
            if (b != this.mg) {
                this.jx("IconRippleColor", b, a);
            }
        }
        get tj() {
            return this.mh;
        }
        set tj(a) {
            let b = this.mh;
            this.mh = a;
            if (b != this.mh) {
                this.jx("IconTextColor", b, a);
            }
        }
        get th() {
            return this.mf;
        }
        set th(a) {
            let b = this.mf;
            this.mf = a;
            if (b != this.mf) {
                this.jx("IconHoverTextColor", b, a);
            }
        }
        get te() {
            return this.mc;
        }
        set te(a) {
            let b = this.mc;
            this.mc = a;
            if (b != this.mc) {
                this.jx("IconFocusBackgroundColor", b, a);
            }
        }
        get tf() {
            return this.md;
        }
        set tf(a) {
            let b = this.md;
            this.md = a;
            if (b != this.md) {
                this.jx("IconFocusTextColor", b, a);
            }
        }
        get h7() {
            return this.e6;
        }
        set h7(a) {
            let b = this.e6;
            this.e6 = a;
            if (b != this.e6) {
                this.jx("InputId", b, a);
            }
        }
        get h5() {
            return this.e5;
        }
        set h5(a) {
            let b = this.e5;
            this.e5 = a;
            if (b != this.e5) {
                this.jx("Id", b, a);
            }
        }
        get gb() {
            return this.e2;
        }
        set gb(a) {
            let b = this.e2;
            this.e2 = a;
            if (b != this.e2) {
                this.jx("Display", b, a);
            }
        }
        get he() {
            return this.e3;
        }
        set he(a) {
            let b = this.e3;
            this.e3 = a;
            if (b != this.e3) {
                this.jx("FlexDirection", b, a);
            }
        }
        get hg() {
            return this.e4;
        }
        set hg(a) {
            let b = this.e4;
            this.e4 = a;
            if (b != this.e4) {
                this.jx("FlexGrow", b, a);
            }
        }
        get fv() {
            return this.e0;
        }
        set fv(a) {
            let b = this.e0;
            this.e0 = a;
            if (b != this.e0) {
                this.jx("AlignItems", b, a);
            }
        }
        get ez() {
            return this.ex;
        }
        set ez(a) {
            let b = this.ex;
            this.ex = a;
            if (b != this.ex) {
                this.jx("Value", b, a);
            }
        }
        get ig() {
            return this.e7;
        }
        set ig(a) {
            let b = this.e7;
            this.e7 = a;
            if (b != this.e7) {
                this.jx("Name", b, a);
            }
        }
        get ah() {
            return this.z;
        }
        get eu() {
            return this.cc;
        }
        set eu(a) {
            let b = this.cc;
            this.cc = a;
            this.z = true;
            if (b != this.cc) {
                this.jx("TabIndex", b, a);
            }
        }
        get focused() {
            return this.ab;
        }
        set focused(a) {
            let b = this.ab;
            this.ab = a;
            if (b != this.ab) {
                this.jx("IsFocused", b, a);
            }
        }
        get ak() {
            return this.ac;
        }
        set ak(a) {
            let b = this.ac;
            this.ac = a;
            if (b != this.ac) {
                this.jx("IsFocusStyleEnabled", b, a);
            }
        }
        get fx() {
            return this.e1;
        }
        set fx(a) {
            let b = this.e1;
            this.e1 = a;
            if (b != this.e1) {
                this.jx("AriaLabel", b, a);
            }
        }
        get af() {
            return this.x;
        }
        set af(a) {
            let b = this.x;
            this.x = a;
            if (b != this.x) {
                this.jx("DisableRipple", b, a);
            }
        }
        get ae() {
            return this.w;
        }
        set ae(a) {
            let b = this.w;
            this.w = a;
            if (b != this.w) {
                this.jx("ActualDisableRipple", b, a);
            }
        }
        get al() {
            return this.ad;
        }
        set al(a) {
            let b = this.ad;
            this.ad = a;
            if (b != this.ad) {
                this.jx("IsHover", b, a);
            }
        }
        get disabled() {
            return this.aa;
        }
        set disabled(a) {
            let b = this.aa;
            this.aa = a;
            if (b != this.aa) {
                this.jx("IsDisabled", b, a);
            }
        }
        get ag() {
            return this.y;
        }
        set ag(a) {
            let b = this.y;
            this.y = a;
            if (b != this.y) {
                this.jx("DisableTransitions", b, a);
            }
        }
        jy() {
            this.jp();
            this.view.ap(this.nh, BrushUtil.g(0, 0, 0, 0));
            this.j1();
        }
        get a() {
            let a = new AnimationKeyFrameEffectTiming();
            a.g = 300;
            a.b = 0;
            return a;
        }
        jp() {
            this.view.z();
        }
        onDetachedFromUI() {
            this.view.ad();
        }
        onAttachedToUI() {
            this.view.ab();
        }
        appendButtonContent(a) {
            this.view.y(a);
        }
        am() {
            return this.view.f();
        }
        ey() {
            return this.p();
        }
        gf() {
            let a = this.p();
            return a.ab();
        }
        p() {
            let a = new ButtonVisualModelExport();
            a.s = this.view.j.rootWrapper.getNativeElement().offsetTop;
            a.q = this.view.j.rootWrapper.getNativeElement().offsetLeft;
            a.p = this.view.j.rootWrapper.getNativeElement().offsetHeight;
            a.t = this.view.j.rootWrapper.getNativeElement().offsetWidth;
            a.h = this.d;
            a.i = this.g;
            a.c = AppearanceHelper.a(this.m8);
            a.g = AppearanceHelper.a(this.nj);
            a.d = AppearanceHelper.a(this.ng);
            a.a = AppearanceHelper.a(this.m6);
            a.u = this.cg;
            a.e = AppearanceHelper.a(this.nh);
            a.ah = this.kb;
            a.b = AppearanceHelper.a(this.m7);
            a.j = this.k;
            a.f = AppearanceHelper.a(this.ni);
            a.o = this.aw;
            a.x = this.gb;
            a.y = this.he;
            a.z = this.hg;
            a.w = this.fv;
            a.v = this.view.q.getNativeElement().innerText;
            a.aa = this.ig;
            a.m = this.focused;
            a.k = this.ae;
            a.n = this.al;
            a.l = this.disabled;
            if (this.v != null) {
                let b = this.v;
                if (this.view != null && b.n == null) {
                    let c = this.view.j;
                    let d = FontUtil.getFontInfoFromString(c, b.fontString);
                    b.n = d.n;
                    b.d = d.d;
                    b.o = d.o;
                    b.q = d.q;
                    b.r = d.r;
                    b.s = d.s;
                }
                if (b.n != null) {
                    a.ac = b.n;
                }
                if (!isNaN_(b.d)) {
                    a.r = b.d;
                }
                if (b.s != null) {
                    a.ag = b.s;
                }
                if (b.q != null) {
                    a.ae = b.q;
                }
                if (b.o != null) {
                    a.ad = b.q;
                }
            }
            return a;
        }
        provideContainer(a) {
            this.view.ac(a);
        }
    }
    Button.$t = /*@__PURE__*/ markType(Button, 'Button', Base.$, [INotifyPropertyChanged_$type]);
    Button.rr = /*@__PURE__*/ BrushUtil.g(66, 0, 0, 0);
    Button.rf = /*@__PURE__*/ BrushUtil.g(30, 0, 0, 0);
    Button.p6 = /*@__PURE__*/ BrushUtil.g(20, 0, 0, 0);
    Button.n = 1;
    Button.ri = /*@__PURE__*/ BrushUtil.g(10, 0, 0, 0);
    Button.rj = /*@__PURE__*/ BrushUtil.g(10, 0, 0, 0);
    Button.rk = /*@__PURE__*/ BrushUtil.g(66, 0, 0, 0);
    Button.du = 0;
    Button.dx = 2;
    Button.dw = 4;
    Button.dv = 8;
    Button.rh = /*@__PURE__*/ BrushUtil.g(138, 0, 0, 0);
    Button.rp = /*@__PURE__*/ BrushUtil.g(255, 255, 255, 255);
    Button.kq = /*@__PURE__*/ new CornerRadius(0, 4);
    Button.ba = NaN;
    Button.rg = /*@__PURE__*/ BrushUtil.g(255, 228, 28, 119);
    Button.rq = /*@__PURE__*/ BrushUtil.g(255, 0, 0, 0);
    Button.ro = /*@__PURE__*/ BrushUtil.g(255, 0, 0, 0);
    Button.rn = /*@__PURE__*/ BrushUtil.g(255, 220, 83, 145);
    Button.rl = /*@__PURE__*/ BrushUtil.g(255, 220, 83, 145);
    Button.rm = /*@__PURE__*/ BrushUtil.g(255, 0, 0, 0);
    Button.qk = /*@__PURE__*/ BrushUtil.g(0, 0, 0, 0);
    Button.ql = /*@__PURE__*/ BrushUtil.g(0, 0, 0, 0);
    Button.qm = /*@__PURE__*/ BrushUtil.g(66, 0, 0, 0);
    Button.dh = 0;
    Button.dk = 0;
    Button.dj = 0;
    Button.di = 0;
    Button.qj = /*@__PURE__*/ BrushUtil.g(138, 0, 0, 0);
    Button.qr = null;
    Button.kn = /*@__PURE__*/ new CornerRadius(0, 4);
    Button.a7 = NaN;
    Button.qi = /*@__PURE__*/ BrushUtil.g(0, 0, 0, 0);
    Button.qs = /*@__PURE__*/ BrushUtil.g(255, 228, 28, 119);
    Button.qq = /*@__PURE__*/ BrushUtil.g(255, 228, 28, 119);
    Button.qp = /*@__PURE__*/ BrushUtil.g(13, 228, 28, 119);
    Button.qn = /*@__PURE__*/ BrushUtil.g(30, 228, 28, 119);
    Button.qo = /*@__PURE__*/ BrushUtil.g(255, 228, 28, 119);
    Button.q6 = /*@__PURE__*/ BrushUtil.g(0, 0, 0, 0);
    Button.q7 = /*@__PURE__*/ BrushUtil.g(30, 0, 0, 0);
    Button.q8 = /*@__PURE__*/ BrushUtil.g(66, 0, 0, 0);
    Button.dq = 0;
    Button.dt = 0;
    Button.ds = 0;
    Button.dr = 0;
    Button.q5 = /*@__PURE__*/ BrushUtil.g(30, 0, 0, 0);
    Button.rd = /*@__PURE__*/ BrushUtil.g(0, 0, 0, 0);
    Button.kp = /*@__PURE__*/ new CornerRadius(0, 4);
    Button.a9 = 1;
    Button.q4 = /*@__PURE__*/ BrushUtil.g(0, 0, 0, 0);
    Button.re = /*@__PURE__*/ BrushUtil.g(255, 228, 28, 119);
    Button.rc = /*@__PURE__*/ BrushUtil.g(255, 228, 28, 119);
    Button.rb = /*@__PURE__*/ BrushUtil.g(13, 228, 28, 119);
    Button.q9 = /*@__PURE__*/ BrushUtil.g(30, 228, 28, 119);
    Button.ra = /*@__PURE__*/ BrushUtil.g(255, 228, 28, 119);
    Button.qv = /*@__PURE__*/ BrushUtil.g(0, 0, 0, 0);
    Button.qw = /*@__PURE__*/ BrushUtil.g(0, 0, 0, 0);
    Button.qx = /*@__PURE__*/ BrushUtil.g(66, 0, 0, 0);
    Button.dl = 0;
    Button.dp = 0;
    Button.dn = 0;
    Button.dm = 0;
    Button.qu = /*@__PURE__*/ BrushUtil.g(138, 0, 0, 0);
    Button.q2 = null;
    Button.ko = /*@__PURE__*/ new CornerRadius(0, 28);
    Button.a8 = NaN;
    Button.qt = /*@__PURE__*/ BrushUtil.g(0, 0, 0, 0);
    Button.q3 = /*@__PURE__*/ BrushUtil.g(255, 0, 0, 0);
    Button.q1 = /*@__PURE__*/ BrushUtil.g(255, 0, 0, 0);
    Button.q0 = /*@__PURE__*/ BrushUtil.g(30, 0, 0, 0);
    Button.qy = /*@__PURE__*/ BrushUtil.g(66, 0, 0, 0);
    Button.qz = /*@__PURE__*/ BrushUtil.g(255, 0, 0, 0);
    Button.p9 = /*@__PURE__*/ BrushUtil.g(10, 0, 0, 0);
    Button.qa = /*@__PURE__*/ BrushUtil.g(10, 0, 0, 0);
    Button.qb = /*@__PURE__*/ BrushUtil.g(66, 0, 0, 0);
    Button.dd = 0;
    Button.dg = 6;
    Button.df = 12;
    Button.de = 12;
    Button.p8 = /*@__PURE__*/ BrushUtil.g(138, 0, 0, 0);
    Button.qg = /*@__PURE__*/ BrushUtil.g(255, 255, 255, 255);
    Button.km = /*@__PURE__*/ new CornerRadius(0, 28);
    Button.a6 = NaN;
    Button.p7 = /*@__PURE__*/ BrushUtil.g(255, 228, 28, 119);
    Button.qh = /*@__PURE__*/ BrushUtil.g(255, 0, 0, 0);
    Button.qf = /*@__PURE__*/ BrushUtil.g(255, 0, 0, 0);
    Button.qe = /*@__PURE__*/ BrushUtil.g(255, 220, 83, 145);
    Button.qc = /*@__PURE__*/ BrushUtil.g(255, 220, 83, 145);
    Button.qd = /*@__PURE__*/ BrushUtil.g(255, 0, 0, 0);
    Button.o8 = /*@__PURE__*/ BrushUtil.g(100, 33, 150, 243);
    Button.ow = /*@__PURE__*/ BrushUtil.g(70, 33, 150, 243);
    Button.nn = /*@__PURE__*/ BrushUtil.g(40, 33, 150, 243);
    Button.l = 2;
    Button.oz = /*@__PURE__*/ BrushUtil.g(10, 0, 0, 0);
    Button.o0 = /*@__PURE__*/ BrushUtil.g(10, 0, 0, 0);
    Button.o1 = /*@__PURE__*/ BrushUtil.g(66, 0, 0, 0);
    Button.cx = 0;
    Button.c0 = 0;
    Button.cz = 0;
    Button.cy = 2;
    Button.oy = /*@__PURE__*/ BrushUtil.g(138, 0, 0, 0);
    Button.o6 = /*@__PURE__*/ BrushUtil.g(255, 255, 255, 255);
    Button.ki = /*@__PURE__*/ new CornerRadius(0, 3);
    Button.a2 = NaN;
    Button.ox = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    Button.o7 = /*@__PURE__*/ BrushUtil.g(255, 255, 255, 255);
    Button.o5 = /*@__PURE__*/ BrushUtil.g(255, 255, 255, 255);
    Button.o4 = /*@__PURE__*/ BrushUtil.g(255, 27, 135, 220);
    Button.o2 = /*@__PURE__*/ BrushUtil.g(255, 21, 112, 184);
    Button.o3 = /*@__PURE__*/ BrushUtil.g(255, 255, 255, 255);
    Button.n1 = /*@__PURE__*/ BrushUtil.g(0, 0, 0, 0);
    Button.n2 = /*@__PURE__*/ BrushUtil.g(0, 0, 0, 0);
    Button.n3 = /*@__PURE__*/ BrushUtil.g(66, 0, 0, 0);
    Button.cl = 0;
    Button.co = 0;
    Button.cn = 0;
    Button.cm = 2;
    Button.n0 = /*@__PURE__*/ BrushUtil.g(138, 0, 0, 0);
    Button.n8 = /*@__PURE__*/ BrushUtil.g(100, 33, 150, 243);
    Button.kf = /*@__PURE__*/ new CornerRadius(0, 3);
    Button.az = NaN;
    Button.nz = /*@__PURE__*/ BrushUtil.g(0, 0, 0, 0);
    Button.n9 = /*@__PURE__*/ BrushUtil.g(255, 119, 119, 119);
    Button.n7 = /*@__PURE__*/ BrushUtil.g(255, 119, 119, 119);
    Button.n6 = /*@__PURE__*/ BrushUtil.g(26, 33, 150, 243);
    Button.n4 = /*@__PURE__*/ BrushUtil.g(0, 0, 0, 0);
    Button.n5 = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    Button.on = /*@__PURE__*/ BrushUtil.g(0, 0, 0, 0);
    Button.oo = /*@__PURE__*/ BrushUtil.g(30, 0, 0, 0);
    Button.op = /*@__PURE__*/ BrushUtil.g(66, 0, 0, 0);
    Button.ct = 0;
    Button.cw = 0;
    Button.cv = 0;
    Button.cu = 2;
    Button.om = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    Button.ou = /*@__PURE__*/ BrushUtil.g(0, 0, 0, 0);
    Button.kh = /*@__PURE__*/ new CornerRadius(0, 3);
    Button.a1 = 1;
    Button.ol = /*@__PURE__*/ BrushUtil.g(0, 0, 0, 0);
    Button.ov = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    Button.ot = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    Button.os = /*@__PURE__*/ BrushUtil.g(26, 33, 150, 243);
    Button.oq = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    Button.or = /*@__PURE__*/ BrushUtil.g(255, 255, 255, 255);
    Button.oc = /*@__PURE__*/ BrushUtil.g(0, 0, 0, 0);
    Button.od = /*@__PURE__*/ BrushUtil.g(0, 0, 0, 0);
    Button.oe = /*@__PURE__*/ BrushUtil.g(66, 0, 0, 0);
    Button.cp = 0;
    Button.cs = 0;
    Button.cr = 0;
    Button.cq = 2;
    Button.ob = /*@__PURE__*/ BrushUtil.g(138, 0, 0, 0);
    Button.oj = null;
    Button.kg = /*@__PURE__*/ new CornerRadius(0, 28);
    Button.a0 = NaN;
    Button.oa = /*@__PURE__*/ BrushUtil.g(0, 0, 0, 0);
    Button.ok = /*@__PURE__*/ BrushUtil.g(255, 119, 119, 119);
    Button.oi = /*@__PURE__*/ BrushUtil.g(255, 119, 119, 119);
    Button.oh = /*@__PURE__*/ BrushUtil.g(30, 0, 0, 0);
    Button.of = /*@__PURE__*/ BrushUtil.g(66, 0, 0, 0);
    Button.og = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    Button.nq = /*@__PURE__*/ BrushUtil.g(10, 0, 0, 0);
    Button.nr = /*@__PURE__*/ BrushUtil.g(10, 0, 0, 0);
    Button.ns = /*@__PURE__*/ BrushUtil.g(66, 0, 0, 0);
    Button.ch = 0;
    Button.ck = 0;
    Button.cj = 0;
    Button.ci = 2;
    Button.np = /*@__PURE__*/ BrushUtil.g(138, 0, 0, 0);
    Button.nx = /*@__PURE__*/ BrushUtil.g(255, 255, 255, 255);
    Button.ke = /*@__PURE__*/ new CornerRadius(0, 28);
    Button.ay = NaN;
    Button.no = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    Button.ny = /*@__PURE__*/ BrushUtil.g(255, 255, 255, 255);
    Button.nw = /*@__PURE__*/ BrushUtil.g(255, 255, 255, 255);
    Button.nv = /*@__PURE__*/ BrushUtil.g(255, 27, 135, 220);
    Button.nt = /*@__PURE__*/ BrushUtil.g(255, 21, 112, 184);
    Button.nu = /*@__PURE__*/ BrushUtil.g(255, 255, 255, 255);
    Button.c = 2;
    Button.ew = 0;
    Button.ev = 0;
    return Button;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let ValueChangedEventArgs = /*@__PURE__*/ (() => {
    class ValueChangedEventArgs extends EventArgs {
        constructor() {
            super(...arguments);
            this._oldValue = new Date();
            this._newValue = new Date();
        }
        get oldValue() {
            return this._oldValue;
        }
        set oldValue(a) {
            this._oldValue = a;
        }
        get newValue() {
            return this._newValue;
        }
        set newValue(a) {
            this._newValue = a;
        }
    }
    ValueChangedEventArgs.$t = /*@__PURE__*/ markType(ValueChangedEventArgs, 'ValueChangedEventArgs', EventArgs.$);
    return ValueChangedEventArgs;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let IconVisualModelExport = /*@__PURE__*/ (() => {
    class IconVisualModelExport extends Base {
        constructor() {
            super(...arguments);
            this.a = null;
            this.c = null;
            this.b = null;
            this.d = 0;
            this._svgPath = null;
            this.j = null;
            this.k = null;
            this.l = null;
            this.e = 0;
            this.h = null;
            this.i = null;
        }
        get svgPath() {
            return this._svgPath;
        }
        set svgPath(a) {
            this._svgPath = a;
        }
        f() {
            let a = new StringBuilder(0);
            a.l("{");
            a.l("actualFill : " + this.a.serialize() + ", ");
            a.l("actualTextColor : " + this.c.serialize() + ", ");
            a.l("actualStroke : " + this.b.serialize() + ", ");
            a.l("actualStrokeThickness : " + this.d + ", ");
            if (!stringIsNullOrEmpty(this.j)) {
                a.l("textStyleFontStyle : \"" + this.j + "\", ");
            }
            if (!stringIsNullOrEmpty(this.k)) {
                a.l("textStyleFontVariant : \"" + this.k + "\", ");
            }
            if (!stringIsNullOrEmpty(this.l)) {
                a.l("textStyleFontWeight : \"" + this.l + "\", ");
            }
            if (!stringIsNullOrEmpty(this.h)) {
                a.l("textStyleFontFamily : \"" + this.h + "\", ");
            }
            if (!stringIsNullOrEmpty(this.i)) {
                a.l("textStyleFontStretch : \"" + this.i + "\", ");
            }
            if (!isNaN_(this.e)) {
                a.l("textStyleFontSize : " + this.e + ", ");
            }
            a.l("}");
            return a.toString();
        }
    }
    IconVisualModelExport.$t = /*@__PURE__*/ markType(IconVisualModelExport, 'IconVisualModelExport');
    return IconVisualModelExport;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let IconView = /*@__PURE__*/ (() => {
    class IconView extends Base {
        constructor() {
            super();
            this.a = null;
            this.g = null;
            this.b = null;
            this.f = new List$1(Delegate_$type, 0);
            this.k = null;
            this.c = true;
            this.h = null;
            this.i = null;
        }
        r() {
        }
        d() {
            return true;
        }
        get j() {
            return this.h;
        }
        get w() {
            return null;
        }
        get e() {
            return true;
        }
        p(a) {
            if (a == null) {
                for (let b of fromEnum(this.f)) {
                    b();
                }
                this.f.clear();
            }
            this.g = a;
            a.rootWrapper.setStyleProperty("position", "relative");
            this.g.rootWrapper.setStyleProperty("display", "flex");
            this.g.rootWrapper.setStyleProperty("flex-direction", "row");
            this.g.rootWrapper.setStyleProperty("flex-wrap", "no-wrap");
            this.g.rootWrapper.setStyleProperty("align-items", "center");
            this.t();
            let c = this.g.createElementNS("svg", "http://www.w3.org/2000/svg");
            c.setStyleProperty("position", "absolute");
            c.setStyleProperty("top", "0");
            c.setStyleProperty("left", "0");
            c.setStyleProperty("right", "0");
            c.setStyleProperty("bottom", "0");
            c.setAttribute("viewBox", "0 0 24 24");
            this.h = c;
            let d = this.g.createElementNS("path", "http://www.w3.org/2000/svg");
            d.setAttribute("d", "");
            this.h.append(d);
            if (this.k != null) {
                d.setAttribute("d", this.k);
            }
            this.i = d;
            this.g.append(this.h);
            this.a.a8();
        }
        u(a) {
            if (this.k != a) {
                this.k = a;
                if (this.i != null) {
                    this.i.setAttribute("d", this.k);
                }
            }
        }
        t() {
            this.g.rootWrapper.setStyleProperty("width", "1.5rem");
            this.g.rootWrapper.setStyleProperty("height", "1.5rem");
        }
        l(a) {
        }
        s() {
            if (this.d()) {
            }
        }
        m(a) {
            this.a.a5();
        }
        n(a) {
            this.a.a6();
        }
        o() {
            this.c = true;
            this.f.add(this.g.rootWrapper.listen("mouseenter", runOn(this, this.m)));
            this.f.add(this.g.rootWrapper.listen("mouseleave", runOn(this, this.n)));
        }
        q() {
            this.c = false;
            for (let a of fromEnum(this.f)) {
                a();
            }
            this.f.clear();
        }
        v(a) {
            if (a != null) {
                this.g.rootWrapper.setStyleProperty("font", a.fontString);
            }
        }
    }
    IconView.$t = /*@__PURE__*/ markType(IconView, 'IconView');
    return IconView;
})();
/**
 * @hidden
 */
let Icon = /*@__PURE__*/ (() => {
    class Icon extends Base {
        constructor() {
            super();
            this._view = null;
            this.bd = Icon.bt;
            this.bh = Icon.bx;
            this.be = Icon.bu;
            this.bf = Icon.bv;
            this.bg = Icon.bw;
            this.m = Icon.s;
            this.n = Icon.t;
            this.bi = Icon.bt;
            this.bn = Icon.bx;
            this.ac = null;
            this.bj = Icon.bu;
            this.bk = Icon.bv;
            this.bm = Icon.bw;
            this.o = Icon.s;
            this.p = Icon.t;
            this.c = null;
            this.bl = null;
            this.ab = "ig-icon-" + Icon.y++;
            this.w = 0;
            this.e = false;
            this.aa = null;
            this.g = false;
            this.f = false;
            this.propertyChanged = null;
            let a = new IconView();
            a.a = this;
            this.view = a;
            this.view.r();
        }
        get view() {
            return this._view;
        }
        set view(a) {
            this._view = a;
        }
        destroy() {
            this.provideContainer(null);
        }
        a7(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            this.a9(a, b, c);
        }
        a9(a, b, c) {
            switch (a) {
                case "Fill":
                case "Stroke":
                case "StrokeThickness":
                case "HoverFill":
                case "HoverStroke":
                case "HoverStrokeThickness":
                    this.bc();
                    break;
                case "ActualFill":
                case "ActualStroke":
                case "ActualHoverFill":
                case "ActualHoverStroke":
                case "ActualStrokeThickness":
                case "ActualHoverStrokeThickness":
                case "SVGPath":
                    this.bb();
                    break;
            }
        }
        bc() {
            this.bo = this.fill != null ? this.fill : Icon.bt;
            this.bp = this.by != null ? this.by : Icon.bu;
            this.br = this.b1 != null ? this.b1 : Icon.bw;
            this.bq = this.bz != null ? this.bz : Icon.bv;
            this.r = !isNaN_(this.v) ? this.v : Icon.t;
            this.q = !isNaN_(this.u) ? this.u : Icon.s;
            this.bs = this.b2 != null ? this.b2 : Icon.bx;
        }
        get i() {
            return this.svgPath != null && !this.view.e;
        }
        bb() {
            let a = this.view.j;
            if (this.i) {
                let b = this.view.w;
                if (this.k) {
                    b._fill = this.bp;
                    b._stroke = this.bq;
                    b.ac = this.q;
                }
                else {
                    b._fill = this.bo;
                    b._stroke = this.br;
                    b.ac = this.r;
                }
            }
            else {
                if (this.svgPath != null) {
                    this.view.u(this.svgPath);
                }
                let c = this.view.j;
                if (this.k) {
                    if (this.bp != null) {
                        NativeUI.o(c, this.bp);
                    }
                    if (this.bq != null) {
                        NativeUI.v(c, this.bq);
                    }
                    if (!isNaN_(this.q)) {
                        NativeUI.y(c, this.q);
                    }
                }
                else {
                    if (this.bo != null) {
                        NativeUI.o(c, this.bo);
                    }
                    if (this.br != null) {
                        NativeUI.v(c, this.br);
                    }
                    if (!isNaN_(this.r)) {
                        NativeUI.y(c, this.r);
                    }
                }
            }
            if (this.d != null) {
                this.view.v(this.d);
            }
            if (this.bs != null) {
                NativeUI.n(this.view.j, this.bs);
            }
        }
        get bo() {
            return this.bd;
        }
        set bo(a) {
            let b = this.bd;
            this.bd = a;
            if (b != this.bd) {
                this.a7("ActualFill", b, a);
            }
        }
        get bs() {
            return this.bh;
        }
        set bs(a) {
            let b = this.bh;
            this.bh = a;
            if (b != this.bh) {
                this.a7("ActualTextColor", b, a);
            }
        }
        get bp() {
            return this.be;
        }
        set bp(a) {
            let b = this.be;
            this.be = a;
            if (b != this.be) {
                this.a7("ActualHoverFill", b, a);
            }
        }
        get bq() {
            return this.bf;
        }
        set bq(a) {
            let b = this.bf;
            this.bf = a;
            if (b != this.bf) {
                this.a7("ActualHoverStroke", b, a);
            }
        }
        get br() {
            return this.bg;
        }
        set br(a) {
            let b = this.bg;
            this.bg = a;
            if (b != this.bg) {
                this.a7("ActualStroke", b, a);
            }
        }
        get q() {
            return this.m;
        }
        set q(a) {
            let b = this.m;
            this.m = a;
            if (b != this.m) {
                this.a7("ActualHoverStrokeThickness", b, a);
            }
        }
        get r() {
            return this.n;
        }
        set r(a) {
            let b = this.n;
            this.n = a;
            if (b != this.n) {
                this.a7("ActualStrokeThickness", b, a);
            }
        }
        get fill() {
            return this.bi;
        }
        set fill(a) {
            let b = this.bi;
            this.bi = a;
            if (b != this.bi) {
                this.a7("Fill", b, a);
            }
        }
        get b2() {
            return this.bn;
        }
        set b2(a) {
            let b = this.bn;
            this.bn = a;
            if (b != this.bn) {
                this.a7("TextColor", b, a);
            }
        }
        get svgPath() {
            return this.ac;
        }
        set svgPath(a) {
            let b = this.ac;
            this.ac = a;
            if (b != this.ac) {
                this.a7("SVGPath", b, a);
            }
        }
        get by() {
            return this.bj;
        }
        set by(a) {
            let b = this.bj;
            this.bj = a;
            if (b != this.bj) {
                this.a7("HoverFill", b, a);
            }
        }
        get bz() {
            return this.bk;
        }
        set bz(a) {
            let b = this.bk;
            this.bk = a;
            if (b != this.bk) {
                this.a7("HoverStroke", b, a);
            }
        }
        get b1() {
            return this.bm;
        }
        set b1(a) {
            let b = this.bm;
            this.bm = a;
            if (b != this.bm) {
                this.a7("Stroke", b, a);
            }
        }
        get u() {
            return this.o;
        }
        set u(a) {
            let b = this.o;
            this.o = a;
            if (b != this.o) {
                this.a7("HoverStrokeThickness", b, a);
            }
        }
        get v() {
            return this.p;
        }
        set v(a) {
            let b = this.p;
            this.p = a;
            if (b != this.p) {
                this.a7("StrokeThickness", b, a);
            }
        }
        a5() {
            this.k = true;
        }
        a6() {
            this.k = false;
        }
        get d() {
            return this.c;
        }
        set d(a) {
            let b = this.c;
            this.c = a;
            if (b != this.c) {
                this.a7("TextStyle", b, a);
            }
        }
        get b0() {
            return this.bl;
        }
        set b0(a) {
            let b = this.bl;
            this.bl = a;
            if (b != this.bl) {
                this.a7("HoverTextColor", b, a);
            }
        }
        get as() {
            return this.ab;
        }
        set as(a) {
            let b = this.ab;
            this.ab = a;
            if (b != this.ab) {
                this.a7("Id", b, a);
            }
        }
        get h() {
            return this.e;
        }
        get x() {
            return this.w;
        }
        set x(a) {
            let b = this.w;
            this.w = a;
            this.e = true;
            if (b != this.w) {
                this.a7("TabIndex", b, a);
            }
        }
        get ak() {
            return this.aa;
        }
        set ak(a) {
            let b = this.aa;
            this.aa = a;
            if (b != this.aa) {
                this.a7("AriaLabel", b, a);
            }
        }
        get k() {
            return this.g;
        }
        set k(a) {
            let b = this.g;
            this.g = a;
            if (b != this.g) {
                this.a7("IsHover", b, a);
            }
        }
        get disabled() {
            return this.f;
        }
        set disabled(a) {
            let b = this.f;
            this.f = a;
            if (b != this.f) {
                this.a7("IsDisabled", b, a);
            }
        }
        a8() {
        }
        onDetachedFromUI() {
            this.view.q();
        }
        onAttachedToUI() {
            this.view.o();
        }
        l() {
            return this.view.d();
        }
        z() {
            return this.a();
        }
        am() {
            let a = this.a();
            return a.f();
        }
        a() {
            let a = new IconVisualModelExport();
            a.a = AppearanceHelper.a(this.bo);
            a.c = AppearanceHelper.a(this.bs);
            a.b = AppearanceHelper.a(this.br);
            a.d = this.r;
            if (this.d != null) {
                let b = this.d;
                if (this.view != null && b.n == null) {
                    let c = this.view.g;
                    let d = FontUtil.getFontInfoFromString(c, b.fontString);
                    b.n = d.n;
                    b.d = d.d;
                    b.o = d.o;
                    b.q = d.q;
                    b.r = d.r;
                    b.s = d.s;
                }
                if (b.n != null) {
                    a.h = b.n;
                }
                if (!isNaN_(b.d)) {
                    a.e = b.d;
                }
                if (b.s != null) {
                    a.l = b.s;
                }
                if (b.q != null) {
                    a.j = b.q;
                }
                if (b.o != null) {
                    a.i = b.q;
                }
            }
            return a;
        }
        provideContainer(a) {
            this.view.p(a);
        }
    }
    Icon.$t = /*@__PURE__*/ markType(Icon, 'Icon', Base.$, [INotifyPropertyChanged_$type, IIcon_$type]);
    Icon.bt = null;
    Icon.bx = null;
    Icon.bw = null;
    Icon.bu = null;
    Icon.bv = null;
    Icon.t = 0;
    Icon.s = 0;
    Icon.y = 0;
    return Icon;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let CalendarVisualModelExport = /*@__PURE__*/ (() => {
    class CalendarVisualModelExport extends Base {
        constructor() {
            super(...arguments);
            this.h = 0;
            this.g = 0;
            this.d = null;
            this.f = null;
            this.b = null;
            this.e = null;
            this.c = null;
            this.a = null;
            this.o = null;
            this.p = null;
            this.q = null;
            this.j = 0;
            this.m = null;
            this.n = null;
            this.k = null;
            this.i = null;
        }
        l() {
            let a = new StringBuilder(0);
            a.l("{");
            a.l("Density : " + this.h + ", ");
            a.l("BaseTheme : " + this.g + ", ");
            a.l("SelectedDateBackgroundColor : " + this.d.serialize() + ", ");
            a.l("SelectedFocusDateBackgroundColor : " + this.f.serialize() + ", ");
            a.l("FocusDateBackgroundColor : " + this.b.serialize() + ", ");
            a.l("SelectedDateTextColor : " + this.e.serialize() + ", ");
            a.l("FocusDateTextColor : " + this.c.serialize() + ", ");
            a.l("CurrentDateTextColor : " + this.a.serialize() + ", ");
            if (!stringIsNullOrEmpty(this.o)) {
                a.l("textStyleFontStyle : \"" + this.o + "\", ");
            }
            if (!stringIsNullOrEmpty(this.p)) {
                a.l("textStyleFontVariant : \"" + this.p + "\", ");
            }
            if (!stringIsNullOrEmpty(this.q)) {
                a.l("textStyleFontWeight : \"" + this.q + "\", ");
            }
            if (!stringIsNullOrEmpty(this.m)) {
                a.l("textStyleFontFamily : \"" + this.m + "\", ");
            }
            if (!stringIsNullOrEmpty(this.n)) {
                a.l("textStyleFontStretch : \"" + this.n + "\", ");
            }
            if (!isNaN_(this.j)) {
                a.l("textStyleFontSize : " + this.j + ", ");
            }
            a.l("activePicker : \"" + this.k + "\", ");
            a.l("buttonsModels: [");
            for (let b = 0; b < this.i.count; b++) {
                if (b != 0) {
                    a.l(",");
                }
                let c = this.i._inner[b].aa.charAt(0).toString().toLowerCase() + this.i._inner[b].aa.substr(1);
                a.l(this.i._inner[b].ab());
            }
            a.l("]");
            a.l("}");
            return a.toString();
        }
    }
    CalendarVisualModelExport.$t = /*@__PURE__*/ markType(CalendarVisualModelExport, 'CalendarVisualModelExport');
    return CalendarVisualModelExport;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let CalendarView = /*@__PURE__*/ (() => {
    class CalendarView extends Base {
        constructor() {
            super();
            this.g = null;
            this.i = null;
            this.j = null;
            this.c = new List$1(DomWrapper_$type, 0);
            this.b = new List$1(DomWrapper_$type, 0);
            this.d = new List$1(DomWrapper_$type, 0);
            this.e = new List$1(DomWrapper_$type, 0);
            this.h = null;
            this.l = null;
            this.a = null;
            this.f = null;
            this.l = "day";
            this.h = null;
        }
        y() {
        }
        x(a) {
            if (a == null) {
                this.f = null;
                return;
            }
            this.f = a;
            this.f.rootWrapper.setStyleProperty("background-color", "rgb(255, 255, 255)");
            let b = Math.round(a.rootWrapper.width());
            let c = Math.round(a.rootWrapper.height());
            this.p();
            this.ai();
            this.aj();
            this.ah();
            let d = this.f.rootWrapper;
            d.listen("keydown", runOn(this, this.o));
            d.listen("focus", runOn(this, this.n));
        }
        m() {
            return this.l;
        }
        p() {
            if (this.f != null) {
                this.g = this.f.createElement("div");
                this.g.setStyleProperty("height", "100%");
                this.f.append(this.g);
                for (let a = 0; a < 42; a++) {
                    let b = this.f.createElement("div");
                    this.b.add(b);
                }
                this.a.at(this.f, this.g, this.b);
                this.i = this.f.createElement("div");
                this.i.setStyleProperty("height", "100%");
                this.f.append(this.i);
                for (let c = 0; c < 12; c++) {
                    let d = this.f.createElement("div");
                    this.d.add(d);
                }
                this.a.av(this.f, this.i, this.d);
                for (let e = 0; e < 12; e++) {
                    let f = this.i.getChildAt(e);
                    f.listen("click", runOn(this, this.s));
                }
                this.i.hide();
                this.j = this.f.createElement("div");
                this.j.setStyleProperty("height", "100%");
                this.f.append(this.j);
                for (let g = 0; g < 7; g++) {
                    let h = this.f.createElement("div");
                    this.e.add(h);
                }
                this.a.aw(this.f, this.j, this.e);
                for (let i = 0; i < 7; i++) {
                    let j = this.j.getChildAt(i);
                    j.listen("click", runOn(this, this.an));
                }
                this.j.listen("wheel", runOn(this, this.ao));
                this.j.hide();
            }
        }
        ai() {
            if (this.f != null) {
                let a = this.g.getChildAt(0);
                for (let b = 0; b < 4; b++) {
                    let c = this.f.createElement("div");
                    this.c.add(c);
                }
                this.a.be(this.f, a, this.c);
                let d = a.getChildAt(0);
                let e = a.getChildAt(3);
                d.listen("click", runOn(this, this.z));
                e.listen("click", runOn(this, this.u));
                let f = a.getChildAt(1);
                let g = a.getChildAt(2);
                f.listen("click", runOn(this, this.t));
                g.listen("click", runOn(this, this.ap));
            }
        }
        aj() {
            if (this.f != null) {
                let a = this.g.getChildAt(1);
                this.a.bg(a);
            }
        }
        ah() {
            if (this.f != null) {
                this.a.bd(this.b);
                for (let a = 2; a < 8; a++) {
                    let b = this.g.getChildAt(a);
                    for (let c = 0; c < 7; c++) {
                        let d = b.getChildAt(c);
                        d.listen("click", runOn(this, this.q));
                    }
                }
            }
        }
        ag() {
            if (this.f != null) {
                this.a.bb(this.c._inner[1]);
                this.a.bj(this.c._inner[2]);
            }
        }
        ac(a = false) {
            if (this.f != null) {
                this.a.bd(this.b, a);
            }
        }
        af() {
            if (this.d.count != 0) {
                this.a.bf(this.d);
            }
        }
        ak() {
            if (this.e.count != 0) {
                this.a.bi(this.e);
            }
        }
        ab() {
            this.ac();
            this.ag();
            this.l = "day";
            this.g.show();
            this.i.hide();
            this.j.hide();
            this.r();
        }
        ad() {
            this.ae(this.c._inner[0]);
        }
        ae(a) {
            this.h = a;
        }
        r() {
            if (this.h != null) {
                this.h.parent().parent().focus(false);
            }
        }
        aa(a = true) {
            this.a.ap(-1);
            this.ac(a);
            this.ag();
        }
        v(a = true) {
            this.a.ap(1);
            this.ac(a);
            this.ag();
        }
        al() {
            this.g.hide();
            this.i.show();
            this.i.setStyleProperty("display", "flex");
            this.j.hide();
            this.l = "month";
            this.af();
            this.r();
        }
        am() {
            this.g.hide();
            this.i.hide();
            this.j.show();
            this.l = "year";
            this.ak();
            this.r();
        }
        n(a) {
        }
        o(a) {
            let b = a.which;
            if (this.l == "day") {
                let c = this.h.getAttribute("data-section").toString();
                let d = parseInt(this.h.getAttribute("data-index").toString());
                if (c == "header") {
                    if (b == 37) {
                        if (d > 0) {
                            let e = this.c._inner[d - 1];
                            this.ae(e);
                            this.r();
                        }
                        else {
                            this.aa(false);
                        }
                    }
                    else if (b == 39) {
                        if (d < 3) {
                            let f = this.c._inner[d + 1];
                            this.ae(f);
                            this.r();
                        }
                        else {
                            this.v(false);
                        }
                    }
                    else if (b == 9) {
                        if (a.shiftKey) {
                            this.a.a2();
                        }
                        else {
                            a.preventDefault();
                            this.ac(true);
                            this.r();
                        }
                    }
                    else if (b == 13) {
                        a.preventDefault();
                        if (d == 0) {
                            this.aa(false);
                        }
                        else if (d == 1) {
                            this.al();
                        }
                        else if (d == 2) {
                            this.am();
                        }
                        else if (d == 3) {
                            this.v(false);
                        }
                    }
                }
                else if (c == "days") {
                    let g = this.h.getAttribute("data-day").toString();
                    let h = this.h.getAttribute("data-month").toString();
                    if (b == 37) {
                        if (d == 0) {
                            this.aa();
                            this.r();
                        }
                        else {
                            let i = this.b._inner[d - 1];
                            let j = i.getAttribute("data-day").toString();
                            let k = i.getAttribute("data-month").toString();
                            if (h == k) {
                                this.ae(i);
                                this.r();
                            }
                            else {
                                this.aa();
                                let l = this.k(j, k);
                                this.ae(l);
                                this.r();
                            }
                        }
                    }
                    else if (b == 39) {
                        if (d == 41) {
                            this.v();
                            this.r();
                        }
                        else {
                            let m = this.b._inner[d + 1];
                            let n = m.getAttribute("data-day").toString();
                            let o = m.getAttribute("data-month").toString();
                            if (h == o) {
                                this.ae(m);
                                this.r();
                            }
                            else {
                                this.v();
                                let p = this.k(n, o);
                                this.ae(p);
                                this.r();
                            }
                        }
                    }
                    else if (b == 40) {
                        if (d >= 35) {
                            this.v();
                            let q = this.k(g, h);
                            let r = parseInt(q.getAttribute("data-index").toString());
                            let s = this.b._inner[r + 7];
                            let t = s.getAttribute("data-day").toString();
                            let u = s.getAttribute("data-month").toString();
                            let v = this.k(t, u);
                            this.ae(v);
                            this.r();
                        }
                        else {
                            let w = this.b._inner[d + 7];
                            let x = w.getAttribute("data-day").toString();
                            let y = w.getAttribute("data-month").toString();
                            if (h == y) {
                                this.ae(w);
                                this.r();
                            }
                            else {
                                this.v();
                                let z = this.k(x, y);
                                this.ae(z);
                                this.r();
                            }
                        }
                    }
                    else if (b == 38) {
                        if (d <= 6) {
                            this.aa();
                            let aa = this.k(g, h);
                            let ab = parseInt(aa.getAttribute("data-index").toString());
                            let ac = this.b._inner[ab - 7];
                            let ad = ac.getAttribute("data-day").toString();
                            let ae = ac.getAttribute("data-month").toString();
                            let af = this.k(ad, ae);
                            this.ae(af);
                            this.r();
                        }
                        else {
                            let ag = this.b._inner[d - 7];
                            let ah = ag.getAttribute("data-day").toString();
                            let ai = ag.getAttribute("data-month").toString();
                            if (h == ai) {
                                this.ae(ag);
                                this.r();
                            }
                            else {
                                this.aa();
                                let aj = this.k(ah, ai);
                                this.ae(aj);
                                this.r();
                            }
                        }
                    }
                    else if (b == 34) {
                        this.v();
                        this.r();
                    }
                    else if (b == 33) {
                        this.aa();
                        this.r();
                    }
                    else if (b == 9) {
                        if (a.shiftKey) {
                            a.preventDefault();
                            let ak = this.c._inner[1];
                            this.ae(ak);
                            this.r();
                        }
                        else {
                            this.a.a2();
                        }
                    }
                }
            }
            else if (this.l == "month") {
                let al = parseInt(this.h.getAttribute("data-index").toString());
                if (b == 37) {
                    if (al == 0) {
                        let am = this.d._inner[11];
                        this.ae(am);
                        this.r();
                    }
                    else {
                        let an = this.d._inner[al - 1];
                        this.ae(an);
                        this.r();
                    }
                }
                else if (b == 39) {
                    if (al == 11) {
                        let ao = this.d._inner[0];
                        this.ae(ao);
                        this.r();
                    }
                    else {
                        let ap = this.d._inner[al + 1];
                        this.ae(ap);
                        this.r();
                    }
                }
                else if (b == 40) {
                    if (al >= 9) {
                        let aq = this.d._inner[al - 9];
                        this.ae(aq);
                        this.r();
                    }
                    else {
                        let ar = this.d._inner[al + 3];
                        this.ae(ar);
                        this.r();
                    }
                }
                else if (b == 38) {
                    if (al <= 2) {
                        let as = this.d._inner[al + 9];
                        this.ae(as);
                        this.r();
                    }
                    else {
                        let at = this.d._inner[al - 3];
                        this.ae(at);
                        this.r();
                    }
                }
                else if (b == 13) {
                    this.ae(this.c._inner[1]);
                    this.r();
                }
            }
            else if (this.l == "year") {
                let au = parseInt(this.h.getAttribute("data-index").toString());
                if (b == 40) {
                    this.a.a9(this.e, 1);
                }
                else if (b == 38) {
                    this.a.a9(this.e, -1);
                }
                else if (b == 13) {
                    this.ae(this.c._inner[2]);
                    this.r();
                }
            }
            if (b == 27) {
                this.ab();
                this.a.a2();
            }
        }
        k(a, b) {
            let c = null;
            for (let d = 0; d < 42; d++) {
                let e = this.b._inner[d];
                let f = e.getAttribute("data-day").toString();
                let g = e.getAttribute("data-month").toString();
                if (b == g && a == f) {
                    c = e;
                    break;
                }
            }
            return c;
        }
        z(a) {
            this.aa();
        }
        u(a) {
            this.v();
        }
        t(a) {
            this.al();
        }
        ap(a) {
            this.am();
        }
        q(e_) {
            let a = (e_.originalEvent.currentTarget);
            let b = a.innerText;
            let c = a.lastChild.lastChild.lastChild;
            let d = c.getAttribute("data-month").toString();
            let e = c.getAttribute("data-year").toString();
            if (b != "") {
                this.a.ay(b, d, e);
            }
        }
        s(e_) {
            let a = (e_.originalEvent.currentTarget);
            let b = a.getAttribute("data-month").toString();
            if (b != "") {
                this.a.aq(parseInt(b));
                this.ab();
            }
        }
        an(e_) {
            let a = (e_.originalEvent.currentTarget);
            let b = a.innerText;
            if (b != "") {
                this.a.ar(parseInt(b));
                this.ab();
            }
        }
        ao(e_) {
            let a = (e_.originalEvent.deltaY);
            this.a.a9(this.e, a);
        }
        w() {
        }
    }
    CalendarView.$t = /*@__PURE__*/ markType(CalendarView, 'CalendarView');
    return CalendarView;
})();
/**
 * @hidden
 */
let Calendar = /*@__PURE__*/ (() => {
    class Calendar extends Base {
        constructor() {
            super();
            this.h = null;
            this.s = dateNow();
            this.t = dateNow();
            this.r = new Date();
            this.n = null;
            this.o = null;
            this.m = null;
            this.p = null;
            this.q = null;
            this.propertyChanged = null;
            this.close = null;
            this.valueChanged = null;
            this.w = toNullable(Date_$type, null);
            this.c = 3;
            this.a = 1;
            this.bm = BrushUtil.g(0, 255, 255, 255);
            this.br = BrushUtil.g(255, 33, 150, 243);
            this.bt = BrushUtil.g(255, 21, 112, 184);
            this.bo = BrushUtil.g(76, 33, 150, 243);
            this.bq = BrushUtil.g(50, 186, 191, 199);
            this.bu = BrushUtil.g(255, 24, 29, 31);
            this.bs = BrushUtil.g(255, 255, 255, 255);
            this.bp = BrushUtil.g(255, 24, 29, 31);
            this.bn = BrushUtil.g(255, 33, 150, 243);
            this.k = null;
            this.r = dateAddYears(this.r, -200);
            this.n = new ObservableCollection$1(DayInfo.$, 0);
            this.o = new ObservableCollection$1(Button.$, 0);
            this.m = new ObservableCollection$1(Button.$, 0);
            this.p = new ObservableCollection$1(Button.$, 0);
            this.q = new ObservableCollection$1(Button.$, 0);
            let a = new CalendarView();
            a.a = this;
            this.h = a;
            this.h.y();
        }
        a2() {
            if (this.close != null) {
                this.close(this);
            }
        }
        a4(a) {
            let b = this.w;
            this.w = toNullable(Date_$type, a);
            if (this.valueChanged != null) {
                this.valueChanged(this, ((() => {
                    let $ret = new ValueChangedEventArgs();
                    $ret.oldValue = b.value;
                    $ret.newValue = a;
                    return $ret;
                })()));
            }
            if (nullableNotEquals(this.w, null)) {
                this.s = this.w.value;
            }
            this.a7();
        }
        ay(a, b, c) {
            let d = dateFromValues(parseInt(c), parseInt(b), parseInt(a), 0, 0, 0, 0);
            this.a4(d);
        }
        notifySizeChanged() {
            this.h.w();
        }
        destroy() {
            this.provideContainer(null);
        }
        provideContainer(a) {
            this.h.x(a);
        }
        get u() {
            return this.w.value;
        }
        set u(a) {
            let b = this.w;
            this.w = toNullable(Date_$type, a);
            if (nullableNotEquals(b, this.w)) {
                this.a3("Value", unwrapNullable(b), unwrapNullable(this.w));
            }
        }
        get d() {
            return this.c;
        }
        set d(a) {
            let b = this.c;
            this.c = a;
            if (b != this.c) {
                this.a3("Density", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, this.c));
            }
        }
        get b() {
            return this.a;
        }
        set b(a) {
            let b = this.a;
            this.a = a;
            if (b != this.a) {
                this.a3("BaseTheme", enumGetBox(BaseControlTheme_$type, b), enumGetBox(BaseControlTheme_$type, this.a));
            }
        }
        get bv() {
            return this.bm;
        }
        set bv(a) {
            let b = this.bm;
            this.bm = a;
            if (b != this.bm) {
                this.a3("BackgroundColor", b, this.bm);
            }
        }
        get b0() {
            return this.br;
        }
        set b0(a) {
            let b = this.br;
            this.br = a;
            if (b != this.br) {
                this.a3("SelectedDateBackgroundColor", b, this.br);
            }
        }
        get b2() {
            return this.bt;
        }
        set b2(a) {
            let b = this.bt;
            this.bt = a;
            if (b != this.bt) {
                this.a3("SelectedFocusDateBackgroundColor", b, this.bt);
            }
        }
        get bx() {
            return this.bo;
        }
        set bx(a) {
            let b = this.bo;
            this.bo = a;
            if (b != this.bo) {
                this.a3("FocusDateBackgroundColor", b, this.bo);
            }
        }
        get bz() {
            return this.bq;
        }
        set bz(a) {
            let b = this.bq;
            this.bq = a;
            if (b != this.bq) {
                this.a3("HoverBackgroundColor", b, this.bq);
            }
        }
        get b3() {
            return this.bu;
        }
        set b3(a) {
            let b = this.bu;
            this.bu = a;
            if (b != this.bu) {
                this.a3("TextColor", b, this.bu);
            }
        }
        get b1() {
            return this.bs;
        }
        set b1(a) {
            let b = this.bs;
            this.bs = a;
            if (b != this.bs) {
                this.a3("SelectedDateTextColor", b, this.bs);
            }
        }
        get by() {
            return this.bp;
        }
        set by(a) {
            let b = this.bp;
            this.bp = a;
            if (b != this.bp) {
                this.a3("FocusDateTextColor", b, this.bp);
            }
        }
        get bw() {
            return this.bn;
        }
        set bw(a) {
            let b = this.bn;
            this.bn = a;
            if (b != this.bn) {
                this.a3("CurrentDateTextColor", b, this.bn);
            }
        }
        get l() {
            return this.k;
        }
        set l(a) {
            let b = this.k;
            this.k = a;
            if (b != this.k) {
                this.a3("TextStyle", b, this.k);
            }
        }
        a3(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            this.a5(a, b, c);
        }
        a5(a, b, c) {
            switch (a) {
                case "Density":
                    this.ba();
                    break;
                case "BaseTheme":
                    this.bc();
                    break;
                case "Value":
                    if (nullableNotEquals(this.w, null)) {
                        this.s = this.w.value;
                    }
                    this.a7();
                    break;
                case "TextColor":
                case "SelectedDateTextColor":
                case "FocusDateTextColor":
                case "CurrentDateTextColor":
                case "BackgroundColor":
                case "FocusDateBackgroundColor":
                case "SelectedFocusDateBackgroundColor":
                case "SelectedDateBackgroundColor":
                case "HoverBackgroundColor":
                    this.bk();
                    break;
                case "TextStyle":
                    this.bl();
                    break;
            }
        }
        bk() {
            for (let a = 0; a < this.o.count; a++) {
                if (this.b3 != null) {
                    this.o._inner[a].s4 = this.b3;
                }
                if (this.by != null) {
                    this.o._inner[a].s0 = this.by;
                }
                if (this.bv != null) {
                    this.o._inner[a].su = this.bv;
                }
                if (this.bx != null) {
                    this.o._inner[a].sz = this.bx;
                }
                if (this.bz != null) {
                    this.o._inner[a].s1 = this.bz;
                }
            }
            for (let b = 0; b < this.m.count; b++) {
                if (this.b3 != null) {
                    this.m._inner[b].s4 = this.b3;
                }
                if (this.by != null) {
                    this.m._inner[b].s0 = this.by;
                }
                if (this.bv != null) {
                    this.m._inner[b].su = this.bv;
                }
                if (this.bx != null) {
                    this.m._inner[b].sz = this.bx;
                }
                if (this.bz != null) {
                    this.m._inner[b].s1 = this.bz;
                }
            }
            for (let c = 0; c < this.p.count; c++) {
                if (this.b3 != null) {
                    this.p._inner[c].s4 = this.b3;
                }
                if (this.by != null) {
                    this.p._inner[c].s0 = this.by;
                }
                if (this.bv != null) {
                    this.p._inner[c].su = this.bv;
                }
                if (this.bx != null) {
                    this.p._inner[c].sz = this.bx;
                }
                if (this.bz != null) {
                    this.p._inner[c].s1 = this.bz;
                }
            }
            for (let d = 0; d < this.q.count; d++) {
                if (this.b3 != null) {
                    this.q._inner[d].s4 = this.b3;
                }
                if (this.by != null) {
                    this.q._inner[d].s0 = this.by;
                }
                if (this.bv != null) {
                    this.q._inner[d].su = this.bv;
                }
                if (this.bx != null) {
                    this.q._inner[d].sz = this.bx;
                }
                if (this.bz != null) {
                    this.q._inner[d].s1 = this.bz;
                }
            }
        }
        bl() {
            for (let a = 0; a < this.o.count; a++) {
                if (this.k != null) {
                    this.o._inner[a].v = this.k;
                }
            }
            for (let b = 0; b < this.m.count; b++) {
                if (this.k != null) {
                    this.m._inner[b].v = this.k;
                }
            }
            for (let c = 0; c < this.p.count; c++) {
                if (this.k != null) {
                    this.p._inner[c].v = this.k;
                }
            }
            for (let d = 0; d < this.q.count; d++) {
                if (this.k != null) {
                    this.q._inner[d].v = this.k;
                }
            }
        }
        a0() {
            this.h.ad();
            this.h.r();
        }
        bc() {
        }
        ba() {
        }
        as() {
        }
        ax() {
            this.w = toNullable(Date_$type, null);
            this.h.ac();
        }
        a7() {
            this.au();
            this.h.ag();
            this.h.ak();
            this.h.ac();
        }
        at(a, b, c) {
            let d = a.createElement("div");
            d.setStyleProperty("height", "14%");
            d.setStyleProperty("display", "flex");
            d.setStyleProperty("justify-content", "space-evenly");
            let e = a.createElement("div");
            e.setStyleProperty("width", "15%");
            let f = a.createElement("div");
            f.setStyleProperty("width", "20%");
            let g = a.createElement("div");
            g.setStyleProperty("width", "20%");
            let h = a.createElement("div");
            h.setStyleProperty("width", "15%");
            d.append(e);
            d.append(f);
            d.append(g);
            d.append(h);
            b.append(d);
            let i = 0;
            for (let j = 0; j < 7; j++) {
                let k = a.createElement("div");
                k.setStyleProperty("display", "flex");
                k.setStyleProperty("justify-content", "space-evenly");
                if (j == 0) {
                    k.setStyleProperty("height", "10%");
                    for (let l = 0; l < 7; l++) {
                        let m = a.createElement("div");
                        m.setStyleProperty("text-align", "center");
                        m.setStyleProperty("vertical-align", "middle");
                        m.setStyleProperty("width", "12%");
                        let n = a.createElement("span");
                        n.setStyleProperty("font", "16px \"Segoe UI\", Verdana");
                        n.setStyleProperty("color", "rgb(24, 29, 31)");
                        m.append(n);
                        k.append(m);
                    }
                }
                else {
                    k.setStyleProperty("height", "12%");
                    for (let o = 0; o < 7; o++) {
                        let p = a.createElement("div");
                        p.setStyleProperty("justify-content", "center");
                        let q = c._inner[i];
                        let r = this.g(a, p, q);
                        r.bh = 30;
                        r.bg = 30;
                        this.m.add(r);
                        r.ig = "btnDays" + o.toString();
                        p.setStyleProperty("width", "12%");
                        p.setStyleProperty("height", "100%");
                        k.append(p);
                        i++;
                    }
                }
                b.append(k);
            }
            this.au();
        }
        av(a, b, c) {
            b.setStyleProperty("display", "flex");
            b.setStyleProperty("flex-direction", "row");
            b.setStyleProperty("flex-wrap", "wrap");
            b.setStyleProperty("margin", "2px");
            b.setStyleProperty("justify-content", "center");
            for (let d = 0; d < 12; d++) {
                let e = a.createElement("div");
                e.setStyleProperty("margin", "5px");
                e.setAttribute("data-month", (d + 1).toString());
                let f = c._inner[d];
                let g = this.g(a, e, f);
                g.bh = 40;
                this.p.add(g);
                e.setStyleProperty("width", "28%");
                let h = e.getChildAt(0);
                h.setStyleProperty("width", "100%");
                let i = f.getChildAt(0);
                let j = "";
                let k = d + 1;
                switch (k) {
                    case 1:
                        j = "Jan";
                        break;
                    case 2:
                        j = "Feb";
                        break;
                    case 3:
                        j = "Mar";
                        break;
                    case 4:
                        j = "Apr";
                        break;
                    case 5:
                        j = "May";
                        break;
                    case 6:
                        j = "Jun";
                        break;
                    case 7:
                        j = "Jul";
                        break;
                    case 8:
                        j = "Aug";
                        break;
                    case 9:
                        j = "Sep";
                        break;
                    case 10:
                        j = "Oct";
                        break;
                    case 11:
                        j = "Nov";
                        break;
                    case 12:
                        j = "Dec";
                        break;
                }
                g.ig = "btnMonth" + j;
                i.setText(j);
                f.setAttribute("data-index", d.toString());
                f.append(i);
                b.append(e);
            }
        }
        aw(a, b, c) {
            let d = this.s.getFullYear() - 3;
            b.setStyleProperty("padding", "5px");
            for (let e = 0; e < 7; e++) {
                let f = a.createElement("div");
                let g = c._inner[e];
                let h = this.g(a, f, g);
                this.q.add(h);
                f.setStyleProperty("width", "100%");
                f.setStyleProperty("height", "14%");
                f.setStyleProperty("justify-content", "center");
                let i = f.getChildAt(0);
                i.setStyleProperty("width", "98%");
                let j = g.getChildAt(0);
                h.ig = "btnYear" + e.toString();
                j.setText(d.toString());
                d++;
                g.setAttribute("data-index", e.toString());
                g.append(j);
                b.append(f);
            }
        }
        au() {
            this.n.clear();
            let a = dateAddDays(this.s, -(this.s.getDate() - 1));
            let b = a.getDay();
            a = dateAddDays(a, -b);
            while (this.n.count < 42) {
                let c = new DayInfo();
                c.b = a.getDate();
                c.c = dateGetMonth(a);
                c.d = a.getFullYear();
                c.a = a.getDay();
                this.n.add(c);
                a = dateAddDays(a, 1);
            }
        }
        be(a, b, c) {
            let d = b.getChildAt(0);
            let e = c._inner[0];
            let f = this.f(a, d, e, Calendar.y);
            f.bh = 28;
            f.bg = 28;
            f.ig = "btnPrev";
            this.o.add(f);
            e.setAttribute("data-section", "header");
            e.setAttribute("data-index", "0");
            let g = b.getChildAt(1);
            let h = c._inner[1];
            let i = this.g(a, g, h);
            i.bh = 40;
            i.ig = "btnMonth";
            this.o.add(i);
            h.setAttribute("data-section", "header");
            h.setAttribute("data-index", "1");
            this.bb(h);
            let j = b.getChildAt(2);
            let k = c._inner[2];
            let l = this.g(a, j, k);
            l.bh = 40;
            l.ig = "btnYear";
            this.o.add(l);
            k.setAttribute("data-section", "header");
            k.setAttribute("data-index", "2");
            this.bj(k);
            let m = b.getChildAt(3);
            let n = c._inner[3];
            let o = this.f(a, m, n, Calendar.z);
            o.bh = 28;
            o.bg = 28;
            o.ig = "btnNext";
            this.o.add(o);
            n.setAttribute("data-section", "header");
            n.setAttribute("data-index", "3");
        }
        bb(a) {
            let b = a.getChildAt(0);
            let c = dateGetMonth(this.s);
            let d = "";
            switch (c) {
                case 1:
                    d = "Jan";
                    break;
                case 2:
                    d = "Feb";
                    break;
                case 3:
                    d = "Mar";
                    break;
                case 4:
                    d = "Apr";
                    break;
                case 5:
                    d = "May";
                    break;
                case 6:
                    d = "Jun";
                    break;
                case 7:
                    d = "Jul";
                    break;
                case 8:
                    d = "Aug";
                    break;
                case 9:
                    d = "Sep";
                    break;
                case 10:
                    d = "Oct";
                    break;
                case 11:
                    d = "Nov";
                    break;
                case 12:
                    d = "Dec";
                    break;
            }
            b.setText(d);
        }
        bj(a) {
            let b = a.getChildAt(0);
            let c = this.s.getFullYear().toString();
            b.setText(c);
        }
        bg(a) {
            let b = a.getChildAt(0);
            let c = b.getChildAt(0);
            c.setText("S");
            b.append(c);
            let d = a.getChildAt(1);
            let e = d.getChildAt(0);
            e.setText("M");
            d.append(e);
            let f = a.getChildAt(2);
            let g = f.getChildAt(0);
            g.setText("T");
            f.append(g);
            let h = a.getChildAt(3);
            let i = h.getChildAt(0);
            i.setText("W");
            h.append(i);
            let j = a.getChildAt(4);
            let k = j.getChildAt(0);
            k.setText("T");
            j.append(k);
            let l = a.getChildAt(5);
            let m = l.getChildAt(0);
            m.setText("F");
            l.append(m);
            let n = a.getChildAt(6);
            let o = n.getChildAt(0);
            o.setText("S");
            n.append(o);
        }
        bd(a, b = false) {
            let c = null;
            let d = null;
            let e = null;
            for (let f = 0; f < 42; f++) {
                let g = a._inner[f];
                let h = g.getChildAt(0);
                let i = this.n._inner[f];
                let j = this.m._inner[f];
                if (i != null) {
                    g.setAttribute("data-section", "days");
                    g.setAttribute("data-index", f.toString());
                    g.setAttribute("data-day", i.b.toString());
                    g.setAttribute("data-month", i.c.toString());
                    g.setAttribute("data-year", i.d.toString());
                    h.setText(i.b.toString());
                    if (nullableNotEquals(this.w, null) && i.b == this.w.value.getDate() && i.c == dateGetMonth(this.w.value) && i.d == this.w.value.getFullYear()) {
                        j.s4 = this.b1;
                        j.s0 = this.b1;
                        j.su = this.b0;
                        j.sz = this.b2;
                        j.sv = this.bv;
                        c = g;
                    }
                    else if (i.b == this.t.getDate() && i.c == dateGetMonth(this.t) && i.d == this.t.getFullYear()) {
                        j.s4 = this.bw;
                        ;
                        j.s0 = this.by;
                        j.su = this.bv;
                        j.sz = this.bx;
                        j.sv = this.bw;
                        j.be = 1;
                        d = g;
                    }
                    else if (i.a != 0 && i.a != 6 && i.c == dateGetMonth(this.s)) {
                        j.s4 = this.b3;
                        j.s0 = this.by;
                        j.su = this.bv;
                        j.sz = this.bx;
                        j.sv = this.bv;
                    }
                    else {
                        j.s4 = this.b3;
                        j.s0 = this.by;
                        j.su = this.bv;
                        j.sz = this.bx;
                        j.sv = this.bv;
                    }
                    if (i.b == 1 && i.c == dateGetMonth(this.s)) {
                        e = g;
                    }
                }
            }
            if (b == true) {
                if (c != null && nullableNotEquals(this.w, null) && this.w.value.getFullYear() == this.s.getFullYear() && dateGetMonth(this.w.value) == dateGetMonth(this.s)) {
                    this.h.ae(c);
                }
                else if (d != null && this.t.getFullYear() == this.s.getFullYear() && dateGetMonth(this.t) == dateGetMonth(this.s)) {
                    this.h.ae(d);
                }
                else if (e != null) {
                    this.h.ae(e);
                }
            }
        }
        bf(a) {
            let b = null;
            let c = null;
            for (let d = 0; d < 12; d++) {
                let e = a._inner[d];
                e.setAttribute("data-section", "months");
                if (nullableNotEquals(this.w, null) && dateGetMonth(this.w.value) == d + 1) {
                    c = e;
                }
                if (dateGetMonth(this.t) == d + 1) {
                    b = e;
                }
            }
            if (c != null) {
                this.h.ae(c);
            }
            else if (b != null) {
                this.h.ae(b);
            }
            else {
                this.h.ae(a._inner[0]);
            }
        }
        bi(a) {
            this.bh(a, this.s.getFullYear(), true);
        }
        bh(a, b, c = false) {
            let d = b - 3;
            for (let e = 0; e < 7; e++) {
                let f = a._inner[e];
                f.setAttribute("data-section", "years");
                let g = f.getChildAt(0);
                g.setText(d.toString());
                if (d == b && c) {
                    this.h.ae(f);
                }
                d++;
            }
        }
        g(a, b, c) {
            let d = a.getSubRenderer(b);
            let e = new Button();
            e.provideContainer(d);
            e.d = this.b;
            e.h = this.d;
            e.v = this.k;
            e.eu = -1;
            e.s = 1;
            if (this.k != null) {
                e.v = this.k;
            }
            let f = a.createElement("span");
            let g = new CornerRadius(0, 2);
            e.kd = g;
            e.ku = g;
            e.ec = 0;
            c.append(f);
            e.appendButtonContent(c);
            e.s4 = this.b3;
            e.s0 = this.by;
            e.su = this.bv;
            e.sz = this.bx;
            e.s1 = this.bz;
            return e;
        }
        f(a, b, c, d) {
            let e = a.getSubRenderer(b);
            let f = new Button();
            f.provideContainer(e);
            f.d = this.b;
            f.h = this.d;
            f.v = this.k;
            f.eu = -1;
            f.s = 1;
            let g = new CornerRadius(0, 2);
            f.kd = g;
            f.ku = g;
            f.ec = 0;
            let h = a.createElement("div");
            let i = a.getSubRenderer(h);
            let j = new Icon();
            j.provideContainer(i);
            j.svgPath = d;
            c.append(h);
            f.appendButtonContent(c);
            f.s4 = this.b3;
            f.s0 = this.by;
            f.su = this.bv;
            f.sz = this.bx;
            f.s1 = this.bz;
            return f;
        }
        ap(a) {
            this.s = dateAddMonths(this.s, a);
            this.au();
        }
        aq(a) {
            this.s = dateFromValues(this.s.getFullYear(), a, this.s.getDate(), 0, 0, 0, 0);
            this.au();
        }
        ar(a) {
            this.s = dateFromValues(a, dateGetMonth(this.s), this.s.getDate(), 0, 0, 0, 0);
            this.au();
        }
        a9(a, b) {
            let c = parseInt(a._inner[3].getChildAt(0).getText());
            if (b < 0) {
                c--;
            }
            else {
                c++;
            }
            this.bh(a, c);
        }
        a8() {
            this.h.ab();
        }
        x() {
            return this.e();
        }
        af() {
            let a = this.e();
            return a.l();
        }
        e() {
            let a = new CalendarVisualModelExport();
            a.h = this.d;
            a.g = this.b;
            a.d = AppearanceHelper.a(this.b0);
            a.f = AppearanceHelper.a(this.b2);
            a.b = AppearanceHelper.a(this.bx);
            a.e = AppearanceHelper.a(this.b1);
            a.c = AppearanceHelper.a(this.by);
            a.a = AppearanceHelper.a(this.bw);
            a.i = new List$1(ButtonVisualModelExport.$, 0);
            let b = this.h.m();
            a.k = b;
            if (b == "day") {
                for (let c = 0; c < this.o.count; c++) {
                    if (this.o._inner[c].ig == null) {
                        this.o._inner[c].ig = "header" + c.toString();
                    }
                    a.i.add1(this.o._inner[c].ey());
                }
                for (let d = 0; d < this.m.count; d++) {
                    if (this.m._inner[d].ig == null) {
                        this.m._inner[d].ig = "days" + d.toString();
                    }
                    a.i.add1(this.m._inner[d].ey());
                }
            }
            else if (b == "month") {
                for (let e = 0; e < this.p.count; e++) {
                    if (this.p._inner[e].ig == null) {
                        this.p._inner[e].ig = "months" + e.toString();
                    }
                    a.i.add1(this.p._inner[e].ey());
                }
            }
            else if (b == "year") {
                for (let f = 0; f < this.q.count; f++) {
                    if (this.q._inner[f].ig == null) {
                        this.q._inner[f].ig = "years" + f.toString();
                    }
                    a.i.add1(this.q._inner[f].ey());
                }
            }
            if (this.l != null) {
                let g = this.l;
                if (this.h != null && g.n == null) {
                    let h = this.h.f;
                    let i = FontUtil.getFontInfoFromString(h, g.fontString);
                    g.n = i.n;
                    g.d = i.d;
                    g.o = i.o;
                    g.q = i.q;
                    g.r = i.r;
                    g.s = i.s;
                }
                if (g.n != null) {
                    a.m = g.n;
                }
                if (!isNaN_(g.d)) {
                    a.j = g.d;
                }
                if (g.s != null) {
                    a.q = g.s;
                }
                if (g.q != null) {
                    a.o = g.q;
                }
                if (g.o != null) {
                    a.n = g.q;
                }
            }
            return a;
        }
    }
    Calendar.$t = /*@__PURE__*/ markType(Calendar, 'Calendar', Base.$, [INotifyPropertyChanged_$type]);
    Calendar.y = "M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z";
    Calendar.z = "M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z";
    return Calendar;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

class IgrValueChangedEventArgs {
    createImplementation() {
        return new ValueChangedEventArgs();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    get oldValue() {
        return this.i.oldValue;
    }
    set oldValue(v) {
        this.i.oldValue = v;
    }
    get newValue() {
        return this.i.newValue;
    }
    set newValue(v) {
        this.i.newValue = v;
    }
}

class IgrCalendar extends Component {
    constructor(props) {
        super(props);
        this._implementation = null;
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        this._valueChanged = null;
        this._valueChanged_wrapped = null;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._getMainRef = this._getMainRef.bind(this);
        this._implementation = this.createImplementation();
        var calendar = this.i;
        this._calendar = calendar;
        calendar.notifySizeChanged();
        if (props) {
            this.initializeProperties();
        }
    }
    set height(value) {
        this._height = value;
        if (this._elRef) {
            this._elRef.style.height = value;
            this._calendar.notifySizeChanged();
        }
    }
    get height() {
        return this._height;
    }
    set width(value) {
        this._width = value;
        if (this._elRef) {
            this._elRef.style.height = value;
            this._calendar.notifySizeChanged();
        }
    }
    get width() {
        return this._width;
    }
    _getMainRef(ref) {
        this._elRef = ref;
        if (this._elRef != null) {
            this._renderer = new ReactRenderer(this._elRef, document, false, null);
            this._calendar.provideContainer(this._renderer);
        }
    }
    render() {
        let children = [];
        let div = createElement("div", {
            className: "ig-calendar igr-calendar",
            ref: this._getMainRef,
            children: children
        });
        return div;
    }
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    initializeProperties() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    // supports angular themes or custom properties set in CSS
    updateStyle() {
        this._styling(this._elRef, this);
    }
    componentWillUnmount() {
        this._calendar.destroy();
        if (this._renderer) {
            this._renderer.destroy();
        }
    }
    componentDidMount() {
        this._elRef.style.width = this._width ? this._width : "";
        this._elRef.style.height = this._height ? this._height : "";
        this._calendar.notifySizeChanged();
        this.initializeContent();
    }
    initializeContent() {
        this.updateStyle();
        this.i.notifySizeChanged();
    }
    createImplementation() {
        return new Calendar();
    }
    get i() {
        return this._implementation;
    }
    /**
 * Gets or Sets the value for the calendar.
*/
    get value() {
        return this.i.u;
    }
    set value(v) {
        this.i.u = v;
    }
    /**
     * Gets or sets the display density to use for the calendar.
    */
    get density() {
        return this.i.d;
    }
    set density(v) {
        this.i.d = ensureEnum(ControlDisplayDensity_$type, v);
    }
    /**
     * Gets or sets the base built in theme to use for the calendar.
    */
    get baseTheme() {
        return this.i.b;
    }
    set baseTheme(v) {
        this.i.b = ensureEnum(BaseControlTheme_$type, v);
    }
    /**
     * Gets or Sets the selected date background color
    */
    get backgroundColor() {
        return brushToString(this.i.bv);
    }
    set backgroundColor(v) {
        this.i.bv = stringToBrush(v);
    }
    /**
     * Gets or Sets the selected date background color
    */
    get selectedDateBackgroundColor() {
        return brushToString(this.i.b0);
    }
    set selectedDateBackgroundColor(v) {
        this.i.b0 = stringToBrush(v);
    }
    /**
     * Gets or Sets the selected date background color
    */
    get selectedFocusDateBackgroundColor() {
        return brushToString(this.i.b2);
    }
    set selectedFocusDateBackgroundColor(v) {
        this.i.b2 = stringToBrush(v);
    }
    /**
     * Gets or Sets the focus date background color
    */
    get focusDateBackgroundColor() {
        return brushToString(this.i.bx);
    }
    set focusDateBackgroundColor(v) {
        this.i.bx = stringToBrush(v);
    }
    /**
     * Gets or Sets the focus date background color
    */
    get hoverBackgroundColor() {
        return brushToString(this.i.bz);
    }
    set hoverBackgroundColor(v) {
        this.i.bz = stringToBrush(v);
    }
    /**
     * Gets or Sets the selected date text color
    */
    get textColor() {
        return brushToString(this.i.b3);
    }
    set textColor(v) {
        this.i.b3 = stringToBrush(v);
    }
    /**
     * Gets or Sets the selected date text color
    */
    get selectedDateTextColor() {
        return brushToString(this.i.b1);
    }
    set selectedDateTextColor(v) {
        this.i.b1 = stringToBrush(v);
    }
    /**
     * Gets or Sets the focus date text color
    */
    get focusDateTextColor() {
        return brushToString(this.i.by);
    }
    set focusDateTextColor(v) {
        this.i.by = stringToBrush(v);
    }
    /**
     * Gets or Sets the current date text color
    */
    get currentDateTextColor() {
        return brushToString(this.i.bw);
    }
    set currentDateTextColor(v) {
        this.i.bw = stringToBrush(v);
    }
    /**
     * Gets or sets the font to use for the combobox.
    */
    get textStyle() {
        if (this.i.l == null) {
            return null;
        }
        return this.i.l.fontString;
    }
    set textStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.l = fi;
    }
    get hasUserValues() {
        return this._hasUserValues;
    }
    __m(propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    }
    _styling(container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        let genericPrefix = "";
        let typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("Calendar");
        let additionalPrefixes = [];
        let prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        let b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            let basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            let parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            let parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    }
    /**
 * Exports visual information about the current state of the grid.

*/
    exportVisualModel() {
        let iv = this.i.x();
        return (iv);
    }
    /**
     * Returns a serialized copy of the exported visual model
    
    */
    exportSerializedVisualModel() {
        let iv = this.i.af();
        return (iv);
    }
    /**
     * Called when date is selected.
    */
    get valueChanged() {
        return this._valueChanged;
    }
    set valueChanged(ev) {
        if (this._valueChanged_wrapped !== null) {
            this.i.valueChanged = delegateRemove(this.i.valueChanged, this._valueChanged_wrapped);
            this._valueChanged_wrapped = null;
            this._valueChanged = null;
        }
        this._valueChanged = ev;
        this._valueChanged_wrapped = (o, e) => {
            let outerArgs = new IgrValueChangedEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeValueChanged) {
                this.beforeValueChanged(this, outerArgs);
            }
            if (this._valueChanged) {
                this._valueChanged(this, outerArgs);
            }
        };
        this.i.valueChanged = delegateCombine(this.i.valueChanged, this._valueChanged_wrapped);
    }
}

class IgrRipple extends Component {
    constructor(props) {
        super(props);
        this._wrapper = null;
        this._implementation = null;
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this._getMainRef = this._getMainRef.bind(this);
        if (document) {
            this._container = document.createElement("div");
            this._container.style.display = "block";
        }
        var root;
        root = this._container;
        if (this._container != null) {
            root = this._container;
        }
        var ren = new ReactRenderer(root, document, true, {});
        this._wrapper = ren;
        var ripple = this.i;
        this._ripple = ripple;
        ripple.provideContainer(ren);
        if (props) {
            this.initializeProperties();
        }
    }
    set height(value) {
        this._height = value;
        if (this._elRef) {
            this._elRef.style.height = value;
        }
    }
    get height() {
        return this._height;
    }
    set width(value) {
        this._width = value;
        if (this._elRef) {
            this._elRef.style.width = value;
        }
    }
    get width() {
        return this._width;
    }
    set top(value) {
        this._top = value;
        if (this._elRef) {
            this._elRef.style.top = value;
        }
    }
    get top() {
        return this._top;
    }
    set left(value) {
        this._left = value;
        if (this._elRef) {
            this._elRef.style.left = value;
        }
    }
    get left() {
        return this._left;
    }
    set position(value) {
        this._position = value;
        if (this._elRef) {
            this._elRef.style.position = value;
        }
    }
    get position() {
        return this._position;
    }
    _getMainRef(ref) {
        this._elRef = ref;
    }
    render() {
        let div = createElement("div", {
            className: "ig-ripple igr-ripple",
            ref: this._getMainRef
        });
        //}
        return div;
    }
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    initializeProperties() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    // supports angular themes or custom properties set in CSS
    updateStyle() {
        this._styling(this._elRef, this);
    }
    componentWillUnmount() {
        this._ripple.destroy();
        this._wrapper.destroy();
    }
    componentDidMount() {
        this._elRef.appendChild(this._container);
        this.initializeContent();
    }
    initializeContent() {
        this._styling(this._container, this);
        this.updateStyle();
    }
    createImplementation() {
        return new Ripple();
    }
    get i() {
        return this._implementation;
    }
    /**
 * Gets or sets the target element to inject ripples into.
*/
    get eventSource() {
        return this.i.q;
    }
    set eventSource(v) {
        this.i.q = v;
    }
    /**
     * Gets or sets the color to use for the background when the checkbox is unchecked.
    */
    get rippleColor() {
        return brushToString(this.i.ax);
    }
    set rippleColor(v) {
        this.i.ax = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the background when the ripple is hovered.
    */
    get hoverColor() {
        return brushToString(this.i.aw);
    }
    set hoverColor(v) {
        this.i.aw = stringToBrush(v);
    }
    /**
     * Gets or sets the actual color to use for the background when the ripple is hovered.
    */
    get actualHoverColor() {
        return brushToString(this.i.as);
    }
    set actualHoverColor(v) {
        this.i.as = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the actual background when the checkbox is unchecked.
    */
    get actualRippleColor() {
        return brushToString(this.i.at);
    }
    set actualRippleColor(v) {
        this.i.at = stringToBrush(v);
    }
    /**
     * Gets or sets the duration to use for the ripple animation.
    */
    get rippleDuration() {
        return this.i.o;
    }
    set rippleDuration(v) {
        this.i.o = +v;
    }
    /**
     * Gets or sets if the ripple is disabled.
    */
    get isDisabled() {
        return this.i.i;
    }
    set isDisabled(v) {
        this.i.i = ensureBool(v);
    }
    /**
     * Gets or sets if the ripple is centered.
    */
    get isCentered() {
        return this.i.h;
    }
    set isCentered(v) {
        this.i.h = ensureBool(v);
    }
    /**
     * Gets or sets if the ripple is centered.
    */
    get isHoverEnabled() {
        return this.i.k;
    }
    set isHoverEnabled(v) {
        this.i.k = ensureBool(v);
    }
    findByName(name) {
        return null;
    }
    get hasUserValues() {
        return this._hasUserValues;
    }
    __m(propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    }
    _styling(container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        let genericPrefix = "";
        let typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("Ripple");
        let additionalPrefixes = [];
        let prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        let b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            let basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            let parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            let parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    }
    onDetachedFromUI() {
        this.i.onDetachedFromUI();
    }
    onAttachedToUI() {
        this.i.onAttachedToUI();
    }
    /**
     * Exports visual information about the current state of the grid.
    
    */
    exportVisualModel() {
        let iv = this.i.r();
        return (iv);
    }
    /**
     * Returns a serialized copy of the exported visual model
    
    */
    exportSerializedVisualModel() {
        let iv = this.i.v();
        return (iv);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrRippleModule {
    static register() {
        TypeRegistrar.registerCons('IgrRipple', IgrRipple);
        TypeRegistrar.registerCons('IgrRipple', IgrRipple);
        TypeRegistrar.register('Ripple', Ripple.$type);
    }
}

class IgrButtonClickEventArgs {
    createImplementation() {
        return new ButtonClickEventArgs();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
}

class IgrButton extends Component {
    constructor(props) {
        super(props);
        this._wrapper = null;
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        this._clicked = null;
        this._clicked_wrapped = null;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this._getMainRef = this._getMainRef.bind(this);
        var container;
        if (document) {
            container = document.createElement("div");
        }
        var root;
        root = container;
        if (container != null) {
            root = container;
        }
        this.requestRender = this.requestRender.bind(this);
        this._portalManager = new PortalManager("buttonContent", this.requestRender);
        var ren = new ReactRenderer(root, document, true, {}, this._portalManager);
        this._wrapper = ren;
        this._container = this._wrapper.rootWrapper;
        this._container.setStyleProperty("display", "inline-block");
        var button = this.i;
        this._button = button;
        button.provideContainer(ren);
        if (props) {
            this.initializeProperties();
        }
    }
    _getMainRef(ref) {
        this._elRef = ref;
    }
    render() {
        let propChildren = this.props.children;
        let children = [];
        Children.forEach(propChildren, (ch) => {
            children.push(cloneElement(ch));
        });
        this._portalManager.onRender(children);
        let div = createElement("div", {
            className: "ig-button igr-button",
            ref: this._getMainRef,
            children: children
        });
        return div;
    }
    requestRender() {
        if (this._initialized) {
            this.setState({});
        }
    }
    _onDisplayChanged() {
        this._container.setStyleProperty("display", this.display);
    }
    _onFlexDirectionChanged() {
        this._container.setStyleProperty("flex-direction", this.flexDirection);
    }
    _onFlexGrowChanged() {
        this._container.setStyleProperty("flex-grow", this.flexGrow);
    }
    _onAlignItemsChanged() {
        this._container.setStyleProperty("align-items", this.alignItems);
    }
    //private _getLabelPortal(element: DomWrapper, portalCallback: (portal: DomPortal) => void): void {
    //    this._portalManager.getPortal(element, "TemplateContent", portalCallback);
    //}
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    initializeProperties() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    // supports angular themes or custom properties set in CSS
    updateStyle() {
        this._styling(this._elRef, this);
    }
    componentWillUnmount() {
        this._button.destroy();
        this._wrapper.destroy();
    }
    componentDidMount() {
        this._elRef.appendChild(this._container.getNativeElement());
        this.initializeContent();
    }
    initializeContent() {
        this._styling(this._container.getNativeElement(), this);
        this.updateStyle();
    }
    createImplementation() {
        return new Button();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    } /**
                                 * @hidden
                                 */
    static _createFromInternal(internal) {
        if (!internal) {
            return null;
        }
        if (!internal.$type) {
            return null;
        }
        let name = internal.$type.name;
        let externalName = "Igr" + name;
        if (!TypeRegistrar.isRegistered(externalName)) {
            return null;
        }
        return TypeRegistrar.create(externalName);
    }
    /**
 * Gets or sets the min width to use for the button.
*/
    get minWidth() {
        return this.i.bh;
    }
    set minWidth(v) {
        this.i.bh = +v;
    }
    /**
     * Gets or sets the min height to use for the button.
    */
    get minHeight() {
        return this.i.bg;
    }
    set minHeight(v) {
        this.i.bg = +v;
    }
    /**
     * Gets or sets the display style to use for the button.
    */
    get displayType() {
        return this.i.s;
    }
    set displayType(v) {
        this.i.s = ensureEnum(ButtonDisplayStyle_$type, v);
    }
    /**
     * Gets or sets the display density to use for the button.
    */
    get density() {
        return this.i.h;
    }
    set density(v) {
        this.i.h = ensureEnum(ControlDisplayDensity_$type, v);
    }
    /**
     * Gets or sets the base built in theme to use for the button.
    */
    get baseTheme() {
        return this.i.d;
    }
    set baseTheme(v) {
        this.i.d = ensureEnum(BaseControlTheme_$type, v);
    }
    /**
     * Gets the actual display density to use for the label.
    */
    get actualDensity() {
        return this.i.g;
    }
    set actualDensity(v) {
        this.i.g = ensureEnum(ControlDisplayDensity_$type, v);
    }
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    get actualBorderColor() {
        return brushToString(this.i.m8);
    }
    set actualBorderColor(v) {
        this.i.m8 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    get actualUmbraShadowColor() {
        return brushToString(this.i.nj);
    }
    set actualUmbraShadowColor(v) {
        this.i.nj = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    get actualPenumbraShadowColor() {
        return brushToString(this.i.ng);
    }
    set actualPenumbraShadowColor(v) {
        this.i.ng = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    get actualAmbientShadowColor() {
        return brushToString(this.i.m6);
    }
    set actualAmbientShadowColor(v) {
        this.i.m6 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    get actualRestingElevation() {
        return this.i.cg;
    }
    set actualRestingElevation(v) {
        this.i.cg = +v;
    }
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    get actualFocusElevation() {
        return this.i.ce;
    }
    set actualFocusElevation(v) {
        this.i.ce = +v;
    }
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    get actualHoverElevation() {
        return this.i.cf;
    }
    set actualHoverElevation(v) {
        this.i.cf = +v;
    }
    /**
     * Gets or sets the color to use for the ripple when the button is pressed.
    */
    get actualRippleColor() {
        return brushToString(this.i.nh);
    }
    set actualRippleColor(v) {
        this.i.nh = stringToBrush(v);
    }
    get actualCornerRadiusBottomRight() {
        return this.i.kb ? this.i.kb.b : NaN;
    }
    set actualCornerRadiusBottomRight(v) {
        this.ensureActualCornerRadius();
        this.i.kb.b = +v;
        this.i.kb = this.i.kb;
    }
    get actualCornerRadiusBottomLeft() {
        return this.i.kb ? this.i.kb.a : NaN;
    }
    set actualCornerRadiusBottomLeft(v) {
        this.ensureActualCornerRadius();
        this.i.kb.a = +v;
        this.i.kb = this.i.kb;
    }
    get actualCornerRadiusTopLeft() {
        return this.i.kb ? this.i.kb.c : NaN;
    }
    set actualCornerRadiusTopLeft(v) {
        this.ensureActualCornerRadius();
        this.i.kb.c = +v;
        this.i.kb = this.i.kb;
    }
    get actualCornerRadiusTopRight() {
        return this.i.kb ? this.i.kb.d : NaN;
    }
    set actualCornerRadiusTopRight(v) {
        this.ensureActualCornerRadius();
        this.i.kb.d = +v;
        this.i.kb = this.i.kb;
    }
    ensureActualCornerRadius() {
        if (this.i.kb) {
            return;
        }
        this.i.kb = new CornerRadius(2);
    }
    /**
     * Gets the color to use for the actual background.
    */
    get actualBackgroundColor() {
        return brushToString(this.i.m7);
    }
    set actualBackgroundColor(v) {
        this.i.m7 = stringToBrush(v);
    }
    /**
     * Gets the actual color to use for the disabled background of the button.
    */
    get actualDisabledBackgroundColor() {
        return brushToString(this.i.m9);
    }
    set actualDisabledBackgroundColor(v) {
        this.i.m9 = stringToBrush(v);
    }
    /**
     * Gets the actual color to use for the disabled border of the button.
    */
    get actualDisabledBorderColor() {
        return brushToString(this.i.na);
    }
    set actualDisabledBorderColor(v) {
        this.i.na = stringToBrush(v);
    }
    /**
     * Gets the actual color to use for the disabled text of the button.
    */
    get actualDisabledTextColor() {
        return brushToString(this.i.nb);
    }
    set actualDisabledTextColor(v) {
        this.i.nb = stringToBrush(v);
    }
    /**
     * Gets the actual disabled elevation to use for the button.
    */
    get actualDisabledElevation() {
        return this.i.cd;
    }
    set actualDisabledElevation(v) {
        this.i.cd = +v;
    }
    /**
     * Gets the actual disabled elevation to use for the button.
    */
    get actualElevationMode() {
        return this.i.k;
    }
    set actualElevationMode(v) {
        this.i.k = ensureEnum(ElevationMode_$type, v);
    }
    /**
     * Gets the color to use for the actual background.
    */
    get actualTextColor() {
        return brushToString(this.i.ni);
    }
    set actualTextColor(v) {
        this.i.ni = stringToBrush(v);
    }
    /**
     * Gets the color to use for the actual background.
    */
    get actualHoverTextColor() {
        return brushToString(this.i.nf);
    }
    set actualHoverTextColor(v) {
        this.i.nf = stringToBrush(v);
    }
    /**
     * Gets the color to use for the actual background.
    */
    get actualFocusBackgroundColor() {
        return brushToString(this.i.nc);
    }
    set actualFocusBackgroundColor(v) {
        this.i.nc = stringToBrush(v);
    }
    /**
     * Gets the actual color to use for the focused text.
    */
    get actualFocusTextColor() {
        return brushToString(this.i.nd);
    }
    set actualFocusTextColor(v) {
        this.i.nd = stringToBrush(v);
    }
    /**
     * Gets the hover color to use for the actual background.
    */
    get actualHoverBackgroundColor() {
        return brushToString(this.i.ne);
    }
    set actualHoverBackgroundColor(v) {
        this.i.ne = stringToBrush(v);
    }
    /**
     * Gets or sets the Width to use for the check mark when the checkbox is checked.
    */
    get actualBorderWidth() {
        return this.i.aw;
    }
    set actualBorderWidth(v) {
        this.i.aw = +v;
    }
    /**
     * Gets or sets the color to use for the background of the button when the  type is raised.
    */
    get raisedBackgroundColor() {
        return brushToString(this.i.tv);
    }
    set raisedBackgroundColor(v) {
        this.i.tv = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the disabled background of the button when the type is raised.
    */
    get raisedDisabledBackgroundColor() {
        return brushToString(this.i.tx);
    }
    set raisedDisabledBackgroundColor(v) {
        this.i.tx = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the disabled border of the button when the type is raised.
    */
    get raisedDisabledBorderColor() {
        return brushToString(this.i.ty);
    }
    set raisedDisabledBorderColor(v) {
        this.i.ty = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the disabled text of the button when the type is raised.
    */
    get raisedDisabledTextColor() {
        return brushToString(this.i.tz);
    }
    set raisedDisabledTextColor(v) {
        this.i.tz = stringToBrush(v);
    }
    /**
     * Gets or sets the disabled elevation to use for the button when the type is raised.
    */
    get raisedDisabledElevation() {
        return this.i.ep;
    }
    set raisedDisabledElevation(v) {
        this.i.ep = +v;
    }
    /**
     * Gets or sets the hover color to use for the background of the button when the  type is raised.
    */
    get raisedHoverBackgroundColor() {
        return brushToString(this.i.t2);
    }
    set raisedHoverBackgroundColor(v) {
        this.i.t2 = stringToBrush(v);
    }
    /**
     * Gets or sets the border color to use for the button when the type is raised.
    */
    get raisedBorderColor() {
        return brushToString(this.i.tw);
    }
    set raisedBorderColor(v) {
        this.i.tw = stringToBrush(v);
    }
    /**
     * Gets or sets the elevation to use for the button when the type is raised.
    */
    get raisedRestingElevation() {
        return this.i.es;
    }
    set raisedRestingElevation(v) {
        this.i.es = +v;
    }
    /**
     * Gets or sets the hover elevation to use for the button when the type is raised.
    */
    get raisedHoverElevation() {
        return this.i.er;
    }
    set raisedHoverElevation(v) {
        this.i.er = +v;
    }
    /**
     * Gets or sets the focus elevation to use for the button when the type is raised.
    */
    get raisedFocusElevation() {
        return this.i.eq;
    }
    set raisedFocusElevation(v) {
        this.i.eq = +v;
    }
    /**
     * Gets or sets the width to use for the button border when the type is raised.
    */
    get raisedBorderWidth() {
        return this.i.bj;
    }
    set raisedBorderWidth(v) {
        this.i.bj = +v;
    }
    get raisedCornerRadiusBottomRight() {
        return this.i.kx ? this.i.kx.b : NaN;
    }
    set raisedCornerRadiusBottomRight(v) {
        this.ensureRaisedCornerRadius();
        this.i.kx.b = +v;
        this.i.kx = this.i.kx;
    }
    get raisedCornerRadiusBottomLeft() {
        return this.i.kx ? this.i.kx.a : NaN;
    }
    set raisedCornerRadiusBottomLeft(v) {
        this.ensureRaisedCornerRadius();
        this.i.kx.a = +v;
        this.i.kx = this.i.kx;
    }
    get raisedCornerRadiusTopLeft() {
        return this.i.kx ? this.i.kx.c : NaN;
    }
    set raisedCornerRadiusTopLeft(v) {
        this.ensureRaisedCornerRadius();
        this.i.kx.c = +v;
        this.i.kx = this.i.kx;
    }
    get raisedCornerRadiusTopRight() {
        return this.i.kx ? this.i.kx.d : NaN;
    }
    set raisedCornerRadiusTopRight(v) {
        this.ensureRaisedCornerRadius();
        this.i.kx.d = +v;
        this.i.kx = this.i.kx;
    }
    ensureRaisedCornerRadius() {
        if (this.i.kx) {
            return;
        }
        this.i.kx = new CornerRadius(2);
    }
    /**
     * Gets or sets the color to use for the background when the button is pressed and the type is floating action button.
    */
    get raisedRippleColor() {
        return brushToString(this.i.t4);
    }
    set raisedRippleColor(v) {
        this.i.t4 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the background of the button when the type is flat.
    */
    get flatBackgroundColor() {
        return brushToString(this.i.su);
    }
    set flatBackgroundColor(v) {
        this.i.su = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the disabled background of the button when the type is flat.
    */
    get flatDisabledBackgroundColor() {
        return brushToString(this.i.sw);
    }
    set flatDisabledBackgroundColor(v) {
        this.i.sw = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the disabled border of the button when the type is flat.
    */
    get flatDisabledBorderColor() {
        return brushToString(this.i.sx);
    }
    set flatDisabledBorderColor(v) {
        this.i.sx = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the disabled text of the button when the type is flat.
    */
    get flatDisabledTextColor() {
        return brushToString(this.i.sy);
    }
    set flatDisabledTextColor(v) {
        this.i.sy = stringToBrush(v);
    }
    /**
     * Gets or sets the disabled elevation to use for the button when the type is flat.
    */
    get flatDisabledElevation() {
        return this.i.eb;
    }
    set flatDisabledElevation(v) {
        this.i.eb = +v;
    }
    /**
     * Gets or sets the hover color to use for the background of the button when the type is flat.
    */
    get flatHoverBackgroundColor() {
        return brushToString(this.i.s1);
    }
    set flatHoverBackgroundColor(v) {
        this.i.s1 = stringToBrush(v);
    }
    /**
     * Gets or sets the border color to use for the button when the type is flat.
    */
    get flatBorderColor() {
        return brushToString(this.i.sv);
    }
    set flatBorderColor(v) {
        this.i.sv = stringToBrush(v);
    }
    /**
     * Gets or sets the elevation to use for the button when the type is flat.
    */
    get flatRestingElevation() {
        return this.i.ee;
    }
    set flatRestingElevation(v) {
        this.i.ee = +v;
    }
    /**
     * Gets or sets the hover elevation to use for the button when the type is flat.
    */
    get flatHoverElevation() {
        return this.i.ed;
    }
    set flatHoverElevation(v) {
        this.i.ed = +v;
    }
    /**
     * Gets or sets the focus elevation to use for the button when the type is flat.
    */
    get flatFocusElevation() {
        return this.i.ec;
    }
    set flatFocusElevation(v) {
        this.i.ec = +v;
    }
    /**
     * Gets or sets the color to use for the background when the button is pressed and the type is floating action button.
    */
    get flatRippleColor() {
        return brushToString(this.i.s3);
    }
    set flatRippleColor(v) {
        this.i.s3 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the text of the button when type is flat.
    */
    get flatTextColor() {
        return brushToString(this.i.s4);
    }
    set flatTextColor(v) {
        this.i.s4 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the hovered text of the button when type is flat.
    */
    get flatHoverTextColor() {
        return brushToString(this.i.s2);
    }
    set flatHoverTextColor(v) {
        this.i.s2 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the backround the button when it is focused and flat.
    */
    get flatFocusBackgroundColor() {
        return brushToString(this.i.sz);
    }
    set flatFocusBackgroundColor(v) {
        this.i.sz = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the text the button when it is focused and flat.
    */
    get flatFocusTextColor() {
        return brushToString(this.i.s0);
    }
    set flatFocusTextColor(v) {
        this.i.s0 = stringToBrush(v);
    }
    /**
     * Gets or sets the width to use for the button border when the type is flat.
    */
    get flatBorderWidth() {
        return this.i.be;
    }
    set flatBorderWidth(v) {
        this.i.be = +v;
    }
    get flatCornerRadiusBottomRight() {
        return this.i.ku ? this.i.ku.b : NaN;
    }
    set flatCornerRadiusBottomRight(v) {
        this.ensureFlatCornerRadius();
        this.i.ku.b = +v;
        this.i.ku = this.i.ku;
    }
    get flatCornerRadiusBottomLeft() {
        return this.i.ku ? this.i.ku.a : NaN;
    }
    set flatCornerRadiusBottomLeft(v) {
        this.ensureFlatCornerRadius();
        this.i.ku.a = +v;
        this.i.ku = this.i.ku;
    }
    get flatCornerRadiusTopLeft() {
        return this.i.ku ? this.i.ku.c : NaN;
    }
    set flatCornerRadiusTopLeft(v) {
        this.ensureFlatCornerRadius();
        this.i.ku.c = +v;
        this.i.ku = this.i.ku;
    }
    get flatCornerRadiusTopRight() {
        return this.i.ku ? this.i.ku.d : NaN;
    }
    set flatCornerRadiusTopRight(v) {
        this.ensureFlatCornerRadius();
        this.i.ku.d = +v;
        this.i.ku = this.i.ku;
    }
    ensureFlatCornerRadius() {
        if (this.i.ku) {
            return;
        }
        this.i.ku = new CornerRadius(2);
    }
    /**
     * Gets or sets the color to use for the background when the button regardless of type.
    */
    get backgroundColor() {
        return brushToString(this.i.nk);
    }
    set backgroundColor(v) {
        this.i.nk = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the disabled background of the button when the type is disabled.
    */
    get disabledBackgroundColor() {
        return brushToString(this.i.sg);
    }
    set disabledBackgroundColor(v) {
        this.i.sg = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the disabled border of the button when the type is raised.
    */
    get disabledBorderColor() {
        return brushToString(this.i.sh);
    }
    set disabledBorderColor(v) {
        this.i.sh = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the disabled text of the button when the type is raised.
    */
    get disabledTextColor() {
        return brushToString(this.i.si);
    }
    set disabledTextColor(v) {
        this.i.si = stringToBrush(v);
    }
    /**
     * Gets or sets the disabled elevation to use for the button when the type is raised.
    */
    get disabledElevation() {
        return this.i.d6;
    }
    set disabledElevation(v) {
        this.i.d6 = +v;
    }
    /**
     * Gets or sets the disabled elevation to use for the button when the type is raised.
    */
    get elevationMode() {
        return this.i.o;
    }
    set elevationMode(v) {
        this.i.o = ensureEnum(ElevationMode_$type, v);
    }
    /**
     * Gets or sets the hover color to use for the background of the button when the  type is hovered.
    */
    get hoverBackgroundColor() {
        return brushToString(this.i.s7);
    }
    set hoverBackgroundColor(v) {
        this.i.s7 = stringToBrush(v);
    }
    /**
     * Gets or sets the border color to use for the button regardless of type.
    */
    get borderColor() {
        return brushToString(this.i.nl);
    }
    set borderColor(v) {
        this.i.nl = stringToBrush(v);
    }
    /**
     * Gets or sets the elevation to use for the button regardless of type.
    */
    get restingElevation() {
        return this.i.et;
    }
    set restingElevation(v) {
        this.i.et = +v;
    }
    /**
     * Gets or sets the hover elevation to use for the button regardless of type.
    */
    get hoverElevation() {
        return this.i.eg;
    }
    set hoverElevation(v) {
        this.i.eg = +v;
    }
    /**
     * Gets or sets the focus elevation to use for the button regardless of type.
    */
    get focusElevation() {
        return this.i.ef;
    }
    set focusElevation(v) {
        this.i.ef = +v;
    }
    /**
     * Gets or sets the use for the button.
    */
    get textStyle() {
        if (this.i.v == null) {
            return null;
        }
        return this.i.v.fontString;
    }
    set textStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.v = fi;
    }
    /**
     * Gets or sets the color to use for the text of the button regardless of type.
    */
    get textColor() {
        return brushToString(this.i.t7);
    }
    set textColor(v) {
        this.i.t7 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the hovered text of the button regardless of type.
    */
    get hoverTextColor() {
        return brushToString(this.i.s8);
    }
    set hoverTextColor(v) {
        this.i.s8 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the background of the button regardless of type.
    */
    get rippleColor() {
        return brushToString(this.i.t6);
    }
    set rippleColor(v) {
        this.i.t6 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the text of the button when type is raised.
    */
    get raisedTextColor() {
        return brushToString(this.i.t5);
    }
    set raisedTextColor(v) {
        this.i.t5 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the hovered text of the button when type is raised.
    */
    get raisedHoverTextColor() {
        return brushToString(this.i.t3);
    }
    set raisedHoverTextColor(v) {
        this.i.t3 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the backround the button when it is focused and raised.
    */
    get raisedFocusBackgroundColor() {
        return brushToString(this.i.t0);
    }
    set raisedFocusBackgroundColor(v) {
        this.i.t0 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the text the button when it is focused and raised.
    */
    get raisedFocusTextColor() {
        return brushToString(this.i.t1);
    }
    set raisedFocusTextColor(v) {
        this.i.t1 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the backround the button when it is focused.
    */
    get focusBackgroundColor() {
        return brushToString(this.i.s5);
    }
    set focusBackgroundColor(v) {
        this.i.s5 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the text of the button when it is focused.
    */
    get focusTextColor() {
        return brushToString(this.i.s6);
    }
    set focusTextColor(v) {
        this.i.s6 = stringToBrush(v);
    }
    /**
     * Gets or sets the width to use for the button border regardless of type.
    */
    get borderWidth() {
        return this.i.ax;
    }
    set borderWidth(v) {
        this.i.ax = +v;
    }
    get cornerRadiusBottomRight() {
        return this.i.kd ? this.i.kd.b : NaN;
    }
    set cornerRadiusBottomRight(v) {
        this.ensureCornerRadius();
        this.i.kd.b = +v;
        this.i.kd = this.i.kd;
    }
    get cornerRadiusBottomLeft() {
        return this.i.kd ? this.i.kd.a : NaN;
    }
    set cornerRadiusBottomLeft(v) {
        this.ensureCornerRadius();
        this.i.kd.a = +v;
        this.i.kd = this.i.kd;
    }
    get cornerRadiusTopLeft() {
        return this.i.kd ? this.i.kd.c : NaN;
    }
    set cornerRadiusTopLeft(v) {
        this.ensureCornerRadius();
        this.i.kd.c = +v;
        this.i.kd = this.i.kd;
    }
    get cornerRadiusTopRight() {
        return this.i.kd ? this.i.kd.d : NaN;
    }
    set cornerRadiusTopRight(v) {
        this.ensureCornerRadius();
        this.i.kd.d = +v;
        this.i.kd = this.i.kd;
    }
    ensureCornerRadius() {
        if (this.i.kd) {
            return;
        }
        this.i.kd = new CornerRadius(2);
    }
    /**
     * Gets or sets the color to use for the background of the button when the  type is outlined.
    */
    get outlinedBackgroundColor() {
        return brushToString(this.i.tk);
    }
    set outlinedBackgroundColor(v) {
        this.i.tk = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the disabled background of the button when the type is outlined.
    */
    get outlinedDisabledBackgroundColor() {
        return brushToString(this.i.tm);
    }
    set outlinedDisabledBackgroundColor(v) {
        this.i.tm = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the disabled border of the button when the type is outlined.
    */
    get outlinedDisabledBorderColor() {
        return brushToString(this.i.tn);
    }
    set outlinedDisabledBorderColor(v) {
        this.i.tn = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the disabled text of the button when the type is outlined.
    */
    get outlinedDisabledTextColor() {
        return brushToString(this.i.to);
    }
    set outlinedDisabledTextColor(v) {
        this.i.to = stringToBrush(v);
    }
    /**
     * Gets or sets the disabled elevation to use for the button when the type is outlined.
    */
    get outlinedDisabledElevation() {
        return this.i.el;
    }
    set outlinedDisabledElevation(v) {
        this.i.el = +v;
    }
    /**
     * Gets or sets the hover color to use for the background of the button when the  type is hoveredOutlined.
    */
    get outlinedHoverBackgroundColor() {
        return brushToString(this.i.tr);
    }
    set outlinedHoverBackgroundColor(v) {
        this.i.tr = stringToBrush(v);
    }
    /**
     * Gets or sets the border color to use for the button when the type is outlined.
    */
    get outlinedBorderColor() {
        return brushToString(this.i.tl);
    }
    set outlinedBorderColor(v) {
        this.i.tl = stringToBrush(v);
    }
    /**
     * Gets or sets the elevation to use for the button when the type is outlined.
    */
    get outlinedRestingElevation() {
        return this.i.eo;
    }
    set outlinedRestingElevation(v) {
        this.i.eo = +v;
    }
    /**
     * Gets or sets the hover elevation to use for the button when the type is outlined.
    */
    get outlinedHoverElevation() {
        return this.i.en;
    }
    set outlinedHoverElevation(v) {
        this.i.en = +v;
    }
    /**
     * Gets or sets the focus elevation to use for the button when the type is outlined.
    */
    get outlinedFocusElevation() {
        return this.i.em;
    }
    set outlinedFocusElevation(v) {
        this.i.em = +v;
    }
    /**
     * Gets or sets the width to use for the button border when the type is outlined.
    */
    get outlinedBorderWidth() {
        return this.i.bi;
    }
    set outlinedBorderWidth(v) {
        this.i.bi = +v;
    }
    get outlinedCornerRadiusBottomRight() {
        return this.i.kw ? this.i.kw.b : NaN;
    }
    set outlinedCornerRadiusBottomRight(v) {
        this.ensureOutlinedCornerRadius();
        this.i.kw.b = +v;
        this.i.kw = this.i.kw;
    }
    get outlinedCornerRadiusBottomLeft() {
        return this.i.kw ? this.i.kw.a : NaN;
    }
    set outlinedCornerRadiusBottomLeft(v) {
        this.ensureOutlinedCornerRadius();
        this.i.kw.a = +v;
        this.i.kw = this.i.kw;
    }
    get outlinedCornerRadiusTopLeft() {
        return this.i.kw ? this.i.kw.c : NaN;
    }
    set outlinedCornerRadiusTopLeft(v) {
        this.ensureOutlinedCornerRadius();
        this.i.kw.c = +v;
        this.i.kw = this.i.kw;
    }
    get outlinedCornerRadiusTopRight() {
        return this.i.kw ? this.i.kw.d : NaN;
    }
    set outlinedCornerRadiusTopRight(v) {
        this.ensureOutlinedCornerRadius();
        this.i.kw.d = +v;
        this.i.kw = this.i.kw;
    }
    ensureOutlinedCornerRadius() {
        if (this.i.kw) {
            return;
        }
        this.i.kw = new CornerRadius(2);
    }
    /**
     * Gets or sets the color to use for the background when the button is pressed and the type is floating action button.
    */
    get outlinedRippleColor() {
        return brushToString(this.i.tt);
    }
    set outlinedRippleColor(v) {
        this.i.tt = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the text of the button when type is outlined.
    */
    get outlinedTextColor() {
        return brushToString(this.i.tu);
    }
    set outlinedTextColor(v) {
        this.i.tu = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the hovered text of the button when type is outlined.
    */
    get outlinedHoverTextColor() {
        return brushToString(this.i.ts);
    }
    set outlinedHoverTextColor(v) {
        this.i.ts = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the backround the button when it is focused and outlined.
    */
    get outlinedFocusBackgroundColor() {
        return brushToString(this.i.tp);
    }
    set outlinedFocusBackgroundColor(v) {
        this.i.tp = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the text the button when it is focused and outlined.
    */
    get outlinedFocusTextColor() {
        return brushToString(this.i.tq);
    }
    set outlinedFocusTextColor(v) {
        this.i.tq = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the background of the button when the  type is floating action button.
    */
    get fabBackgroundColor() {
        return brushToString(this.i.sj);
    }
    set fabBackgroundColor(v) {
        this.i.sj = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the disabled background of the button when the type is fab.
    */
    get fabDisabledBackgroundColor() {
        return brushToString(this.i.sl);
    }
    set fabDisabledBackgroundColor(v) {
        this.i.sl = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the disabled border of the button when the type is fab.
    */
    get fabDisabledBorderColor() {
        return brushToString(this.i.sm);
    }
    set fabDisabledBorderColor(v) {
        this.i.sm = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the disabled text of the button when the type is fab.
    */
    get fabDisabledTextColor() {
        return brushToString(this.i.sn);
    }
    set fabDisabledTextColor(v) {
        this.i.sn = stringToBrush(v);
    }
    /**
     * Gets or sets the disabled elevation to use for the button when the type is fab.
    */
    get fabDisabledElevation() {
        return this.i.d7;
    }
    set fabDisabledElevation(v) {
        this.i.d7 = +v;
    }
    /**
     * Gets or sets the hover color to use for the background of the button when the  type is hoveredFab.
    */
    get fabHoverBackgroundColor() {
        return brushToString(this.i.sq);
    }
    set fabHoverBackgroundColor(v) {
        this.i.sq = stringToBrush(v);
    }
    /**
     * Gets or sets the border color to use for the button when the type is floating action button.
    */
    get fabBorderColor() {
        return brushToString(this.i.sk);
    }
    set fabBorderColor(v) {
        this.i.sk = stringToBrush(v);
    }
    /**
     * Gets or sets the elevation to use for the button when the type is floating action button.
    */
    get fabRestingElevation() {
        return this.i.ea;
    }
    set fabRestingElevation(v) {
        this.i.ea = +v;
    }
    /**
     * Gets or sets the hover elevation to use for the button when the type is floating action button.
    */
    get fabHoverElevation() {
        return this.i.d9;
    }
    set fabHoverElevation(v) {
        this.i.d9 = +v;
    }
    /**
     * Gets or sets the focus elevation to use for the button when the type is floating action button.
    */
    get fabFocusElevation() {
        return this.i.d8;
    }
    set fabFocusElevation(v) {
        this.i.d8 = +v;
    }
    /**
     * Gets or sets the width to use for the button border when the type is floating action button.
    */
    get fabBorderWidth() {
        return this.i.bd;
    }
    set fabBorderWidth(v) {
        this.i.bd = +v;
    }
    get fabCornerRadiusBottomRight() {
        return this.i.kt ? this.i.kt.b : NaN;
    }
    set fabCornerRadiusBottomRight(v) {
        this.ensureFabCornerRadius();
        this.i.kt.b = +v;
        this.i.kt = this.i.kt;
    }
    get fabCornerRadiusBottomLeft() {
        return this.i.kt ? this.i.kt.a : NaN;
    }
    set fabCornerRadiusBottomLeft(v) {
        this.ensureFabCornerRadius();
        this.i.kt.a = +v;
        this.i.kt = this.i.kt;
    }
    get fabCornerRadiusTopLeft() {
        return this.i.kt ? this.i.kt.c : NaN;
    }
    set fabCornerRadiusTopLeft(v) {
        this.ensureFabCornerRadius();
        this.i.kt.c = +v;
        this.i.kt = this.i.kt;
    }
    get fabCornerRadiusTopRight() {
        return this.i.kt ? this.i.kt.d : NaN;
    }
    set fabCornerRadiusTopRight(v) {
        this.ensureFabCornerRadius();
        this.i.kt.d = +v;
        this.i.kt = this.i.kt;
    }
    ensureFabCornerRadius() {
        if (this.i.kt) {
            return;
        }
        this.i.kt = new CornerRadius(2);
    }
    /**
     * Gets or sets the color to use for the background when the button is pressed and the type is floating action button.
    */
    get fabRippleColor() {
        return brushToString(this.i.ss);
    }
    set fabRippleColor(v) {
        this.i.ss = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the text of the button when type is floating action button.
    */
    get fabTextColor() {
        return brushToString(this.i.st);
    }
    set fabTextColor(v) {
        this.i.st = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the hovered text of the button when type is floating action button.
    */
    get fabHoverTextColor() {
        return brushToString(this.i.sr);
    }
    set fabHoverTextColor(v) {
        this.i.sr = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the backround the button when it is focused and fab.
    */
    get fabFocusBackgroundColor() {
        return brushToString(this.i.so);
    }
    set fabFocusBackgroundColor(v) {
        this.i.so = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the text the button when it is focused and fab.
    */
    get fabFocusTextColor() {
        return brushToString(this.i.sp);
    }
    set fabFocusTextColor(v) {
        this.i.sp = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the background of the button when the  type is icon.
    */
    get iconBackgroundColor() {
        return brushToString(this.i.s9);
    }
    set iconBackgroundColor(v) {
        this.i.s9 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the disabled background of the button when the type is icon.
    */
    get iconDisabledBackgroundColor() {
        return brushToString(this.i.tb);
    }
    set iconDisabledBackgroundColor(v) {
        this.i.tb = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the disabled border of the button when the type is icon.
    */
    get iconDisabledBorderColor() {
        return brushToString(this.i.tc);
    }
    set iconDisabledBorderColor(v) {
        this.i.tc = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the disabled text of the button when the type is icon.
    */
    get iconDisabledTextColor() {
        return brushToString(this.i.td);
    }
    set iconDisabledTextColor(v) {
        this.i.td = stringToBrush(v);
    }
    /**
     * Gets or sets the disabled elevation to use for the button when the type is icon.
    */
    get iconDisabledElevation() {
        return this.i.eh;
    }
    set iconDisabledElevation(v) {
        this.i.eh = +v;
    }
    /**
     * Gets or sets the hover color to use for the background of the button when the  type is hoveredIcon.
    */
    get iconHoverBackgroundColor() {
        return brushToString(this.i.tg);
    }
    set iconHoverBackgroundColor(v) {
        this.i.tg = stringToBrush(v);
    }
    /**
     * Gets or sets the border color to use for the button when the type is icon.
    */
    get iconBorderColor() {
        return brushToString(this.i.ta);
    }
    set iconBorderColor(v) {
        this.i.ta = stringToBrush(v);
    }
    /**
     * Gets or sets the elevation to use for the button when the type is icon.
    */
    get iconRestingElevation() {
        return this.i.ek;
    }
    set iconRestingElevation(v) {
        this.i.ek = +v;
    }
    /**
     * Gets or sets the hover elevation to use for the button when the type is icon.
    */
    get iconHoverElevation() {
        return this.i.ej;
    }
    set iconHoverElevation(v) {
        this.i.ej = +v;
    }
    /**
     * Gets or sets the focus elevation to use for the button when the type is icon.
    */
    get iconFocusElevation() {
        return this.i.ei;
    }
    set iconFocusElevation(v) {
        this.i.ei = +v;
    }
    /**
     * Gets or sets the width to use for the button border when the type is icon.
    */
    get iconBorderWidth() {
        return this.i.bf;
    }
    set iconBorderWidth(v) {
        this.i.bf = +v;
    }
    get iconCornerRadiusBottomRight() {
        return this.i.kv ? this.i.kv.b : NaN;
    }
    set iconCornerRadiusBottomRight(v) {
        this.ensureIconCornerRadius();
        this.i.kv.b = +v;
        this.i.kv = this.i.kv;
    }
    get iconCornerRadiusBottomLeft() {
        return this.i.kv ? this.i.kv.a : NaN;
    }
    set iconCornerRadiusBottomLeft(v) {
        this.ensureIconCornerRadius();
        this.i.kv.a = +v;
        this.i.kv = this.i.kv;
    }
    get iconCornerRadiusTopLeft() {
        return this.i.kv ? this.i.kv.c : NaN;
    }
    set iconCornerRadiusTopLeft(v) {
        this.ensureIconCornerRadius();
        this.i.kv.c = +v;
        this.i.kv = this.i.kv;
    }
    get iconCornerRadiusTopRight() {
        return this.i.kv ? this.i.kv.d : NaN;
    }
    set iconCornerRadiusTopRight(v) {
        this.ensureIconCornerRadius();
        this.i.kv.d = +v;
        this.i.kv = this.i.kv;
    }
    ensureIconCornerRadius() {
        if (this.i.kv) {
            return;
        }
        this.i.kv = new CornerRadius(2);
    }
    /**
     * Gets or sets the color to use for the background when the button is pressed and the type is floating action button.
    */
    get iconRippleColor() {
        return brushToString(this.i.ti);
    }
    set iconRippleColor(v) {
        this.i.ti = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the text of the button when type is icon.
    */
    get iconTextColor() {
        return brushToString(this.i.tj);
    }
    set iconTextColor(v) {
        this.i.tj = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the hovered text of the button when type is icon.
    */
    get iconHoverTextColor() {
        return brushToString(this.i.th);
    }
    set iconHoverTextColor(v) {
        this.i.th = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the backround the button when it is focused and icon.
    */
    get iconFocusBackgroundColor() {
        return brushToString(this.i.te);
    }
    set iconFocusBackgroundColor(v) {
        this.i.te = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the text the button when it is focused and icon.
    */
    get iconFocusTextColor() {
        return brushToString(this.i.tf);
    }
    set iconFocusTextColor(v) {
        this.i.tf = stringToBrush(v);
    }
    /**
     * Gets or sets the id to use for the internal native checkbox.
    */
    get inputId() {
        return this.i.h7;
    }
    set inputId(v) {
        this.i.h7 = v;
    }
    /**
     * Gets or sets the id to use for the checkbox.
    */
    get id() {
        return this.i.h5;
    }
    set id(v) {
        this.i.h5 = v;
    }
    /**
     * Gets or sets the id to use for the checkbox.
    */
    get display() {
        return this.i.gb;
    }
    set display(v) {
        this.i.gb = v;
    }
    /**
     * Gets or sets the id to use for the checkbox.
    */
    get flexDirection() {
        return this.i.he;
    }
    set flexDirection(v) {
        this.i.he = v;
    }
    /**
     * Gets or sets the flex-grow setting for the button.
    */
    get flexGrow() {
        return this.i.hg;
    }
    set flexGrow(v) {
        this.i.hg = v;
    }
    /**
     * Gets or sets the id to use for the checkbox.
    */
    get alignItems() {
        return this.i.fv;
    }
    set alignItems(v) {
        this.i.fv = v;
    }
    /**
     * Gets or sets value to use for the checkbox.
    */
    get value() {
        return this.i.ez;
    }
    set value(v) {
        this.i.ez = v;
    }
    /**
     * Gets or sets name to use for the button.
    */
    get name() {
        return this.i.ig;
    }
    set name(v) {
        this.i.ig = v;
    }
    /**
     * Gets or sets TabIndex to use for the checkbox.
    */
    get tabIndex() {
        return this.i.eu;
    }
    set tabIndex(v) {
        this.i.eu = +v;
    }
    /**
     * Gets or sets if the checkbox is Focused.
    */
    get focused() {
        return this.i.focused;
    }
    set focused(v) {
        this.i.focused = ensureBool(v);
    }
    /**
     * Gets or sets if the button show use styling to show focus.
    */
    get isFocusStyleEnabled() {
        return this.i.ak;
    }
    set isFocusStyleEnabled(v) {
        this.i.ak = ensureBool(v);
    }
    /**
     * Gets or sets the value of the aria-label attribute.
    */
    get ariaLabel() {
        return this.i.fx;
    }
    set ariaLabel(v) {
        this.i.fx = v;
    }
    /**
     * Gets or sets whether to disable the ripple effect for the button.
    */
    get disableRipple() {
        return this.i.af;
    }
    set disableRipple(v) {
        this.i.af = ensureBool(v);
    }
    /**
     * Gets whether to actually disable the ripple effect for the button.
    */
    get actualDisableRipple() {
        return this.i.ae;
    }
    set actualDisableRipple(v) {
        this.i.ae = ensureBool(v);
    }
    /**
     * Gets or sets whether the checkbox is checked.
    */
    get isHover() {
        return this.i.al;
    }
    set isHover(v) {
        this.i.al = ensureBool(v);
    }
    /**
     * Gets or sets whether the checkbox is disabled.
    */
    get disabled() {
        return this.i.disabled;
    }
    set disabled(v) {
        this.i.disabled = ensureBool(v);
    }
    /**
     * Gets or sets whether the checkbox transitions are disabled.
    */
    get disableTransitions() {
        return this.i.ag;
    }
    set disableTransitions(v) {
        this.i.ag = ensureBool(v);
    }
    findByName(name) {
        return null;
    }
    get hasUserValues() {
        return this._hasUserValues;
    }
    __m(propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    }
    _styling(container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        let genericPrefix = "";
        let typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("Button");
        let additionalPrefixes = [];
        let prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        let b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            let basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            let parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            let parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    }
    onDetachedFromUI() {
        this.i.onDetachedFromUI();
    }
    onAttachedToUI() {
        this.i.onAttachedToUI();
    }
    /**
     * Exports visual information about the current state of the grid.
    
    */
    exportVisualModel() {
        let iv = this.i.ey();
        return (iv);
    }
    /**
     * Returns a serialized copy of the exported visual model
    
    */
    exportSerializedVisualModel() {
        let iv = this.i.gf();
        return (iv);
    }
    get clicked() {
        return this._clicked;
    }
    set clicked(ev) {
        if (this._clicked_wrapped !== null) {
            this.i.clicked = delegateRemove(this.i.clicked, this._clicked_wrapped);
            this._clicked_wrapped = null;
            this._clicked = null;
        }
        this._clicked = ev;
        this._clicked_wrapped = (o, e) => {
            let outerArgs = new IgrButtonClickEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeClicked) {
                this.beforeClicked(this, outerArgs);
            }
            if (this._clicked) {
                this._clicked(this, outerArgs);
            }
        };
        this.i.clicked = delegateCombine(this.i.clicked, this._clicked_wrapped);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrButtonModule {
    static register() {
        IgrRippleModule.register();
        IgrChildContentModule.register();
        TypeRegistrar.registerCons('IgrButton', IgrButton);
        TypeRegistrar.registerCons('IgrButton', IgrButton);
        TypeRegistrar.register('Button', Button.$type);
    }
}

class IgrIcon extends Component {
    constructor(props) {
        super(props);
        this._wrapper = null;
        this._implementation = null;
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this._getMainRef = this._getMainRef.bind(this);
        var container;
        if (document) {
            container = document.createElement("div");
        }
        var root;
        root = container;
        if (container != null) {
            root = container;
        }
        this.requestRender = this.requestRender.bind(this);
        this._portalManager = new PortalManager("iconContent", this.requestRender);
        var ren = new ReactRenderer(root, document, true, {}, this._portalManager);
        this._wrapper = ren;
        this._container = this._wrapper.rootWrapper;
        this._container.setStyleProperty("display", "inline-block");
        this._container.setStyleProperty("vertical-align", "middle");
        var icon = this.i;
        this._icon = icon;
        icon.provideContainer(ren);
        if (props) {
            this.initializeProperties();
        }
    }
    _getMainRef(ref) {
        this._elRef = ref;
    }
    render() {
        let propChildren = this.props.children;
        let children = [];
        Children.forEach(propChildren, (ch) => {
            children.push(cloneElement(ch));
        });
        this._portalManager.onRender(children);
        let div = createElement("div", {
            className: "ig-icon igr-icon",
            ref: this._getMainRef,
            children: children
        });
        return div;
    }
    requestRender() {
        if (this._initialized) {
            this.setState({});
        }
    }
    //private _getLabelPortal(element: DomWrapper, portalCallback: (portal: DomPortal) => void): void {
    //    this._portalManager.getPortal(element, "TemplateContent", portalCallback);
    //}
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    initializeProperties() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    // supports angular themes or custom properties set in CSS
    updateStyle() {
        this._styling(this._elRef, this);
    }
    componentWillUnmount() {
        this._icon.destroy();
        this._wrapper.destroy();
    }
    componentDidMount() {
        this._elRef.appendChild(this._container.getNativeElement());
        this.initializeContent();
    }
    initializeContent() {
        this._styling(this._container.getNativeElement(), this);
        this.updateStyle();
    }
    createImplementation() {
        return new Icon();
    }
    get i() {
        return this._implementation;
    }
    /**
 * Gets the color to use for the actual background.
*/
    get actualFill() {
        return brushToString(this.i.bo);
    }
    set actualFill(v) {
        this.i.bo = stringToBrush(v);
    }
    /**
     * Gets the color to use for the actual text color.
    */
    get actualTextColor() {
        return brushToString(this.i.bs);
    }
    set actualTextColor(v) {
        this.i.bs = stringToBrush(v);
    }
    /**
     * Gets the color to use for the actual background.
    */
    get actualHoverFill() {
        return brushToString(this.i.bp);
    }
    set actualHoverFill(v) {
        this.i.bp = stringToBrush(v);
    }
    /**
     * Gets the hover stroke to use for the icon.
    */
    get actualHoverStroke() {
        return brushToString(this.i.bq);
    }
    set actualHoverStroke(v) {
        this.i.bq = stringToBrush(v);
    }
    /**
     * Gets the stroke to use for the icon.
    */
    get actualStroke() {
        return brushToString(this.i.br);
    }
    set actualStroke(v) {
        this.i.br = stringToBrush(v);
    }
    /**
     * Gets the hover stroke to use for the icon.
    */
    get actualHoverStrokeThickness() {
        return this.i.q;
    }
    set actualHoverStrokeThickness(v) {
        this.i.q = +v;
    }
    /**
     * Gets the stroke to use for the icon.
    */
    get actualStrokeThickness() {
        return this.i.r;
    }
    set actualStrokeThickness(v) {
        this.i.r = +v;
    }
    /**
     * Gets or sets the color to use for the actual background.
    */
    get fill() {
        return brushToString(this.i.fill);
    }
    set fill(v) {
        this.i.fill = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the text.
    */
    get textColor() {
        return brushToString(this.i.b2);
    }
    set textColor(v) {
        this.i.b2 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the text.
    */
    get svgPath() {
        return this.i.svgPath;
    }
    set svgPath(v) {
        this.i.svgPath = v;
    }
    /**
     * Gets or sets the color to use for the actual background.
    */
    get hoverFill() {
        return brushToString(this.i.by);
    }
    set hoverFill(v) {
        this.i.by = stringToBrush(v);
    }
    /**
     * Gets or sets the hover stroke to use for the icon.
    */
    get hoverStroke() {
        return brushToString(this.i.bz);
    }
    set hoverStroke(v) {
        this.i.bz = stringToBrush(v);
    }
    /**
     * Gets or sets the stroke to use for the icon.
    */
    get stroke() {
        return brushToString(this.i.b1);
    }
    set stroke(v) {
        this.i.b1 = stringToBrush(v);
    }
    /**
     * Gets or sets the hover stroke to use for the icon.
    */
    get hoverStrokeThickness() {
        return this.i.u;
    }
    set hoverStrokeThickness(v) {
        this.i.u = +v;
    }
    /**
     * Gets or sets the stroke to use for the icon.
    */
    get strokeThickness() {
        return this.i.v;
    }
    set strokeThickness(v) {
        this.i.v = +v;
    }
    /**
     * Gets or sets the use for the button.
    */
    get textStyle() {
        if (this.i.d == null) {
            return null;
        }
        return this.i.d.fontString;
    }
    set textStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.d = fi;
    }
    /**
     * Gets or sets the color to use for the hovered text of the button regardless of type.
    */
    get hoverTextColor() {
        return brushToString(this.i.b0);
    }
    set hoverTextColor(v) {
        this.i.b0 = stringToBrush(v);
    }
    /**
     * Gets or sets the id to use for the checkbox.
    */
    get id() {
        return this.i.as;
    }
    set id(v) {
        this.i.as = v;
    }
    /**
     * Gets or sets TabIndex to use for the checkbox.
    */
    get tabIndex() {
        return this.i.x;
    }
    set tabIndex(v) {
        this.i.x = +v;
    }
    /**
     * Gets or sets the value of the aria-label attribute.
    */
    get ariaLabel() {
        return this.i.ak;
    }
    set ariaLabel(v) {
        this.i.ak = v;
    }
    /**
     * Gets or sets whether the icon is hovered.
    */
    get isHover() {
        return this.i.k;
    }
    set isHover(v) {
        this.i.k = ensureBool(v);
    }
    /**
     * Gets or sets whether the checkbox is disabled.
    */
    get disabled() {
        return this.i.disabled;
    }
    set disabled(v) {
        this.i.disabled = ensureBool(v);
    }
    findByName(name) {
        return null;
    }
    get hasUserValues() {
        return this._hasUserValues;
    }
    __m(propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    }
    _styling(container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        let genericPrefix = "";
        let typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("Icon");
        let additionalPrefixes = [];
        let prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        let b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            let basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            let parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            let parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    }
    onDetachedFromUI() {
        this.i.onDetachedFromUI();
    }
    onAttachedToUI() {
        this.i.onAttachedToUI();
    }
    /**
     * Exports visual information about the current state of the grid.
    
    */
    exportVisualModel() {
        let iv = this.i.z();
        return (iv);
    }
    /**
     * Returns a serialized copy of the exported visual model
    
    */
    exportSerializedVisualModel() {
        let iv = this.i.am();
        return (iv);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrIconModule {
    static register() {
        IgrChildContentModule.register();
        TypeRegistrar.registerCons('IgrIcon', IgrIcon);
        TypeRegistrar.registerCons('IgrIcon', IgrIcon);
        TypeRegistrar.register('Icon', Icon.$type);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrCalendarModule {
    static register() {
        IgrButtonModule.register();
        IgrIconModule.register();
        TypeRegistrar.registerCons('IgrCalendar', IgrCalendar);
        TypeRegistrar.registerCons('IgrCalendar', IgrCalendar);
        TypeRegistrar.register('Calendar', Calendar.$type);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
var SuffixShiftType = /*@__PURE__*/ (function (SuffixShiftType) {
    SuffixShiftType[SuffixShiftType["Line"] = 0] = "Line";
    SuffixShiftType[SuffixShiftType["Box"] = 1] = "Box";
    SuffixShiftType[SuffixShiftType["Border"] = 2] = "Border";
    return SuffixShiftType;
})({});
/**
 * @hidden
 */
let SuffixShiftType_$type = /*@__PURE__*/ markEnum('SuffixShiftType', 'Line,0|Box,1|Border,2');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
var PrefixShiftType = /*@__PURE__*/ (function (PrefixShiftType) {
    PrefixShiftType[PrefixShiftType["Line"] = 0] = "Line";
    PrefixShiftType[PrefixShiftType["Box"] = 1] = "Box";
    PrefixShiftType[PrefixShiftType["Border"] = 2] = "Border";
    return PrefixShiftType;
})({});
/**
 * @hidden
 */
let PrefixShiftType_$type = /*@__PURE__*/ markEnum('PrefixShiftType', 'Line,0|Box,1|Border,2');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
var LabelShiftType = /*@__PURE__*/ (function (LabelShiftType) {
    LabelShiftType[LabelShiftType["Line"] = 0] = "Line";
    LabelShiftType[LabelShiftType["Box"] = 1] = "Box";
    LabelShiftType[LabelShiftType["Border"] = 2] = "Border";
    return LabelShiftType;
})({});
/**
 * @hidden
 */
let LabelShiftType_$type = /*@__PURE__*/ markEnum('LabelShiftType', 'Line,0|Box,1|Border,2');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
var InputShiftType = /*@__PURE__*/ (function (InputShiftType) {
    InputShiftType[InputShiftType["Line"] = 0] = "Line";
    InputShiftType[InputShiftType["Box"] = 1] = "Box";
    InputShiftType[InputShiftType["Border"] = 2] = "Border";
    return InputShiftType;
})({});
/**
 * @hidden
 */
let InputShiftType_$type = /*@__PURE__*/ markEnum('InputShiftType', 'Line,0|Box,1|Border,2');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let SuffixVisualModelExport = /*@__PURE__*/ (() => {
    class SuffixVisualModelExport extends Base {
        constructor() {
            super(...arguments);
            this.a = 0;
            this.c = false;
            this.b = false;
            this.d = null;
        }
        e() {
            let a = new StringBuilder(0);
            a.l("{");
            a.l("shiftType : " + this.a + ", ");
            a.l("isHover : " + this.c + ", ");
            a.l("isDisabled : " + this.b + ", ");
            a.l("name : \"" + this.d + "\", ");
            a.l("}");
            return a.toString();
        }
    }
    SuffixVisualModelExport.$t = /*@__PURE__*/ markType(SuffixVisualModelExport, 'SuffixVisualModelExport');
    return SuffixVisualModelExport;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let PrefixVisualModelExport = /*@__PURE__*/ (() => {
    class PrefixVisualModelExport extends Base {
        constructor() {
            super(...arguments);
            this.a = 0;
            this.c = false;
            this.b = false;
            this.d = null;
        }
        e() {
            let a = new StringBuilder(0);
            a.l("{");
            a.l("shiftType : " + enumGetBox(PrefixShiftType_$type, this.a) + ", ");
            a.l("isHover : " + this.c + ", ");
            a.l("isDisabled : " + this.b + ", ");
            a.l("name : \"" + this.d + "\", ");
            a.l("}");
            return a.toString();
        }
    }
    PrefixVisualModelExport.$t = /*@__PURE__*/ markType(PrefixVisualModelExport, 'PrefixVisualModelExport');
    return PrefixVisualModelExport;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
var InputGroupDisplayType = /*@__PURE__*/ (function (InputGroupDisplayType) {
    InputGroupDisplayType[InputGroupDisplayType["Line"] = 0] = "Line";
    InputGroupDisplayType[InputGroupDisplayType["Box"] = 1] = "Box";
    InputGroupDisplayType[InputGroupDisplayType["Border"] = 2] = "Border";
    InputGroupDisplayType[InputGroupDisplayType["Search"] = 3] = "Search";
    return InputGroupDisplayType;
})({});
/**
 * @hidden
 */
let InputGroupDisplayType_$type = /*@__PURE__*/ markEnum('InputGroupDisplayType', 'Line,0|Box,1|Border,2|Search,3');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let InputGroupVisualModelExport = /*@__PURE__*/ (() => {
    class InputGroupVisualModelExport extends Base {
        constructor() {
            super(...arguments);
            this.f = 0;
            this.e = 0;
            this.b = null;
            this.o = 0;
            this.p = 0;
            this.z = null;
            this.aa = null;
            this.x = 0;
            this.w = 0;
            this.t = 0;
            this.c = null;
            this.d = null;
            this.u = 0;
            this.s = 0;
            this.q = 0;
            this.r = 0;
            this.v = 0;
            this.a = null;
            this.g = false;
            this.j = false;
            this.i = false;
            this.h = false;
            this.m = null;
            this.l = null;
            this.k = null;
            this.n = null;
        }
        y() {
            let a = new StringBuilder(0);
            a.l("{");
            a.l("actualDensity : " + this.f + ", ");
            a.l("baseTheme : " + this.e + ", ");
            a.l("actualBorderColor : " + this.b.serialize() + ", ");
            a.l("actualBorderWidth : " + this.o + ", ");
            a.l("actualFocusBorderWidth : " + this.p + ", ");
            a.l("actualContentPadding : { left: " + this.aa.c + ",top: " + this.aa.e + ",right: " + this.aa.d + ",bottom: " + this.aa.b + "},");
            a.l("actualUnderlineWidth : " + this.x + ", ");
            a.l("actualUnderlineRippleWidth : " + this.w + ", ");
            a.l("actualBackgroundColor : " + this.a.serialize() + ", ");
            a.l("actualHoverUnderlineWidth : " + this.t + ", ");
            a.l("actualUnderlineColor : " + this.c.serialize() + ", ");
            a.l("actualUnderlineRippleColor : " + this.d.serialize() + ", ");
            a.l("actualUnderlineOpacity : " + this.u + ", ");
            a.l("actualHoverUnderlineOpacity : " + this.s + ", ");
            a.l("actualFocusUnderlineOpacity : " + this.q + ", ");
            a.l("actualFocusUnderlineRippleOpacity : " + this.r + ", ");
            a.l("actualUnderlineRippleOpacity : " + this.v + ", ");
            a.l("actualBackgroundColor : " + this.a.serialize() + ", ");
            a.l("actualIsExpanded : " + this.g + ", ");
            a.l("isHovered : " + this.j + ", ");
            a.l("isFocused : " + this.i + ", ");
            a.l("isDisabled : " + this.h + ", ");
            a.l("prefixModels : [");
            for (let b = 0; b < this.m.count; b++) {
                if (b != 0) {
                    a.l(",");
                }
                a.l(this.m._inner[b].e());
            }
            a.l("],");
            a.l("labelModels: [");
            for (let c = 0; c < this.l.count; c++) {
                if (c != 0) {
                    a.l(",");
                }
                let d = this.l._inner[c].q.charAt(0).toString().toLowerCase() + this.l._inner[c].q.substr(1);
                a.l(this.l._inner[c].r());
            }
            a.l("],");
            a.l("inputModels : [");
            for (let e = 0; e < this.k.count; e++) {
                if (e != 0) {
                    a.l(",");
                }
                let f = this.k._inner[e].k.charAt(0).toString().toLowerCase() + this.k._inner[e].k.substr(1);
                a.l(this.k._inner[e].n());
            }
            a.l("],");
            a.l("suffixModels : [");
            for (let g = 0; g < this.n.count; g++) {
                if (g != 0) {
                    a.l(",");
                }
                let h = this.n._inner[g].d.charAt(0).toString().toLowerCase() + this.n._inner[g].d.substr(1);
                a.l(this.n._inner[g].e());
            }
            a.l("]");
            a.l("}");
            return a.toString();
        }
    }
    InputGroupVisualModelExport.$t = /*@__PURE__*/ markType(InputGroupVisualModelExport, 'InputGroupVisualModelExport');
    return InputGroupVisualModelExport;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let LabelVisualModelExport = /*@__PURE__*/ (() => {
    class LabelVisualModelExport extends Base {
        constructor() {
            super(...arguments);
            this.c = 0;
            this.e = 0;
            this.d = 0;
            this.b = null;
            this.a = null;
            this.v = null;
            this.w = null;
            this.x = null;
            this.l = 0;
            this.t = null;
            this.u = null;
            this.f = 0;
            this.j = false;
            this.h = false;
            this.n = null;
            this.o = null;
            this.p = null;
            this.m = null;
            this.s = null;
            this.i = false;
            this.k = false;
            this.g = false;
            this.q = null;
        }
        r() {
            let a = new StringBuilder(0);
            a.l("{");
            a.l("baseTheme : " + this.c + ", ");
            a.l("density : " + this.e + ", ");
            a.l("actualDensity : " + this.d + ", ");
            a.l("actualTextColor : " + this.b.serialize() + ", ");
            a.l("actualHighlightTextColor : " + this.a.serialize() + ", ");
            if (!stringIsNullOrEmpty(this.v)) {
                a.l("textStyleFontStyle : \"" + this.v + "\", ");
            }
            if (!stringIsNullOrEmpty(this.w)) {
                a.l("textStyleFontVariant : \"" + this.w + "\", ");
            }
            if (!stringIsNullOrEmpty(this.x)) {
                a.l("textStyleFontWeight : \"" + this.x + "\", ");
            }
            if (!stringIsNullOrEmpty(this.t)) {
                a.l("textStyleFontFamily : \"" + this.t + "\", ");
            }
            if (!stringIsNullOrEmpty(this.u)) {
                a.l("textStyleFontStretch : \"" + this.u + "\", ");
            }
            if (!isNaN_(this.l)) {
                a.l("textStyleFontSize : " + this.l + ", ");
            }
            a.l("shiftType : " + this.f + ", ");
            a.l("isShifted : " + this.j + ", ");
            a.l("isHighlighted : " + this.h + ", ");
            a.l("display : \"" + this.n + "\", ");
            a.l("flexDirection : \"" + this.o + "\", ");
            a.l("flexGrow : \"" + this.p + "\", ");
            a.l("alignItems :\"" + this.m + "\", ");
            a.l("text : \"" + this.s + "\", ");
            a.l("isHover : " + this.i + ", ");
            a.l("value : " + this.k + ", ");
            a.l("isDisabled : " + this.g + ", ");
            a.l("name : \"" + this.q + "\", ");
            a.l("}");
            return a.toString();
        }
    }
    LabelVisualModelExport.$t = /*@__PURE__*/ markType(LabelVisualModelExport, 'LabelVisualModelExport');
    return LabelVisualModelExport;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let InputVisualModelExport = /*@__PURE__*/ (() => {
    class InputVisualModelExport extends Base {
        constructor() {
            super(...arguments);
            this.h = 0;
            this.f = 0;
            this.c = 0;
            this.b = 0;
            this.j = null;
            this.m = null;
            this.d = false;
            this.a = null;
            this.q = null;
            this.r = null;
            this.s = null;
            this.g = 0;
            this.o = null;
            this.p = null;
            this.i = null;
            this.l = null;
            this.e = false;
            this.t = null;
            this.k = null;
        }
        n() {
            let a = new StringBuilder(0);
            a.l("{");
            a.l("top : " + this.h + ", ");
            a.l("left : " + this.f + ", ");
            a.l("shiftType : " + this.c + ", ");
            a.l("actualDensity : " + this.b + ", ");
            a.l("mask : \"" + this.j + "\", ");
            a.l("promptChar : \"" + this.m + "\", ");
            a.l("includeLiterals : " + this.d + ", ");
            a.l("actualTextColor : " + this.a.serialize() + ", ");
            if (!stringIsNullOrEmpty(this.q)) {
                a.l("textStyleFontStyle : \"" + this.q + "\", ");
            }
            if (!stringIsNullOrEmpty(this.r)) {
                a.l("textStyleFontVariant : \"" + this.r + "\", ");
            }
            if (!stringIsNullOrEmpty(this.s)) {
                a.l("textStyleFontWeight : \"" + this.s + "\", ");
            }
            if (!stringIsNullOrEmpty(this.o)) {
                a.l("textStyleFontFamily : \"" + this.o + "\", ");
            }
            if (!stringIsNullOrEmpty(this.p)) {
                a.l("textStyleFontStretch : \"" + this.p + "\", ");
            }
            if (!isNaN_(this.g)) {
                a.l("textStyleFontSize : " + this.g + ", ");
            }
            a.l("inputType : \"" + this.i + "\", ");
            a.l("placeholder : \"" + this.l + "\", ");
            a.l("isHover : " + this.e + ", ");
            a.l("value : \"" + this.t + "\", ");
            a.l("name : \"" + this.k + "\", ");
            a.l("}");
            return a.toString();
        }
    }
    InputVisualModelExport.$t = /*@__PURE__*/ markType(InputVisualModelExport, 'InputVisualModelExport');
    return InputVisualModelExport;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let Replaced = /*@__PURE__*/ (() => {
    class Replaced extends Base {
        constructor() {
            super(...arguments);
            this.b = null;
            this.a = 0;
        }
    }
    Replaced.$t = /*@__PURE__*/ markType(Replaced, 'Replaced');
    return Replaced;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let MaskParsingService = /*@__PURE__*/ (() => {
    class MaskParsingService extends Base {
        g(a, b) {
            let c = "";
            let d = "";
            let e = b.a;
            let f = this.c(e);
            let g = f.keys;
            let h = this.e(e, g);
            let i = f.values;
            if (a != null) {
                d = a.toString();
            }
            for (let j = 0; j < e.length; j++) {
                c += b.b;
            }
            for (let k of fromEnum(f)) {
                c = this.i(c, k.key, k.value);
            }
            if (d == "") {
                return c;
            }
            let l = this.f(d, i);
            for (let m = 0; m < l.count; m++) {
                let n = l._inner[m];
                let o = this.b(n, h._inner[m], e);
                if (!o && n != b.b) {
                    l.item(m, b.b);
                }
            }
            if (l.count > h.count) {
                l.v(h.count + 1, l.count);
            }
            let p = 0;
            for (let q of fromEnum(l)) {
                let r = q;
                c = this.i(c, h._inner[p++], r);
            }
            return c;
        }
        h(a, b) {
            let c = "";
            let d = b.a;
            let e = this.c(d);
            let f = e.values;
            for (let g = 0; g < a.length; g++) {
                let h = a.charAt(g).toString();
                if (!f.contains(h)) {
                    if (h != b.b) {
                        c += h;
                    }
                }
            }
            return c;
        }
        a(a, b, c, d, e) {
            let f = this.c(c.a).keys;
            let g = new ObservableCollection$1(String_$type, 0);
            for (let h = 0; h < b.length; h++) {
                g.add(b.charAt(h).toString());
            }
            let i = d;
            e = Math.min(e, a.length);
            for (let j = d; j < e || (g.count > 0 && j < a.length); j++) {
                if (f.contains(j)) {
                    if (g._inner[0] == a.charAt(j).toString()) {
                        i = j + 1;
                        g.removeAt(0);
                    }
                    continue;
                }
                if (g._inner[0] != null && !this.b(g._inner[0].toString(), j, c.a) && g._inner[0].toString() != c.b) {
                    break;
                }
                let k = c.b;
                if (g.count > 0) {
                    i = j + 1;
                    k = g._inner[0];
                    g.removeAt(0);
                }
                a = this.i(a, j, k);
            }
            let l = new Replaced();
            l.b = a;
            l.a = i;
            return l;
        }
        i(a, b, c) {
            if (a != null) {
                return a.substr(0, b) + c + a.substr(b + 1);
            }
            return null;
        }
        b(a, b, c) {
            let d;
            let e;
            let f = "[\\d\\u00C0-\\u1FFF\\u2C00-\\uD7FFa-zA-Z]";
            let g = "[\\d\\u00C0-\\u1FFF\\u2C00-\\uD7FFa-zA-Z\\u0020]";
            let h = "[\\u00C0-\\u1FFF\\u2C00-\\uD7FFa-zA-Z]";
            let i = "[\\u00C0-\\u1FFF\\u2C00-\\uD7FFa-zA-Z\\u0020]";
            let j = "[\\d]";
            let k = "[\\d\\u0020]";
            let l = "[\\d-\\+\\s]";
            switch (c.charAt(b)) {
                case 'C':
                    e = a != "";
                    break;
                case '&':
                    d = new RegExp("[\\u0020]");
                    e = !d.test(a);
                    break;
                case 'a':
                    d = new RegExp(g);
                    e = d.test(a);
                    break;
                case 'A':
                    d = new RegExp(f);
                    e = d.test(a);
                    break;
                case '?':
                    d = new RegExp(i);
                    e = d.test(a);
                    break;
                case 'L':
                    d = new RegExp(h);
                    e = d.test(a);
                    break;
                case '0':
                    d = new RegExp(j);
                    e = d.test(a);
                    break;
                case '9':
                    d = new RegExp(k);
                    e = d.test(a);
                    break;
                case '#':
                    d = new RegExp(l);
                    e = d.test(a);
                    break;
                default:
                    e = false;
                    break;
            }
            return e;
        }
        c(a) {
            let b = new Dictionary$2(Number_$type, String_$type, 0);
            for (let c = 0; c < a.length; c++) {
                let d = a.charAt(c);
                if (!MaskParsingService.d.contains(d)) {
                    b.addItem(c, d.toString());
                }
            }
            return b;
        }
        e(a, b) {
            let c = new ObservableCollection$1(Number_$type, 0);
            for (let d = 0; d < a.length; d++) {
                if (!b.contains(d)) {
                    c.add(d);
                }
            }
            return c;
        }
        f(a, b) {
            let c = new ObservableCollection$1(String_$type, 0);
            for (let d = 0; d < a.length; d++) {
                let e = a.charAt(d).toString();
                if (!b.contains(e)) {
                    b.remove(e);
                    c.add(e);
                }
            }
            return c;
        }
    }
    MaskParsingService.$t = /*@__PURE__*/ markType(MaskParsingService, 'MaskParsingService');
    MaskParsingService.d = /*@__PURE__*/ ((() => {
        let $ret = new List$1(String_$type, 0);
        $ret.add('C');
        $ret.add('&');
        $ret.add('a');
        $ret.add('A');
        $ret.add('?');
        $ret.add('L');
        $ret.add('9');
        $ret.add('0');
        $ret.add('#');
        return $ret;
    })());
    return MaskParsingService;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let InputChangeEventArgs = /*@__PURE__*/ (() => {
    class InputChangeEventArgs extends EventArgs {
        constructor() {
            super(...arguments);
            this._value = null;
            this._isCompositionInProgress = false;
        }
        get value() {
            return this._value;
        }
        set value(a) {
            this._value = a;
        }
        get isCompositionInProgress() {
            return this._isCompositionInProgress;
        }
        set isCompositionInProgress(a) {
            this._isCompositionInProgress = a;
        }
    }
    InputChangeEventArgs.$t = /*@__PURE__*/ markType(InputChangeEventArgs, 'InputChangeEventArgs', EventArgs.$);
    return InputChangeEventArgs;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let MaskOptions = /*@__PURE__*/ (() => {
    class MaskOptions extends Base {
        constructor() {
            super(...arguments);
            this.a = null;
            this.b = null;
        }
    }
    MaskOptions.$t = /*@__PURE__*/ markType(MaskOptions, 'MaskOptions');
    return MaskOptions;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let InputGroupView = /*@__PURE__*/ (() => {
    class InputGroupView extends Base {
        constructor() {
            super();
            this.d = null;
            this.l = null;
            this.e = null;
            this.i = new List$1(Delegate_$type, 0);
            this.y = null;
            this.f = true;
            this.n = null;
            this.o = null;
            this.p = null;
            this.s = null;
            this.r = null;
            this.q = null;
            this.m = null;
        }
        ag() {
        }
        g() {
            return true;
        }
        get v() {
            return this.n;
        }
        get ao() {
            return null;
        }
        get h() {
            return true;
        }
        ad(a) {
            if (a == null) {
                for (let b of fromEnum(this.i)) {
                    b();
                }
                this.i.clear();
            }
            this.l = a;
            a.rootWrapper.setStyleProperty("position", "relative");
            a.rootWrapper.setStyleProperty("box-sizing", "border-box");
            a.rootWrapper.setStyleProperty("border-width", "0px");
            a.rootWrapper.setStyleProperty("border-style", "solid");
            let c = this.u;
            this.i.add(c.listen("focusin", runOn(this, this.af)));
            this.i.add(c.listen("focusout", runOn(this, this.ai)));
            let d = this.l.createElement("div");
            d.setStyleProperty("position", "absolute");
            d.setStyleProperty("width", "100%");
            d.setStyleProperty("height", "100%");
            d.setStyleProperty("border-style", "solid");
            d.setStyleProperty("box-sizing", "border-box");
            d.setStyleProperty("left", "0px");
            d.setStyleProperty("top", "0px");
            this.l.append(d);
            this.m = d;
            let e = this.l.createElement("div");
            e.addClass("ig-input-content");
            e.setStyleProperty("width", "100%");
            e.setStyleProperty("position", "relative");
            e.setStyleProperty("display", "flex");
            e.setStyleProperty("flex-direction", "row");
            e.setStyleProperty("flex-wrap", "no-wrap");
            e.setStyleProperty("flex-flow", "row nowrap");
            e.setStyleProperty("flex-grow", "1");
            e.setStyleProperty("align-items", "center");
            e.setStyleProperty("padding-top", "1.125rem");
            this.p = e;
            this.i.add(e.listen("click", runOn(this, this.z)));
            this.l.append(e);
            this.l.getPortal(e, "ChildContent", (f) => {
                let comp_ = f.componentRef;
                this.s = comp_;
                this.p.setStyleProperty("flex-direction", "row");
            }, true);
            let f = this.l.createElement("div");
            f.setStyleProperty("position", "absolute");
            f.setStyleProperty("width", "100%");
            f.setStyleProperty("background-color", "rgba(0, 0, 0, 0.54)");
            f.setStyleProperty("height", "1px");
            f.setStyleProperty("pointer-events", "none");
            f.setStyleProperty("left", "0px");
            f.setStyleProperty("bottom", "1px");
            f.setStyleProperty("overflow", "visible");
            let g = this.l.createElement("span");
            g.setStyleProperty("width", "100%");
            g.setStyleProperty("height", "2px");
            g.setStyleProperty("display", "block");
            g.setStyleProperty("pointer-events", "none");
            NativeUI.z(g, ((() => {
                let $ret = new ScaleTransform();
                $ret.l = 0.5;
                $ret.m = 1;
                return $ret;
            })()));
            g.setStyleProperty("opacity", "0");
            this.r = g;
            f.append(this.r);
            this.q = f;
            this.l.append(f);
            this.d.me();
        }
        get u() {
            return this.l.rootWrapper;
        }
        get t() {
            return this.m;
        }
        get w() {
            return this.q;
        }
        get x() {
            return this.r;
        }
        am(a) {
            if (this.y != a) {
                this.y = a;
                if (this.o != null) {
                    this.o.setAttribute("d", this.y);
                }
            }
        }
        al() {
            switch (this.d.g) {
                case 1:
                    this.p.setStyleProperty("padding-top", "1.125rem");
                    break;
                case 2:
                    this.p.setStyleProperty("padding-top", ".94737rem");
                    break;
                case 3:
                    this.p.setStyleProperty("padding-top", ".81818rem");
                    break;
            }
        }
        z(a) {
        }
        ah() {
            if (this.g()) {
            }
        }
        j() {
            let a = this.l.rootWrapper.getStyleProperty("height");
            return parseFloat(stringReplace(a, "px", ""));
        }
        ac() {
            this.f = true;
        }
        ae() {
            this.f = false;
            for (let a of fromEnum(this.i)) {
                a();
            }
            this.i.clear();
        }
        an(a) {
            if (a != null) {
                this.l.rootWrapper.setStyleProperty("font", a.fontString);
            }
        }
        k(a) {
            return a.view.h();
        }
        ab() {
            if (KeyFrameAnimationFactory.h == null) {
                KeyFrameAnimationFactory.h = this.l;
            }
        }
        a(a) {
            return new AnimationKeyFrameEffect(0, this.t, 0, null, a);
        }
        c(a) {
            return new AnimationKeyFrameEffect(0, this.w, 0, null, a);
        }
        b(a) {
            return new AnimationKeyFrameEffect(0, this.r, 0, null, a);
        }
        ak(a) {
        }
        aa(a) {
            this.p.append(a);
        }
        aj(a) {
            this.p.removeChild(a);
        }
        af(a) {
            this.d.ma();
        }
        ai(a) {
            this.d.mc();
        }
    }
    InputGroupView.$t = /*@__PURE__*/ markType(InputGroupView, 'InputGroupView');
    return InputGroupView;
})();
/**
 * @hidden
 */
let SuffixView = /*@__PURE__*/ (() => {
    class SuffixView extends Base {
        constructor() {
            super();
            this.a = null;
            this.g = null;
            this.b = null;
            this.e = new List$1(Delegate_$type, 0);
            this.c = true;
            this.h = null;
        }
        o() {
        }
        d() {
            return true;
        }
        get r() {
            return null;
        }
        m(a) {
            if (a == null) {
                for (let b of fromEnum(this.e)) {
                    b();
                }
                this.e.clear();
            }
            this.g = a;
            this.g.rootWrapper.setStyleProperty("display", "inline-block");
            let c = this.g.createElement("div");
            c.addClass("ig-suffix-content");
            this.g.append(c);
            c.setStyleProperty("cursor", "pointer");
            this.h = c;
            this.g.getPortal(c, "ChildContent", (d) => {
            }, true);
            this.a.am();
        }
        q() {
            let a = new TransformGroup();
            a.j.add(((() => {
                let $ret = new TranslateTransform();
                $ret.k = this.a.k == 2 ? (this.f() * -0.25) : 0;
                return $ret;
            })()));
            a.j.add(((() => {
                let $ret = new ScaleTransform();
                $ret.l = 1;
                $ret.m = 1;
                return $ret;
            })()));
            NativeUI.z(this.g.rootWrapper, a);
            this.g.rootWrapper.setStyleProperty("transform-origin", "0px 0px");
        }
        f() {
            let a = this.g.rootWrapper.getStyleProperty("height");
            return parseFloat(stringReplace(a, "px", ""));
        }
        p() {
            if (this.d()) {
            }
        }
        i(a) {
            this.a.aj();
        }
        j(a) {
            this.a.ak();
        }
        l() {
            this.c = true;
            this.e.add(this.g.rootWrapper.listen("mouseenter", runOn(this, this.i)));
            this.e.add(this.g.rootWrapper.listen("mouseleave", runOn(this, this.j)));
        }
        n() {
            this.c = false;
            for (let a of fromEnum(this.e)) {
                a();
            }
            this.e.clear();
        }
        k(a) {
            this.h.append(a);
        }
    }
    SuffixView.$t = /*@__PURE__*/ markType(SuffixView, 'SuffixView');
    return SuffixView;
})();
/**
 * @hidden
 */
let PrefixView = /*@__PURE__*/ (() => {
    class PrefixView extends Base {
        constructor() {
            super();
            this.a = null;
            this.g = null;
            this.b = null;
            this.e = new List$1(Delegate_$type, 0);
            this.c = true;
            this.h = null;
        }
        o() {
        }
        d() {
            return true;
        }
        get r() {
            return null;
        }
        m(a) {
            if (a == null) {
                for (let b of fromEnum(this.e)) {
                    b();
                }
                this.e.clear();
            }
            this.g = a;
            this.g.rootWrapper.setStyleProperty("display", "inline-block");
            let c = this.g.createElement("div");
            c.addClass("ig-prefix-content");
            this.g.append(c);
            c.setStyleProperty("cursor", "pointer");
            this.h = c;
            this.g.getPortal(c, "ChildContent", (d) => {
            }, true);
            this.a.am();
        }
        q() {
            let a = new TransformGroup();
            a.j.add(((() => {
                let $ret = new TranslateTransform();
                $ret.k = this.a.k == 2 ? (this.f() * -0.25) : 0;
                return $ret;
            })()));
            a.j.add(((() => {
                let $ret = new ScaleTransform();
                $ret.l = 1;
                $ret.m = 1;
                return $ret;
            })()));
            NativeUI.z(this.g.rootWrapper, a);
            this.g.rootWrapper.setStyleProperty("transform-origin", "0px 0px");
        }
        f() {
            let a = this.g.rootWrapper.getStyleProperty("height");
            return parseFloat(stringReplace(a, "px", ""));
        }
        p() {
            if (this.d()) {
            }
        }
        i(a) {
            this.a.aj();
        }
        j(a) {
            this.a.ak();
        }
        l() {
            this.c = true;
            this.e.add(this.g.rootWrapper.listen("mouseenter", runOn(this, this.i)));
            this.e.add(this.g.rootWrapper.listen("mouseleave", runOn(this, this.j)));
        }
        n() {
            this.c = false;
            for (let a of fromEnum(this.e)) {
                a();
            }
            this.e.clear();
        }
        k(a) {
            this.h.append(a);
        }
    }
    PrefixView.$t = /*@__PURE__*/ markType(PrefixView, 'PrefixView');
    return PrefixView;
})();
/**
 * @hidden
 */
let LabelView = /*@__PURE__*/ (() => {
    class LabelView extends Base {
        constructor() {
            super();
            this.b = null;
            this.i = null;
            this.c = null;
            this.g = new List$1(Delegate_$type, 0);
            this.m = null;
            this.d = true;
            this.j = null;
            this.k = null;
        }
        y() {
        }
        e() {
            return true;
        }
        get l() {
            return this.j;
        }
        get ag() {
            return null;
        }
        get f() {
            return true;
        }
        q() {
            if (KeyFrameAnimationFactory.h == null) {
                KeyFrameAnimationFactory.h = this.i;
            }
        }
        a(a) {
            return new AnimationKeyFrameEffect(0, this.i.rootWrapper, 0, null, a);
        }
        t(a) {
            if (a == null) {
                for (let b of fromEnum(this.g)) {
                    b();
                }
                this.g.clear();
            }
            this.i = a;
            this.i.rootWrapper.setStyleProperty("display", "inline-block");
            this.i.rootWrapper.setStyleProperty("position", "relative");
            let c = this.i.createElement("label");
            c.setStyleProperty("position", "relative");
            c.setStyleProperty("display", "inline-block");
            c.setStyleProperty("white-space", "nowrap");
            c.setStyleProperty("text-overflow", "ellipsis");
            c.setStyleProperty("line-height", "1");
            c.setStyleProperty("overflow", "hidden");
            c.setStyleProperty("height", "1.125rem");
            c.setStyleProperty("backface-visibility", "hidden");
            NativeUI.n(this.i.rootWrapper, this.b.cw);
            c.setStyleProperty("outline-style", "none");
            c.setStyleProperty("box-shadow", "none");
            c.setStyleProperty("font-family", "'Segoe UI', Verdana");
            c.setStyleProperty("font-size", "1rem");
            this.j = c;
            this.i.append(this.j);
            this.b.ce();
        }
        ac() {
            this.b.bf = "block";
            let a = new TransformGroup();
            a.j.add(((() => {
                let $ret = new TranslateTransform();
                $ret.k = this.b.s == 0 ? (this.h() * 0.5) : 0;
                return $ret;
            })()));
            a.j.add(((() => {
                let $ret = new ScaleTransform();
                $ret.l = 1;
                $ret.m = 1;
                return $ret;
            })()));
            NativeUI.z(this.i.rootWrapper, a);
            this.j.setStyleProperty("height", "1.125rem");
            this.i.rootWrapper.setStyleProperty("position", "absolute");
            this.i.rootWrapper.setStyleProperty("transform-origin", "0px 0px");
        }
        ad() {
            switch (this.b.o) {
                case 1:
                    this.i.rootWrapper.setStyleProperty("margin-top", "0px");
                    break;
                case 2:
                    this.i.rootWrapper.setStyleProperty("margin-top", "-.125rem");
                    break;
                case 3:
                    this.i.rootWrapper.setStyleProperty("margin-top", "-.25rem");
                    break;
            }
        }
        ab() {
            this.j.setText(this.b.text != null ? this.b.text : "");
        }
        ae(a) {
            if (this.m != a) {
                this.m = a;
                if (this.k != null) {
                    this.k.setAttribute("d", this.m);
                }
            }
        }
        v() {
            if (this.i != null) {
                this.i.rootWrapper.setStyleProperty("display", this.b.bf);
                this.j.setStyleProperty("display", this.b.bf);
                let ext_ = this.i.getExternal(this.b, null, null);
                if (ext_ && ext_._onDisplayChanged) {
                    ext_._onDisplayChanged();
                }
                ;
            }
        }
        r() {
            if (this.i != null) {
                this.i.rootWrapper.setStyleProperty("align-items", this.b.a9);
                this.j.setStyleProperty("align-items", this.b.a9);
                let ext_ = this.i.getExternal(this.b, null, null);
                if (ext_ && ext_._onAlignItemsChanged) {
                    ext_._onAlignItemsChanged();
                }
                ;
            }
        }
        w() {
            if (this.i != null) {
                this.i.rootWrapper.setStyleProperty("flex-direction", this.b.bi);
                this.j.setStyleProperty("flex-direction", this.b.bi);
                let ext_ = this.i.getExternal(this.b, null, null);
                if (ext_ && ext_._onFlexDirectionChanged) {
                    ext_._onFlexDirectionChanged();
                }
                ;
            }
        }
        x() {
            if (this.i != null) {
                this.i.rootWrapper.setStyleProperty("flex-grow", this.b.bk);
                this.j.setStyleProperty("flex-grow", this.b.bk);
                let ext_ = this.i.getExternal(this.b, null, null);
                if (ext_ && ext_._onFlexGrowChanged) {
                    ext_._onFlexGrowChanged();
                }
                ;
            }
        }
        n(a) {
        }
        z() {
            if (this.e()) {
            }
        }
        h() {
            let a = this.i.rootWrapper.getStyleProperty("height");
            return parseFloat(stringReplace(a, "px", ""));
        }
        o(a) {
            this.b.cb();
        }
        p(a) {
            this.b.cc();
        }
        s() {
            this.d = true;
            this.g.add(this.i.rootWrapper.listen("mouseenter", runOn(this, this.o)));
            this.g.add(this.i.rootWrapper.listen("mouseleave", runOn(this, this.p)));
        }
        u() {
            this.d = false;
            for (let a of fromEnum(this.g)) {
                a();
            }
            this.g.clear();
        }
        af(a) {
            if (a != null) {
                this.j.setStyleProperty("font", a.fontString);
            }
        }
        aa(a) {
            NativeUI.n(this.j, a);
        }
    }
    LabelView.$t = /*@__PURE__*/ markType(LabelView, 'LabelView');
    return LabelView;
})();
/**
 * @hidden
 */
let InputView = /*@__PURE__*/ (() => {
    class InputView extends Base {
        constructor() {
            super();
            this.b = null;
            this.j = null;
            this.c = null;
            this.h = new List$1(Delegate_$type, 0);
            this.e = false;
            this.p = null;
            this.d = true;
            this.k = null;
            this.l = null;
        }
        an() {
        }
        f() {
            return true;
        }
        get o() {
            return this.k;
        }
        get a2() {
            return null;
        }
        get g() {
            return true;
        }
        ak(a) {
            if (a == null) {
                for (let b of fromEnum(this.h)) {
                    b();
                }
                this.h.clear();
            }
            this.j = a;
            this.j.rootWrapper.setStyleProperty("display", "inline-block");
            let c = this.j.createElement("input");
            c.setAttribute("type", this.b.b0);
            c.setStyleProperty("position", "relative");
            c.setStyleProperty("box-sizing", "border-box");
            c.setStyleProperty("display", "inline-block");
            c.setStyleProperty("border", "none");
            c.setStyleProperty("height", "2rem");
            c.setStyleProperty("line-height", "0");
            c.setStyleProperty("width", "100%");
            c.setStyleProperty("min-width", "0");
            c.setStyleProperty("overflow", "visible");
            c.setStyleProperty("background", "transparent");
            c.setStyleProperty("background-position-x", "initial");
            c.setStyleProperty("background-position-y", "initial");
            c.setStyleProperty("background-size", "initial");
            c.setStyleProperty("background-repeat-x", "initial");
            c.setStyleProperty("background-repeat-y", "initial");
            c.setStyleProperty("background-attachment", "initial");
            c.setStyleProperty("background-origin", "initial");
            c.setStyleProperty("background-color", "transparent");
            NativeUI.n(c, this.b.dp);
            c.setStyleProperty("outline-style", "none");
            c.setStyleProperty("box-shadow", "none");
            c.setStyleProperty("border-top", "0.1875rem solid transparent");
            c.setStyleProperty("padding-bottom", "0.1875rem");
            c.setStyleProperty("font-family", "'Segoe UI', Verdana");
            c.setStyleProperty("font-size", "1rem");
            this.h.add(c.listen("change", runOn(this, this.v)));
            this.h.add(c.listen("input", runOn(this, this.w)));
            this.h.add(c.listen("focus", runOn(this, this.ab)));
            this.h.add(c.listen("blur", runOn(this, this.u)));
            this.h.add(c.listen("mouseenter", runOn(this, this.s)));
            this.h.add(c.listen("mouseleave", runOn(this, this.t)));
            this.h.add(c.listen("keydown", runOn(this, this.ac)));
            this.h.add(c.listen("keyup", runOn(this, this.ae)));
            this.h.add(c.listen("keypress", runOn(this, this.ad)));
            this.h.add(c.listen("paste", runOn(this, this.ah)));
            this.h.add(c.listen("dragenter", runOn(this, this.z)));
            this.h.add(c.listen("dragleave", runOn(this, this.aa)));
            this.h.add(c.listen("compositionstart", runOn(this, this.y)));
            this.h.add(c.listen("compositionend", runOn(this, this.x)));
            this.h.add(c.listen("mousedown", runOn(this, this.af)));
            this.h.add(c.listen("mouseup", runOn(this, this.ag)));
            this.k = c;
            this.j.append(this.k);
            this.b.c8();
        }
        at(a) {
            this.k.setAttribute("readonly", a.toString());
        }
        y(a) {
            this.e = true;
            this.b.cq();
        }
        x(a) {
            this.e = false;
            this.b.cp();
        }
        ar() {
            this.k.setAttribute("type", this.b.b0);
            if (this.b.b0 == "date") {
                this.k.setStyleProperty("line-height", "normal");
            }
            else {
                this.k.setStyleProperty("line-height", "0");
            }
        }
        ap() {
            this.k.setAttribute("placeholder", this.b.b7);
        }
        ay() {
            switch (this.b.l) {
                case 1:
                    this.k.setStyleProperty("height", "2rem");
                    this.k.setStyleProperty("font-size", "1rem");
                    break;
                case 2:
                    this.k.setStyleProperty("height", "1.68421rem");
                    this.k.setStyleProperty("font-size", "1rem");
                    break;
                case 3:
                    this.k.setStyleProperty("height", "1.45455rem");
                    this.k.setStyleProperty("font-size", ".95455rem");
                    break;
            }
        }
        ax() {
            let a = new TransformGroup();
            a.j.add(((() => {
                let $ret = new TranslateTransform();
                $ret.k = this.b.r == 2 ? (this.i() * -0.25) : 0;
                return $ret;
            })()));
            a.j.add(((() => {
                let $ret = new ScaleTransform();
                $ret.l = 1;
                $ret.m = 1;
                return $ret;
            })()));
            NativeUI.z(this.j.rootWrapper, a);
            this.j.rootWrapper.setStyleProperty("transform-origin", "0px 0px");
        }
        i() {
            let a = this.j.rootWrapper.getStyleProperty("height");
            let b = parseFloat(stringReplace(a, "px", ""));
            return b;
        }
        as(a) {
            this.k.setProperty("value", a);
        }
        u(a) {
            this.b.cm();
        }
        ab(a) {
            this.b.cu();
        }
        af(a) {
            let b = this.a1(a);
            this.b.c0(b);
            if (b.handled) {
                a.preventDefault();
            }
        }
        ag(a) {
            let b = this.a1(a);
            this.b.c3(b);
            if (b.handled) {
                a.preventDefault();
            }
        }
        a1(a) {
            let b = new MouseButtonEventArgs();
            b.position = { $type: Point_$type, x: a.offsetX, y: a.offsetY };
            return b;
        }
        v(a) {
            this.b.cn();
        }
        w(a) {
            this.b.co();
        }
        ac(a) {
            let b = new KeyEventArgs(0, a);
            this.b.cx(b);
        }
        ae(a) {
            let b = new KeyEventArgs(0, a);
            this.b.cz(b);
        }
        ad(a) {
            let b = new KeyEventArgs(0, a);
            this.b.cy(b);
        }
        ah(a) {
            this.b.c4();
        }
        z(a) {
            this.b.cs();
        }
        aa(a) {
            this.b.ct();
        }
        az(a) {
            if (this.p != a) {
                this.p = a;
                if (this.l != null) {
                    this.l.setAttribute("d", this.p);
                }
            }
        }
        q() {
            return this.k.getProperty("value");
        }
        r(a) {
        }
        n() {
            let a = this.k.getProperty("selectionStart");
            return typeGetValue(a);
        }
        m() {
            let a = this.k.getProperty("selectionEnd");
            return typeGetValue(a);
        }
        aw(a) {
            this.k.setProperty("selectionStart", a);
        }
        au(a) {
            this.k.setProperty("selectionEnd", a);
        }
        ao() {
            if (this.f()) {
            }
        }
        s(a) {
            this.b.c1();
        }
        t(a) {
            this.b.c2();
        }
        aj() {
            this.d = true;
            this.h.add(this.k.listen("change", runOn(this, this.v)));
            this.h.add(this.k.listen("input", runOn(this, this.w)));
            this.h.add(this.k.listen("focus", runOn(this, this.ab)));
            this.h.add(this.k.listen("blur", runOn(this, this.u)));
            this.h.add(this.k.listen("mouseenter", runOn(this, this.s)));
            this.h.add(this.k.listen("mouseleave", runOn(this, this.t)));
            this.h.add(this.k.listen("keydown", runOn(this, this.ac)));
            this.h.add(this.k.listen("paste", runOn(this, this.ah)));
            this.h.add(this.k.listen("dragenter", runOn(this, this.z)));
            this.h.add(this.k.listen("dragleave", runOn(this, this.aa)));
            this.h.add(this.k.listen("compositionstart", runOn(this, this.y)));
            this.h.add(this.k.listen("compositionend", runOn(this, this.x)));
            this.h.add(this.k.listen("mousedown", runOn(this, this.af)));
            this.h.add(this.k.listen("mouseup", runOn(this, this.ag)));
        }
        al() {
            this.d = false;
            for (let a of fromEnum(this.h)) {
                a();
            }
            this.h.clear();
        }
        a0(a) {
            if (a != null) {
                this.k.setStyleProperty("font", a.fontString);
            }
        }
        am() {
            if (this.k != null) {
                this.k.focus(false);
            }
        }
        aq() {
            if (this.k != null) {
                let nativeInput_ = this.k;
                nativeInput_.getNativeElement().select();
            }
        }
        av(a, b) {
            if (this.k != null) {
                let c = this.k.getNativeElement();
                c.setSelectionRange(a, b);
            }
        }
        ai() {
            if (KeyFrameAnimationFactory.h == null) {
                KeyFrameAnimationFactory.h = this.j;
            }
        }
        a(a) {
            return new AnimationKeyFrameEffect(0, this.j.rootWrapper, 0, null, a);
        }
    }
    InputView.$t = /*@__PURE__*/ markType(InputView, 'InputView');
    return InputView;
})();
/**
 * @hidden
 */
let InputGroupItem = /*@__PURE__*/ (() => {
    class InputGroupItem extends Base {
        constructor() {
            super(...arguments);
            this.c = null;
            this.a = null;
            this.propertyChanged = null;
        }
        get e() {
            return this.c;
        }
        set e(a) {
            let b = this.c;
            this.c = a;
            if (b != this.c) {
                this.g("Name", b, a);
            }
        }
        get b() {
            return this.a;
        }
        set b(a) {
            let b = this.a;
            this.a = a;
            if (b != this.a) {
                this.g("InputGroup", b, a);
            }
        }
        g(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            this.h(a, b, c);
        }
        h(a, b, c) {
        }
    }
    InputGroupItem.$t = /*@__PURE__*/ markType(InputGroupItem, 'InputGroupItem', Base.$, [INotifyPropertyChanged_$type]);
    return InputGroupItem;
})();
/**
 * @hidden
 */
let Suffix = /*@__PURE__*/ (() => {
    class Suffix extends InputGroupItem {
        constructor() {
            super();
            this._view = null;
            this.j = 0;
            this.v = "ig-suffix-" + Suffix.s++;
            this.u = null;
            this.n = false;
            this.m = false;
            this.o = false;
            let a = new SuffixView();
            a.a = this;
            this.view = a;
            this.view.o();
        }
        get view() {
            return this._view;
        }
        set view(a) {
            this._view = a;
        }
        destroy() {
            this.provideContainer(null);
        }
        get k() {
            return this.j;
        }
        set k(a) {
            let b = this.j;
            this.j = a;
            if (b != this.j) {
                this.g("ShiftType", enumGetBox(SuffixShiftType_$type, b), enumGetBox(SuffixShiftType_$type, a));
            }
        }
        h(a, b, c) {
            super.h(a, b, c);
            switch (a) {
                case "InputGroup":
                    this.ai();
                    break;
                case "ShiftType":
                    this.al();
                    break;
            }
        }
        al() {
            this.view.q();
        }
        ai() {
            this.view.q();
        }
        ap() {
        }
        ao() {
        }
        aj() {
            this.q = true;
        }
        ak() {
            this.q = false;
        }
        get z() {
            return this.v;
        }
        set z(a) {
            let b = this.v;
            this.v = a;
            if (b != this.v) {
                this.g("Id", b, a);
            }
        }
        get w() {
            return this.u;
        }
        set w(a) {
            let b = this.u;
            this.u = a;
            if (b != this.u) {
                this.g("AriaLabel", b, a);
            }
        }
        get q() {
            return this.n;
        }
        set q(a) {
            let b = this.n;
            this.n = a;
            if (b != this.n) {
                this.g("IsHover", b, a);
            }
        }
        get disabled() {
            return this.m;
        }
        set disabled(a) {
            let b = this.m;
            this.m = a;
            if (b != this.m) {
                this.g("IsDisabled", b, a);
            }
        }
        am() {
        }
        onDetachedFromUI() {
            this.view.n();
        }
        onAttachedToUI() {
            this.view.l();
        }
        r() {
            return this.view.d();
        }
        t() {
            return this.i();
        }
        y() {
            let a = this.i();
            return a.e();
        }
        i() {
            let a = new SuffixVisualModelExport();
            a.a = this.k;
            a.c = this.q;
            a.b = this.disabled;
            a.d = this.e;
            return a;
        }
        appendContentChild(a) {
            this.view.k(a);
        }
        provideContainer(a) {
            this.view.m(a);
        }
    }
    Suffix.$t = /*@__PURE__*/ markType(Suffix, 'Suffix', InputGroupItem.$);
    Suffix.s = 0;
    return Suffix;
})();
/**
 * @hidden
 */
let Prefix = /*@__PURE__*/ (() => {
    class Prefix extends InputGroupItem {
        constructor() {
            super();
            this._view = null;
            this.j = 0;
            this.v = "ig-prefix-" + Prefix.s++;
            this.u = null;
            this.n = false;
            this.m = false;
            this.o = false;
            let a = new PrefixView();
            a.a = this;
            this.view = a;
            this.view.o();
        }
        get view() {
            return this._view;
        }
        set view(a) {
            this._view = a;
        }
        destroy() {
            this.provideContainer(null);
        }
        get k() {
            return this.j;
        }
        set k(a) {
            let b = this.j;
            this.j = a;
            if (b != this.j) {
                this.g("ShiftType", enumGetBox(PrefixShiftType_$type, b), enumGetBox(PrefixShiftType_$type, a));
            }
        }
        h(a, b, c) {
            super.h(a, b, c);
            switch (a) {
                case "InputGroup":
                    this.ai();
                    break;
                case "ShiftType":
                    this.al();
                    break;
            }
        }
        al() {
            this.view.q();
        }
        ai() {
            this.view.q();
        }
        ap() {
        }
        ao() {
        }
        aj() {
            this.q = true;
        }
        ak() {
            this.q = false;
        }
        get z() {
            return this.v;
        }
        set z(a) {
            let b = this.v;
            this.v = a;
            if (b != this.v) {
                this.g("Id", b, a);
            }
        }
        get w() {
            return this.u;
        }
        set w(a) {
            let b = this.u;
            this.u = a;
            if (b != this.u) {
                this.g("AriaLabel", b, a);
            }
        }
        get q() {
            return this.n;
        }
        set q(a) {
            let b = this.n;
            this.n = a;
            if (b != this.n) {
                this.g("IsHover", b, a);
            }
        }
        get disabled() {
            return this.m;
        }
        set disabled(a) {
            let b = this.m;
            this.m = a;
            if (b != this.m) {
                this.g("IsDisabled", b, a);
            }
        }
        am() {
        }
        onDetachedFromUI() {
            this.view.n();
        }
        onAttachedToUI() {
            this.view.l();
        }
        r() {
            return this.view.d();
        }
        t() {
            return this.i();
        }
        y() {
            let a = this.i();
            return a.e();
        }
        i() {
            let a = new PrefixVisualModelExport();
            a.a = this.k;
            a.c = this.q;
            a.b = this.disabled;
            a.d = this.e;
            return a;
        }
        appendContentChild(a) {
            this.view.k(a);
        }
        provideContainer(a) {
            this.view.m(a);
        }
    }
    Prefix.$t = /*@__PURE__*/ markType(Prefix, 'Prefix', InputGroupItem.$);
    Prefix.s = 0;
    return Prefix;
})();
/**
 * @hidden
 */
let InputGroup = /*@__PURE__*/ (() => {
    class InputGroup extends Base {
        constructor() {
            super();
            this.j = 0;
            this.f = 1;
            this.e = 1;
            this.ad = false;
            this.b = 0;
            this._view = null;
            this.q = null;
            this.o = null;
            this.lostFocus = null;
            this.gotFocus = null;
            this.df = ThemeResolver.b(InputGroup.c, InputGroup.fu, InputGroup.d1);
            this.e5 = ThemeResolver.b(InputGroup.c, InputGroup.f5, InputGroup.ec);
            this.m6 = ThemeResolver.d(InputGroup.c, InputGroup.nf, InputGroup.m9);
            this.tm = ThemeResolver.f(InputGroup.c, InputGroup.tv, InputGroup.tp);
            this.pf = ThemeResolver.e(InputGroup.c, InputGroup.rd, InputGroup.px);
            this.q0 = ThemeResolver.e(InputGroup.c, InputGroup.ru, InputGroup.qe);
            this.q1 = ThemeResolver.e(InputGroup.c, InputGroup.rv, InputGroup.qf);
            this.hb = ThemeResolver.b(InputGroup.c, InputGroup.gx, InputGroup.e4);
            this.ha = ThemeResolver.b(InputGroup.c, InputGroup.gw, InputGroup.e3);
            this.e9 = ThemeResolver.b(InputGroup.c, InputGroup.f9, InputGroup.eg);
            this.so = ThemeResolver.e(InputGroup.c, InputGroup.se, InputGroup.qy);
            this.sp = ThemeResolver.e(InputGroup.c, InputGroup.sf, InputGroup.qz);
            this.q3 = ThemeResolver.e(InputGroup.c, InputGroup.rx, InputGroup.qh);
            this.q2 = ThemeResolver.e(InputGroup.c, InputGroup.rw, InputGroup.qg);
            this.g8 = ThemeResolver.b(InputGroup.c, InputGroup.gu, InputGroup.e1);
            this.e8 = ThemeResolver.b(InputGroup.c, InputGroup.f8, InputGroup.ef);
            this.e6 = ThemeResolver.b(InputGroup.c, InputGroup.f6, InputGroup.ed);
            this.e7 = ThemeResolver.b(InputGroup.c, InputGroup.f7, InputGroup.ee);
            this.g9 = ThemeResolver.b(InputGroup.c, InputGroup.gv, InputGroup.e2);
            this.pe = ThemeResolver.e(InputGroup.c, InputGroup.rc, InputGroup.pw);
            this.fa = ThemeResolver.b(InputGroup.c, InputGroup.ga, InputGroup.eh);
            this.fb = ThemeResolver.b(InputGroup.c, InputGroup.gb, InputGroup.ei);
            this.nc = ThemeResolver.d(InputGroup.c, InputGroup.ng, InputGroup.na);
            this.ts = ThemeResolver.f(InputGroup.c, InputGroup.tw, InputGroup.tq);
            this.q5 = ThemeResolver.e(InputGroup.c, InputGroup.rz, InputGroup.qj);
            this.q6 = ThemeResolver.e(InputGroup.c, InputGroup.r0, InputGroup.qk);
            this.q7 = ThemeResolver.e(InputGroup.c, InputGroup.r1, InputGroup.ql);
            this.fj = ThemeResolver.b(InputGroup.c, InputGroup.gj, InputGroup.eq);
            this.fi = ThemeResolver.b(InputGroup.c, InputGroup.gi, InputGroup.ep);
            this.ff = ThemeResolver.b(InputGroup.c, InputGroup.gf, InputGroup.em);
            this.ra = ThemeResolver.e(InputGroup.c, InputGroup.r4, InputGroup.qo);
            this.rb = ThemeResolver.e(InputGroup.c, InputGroup.r5, InputGroup.qp);
            this.q9 = ThemeResolver.e(InputGroup.c, InputGroup.r3, InputGroup.qn);
            this.q8 = ThemeResolver.e(InputGroup.c, InputGroup.r2, InputGroup.qm);
            this.fg = ThemeResolver.b(InputGroup.c, InputGroup.gg, InputGroup.en);
            this.fe = ThemeResolver.b(InputGroup.c, InputGroup.ge, InputGroup.el);
            this.fc = ThemeResolver.b(InputGroup.c, InputGroup.gc, InputGroup.ej);
            this.fd = ThemeResolver.b(InputGroup.c, InputGroup.gd, InputGroup.ek);
            this.fh = ThemeResolver.b(InputGroup.c, InputGroup.gh, InputGroup.eo);
            this.q4 = ThemeResolver.e(InputGroup.c, InputGroup.ry, InputGroup.qi);
            this.dg = ThemeResolver.b(InputGroup.c, InputGroup.fv, InputGroup.d2);
            this.dh = ThemeResolver.b(InputGroup.c, InputGroup.fw, InputGroup.d3);
            this.m5 = ThemeResolver.d(InputGroup.c, InputGroup.ne, InputGroup.m8);
            this.tl = ThemeResolver.f(InputGroup.c, InputGroup.tu, InputGroup.to);
            this.pp = ThemeResolver.e(InputGroup.c, InputGroup.rn, InputGroup.p7);
            this.pq = ThemeResolver.e(InputGroup.c, InputGroup.ro, InputGroup.p8);
            this.pr = ThemeResolver.e(InputGroup.c, InputGroup.rp, InputGroup.p9);
            this.dq = ThemeResolver.b(InputGroup.c, InputGroup.f4, InputGroup.eb);
            this.dp = ThemeResolver.b(InputGroup.c, InputGroup.f3, InputGroup.ea);
            this.dl = ThemeResolver.b(InputGroup.c, InputGroup.f0, InputGroup.d7);
            this.pu = ThemeResolver.e(InputGroup.c, InputGroup.rs, InputGroup.qc);
            this.pv = ThemeResolver.e(InputGroup.c, InputGroup.rt, InputGroup.qd);
            this.pt = ThemeResolver.e(InputGroup.c, InputGroup.rr, InputGroup.qb);
            this.ps = ThemeResolver.e(InputGroup.c, InputGroup.rq, InputGroup.qa);
            this.dm = ThemeResolver.b(InputGroup.c, InputGroup.f1, InputGroup.d8);
            this.dk = ThemeResolver.b(InputGroup.c, InputGroup.fz, InputGroup.d6);
            this.di = ThemeResolver.b(InputGroup.c, InputGroup.fx, InputGroup.d4);
            this.dj = ThemeResolver.b(InputGroup.c, InputGroup.fy, InputGroup.d5);
            this.dn = ThemeResolver.b(InputGroup.c, InputGroup.f2, InputGroup.d9);
            this.po = ThemeResolver.e(InputGroup.c, InputGroup.rm, InputGroup.p6);
            this.c5 = ThemeResolver.b(InputGroup.c, InputGroup.fk, InputGroup.dr);
            this.c6 = ThemeResolver.b(InputGroup.c, InputGroup.fl, InputGroup.ds);
            this.m4 = ThemeResolver.d(InputGroup.c, InputGroup.nd, InputGroup.m7);
            this.tk = ThemeResolver.f(InputGroup.c, InputGroup.tt, InputGroup.tn);
            this.ph = ThemeResolver.e(InputGroup.c, InputGroup.rf, InputGroup.pz);
            this.pi = ThemeResolver.e(InputGroup.c, InputGroup.rg, InputGroup.p0);
            this.pj = ThemeResolver.e(InputGroup.c, InputGroup.rh, InputGroup.p1);
            this.de = ThemeResolver.b(InputGroup.c, InputGroup.ft, InputGroup.d0);
            this.dd = ThemeResolver.b(InputGroup.c, InputGroup.fs, InputGroup.dz);
            this.da = ThemeResolver.b(InputGroup.c, InputGroup.fp, InputGroup.dw);
            this.pm = ThemeResolver.e(InputGroup.c, InputGroup.rk, InputGroup.p4);
            this.pn = ThemeResolver.e(InputGroup.c, InputGroup.rl, InputGroup.p5);
            this.pl = ThemeResolver.e(InputGroup.c, InputGroup.rj, InputGroup.p3);
            this.pk = ThemeResolver.e(InputGroup.c, InputGroup.ri, InputGroup.p2);
            this.db = ThemeResolver.b(InputGroup.c, InputGroup.fq, InputGroup.dx);
            this.c9 = ThemeResolver.b(InputGroup.c, InputGroup.fo, InputGroup.dv);
            this.c7 = ThemeResolver.b(InputGroup.c, InputGroup.fm, InputGroup.dt);
            this.c8 = ThemeResolver.b(InputGroup.c, InputGroup.fn, InputGroup.du);
            this.dc = ThemeResolver.b(InputGroup.c, InputGroup.fr, InputGroup.dy);
            this.pg = ThemeResolver.e(InputGroup.c, InputGroup.re, InputGroup.py);
            this.gy = ThemeResolver.b(InputGroup.c, InputGroup.gk, InputGroup.er);
            this.gz = ThemeResolver.b(InputGroup.c, InputGroup.gl, InputGroup.es);
            this.ni = ThemeResolver.d(InputGroup.c, InputGroup.nh, InputGroup.nb);
            this.ty = ThemeResolver.f(InputGroup.c, InputGroup.tx, InputGroup.tr);
            this.sh = ThemeResolver.e(InputGroup.c, InputGroup.r7, InputGroup.qr);
            this.si = ThemeResolver.e(InputGroup.c, InputGroup.r8, InputGroup.qs);
            this.sj = ThemeResolver.e(InputGroup.c, InputGroup.r9, InputGroup.qt);
            this.g7 = ThemeResolver.b(InputGroup.c, InputGroup.gt, InputGroup.e0);
            this.g6 = ThemeResolver.b(InputGroup.c, InputGroup.gs, InputGroup.ez);
            this.g3 = ThemeResolver.b(InputGroup.c, InputGroup.gp, InputGroup.ew);
            this.sm = ThemeResolver.e(InputGroup.c, InputGroup.sc, InputGroup.qw);
            this.sn = ThemeResolver.e(InputGroup.c, InputGroup.sd, InputGroup.qx);
            this.sl = ThemeResolver.e(InputGroup.c, InputGroup.sb, InputGroup.qv);
            this.sk = ThemeResolver.e(InputGroup.c, InputGroup.sa, InputGroup.qu);
            this.g4 = ThemeResolver.b(InputGroup.c, InputGroup.gq, InputGroup.ex);
            this.g2 = ThemeResolver.b(InputGroup.c, InputGroup.go, InputGroup.ev);
            this.g0 = ThemeResolver.b(InputGroup.c, InputGroup.gm, InputGroup.et);
            this.g1 = ThemeResolver.b(InputGroup.c, InputGroup.gn, InputGroup.eu);
            this.g5 = ThemeResolver.b(InputGroup.c, InputGroup.gr, InputGroup.ey);
            this.sg = ThemeResolver.e(InputGroup.c, InputGroup.r6, InputGroup.qq);
            this.nm = ThemeResolver.e(InputGroup.c, InputGroup.rd, InputGroup.px);
            this.nn = ThemeResolver.e(InputGroup.c, InputGroup.ru, InputGroup.qe);
            this.am = ThemeResolver.b(InputGroup.c, InputGroup.fu, InputGroup.d1);
            this.an = ThemeResolver.b(InputGroup.c, InputGroup.f5, InputGroup.ec);
            this.mt = ThemeResolver.d(InputGroup.c, InputGroup.nf, InputGroup.m9);
            this.s9 = ThemeResolver.f(InputGroup.c, InputGroup.tv, InputGroup.tp);
            this.av = ThemeResolver.b(InputGroup.c, InputGroup.gx, InputGroup.e4);
            this.au = ThemeResolver.b(InputGroup.c, InputGroup.gw, InputGroup.e3);
            this.ar = ThemeResolver.b(InputGroup.c, InputGroup.f9, InputGroup.eg);
            this.nq = ThemeResolver.e(InputGroup.c, InputGroup.se, InputGroup.qy);
            this.nr = ThemeResolver.e(InputGroup.c, InputGroup.sf, InputGroup.qz);
            this.np = ThemeResolver.e(InputGroup.c, InputGroup.rx, InputGroup.qh);
            this.no = ThemeResolver.e(InputGroup.c, InputGroup.rw, InputGroup.qg);
            this.as = ThemeResolver.b(InputGroup.c, InputGroup.gu, InputGroup.e1);
            this.aq = ThemeResolver.b(InputGroup.c, InputGroup.f8, InputGroup.ef);
            this.ao = ThemeResolver.b(InputGroup.c, InputGroup.f6, InputGroup.ed);
            this.ap = ThemeResolver.b(InputGroup.c, InputGroup.f7, InputGroup.ee);
            this.at = ThemeResolver.b(InputGroup.c, InputGroup.gv, InputGroup.e2);
            this.nl = ThemeResolver.e(InputGroup.c, InputGroup.rc, InputGroup.pw);
            this.a6 = NaN;
            this.bh = NaN;
            this.nt = null;
            this.mw = new CornerRadius(1, NaN, NaN, NaN, NaN);
            this.tc = new Thickness(1, NaN, NaN, NaN, NaN);
            this.b9 = NaN;
            this.b8 = NaN;
            this.bl = NaN;
            this.op = null;
            this.oq = null;
            this.oa = null;
            this.n9 = null;
            this.b6 = NaN;
            this.bk = NaN;
            this.bi = NaN;
            this.bj = NaN;
            this.b7 = NaN;
            this.ns = null;
            this.bm = NaN;
            this.bn = NaN;
            this.od = null;
            this.oc = null;
            this.mx = new CornerRadius(1, NaN, NaN, NaN, NaN);
            this.td = new Thickness(1, NaN, NaN, NaN, NaN);
            this.bv = NaN;
            this.bu = NaN;
            this.br = NaN;
            this.og = null;
            this.oh = null;
            this.of = null;
            this.oe = null;
            this.bs = NaN;
            this.bq = NaN;
            this.bo = NaN;
            this.bp = NaN;
            this.bt = NaN;
            this.ob = null;
            this.a7 = NaN;
            this.a8 = NaN;
            this.n3 = null;
            this.n2 = null;
            this.mv = new CornerRadius(1, NaN, NaN, NaN, NaN);
            this.tb = new Thickness(1, NaN, NaN, NaN, NaN);
            this.bg = NaN;
            this.bf = NaN;
            this.bc = NaN;
            this.n6 = null;
            this.n7 = null;
            this.n5 = null;
            this.n4 = null;
            this.bd = NaN;
            this.bb = NaN;
            this.a9 = NaN;
            this.ba = NaN;
            this.be = NaN;
            this.n1 = null;
            this.aw = NaN;
            this.ax = NaN;
            this.nw = null;
            this.nv = null;
            this.mu = new CornerRadius(1, NaN, NaN, NaN, NaN);
            this.ta = new Thickness(1, NaN, NaN, NaN, NaN);
            this.a5 = NaN;
            this.a4 = NaN;
            this.a1 = NaN;
            this.nz = null;
            this.n0 = null;
            this.ny = null;
            this.nx = null;
            this.a2 = NaN;
            this.a0 = NaN;
            this.ay = NaN;
            this.az = NaN;
            this.a3 = NaN;
            this.nu = null;
            this.bw = NaN;
            this.bx = NaN;
            this.ok = null;
            this.oj = null;
            this.my = new CornerRadius(1, NaN, NaN, NaN, NaN);
            this.te = new Thickness(1, NaN, NaN, NaN, NaN);
            this.b5 = NaN;
            this.b4 = NaN;
            this.b1 = NaN;
            this.on = null;
            this.oo = null;
            this.om = null;
            this.ol = null;
            this.b2 = NaN;
            this.b0 = NaN;
            this.by = NaN;
            this.bz = NaN;
            this.b3 = NaN;
            this.oi = null;
            this.x = false;
            this.t = false;
            this.z = false;
            this.v = false;
            this.y = false;
            this.u = false;
            this.r = false;
            this.n8 = null;
            this.ib = "ig-inputgroup-" + InputGroup.h8++;
            this.w = false;
            this.propertyChanged = null;
            this.l = new InputGroupInputCollection();
            this.p = null;
            this.ab = false;
            this.s = false;
            this.aa = false;
            this.h9 = toNullable(Number_$type, null);
            let a = new InputGroupView();
            a.d = this;
            this.view = a;
            this.view.ag();
            let b = this.l;
            b.collectionChanged = delegateCombine(b.collectionChanged, runOn(this, this.lx));
            let c = this.l;
            c.collectionResetting = delegateCombine(c.collectionResetting, runOn(this, this.ly));
        }
        ly(a, b) {
            this.mm();
        }
        appendContentChild(a) {
            this.view.aa(a);
        }
        mi(a) {
            this.view.aj(a);
        }
        get k() {
            return this.j;
        }
        set k(a) {
            let b = this.j;
            this.j = a;
            if (b != this.j) {
                this.md("DisplayType", enumGetBox(InputGroupDisplayType_$type, b), enumGetBox(InputGroupDisplayType_$type, a));
            }
        }
        get h() {
            return this.f;
        }
        set h(a) {
            let b = this.f;
            this.f = a;
            if (b != this.f) {
                this.md("Density", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, a));
            }
        }
        get g() {
            return this.e;
        }
        set g(a) {
            let b = this.e;
            this.e = a;
            if (b != this.e) {
                this.md("ActualDensity", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, a));
            }
        }
        l3(a) {
            for (let b = 0; b < this.inputs.count; b++) {
                if (typeCast(Label.$, this.inputs._inner[b]) !== null) {
                    a(this.inputs._inner[b]);
                }
            }
        }
        l4(a) {
            for (let b = 0; b < this.inputs.count; b++) {
                if (typeCast(Prefix.$, this.inputs._inner[b]) !== null) {
                    a(this.inputs._inner[b]);
                }
            }
        }
        l2(a) {
            for (let b = 0; b < this.inputs.count; b++) {
                if (typeCast(Input.$, this.inputs._inner[b]) !== null) {
                    a(this.inputs._inner[b]);
                }
            }
        }
        l5(a) {
            for (let b = 0; b < this.inputs.count; b++) {
                if (typeCast(Suffix.$, this.inputs._inner[b]) !== null) {
                    a(this.inputs._inner[b]);
                }
            }
        }
        lx(a, b) {
            if (b.oldItems != null) {
                for (let c of fromEn(b.oldItems)) {
                    let d = c;
                    if (d != null) {
                        d.b = null;
                    }
                }
            }
            if (b.newItems != null) {
                for (let e of fromEn(b.newItems)) {
                    let f = e;
                    if (f != null) {
                        f.b = this;
                    }
                }
            }
            this.mk();
            this.ad = true;
            try {
                this.ms();
            }
            finally {
                this.ad = false;
            }
            this.mp();
            this.mo();
            this.mq();
            this.mr();
            this.mm();
        }
        get d() {
            return this.b;
        }
        set d(a) {
            let b = this.b;
            this.b = a;
            if (b != this.b) {
                this.md("BaseTheme", enumGetBox(BaseControlTheme_$type, b), enumGetBox(BaseControlTheme_$type, a));
            }
        }
        get view() {
            return this._view;
        }
        set view(a) {
            this._view = a;
        }
        destroy() {
            this.provideContainer(null);
        }
        md(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            this.mg(a, b, c);
        }
        mg(a, b, c) {
            switch (a) {
                case "BaseTheme":
                    this.ml(this.d);
                    this.mn();
                    this.l3((d) => d.l = this.d == 0 ? 2 : this.d);
                    break;
                case "ActualBorderColor":
                case "ActualBackgroundColor":
                case "ActualBorderWidth":
                case "ActualFocusBorderColor":
                case "ActualFocusBorderWidth":
                case "ActualCornerRadius":
                case "ActualContentPadding":
                case "ActualUnderlineOpacity":
                case "ActualUnderlineRippleOpacity":
                case "ActualUnderlineRippleWidth":
                case "ActualUnderlineRippleColor":
                case "ActualUnderlineColor":
                case "ActualHoverUnderlineColor":
                case "ActualUnderlineWidth":
                case "ActualHoverUnderlineWidth":
                case "ActualHoverUnderlineOpacity":
                case "ActualFocusUnderlineColor":
                case "ActualFocusUnderlineOpacity":
                case "ActualFocusUnderlineRippleOpacity":
                case "IsHovered":
                    this.aa = true;
                    this.ab = true;
                    this.s = true;
                    this.mm();
                    break;
                case "BorderColor":
                case "BackgroundColor":
                case "BorderWidth":
                case "FocusBorderColor":
                case "FocusBorderWidth":
                case "CornerRadius":
                case "ContentPadding":
                case "UnderlineOpacity":
                case "UnderlineRippleOpacity":
                case "UnderlineRippleWidth":
                case "UnderlineRippleColor":
                case "UnderlineColor":
                case "HoverUnderlineColor":
                case "UnderlineWidth":
                case "HoverUnderlineWidth":
                case "HoverUnderlineOpacity":
                case "FocusUnderlineColor":
                case "FocusUnderlineOpacity":
                case "FocusUnderlineRippleOpacity":
                case "LineTypeBorderColor":
                case "LineTypeBackgroundColor":
                case "LineTypeBorderWidth":
                case "LineTypeFocusBorderColor":
                case "LineTypeFocusBorderWidth":
                case "LineTypeCornerRadius":
                case "LineTypeContentPadding":
                case "LineTypeUnderlineOpacity":
                case "LineTypeUnderlineRippleOpacity":
                case "LineTypeUnderlineRippleWidth":
                case "LineTypeUnderlineRippleColor":
                case "LineTypeUnderlineColor":
                case "LineTypeHoverUnderlineColor":
                case "LineTypeUnderlineWidth":
                case "LineTypeHoverUnderlineWidth":
                case "LineTypeHoverUnderlineOpacity":
                case "LineTypeFocusUnderlineColor":
                case "LineTypeFocusUnderlineOpacity":
                case "LineTypeFocusUnderlineRippleOpacity":
                case "BoxTypeBorderColor":
                case "BoxTypeBackgroundColor":
                case "BoxTypeBorderWidth":
                case "BoxTypeFocusBorderColor":
                case "BoxTypeFocusBorderWidth":
                case "BoxTypeCornerRadius":
                case "BoxTypeContentPadding":
                case "BoxTypeUnderlineOpacity":
                case "BoxTypeUnderlineRippleOpacity":
                case "BoxTypeUnderlineRippleWidth":
                case "BoxTypeUnderlineRippleColor":
                case "BoxTypeUnderlineColor":
                case "BoxTypeHoverUnderlineColor":
                case "BoxTypeUnderlineWidth":
                case "BoxTypeHoverUnderlineWidth":
                case "BoxTypeHoverUnderlineOpacity":
                case "BoxTypeFocusUnderlineColor":
                case "BoxTypeFocusUnderlineOpacity":
                case "BoxTypeFocusUnderlineRippleOpacity":
                case "BorderTypeBorderColor":
                case "BorderTypeBackgroundColor":
                case "BorderTypeBorderWidth":
                case "BorderTypeFocusBorderColor":
                case "BorderTypeFocusBorderWidth":
                case "BorderTypeCornerRadius":
                case "BorderTypeContentPadding":
                case "BorderTypeUnderlineOpacity":
                case "BorderTypeUnderlineRippleOpacity":
                case "BorderTypeUnderlineRippleWidth":
                case "BorderTypeUnderlineRippleColor":
                case "BorderTypeUnderlineColor":
                case "BorderTypeHoverUnderlineColor":
                case "BorderTypeUnderlineWidth":
                case "BorderTypeHoverUnderlineWidth":
                case "BorderTypeHoverUnderlineOpacity":
                case "BorderTypeFocusUnderlineColor":
                case "BorderTypeFocusUnderlineOpacity":
                case "BorderTypeFocusUnderlineRippleOpacity":
                case "DisplayType":
                    this.mn();
                    break;
                case "ActualDensity":
                    this.view.al();
                    this.mn();
                    break;
                case "Density":
                    this.g = this.h == 0 ? 1 : this.h;
                    break;
                case "IsFocused":
                    this.mb();
                    this.mm();
                    break;
                case "IsExpanded":
                    this.t = true;
                    this.ac = this.ah;
                    break;
                case "ActualIsExpanded":
                    this.l6();
                    break;
            }
        }
        static m2(a, b) {
            return new CornerRadius(1, !isNaN_(a.c) ? a.c : b.c, !isNaN_(a.d) ? a.d : b.d, !isNaN_(a.b) ? a.b : b.b, !isNaN_(a.a) ? a.a : b.a);
        }
        static ti(a, b) {
            return new Thickness(1, !isNaN_(a.c) ? a.c : b.c, !isNaN_(a.e) ? a.e : b.e, !isNaN_(a.d) ? a.d : b.d, !isNaN_(a.b) ? a.b : b.b);
        }
        mp() {
            this.l3((a) => {
                a.p = this.g;
                a.l = this.d == 0 ? 2 : this.d;
                switch (this.k) {
                    case 0:
                        a.s = 0;
                        break;
                    case 1:
                        a.s = 1;
                        break;
                    case 2:
                    case 3:
                        a.s = 2;
                        break;
                }
                a.ch(this.ac, false);
            });
        }
        mq() {
            this.l4((a) => {
                switch (this.k) {
                    case 0:
                        a.k = 0;
                        break;
                    case 1:
                        a.k = 1;
                        break;
                    case 2:
                    case 3:
                        a.k = 2;
                        break;
                }
            });
        }
        mo() {
            this.l2((a) => {
                a.m = this.g;
                switch (this.k) {
                    case 0:
                        a.r = 0;
                        break;
                    case 1:
                        a.r = 1;
                        break;
                    case 2:
                    case 3:
                        a.r = 2;
                        break;
                }
                a.dc(this.al, false);
            });
        }
        mr() {
            this.l5((a) => {
                switch (this.k) {
                    case 0:
                        a.k = 0;
                        break;
                    case 1:
                        a.k = 1;
                        break;
                    case 2:
                    case 3:
                        a.k = 2;
                        break;
                }
            });
        }
        mn() {
            this.mp();
            this.mo();
            this.mq();
            this.mr();
            switch (this.k) {
                case 0:
                    this.os = this.oz != null ? this.oz : this.su != null ? this.su : this.q5;
                    this.or = this.oy != null ? this.oy : this.st != null ? this.st : this.q4;
                    this.ca = !isNaN_(this.cu) ? this.cu : !isNaN_(this.hh) ? this.hh : this.fa;
                    this.ot = this.sq != null ? this.sq : this.sv != null ? this.sv : this.q6;
                    this.cb = !isNaN_(this.hc) ? this.hc : !isNaN_(this.hi) ? this.hi : this.fb;
                    this.mz = InputGroup.m2(this.m3, InputGroup.m2(this.nj, this.nc));
                    this.tf = InputGroup.ti(this.tj, InputGroup.ti(this.tz, this.ts));
                    this.cg = !isNaN_(this.h1) ? this.h1 : !isNaN_(this.hn) ? this.hn : this.fg;
                    this.ch = !isNaN_(this.h2) ? this.h2 : !isNaN_(this.ho) ? this.ho : this.fh;
                    this.ci = !isNaN_(this.h3) ? this.h3 : !isNaN_(this.hp) ? this.hp : this.fi;
                    this.ox = this.s8 != null ? this.s8 : this.sz != null ? this.sz : this.rb;
                    this.ow = this.s7 != null ? this.s7 : this.sy != null ? this.sy : this.ra;
                    this.ov = this.ss != null ? this.ss : this.sx != null ? this.sx : this.q9;
                    this.cj = !isNaN_(this.h4) ? this.h4 : !isNaN_(this.hq) ? this.hq : this.fj;
                    this.cf = !isNaN_(this.hg) ? this.hg : !isNaN_(this.hm) ? this.hm : this.ff;
                    this.ce = !isNaN_(this.hf) ? this.hf : !isNaN_(this.hl) ? this.hl : this.fe;
                    this.ou = this.sr != null ? this.sr : this.sw != null ? this.sw : this.q8;
                    this.cc = !isNaN_(this.hd) ? this.hd : !isNaN_(this.hj) ? this.hj : this.fc;
                    this.cd = !isNaN_(this.he) ? this.he : !isNaN_(this.hk) ? this.hk : this.fd;
                    break;
                case 1:
                    this.os = this.oz != null ? this.oz : this.o8 != null ? this.o8 : this.pp;
                    this.or = this.oy != null ? this.oy : this.o7 != null ? this.o7 : this.po;
                    this.ca = !isNaN_(this.cu) ? this.cu : !isNaN_(this.cv) ? this.cv : this.dg;
                    this.ot = this.sq != null ? this.sq : this.o9 != null ? this.o9 : this.pq;
                    this.cb = !isNaN_(this.hc) ? this.hc : !isNaN_(this.cw) ? this.cw : this.dh;
                    this.mz = InputGroup.m2(this.m3, InputGroup.m2(this.m1, this.m5));
                    this.tf = InputGroup.ti(this.tj, InputGroup.ti(this.th, this.tl));
                    this.cg = !isNaN_(this.h1) ? this.h1 : !isNaN_(this.c1) ? this.c1 : this.dm;
                    this.ch = !isNaN_(this.h2) ? this.h2 : !isNaN_(this.c2) ? this.c2 : this.dn;
                    this.ci = !isNaN_(this.h3) ? this.h3 : !isNaN_(this.c3) ? this.c3 : this.dp;
                    this.ox = this.s8 != null ? this.s8 : this.pd != null ? this.pd : this.pv;
                    this.ow = this.s7 != null ? this.s7 : this.pc != null ? this.pc : this.pu;
                    this.ov = this.ss != null ? this.ss : this.pb != null ? this.pb : this.pt;
                    this.cj = !isNaN_(this.h4) ? this.h4 : !isNaN_(this.c4) ? this.c4 : this.dq;
                    this.cf = !isNaN_(this.hg) ? this.hg : !isNaN_(this.c0) ? this.c0 : this.dl;
                    this.ce = !isNaN_(this.hf) ? this.hf : !isNaN_(this.cz) ? this.cz : this.dk;
                    this.ou = this.sr != null ? this.sr : this.pa != null ? this.pa : this.ps;
                    this.cc = !isNaN_(this.hd) ? this.hd : !isNaN_(this.cx) ? this.cx : this.di;
                    this.cd = !isNaN_(this.he) ? this.he : !isNaN_(this.cy) ? this.cy : this.dj;
                    break;
                case 2:
                    this.os = this.oz != null ? this.oz : this.o1 != null ? this.o1 : this.ph;
                    this.or = this.oy != null ? this.oy : this.o0 != null ? this.o0 : this.pg;
                    this.ca = !isNaN_(this.cu) ? this.cu : !isNaN_(this.ck) ? this.ck : this.c5;
                    this.ot = this.sq != null ? this.sq : this.o2 != null ? this.o2 : this.pi;
                    this.cb = !isNaN_(this.hc) ? this.hc : !isNaN_(this.cl) ? this.cl : this.c6;
                    this.mz = InputGroup.m2(this.m3, InputGroup.m2(this.m0, this.m4));
                    this.tf = InputGroup.ti(this.tj, InputGroup.ti(this.tg, this.tk));
                    this.cg = !isNaN_(this.h1) ? this.h1 : !isNaN_(this.cq) ? this.cq : this.db;
                    this.ch = !isNaN_(this.h2) ? this.h2 : !isNaN_(this.cr) ? this.cr : this.dc;
                    this.ci = !isNaN_(this.h3) ? this.h3 : !isNaN_(this.cs) ? this.cs : this.dd;
                    this.ox = this.s8 != null ? this.s8 : this.o6 != null ? this.o6 : this.pn;
                    this.ow = this.s7 != null ? this.s7 : this.o5 != null ? this.o5 : this.pm;
                    this.ov = this.ss != null ? this.ss : this.o4 != null ? this.o4 : this.pl;
                    this.cj = !isNaN_(this.h4) ? this.h4 : !isNaN_(this.ct) ? this.ct : this.de;
                    this.cf = !isNaN_(this.hg) ? this.hg : !isNaN_(this.cp) ? this.cp : this.da;
                    this.ce = !isNaN_(this.hf) ? this.hf : !isNaN_(this.co) ? this.co : this.c9;
                    this.ou = this.sr != null ? this.sr : this.o3 != null ? this.o3 : this.pk;
                    this.cc = !isNaN_(this.hd) ? this.hd : !isNaN_(this.cm) ? this.cm : this.c7;
                    this.cd = !isNaN_(this.he) ? this.he : !isNaN_(this.cn) ? this.cn : this.c8;
                    break;
                case 3:
                    this.os = this.oz != null ? this.oz : this.s1 != null ? this.s1 : this.sh;
                    this.or = this.oy != null ? this.oy : this.s0 != null ? this.s0 : this.sg;
                    this.ca = !isNaN_(this.cu) ? this.cu : !isNaN_(this.hr) ? this.hr : this.gy;
                    this.ot = this.sq != null ? this.sq : this.s2 != null ? this.s2 : this.si;
                    this.cb = !isNaN_(this.hc) ? this.hc : !isNaN_(this.hs) ? this.hs : this.gz;
                    this.mz = InputGroup.m2(this.m3, InputGroup.m2(this.nk, this.ni));
                    this.tf = InputGroup.ti(this.tj, InputGroup.ti(this.t0, this.ty));
                    this.cg = !isNaN_(this.h1) ? this.h1 : !isNaN_(this.hx) ? this.hx : this.g4;
                    this.ch = !isNaN_(this.h2) ? this.h2 : !isNaN_(this.hy) ? this.hy : this.g5;
                    this.ci = !isNaN_(this.h3) ? this.h3 : !isNaN_(this.hz) ? this.hz : this.g6;
                    this.ox = this.s8 != null ? this.s8 : this.s6 != null ? this.s6 : this.sn;
                    this.ow = this.s7 != null ? this.s7 : this.s5 != null ? this.s5 : this.sm;
                    this.ov = this.ss != null ? this.ss : this.s4 != null ? this.s4 : this.sl;
                    this.cj = !isNaN_(this.h4) ? this.h4 : !isNaN_(this.h0) ? this.h0 : this.g7;
                    this.cf = !isNaN_(this.hg) ? this.hg : !isNaN_(this.hw) ? this.hw : this.g3;
                    this.ce = !isNaN_(this.hf) ? this.hf : !isNaN_(this.hv) ? this.hv : this.g2;
                    this.ou = this.sr != null ? this.sr : this.s3 != null ? this.s3 : this.sk;
                    this.cc = !isNaN_(this.hd) ? this.hd : !isNaN_(this.ht) ? this.ht : this.g0;
                    this.cd = !isNaN_(this.he) ? this.he : !isNaN_(this.hu) ? this.hu : this.g1;
                    break;
            }
        }
        mm() {
            this.l3((a) => {
            });
            this.l2((a) => {
            });
            let a = this.view.u;
            let b = this.view.t;
            let c = this.view.w;
            let d = this.view.x;
            let e = this.p != null && this.p.playState == 1;
            let f = this.q != null && this.q.playState == 1;
            let g = this.o != null && this.o.playState == 1;
            NativeUI.l(a, this.mz);
            NativeUI.l(b, this.mz);
            NativeUI.j(a, this.or);
            NativeUI.u(a, this.tf);
            if (this.ai) {
                if (!g) {
                    NativeUI.k(b, this.ot);
                    NativeUI.m(b, new Thickness(0, this.cb));
                }
                if (!f) {
                    NativeUI.j(c, this.ou);
                }
            }
            else {
                if (!f) {
                    if (this.aj) {
                        NativeUI.j(c, this.ov);
                        NativeUI.t(c, this.ce);
                        NativeUI.q(c, this.cf);
                    }
                    else {
                        NativeUI.j(c, this.ow);
                        NativeUI.t(c, this.cg);
                        NativeUI.q(c, this.cj);
                    }
                }
                if (!g) {
                    NativeUI.k(b, this.os);
                    NativeUI.m(b, new Thickness(0, this.ca));
                }
                if (!f) {
                    NativeUI.j(a, this.or);
                }
            }
            if (!e) {
                NativeUI.j(d, this.ox);
                NativeUI.q(d, this.ci);
                NativeUI.t(d, this.ch);
            }
        }
        get a() {
            let a = new AnimationKeyFrameEffectTiming();
            a.g = 300;
            a.b = 0;
            return a;
        }
        onChildrenMutated() {
            this.l2((a) => a.view.ax());
            this.l3((a) => a.view.ac());
            this.l4((a) => a.view.q());
            this.l5((a) => a.view.q());
        }
        l1() {
            this.view.ab();
            let a = false;
            if (this.q == null) {
                this.q = KeyFrameAnimationFactory.f.c(this.view.c(this.a).m(new AnimationKeyFrameProperty(2, this.os)).m(new AnimationKeyFrameProperty(2, this.ot)));
            }
            if (this.o == null) {
                this.o = KeyFrameAnimationFactory.f.c(this.view.a(this.a).m(new AnimationKeyFrameProperty(3, this.os), new AnimationKeyFrameProperty(4, this.k == 2 || this.k == 3 ? new Thickness(0, this.ca) : new Thickness(0, 0))).m(new AnimationKeyFrameProperty(3, this.ot), new AnimationKeyFrameProperty(4, this.k == 2 || this.k == 3 ? new Thickness(0, this.cb) : new Thickness(0, 0))));
            }
            if (this.p == null) {
                this.p = KeyFrameAnimationFactory.f.c(this.view.b(this.a).m(new AnimationKeyFrameProperty(2, this.ot), new AnimationKeyFrameProperty(14, ((() => {
                    let $ret = new ScaleTransform();
                    $ret.l = 0.5;
                    $ret.m = 1;
                    return $ret;
                })())), new AnimationKeyFrameProperty(1, 0)).m(new AnimationKeyFrameProperty(2, this.ot), new AnimationKeyFrameProperty(14, ((() => {
                    let $ret = new ScaleTransform();
                    $ret.l = 1;
                    $ret.m = 1;
                    return $ret;
                })())), new AnimationKeyFrameProperty(1, 1)));
            }
        }
        get af() {
            let a = false;
            this.l2((b) => {
                if (b.ao) {
                    a = true;
                }
            });
            return a;
        }
        mc() {
            this.ac = this.t ? this.ah : this.af ? true : false;
            this.ai = false;
            if (null != this.lostFocus) {
                this.lostFocus(this, EventArgs.empty);
            }
        }
        ml(a) {
            this.df = ThemeResolver.b(a, InputGroup.fu, InputGroup.d1);
            this.e5 = ThemeResolver.b(a, InputGroup.f5, InputGroup.ec);
            this.m6 = ThemeResolver.d(a, InputGroup.nf, InputGroup.m9);
            this.tm = ThemeResolver.f(a, InputGroup.tv, InputGroup.tp);
            this.pf = ThemeResolver.e(a, InputGroup.rd, InputGroup.px);
            this.q0 = ThemeResolver.e(a, InputGroup.ru, InputGroup.qe);
            this.q1 = ThemeResolver.e(a, InputGroup.rv, InputGroup.qf);
            this.hb = ThemeResolver.b(a, InputGroup.gx, InputGroup.e4);
            this.ha = ThemeResolver.b(a, InputGroup.gw, InputGroup.e3);
            this.e9 = ThemeResolver.b(a, InputGroup.f9, InputGroup.eg);
            this.so = ThemeResolver.e(a, InputGroup.se, InputGroup.qy);
            this.sp = ThemeResolver.e(a, InputGroup.sf, InputGroup.qz);
            this.q3 = ThemeResolver.e(a, InputGroup.rx, InputGroup.qh);
            this.q2 = ThemeResolver.e(a, InputGroup.rw, InputGroup.qg);
            this.g8 = ThemeResolver.b(a, InputGroup.gu, InputGroup.e1);
            this.e8 = ThemeResolver.b(a, InputGroup.f8, InputGroup.ef);
            this.e6 = ThemeResolver.b(a, InputGroup.f6, InputGroup.ed);
            this.e7 = ThemeResolver.b(a, InputGroup.f7, InputGroup.ee);
            this.g9 = ThemeResolver.b(a, InputGroup.gv, InputGroup.e2);
            this.pe = ThemeResolver.e(a, InputGroup.rc, InputGroup.pw);
            this.fa = ThemeResolver.b(a, InputGroup.ga, InputGroup.eh);
            this.fb = ThemeResolver.b(a, InputGroup.gb, InputGroup.ei);
            this.nc = ThemeResolver.d(a, InputGroup.ng, InputGroup.na);
            this.ts = ThemeResolver.f(a, InputGroup.tw, InputGroup.tq);
            this.q5 = ThemeResolver.e(a, InputGroup.rz, InputGroup.qj);
            this.q6 = ThemeResolver.e(a, InputGroup.r0, InputGroup.qk);
            this.q7 = ThemeResolver.e(a, InputGroup.r1, InputGroup.ql);
            this.fj = ThemeResolver.b(a, InputGroup.gj, InputGroup.eq);
            this.fi = ThemeResolver.b(a, InputGroup.gi, InputGroup.ep);
            this.ff = ThemeResolver.b(a, InputGroup.gf, InputGroup.em);
            this.ra = ThemeResolver.e(a, InputGroup.r4, InputGroup.qo);
            this.rb = ThemeResolver.e(a, InputGroup.r5, InputGroup.qp);
            this.q9 = ThemeResolver.e(a, InputGroup.r3, InputGroup.qn);
            this.q8 = ThemeResolver.e(a, InputGroup.r2, InputGroup.qm);
            this.fg = ThemeResolver.b(a, InputGroup.gg, InputGroup.en);
            this.fe = ThemeResolver.b(a, InputGroup.ge, InputGroup.el);
            this.fc = ThemeResolver.b(a, InputGroup.gc, InputGroup.ej);
            this.fd = ThemeResolver.b(a, InputGroup.gd, InputGroup.ek);
            this.fh = ThemeResolver.b(a, InputGroup.gh, InputGroup.eo);
            this.q4 = ThemeResolver.e(a, InputGroup.ry, InputGroup.qi);
            this.dg = ThemeResolver.b(a, InputGroup.fv, InputGroup.d2);
            this.dh = ThemeResolver.b(a, InputGroup.fw, InputGroup.d3);
            this.m5 = ThemeResolver.d(a, InputGroup.ne, InputGroup.m8);
            this.tl = ThemeResolver.f(a, InputGroup.tu, InputGroup.to);
            this.pp = ThemeResolver.e(a, InputGroup.rn, InputGroup.p7);
            this.pq = ThemeResolver.e(a, InputGroup.ro, InputGroup.p8);
            this.pr = ThemeResolver.e(a, InputGroup.rp, InputGroup.p9);
            this.dq = ThemeResolver.b(a, InputGroup.f4, InputGroup.eb);
            this.dp = ThemeResolver.b(a, InputGroup.f3, InputGroup.ea);
            this.dl = ThemeResolver.b(a, InputGroup.f0, InputGroup.d7);
            this.pu = ThemeResolver.e(a, InputGroup.rs, InputGroup.qc);
            this.pv = ThemeResolver.e(a, InputGroup.rt, InputGroup.qd);
            this.pt = ThemeResolver.e(a, InputGroup.rr, InputGroup.qb);
            this.ps = ThemeResolver.e(a, InputGroup.rq, InputGroup.qa);
            this.dm = ThemeResolver.b(a, InputGroup.f1, InputGroup.d8);
            this.dk = ThemeResolver.b(a, InputGroup.fz, InputGroup.d6);
            this.di = ThemeResolver.b(a, InputGroup.fx, InputGroup.d4);
            this.dj = ThemeResolver.b(a, InputGroup.fy, InputGroup.d5);
            this.dn = ThemeResolver.b(a, InputGroup.f2, InputGroup.d9);
            this.po = ThemeResolver.e(a, InputGroup.rm, InputGroup.p6);
            this.c5 = ThemeResolver.b(a, InputGroup.fk, InputGroup.dr);
            this.c6 = ThemeResolver.b(a, InputGroup.fl, InputGroup.ds);
            this.m4 = ThemeResolver.d(a, InputGroup.nd, InputGroup.m7);
            this.tk = ThemeResolver.f(a, InputGroup.tt, InputGroup.tn);
            this.ph = ThemeResolver.e(a, InputGroup.rf, InputGroup.pz);
            this.pi = ThemeResolver.e(a, InputGroup.rg, InputGroup.p0);
            this.pj = ThemeResolver.e(a, InputGroup.rh, InputGroup.p1);
            this.de = ThemeResolver.b(a, InputGroup.ft, InputGroup.d0);
            this.dd = ThemeResolver.b(a, InputGroup.fs, InputGroup.dz);
            this.da = ThemeResolver.b(a, InputGroup.fp, InputGroup.dw);
            this.pm = ThemeResolver.e(a, InputGroup.rk, InputGroup.p4);
            this.pn = ThemeResolver.e(a, InputGroup.rl, InputGroup.p5);
            this.pl = ThemeResolver.e(a, InputGroup.rj, InputGroup.p3);
            this.pk = ThemeResolver.e(a, InputGroup.ri, InputGroup.p2);
            this.db = ThemeResolver.b(a, InputGroup.fq, InputGroup.dx);
            this.c9 = ThemeResolver.b(a, InputGroup.fo, InputGroup.dv);
            this.c7 = ThemeResolver.b(a, InputGroup.fm, InputGroup.dt);
            this.c8 = ThemeResolver.b(a, InputGroup.fn, InputGroup.du);
            this.dc = ThemeResolver.b(a, InputGroup.fr, InputGroup.dy);
            this.pg = ThemeResolver.e(a, InputGroup.re, InputGroup.py);
            this.gy = ThemeResolver.b(a, InputGroup.gk, InputGroup.er);
            this.gz = ThemeResolver.b(a, InputGroup.gl, InputGroup.es);
            this.ni = ThemeResolver.d(a, InputGroup.nh, InputGroup.nb);
            this.ty = ThemeResolver.f(a, InputGroup.tx, InputGroup.tr);
            this.sh = ThemeResolver.e(a, InputGroup.r7, InputGroup.qr);
            this.si = ThemeResolver.e(a, InputGroup.r8, InputGroup.qs);
            this.sj = ThemeResolver.e(a, InputGroup.r9, InputGroup.qt);
            this.g7 = ThemeResolver.b(a, InputGroup.gt, InputGroup.e0);
            this.g6 = ThemeResolver.b(a, InputGroup.gs, InputGroup.ez);
            this.g3 = ThemeResolver.b(a, InputGroup.gp, InputGroup.ew);
            this.sm = ThemeResolver.e(a, InputGroup.sc, InputGroup.qw);
            this.sn = ThemeResolver.e(a, InputGroup.sd, InputGroup.qx);
            this.sl = ThemeResolver.e(a, InputGroup.sb, InputGroup.qv);
            this.sk = ThemeResolver.e(a, InputGroup.sa, InputGroup.qu);
            this.g4 = ThemeResolver.b(a, InputGroup.gq, InputGroup.ex);
            this.g2 = ThemeResolver.b(a, InputGroup.go, InputGroup.ev);
            this.g0 = ThemeResolver.b(a, InputGroup.gm, InputGroup.et);
            this.g1 = ThemeResolver.b(a, InputGroup.gn, InputGroup.eu);
            this.g5 = ThemeResolver.b(a, InputGroup.gr, InputGroup.ey);
            this.sg = ThemeResolver.e(a, InputGroup.r6, InputGroup.qq);
        }
        l6() {
            this.l1();
            if (this.ac) {
                this.l3((a) => a.ch(true, !this.ad));
                this.l2((a) => a.dc(this.al, !this.ad));
            }
            else {
                this.l3((a) => a.ch(false, !this.ad));
                this.l2((a) => a.dc(this.al, !this.ad));
            }
        }
        mb() {
            this.l1();
            if (this.ai) {
                let a = 1;
                this.l3((b) => b.al = true);
                this.mf(a);
            }
            else {
                let b = -1;
                this.l3((c) => c.al = false);
                this.mf(b);
            }
        }
        ma() {
            this.ac = this.t ? this.ah : true;
            this.ai = true;
            if (null != this.gotFocus) {
                this.gotFocus(this, EventArgs.empty);
            }
        }
        ms() {
            if (this.t) {
                this.ac = this.t;
            }
            else if (this.ai) {
                this.ac = true;
            }
            else {
                this.ac = this.af ? true : false;
            }
        }
        mf(a) {
            if ((a > 0 && this.q.playbackRate < 0) || (a < 0 && this.q.playbackRate > 0)) {
                this.q.reverse();
                this.q.finished.f((b) => {
                    if (this.q != null) {
                        this.q.commitStyles();
                    }
                    if (this.ab) {
                        this.q = null;
                        this.ab = false;
                    }
                });
                this.o.reverse();
                this.o.finished.f((b) => {
                    if (this.o != null) {
                        this.o.commitStyles();
                    }
                    if (this.s) {
                        this.o = null;
                        this.s = false;
                    }
                });
                this.p.reverse();
                this.p.finished.f((b) => {
                    if (this.p != null) {
                        this.p.commitStyles();
                    }
                    if (this.aa) {
                        this.p = null;
                        this.aa = false;
                    }
                });
            }
            else {
                this.q.play();
                this.q.finished.f((b) => {
                    if (this.q != null) {
                        this.q.commitStyles();
                    }
                    if (this.ab) {
                        this.q = null;
                        this.ab = false;
                    }
                });
                this.o.play();
                this.o.finished.f((b) => {
                    if (this.o != null) {
                        this.o.commitStyles();
                    }
                    if (this.s) {
                        this.o = null;
                        this.s = false;
                    }
                });
                this.p.play();
                this.p.finished.f((b) => {
                    if (this.p != null) {
                        this.p.commitStyles();
                    }
                    if (this.aa) {
                        this.p = null;
                        this.aa = false;
                    }
                });
            }
        }
        get os() {
            return this.nm;
        }
        set os(a) {
            let b = this.nm;
            this.nm = a;
            if (b != this.nm) {
                this.md("ActualBorderColor", b, a);
            }
        }
        get ot() {
            return this.nn;
        }
        set ot(a) {
            let b = this.nn;
            this.nn = a;
            if (b != this.nn) {
                this.md("ActualFocusBorderColor", b, a);
            }
        }
        get ca() {
            return this.am;
        }
        set ca(a) {
            let b = this.am;
            this.am = a;
            if (b != this.am) {
                this.md("ActualBorderWidth", b, a);
            }
        }
        get cb() {
            return this.an;
        }
        set cb(a) {
            let b = this.an;
            this.an = a;
            if (b != this.an) {
                this.md("ActualFocusBorderWidth", b, a);
            }
        }
        get mz() {
            return this.mt;
        }
        set mz(a) {
            let b = this.mt;
            this.mt = a;
            if (b != this.mt) {
                this.md("ActualCornerRadius", b, a);
            }
        }
        get tf() {
            return this.s9;
        }
        set tf(a) {
            let b = this.s9;
            this.s9 = a;
            if (b != this.s9) {
                this.md("ActualContentPadding", b, a);
            }
        }
        get cj() {
            return this.av;
        }
        set cj(a) {
            let b = this.av;
            this.av = a;
            if (b != this.av) {
                this.md("ActualUnderlineWidth", b, a);
            }
        }
        get ci() {
            return this.au;
        }
        set ci(a) {
            let b = this.au;
            this.au = a;
            if (b != this.au) {
                this.md("ActualUnderlineRippleWidth", b, a);
            }
        }
        get cf() {
            return this.ar;
        }
        set cf(a) {
            let b = this.ar;
            this.ar = a;
            if (b != this.ar) {
                this.md("ActualHoverUnderlineWidth", b, a);
            }
        }
        get ow() {
            return this.nq;
        }
        set ow(a) {
            let b = this.nq;
            this.nq = a;
            if (b != this.nq) {
                this.md("ActualUnderlineColor", b, a);
            }
        }
        get ox() {
            return this.nr;
        }
        set ox(a) {
            let b = this.nr;
            this.nr = a;
            if (b != this.nr) {
                this.md("ActualUnderlineRippleColor", b, a);
            }
        }
        get ov() {
            return this.np;
        }
        set ov(a) {
            let b = this.np;
            this.np = a;
            if (b != this.np) {
                this.md("ActualHoverUnderlineColor", b, a);
            }
        }
        get ou() {
            return this.no;
        }
        set ou(a) {
            let b = this.no;
            this.n9 = a;
            if (b != this.no) {
                this.md("ActualFocusUnderlineColor", b, a);
            }
        }
        get cg() {
            return this.as;
        }
        set cg(a) {
            let b = this.as;
            this.as = a;
            if (b != this.as) {
                this.md("ActualUnderlineOpacity", b, a);
            }
        }
        get ce() {
            return this.aq;
        }
        set ce(a) {
            let b = this.aq;
            this.aq = a;
            if (b != this.aq) {
                this.md("ActualHoverUnderlineOpacity", b, a);
            }
        }
        get cc() {
            return this.ao;
        }
        set cc(a) {
            let b = this.ao;
            this.ao = a;
            if (b != this.ao) {
                this.md("ActualFocusUnderlineOpacity", b, a);
            }
        }
        get cd() {
            return this.ap;
        }
        set cd(a) {
            let b = this.ap;
            this.ap = a;
            if (b != this.ap) {
                this.md("ActualFocusUnderlineRippleOpacity", b, a);
            }
        }
        get ch() {
            return this.at;
        }
        set ch(a) {
            let b = this.at;
            this.at = a;
            if (b != this.at) {
                this.md("ActualUnderlineRippleOpacity", b, a);
            }
        }
        get or() {
            return this.nl;
        }
        set or(a) {
            let b = this.nl;
            this.nl = a;
            if (b != this.nl) {
                this.md("ActualBackgroundColor", b, a);
            }
        }
        get cu() {
            return this.a6;
        }
        set cu(a) {
            let b = this.a6;
            this.a6 = a;
            if (b != this.a6) {
                this.md("BorderWidth", b, a);
            }
        }
        get hc() {
            return this.bh;
        }
        set hc(a) {
            let b = this.bh;
            this.bh = a;
            if (b != this.bh) {
                this.md("FocusBorderWidth", b, a);
            }
        }
        get oz() {
            return this.nt;
        }
        set oz(a) {
            let b = this.nt;
            this.nt = a;
            if (b != this.nt) {
                this.md("BorderColor", b, a);
            }
        }
        get m3() {
            return this.mw;
        }
        set m3(a) {
            let b = this.mw;
            this.mw = a;
            if (b != this.mw) {
                this.md("CornerRadius", b, a);
            }
        }
        get tj() {
            return this.tc;
        }
        set tj(a) {
            let b = this.tc;
            this.tc = a;
            if (b != this.tc) {
                this.md("ContentPadding", b, a);
            }
        }
        get h4() {
            return this.b9;
        }
        set h4(a) {
            let b = this.b9;
            this.b9 = a;
            if (b != this.b9) {
                this.md("UnderlineWidth", b, a);
            }
        }
        get h3() {
            return this.b8;
        }
        set h3(a) {
            let b = this.b8;
            this.b8 = a;
            if (b != this.b8) {
                this.md("UnderlineRippleWidth", b, a);
            }
        }
        get hg() {
            return this.bl;
        }
        set hg(a) {
            let b = this.bl;
            this.bl = a;
            if (b != this.bl) {
                this.md("HoverUnderlineWidth", b, a);
            }
        }
        get s7() {
            return this.op;
        }
        set s7(a) {
            let b = this.op;
            this.op = a;
            if (b != this.op) {
                this.md("UnderlineColor", b, a);
            }
        }
        get s8() {
            return this.oq;
        }
        set s8(a) {
            let b = this.oq;
            this.oq = a;
            if (b != this.oq) {
                this.md("UnderlineRippleColor", b, a);
            }
        }
        get ss() {
            return this.oa;
        }
        set ss(a) {
            let b = this.oa;
            this.oa = a;
            if (b != this.oa) {
                this.md("HoverUnderlineColor", b, a);
            }
        }
        get sr() {
            return this.n9;
        }
        set sr(a) {
            let b = this.n9;
            this.n9 = a;
            if (b != this.n9) {
                this.md("FocusUnderlineColor", b, a);
            }
        }
        get h1() {
            return this.b6;
        }
        set h1(a) {
            let b = this.b6;
            this.b6 = a;
            if (b != this.b6) {
                this.md("UnderlineOpacity", b, a);
            }
        }
        get hf() {
            return this.bk;
        }
        set hf(a) {
            let b = this.bk;
            this.bk = a;
            if (b != this.bk) {
                this.md("HoverUnderlineOpacity", b, a);
            }
        }
        get hd() {
            return this.bi;
        }
        set hd(a) {
            let b = this.bi;
            this.bi = a;
            if (b != this.bi) {
                this.md("FocusUnderlineOpacity", b, a);
            }
        }
        get he() {
            return this.bj;
        }
        set he(a) {
            let b = this.bj;
            this.bj = a;
            if (b != this.bj) {
                this.md("FocusUnderlineRippleOpacity", b, a);
            }
        }
        get h2() {
            return this.b7;
        }
        set h2(a) {
            let b = this.b7;
            this.b7 = a;
            if (b != this.b7) {
                this.md("UnderlineRippleOpacity", b, a);
            }
        }
        get oy() {
            return this.ns;
        }
        set oy(a) {
            let b = this.ns;
            this.ns = a;
            if (b != this.ns) {
                this.md("BackgroundColor", b, a);
            }
        }
        get hh() {
            return this.bm;
        }
        set hh(a) {
            let b = this.bm;
            this.bm = a;
            if (b != this.bm) {
                this.md("LineTypeBorderWidth", b, a);
            }
        }
        get hi() {
            return this.bn;
        }
        set hi(a) {
            let b = this.bn;
            this.bn = a;
            if (b != this.bn) {
                this.md("LineTypeFocusBorderWidth", b, a);
            }
        }
        get sv() {
            return this.od;
        }
        set sv(a) {
            let b = this.od;
            this.od = a;
            if (b != this.od) {
                this.md("LineTypeFocusBorderColor", b, a);
            }
        }
        get su() {
            return this.oc;
        }
        set su(a) {
            let b = this.oc;
            this.oc = a;
            if (b != this.oc) {
                this.md("LineTypeBorderColor", b, a);
            }
        }
        get nj() {
            return this.mx;
        }
        set nj(a) {
            let b = this.mx;
            this.mx = a;
            if (b != this.mx) {
                this.md("LineTypeCornerRadius", b, a);
            }
        }
        get tz() {
            return this.td;
        }
        set tz(a) {
            let b = this.td;
            this.td = a;
            if (b != this.td) {
                this.md("LineTypeContentPadding", b, a);
            }
        }
        get hq() {
            return this.bv;
        }
        set hq(a) {
            let b = this.bv;
            this.bv = a;
            if (b != this.bv) {
                this.md("LineTypeUnderlineWidth", b, a);
            }
        }
        get hp() {
            return this.bu;
        }
        set hp(a) {
            let b = this.bu;
            this.bu = a;
            if (b != this.bu) {
                this.md("LineTypeUnderlineRippleWidth", b, a);
            }
        }
        get hm() {
            return this.br;
        }
        set hm(a) {
            let b = this.br;
            this.br = a;
            if (b != this.br) {
                this.md("LineTypeHoverUnderlineWidth", b, a);
            }
        }
        get sy() {
            return this.og;
        }
        set sy(a) {
            let b = this.og;
            this.og = a;
            if (b != this.og) {
                this.md("LineTypeUnderlineColor", b, a);
            }
        }
        get sz() {
            return this.oh;
        }
        set sz(a) {
            let b = this.oh;
            this.oh = a;
            if (b != this.oh) {
                this.md("LineTypeUnderlineRippleColor", b, a);
            }
        }
        get sx() {
            return this.of;
        }
        set sx(a) {
            let b = this.of;
            this.oa = a;
            if (b != this.of) {
                this.md("LineTypeHoverUnderlineColor", b, a);
            }
        }
        get sw() {
            return this.oe;
        }
        set sw(a) {
            let b = this.oe;
            this.oe = a;
            if (b != this.oe) {
                this.md("LineTypeFocusUnderlineColor", b, a);
            }
        }
        get hn() {
            return this.bs;
        }
        set hn(a) {
            let b = this.bs;
            this.bs = a;
            if (b != this.bs) {
                this.md("LineTypeUnderlineOpacity", b, a);
            }
        }
        get hl() {
            return this.bq;
        }
        set hl(a) {
            let b = this.bq;
            this.bq = a;
            if (b != this.bq) {
                this.md("LineTypeHoverUnderlineOpacity", b, a);
            }
        }
        get hj() {
            return this.bo;
        }
        set hj(a) {
            let b = this.bo;
            this.bo = a;
            if (b != this.bo) {
                this.md("LineTypeFocusUnderlineOpacity", b, a);
            }
        }
        get hk() {
            return this.bp;
        }
        set hk(a) {
            let b = this.bp;
            this.bp = a;
            if (b != this.bp) {
                this.md("LineTypeFocusUnderlineRippleOpacity", b, a);
            }
        }
        get ho() {
            return this.bt;
        }
        set ho(a) {
            let b = this.bt;
            this.bt = a;
            if (b != this.bt) {
                this.md("LineTypeUnderlineRippleOpacity", b, a);
            }
        }
        get st() {
            return this.ob;
        }
        set st(a) {
            let b = this.ob;
            this.ob = a;
            if (b != this.ob) {
                this.md("LineTypeBackgroundColor", b, a);
            }
        }
        get cv() {
            return this.a7;
        }
        set cv(a) {
            let b = this.a7;
            this.a7 = a;
            if (b != this.a7) {
                this.md("BoxTypeBorderWidth", b, a);
            }
        }
        get cw() {
            return this.a8;
        }
        set cw(a) {
            let b = this.a8;
            this.a8 = a;
            if (b != this.a8) {
                this.md("BoxTypeFocusBorderWidth", b, a);
            }
        }
        get o9() {
            return this.n3;
        }
        set o9(a) {
            let b = this.n3;
            this.n3 = a;
            if (b != this.n3) {
                this.md("BoxTypeFocusBorderColor", b, a);
            }
        }
        get o8() {
            return this.n2;
        }
        set o8(a) {
            let b = this.n2;
            this.n2 = a;
            if (b != this.n2) {
                this.md("BoxTypeBorderColor", b, a);
            }
        }
        get m1() {
            return this.mv;
        }
        set m1(a) {
            let b = this.mv;
            this.mv = a;
            if (b != this.mv) {
                this.md("BoxTypeCornerRadius", b, a);
            }
        }
        get th() {
            return this.tb;
        }
        set th(a) {
            let b = this.tb;
            this.tb = a;
            if (b != this.tb) {
                this.md("BoxTypeContentPadding", b, a);
            }
        }
        get c4() {
            return this.bg;
        }
        set c4(a) {
            let b = this.bg;
            this.bg = a;
            if (b != this.bg) {
                this.md("BoxTypeUnderlineWidth", b, a);
            }
        }
        get c3() {
            return this.bf;
        }
        set c3(a) {
            let b = this.bf;
            this.bf = a;
            if (b != this.bf) {
                this.md("BoxTypeUnderlineRippleWidth", b, a);
            }
        }
        get c0() {
            return this.bc;
        }
        set c0(a) {
            let b = this.bc;
            this.bc = a;
            if (b != this.bc) {
                this.md("BoxTypeHoverUnderlineWidth", b, a);
            }
        }
        get pc() {
            return this.n6;
        }
        set pc(a) {
            let b = this.n6;
            this.n6 = a;
            if (b != this.n6) {
                this.md("BoxTypeUnderlineColor", b, a);
            }
        }
        get pd() {
            return this.n7;
        }
        set pd(a) {
            let b = this.n7;
            this.n7 = a;
            if (b != this.n7) {
                this.md("BoxTypeUnderlineRippleColor", b, a);
            }
        }
        get pb() {
            return this.n5;
        }
        set pb(a) {
            let b = this.n5;
            this.oa = a;
            if (b != this.n5) {
                this.md("BoxTypeHoverUnderlineColor", b, a);
            }
        }
        get pa() {
            return this.n4;
        }
        set pa(a) {
            let b = this.n4;
            this.n4 = a;
            if (b != this.n4) {
                this.md("BoxTypeFocusUnderlineColor", b, a);
            }
        }
        get c1() {
            return this.bd;
        }
        set c1(a) {
            let b = this.bd;
            this.bd = a;
            if (b != this.bd) {
                this.md("BoxTypeUnderlineOpacity", b, a);
            }
        }
        get cz() {
            return this.bb;
        }
        set cz(a) {
            let b = this.bb;
            this.bb = a;
            if (b != this.bb) {
                this.md("BoxTypeHoverUnderlineOpacity", b, a);
            }
        }
        get cx() {
            return this.a9;
        }
        set cx(a) {
            let b = this.a9;
            this.a9 = a;
            if (b != this.a9) {
                this.md("BoxTypeFocusUnderlineOpacity", b, a);
            }
        }
        get cy() {
            return this.ba;
        }
        set cy(a) {
            let b = this.ba;
            this.ba = a;
            if (b != this.ba) {
                this.md("BoxTypeFocusUnderlineRippleOpacity", b, a);
            }
        }
        get c2() {
            return this.be;
        }
        set c2(a) {
            let b = this.be;
            this.be = a;
            if (b != this.be) {
                this.md("BoxTypeUnderlineRippleOpacity", b, a);
            }
        }
        get o7() {
            return this.n1;
        }
        set o7(a) {
            let b = this.n1;
            this.n1 = a;
            if (b != this.n1) {
                this.md("BoxTypeBackgroundColor", b, a);
            }
        }
        get ck() {
            return this.aw;
        }
        set ck(a) {
            let b = this.aw;
            this.aw = a;
            if (b != this.aw) {
                this.md("BorderTypeBorderWidth", b, a);
            }
        }
        get cl() {
            return this.ax;
        }
        set cl(a) {
            let b = this.ax;
            this.ax = a;
            if (b != this.ax) {
                this.md("BorderTypeFocusBorderWidth", b, a);
            }
        }
        get o2() {
            return this.nw;
        }
        set o2(a) {
            let b = this.nw;
            this.nw = a;
            if (b != this.nw) {
                this.md("BorderTypeFocusBorderColor", b, a);
            }
        }
        get o1() {
            return this.nv;
        }
        set o1(a) {
            let b = this.nv;
            this.nv = a;
            if (b != this.nv) {
                this.md("BorderTypeBorderColor", b, a);
            }
        }
        get m0() {
            return this.mu;
        }
        set m0(a) {
            let b = this.mu;
            this.mu = a;
            if (b != this.mu) {
                this.md("BorderTypeCornerRadius", b, a);
            }
        }
        get tg() {
            return this.ta;
        }
        set tg(a) {
            let b = this.ta;
            this.ta = a;
            if (b != this.ta) {
                this.md("BorderTypeContentPadding", b, a);
            }
        }
        get ct() {
            return this.a5;
        }
        set ct(a) {
            let b = this.a5;
            this.a5 = a;
            if (b != this.a5) {
                this.md("BorderTypeUnderlineWidth", b, a);
            }
        }
        get cs() {
            return this.a4;
        }
        set cs(a) {
            let b = this.a4;
            this.a4 = a;
            if (b != this.a4) {
                this.md("BorderTypeUnderlineRippleWidth", b, a);
            }
        }
        get cp() {
            return this.a1;
        }
        set cp(a) {
            let b = this.a1;
            this.a1 = a;
            if (b != this.a1) {
                this.md("BorderTypeHoverUnderlineWidth", b, a);
            }
        }
        get o5() {
            return this.nz;
        }
        set o5(a) {
            let b = this.nz;
            this.nz = a;
            if (b != this.nz) {
                this.md("BorderTypeUnderlineColor", b, a);
            }
        }
        get o6() {
            return this.n0;
        }
        set o6(a) {
            let b = this.n0;
            this.n0 = a;
            if (b != this.n0) {
                this.md("BorderTypeUnderlineRippleColor", b, a);
            }
        }
        get o4() {
            return this.ny;
        }
        set o4(a) {
            let b = this.ny;
            this.oa = a;
            if (b != this.ny) {
                this.md("BorderTypeHoverUnderlineColor", b, a);
            }
        }
        get o3() {
            return this.nx;
        }
        set o3(a) {
            let b = this.nx;
            this.nx = a;
            if (b != this.nx) {
                this.md("BorderTypeFocusUnderlineColor", b, a);
            }
        }
        get cq() {
            return this.a2;
        }
        set cq(a) {
            let b = this.a2;
            this.a2 = a;
            if (b != this.a2) {
                this.md("BorderTypeUnderlineOpacity", b, a);
            }
        }
        get co() {
            return this.a0;
        }
        set co(a) {
            let b = this.a0;
            this.a0 = a;
            if (b != this.a0) {
                this.md("BorderTypeHoverUnderlineOpacity", b, a);
            }
        }
        get cm() {
            return this.ay;
        }
        set cm(a) {
            let b = this.ay;
            this.ay = a;
            if (b != this.ay) {
                this.md("BorderTypeFocusUnderlineOpacity", b, a);
            }
        }
        get cn() {
            return this.az;
        }
        set cn(a) {
            let b = this.az;
            this.az = a;
            if (b != this.az) {
                this.md("BorderTypeFocusUnderlineRippleOpacity", b, a);
            }
        }
        get cr() {
            return this.a3;
        }
        set cr(a) {
            let b = this.a3;
            this.a3 = a;
            if (b != this.a3) {
                this.md("BorderTypeUnderlineRippleOpacity", b, a);
            }
        }
        get o0() {
            return this.nu;
        }
        set o0(a) {
            let b = this.nu;
            this.nu = a;
            if (b != this.nu) {
                this.md("BorderTypeBackgroundColor", b, a);
            }
        }
        get hr() {
            return this.bw;
        }
        set hr(a) {
            let b = this.bw;
            this.bw = a;
            if (b != this.bw) {
                this.md("SearchTypeBorderWidth", b, a);
            }
        }
        get hs() {
            return this.bx;
        }
        set hs(a) {
            let b = this.bx;
            this.bx = a;
            if (b != this.bx) {
                this.md("SearchTypeFocusBorderWidth", b, a);
            }
        }
        get s2() {
            return this.ok;
        }
        set s2(a) {
            let b = this.ok;
            this.ok = a;
            if (b != this.ok) {
                this.md("SearchTypeFocusBorderColor", b, a);
            }
        }
        get s1() {
            return this.oj;
        }
        set s1(a) {
            let b = this.oj;
            this.oj = a;
            if (b != this.oj) {
                this.md("SearchTypeBorderColor", b, a);
            }
        }
        get nk() {
            return this.my;
        }
        set nk(a) {
            let b = this.my;
            this.my = a;
            if (b != this.my) {
                this.md("SearchTypeCornerRadius", b, a);
            }
        }
        get t0() {
            return this.te;
        }
        set t0(a) {
            let b = this.te;
            this.te = a;
            if (b != this.te) {
                this.md("SearchTypeContentPadding", b, a);
            }
        }
        get h0() {
            return this.b5;
        }
        set h0(a) {
            let b = this.b5;
            this.b5 = a;
            if (b != this.b5) {
                this.md("SearchTypeUnderlineWidth", b, a);
            }
        }
        get hz() {
            return this.b4;
        }
        set hz(a) {
            let b = this.b4;
            this.b4 = a;
            if (b != this.b4) {
                this.md("SearchTypeUnderlineRippleWidth", b, a);
            }
        }
        get hw() {
            return this.b1;
        }
        set hw(a) {
            let b = this.b1;
            this.b1 = a;
            if (b != this.b1) {
                this.md("SearchTypeHoverUnderlineWidth", b, a);
            }
        }
        get s5() {
            return this.on;
        }
        set s5(a) {
            let b = this.on;
            this.on = a;
            if (b != this.on) {
                this.md("SearchTypeUnderlineColor", b, a);
            }
        }
        get s6() {
            return this.oo;
        }
        set s6(a) {
            let b = this.oo;
            this.oo = a;
            if (b != this.oo) {
                this.md("SearchTypeUnderlineRippleColor", b, a);
            }
        }
        get s4() {
            return this.om;
        }
        set s4(a) {
            let b = this.om;
            this.oa = a;
            if (b != this.om) {
                this.md("SearchTypeHoverUnderlineColor", b, a);
            }
        }
        get s3() {
            return this.ol;
        }
        set s3(a) {
            let b = this.ol;
            this.ol = a;
            if (b != this.ol) {
                this.md("SearchTypeFocusUnderlineColor", b, a);
            }
        }
        get hx() {
            return this.b2;
        }
        set hx(a) {
            let b = this.b2;
            this.b2 = a;
            if (b != this.b2) {
                this.md("SearchTypeUnderlineOpacity", b, a);
            }
        }
        get hv() {
            return this.b0;
        }
        set hv(a) {
            let b = this.b0;
            this.b0 = a;
            if (b != this.b0) {
                this.md("SearchTypeHoverUnderlineOpacity", b, a);
            }
        }
        get ht() {
            return this.by;
        }
        set ht(a) {
            let b = this.by;
            this.by = a;
            if (b != this.by) {
                this.md("SearchTypeFocusUnderlineOpacity", b, a);
            }
        }
        get hu() {
            return this.bz;
        }
        set hu(a) {
            let b = this.bz;
            this.bz = a;
            if (b != this.bz) {
                this.md("SearchTypeFocusUnderlineRippleOpacity", b, a);
            }
        }
        get hy() {
            return this.b3;
        }
        set hy(a) {
            let b = this.b3;
            this.b3 = a;
            if (b != this.b3) {
                this.md("SearchTypeUnderlineRippleOpacity", b, a);
            }
        }
        get s0() {
            return this.oi;
        }
        set s0(a) {
            let b = this.oi;
            this.oi = a;
            if (b != this.oi) {
                this.md("SearchTypeBackgroundColor", b, a);
            }
        }
        get ah() {
            return this.x;
        }
        set ah(a) {
            let b = this.x;
            this.x = a;
            if (b != this.x) {
                this.md("IsExpanded", b, a);
            }
        }
        mj() {
            this.x = false;
            this.t = false;
            this.ms();
        }
        get aj() {
            return this.z;
        }
        set aj(a) {
            let b = this.z;
            this.z = a;
            if (b != this.z) {
                this.md("IsHovered", b, a);
            }
        }
        get ai() {
            return this.y;
        }
        set ai(a) {
            let b = this.y;
            this.y = a;
            if (b != this.y) {
                this.md("IsFocused", b, a);
            }
        }
        get ac() {
            return this.r;
        }
        set ac(a) {
            let b = this.r;
            this.r = a;
            if (b != this.r) {
                this.md("ActualIsExpanded", b, a);
            }
        }
        get sq() {
            return this.n8;
        }
        set sq(a) {
            let b = this.n8;
            this.n8 = a;
            if (b != this.n8) {
                this.md("FocusBorderColor", b, a);
            }
        }
        get ki() {
            return this.ib;
        }
        set ki(a) {
            let b = this.ib;
            this.ib = a;
            if (b != this.ib) {
                this.md("Id", b, a);
            }
        }
        get disabled() {
            return this.w;
        }
        set disabled(a) {
            let b = this.w;
            this.w = a;
            if (b != this.w) {
                this.md("IsDisabled", b, a);
            }
        }
        me() {
        }
        onDetachedFromUI() {
            this.view.ae();
        }
        onAttachedToUI() {
            this.view.ac();
        }
        ak() {
            return this.view.g();
        }
        ia() {
            return this.i();
        }
        j9() {
            let a = this.i();
            return a.y();
        }
        i() {
            let a = new InputGroupVisualModelExport();
            a.f = this.g;
            a.e = this.d;
            a.b = AppearanceHelper.a(this.os);
            a.o = this.ca;
            a.p = this.cb;
            a.z = this.mz;
            a.aa = this.tf;
            a.x = this.cj;
            a.w = this.ci;
            a.t = this.cf;
            a.c = AppearanceHelper.a(this.ow);
            a.d = AppearanceHelper.a(this.ox);
            a.u = this.cg;
            a.s = this.ce;
            a.q = this.cc;
            a.r = this.cd;
            a.v = this.ch;
            a.a = AppearanceHelper.a(this.or);
            a.g = this.ac;
            a.j = this.aj;
            a.i = this.ai;
            a.h = this.disabled;
            a.m = new List$1(PrefixVisualModelExport.$, 0);
            a.l = new List$1(LabelVisualModelExport.$, 0);
            a.k = new List$1(InputVisualModelExport.$, 0);
            a.n = new List$1(SuffixVisualModelExport.$, 0);
            for (let b = 0; b < this.inputs.count; b++) {
                if (typeCast(Prefix.$, this.inputs._inner[b]) !== null) {
                    if (this.inputs._inner[b].e == null) {
                        this.inputs._inner[b].e = "Prefix" + a.m.count.toString();
                    }
                    a.m.add1(this.inputs._inner[b].t());
                }
                else if (typeCast(Label.$, this.inputs._inner[b]) !== null) {
                    if (this.inputs._inner[b].e == null) {
                        this.inputs._inner[b].e = "Label" + a.l.count.toString();
                    }
                    a.l.add1(this.inputs._inner[b].au());
                }
                else if (typeCast(Input.$, this.inputs._inner[b]) !== null) {
                    if (this.inputs._inner[b].e == null) {
                        this.inputs._inner[b].e = "Input" + a.k.count.toString();
                    }
                    a.k.add1(this.inputs._inner[b].ba());
                }
                else if (typeCast(Suffix.$, this.inputs._inner[b]) !== null) {
                    if (this.inputs._inner[b].e == null) {
                        this.inputs._inner[b].e = "Suffix" + a.n.count.toString();
                    }
                    a.n.add1(this.inputs._inner[b].t());
                }
            }
            return a;
        }
        provideContainer(a) {
            this.view.ad(a);
        }
        get inputs() {
            return this.l;
        }
        get h7() {
            if (!this.h9.hasValue) {
                let a = 0;
                this.l3((b) => a++);
                this.h9 = toNullable(Number_$type, a);
            }
            return this.h9.value;
        }
        mk() {
            this.h9 = toNullable(Number_$type, null);
        }
        get ae() {
            return this.h7 > 0;
        }
        get al() {
            return !this.ae || this.ac;
        }
    }
    InputGroup.$t = /*@__PURE__*/ markType(InputGroup, 'InputGroup', Base.$, [INotifyPropertyChanged_$type]);
    InputGroup.c = 2;
    InputGroup.fu = 0;
    InputGroup.f5 = 0;
    InputGroup.nf = /*@__PURE__*/ new CornerRadius(1, 0, 0, 0, 0);
    InputGroup.tv = /*@__PURE__*/ new Thickness(1, 0, 0, 0, 0);
    InputGroup.rd = /*@__PURE__*/ BrushUtil.g(138, 0, 0, 0);
    InputGroup.ru = /*@__PURE__*/ BrushUtil.g(255, 0, 153, 155);
    InputGroup.rv = /*@__PURE__*/ BrushUtil.g(255, 0, 153, 155);
    InputGroup.gx = 1;
    InputGroup.gw = 2;
    InputGroup.f9 = 2;
    InputGroup.se = /*@__PURE__*/ BrushUtil.g(138, 0, 0, 0);
    InputGroup.sf = /*@__PURE__*/ BrushUtil.g(255, 0, 153, 155);
    InputGroup.rx = /*@__PURE__*/ BrushUtil.g(138, 0, 0, 0);
    InputGroup.rw = /*@__PURE__*/ BrushUtil.g(255, 0, 153, 155);
    InputGroup.gu = 1;
    InputGroup.f8 = 1;
    InputGroup.f6 = 1;
    InputGroup.f7 = 1;
    InputGroup.gv = 0;
    InputGroup.rc = /*@__PURE__*/ BrushUtil.g(0, 0, 0, 0);
    InputGroup.ga = 0;
    InputGroup.gb = 0;
    InputGroup.ng = /*@__PURE__*/ new CornerRadius(1, 0, 0, 0, 0);
    InputGroup.tw = /*@__PURE__*/ new Thickness(1, 0, 0, 0, 0);
    InputGroup.rz = /*@__PURE__*/ BrushUtil.g(138, 0, 0, 0);
    InputGroup.r0 = /*@__PURE__*/ BrushUtil.g(255, 0, 153, 155);
    InputGroup.r1 = /*@__PURE__*/ BrushUtil.g(255, 0, 153, 155);
    InputGroup.gj = 1;
    InputGroup.gi = 2;
    InputGroup.gf = 2;
    InputGroup.r4 = /*@__PURE__*/ BrushUtil.g(138, 0, 0, 0);
    InputGroup.r5 = /*@__PURE__*/ BrushUtil.g(255, 0, 153, 155);
    InputGroup.r3 = /*@__PURE__*/ BrushUtil.g(138, 0, 0, 0);
    InputGroup.r2 = /*@__PURE__*/ BrushUtil.g(255, 0, 153, 155);
    InputGroup.gg = 1;
    InputGroup.ge = 1;
    InputGroup.gc = 1;
    InputGroup.gd = 1;
    InputGroup.gh = 0;
    InputGroup.ry = /*@__PURE__*/ BrushUtil.g(0, 0, 0, 0);
    InputGroup.fv = 0;
    InputGroup.fw = 0;
    InputGroup.ne = /*@__PURE__*/ new CornerRadius(1, 4, 4, 0, 0);
    InputGroup.tu = /*@__PURE__*/ new Thickness(1, 16, 0, 16, 0);
    InputGroup.rn = /*@__PURE__*/ BrushUtil.g(138, 0, 0, 0);
    InputGroup.ro = /*@__PURE__*/ BrushUtil.g(255, 0, 153, 155);
    InputGroup.rp = /*@__PURE__*/ BrushUtil.g(255, 0, 153, 155);
    InputGroup.f4 = 1;
    InputGroup.f3 = 2;
    InputGroup.f0 = 2;
    InputGroup.rs = /*@__PURE__*/ BrushUtil.g(138, 0, 0, 0);
    InputGroup.rt = /*@__PURE__*/ BrushUtil.g(255, 0, 153, 155);
    InputGroup.rr = /*@__PURE__*/ BrushUtil.g(138, 0, 0, 0);
    InputGroup.rq = /*@__PURE__*/ BrushUtil.g(255, 0, 153, 155);
    InputGroup.f1 = 1;
    InputGroup.fz = 1;
    InputGroup.fx = 1;
    InputGroup.fy = 1;
    InputGroup.f2 = 0;
    InputGroup.rm = /*@__PURE__*/ BrushUtil.g(20, 0, 0, 0);
    InputGroup.fk = 1;
    InputGroup.fl = 2;
    InputGroup.nd = /*@__PURE__*/ new CornerRadius(1, 4, 4, 4, 4);
    InputGroup.tt = /*@__PURE__*/ new Thickness(1, 16, 0, 16, 0);
    InputGroup.rf = /*@__PURE__*/ BrushUtil.g(138, 0, 0, 0);
    InputGroup.rg = /*@__PURE__*/ BrushUtil.g(255, 0, 153, 155);
    InputGroup.rh = /*@__PURE__*/ BrushUtil.g(255, 0, 153, 155);
    InputGroup.ft = 1;
    InputGroup.fs = 2;
    InputGroup.fp = 2;
    InputGroup.rk = /*@__PURE__*/ BrushUtil.g(138, 0, 0, 0);
    InputGroup.rl = /*@__PURE__*/ BrushUtil.g(255, 0, 153, 155);
    InputGroup.rj = /*@__PURE__*/ BrushUtil.g(138, 0, 0, 0);
    InputGroup.ri = /*@__PURE__*/ BrushUtil.g(255, 0, 153, 155);
    InputGroup.fq = 0;
    InputGroup.fo = 0;
    InputGroup.fm = 0;
    InputGroup.fn = 0;
    InputGroup.fr = 0;
    InputGroup.re = /*@__PURE__*/ BrushUtil.g(0, 0, 0, 0);
    InputGroup.gk = 1;
    InputGroup.gl = 2;
    InputGroup.nh = /*@__PURE__*/ new CornerRadius(1, 4, 4, 4, 4);
    InputGroup.tx = /*@__PURE__*/ new Thickness(1, 16, 0, 16, 0);
    InputGroup.r7 = /*@__PURE__*/ BrushUtil.g(138, 0, 0, 0);
    InputGroup.r8 = /*@__PURE__*/ BrushUtil.g(255, 0, 153, 155);
    InputGroup.r9 = /*@__PURE__*/ BrushUtil.g(255, 0, 153, 155);
    InputGroup.gt = 1;
    InputGroup.gs = 2;
    InputGroup.gp = 2;
    InputGroup.sc = /*@__PURE__*/ BrushUtil.g(138, 0, 0, 0);
    InputGroup.sd = /*@__PURE__*/ BrushUtil.g(255, 0, 153, 155);
    InputGroup.sb = /*@__PURE__*/ BrushUtil.g(138, 0, 0, 0);
    InputGroup.sa = /*@__PURE__*/ BrushUtil.g(255, 0, 153, 155);
    InputGroup.gq = 0;
    InputGroup.go = 0;
    InputGroup.gm = 0;
    InputGroup.gn = 0;
    InputGroup.gr = 0;
    InputGroup.r6 = /*@__PURE__*/ BrushUtil.g(0, 0, 0, 0);
    InputGroup.d1 = 0;
    InputGroup.ec = 0;
    InputGroup.m9 = /*@__PURE__*/ new CornerRadius(1, 0, 0, 0, 0);
    InputGroup.tp = /*@__PURE__*/ new Thickness(1, 0, 0, 0, 0);
    InputGroup.px = /*@__PURE__*/ BrushUtil.g(255, 186, 191, 199);
    InputGroup.qe = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    InputGroup.qf = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    InputGroup.e4 = 1;
    InputGroup.e3 = 2;
    InputGroup.eg = 2;
    InputGroup.qy = /*@__PURE__*/ BrushUtil.g(255, 186, 191, 199);
    InputGroup.qz = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    InputGroup.qh = /*@__PURE__*/ BrushUtil.g(255, 186, 191, 199);
    InputGroup.qg = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    InputGroup.e1 = 1;
    InputGroup.ef = 1;
    InputGroup.ed = 1;
    InputGroup.ee = 1;
    InputGroup.e2 = 0;
    InputGroup.pw = /*@__PURE__*/ BrushUtil.g(0, 0, 0, 0);
    InputGroup.eh = 0;
    InputGroup.ei = 0;
    InputGroup.na = /*@__PURE__*/ new CornerRadius(1, 0, 0, 0, 0);
    InputGroup.tq = /*@__PURE__*/ new Thickness(1, 0, 0, 0, 0);
    InputGroup.qj = /*@__PURE__*/ BrushUtil.g(255, 186, 191, 199);
    InputGroup.qk = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    InputGroup.ql = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    InputGroup.eq = 1;
    InputGroup.ep = 2;
    InputGroup.em = 2;
    InputGroup.qo = /*@__PURE__*/ BrushUtil.g(255, 186, 191, 199);
    InputGroup.qp = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    InputGroup.qn = /*@__PURE__*/ BrushUtil.g(255, 186, 191, 199);
    InputGroup.qm = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    InputGroup.en = 1;
    InputGroup.el = 1;
    InputGroup.ej = 1;
    InputGroup.ek = 1;
    InputGroup.eo = 0;
    InputGroup.qi = /*@__PURE__*/ BrushUtil.g(0, 0, 0, 0);
    InputGroup.d2 = 0;
    InputGroup.d3 = 0;
    InputGroup.m8 = /*@__PURE__*/ new CornerRadius(1, 4, 4, 0, 0);
    InputGroup.to = /*@__PURE__*/ new Thickness(1, 16, 0, 16, 0);
    InputGroup.p7 = /*@__PURE__*/ BrushUtil.g(255, 186, 191, 199);
    InputGroup.p8 = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    InputGroup.p9 = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    InputGroup.eb = 1;
    InputGroup.ea = 2;
    InputGroup.d7 = 2;
    InputGroup.qc = /*@__PURE__*/ BrushUtil.g(255, 186, 191, 199);
    InputGroup.qd = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    InputGroup.qb = /*@__PURE__*/ BrushUtil.g(255, 186, 191, 199);
    InputGroup.qa = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    InputGroup.d8 = 1;
    InputGroup.d6 = 1;
    InputGroup.d4 = 1;
    InputGroup.d5 = 1;
    InputGroup.d9 = 0;
    InputGroup.p6 = /*@__PURE__*/ BrushUtil.g(20, 0, 0, 0);
    InputGroup.dr = 1;
    InputGroup.ds = 2;
    InputGroup.m7 = /*@__PURE__*/ new CornerRadius(1, 4, 4, 4, 4);
    InputGroup.tn = /*@__PURE__*/ new Thickness(1, 16, 0, 16, 0);
    InputGroup.pz = /*@__PURE__*/ BrushUtil.g(255, 186, 191, 199);
    InputGroup.p0 = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    InputGroup.p1 = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    InputGroup.d0 = 1;
    InputGroup.dz = 2;
    InputGroup.dw = 2;
    InputGroup.p4 = /*@__PURE__*/ BrushUtil.g(255, 186, 191, 199);
    InputGroup.p5 = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    InputGroup.p3 = /*@__PURE__*/ BrushUtil.g(255, 186, 191, 199);
    InputGroup.p2 = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    InputGroup.dx = 0;
    InputGroup.dv = 0;
    InputGroup.dt = 0;
    InputGroup.du = 0;
    InputGroup.dy = 0;
    InputGroup.py = /*@__PURE__*/ BrushUtil.g(0, 0, 0, 0);
    InputGroup.er = 1;
    InputGroup.es = 2;
    InputGroup.nb = /*@__PURE__*/ new CornerRadius(1, 4, 4, 4, 4);
    InputGroup.tr = /*@__PURE__*/ new Thickness(1, 16, 0, 16, 0);
    InputGroup.qr = /*@__PURE__*/ BrushUtil.g(255, 186, 191, 199);
    InputGroup.qs = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    InputGroup.qt = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    InputGroup.e0 = 1;
    InputGroup.ez = 2;
    InputGroup.ew = 2;
    InputGroup.qw = /*@__PURE__*/ BrushUtil.g(255, 186, 191, 199);
    InputGroup.qx = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    InputGroup.qv = /*@__PURE__*/ BrushUtil.g(255, 186, 191, 199);
    InputGroup.qu = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    InputGroup.ex = 0;
    InputGroup.ev = 0;
    InputGroup.et = 0;
    InputGroup.eu = 0;
    InputGroup.ey = 0;
    InputGroup.qq = /*@__PURE__*/ BrushUtil.g(0, 0, 0, 0);
    InputGroup.h8 = 0;
    return InputGroup;
})();
/**
 * @hidden
 */
let InputGroupInputCollection = /*@__PURE__*/ (() => {
    class InputGroupInputCollection extends ObservableCollection$1 {
        constructor() {
            super(InputGroupItem.$, 0);
            this.collectionResetting = null;
        }
        p() {
            if (this.collectionResetting != null) {
                this.collectionResetting(this, null);
            }
            super.p();
        }
    }
    InputGroupInputCollection.$t = /*@__PURE__*/ markType(InputGroupInputCollection, 'InputGroupInputCollection', /*@__PURE__*/ ObservableCollection$1.$.specialize(InputGroupItem.$));
    return InputGroupInputCollection;
})();
/**
 * @hidden
 */
let Label = /*@__PURE__*/ (() => {
    class Label extends InputGroupItem {
        constructor() {
            super();
            this.j = 0;
            this._view = null;
            this.aa = null;
            this.z = null;
            this.n = 0;
            this.m = 1;
            this.co = ThemeResolver.e(Label.k, Label.c7, Label.c0);
            this.cl = ThemeResolver.e(Label.k, Label.c4, Label.cx);
            this.cm = ThemeResolver.e(Label.k, Label.c5, Label.cy);
            this.cn = ThemeResolver.e(Label.k, Label.c6, Label.cz);
            this.u = null;
            this.cs = Label.c8;
            this.cp = Label.c1;
            this.cq = Label.c2;
            this.r = 0;
            this.af = false;
            this.ad = false;
            this.v = null;
            this.cr = null;
            this.a1 = "ig-label-" + Label.at++;
            this.ax = "inline-block";
            this.ay = "inline-block";
            this.az = null;
            this.av = "center";
            this.ar = 0;
            this.ab = false;
            this.a0 = null;
            this.aw = null;
            this.a2 = null;
            this.ae = false;
            this.ai = false;
            this.ac = false;
            this.ah = false;
            this.ag = false;
            this.ap = false;
            let a = new LabelView();
            a.b = this;
            this.view = a;
            this.view.y();
        }
        get l() {
            return this.j;
        }
        set l(a) {
            let b = this.j;
            this.j = a;
            if (b != this.j) {
                this.g("BaseTheme", enumGetBox(BaseControlTheme_$type, b), enumGetBox(BaseControlTheme_$type, a));
            }
        }
        get view() {
            return this._view;
        }
        set view(a) {
            this._view = a;
        }
        destroy() {
            this.provideContainer(null);
        }
        get i() {
            let a = new AnimationKeyFrameEffectTiming();
            a.g = 300;
            a.b = 0;
            return a;
        }
        b5() {
            this.view.q();
            let a = false;
            if (this.aa == null) {
                let b = new TransformGroup();
                b.j.add(((() => {
                    let $ret = new TranslateTransform();
                    $ret.k = this.s == 0 ? (this.view.h() * 0.5) : 0;
                    return $ret;
                })()));
                b.j.add(((() => {
                    let $ret = new ScaleTransform();
                    $ret.l = 1;
                    $ret.m = 1;
                    return $ret;
                })()));
                let c = -(this.view.h() * 1.3);
                if (this.o == 2) {
                    c = -(this.view.h() * 1.05);
                }
                if (this.o == 3) {
                    c = -(this.view.h() * 1.01);
                }
                let d = new TransformGroup();
                d.j.add(((() => {
                    let $ret = new TranslateTransform();
                    $ret.k = this.s == 2 ? c : -(this.view.h() * 0.5);
                    return $ret;
                })()));
                d.j.add(((() => {
                    let $ret = new ScaleTransform();
                    $ret.l = 0.75;
                    $ret.m = 0.75;
                    return $ret;
                })()));
                this.aa = KeyFrameAnimationFactory.f.c(this.view.a(this.i).m(new AnimationKeyFrameProperty(14, b), new AnimationKeyFrameProperty(2, BrushUtil.g(0, 255, 255, 255))).m(new AnimationKeyFrameProperty(14, d), new AnimationKeyFrameProperty(2, BrushUtil.g(this.s == 2 ? 255 : 0, 255, 255, 255))));
            }
            if (this.z == null) {
                this.z = KeyFrameAnimationFactory.f.c(this.view.a(this.i).m(new AnimationKeyFrameProperty(7, this.cw)).m(new AnimationKeyFrameProperty(7, this.ct)));
            }
        }
        cf(a, b) {
            if ((b > 0 && a.playbackRate < 0) || (b < 0 && a.playbackRate > 0)) {
                a.reverse();
                if (this.ap) {
                    a.finish();
                    this.b6(a);
                    return;
                }
                a.finished.f((c) => this.b6(a));
            }
            else {
                a.play();
                if (this.ap) {
                    a.finish();
                    this.b6(a);
                    return;
                }
                a.finished.f((c) => this.b6(a));
            }
        }
        b6(a) {
            a.commitStyles();
            if (a == this.aa && this.ah) {
                this.aa = null;
            }
            if (a == this.z && this.ag) {
                this.z = null;
            }
        }
        h(a, b, c) {
            super.h(a, b, c);
            switch (a) {
                case "BaseTheme":
                    this.ci(this.l);
                    this.ck();
                    break;
                case "TextColor":
                case "HoverTextColor":
                case "TextStyle":
                case "HighlightTextColor":
                case "HoverHighlightTextColor":
                    this.ck();
                    break;
                case "ActualTextColor":
                case "ActualHoverTextColor":
                case "ActualTextStyle":
                case "ActualHighlightTextColor":
                case "ActualHoverHighlightTextColor":
                    if (this.aa != null) {
                        if (this.aa.playState == 3) {
                            this.aa = null;
                        }
                        else {
                            this.ah = true;
                        }
                    }
                    if (this.z != null) {
                        if (this.z.playState == 3) {
                            this.z = null;
                        }
                        else {
                            this.ag = true;
                        }
                    }
                    this.cj();
                    break;
                case "Text":
                    this.view.ab();
                    break;
                case "Density":
                    this.o = this.p == 0 ? 1 : this.p;
                    break;
                case "ActualDensity":
                    this.view.ad();
                    this.view.ac();
                    break;
                case "InputGroup":
                    this.view.ac();
                    break;
                case "IsHighlighted":
                    this.b9();
                    break;
                case "IsShifted":
                    this.ca();
                    break;
                case "ShiftType":
                    if (this.aa != null) {
                        if (this.aa.playState == 3) {
                            this.aa = null;
                        }
                        else {
                            this.ah = true;
                        }
                    }
                    this.cd();
                    break;
                case "Display":
                    this.view.v();
                    break;
                case "FlexDirection":
                    this.view.w();
                    break;
                case "FlexGrow":
                    this.view.x();
                    break;
                case "AlignItems":
                    this.view.r();
                    break;
            }
        }
        cd() {
            this.view.ac();
        }
        ca() {
            this.b5();
            let a = 1;
            let b = this.an;
            if (!b) {
                a = -1;
            }
            this.cf(this.aa, a);
        }
        b9() {
            this.b5();
            let a = 1;
            let b = this.al;
            if (!b) {
                a = -1;
            }
            this.cf(this.z, a);
        }
        ck() {
            this.cw = this.dc != null ? this.dc : Label.c8;
            this.cv = this.db != null ? this.db : Label.c8;
            this.ct = this.c9 != null ? this.c9 : Label.c1;
            this.w = this.y != null ? this.y : Label.x;
        }
        cj() {
            if (this.w != null) {
                this.view.af(this.w);
            }
            this.view.aa(this.cw);
        }
        ci(a) {
            Label.c8 = ThemeResolver.e(a, Label.c7, Label.c0);
            Label.c1 = ThemeResolver.e(a, Label.c4, Label.cx);
            Label.c3 = ThemeResolver.e(a, Label.c6, Label.cz);
            Label.c2 = ThemeResolver.e(a, Label.c5, Label.cy);
        }
        get p() {
            return this.n;
        }
        set p(a) {
            let b = this.n;
            this.n = a;
            if (b != this.n) {
                this.g("Density", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, a));
            }
        }
        get o() {
            return this.m;
        }
        set o(a) {
            let b = this.m;
            this.m = a;
            if (b != this.m) {
                this.g("ActualDensity", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, a));
            }
        }
        get cw() {
            return this.co;
        }
        set cw(a) {
            let b = this.co;
            this.co = a;
            if (b != this.co) {
                this.g("ActualTextColor", b, a);
            }
        }
        get ct() {
            return this.cl;
        }
        set ct(a) {
            let b = this.cl;
            this.cl = a;
            if (b != this.cl) {
                this.g("ActualHighlightTextColor", b, a);
            }
        }
        get cu() {
            return this.cm;
        }
        set cu(a) {
            let b = this.cm;
            this.cm = a;
            if (b != this.cm) {
                this.g("ActualHoverHighlightTextColor", b, a);
            }
        }
        get cv() {
            return this.cn;
        }
        set cv(a) {
            let b = this.cn;
            this.cn = a;
            if (b != this.cn) {
                this.g("ActualHoverTextColor", b, a);
            }
        }
        get w() {
            return this.u;
        }
        set w(a) {
            let b = this.u;
            this.u = a;
            if (b != this.u) {
                this.g("ActualTextStyle", b, a);
            }
        }
        get dc() {
            return this.cs;
        }
        set dc(a) {
            let b = this.cs;
            this.cs = a;
            if (b != this.cs) {
                this.g("TextColor", b, a);
            }
        }
        get c9() {
            return this.cp;
        }
        set c9(a) {
            let b = this.cp;
            this.cp = a;
            if (b != this.cp) {
                this.g("HighlightTextColor", b, a);
            }
        }
        get da() {
            return this.cq;
        }
        set da(a) {
            let b = this.cq;
            this.cq = a;
            if (b != this.cq) {
                this.g("HoverHighlightTextColor", b, a);
            }
        }
        get s() {
            return this.r;
        }
        set s(a) {
            let b = this.r;
            this.r = a;
            if (b != this.r) {
                this.g("ShiftType", enumGetBox(LabelShiftType_$type, b), enumGetBox(LabelShiftType_$type, a));
            }
        }
        get an() {
            return this.af;
        }
        set an(a) {
            let b = this.af;
            this.af = a;
            if (b != this.af) {
                this.g("IsShifted", b, a);
            }
        }
        ch(a, b = true) {
            let c = this.ap;
            if (!b) {
                this.ap = true;
            }
            try {
                this.an = a;
            }
            finally {
                if (!b) {
                    this.ap = c;
                }
            }
        }
        get al() {
            return this.ad;
        }
        set al(a) {
            let b = this.ad;
            this.ad = a;
            if (b != this.ad) {
                this.g("IsHighlighted", b, a);
            }
        }
        cb() {
            this.am = true;
        }
        cc() {
            this.am = false;
        }
        get y() {
            return this.v;
        }
        set y(a) {
            let b = this.v;
            this.v = a;
            if (b != this.v) {
                this.g("TextStyle", b, a);
            }
        }
        get db() {
            return this.cr;
        }
        set db(a) {
            let b = this.cr;
            this.cr = a;
            if (b != this.cr) {
                this.g("HoverTextColor", b, a);
            }
        }
        get br() {
            return this.a1;
        }
        set br(a) {
            let b = this.a1;
            this.a1 = a;
            if (b != this.a1) {
                this.g("Id", b, a);
            }
        }
        get bf() {
            return this.ax;
        }
        set bf(a) {
            let b = this.ax;
            this.ax = a;
            if (b != this.ax) {
                this.g("Display", b, a);
            }
        }
        get bi() {
            return this.ay;
        }
        set bi(a) {
            let b = this.ay;
            this.ay = a;
            if (b != this.ay) {
                this.g("FlexDirection", b, a);
            }
        }
        get bk() {
            return this.az;
        }
        set bk(a) {
            let b = this.az;
            this.az = a;
            if (b != this.az) {
                this.g("FlexGrow", b, a);
            }
        }
        get a9() {
            return this.av;
        }
        set a9(a) {
            let b = this.av;
            this.av = a;
            if (b != this.av) {
                this.g("AlignItems", b, a);
            }
        }
        get aj() {
            return this.ab;
        }
        get as() {
            return this.ar;
        }
        set as(a) {
            let b = this.ar;
            this.ar = a;
            this.ab = true;
            if (b != this.ar) {
                this.g("TabIndex", b, a);
            }
        }
        get bm() {
            return this.a0;
        }
        set bm(a) {
            let b = this.a0;
            this.a0 = a;
            if (b != this.a0) {
                this.g("TabIndex", b, a);
            }
        }
        get bb() {
            return this.aw;
        }
        set bb(a) {
            let b = this.aw;
            this.aw = a;
            if (b != this.aw) {
                this.g("AriaLabel", b, a);
            }
        }
        get text() {
            return this.a2;
        }
        set text(a) {
            let b = this.a2;
            this.a2 = a;
            if (b != this.a2) {
                this.g("Text", b, a);
            }
        }
        get am() {
            return this.ae;
        }
        set am(a) {
            let b = this.ae;
            this.ae = a;
            if (b != this.ae) {
                this.g("IsHover", b, a);
            }
        }
        get aq() {
            return this.ai;
        }
        set aq(a) {
            let b = this.ai;
            this.ai = a;
            if (b != this.ai) {
                this.g("Value", b, a);
            }
        }
        get disabled() {
            return this.ac;
        }
        set disabled(a) {
            let b = this.ac;
            this.ac = a;
            if (b != this.ac) {
                this.g("IsDisabled", b, a);
            }
        }
        ce() {
            this.view.ab();
        }
        onDetachedFromUI() {
            this.view.u();
        }
        onAttachedToUI() {
            this.view.s();
        }
        ao() {
            return this.view.e();
        }
        au() {
            return this.q();
        }
        bh() {
            let a = this.q();
            return a.r();
        }
        q() {
            let a = new LabelVisualModelExport();
            a.c = this.l;
            a.e = this.p;
            a.d = this.o;
            a.b = AppearanceHelper.a(this.cw);
            a.a = AppearanceHelper.a(this.ct);
            a.f = this.s;
            a.j = this.an;
            a.h = this.al;
            a.n = this.bf;
            a.o = this.bi;
            a.p = this.bk;
            a.m = this.a9;
            a.s = this.text;
            a.i = this.am;
            a.k = this.aq;
            a.g = this.disabled;
            a.q = this.e;
            if (this.w != null) {
                let b = this.w;
                if (this.view != null && b.n == null) {
                    let c = this.view.i;
                    let d = FontUtil.getFontInfoFromString(c, b.fontString);
                    b.n = d.n;
                    b.d = d.d;
                    b.o = d.o;
                    b.q = d.q;
                    b.r = d.r;
                    b.s = d.s;
                }
                if (b.n != null) {
                    a.t = b.n;
                }
                if (!isNaN_(b.d)) {
                    a.l = b.d;
                }
                if (b.s != null) {
                    a.x = b.s;
                }
                if (b.q != null) {
                    a.v = b.q;
                }
                if (b.o != null) {
                    a.u = b.q;
                }
            }
            return a;
        }
        provideContainer(a) {
            this.view.t(a);
        }
    }
    Label.$t = /*@__PURE__*/ markType(Label, 'Label', InputGroupItem.$);
    Label.c7 = /*@__PURE__*/ BrushUtil.g(221, 0, 0, 0);
    Label.c4 = /*@__PURE__*/ BrushUtil.g(255, 0, 153, 155);
    Label.c6 = /*@__PURE__*/ BrushUtil.g(221, 0, 0, 0);
    Label.c5 = /*@__PURE__*/ BrushUtil.g(255, 0, 153, 155);
    Label.c0 = /*@__PURE__*/ BrushUtil.g(255, 24, 29, 31);
    Label.cx = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    Label.cz = /*@__PURE__*/ BrushUtil.g(255, 24, 29, 31);
    Label.cy = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    Label.k = 2;
    Label.c8 = /*@__PURE__*/ ThemeResolver.e(Label.k, Label.c7, Label.c0);
    Label.c1 = /*@__PURE__*/ ThemeResolver.e(Label.k, Label.c4, Label.cx);
    Label.c3 = /*@__PURE__*/ ThemeResolver.e(Label.k, Label.c6, Label.cz);
    Label.c2 = /*@__PURE__*/ ThemeResolver.e(Label.k, Label.c5, Label.cy);
    Label.x = null;
    Label.at = 0;
    return Label;
})();
/**
 * @hidden
 */
let Input = /*@__PURE__*/ (() => {
    class Input extends InputGroupItem {
        constructor() {
            super();
            this.x = null;
            this.a1 = 0;
            this.a2 = 0;
            this.t = 0;
            this.bi = "";
            this.bc = "";
            this.ae = false;
            this.bd = null;
            this.af = false;
            this.am = false;
            this._view = null;
            this.q = 0;
            this.k = 1;
            this.j = 1;
            this.bh = null;
            this.bk = "_";
            this.ah = false;
            this.dk = Input.dr;
            this.dj = Input.dq;
            this.y = null;
            this.dm = Input.dr;
            this.keyDown = null;
            this.keyUp = null;
            this.keyPress = null;
            this.gotFocus = null;
            this.lostFocus = null;
            this.mouseDown = null;
            this.mouseUp = null;
            this.z = null;
            this.bg = "text";
            this.bj = "text";
            this.dl = null;
            this.bf = "ig-input-" + Input.a9++;
            this.a3 = 0;
            this.ag = false;
            this.be = null;
            this.bb = null;
            this.ak = false;
            this.bl = null;
            this.aj = false;
            this.ai = false;
            this.change = null;
            this.changing = null;
            this.compositionStart = null;
            this.compositionEnd = null;
            this.al = true;
            this.ad = null;
            this.au = false;
            this.x = new MaskParsingService();
            let a = new InputView();
            a.b = this;
            this.view = a;
            this.view.an();
            Input.ab = new FontInfo();
            Input.ab.n = "'Segoe UI', Verdana";
        }
        get view() {
            return this._view;
        }
        set view(a) {
            this._view = a;
        }
        destroy() {
            this.provideContainer(null);
        }
        get r() {
            return this.q;
        }
        set r(a) {
            let b = this.q;
            this.q = a;
            if (b != this.q) {
                this.g("ShiftType", enumGetBox(InputShiftType_$type, b), enumGetBox(InputShiftType_$type, a));
            }
        }
        get m() {
            return this.k;
        }
        set m(a) {
            let b = this.k;
            this.k = a;
            if (b != this.k) {
                this.g("Density", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, a));
            }
        }
        get l() {
            return this.j;
        }
        set l(a) {
            let b = this.j;
            this.j = a;
            if (b != this.j) {
                this.g("ActualDensity", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, a));
            }
        }
        get b5() {
            return this.bh;
        }
        set b5(a) {
            let b = this.bh;
            this.bh = a;
            if (b != this.bh) {
                this.g("Mask", b, a);
            }
        }
        get b9() {
            return this.bk;
        }
        set b9(a) {
            let b = this.bk;
            this.bk = a;
            if (b != this.bk) {
                this.g("PromptChar", b, a);
            }
        }
        get ap() {
            return this.ah;
        }
        set ap(a) {
            let b = this.ah;
            this.ah = a;
            if (b != this.ah) {
                this.g("IncludeLiterals", b, a);
            }
        }
        h(a, b, c) {
            super.h(a, b, c);
            switch (a) {
                case "TextColor":
                case "HoverTextColor":
                case "TextStyle":
                    this.dh();
                    break;
                case "ActualTextColor":
                case "ActualHoverTextColor":
                case "ActualTextStyle":
                    this.dg();
                    break;
                case "Value":
                    if (!this.ai) {
                        this.view.as(this.cf);
                        if (this.b != null) {
                            this.b.ms();
                        }
                        if (this.b5 != null && !this.am) {
                            this.di(this.cf);
                        }
                    }
                    break;
                case "Density":
                    this.l = this.m == 0 ? 1 : this.m;
                    break;
                case "ActualDensity":
                    this.view.ay();
                    this.view.ax();
                    break;
                case "InputGroup":
                    this.cv();
                    break;
                case "ShiftType":
                    this.c6();
                    break;
                case "InputType":
                    this.c7();
                    break;
                case "Placeholder":
                    this.c5();
                    break;
                case "Mask":
                    this.b7 = this.b5;
                    break;
                case "PromptChar": break;
                case "IncludeLiterals": break;
                case "IsShown":
                    this.cw();
                    break;
                case "IsDisabled":
                    this.view.at(this.aj);
                    break;
            }
        }
        c5() {
            this.view.ap();
        }
        c7() {
            this.view.ar();
        }
        c6() {
            this.view.ax();
        }
        cv() {
            this.view.ax();
        }
        dh() {
            this.dp = this.dt != null ? this.dt : Input.dr;
            this.dn = this.ds != null ? this.ds : Input.dr;
            this.aa = this.ac != null ? this.ac : Input.ab;
        }
        dg() {
            if (this.aa != null) {
                this.view.a0(this.aa);
            }
            NativeUI.n(this.view.o, this.dp);
        }
        get dp() {
            return this.dk;
        }
        set dp(a) {
            let b = this.dk;
            this.dk = a;
            if (b != this.dk) {
                this.g("ActualTextColor", b, a);
            }
        }
        get dn() {
            return this.dj;
        }
        set dn(a) {
            let b = this.dj;
            this.dj = a;
            if (b != this.dj) {
                this.g("ActualHoverTextColor", b, a);
            }
        }
        get aa() {
            return this.y;
        }
        set aa(a) {
            let b = this.y;
            this.y = a;
            if (b != this.y) {
                this.g("ActualTextStyle", b, a);
            }
        }
        get dt() {
            return this.dm;
        }
        set dt(a) {
            let b = this.dm;
            this.dm = a;
            if (b != this.dm) {
                this.g("TextColor", b, a);
            }
        }
        cm() {
            if (this.b5 != null) {
                this.de(this.cf);
            }
            if (null != this.lostFocus) {
                this.lostFocus(this, EventArgs.empty);
            }
        }
        cu() {
            if (this.b5 != null) {
                this.df(this.cf);
            }
            if (null != this.gotFocus) {
                this.gotFocus(this, EventArgs.empty);
            }
        }
        cx(a) {
            if (this.b5 != null) {
                let b = a.keyCode;
                if ((b == 17 && b == 90) || (b == 17 && b == 89)) {
                    a.preventDefault();
                }
                this.t = b;
                this.a2 = this.a5();
                this.a1 = this.a4();
            }
            if (null != this.keyDown) {
                this.keyDown(this, a);
            }
        }
        cz(a) {
            if (null != this.keyUp) {
                this.keyUp(this, a);
            }
        }
        cy(a) {
            if (null != this.keyPress) {
                this.keyPress(this, a);
            }
        }
        c0(a) {
            if (null != this.mouseDown) {
                this.mouseDown(this, a);
            }
        }
        c3(a) {
            if (null != this.mouseUp) {
                this.mouseUp(this, a);
            }
        }
        c4() {
            if (this.b5 != null) {
                this.bi = this.cf;
                this.a2 = this.a5();
            }
        }
        cs() {
            if (this.b5 != null) {
                if (!this.ae) {
                    this.df(this.bc);
                }
            }
        }
        ct() {
            if (this.b5 != null) {
                if (!this.ae) {
                    this.de(this.cf);
                }
            }
        }
        cn() {
            this.ai = true;
            this.cf = this.view.q();
            if (this.change != null) {
                this.change(this, ((() => {
                    let $ret = new InputChangeEventArgs();
                    $ret.value = this.cf;
                    $ret.isCompositionInProgress = this.view.e;
                    return $ret;
                })()));
            }
            this.ai = false;
        }
        co() {
            this.ai = true;
            this.cf = this.view.q();
            this.ai = false;
            if (this.b5 != null) {
                this.am = true;
                if (this.af) {
                    this.a2 = this.a5();
                }
                if (this.cf.length < this.bi.length && this.t == 229) {
                    this.t = 8;
                }
                let a = this.a5();
                let b = this.a4();
                let c = "";
                switch (this.t) {
                    case 46:
                        this.a1 = this.a2 == this.a1 ? ++this.a1 : this.a1;
                        break;
                    case 8:
                        this.a2 = this.a5();
                        break;
                    default:
                        c = this.cf.substr(this.a2, this.a4() - this.a2);
                        break;
                }
                let d = new MaskOptions();
                d.a = this.b5;
                d.b = this.b9;
                let e = this.x.a(this.bi, c, d, this.a2, this.a1);
                this.cf = e.b;
                if (this.t == 8) {
                    e.a = this.a2;
                }
                this.dd(e.a, e.a);
                let f = this.x.h(this.cf, d);
                this.bc = this.ap ? this.cf : f;
                this.ch();
                this.am = false;
            }
            this.ai = true;
            if (this.changing != null) {
                this.changing(this, ((() => {
                    let $ret = new InputChangeEventArgs();
                    $ret.value = this.cf;
                    $ret.isCompositionInProgress = this.view.e;
                    return $ret;
                })()));
            }
            this.ai = false;
        }
        cq() {
            if (this.compositionStart != null) {
                this.compositionStart(this, new EventArgs());
            }
        }
        cp() {
            if (this.compositionEnd != null) {
                this.compositionEnd(this, new EventArgs());
            }
        }
        c1() {
            this.ar = true;
        }
        c2() {
            this.ar = false;
        }
        get ac() {
            return this.z;
        }
        set ac(a) {
            let b = this.z;
            this.z = a;
            if (b != this.z) {
                this.g("TextStyle", b, a);
            }
        }
        get b0() {
            return this.bg;
        }
        set b0(a) {
            let b = this.bg;
            this.bg = a;
            if (b != this.bg) {
                this.g("InputType", b, a);
            }
        }
        get b7() {
            return this.bj;
        }
        set b7(a) {
            let b = this.bj;
            this.bj = a;
            if (b != this.bj) {
                this.g("Placeholder", b, a);
            }
        }
        get ds() {
            return this.dl;
        }
        set ds(a) {
            let b = this.dl;
            this.dl = a;
            if (b != this.dl) {
                this.g("HoverTextColor", b, a);
            }
        }
        get bx() {
            return this.bf;
        }
        set bx(a) {
            let b = this.bf;
            this.bf = a;
            if (b != this.bf) {
                this.g("Id", b, a);
            }
        }
        get an() {
            return this.ag;
        }
        get a8() {
            return this.a3;
        }
        set a8(a) {
            let b = this.a3;
            this.a3 = a;
            this.ag = true;
            if (b != this.a3) {
                this.g("TabIndex", b, a);
            }
        }
        get bu() {
            return this.be;
        }
        set bu(a) {
            let b = this.be;
            this.be = a;
            if (b != this.be) {
                this.g("TabIndex", b, a);
            }
        }
        get bq() {
            return this.bb;
        }
        set bq(a) {
            let b = this.bb;
            this.bb = a;
            if (b != this.bb) {
                this.g("AriaLabel", b, a);
            }
        }
        get ar() {
            return this.ak;
        }
        set ar(a) {
            let b = this.ak;
            this.ak = a;
            if (b != this.ak) {
                this.g("IsHover", b, a);
            }
        }
        get cf() {
            return this.bl;
        }
        set cf(a) {
            let b = this.bl;
            this.bl = a;
            if (b != this.bl) {
                this.g("Value", b, a);
            }
        }
        get ao() {
            return !stringIsNullOrEmpty(this.cf);
        }
        get disabled() {
            return this.aj;
        }
        set disabled(a) {
            let b = this.aj;
            this.aj = a;
            if (b != this.aj) {
                this.g("IsDisabled", b, a);
            }
        }
        c8() {
        }
        onDetachedFromUI() {
            this.view.al();
        }
        onAttachedToUI() {
            this.view.aj();
        }
        at() {
            return this.view.f();
        }
        ba() {
            return this.n();
        }
        bt() {
            let a = this.n();
            return a.n();
        }
        n() {
            let a = new InputVisualModelExport();
            a.h = this.view.j.rootWrapper.getNativeElement().offsetTop;
            a.f = this.view.j.rootWrapper.getNativeElement().offsetLeft;
            a.c = this.r;
            a.b = this.l;
            a.j = this.b5;
            a.m = this.b9;
            a.d = this.ap;
            a.a = AppearanceHelper.a(this.dp);
            a.i = this.b0;
            a.l = this.b7;
            a.e = this.ar;
            a.t = this.cf;
            a.k = this.e;
            if (this.aa != null) {
                let b = this.aa;
                if (this.view != null && b.n == null) {
                    let c = this.view.j;
                    let d = FontUtil.getFontInfoFromString(c, b.fontString);
                    b.n = d.n;
                    b.d = d.d;
                    b.o = d.o;
                    b.q = d.q;
                    b.r = d.r;
                    b.s = d.s;
                }
                if (b.n != null) {
                    a.o = b.n;
                }
                if (!isNaN_(b.d)) {
                    a.g = b.d;
                }
                if (b.s != null) {
                    a.s = b.s;
                }
                if (b.q != null) {
                    a.q = b.q;
                }
                if (b.o != null) {
                    a.p = b.q;
                }
            }
            return a;
        }
        provideContainer(a) {
            this.view.ak(a);
        }
        ck() {
            this.cu();
            this.view.am();
        }
        db() {
            this.view.aq();
        }
        dd(a, b) {
            this.view.av(a, b);
        }
        df(a) {
            this.am = true;
            let b = new MaskOptions();
            b.a = this.b5;
            b.b = this.b9;
            this.cf = this.x.g(this.cf, b);
            this.bi = this.cf;
            this.am = false;
        }
        de(a) {
            this.am = true;
            let b = new MaskOptions();
            b.a = this.b5;
            b.b = this.b9;
            if (a == this.x.g(null, b)) {
                this.cf = "";
            }
            this.am = false;
        }
        di(a) {
            let b = new MaskOptions();
            b.a = this.b5;
            b.b = this.b9;
            if (this.b9 != null && this.b9.length > 1) {
                b.b = this.b9.substr(0, 1);
            }
            this.cf = a != null ? this.x.g(a, b) : "";
            this.bc = this.ap ? this.cf : a;
            if (this.changing != null) {
                this.changing(this, ((() => {
                    let $ret = new InputChangeEventArgs();
                    $ret.value = this.cf;
                    $ret.isCompositionInProgress = this.view.e;
                    return $ret;
                })()));
            }
        }
        ch() {
            this.bi = this.cf;
            this.af = false;
            this.a2 = 0;
            this.a1 = 0;
            this.t = 0;
        }
        a5() {
            let a = this.view.n();
            let b = this.view.m();
            return a == b && this.af ? b - this.bd.length : a;
        }
        a4() {
            return this.view.m();
        }
        get selectionStart() {
            return this.a5();
        }
        set selectionStart(a) {
            this.view.aw(a);
        }
        get selectionEnd() {
            return this.a4();
        }
        set selectionEnd(a) {
            this.view.au(a);
        }
        get as() {
            return this.al;
        }
        set as(a) {
            let b = this.al;
            this.al = a;
            if (b != this.al) {
                this.g("IsShown", b, a);
            }
        }
        dc(a, b = true) {
            let c = this.au;
            if (!b) {
                this.au = true;
            }
            try {
                this.as = a;
            }
            finally {
                if (!b) {
                    this.au = c;
                }
            }
        }
        cw() {
            this.cj();
            this.c9(this.ad, this.as);
        }
        cj() {
            this.view.ai();
            if (this.ad == null) {
                this.ad = KeyFrameAnimationFactory.f.c(this.view.a(this.i).m(new AnimationKeyFrameProperty(1, 0)).m(new AnimationKeyFrameProperty(1, 1)));
            }
        }
        get i() {
            let a = new AnimationKeyFrameEffectTiming();
            a.g = 300;
            a.b = 0;
            return a;
        }
        c9(a, b) {
            let c = a.playbackRate < 0;
            if (b != c) {
                a.play();
            }
            else {
                a.reverse();
            }
            if (this.au) {
                a.finish();
                a.commitStyles();
                return;
            }
            a.finished.f((d) => a.commitStyles());
        }
    }
    Input.$t = /*@__PURE__*/ markType(Input, 'Input', InputGroupItem.$);
    Input.dr = /*@__PURE__*/ BrushUtil.g(221, 0, 0, 0);
    Input.dq = /*@__PURE__*/ BrushUtil.g(221, 0, 0, 0);
    Input.ab = null;
    Input.a9 = 0;
    return Input;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let DatePickerVisualModelExport = /*@__PURE__*/ (() => {
    class DatePickerVisualModelExport extends Base {
        constructor() {
            super(...arguments);
            this.b = 0;
            this.a = 0;
            this.j = null;
            this.k = null;
            this.l = null;
            this.f = 0;
            this.h = null;
            this.i = null;
            this.e = null;
            this.d = null;
            this.c = null;
        }
        g() {
            let a = new StringBuilder(0);
            a.l("{");
            a.l("density : " + this.b + ", ");
            a.l("baseTheme : " + this.a + ", ");
            if (!stringIsNullOrEmpty(this.j)) {
                a.l("textStyleFontStyle : \"" + this.j + "\", ");
            }
            if (!stringIsNullOrEmpty(this.k)) {
                a.l("textStyleFontVariant : \"" + this.k + "\", ");
            }
            if (!stringIsNullOrEmpty(this.l)) {
                a.l("textStyleFontWeight : \"" + this.l + "\", ");
            }
            if (!stringIsNullOrEmpty(this.h)) {
                a.l("textStyleFontFamily : \"" + this.h + "\", ");
            }
            if (!stringIsNullOrEmpty(this.i)) {
                a.l("textStyleFontStretch : \"" + this.i + "\", ");
            }
            if (!isNaN_(this.f)) {
                a.l("textStyleFontSize : " + this.f + ", ");
            }
            let b = "popupModel";
            a.l(b + ": " + this.e.f() + ", ");
            let c = "inputGroupModel";
            a.l(c + ": " + this.d.y() + ", ");
            let d = "calendarModel";
            a.l(d + ": " + this.c.l() + ", ");
            a.l("}");
            return a.toString();
        }
    }
    DatePickerVisualModelExport.$t = /*@__PURE__*/ markType(DatePickerVisualModelExport, 'DatePickerVisualModelExport');
    return DatePickerVisualModelExport;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let DatePickerView = /*@__PURE__*/ (() => {
    class DatePickerView extends Base {
        constructor() {
            super();
            this.a = null;
            this.c = null;
            this.f = null;
            this.d = null;
            this.e = null;
        }
        p() {
        }
        o(a) {
            if (a == null) {
                this.c = null;
                return;
            }
            this.c = a;
            let b = Math.round(a.rootWrapper.width());
            let c = Math.round(a.rootWrapper.height());
            this.i();
            this.j();
            let d = this.c.rootWrapper.getChildAt(0);
            d.listen("keydown", runOn(this, this.g));
            document.addEventListener("click", runOn(this, this.k), false);
        }
        i() {
            if (this.c != null) {
                this.f = this.c.rootWrapper.getChildAt(0);
                this.e = this.c.createElement("div");
                let a = this.c.createElement("div");
                this.a.am(this.c, this.f, this.e, a);
                this.e.listen("click", runOn(this, this.h));
                a.listen("click", runOn(this, this.l));
            }
        }
        r() {
            if (this.e != null) {
                if (this.a.q == true) {
                    this.e.show();
                }
                else {
                    this.e.hide();
                }
            }
        }
        m() {
            if (this.e != null) {
                this.e.hide();
            }
        }
        j() {
            if (this.c != null) {
                let a = this.c.rootWrapper.getChildAt(1);
                this.a.an(this.c, a);
            }
        }
        h(a) {
            this.a.ak();
            if (this.e != null) {
                this.e.hide();
            }
        }
        l(a) {
            this.a.aq();
        }
        s() {
            if (this.c != null) {
                let a = this.c.rootWrapper.getNativeElement();
                let b = a.getBoundingClientRect();
                ;
                return b;
            }
            return null;
        }
        g(a) {
            let b = a.which;
            if (a.altKey) {
                if (b == 40) {
                    this.a.au();
                    this.a.ap();
                }
                else if (b == 38) {
                    this.a.al();
                }
            }
            else if (b == 27) {
                this.a.al();
            }
        }
        k(a) {
            let b = a.target;
            if (!this.b(b)) {
                this.a.al();
            }
        }
        b(a) {
            if (null == a) {
                return false;
            }
            let b = this.f.getNativeElement();
            let c = this.d.getNativeElement();
            return b.contains(a) || c.contains(a);
        }
        q(a) {
            this.d = a;
        }
        n() {
        }
    }
    DatePickerView.$t = /*@__PURE__*/ markType(DatePickerView, 'DatePickerView');
    return DatePickerView;
})();
/**
 * @hidden
 */
let DatePicker = /*@__PURE__*/ (() => {
    class DatePicker extends Base {
        constructor() {
            super();
            this.g = null;
            this.m = null;
            this.k = null;
            this.j = null;
            this.h = null;
            this.i = null;
            this.f = null;
            this.propertyChanged = null;
            this.valueChanged = null;
            this.t = toNullable(Date_$type, null);
            this.c = 2;
            this.a = 1;
            this.n = null;
            this.a3 = BrushUtil.g(255, 24, 29, 31);
            this.a2 = BrushUtil.g(255, 163, 172, 184);
            this.p = true;
            let a = new DatePickerView();
            a.a = this;
            this.g = a;
            this.g.p();
        }
        at(a, b) {
            this.t = toNullable(Date_$type, b);
            if (this.m != null) {
                this.al();
            }
            if (this.j != null) {
                if (nullableNotEquals(this.t, null)) {
                    this.j.cf = dateToStringFormat(this.t.value, "MM/dd/yyyy", null);
                    this.g.r();
                }
                else {
                    this.j.cf = "";
                    this.g.m();
                }
            }
            if (this.valueChanged != null) {
                this.valueChanged(this, ((() => {
                    let $ret = new ValueChangedEventArgs();
                    $ret.oldValue = a;
                    $ret.newValue = b;
                    return $ret;
                })()));
            }
        }
        notifySizeChanged() {
            this.g.n();
        }
        destroy() {
            if (this.f != null) {
                let a = this.f;
                a.valueChanged = delegateRemove(a.valueChanged, runOn(this, this.aj));
                let b = this.f;
                b.close = delegateRemove(b.close, runOn(this, this.ai));
            }
            this.provideContainer(null);
        }
        provideContainer(a) {
            this.g.o(a);
        }
        get r() {
            return this.t.value;
        }
        set r(a) {
            let b = this.t;
            this.t = toNullable(Date_$type, a);
            if (nullableNotEquals(b, this.t)) {
                this.as("Value", unwrapNullable(b), unwrapNullable(this.t));
            }
        }
        get d() {
            return this.c;
        }
        set d(a) {
            let b = this.c;
            this.c = a;
            if (b != this.c) {
                this.as("Density", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, this.c));
            }
        }
        get b() {
            return this.a;
        }
        set b(a) {
            let b = this.a;
            this.a = a;
            if (b != this.a) {
                this.as("BaseTheme", enumGetBox(BaseControlTheme_$type, b), enumGetBox(BaseControlTheme_$type, this.a));
            }
        }
        get o() {
            return this.n;
        }
        set o(a) {
            let b = this.n;
            this.n = a;
            if (b != this.n) {
                this.as("TextStyle", b, this.n);
            }
        }
        get a5() {
            return this.a3;
        }
        set a5(a) {
            let b = this.a3;
            this.a3 = a;
            if (b != this.a3) {
                this.as("TextColor", b, this.a3);
            }
        }
        get a4() {
            return this.a2;
        }
        set a4(a) {
            let b = this.a2;
            this.a2 = a;
            if (b != this.a2) {
                this.as("IconColor", b, this.a2);
            }
        }
        get q() {
            return this.p;
        }
        set q(a) {
            let b = this.p;
            this.p = a;
            if (b != this.p) {
                this.as("ShowClearButton", b, this.p);
            }
        }
        as(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            this.av(a, b, c);
        }
        av(a, b, c) {
            switch (a) {
                case "Density":
                    this.ax();
                    break;
                case "BaseTheme":
                    this.ay();
                    break;
                case "Value":
                    if (this.f != null) {
                        this.f.u = this.t.value;
                    }
                    if (this.j != null) {
                        if (nullableNotEquals(this.t, null)) {
                            this.j.cf = dateToStringFormat(this.t.value, "MM/dd/yyyy", null);
                            this.g.r();
                        }
                        else {
                            this.j.cf = "";
                            this.g.m();
                        }
                    }
                    break;
                case "TextStyle":
                    this.a0();
                    break;
                case "ShowClearButton":
                    if (this.j != null) {
                        if (this.j.cf != "") {
                            this.g.r();
                        }
                    }
                    break;
                case "TextColor":
                case "IconColor":
                    this.a1();
                    break;
            }
        }
        a1() {
            if (this.j != null) {
                this.j.dt = this.a5;
            }
            if (this.h != null) {
                this.h.fill = this.a4;
            }
            if (this.i != null) {
                this.i.fill = this.a4;
            }
        }
        az() {
            if (this.k != null) {
            }
        }
        a0() {
            if (this.n != null) {
                this.j.ac = this.n;
            }
        }
        am(a, b, c, d) {
            this.k = new InputGroup();
            let e = a.getSubRenderer(b);
            this.k.provideContainer(e);
            this.k.k = 0;
            this.k.d = this.b;
            this.k.h = this.d;
            let f = a.createElement("div");
            f.setRawStyleProperty("flex-grow", "1");
            let g = a.getSubRenderer(f);
            this.j = new Input();
            this.j.provideContainer(g);
            this.j.b0 = "text";
            if (this.n != null) {
                this.j.ac = this.n;
            }
            this.j.disabled = true;
            this.j.dt = this.a5;
            this.k.appendContentChild(f);
            this.k.inputs.add(this.j);
            let h = a.createElement("div");
            let i = a.getSubRenderer(h);
            let j = new Suffix();
            j.provideContainer(i);
            this.h = new Icon();
            let k = a.getSubRenderer(c);
            this.h.provideContainer(k);
            this.h.svgPath = DatePicker.x;
            this.h.fill = this.a4;
            c.setStyleProperty("height", "16px");
            c.setStyleProperty("width", "16px");
            j.appendContentChild(c);
            this.k.appendContentChild(h);
            this.k.inputs.add(j);
            if (nullableEquals(this.t, null)) {
                c.hide();
            }
            let l = a.createElement("div");
            let m = a.getSubRenderer(l);
            let n = new Suffix();
            n.provideContainer(m);
            let o = a.getSubRenderer(d);
            this.i = new Icon();
            this.i.provideContainer(o);
            this.i.svgPath = DatePicker.w;
            this.i.fill = this.a4;
            d.setStyleProperty("height", "16px");
            d.setStyleProperty("width", "16px");
            n.appendContentChild(d);
            this.k.appendContentChild(l);
            this.k.inputs.add(n);
        }
        ak() {
            let a = toNullable(Date_$type, this.r);
            let b = toNullable(Date_$type, null);
            if (this.j != null) {
                this.j.cf = "";
            }
            this.t = toNullable(Date_$type, null);
            this.f.ax();
            this.at(a.value, b.value);
        }
        an(a, b) {
            this.m = new Popup();
            let c = a.getSubRenderer(b);
            this.m.provideRenderer(c);
            this.f = new Calendar();
            let d = a.createElement("div");
            this.g.q(d);
            d.setStyleProperty("width", "220px");
            d.setStyleProperty("height", "230px");
            let e = a.getSubRenderer(d);
            this.f.provideContainer(e);
            let f = this.f;
            f.valueChanged = delegateCombine(f.valueChanged, runOn(this, this.aj));
            let g = this.f;
            g.close = delegateCombine(g.close, runOn(this, this.ai));
            this.m.appendPopupContent(d);
        }
        aj(a, b) {
            this.at(b.oldValue, b.newValue);
        }
        ai(a) {
            if (this.m.t) {
                this.al();
            }
        }
        aq() {
            if (this.m.t) {
                this.al();
            }
            else {
                this.au();
            }
        }
        au() {
            let a = this.g.s();
            this.m.showRelativeToExclusionRect(a, 0, 0);
        }
        al() {
            this.m.an();
            this.f.a8();
        }
        ap() {
            this.f.a0();
        }
        ay() {
        }
        ax() {
        }
        u() {
            return this.e();
        }
        ac() {
            let a = this.e();
            return a.g();
        }
        e() {
            let a = new DatePickerVisualModelExport();
            a.b = this.d;
            a.a = this.b;
            a.e = this.m.ab();
            a.d = this.k.ia();
            a.c = this.f.x();
            if (this.o != null) {
                let b = this.o;
                if (this.g != null && b.n == null) {
                    let c = this.g.c;
                    let d = FontUtil.getFontInfoFromString(c, b.fontString);
                    b.n = d.n;
                    b.d = d.d;
                    b.o = d.o;
                    b.q = d.q;
                    b.r = d.r;
                    b.s = d.s;
                }
                if (b.n != null) {
                    a.h = b.n;
                }
                if (!isNaN_(b.d)) {
                    a.f = b.d;
                }
                if (b.s != null) {
                    a.l = b.s;
                }
                if (b.q != null) {
                    a.j = b.q;
                }
                if (b.o != null) {
                    a.i = b.q;
                }
            }
            return a;
        }
    }
    DatePicker.$t = /*@__PURE__*/ markType(DatePicker, 'DatePicker', Base.$, [INotifyPropertyChanged_$type]);
    DatePicker.w = "M20 3h-1V1h-2v2H7V1H5v2H4c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 18H4V8h16v13z";
    DatePicker.ab = "M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z";
    DatePicker.y = "M12 8l-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z";
    DatePicker.x = "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z";
    return DatePicker;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

class IgrDatePicker extends Component {
    constructor(props) {
        super(props);
        this._implementation = null;
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        this._valueChanged = null;
        this._valueChanged_wrapped = null;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._getMainRef = this._getMainRef.bind(this);
        this._implementation = this.createImplementation();
        var datePicker = this.i;
        this._datePicker = datePicker;
        datePicker.notifySizeChanged();
        if (props) {
            this.initializeProperties();
        }
    }
    set height(value) {
        this._height = value;
        if (this._elRef) {
            this._elRef.style.height = value;
            this._datePicker.notifySizeChanged();
        }
    }
    get height() {
        return this._height;
    }
    set width(value) {
        this._width = value;
        if (this._elRef) {
            this._elRef.style.height = value;
            this._datePicker.notifySizeChanged();
        }
    }
    get width() {
        return this._width;
    }
    _getMainRef(ref) {
        this._elRef = ref;
        if (this._elRef != null) {
            this._renderer = new ReactRenderer(this._elRef, document, false, null);
            this._datePicker.provideContainer(this._renderer);
        }
    }
    render() {
        let children = [];
        let inputContainer = createElement("div", {
            key: "inputContainer"
        });
        children.push(inputContainer);
        let popupContainer = createElement("div", {
            key: "popupContainer"
        });
        children.push(popupContainer);
        let div = createElement("div", {
            className: "ig-date-picker igr-date-picker",
            ref: this._getMainRef,
            children: children
        });
        return div;
    }
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    initializeProperties() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    // supports angular themes or custom properties set in CSS
    updateStyle() {
        this._styling(this._elRef, this);
    }
    componentWillUnmount() {
        this._datePicker.destroy();
        if (this._renderer) {
            this._renderer.destroy();
        }
    }
    componentDidMount() {
        this._elRef.style.width = this._width ? this._width : "";
        this._elRef.style.height = this._height ? this._height : "";
        this._datePicker.notifySizeChanged();
        this.initializeContent();
    }
    initializeContent() {
        this.updateStyle();
        this.i.notifySizeChanged();
    }
    createImplementation() {
        return new DatePicker();
    }
    get i() {
        return this._implementation;
    }
    /**
 * Gets or Sets the property name that contains the values.
*/
    get value() {
        return this.i.r;
    }
    set value(v) {
        this.i.r = v;
    }
    /**
     * Gets or sets the display density to use for the date pcicker.
    */
    get density() {
        return this.i.d;
    }
    set density(v) {
        this.i.d = ensureEnum(ControlDisplayDensity_$type, v);
    }
    /**
     * Gets or sets the base built in theme to use for the date picker.
    */
    get baseTheme() {
        return this.i.b;
    }
    set baseTheme(v) {
        this.i.b = ensureEnum(BaseControlTheme_$type, v);
    }
    /**
     * Gets or sets the font to use for the combobox.
    */
    get textStyle() {
        if (this.i.o == null) {
            return null;
        }
        return this.i.o.fontString;
    }
    set textStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.o = fi;
    }
    /**
     * Gets or Sets the text color
    */
    get textColor() {
        return brushToString(this.i.a5);
    }
    set textColor(v) {
        this.i.a5 = stringToBrush(v);
    }
    /**
     * Gets or Sets the text color
    */
    get iconColor() {
        return brushToString(this.i.a4);
    }
    set iconColor(v) {
        this.i.a4 = stringToBrush(v);
    }
    /**
     * Gets or sets the ShowClearButton property to detirmine if the clear button is shown
    */
    get showClearButton() {
        return this.i.q;
    }
    set showClearButton(v) {
        this.i.q = ensureBool(v);
    }
    get hasUserValues() {
        return this._hasUserValues;
    }
    __m(propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    }
    _styling(container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        let genericPrefix = "";
        let typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("DatePicker");
        let additionalPrefixes = [];
        let prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        let b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            let basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            let parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            let parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    }
    /**
 * Exports visual information about the current state of the grid.

*/
    exportVisualModel() {
        let iv = this.i.u();
        return (iv);
    }
    /**
     * Returns a serialized copy of the exported visual model
    
    */
    exportSerializedVisualModel() {
        let iv = this.i.ac();
        return (iv);
    }
    /**
     * Called when date is selected.
    */
    get valueChanged() {
        return this._valueChanged;
    }
    set valueChanged(ev) {
        if (this._valueChanged_wrapped !== null) {
            this.i.valueChanged = delegateRemove(this.i.valueChanged, this._valueChanged_wrapped);
            this._valueChanged_wrapped = null;
            this._valueChanged = null;
        }
        this._valueChanged = ev;
        this._valueChanged_wrapped = (o, e) => {
            let outerArgs = new IgrValueChangedEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeValueChanged) {
                this.beforeValueChanged(this, outerArgs);
            }
            if (this._valueChanged) {
                this._valueChanged(this, outerArgs);
            }
        };
        this.i.valueChanged = delegateCombine(this.i.valueChanged, this._valueChanged_wrapped);
    }
}

class IgrInputGroupItem extends Component {
    constructor(props) {
        super(props);
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    createImplementation() {
        return null;
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    } /**
                                 * @hidden
                                 */
    static _createFromInternal(internal) {
        if (!internal) {
            return null;
        }
        if (!internal.$type) {
            return null;
        }
        let name = internal.$type.name;
        let externalName = "Igr" + name;
        if (!TypeRegistrar.isRegistered(externalName)) {
            return null;
        }
        return TypeRegistrar.create(externalName);
    }
    onImplementationCreated() {
    }
    componentDidMount() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    render() {
        return null;
    }
    /**
     * Gets or sets name to use for the button.
    */
    get name() {
        return this.i.e;
    }
    set name(v) {
        this.i.e = v;
    }
    findByName(name) {
        return null;
    }
    get hasUserValues() {
        return this._hasUserValues;
    }
    __m(propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    }
    _styling(container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        let genericPrefix = "";
        let typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("InputGroupItem");
        let additionalPrefixes = [];
        let prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        let b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            let basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            let parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            let parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    }
}

class IgrInputChangeEventArgs {
    createImplementation() {
        return new InputChangeEventArgs();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    get value() {
        return this.i.value;
    }
    set value(v) {
        this.i.value = v;
    }
    get isCompositionInProgress() {
        return this.i.isCompositionInProgress;
    }
    set isCompositionInProgress(v) {
        this.i.isCompositionInProgress = ensureBool(v);
    }
}

let requiredStyle = `
.ig-input input::-ms-clear {
    display: none;
    width: 0;
    height: 0;
}

`;
let pending = [];
let checked = /*@__PURE__*/ new WeakMap(); // TODO why not WeakSet?
function ensureCss() {
    if (!document) {
        return;
    }
    if (checked.has(document)) {
        return;
    }
    injectCss(requiredStyle, "data-ig-input-style", () => {
        let temp = pending;
        pending = null;
        temp.forEach((v, i, a) => {
            //v.styleUpdated();
        });
    });
    checked.set(document, true);
}
function injectCss(style, attributeName, onload = null) {
    for (let i = 0; i < document.head.children.length; i++) {
        let child = document.head.children[i];
        if (child.tagName == "link" && child.hasAttribute(attributeName)) {
            return;
        }
    }
    let link = document.createElement("link");
    link.setAttribute('href', 'data:text/css;charset=UTF-8,' + encodeURIComponent(style));
    link.setAttribute('rel', 'stylesheet');
    link.setAttribute('type', 'text/css');
    link.setAttribute(attributeName, 'true');
    if (onload) {
        const onloadResolved = () => {
            link.onload = null;
            onload();
        };
        link.onload = onloadResolved;
    }
    document.head.appendChild(link);
}
class IgrInput extends IgrInputGroupItem {
    constructor(props) {
        super(props);
        this._wrapper = null;
        this._keyDown = null;
        this._keyDown_wrapped = null;
        this._keyUp = null;
        this._keyUp_wrapped = null;
        this._keyPress = null;
        this._keyPress_wrapped = null;
        this._change = null;
        this._change_wrapped = null;
        this._changing = null;
        this._changing_wrapped = null;
        ensureCss();
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this._getMainRef = this._getMainRef.bind(this);
        var container;
        if (document) {
            container = document.createElement("div");
        }
        var root;
        root = container;
        if (container != null) {
            root = container;
        }
        this.requestRender = this.requestRender.bind(this);
        this._portalManager = new PortalManager("inputContent", this.requestRender);
        var ren = new ReactRenderer(root, document, true, {}, this._portalManager);
        this._wrapper = ren;
        this._container = this._wrapper.rootWrapper;
        this._container.setStyleProperty("display", "inline-block");
        this._container.setStyleProperty("vertical-align", "middle");
        var input = this.i;
        this._input = input;
        input.provideContainer(ren);
        if (props) {
            this.initializeProperties();
        }
    }
    _getMainRef(ref) {
        this._elRef = ref;
    }
    render() {
        let propChildren = this.props.children;
        let children = [];
        Children.forEach(propChildren, (ch) => {
            children.push(cloneElement(ch));
        });
        this._portalManager.onRender(children);
        let div = createElement("div", {
            className: "ig-input igr-input",
            ref: this._getMainRef,
            children: children
        });
        return div;
    }
    requestRender() {
        if (this._initialized) {
            this.setState({});
        }
    }
    //private _getLabelPortal(element: DomWrapper, portalCallback: (portal: DomPortal) => void): void {
    //    this._portalManager.getPortal(element, "TemplateContent", portalCallback);
    //}
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    initializeProperties() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    // supports angular themes or custom properties set in CSS
    updateStyle() {
        this._styling(this._elRef, this);
    }
    componentWillUnmount() {
        this._input.destroy();
        this._wrapper.destroy();
    }
    componentDidMount() {
        this._elRef.appendChild(this._container.getNativeElement());
        this.initializeContent();
    }
    initializeContent() {
        this._styling(this._container.getNativeElement(), this);
        this.updateStyle();
    }
    createImplementation() {
        return new Input();
    }
    /**
                             * @hidden
                             */
    get i() {
        return this._implementation;
    }
    /**
 * Gets or sets the display density to use for the input.
*/
    get density() {
        return this.i.m;
    }
    set density(v) {
        this.i.m = ensureEnum(ControlDisplayDensity_$type, v);
    }
    /**
     * Gets the actual display density to use for the label.
    */
    get actualDensity() {
        return this.i.l;
    }
    set actualDensity(v) {
        this.i.l = ensureEnum(ControlDisplayDensity_$type, v);
    }
    /**
     * Gets/Sets the input mask for the input.
    */
    get mask() {
        return this.i.b5;
    }
    set mask(v) {
        this.i.b5 = v;
    }
    /**
     * Gets/Sets the character representing a fillable spot in the input mask
    */
    get promptChar() {
        return this.i.b9;
    }
    set promptChar(v) {
        this.i.b9 = v;
    }
    /**
     * Specifies if the bound value includes the formatting symbols.
    */
    get includeLiterals() {
        return this.i.ap;
    }
    set includeLiterals(v) {
        this.i.ap = ensureBool(v);
    }
    /**
     * Gets the actual color to use for the text color.
    */
    get actualTextColor() {
        return brushToString(this.i.dp);
    }
    set actualTextColor(v) {
        this.i.dp = stringToBrush(v);
    }
    /**
     * Gets the actual hover color to use for the text.
    */
    get actualHoverTextColor() {
        return brushToString(this.i.dn);
    }
    set actualHoverTextColor(v) {
        this.i.dn = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the text.
    */
    get textColor() {
        return brushToString(this.i.dt);
    }
    set textColor(v) {
        this.i.dt = stringToBrush(v);
    }
    /**
     * Gets or sets the use for the button.
    */
    get textStyle() {
        if (this.i.ac == null) {
            return null;
        }
        return this.i.ac.fontString;
    }
    set textStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.ac = fi;
    }
    /**
     * Gets or sets the type to use for the input.
    */
    get inputType() {
        return this.i.b0;
    }
    set inputType(v) {
        this.i.b0 = v;
    }
    /**
     * Gets or sets the placeholder to use for the input.
    */
    get placeholder() {
        return this.i.b7;
    }
    set placeholder(v) {
        this.i.b7 = v;
    }
    /**
     * Gets or sets the color to use for the hovered text of the button regardless of type.
    */
    get hoverTextColor() {
        return brushToString(this.i.ds);
    }
    set hoverTextColor(v) {
        this.i.ds = stringToBrush(v);
    }
    /**
     * Gets or sets the id to use for the checkbox.
    */
    get id() {
        return this.i.bx;
    }
    set id(v) {
        this.i.bx = v;
    }
    /**
     * Gets or sets TabIndex to use for the checkbox.
    */
    get tabIndex() {
        return this.i.a8;
    }
    set tabIndex(v) {
        this.i.a8 = +v;
    }
    /**
     * Gets or sets the for attribute to use for the input.
    */
    get for() {
        return this.i.bu;
    }
    set for(v) {
        this.i.bu = v;
    }
    /**
     * Gets or sets the value of the aria-label attribute.
    */
    get ariaLabel() {
        return this.i.bq;
    }
    set ariaLabel(v) {
        this.i.bq = v;
    }
    /**
     * Gets or sets whether the input is hovered.
    */
    get isHover() {
        return this.i.ar;
    }
    set isHover(v) {
        this.i.ar = ensureBool(v);
    }
    /**
     * Gets or sets the value for the input.
    */
    get value() {
        return this.i.cf;
    }
    set value(v) {
        this.i.cf = v;
    }
    get hasValue() {
        return this.i.ao;
    }
    /**
     * Gets or sets whether the checkbox is disabled.
    */
    get disabled() {
        return this.i.disabled;
    }
    set disabled(v) {
        this.i.disabled = ensureBool(v);
    }
    /**
     * Returns / Sets the beginning index of the selected text. When nothing is selected, this returns the position of the text input cursor (caret) inside of the input.
    */
    get selectionStart() {
        return this.i.selectionStart;
    }
    set selectionStart(v) {
        this.i.selectionStart = +v;
    }
    /**
     * Returns / Sets the end index of the selected text. When nothing is selected, this returns the position of the text input cursor (caret) inside of the input.
    */
    get selectionEnd() {
        return this.i.selectionEnd;
    }
    set selectionEnd(v) {
        this.i.selectionEnd = +v;
    }
    onDetachedFromUI() {
        this.i.onDetachedFromUI();
    }
    onAttachedToUI() {
        this.i.onAttachedToUI();
    }
    /**
     * Exports visual information about the current state of the grid.
    
    */
    exportVisualModel() {
        let iv = this.i.ba();
        return (iv);
    }
    /**
     * Returns a serialized copy of the exported visual model
    
    */
    exportSerializedVisualModel() {
        let iv = this.i.bt();
        return (iv);
    }
    focus() {
        this.i.ck();
    }
    select() {
        this.i.db();
    }
    setSelectionRange(selectionStart, selectionEnd) {
        this.i.dd(selectionStart, selectionEnd);
    }
    get keyDown() {
        return this._keyDown;
    }
    set keyDown(ev) {
        if (this._keyDown_wrapped !== null) {
            this.i.keyDown = delegateRemove(this.i.keyDown, this._keyDown_wrapped);
            this._keyDown_wrapped = null;
            this._keyDown = null;
        }
        this._keyDown = ev;
        this._keyDown_wrapped = (o, e) => {
            let outerArgs = new IgrKeyEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeKeyDown) {
                this.beforeKeyDown(this, outerArgs);
            }
            if (this._keyDown) {
                this._keyDown(this, outerArgs);
            }
        };
        this.i.keyDown = delegateCombine(this.i.keyDown, this._keyDown_wrapped);
    }
    get keyUp() {
        return this._keyUp;
    }
    set keyUp(ev) {
        if (this._keyUp_wrapped !== null) {
            this.i.keyUp = delegateRemove(this.i.keyUp, this._keyUp_wrapped);
            this._keyUp_wrapped = null;
            this._keyUp = null;
        }
        this._keyUp = ev;
        this._keyUp_wrapped = (o, e) => {
            let outerArgs = new IgrKeyEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeKeyUp) {
                this.beforeKeyUp(this, outerArgs);
            }
            if (this._keyUp) {
                this._keyUp(this, outerArgs);
            }
        };
        this.i.keyUp = delegateCombine(this.i.keyUp, this._keyUp_wrapped);
    }
    get keyPress() {
        return this._keyPress;
    }
    set keyPress(ev) {
        if (this._keyPress_wrapped !== null) {
            this.i.keyPress = delegateRemove(this.i.keyPress, this._keyPress_wrapped);
            this._keyPress_wrapped = null;
            this._keyPress = null;
        }
        this._keyPress = ev;
        this._keyPress_wrapped = (o, e) => {
            let outerArgs = new IgrKeyEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeKeyPress) {
                this.beforeKeyPress(this, outerArgs);
            }
            if (this._keyPress) {
                this._keyPress(this, outerArgs);
            }
        };
        this.i.keyPress = delegateCombine(this.i.keyPress, this._keyPress_wrapped);
    }
    get change() {
        return this._change;
    }
    set change(ev) {
        if (this._change_wrapped !== null) {
            this.i.change = delegateRemove(this.i.change, this._change_wrapped);
            this._change_wrapped = null;
            this._change = null;
        }
        this._change = ev;
        this._change_wrapped = (o, e) => {
            let outerArgs = new IgrInputChangeEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeChange) {
                this.beforeChange(this, outerArgs);
            }
            if (this._change) {
                this._change(this, outerArgs);
            }
        };
        this.i.change = delegateCombine(this.i.change, this._change_wrapped);
    }
    get changing() {
        return this._changing;
    }
    set changing(ev) {
        if (this._changing_wrapped !== null) {
            this.i.changing = delegateRemove(this.i.changing, this._changing_wrapped);
            this._changing_wrapped = null;
            this._changing = null;
        }
        this._changing = ev;
        this._changing_wrapped = (o, e) => {
            let outerArgs = new IgrInputChangeEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeChanging) {
                this.beforeChanging(this, outerArgs);
            }
            if (this._changing) {
                this._changing(this, outerArgs);
            }
        };
        this.i.changing = delegateCombine(this.i.changing, this._changing_wrapped);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrInputModule {
    static register() {
        IgrChildContentModule.register();
        TypeRegistrar.registerCons('IgrInput', IgrInput);
        TypeRegistrar.registerCons('IgrInput', IgrInput);
        TypeRegistrar.register('Input', Input.$type);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

class IgrLabel extends IgrInputGroupItem {
    constructor(props) {
        super(props);
        this._wrapper = null;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this._getMainRef = this._getMainRef.bind(this);
        var container;
        if (document) {
            container = document.createElement("div");
        }
        var root;
        root = container;
        if (container != null) {
            root = container;
        }
        this.requestRender = this.requestRender.bind(this);
        this._portalManager = new PortalManager("labelContent", this.requestRender);
        var ren = new ReactRenderer(root, document, true, {}, this._portalManager);
        this._wrapper = ren;
        this._container = this._wrapper.rootWrapper;
        this._container.setStyleProperty("display", "inline-block");
        this._container.setStyleProperty("vertical-align", "middle");
        var label = this.i;
        this._label = label;
        label.provideContainer(ren);
        if (props) {
            this.initializeProperties();
        }
    }
    _getMainRef(ref) {
        this._elRef = ref;
    }
    render() {
        let propChildren = this.props.children;
        let children = [];
        Children.forEach(propChildren, (ch) => {
            children.push(cloneElement(ch));
        });
        this._portalManager.onRender(children);
        let div = createElement("div", {
            className: "ig-label igr-label",
            ref: this._getMainRef,
            children: children
        });
        return div;
    }
    requestRender() {
        if (this._initialized) {
            this.setState({});
        }
    }
    //private _getLabelPortal(element: DomWrapper, portalCallback: (portal: DomPortal) => void): void {
    //    this._portalManager.getPortal(element, "TemplateContent", portalCallback);
    //}
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    initializeProperties() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    // supports angular themes or custom properties set in CSS
    updateStyle() {
        this._styling(this._elRef, this);
    }
    componentWillUnmount() {
        this._label.destroy();
        this._wrapper.destroy();
    }
    componentDidMount() {
        this._elRef.appendChild(this._container.getNativeElement());
        this.initializeContent();
    }
    initializeContent() {
        this._styling(this._container.getNativeElement(), this);
        this.updateStyle();
    }
    createImplementation() {
        return new Label();
    }
    _onDisplayChanged() {
        this._container.setStyleProperty("display", this.display);
    }
    _onFlexDirectionChanged() {
        this._container.setStyleProperty("flex-direction", this.flexDirection);
    }
    _onFlexGrowChanged() {
        this._container.setStyleProperty("flex-grow", this.flexGrow);
    }
    _onAlignItemsChanged() {
        this._container.setStyleProperty("align-items", this.alignItems);
    }
    /**
                             * @hidden
                             */
    get i() {
        return this._implementation;
    }
    /**
 * Gets or sets the base built in theme to use for the label.
*/
    get baseTheme() {
        return this.i.l;
    }
    set baseTheme(v) {
        this.i.l = ensureEnum(BaseControlTheme_$type, v);
    }
    /**
     * Gets or sets the display density to use for the label.
    */
    get density() {
        return this.i.p;
    }
    set density(v) {
        this.i.p = ensureEnum(ControlDisplayDensity_$type, v);
    }
    /**
     * Gets the actual display density to use for the label.
    */
    get actualDensity() {
        return this.i.o;
    }
    set actualDensity(v) {
        this.i.o = ensureEnum(ControlDisplayDensity_$type, v);
    }
    /**
     * Gets the actual color to use for the text color.
    */
    get actualTextColor() {
        return brushToString(this.i.cw);
    }
    set actualTextColor(v) {
        this.i.cw = stringToBrush(v);
    }
    /**
     * Gets the actual color to use for the text color.
    */
    get actualHighlightTextColor() {
        return brushToString(this.i.ct);
    }
    set actualHighlightTextColor(v) {
        this.i.ct = stringToBrush(v);
    }
    /**
     * Gets the actual color to use for the text color when highlighted and hovered.
    */
    get actualHoverHighlightTextColor() {
        return brushToString(this.i.cu);
    }
    set actualHoverHighlightTextColor(v) {
        this.i.cu = stringToBrush(v);
    }
    /**
     * Gets the actual hover color to use for the text.
    */
    get actualHoverTextColor() {
        return brushToString(this.i.cv);
    }
    set actualHoverTextColor(v) {
        this.i.cv = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the text.
    */
    get textColor() {
        return brushToString(this.i.dc);
    }
    set textColor(v) {
        this.i.dc = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the text.
    */
    get highlightTextColor() {
        return brushToString(this.i.c9);
    }
    set highlightTextColor(v) {
        this.i.c9 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the text.
    */
    get hoverHighlightTextColor() {
        return brushToString(this.i.da);
    }
    set hoverHighlightTextColor(v) {
        this.i.da = stringToBrush(v);
    }
    /**
     * Gets or sets the use for the button.
    */
    get textStyle() {
        if (this.i.y == null) {
            return null;
        }
        return this.i.y.fontString;
    }
    set textStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.y = fi;
    }
    /**
     * Gets or sets the color to use for the hovered text of the button regardless of type.
    */
    get hoverTextColor() {
        return brushToString(this.i.db);
    }
    set hoverTextColor(v) {
        this.i.db = stringToBrush(v);
    }
    /**
     * Gets or sets the id to use for the checkbox.
    */
    get id() {
        return this.i.br;
    }
    set id(v) {
        this.i.br = v;
    }
    /**
     * Gets or sets the id to use for the checkbox.
    */
    get display() {
        return this.i.bf;
    }
    set display(v) {
        this.i.bf = v;
    }
    /**
     * Gets or sets the id to use for the checkbox.
    */
    get flexDirection() {
        return this.i.bi;
    }
    set flexDirection(v) {
        this.i.bi = v;
    }
    /**
     * Gets or sets the flex-grow setting for the button.
    */
    get flexGrow() {
        return this.i.bk;
    }
    set flexGrow(v) {
        this.i.bk = v;
    }
    /**
     * Gets or sets the id to use for the checkbox.
    */
    get alignItems() {
        return this.i.a9;
    }
    set alignItems(v) {
        this.i.a9 = v;
    }
    /**
     * Gets or sets TabIndex to use for the checkbox.
    */
    get tabIndex() {
        return this.i.as;
    }
    set tabIndex(v) {
        this.i.as = +v;
    }
    /**
     * Gets or sets the for attribute to use for the label.
    */
    get for() {
        return this.i.bm;
    }
    set for(v) {
        this.i.bm = v;
    }
    /**
     * Gets or sets the value of the aria-label attribute.
    */
    get ariaLabel() {
        return this.i.bb;
    }
    set ariaLabel(v) {
        this.i.bb = v;
    }
    /**
     * Gets or sets the text for the label.
    */
    get text() {
        return this.i.text;
    }
    set text(v) {
        this.i.text = v;
    }
    /**
     * Gets or sets whether the label is hovered.
    */
    get isHover() {
        return this.i.am;
    }
    set isHover(v) {
        this.i.am = ensureBool(v);
    }
    /**
     * Gets or sets the value for the label.
    */
    get value() {
        return this.i.aq;
    }
    set value(v) {
        this.i.aq = ensureBool(v);
    }
    /**
     * Gets or sets whether the checkbox is disabled.
    */
    get disabled() {
        return this.i.disabled;
    }
    set disabled(v) {
        this.i.disabled = ensureBool(v);
    }
    onDetachedFromUI() {
        this.i.onDetachedFromUI();
    }
    onAttachedToUI() {
        this.i.onAttachedToUI();
    }
    /**
     * Exports visual information about the current state of the grid.
    
    */
    exportVisualModel() {
        let iv = this.i.au();
        return (iv);
    }
    /**
     * Returns a serialized copy of the exported visual model
    
    */
    exportSerializedVisualModel() {
        let iv = this.i.bh();
        return (iv);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrLabelModule {
    static register() {
        IgrChildContentModule.register();
        TypeRegistrar.registerCons('IgrLabel', IgrLabel);
        TypeRegistrar.registerCons('IgrLabel', IgrLabel);
        TypeRegistrar.register('Input', Input.$type);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

class IgrInputGroupInputCollection extends IgCollection {
    constructor(list) {
        super();
        if (!IgrInputGroupItem.$type) {
            IgrInputGroupItem.$type = markType(IgrInputGroupItem, "IgrInputGroupItem");
        }
        if (list) {
            for (let i = 0; i < list.length; i++) {
                this.add(list[i]);
            }
        }
    }
    _createInnerColl() {
        if (!IgrInputGroupItem.$type) {
            IgrInputGroupItem.$type = markType(IgrInputGroupItem, "IgrInputGroupItem");
        }
        let coll = new SyncableObservableCollection$2(IgrInputGroupItem.$type, InputGroupItem.$type, 0);
        coll.compare = (ext, int) => {
            let comp = ext;
            if (comp._implementation) {
                comp = comp._implementation;
            }
            if (comp.equals) {
                return comp.equals(int);
            }
            return comp === int;
        };
        coll.createTo = (ext) => {
            return ext._implementation;
        };
        coll.createFrom = (int) => {
            let ext = int.externalObject;
            if (!ext) {
                ext = IgrInputGroupItem._createFromInternal(int);
                if (ext) {
                    ext._implementation = int;
                }
            }
            return ext;
        };
        return coll;
    }
}

class IgrInputGroup extends Component {
    constructor(props) {
        super(props);
        this._wrapper = null;
        this.contentInputs = [];
        /**
        * The style mappings actually present in the treemap. Do not directly modify this array.
        * This array's contents can be modified by causing React to reproject the child content.
        * Or adding and removing ranges from the manual ranges collection on the ranges property.
        */
        this.actualInputs = [];
        this._inputs = null;
        this._inputsAdapter = null;
        this._implementation = null;
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._contentChildrenManager = new ContentChildrenManager((ch) => ch.props.name || ch.key || ch.props.id, (ch) => ch.name || ch.key || ch.id, () => this._updateContentChildren());
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this._getMainRef = this._getMainRef.bind(this);
        var container;
        if (document) {
            container = document.createElement("div");
        }
        var root;
        root = container;
        if (container != null) {
            root = container;
        }
        this.requestRender = this.requestRender.bind(this);
        this._portalManager = new PortalManager("inputContent", this.requestRender);
        var ren = new ReactRenderer(root, document, true, {}, this._portalManager);
        this._wrapper = ren;
        this._container = this._wrapper.rootWrapper;
        this._container.setStyleProperty("display", "inline-block");
        var inputGroup = this.i;
        this._inputGroup = inputGroup;
        this._inputsAdapter = new CollectionAdapter(this.contentInputs, this.i.inputs, this.actualInputs, (c) => c.i, (i) => {
            if (this._container && this._container.getNativeElement().parentElement) {
                i._styling(this._container.getNativeElement(), this, this);
            }
        }, (i) => { });
        inputGroup.provideContainer(ren);
        if (props) {
            this.initializeProperties();
        }
    }
    _getMainRef(ref) {
        this._elRef = ref;
        if (this._elRef) {
            let mut = new MutationObserver((list) => {
                for (var mutation of list) {
                    if (mutation.type == 'childList') {
                        this.i.onChildrenMutated();
                    }
                }
            });
            mut.observe(this._elRef, {
                childList: true,
                subtree: true
            });
        }
    }
    _updateContentChildren() {
        this.contentInputs.length = 0;
        let contentChildrenActual = this._contentChildrenManager.contentChildrenActual;
        for (let i = 0; i < contentChildrenActual.length; i++) {
            if ((InputGroupItem.$type).isAssignableFrom(contentChildrenActual[i].i.$type)) {
                this.contentInputs.push(contentChildrenActual[i]);
            }
        }
        if (this._inputsAdapter !== null) {
            this._inputsAdapter.notifyContentChanged();
        }
    }
    /**
     * A collection of manually added style mappings for the treemap.
    */
    get inputs() {
        if (this._inputs === null) {
            let coll = new IgrInputGroupInputCollection();
            let inner = coll._innerColl;
            inner.addListener((sender, e) => {
                switch (e.action) {
                    case NotifyCollectionChangedAction.Add:
                        this._inputsAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));
                        break;
                    case NotifyCollectionChangedAction.Remove:
                        this._inputsAdapter.removeManualItemAt(e.oldStartingIndex);
                        break;
                    case NotifyCollectionChangedAction.Replace:
                        this._inputsAdapter.removeManualItemAt(e.oldStartingIndex);
                        this._inputsAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));
                        break;
                    case NotifyCollectionChangedAction.Reset:
                        this._inputsAdapter.clearManualItems();
                        break;
                }
            });
            this._inputs = coll;
        }
        return this._inputs;
    }
    render() {
        let children = this._contentChildrenManager.getChildren(this.props.children);
        this._portalManager.onRender(children);
        let div = createElement("div", {
            className: "ig-input-group igr-input-group",
            ref: this._getMainRef,
            children: children
        });
        return div;
    }
    requestRender() {
        if (this._initialized) {
            this.setState({});
        }
    }
    //private _getLabelPortal(element: DomWrapper, portalCallback: (portal: DomPortal) => void): void {
    //    this._portalManager.getPortal(element, "TemplateContent", portalCallback);
    //}
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    initializeProperties() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    // supports angular themes or custom properties set in CSS
    updateStyle() {
        this._styling(this._elRef, this);
    }
    componentWillUnmount() {
        this._inputGroup.destroy();
        this._wrapper.destroy();
    }
    componentDidMount() {
        this._elRef.appendChild(this._container.getNativeElement());
        this.initializeContent();
    }
    initializeContent() {
        this._styling(this._container.getNativeElement(), this);
        this.updateStyle();
    }
    createImplementation() {
        return new InputGroup();
    }
    get i() {
        return this._implementation;
    }
    /**
 * Gets or sets the display style to use for the button.
*/
    get displayType() {
        return this.i.k;
    }
    set displayType(v) {
        this.i.k = ensureEnum(InputGroupDisplayType_$type, v);
    }
    /**
     * Gets or sets the display density to use for the input group.
    */
    get density() {
        return this.i.h;
    }
    set density(v) {
        this.i.h = ensureEnum(ControlDisplayDensity_$type, v);
    }
    /**
     * Gets the actual display density to use for the input group.
    */
    get actualDensity() {
        return this.i.g;
    }
    set actualDensity(v) {
        this.i.g = ensureEnum(ControlDisplayDensity_$type, v);
    }
    /**
     * Gets or sets the base built in theme to use for the label.
    */
    get baseTheme() {
        return this.i.d;
    }
    set baseTheme(v) {
        this.i.d = ensureEnum(BaseControlTheme_$type, v);
    }
    get inputHasValue() {
        return this.i.af;
    }
    /**
     * Gets the actual item background color.
    */
    get actualBorderColor() {
        return brushToString(this.i.os);
    }
    set actualBorderColor(v) {
        this.i.os = stringToBrush(v);
    }
    /**
     * Gets the actual item border color.
    */
    get actualFocusBorderColor() {
        return brushToString(this.i.ot);
    }
    set actualFocusBorderColor(v) {
        this.i.ot = stringToBrush(v);
    }
    /**
     * Gets the actual item border width.
    */
    get actualBorderWidth() {
        return this.i.ca;
    }
    set actualBorderWidth(v) {
        this.i.ca = +v;
    }
    /**
     * Gets the actual item border width.
    */
    get actualFocusBorderWidth() {
        return this.i.cb;
    }
    set actualFocusBorderWidth(v) {
        this.i.cb = +v;
    }
    get actualCornerRadiusBottomRight() {
        return this.i.mz ? this.i.mz.b : NaN;
    }
    set actualCornerRadiusBottomRight(v) {
        this.ensureActualCornerRadius();
        this.i.mz.b = +v;
        this.i.mz = this.i.mz;
    }
    get actualCornerRadiusBottomLeft() {
        return this.i.mz ? this.i.mz.a : NaN;
    }
    set actualCornerRadiusBottomLeft(v) {
        this.ensureActualCornerRadius();
        this.i.mz.a = +v;
        this.i.mz = this.i.mz;
    }
    get actualCornerRadiusTopLeft() {
        return this.i.mz ? this.i.mz.c : NaN;
    }
    set actualCornerRadiusTopLeft(v) {
        this.ensureActualCornerRadius();
        this.i.mz.c = +v;
        this.i.mz = this.i.mz;
    }
    get actualCornerRadiusTopRight() {
        return this.i.mz ? this.i.mz.d : NaN;
    }
    set actualCornerRadiusTopRight(v) {
        this.ensureActualCornerRadius();
        this.i.mz.d = +v;
        this.i.mz = this.i.mz;
    }
    ensureActualCornerRadius() {
        if (this.i.mz) {
            return;
        }
        this.i.mz = new CornerRadius(2);
    }
    get actualContentPaddingBottom() {
        return this.i.tf ? this.i.tf.b : NaN;
    }
    set actualContentPaddingBottom(v) {
        this.ensureActualContentPadding();
        this.i.tf.b = +v;
        this.i.tf = this.i.tf;
    }
    get actualContentPaddingLeft() {
        return this.i.tf ? this.i.tf.c : NaN;
    }
    set actualContentPaddingLeft(v) {
        this.ensureActualContentPadding();
        this.i.tf.c = +v;
        this.i.tf = this.i.tf;
    }
    get actualContentPaddingRight() {
        return this.i.tf ? this.i.tf.d : NaN;
    }
    set actualContentPaddingRight(v) {
        this.ensureActualContentPadding();
        this.i.tf.d = +v;
        this.i.tf = this.i.tf;
    }
    get actualContentPaddingTop() {
        return this.i.tf ? this.i.tf.e : NaN;
    }
    set actualContentPaddingTop(v) {
        this.ensureActualContentPadding();
        this.i.tf.e = +v;
        this.i.tf = this.i.tf;
    }
    ensureActualContentPadding() {
        if (this.i.tf) {
            return;
        }
        this.i.tf = new Thickness(2);
    }
    /**
     * Gets the actual width to use for the underline element.
    */
    get actualUnderlineWidth() {
        return this.i.cj;
    }
    set actualUnderlineWidth(v) {
        this.i.cj = +v;
    }
    /**
     * Gets the actual width to use for the underline element.
    */
    get actualUnderlineRippleWidth() {
        return this.i.ci;
    }
    set actualUnderlineRippleWidth(v) {
        this.i.ci = +v;
    }
    /**
     * Gets the width to use for the underline element when hovered.
    */
    get actualHoverUnderlineWidth() {
        return this.i.cf;
    }
    set actualHoverUnderlineWidth(v) {
        this.i.cf = +v;
    }
    /**
     * Gets the actual color to use for the underline element.
    */
    get actualUnderlineColor() {
        return brushToString(this.i.ow);
    }
    set actualUnderlineColor(v) {
        this.i.ow = stringToBrush(v);
    }
    /**
     * Gets the actual color to use for the underline ripple element.
    */
    get actualUnderlineRippleColor() {
        return brushToString(this.i.ox);
    }
    set actualUnderlineRippleColor(v) {
        this.i.ox = stringToBrush(v);
    }
    /**
     * Gets the actual color to use for the underline element.
    */
    get actualHoverUnderlineColor() {
        return brushToString(this.i.ov);
    }
    set actualHoverUnderlineColor(v) {
        this.i.ov = stringToBrush(v);
    }
    /**
     * Gets the actual color to use for the underline element when focused.
    */
    get actualFocusUnderlineColor() {
        return brushToString(this.i.ou);
    }
    set actualFocusUnderlineColor(v) {
        this.i.ou = stringToBrush(v);
    }
    /**
     * Gets the actual opacity to use for the underline element.
    */
    get actualUnderlineOpacity() {
        return this.i.cg;
    }
    set actualUnderlineOpacity(v) {
        this.i.cg = +v;
    }
    /**
     * Gets the actual opacity to use for the underline element when hovered.
    */
    get actualHoverUnderlineOpacity() {
        return this.i.ce;
    }
    set actualHoverUnderlineOpacity(v) {
        this.i.ce = +v;
    }
    /**
     * Gets the actual opacity to use for the underline element when focused.
    */
    get actualFocusUnderlineOpacity() {
        return this.i.cc;
    }
    set actualFocusUnderlineOpacity(v) {
        this.i.cc = +v;
    }
    /**
     * Gets the actual opacity to use for the underline ripple element when focused.
    */
    get actualFocusUnderlineRippleOpacity() {
        return this.i.cd;
    }
    set actualFocusUnderlineRippleOpacity(v) {
        this.i.cd = +v;
    }
    /**
     * Gets the actual opacity to use for the underline ripple element.
    */
    get actualUnderlineRippleOpacity() {
        return this.i.ch;
    }
    set actualUnderlineRippleOpacity(v) {
        this.i.ch = +v;
    }
    /**
     * Gets the actual opacity to use for the underline ripple element.
    */
    get actualBackgroundColor() {
        return brushToString(this.i.or);
    }
    set actualBackgroundColor(v) {
        this.i.or = stringToBrush(v);
    }
    /**
     * Gets or sets the border width to use for the border of the item group.
    */
    get borderWidth() {
        return this.i.cu;
    }
    set borderWidth(v) {
        this.i.cu = +v;
    }
    /**
     * Gets or sets the border width to use for the border of the item group when focused.
    */
    get focusBorderWidth() {
        return this.i.hc;
    }
    set focusBorderWidth(v) {
        this.i.hc = +v;
    }
    /**
     * Gets or sets the color to use the border of the input group.
    */
    get borderColor() {
        return brushToString(this.i.oz);
    }
    set borderColor(v) {
        this.i.oz = stringToBrush(v);
    }
    get cornerRadiusBottomRight() {
        return this.i.m3 ? this.i.m3.b : NaN;
    }
    set cornerRadiusBottomRight(v) {
        this.ensureCornerRadius();
        this.i.m3.b = +v;
        this.i.m3 = this.i.m3;
    }
    get cornerRadiusBottomLeft() {
        return this.i.m3 ? this.i.m3.a : NaN;
    }
    set cornerRadiusBottomLeft(v) {
        this.ensureCornerRadius();
        this.i.m3.a = +v;
        this.i.m3 = this.i.m3;
    }
    get cornerRadiusTopLeft() {
        return this.i.m3 ? this.i.m3.c : NaN;
    }
    set cornerRadiusTopLeft(v) {
        this.ensureCornerRadius();
        this.i.m3.c = +v;
        this.i.m3 = this.i.m3;
    }
    get cornerRadiusTopRight() {
        return this.i.m3 ? this.i.m3.d : NaN;
    }
    set cornerRadiusTopRight(v) {
        this.ensureCornerRadius();
        this.i.m3.d = +v;
        this.i.m3 = this.i.m3;
    }
    ensureCornerRadius() {
        if (this.i.m3) {
            return;
        }
        this.i.m3 = new CornerRadius(2);
    }
    get contentPaddingBottom() {
        return this.i.tj ? this.i.tj.b : NaN;
    }
    set contentPaddingBottom(v) {
        this.ensureContentPadding();
        this.i.tj.b = +v;
        this.i.tj = this.i.tj;
    }
    get contentPaddingLeft() {
        return this.i.tj ? this.i.tj.c : NaN;
    }
    set contentPaddingLeft(v) {
        this.ensureContentPadding();
        this.i.tj.c = +v;
        this.i.tj = this.i.tj;
    }
    get contentPaddingRight() {
        return this.i.tj ? this.i.tj.d : NaN;
    }
    set contentPaddingRight(v) {
        this.ensureContentPadding();
        this.i.tj.d = +v;
        this.i.tj = this.i.tj;
    }
    get contentPaddingTop() {
        return this.i.tj ? this.i.tj.e : NaN;
    }
    set contentPaddingTop(v) {
        this.ensureContentPadding();
        this.i.tj.e = +v;
        this.i.tj = this.i.tj;
    }
    ensureContentPadding() {
        if (this.i.tj) {
            return;
        }
        this.i.tj = new Thickness(2);
    }
    /**
     * Gets or sets the width to use for the underline element.
    */
    get underlineWidth() {
        return this.i.h4;
    }
    set underlineWidth(v) {
        this.i.h4 = +v;
    }
    /**
     * Gets or sets the width to use for the underline element.
    */
    get underlineRippleWidth() {
        return this.i.h3;
    }
    set underlineRippleWidth(v) {
        this.i.h3 = +v;
    }
    /**
     * Gets or sets the width to use for the underline element when hovered.
    */
    get hoverUnderlineWidth() {
        return this.i.hg;
    }
    set hoverUnderlineWidth(v) {
        this.i.hg = +v;
    }
    /**
     * Gets or sets the color to use for the underline element.
    */
    get underlineColor() {
        return brushToString(this.i.s7);
    }
    set underlineColor(v) {
        this.i.s7 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the underline ripple element.
    */
    get underlineRippleColor() {
        return brushToString(this.i.s8);
    }
    set underlineRippleColor(v) {
        this.i.s8 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the underline element.
    */
    get hoverUnderlineColor() {
        return brushToString(this.i.ss);
    }
    set hoverUnderlineColor(v) {
        this.i.ss = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the underline element.
    */
    get focusUnderlineColor() {
        return brushToString(this.i.sr);
    }
    set focusUnderlineColor(v) {
        this.i.sr = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the underline element.
    */
    get underlineOpacity() {
        return this.i.h1;
    }
    set underlineOpacity(v) {
        this.i.h1 = +v;
    }
    /**
     * Gets or sets the color to use for the underline element.
    */
    get hoverUnderlineOpacity() {
        return this.i.hf;
    }
    set hoverUnderlineOpacity(v) {
        this.i.hf = +v;
    }
    /**
     * Gets or sets the color to use for the underline element.
    */
    get focusUnderlineOpacity() {
        return this.i.hd;
    }
    set focusUnderlineOpacity(v) {
        this.i.hd = +v;
    }
    /**
     * Gets or sets the opacity to use for the underline ripple element when focused.
    */
    get focusUnderlineRippleOpacity() {
        return this.i.he;
    }
    set focusUnderlineRippleOpacity(v) {
        this.i.he = +v;
    }
    /**
     * Gets or sets the opacity to use for the underline ripple element.
    */
    get underlineRippleOpacity() {
        return this.i.h2;
    }
    set underlineRippleOpacity(v) {
        this.i.h2 = +v;
    }
    /**
     * Gets or sets the background color to use for the input group.
    */
    get backgroundColor() {
        return brushToString(this.i.oy);
    }
    set backgroundColor(v) {
        this.i.oy = stringToBrush(v);
    }
    /**
     * Gets or sets the border width to use for the border of the item group when using type line.
    */
    get lineTypeBorderWidth() {
        return this.i.hh;
    }
    set lineTypeBorderWidth(v) {
        this.i.hh = +v;
    }
    /**
     * Gets or sets the border width to use for the border of the item group when focused when type is line.
    */
    get lineTypeFocusBorderWidth() {
        return this.i.hi;
    }
    set lineTypeFocusBorderWidth(v) {
        this.i.hi = +v;
    }
    /**
     * Gets or sets the focus color to use the border of the input group when type is line.
    */
    get lineTypeFocusBorderColor() {
        return brushToString(this.i.sv);
    }
    set lineTypeFocusBorderColor(v) {
        this.i.sv = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use the border of the input group when type is line.
    */
    get lineTypeBorderColor() {
        return brushToString(this.i.su);
    }
    set lineTypeBorderColor(v) {
        this.i.su = stringToBrush(v);
    }
    get lineTypeCornerRadiusBottomRight() {
        return this.i.nj ? this.i.nj.b : NaN;
    }
    set lineTypeCornerRadiusBottomRight(v) {
        this.ensureLineTypeCornerRadius();
        this.i.nj.b = +v;
        this.i.nj = this.i.nj;
    }
    get lineTypeCornerRadiusBottomLeft() {
        return this.i.nj ? this.i.nj.a : NaN;
    }
    set lineTypeCornerRadiusBottomLeft(v) {
        this.ensureLineTypeCornerRadius();
        this.i.nj.a = +v;
        this.i.nj = this.i.nj;
    }
    get lineTypeCornerRadiusTopLeft() {
        return this.i.nj ? this.i.nj.c : NaN;
    }
    set lineTypeCornerRadiusTopLeft(v) {
        this.ensureLineTypeCornerRadius();
        this.i.nj.c = +v;
        this.i.nj = this.i.nj;
    }
    get lineTypeCornerRadiusTopRight() {
        return this.i.nj ? this.i.nj.d : NaN;
    }
    set lineTypeCornerRadiusTopRight(v) {
        this.ensureLineTypeCornerRadius();
        this.i.nj.d = +v;
        this.i.nj = this.i.nj;
    }
    ensureLineTypeCornerRadius() {
        if (this.i.nj) {
            return;
        }
        this.i.nj = new CornerRadius(2);
    }
    get lineTypeContentPaddingBottom() {
        return this.i.tz ? this.i.tz.b : NaN;
    }
    set lineTypeContentPaddingBottom(v) {
        this.ensureLineTypeContentPadding();
        this.i.tz.b = +v;
        this.i.tz = this.i.tz;
    }
    get lineTypeContentPaddingLeft() {
        return this.i.tz ? this.i.tz.c : NaN;
    }
    set lineTypeContentPaddingLeft(v) {
        this.ensureLineTypeContentPadding();
        this.i.tz.c = +v;
        this.i.tz = this.i.tz;
    }
    get lineTypeContentPaddingRight() {
        return this.i.tz ? this.i.tz.d : NaN;
    }
    set lineTypeContentPaddingRight(v) {
        this.ensureLineTypeContentPadding();
        this.i.tz.d = +v;
        this.i.tz = this.i.tz;
    }
    get lineTypeContentPaddingTop() {
        return this.i.tz ? this.i.tz.e : NaN;
    }
    set lineTypeContentPaddingTop(v) {
        this.ensureLineTypeContentPadding();
        this.i.tz.e = +v;
        this.i.tz = this.i.tz;
    }
    ensureLineTypeContentPadding() {
        if (this.i.tz) {
            return;
        }
        this.i.tz = new Thickness(2);
    }
    /**
     * Gets or sets the width to use for the underline element when type is line.
    */
    get lineTypeUnderlineWidth() {
        return this.i.hq;
    }
    set lineTypeUnderlineWidth(v) {
        this.i.hq = +v;
    }
    /**
     * Gets or sets the width to use for the underline element when type is line.
    */
    get lineTypeUnderlineRippleWidth() {
        return this.i.hp;
    }
    set lineTypeUnderlineRippleWidth(v) {
        this.i.hp = +v;
    }
    /**
     * Gets or sets the width to use for the underline element when hovered when type is line.
    */
    get lineTypeHoverUnderlineWidth() {
        return this.i.hm;
    }
    set lineTypeHoverUnderlineWidth(v) {
        this.i.hm = +v;
    }
    /**
     * Gets or sets the color to use for the underline element when type is line.
    */
    get lineTypeUnderlineColor() {
        return brushToString(this.i.sy);
    }
    set lineTypeUnderlineColor(v) {
        this.i.sy = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the underline ripple element when type is line.
    */
    get lineTypeUnderlineRippleColor() {
        return brushToString(this.i.sz);
    }
    set lineTypeUnderlineRippleColor(v) {
        this.i.sz = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the underline element when type is line.
    */
    get lineTypeHoverUnderlineColor() {
        return brushToString(this.i.sx);
    }
    set lineTypeHoverUnderlineColor(v) {
        this.i.sx = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the underline element when type is line.
    */
    get lineTypeFocusUnderlineColor() {
        return brushToString(this.i.sw);
    }
    set lineTypeFocusUnderlineColor(v) {
        this.i.sw = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the underline element when type is line.
    */
    get lineTypeUnderlineOpacity() {
        return this.i.hn;
    }
    set lineTypeUnderlineOpacity(v) {
        this.i.hn = +v;
    }
    /**
     * Gets or sets the color to use for the underline element when type is line.
    */
    get lineTypeHoverUnderlineOpacity() {
        return this.i.hl;
    }
    set lineTypeHoverUnderlineOpacity(v) {
        this.i.hl = +v;
    }
    /**
     * Gets or sets the color to use for the underline element when type is line.
    */
    get lineTypeFocusUnderlineOpacity() {
        return this.i.hj;
    }
    set lineTypeFocusUnderlineOpacity(v) {
        this.i.hj = +v;
    }
    /**
     * Gets or sets the opacity to use for the underline ripple element when focused when type is line.
    */
    get lineTypeFocusUnderlineRippleOpacity() {
        return this.i.hk;
    }
    set lineTypeFocusUnderlineRippleOpacity(v) {
        this.i.hk = +v;
    }
    /**
     * Gets or sets the opacity to use for the underline ripple element when type is line.
    */
    get lineTypeUnderlineRippleOpacity() {
        return this.i.ho;
    }
    set lineTypeUnderlineRippleOpacity(v) {
        this.i.ho = +v;
    }
    /**
     * Gets or sets the background color to use for the input group when type is line.
    */
    get lineTypeBackgroundColor() {
        return brushToString(this.i.st);
    }
    set lineTypeBackgroundColor(v) {
        this.i.st = stringToBrush(v);
    }
    /**
     * Gets or sets the border width to use for the border of the item group when using type line.
    */
    get boxTypeBorderWidth() {
        return this.i.cv;
    }
    set boxTypeBorderWidth(v) {
        this.i.cv = +v;
    }
    /**
     * Gets or sets the border width to use for the border of the item group when focused when type is box.
    */
    get boxTypeFocusBorderWidth() {
        return this.i.cw;
    }
    set boxTypeFocusBorderWidth(v) {
        this.i.cw = +v;
    }
    /**
     * Gets or sets the focus color to use the border of the input group when type is box.
    */
    get boxTypeFocusBorderColor() {
        return brushToString(this.i.o9);
    }
    set boxTypeFocusBorderColor(v) {
        this.i.o9 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use the border of the input group when type is box.
    */
    get boxTypeBorderColor() {
        return brushToString(this.i.o8);
    }
    set boxTypeBorderColor(v) {
        this.i.o8 = stringToBrush(v);
    }
    get boxTypeCornerRadiusBottomRight() {
        return this.i.m1 ? this.i.m1.b : NaN;
    }
    set boxTypeCornerRadiusBottomRight(v) {
        this.ensureBoxTypeCornerRadius();
        this.i.m1.b = +v;
        this.i.m1 = this.i.m1;
    }
    get boxTypeCornerRadiusBottomLeft() {
        return this.i.m1 ? this.i.m1.a : NaN;
    }
    set boxTypeCornerRadiusBottomLeft(v) {
        this.ensureBoxTypeCornerRadius();
        this.i.m1.a = +v;
        this.i.m1 = this.i.m1;
    }
    get boxTypeCornerRadiusTopLeft() {
        return this.i.m1 ? this.i.m1.c : NaN;
    }
    set boxTypeCornerRadiusTopLeft(v) {
        this.ensureBoxTypeCornerRadius();
        this.i.m1.c = +v;
        this.i.m1 = this.i.m1;
    }
    get boxTypeCornerRadiusTopRight() {
        return this.i.m1 ? this.i.m1.d : NaN;
    }
    set boxTypeCornerRadiusTopRight(v) {
        this.ensureBoxTypeCornerRadius();
        this.i.m1.d = +v;
        this.i.m1 = this.i.m1;
    }
    ensureBoxTypeCornerRadius() {
        if (this.i.m1) {
            return;
        }
        this.i.m1 = new CornerRadius(2);
    }
    get boxTypeContentPaddingBottom() {
        return this.i.th ? this.i.th.b : NaN;
    }
    set boxTypeContentPaddingBottom(v) {
        this.ensureBoxTypeContentPadding();
        this.i.th.b = +v;
        this.i.th = this.i.th;
    }
    get boxTypeContentPaddingLeft() {
        return this.i.th ? this.i.th.c : NaN;
    }
    set boxTypeContentPaddingLeft(v) {
        this.ensureBoxTypeContentPadding();
        this.i.th.c = +v;
        this.i.th = this.i.th;
    }
    get boxTypeContentPaddingRight() {
        return this.i.th ? this.i.th.d : NaN;
    }
    set boxTypeContentPaddingRight(v) {
        this.ensureBoxTypeContentPadding();
        this.i.th.d = +v;
        this.i.th = this.i.th;
    }
    get boxTypeContentPaddingTop() {
        return this.i.th ? this.i.th.e : NaN;
    }
    set boxTypeContentPaddingTop(v) {
        this.ensureBoxTypeContentPadding();
        this.i.th.e = +v;
        this.i.th = this.i.th;
    }
    ensureBoxTypeContentPadding() {
        if (this.i.th) {
            return;
        }
        this.i.th = new Thickness(2);
    }
    /**
     * Gets or sets the width to use for the underline element when type is box.
    */
    get boxTypeUnderlineWidth() {
        return this.i.c4;
    }
    set boxTypeUnderlineWidth(v) {
        this.i.c4 = +v;
    }
    /**
     * Gets or sets the width to use for the underline element when type is box.
    */
    get boxTypeUnderlineRippleWidth() {
        return this.i.c3;
    }
    set boxTypeUnderlineRippleWidth(v) {
        this.i.c3 = +v;
    }
    /**
     * Gets or sets the width to use for the underline element when hovered when type is box.
    */
    get boxTypeHoverUnderlineWidth() {
        return this.i.c0;
    }
    set boxTypeHoverUnderlineWidth(v) {
        this.i.c0 = +v;
    }
    /**
     * Gets or sets the color to use for the underline element when type is box.
    */
    get boxTypeUnderlineColor() {
        return brushToString(this.i.pc);
    }
    set boxTypeUnderlineColor(v) {
        this.i.pc = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the underline ripple element when type is box.
    */
    get boxTypeUnderlineRippleColor() {
        return brushToString(this.i.pd);
    }
    set boxTypeUnderlineRippleColor(v) {
        this.i.pd = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the underline element when type is box.
    */
    get boxTypeHoverUnderlineColor() {
        return brushToString(this.i.pb);
    }
    set boxTypeHoverUnderlineColor(v) {
        this.i.pb = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the underline element when type is box.
    */
    get boxTypeFocusUnderlineColor() {
        return brushToString(this.i.pa);
    }
    set boxTypeFocusUnderlineColor(v) {
        this.i.pa = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the underline element when type is box.
    */
    get boxTypeUnderlineOpacity() {
        return this.i.c1;
    }
    set boxTypeUnderlineOpacity(v) {
        this.i.c1 = +v;
    }
    /**
     * Gets or sets the color to use for the underline element when type is box.
    */
    get boxTypeHoverUnderlineOpacity() {
        return this.i.cz;
    }
    set boxTypeHoverUnderlineOpacity(v) {
        this.i.cz = +v;
    }
    /**
     * Gets or sets the color to use for the underline element when type is box.
    */
    get boxTypeFocusUnderlineOpacity() {
        return this.i.cx;
    }
    set boxTypeFocusUnderlineOpacity(v) {
        this.i.cx = +v;
    }
    /**
     * Gets or sets the opacity to use for the underline ripple element when focused when type is box.
    */
    get boxTypeFocusUnderlineRippleOpacity() {
        return this.i.cy;
    }
    set boxTypeFocusUnderlineRippleOpacity(v) {
        this.i.cy = +v;
    }
    /**
     * Gets or sets the opacity to use for the underline ripple element when type is box.
    */
    get boxTypeUnderlineRippleOpacity() {
        return this.i.c2;
    }
    set boxTypeUnderlineRippleOpacity(v) {
        this.i.c2 = +v;
    }
    /**
     * Gets or sets the background color to use for the input group when type is box.
    */
    get boxTypeBackgroundColor() {
        return brushToString(this.i.o7);
    }
    set boxTypeBackgroundColor(v) {
        this.i.o7 = stringToBrush(v);
    }
    /**
     * Gets or sets the border width to use for the border of the item group when using type line.
    */
    get borderTypeBorderWidth() {
        return this.i.ck;
    }
    set borderTypeBorderWidth(v) {
        this.i.ck = +v;
    }
    /**
     * Gets or sets the border width to use for the border of the item group when focused when type is border.
    */
    get borderTypeFocusBorderWidth() {
        return this.i.cl;
    }
    set borderTypeFocusBorderWidth(v) {
        this.i.cl = +v;
    }
    /**
     * Gets or sets the focus color to use the border of the input group when type is border.
    */
    get borderTypeFocusBorderColor() {
        return brushToString(this.i.o2);
    }
    set borderTypeFocusBorderColor(v) {
        this.i.o2 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use the border of the input group when type is border.
    */
    get borderTypeBorderColor() {
        return brushToString(this.i.o1);
    }
    set borderTypeBorderColor(v) {
        this.i.o1 = stringToBrush(v);
    }
    get borderTypeCornerRadiusBottomRight() {
        return this.i.m0 ? this.i.m0.b : NaN;
    }
    set borderTypeCornerRadiusBottomRight(v) {
        this.ensureBorderTypeCornerRadius();
        this.i.m0.b = +v;
        this.i.m0 = this.i.m0;
    }
    get borderTypeCornerRadiusBottomLeft() {
        return this.i.m0 ? this.i.m0.a : NaN;
    }
    set borderTypeCornerRadiusBottomLeft(v) {
        this.ensureBorderTypeCornerRadius();
        this.i.m0.a = +v;
        this.i.m0 = this.i.m0;
    }
    get borderTypeCornerRadiusTopLeft() {
        return this.i.m0 ? this.i.m0.c : NaN;
    }
    set borderTypeCornerRadiusTopLeft(v) {
        this.ensureBorderTypeCornerRadius();
        this.i.m0.c = +v;
        this.i.m0 = this.i.m0;
    }
    get borderTypeCornerRadiusTopRight() {
        return this.i.m0 ? this.i.m0.d : NaN;
    }
    set borderTypeCornerRadiusTopRight(v) {
        this.ensureBorderTypeCornerRadius();
        this.i.m0.d = +v;
        this.i.m0 = this.i.m0;
    }
    ensureBorderTypeCornerRadius() {
        if (this.i.m0) {
            return;
        }
        this.i.m0 = new CornerRadius(2);
    }
    get borderTypeContentPaddingBottom() {
        return this.i.tg ? this.i.tg.b : NaN;
    }
    set borderTypeContentPaddingBottom(v) {
        this.ensureBorderTypeContentPadding();
        this.i.tg.b = +v;
        this.i.tg = this.i.tg;
    }
    get borderTypeContentPaddingLeft() {
        return this.i.tg ? this.i.tg.c : NaN;
    }
    set borderTypeContentPaddingLeft(v) {
        this.ensureBorderTypeContentPadding();
        this.i.tg.c = +v;
        this.i.tg = this.i.tg;
    }
    get borderTypeContentPaddingRight() {
        return this.i.tg ? this.i.tg.d : NaN;
    }
    set borderTypeContentPaddingRight(v) {
        this.ensureBorderTypeContentPadding();
        this.i.tg.d = +v;
        this.i.tg = this.i.tg;
    }
    get borderTypeContentPaddingTop() {
        return this.i.tg ? this.i.tg.e : NaN;
    }
    set borderTypeContentPaddingTop(v) {
        this.ensureBorderTypeContentPadding();
        this.i.tg.e = +v;
        this.i.tg = this.i.tg;
    }
    ensureBorderTypeContentPadding() {
        if (this.i.tg) {
            return;
        }
        this.i.tg = new Thickness(2);
    }
    /**
     * Gets or sets the width to use for the underline element when type is border.
    */
    get borderTypeUnderlineWidth() {
        return this.i.ct;
    }
    set borderTypeUnderlineWidth(v) {
        this.i.ct = +v;
    }
    /**
     * Gets or sets the width to use for the underline element when type is border.
    */
    get borderTypeUnderlineRippleWidth() {
        return this.i.cs;
    }
    set borderTypeUnderlineRippleWidth(v) {
        this.i.cs = +v;
    }
    /**
     * Gets or sets the width to use for the underline element when hovered when type is border.
    */
    get borderTypeHoverUnderlineWidth() {
        return this.i.cp;
    }
    set borderTypeHoverUnderlineWidth(v) {
        this.i.cp = +v;
    }
    /**
     * Gets or sets the color to use for the underline element when type is border.
    */
    get borderTypeUnderlineColor() {
        return brushToString(this.i.o5);
    }
    set borderTypeUnderlineColor(v) {
        this.i.o5 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the underline ripple element when type is border.
    */
    get borderTypeUnderlineRippleColor() {
        return brushToString(this.i.o6);
    }
    set borderTypeUnderlineRippleColor(v) {
        this.i.o6 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the underline element when type is border.
    */
    get borderTypeHoverUnderlineColor() {
        return brushToString(this.i.o4);
    }
    set borderTypeHoverUnderlineColor(v) {
        this.i.o4 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the underline element when type is border.
    */
    get borderTypeFocusUnderlineColor() {
        return brushToString(this.i.o3);
    }
    set borderTypeFocusUnderlineColor(v) {
        this.i.o3 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the underline element when type is border.
    */
    get borderTypeUnderlineOpacity() {
        return this.i.cq;
    }
    set borderTypeUnderlineOpacity(v) {
        this.i.cq = +v;
    }
    /**
     * Gets or sets the color to use for the underline element when type is border.
    */
    get borderTypeHoverUnderlineOpacity() {
        return this.i.co;
    }
    set borderTypeHoverUnderlineOpacity(v) {
        this.i.co = +v;
    }
    /**
     * Gets or sets the color to use for the underline element when type is border.
    */
    get borderTypeFocusUnderlineOpacity() {
        return this.i.cm;
    }
    set borderTypeFocusUnderlineOpacity(v) {
        this.i.cm = +v;
    }
    /**
     * Gets or sets the opacity to use for the underline ripple element when focused when type is border.
    */
    get borderTypeFocusUnderlineRippleOpacity() {
        return this.i.cn;
    }
    set borderTypeFocusUnderlineRippleOpacity(v) {
        this.i.cn = +v;
    }
    /**
     * Gets or sets the opacity to use for the underline ripple element when type is border.
    */
    get borderTypeUnderlineRippleOpacity() {
        return this.i.cr;
    }
    set borderTypeUnderlineRippleOpacity(v) {
        this.i.cr = +v;
    }
    /**
     * Gets or sets the background color to use for the input group when type is border.
    */
    get borderTypeBackgroundColor() {
        return brushToString(this.i.o0);
    }
    set borderTypeBackgroundColor(v) {
        this.i.o0 = stringToBrush(v);
    }
    /**
     * Gets or sets the search width to use for the border of the item group when using type line.
    */
    get searchTypeBorderWidth() {
        return this.i.hr;
    }
    set searchTypeBorderWidth(v) {
        this.i.hr = +v;
    }
    /**
     * Gets or sets the search width to use for the border of the item group when focused when type is search.
    */
    get searchTypeFocusBorderWidth() {
        return this.i.hs;
    }
    set searchTypeFocusBorderWidth(v) {
        this.i.hs = +v;
    }
    /**
     * Gets or sets the focus color to use the search of the input group when type is search.
    */
    get searchTypeFocusBorderColor() {
        return brushToString(this.i.s2);
    }
    set searchTypeFocusBorderColor(v) {
        this.i.s2 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use the search of the input group when type is search.
    */
    get searchTypeBorderColor() {
        return brushToString(this.i.s1);
    }
    set searchTypeBorderColor(v) {
        this.i.s1 = stringToBrush(v);
    }
    get searchTypeCornerRadiusBottomRight() {
        return this.i.nk ? this.i.nk.b : NaN;
    }
    set searchTypeCornerRadiusBottomRight(v) {
        this.ensureSearchTypeCornerRadius();
        this.i.nk.b = +v;
        this.i.nk = this.i.nk;
    }
    get searchTypeCornerRadiusBottomLeft() {
        return this.i.nk ? this.i.nk.a : NaN;
    }
    set searchTypeCornerRadiusBottomLeft(v) {
        this.ensureSearchTypeCornerRadius();
        this.i.nk.a = +v;
        this.i.nk = this.i.nk;
    }
    get searchTypeCornerRadiusTopLeft() {
        return this.i.nk ? this.i.nk.c : NaN;
    }
    set searchTypeCornerRadiusTopLeft(v) {
        this.ensureSearchTypeCornerRadius();
        this.i.nk.c = +v;
        this.i.nk = this.i.nk;
    }
    get searchTypeCornerRadiusTopRight() {
        return this.i.nk ? this.i.nk.d : NaN;
    }
    set searchTypeCornerRadiusTopRight(v) {
        this.ensureSearchTypeCornerRadius();
        this.i.nk.d = +v;
        this.i.nk = this.i.nk;
    }
    ensureSearchTypeCornerRadius() {
        if (this.i.nk) {
            return;
        }
        this.i.nk = new CornerRadius(2);
    }
    get searchTypeContentPaddingBottom() {
        return this.i.t0 ? this.i.t0.b : NaN;
    }
    set searchTypeContentPaddingBottom(v) {
        this.ensureSearchTypeContentPadding();
        this.i.t0.b = +v;
        this.i.t0 = this.i.t0;
    }
    get searchTypeContentPaddingLeft() {
        return this.i.t0 ? this.i.t0.c : NaN;
    }
    set searchTypeContentPaddingLeft(v) {
        this.ensureSearchTypeContentPadding();
        this.i.t0.c = +v;
        this.i.t0 = this.i.t0;
    }
    get searchTypeContentPaddingRight() {
        return this.i.t0 ? this.i.t0.d : NaN;
    }
    set searchTypeContentPaddingRight(v) {
        this.ensureSearchTypeContentPadding();
        this.i.t0.d = +v;
        this.i.t0 = this.i.t0;
    }
    get searchTypeContentPaddingTop() {
        return this.i.t0 ? this.i.t0.e : NaN;
    }
    set searchTypeContentPaddingTop(v) {
        this.ensureSearchTypeContentPadding();
        this.i.t0.e = +v;
        this.i.t0 = this.i.t0;
    }
    ensureSearchTypeContentPadding() {
        if (this.i.t0) {
            return;
        }
        this.i.t0 = new Thickness(2);
    }
    /**
     * Gets or sets the width to use for the underline element when type is search.
    */
    get searchTypeUnderlineWidth() {
        return this.i.h0;
    }
    set searchTypeUnderlineWidth(v) {
        this.i.h0 = +v;
    }
    /**
     * Gets or sets the width to use for the underline element when type is search.
    */
    get searchTypeUnderlineRippleWidth() {
        return this.i.hz;
    }
    set searchTypeUnderlineRippleWidth(v) {
        this.i.hz = +v;
    }
    /**
     * Gets or sets the width to use for the underline element when hovered when type is search.
    */
    get searchTypeHoverUnderlineWidth() {
        return this.i.hw;
    }
    set searchTypeHoverUnderlineWidth(v) {
        this.i.hw = +v;
    }
    /**
     * Gets or sets the color to use for the underline element when type is search.
    */
    get searchTypeUnderlineColor() {
        return brushToString(this.i.s5);
    }
    set searchTypeUnderlineColor(v) {
        this.i.s5 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the underline ripple element when type is search.
    */
    get searchTypeUnderlineRippleColor() {
        return brushToString(this.i.s6);
    }
    set searchTypeUnderlineRippleColor(v) {
        this.i.s6 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the underline element when type is search.
    */
    get searchTypeHoverUnderlineColor() {
        return brushToString(this.i.s4);
    }
    set searchTypeHoverUnderlineColor(v) {
        this.i.s4 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the underline element when type is search.
    */
    get searchTypeFocusUnderlineColor() {
        return brushToString(this.i.s3);
    }
    set searchTypeFocusUnderlineColor(v) {
        this.i.s3 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the underline element when type is search.
    */
    get searchTypeUnderlineOpacity() {
        return this.i.hx;
    }
    set searchTypeUnderlineOpacity(v) {
        this.i.hx = +v;
    }
    /**
     * Gets or sets the color to use for the underline element when type is search.
    */
    get searchTypeHoverUnderlineOpacity() {
        return this.i.hv;
    }
    set searchTypeHoverUnderlineOpacity(v) {
        this.i.hv = +v;
    }
    /**
     * Gets or sets the color to use for the underline element when type is search.
    */
    get searchTypeFocusUnderlineOpacity() {
        return this.i.ht;
    }
    set searchTypeFocusUnderlineOpacity(v) {
        this.i.ht = +v;
    }
    /**
     * Gets or sets the opacity to use for the underline ripple element when focused when type is search.
    */
    get searchTypeFocusUnderlineRippleOpacity() {
        return this.i.hu;
    }
    set searchTypeFocusUnderlineRippleOpacity(v) {
        this.i.hu = +v;
    }
    /**
     * Gets or sets the opacity to use for the underline ripple element when type is search.
    */
    get searchTypeUnderlineRippleOpacity() {
        return this.i.hy;
    }
    set searchTypeUnderlineRippleOpacity(v) {
        this.i.hy = +v;
    }
    /**
     * Gets or sets the background color to use for the input group when type is search.
    */
    get searchTypeBackgroundColor() {
        return brushToString(this.i.s0);
    }
    set searchTypeBackgroundColor(v) {
        this.i.s0 = stringToBrush(v);
    }
    /**
     * Gets or sets whether the input group is expanded or not.
    */
    get isExpanded() {
        return this.i.ah;
    }
    set isExpanded(v) {
        this.i.ah = ensureBool(v);
    }
    /**
     * Gets or sets whether the input group is hovered or not.
    */
    get isHovered() {
        return this.i.aj;
    }
    set isHovered(v) {
        this.i.aj = ensureBool(v);
    }
    /**
     * Gets or sets whether the input group is hovered or not.
    */
    get isFocused() {
        return this.i.ai;
    }
    set isFocused(v) {
        this.i.ai = ensureBool(v);
    }
    /**
     * Gets or sets whether the input group is expanded or not.
    */
    get actualIsExpanded() {
        return this.i.ac;
    }
    set actualIsExpanded(v) {
        this.i.ac = ensureBool(v);
    }
    /**
     * Gets or sets the color to use the hovered background of the inputs in the group.
    */
    get focusBorderColor() {
        return brushToString(this.i.sq);
    }
    set focusBorderColor(v) {
        this.i.sq = stringToBrush(v);
    }
    /**
     * Gets or sets the id to use for the checkbox.
    */
    get id() {
        return this.i.ki;
    }
    set id(v) {
        this.i.ki = v;
    }
    /**
     * Gets or sets whether the checkbox is disabled.
    */
    get disabled() {
        return this.i.disabled;
    }
    set disabled(v) {
        this.i.disabled = ensureBool(v);
    }
    findByName(name) {
        if (this.inputs != null && this.inputs.findByName && this.inputs.findByName(name)) {
            return this.inputs.findByName(name);
        }
        return null;
    }
    get hasUserValues() {
        return this._hasUserValues;
    }
    __m(propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    }
    _styling(container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        let genericPrefix = "";
        let typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("InputGroup");
        let additionalPrefixes = [];
        let prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        let b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            let basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            let parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            let parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    }
    onDetachedFromUI() {
        this.i.onDetachedFromUI();
    }
    onAttachedToUI() {
        this.i.onAttachedToUI();
    }
    /**
     * Exports visual information about the current state of the grid.
    
    */
    exportVisualModel() {
        let iv = this.i.ia();
        return (iv);
    }
    /**
     * Returns a serialized copy of the exported visual model
    
    */
    exportSerializedVisualModel() {
        let iv = this.i.j9();
        return (iv);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrInputGroupModule {
    static register() {
        IgrChildContentModule.register();
        IgrInputModule.register();
        IgrLabelModule.register();
        TypeRegistrar.registerCons('IgrInputGroup', IgrInputGroup);
        TypeRegistrar.registerCons('IgrInputGroup', IgrInputGroup);
        TypeRegistrar.register('InputGroup', InputGroup.$type);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrDatePickerModule {
    static register() {
        IgrCalendarModule.register();
        IgrButtonModule.register();
        IgrIconModule.register();
        IgrInputGroupModule.register();
        TypeRegistrar.registerCons('IgrDatePicker', IgrDatePicker);
        TypeRegistrar.registerCons('IgrDatePicker', IgrDatePicker);
        TypeRegistrar.register('DatePicker', DatePicker.$type);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let CheckboxLabelPosition_$type = /*@__PURE__*/ markEnum('CheckboxLabelPosition', 'After,0|Before,1');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let CheckboxChangeEventArgs = /*@__PURE__*/ (() => {
    class CheckboxChangeEventArgs extends EventArgs {
        constructor() {
            super(...arguments);
            this._isChecked = false;
            this._isIndeterminate = false;
        }
        get isChecked() {
            return this._isChecked;
        }
        set isChecked(a) {
            this._isChecked = a;
        }
        get isIndeterminate() {
            return this._isIndeterminate;
        }
        set isIndeterminate(a) {
            this._isIndeterminate = a;
        }
    }
    CheckboxChangeEventArgs.$t = /*@__PURE__*/ markType(CheckboxChangeEventArgs, 'CheckboxChangeEventArgs', EventArgs.$);
    return CheckboxChangeEventArgs;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let CheckboxVisualModelExport = /*@__PURE__*/ (() => {
    class CheckboxVisualModelExport extends Base {
        constructor() {
            super(...arguments);
            this.f = 0;
            this.d = null;
            this.c = null;
            this.e = null;
            this.b = null;
            this.o = 0;
            this.l = 0;
            this.p = 0;
            this.q = 0;
            this.n = 0;
            this.m = 0;
            this.a = null;
            this.r = null;
            this.j = false;
            this.g = false;
            this.h = false;
            this.k = false;
            this.i = false;
        }
        s() {
            let a = new StringBuilder(0);
            a.l("{");
            a.l("baseTheme : " + this.f + ", ");
            a.l("actualUncheckedBackgroundColor : " + this.d.serialize() + ", ");
            a.l("actualTickColor : " + this.c + ", ");
            a.l("actualUncheckedBorderColor : " + this.e.serialize() + ", ");
            a.l("actualCheckedBorderColor : " + this.b.serialize() + ", ");
            a.l("borderWidth : " + this.o + ", ");
            a.l("actualBorderWidth : " + this.l + ", ");
            a.l("tickStrokeWidth : " + this.q + ", ");
            a.l("actualTickStrokeWidth : " + this.n + ", ");
            a.l("actualCheckedBackgroundColor : " + this.a.serialize() + ", ");
            if (this.r != null) {
                a.l("value : \"" + this.r.toString() + "\", ");
            }
            a.l("isFocused : " + this.j + ", ");
            a.l("disableRipple : " + this.g + ", ");
            a.l("isChecked : " + this.h + ", ");
            a.l("isIndeterminate : " + this.k + ", ");
            a.l("isDisabled : " + this.i + ", ");
            a.l("}");
            return a.toString();
        }
    }
    CheckboxVisualModelExport.$t = /*@__PURE__*/ markType(CheckboxVisualModelExport, 'CheckboxVisualModelExport');
    return CheckboxVisualModelExport;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let CheckboxView = /*@__PURE__*/ (() => {
    class CheckboxView extends Base {
        constructor() {
            super();
            this.c = null;
            this.l = null;
            this.f = null;
            this.j = new List$1(Delegate_$type, 0);
            this.g = true;
            this.q = null;
            this.m = null;
            this.p = null;
            this.n = null;
            this.d = null;
            this.o = null;
        }
        ad() {
        }
        i() {
            return true;
        }
        ab(a) {
            if (a == null) {
                for (let b of fromEnum(this.j)) {
                    b();
                }
                this.j.clear();
                return;
            }
            this.l = a;
            this.l.rootWrapper.setStyleProperty("display", "flex");
            this.l.rootWrapper.setStyleProperty("flex-direction", "row");
            this.l.rootWrapper.setStyleProperty("flex-wrap", "no-wrap");
            this.l.rootWrapper.setStyleProperty("align-items", "center");
            let c = this.l.createElement("input");
            this.q = c;
            this.q.addClass("ig-native-checkbox");
            this.q.setStyleProperty("position", "absolute");
            this.q.setStyleProperty("width", "1px");
            this.q.setStyleProperty("height", "1px");
            this.q.setStyleProperty("margin", "-1px");
            this.q.setStyleProperty("border", "none");
            this.q.setStyleProperty("clip", "rect(0, 0, 0, 0)");
            this.q.setStyleProperty("outline", "0");
            this.q.setStyleProperty("pointer-events", "none");
            this.q.setStyleProperty("overflow", "hidden");
            this.q.setStyleProperty("-webkit-appearance", "none");
            this.q.setStyleProperty("-moz-appearance", "none");
            this.q.setStyleProperty("appearance", "none");
            this.q.setAttribute("type", "checkbox");
            this.q.setAttribute("id", this.c.by);
            this.ag();
            this.j.add(c.listen("change", runOn(this, this.v)));
            this.j.add(c.listen("click", runOn(this, this.w)));
            this.j.add(c.listen("focus", runOn(this, this.x)));
            this.j.add(c.listen("blur", runOn(this, this.u)));
            this.l.append(c);
            let d = this.l.createElement("div");
            d.addClass("ig-checkbox-box");
            d.setStyleProperty("width", "1.25em");
            d.setStyleProperty("height", "1.25em");
            d.setStyleProperty("position", "relative");
            this.m = d;
            this.l.append(d);
            let e = this.l.createElement("label");
            e.setAttribute("for", this.c.by);
            e.addClass("ig-checkbox-composite");
            e.setStyleProperty("box-sizing", "border-box");
            e.setStyleProperty("position", "relative");
            e.setStyleProperty("display", "inline-block");
            e.setStyleProperty("cursor", "pointer");
            e.setStyleProperty("width", "1.25em");
            e.setStyleProperty("height", "1.25em");
            e.setStyleProperty("min-width", "1.25em");
            e.setStyleProperty("border-width", "0.125rem");
            e.setStyleProperty("border-style", "solid");
            e.setStyleProperty("border-color", "rgba(0,0,0,0.54)");
            e.setStyleProperty("border-top-color", "rgba(0, 0, 0, 0.54)");
            e.setStyleProperty("border-right-color", "rgba(0, 0, 0, 0.54)");
            e.setStyleProperty("border-bottom-color", "rgba(0, 0, 0, 0.54)");
            e.setStyleProperty("border-left-color", "rgba(0, 0, 0, 0.54)");
            e.setStyleProperty("border-radius", "2px");
            e.setStyleProperty("-webkit-tap-highlight-color", "transparent");
            e.setStyleProperty("overflow", "hidden");
            this.p = e;
            this.m.append(e);
            let f = this.l.createElementNS("svg", "http://www.w3.org/2000/svg");
            f.setAttribute("viewBox", "0 0 24 24");
            f.addClass("ig-checkbox-mark");
            f.setStyleProperty("position", "absolute");
            f.setStyleProperty("top", "0");
            f.setStyleProperty("left", "0");
            f.setStyleProperty("right", "0");
            f.setStyleProperty("bottom", "0");
            f.setStyleProperty("stroke", "#fff");
            f.setStyleProperty("stroke-linecap", "square");
            f.setStyleProperty("stroke-width", "3");
            f.setStyleProperty("stroke-dasharray", "24");
            f.setStyleProperty("stroke-dashoffset", "24");
            f.setStyleProperty("fill", "none");
            f.setStyleProperty("opacity", "0");
            f.setStyleProperty("z-index", "1");
            this.n = f;
            e.append(f);
            let g = this.l.createElementNS("path", "http://www.w3.org/2000/svg");
            g.setAttribute("d", "M4.1,12.7 9,17.6 20.3,6.3");
            f.append(g);
            let h = this.l.createElement("div");
            let i = this.l.getSubRenderer(h);
            h.setStyleProperty("position", "absolute");
            h.setStyleProperty("width", "3em");
            h.setStyleProperty("height", "3em");
            h.setStyleProperty("right", "calc(50% - 1.5em)");
            h.setStyleProperty("top", "calc(50% - 1.5em)");
            h.setStyleProperty("border-radius", "24px");
            h.setStyleProperty("overflow", "hidden");
            let j = new Ripple();
            j.provideContainer(i);
            j.q = d;
            let k = this.l.getExternal(j, this.l.rootWrapper, this.l.getExternal(this.c, null, null));
            j.h = true;
            j.k = true;
            this.d = j;
            d.append(h);
            let l = this.l.createElement("span");
            l.addClass("ig-checkbox-label");
            l.setStyleProperty("font-family", "'Segoe UI', Verdana");
            l.setStyleProperty("font-weight", "400");
            l.setStyleProperty("font-size", "1rem");
            l.setStyleProperty("letter-spacing", ".00937rem");
            l.setStyleProperty("text-transform", "none");
            l.setStyleProperty("line-height", "1.5rem");
            l.setStyleProperty("margin-left", "8px");
            l.setStyleProperty("margin-top", "0");
            l.setStyleProperty("margin-bottom", "0");
            l.setStyleProperty("cursor", "pointer");
            l.setStyleProperty("role", "label");
            this.o = l;
            this.j.add(l.listen("click", runOn(this, this.t)));
            this.l.append(l);
            this.l.getPortal(l, "ChildContent", (m) => {
            }, true);
            this.c.cm();
        }
        t(a) {
            this.c.toggle();
        }
        ag() {
            if (this.i()) {
                let a = this.c.by;
                this.q.setAttribute("name", this.c.b7);
                this.q.setProperty("value", this.c.a5);
                if (this.c.v) {
                    this.q.setAttribute("tabindex", this.c.a0.toString());
                }
                this.q.setProperty("disabled", this.c.disabled);
                this.q.setProperty("indeterminate", this.c.indeterminate);
                this.q.setProperty("checked", this.c.checked);
                this.q.setProperty("required", this.c.az);
                if (this.c.indeterminate) {
                    this.q.setAttribute("aria-checked", "mixed");
                }
                else {
                    this.q.setAttribute("aria-checked", this.c.checked ? "true" : "false");
                }
                this.q.setAttribute("aria-labelledby", this.c.bl);
                this.q.setAttribute("aria-label", this.c.bk);
            }
        }
        ae() {
            if (this.i()) {
                let a = this.c.by;
                this.q.setAttribute("id", a);
                this.p.setAttribute("for", a);
            }
        }
        u(a) {
            this.c.focused = false;
        }
        x(a) {
            this.c.focused = true;
        }
        w(a) {
            a.stopPropagation();
            if (this.h()) {
                let native_ = this.q.getNativeElement();
                native_.blur();
            }
            this.c.toggle();
        }
        h() {
            return false;
        }
        v(a) {
            a.stopPropagation();
        }
        y() {
            if (KeyFrameAnimationFactory.h == null) {
                KeyFrameAnimationFactory.h = this.l;
            }
        }
        a(a) {
            return new AnimationKeyFrameEffect(0, this.p, 0, null, a);
        }
        b(a) {
            return new AnimationKeyFrameEffect(0, this.n, 0, null, a);
        }
        z(a) {
        }
        get r() {
            return this.p;
        }
        get e() {
            return this.d;
        }
        get s() {
            return this.n;
        }
        aa() {
            this.g = true;
            this.j.add(this.q.listen("change", runOn(this, this.v)));
            this.j.add(this.q.listen("click", runOn(this, this.w)));
            this.j.add(this.q.listen("focus", runOn(this, this.x)));
            this.j.add(this.q.listen("blur", runOn(this, this.u)));
            this.j.add(this.o.listen("click", runOn(this, this.t)));
        }
        ac() {
            this.g = false;
            for (let a of fromEnum(this.j)) {
                a();
            }
            this.j.clear();
        }
        af() {
            let model_ = this.c;
            if (model_.externalObject && model_.externalObject.refreshDefaults) {
                model_.externalObject.refreshDefaults();
            }
            ;
        }
        ah(a, b) {
            this.d.ax = a;
            this.d.aw = b;
        }
        k() {
            let a = this.p.getStyleProperty("border-top-width");
            a = stringReplace(a, "px", "");
            return parseFloat(a);
        }
    }
    CheckboxView.$t = /*@__PURE__*/ markType(CheckboxView, 'CheckboxView');
    return CheckboxView;
})();
/**
 * @hidden
 */
let Checkbox = /*@__PURE__*/ (() => {
    class Checkbox extends Base {
        constructor() {
            super();
            this._view = null;
            this.b = 0;
            this.n = false;
            this.ab = false;
            this.c3 = null;
            this.cy = ThemeResolver.e(Checkbox.c, Checkbox.dm, Checkbox.dh);
            this.c0 = null;
            this.c2 = null;
            this.cx = ThemeResolver.e(Checkbox.c, Checkbox.dl, Checkbox.dg);
            this.c4 = null;
            this.c1 = null;
            this.dr = ThemeResolver.e(Checkbox.c, Checkbox.dn, Checkbox.di);
            this.dd = ThemeResolver.e(Checkbox.c, Checkbox.dk, Checkbox.df);
            this.an = ThemeResolver.b(Checkbox.c, Checkbox.as, Checkbox.ap);
            this.dc = ThemeResolver.e(Checkbox.c, Checkbox.dj, Checkbox.de);
            this.ao = ThemeResolver.b(Checkbox.c, Checkbox.at, Checkbox.aq);
            this.dp = ThemeResolver.e(Checkbox.c, Checkbox.dl, Checkbox.dg);
            this.av = ThemeResolver.b(Checkbox.c, Checkbox.au, Checkbox.ar);
            this.dq = ThemeResolver.e(Checkbox.c, Checkbox.dm, Checkbox.dh);
            this.cz = ThemeResolver.e(Checkbox.c, Checkbox.dn, Checkbox.di);
            this.cw = ThemeResolver.e(Checkbox.c, Checkbox.dk, Checkbox.df);
            this.af = NaN;
            this.ac = ThemeResolver.b(Checkbox.c, Checkbox.as, Checkbox.ap);
            this.ag = NaN;
            this.ah = NaN;
            this.ae = ThemeResolver.b(Checkbox.c, Checkbox.au, Checkbox.ar);
            this.ad = ThemeResolver.b(Checkbox.c, Checkbox.at, Checkbox.aq);
            this.cv = ThemeResolver.e(Checkbox.c, Checkbox.dj, Checkbox.de);
            this.a9 = "ig-native-checkbox-" + Checkbox.a2++;
            this.a8 = "ig-checkbox-" + Checkbox.a1++;
            this.ba = null;
            this.a3 = null;
            this.bb = null;
            this.ay = 0;
            this.o = false;
            this.ax = 0;
            this.r = false;
            this.a7 = null;
            this.a6 = null;
            this.change = null;
            this.g = 0;
            this.l = false;
            this.p = false;
            this.s = false;
            this.q = false;
            this.m = false;
            this.j = null;
            this.k = null;
            this.propertyChanged = null;
            this.ba = this.a8 + "-label";
            this.a7 = this.ba;
            let a = new CheckboxView();
            a.c = this;
            this.view = a;
            this.view.ad();
        }
        get view() {
            return this._view;
        }
        set view(a) {
            this._view = a;
        }
        get d() {
            return this.b;
        }
        set d(a) {
            let b = this.b;
            this.b = a;
            if (b != this.b) {
                this.cl("BaseTheme", enumGetBox(BaseControlTheme_$type, b), enumGetBox(BaseControlTheme_$type, a));
            }
        }
        destroy() {
            this.provideContainer(null);
        }
        cl(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            this.cn(a, b, c);
        }
        cr() {
            this.c7 = this.ds != null ? this.ds : this.dp;
            this.c9 = this.du != null ? this.du : this.dr;
            this.c6 = this.db != null ? this.db : this.dd;
            this.ai = !isNaN_(this.al) ? this.al : this.an;
            this.c5 = this.da != null ? this.da : this.dc;
            this.c8 = this.dt != null ? this.dt : this.dq;
            this.aj = !isNaN_(this.am) ? this.am : this.ao;
            this.ak = !isNaN_(this.aw) ? this.aw : this.av;
        }
        cn(a, b, c) {
            switch (a) {
                case "BaseTheme":
                    this.cu(this.d);
                    this.cr();
                    break;
                case "TickColor":
                    this.c7 = this.ds != null ? this.ds : this.dp;
                    break;
                case "UncheckedBorderColor":
                    this.c9 = this.du != null ? this.du : this.dr;
                    break;
                case "CheckedBorderColor":
                    this.c6 = this.db != null ? this.db : this.dd;
                    break;
                case "BorderWidth":
                    this.ai = !isNaN_(this.al) ? this.al : this.an;
                    break;
                case "CheckedBackgroundColor":
                    this.c5 = this.da != null ? this.da : this.dc;
                    break;
                case "UncheckedBackgroundColor":
                    this.c8 = this.dt != null ? this.dt : this.dq;
                    break;
                case "CornerRadius":
                    this.aj = !isNaN_(this.am) ? this.am : this.ao;
                    break;
                case "TickStrokeWidth":
                    this.ak = !isNaN_(this.aw) ? this.aw : this.av;
                    break;
                case "ActualTickStrokeWidth":
                case "ActualTickColor":
                    this.ct();
                    break;
                case "ActualCheckedBackgroundColor":
                case "ActualUncheckedBackgroundColor":
                case "ActualUncheckedBorderColor":
                case "ActualCheckedBorderColor":
                case "ActualBorderWidth":
                    if (this.j != null) {
                        this.j.cancel();
                    }
                    if (this.k != null) {
                        this.k.cancel();
                    }
                    this.j = null;
                    this.k = null;
                    this.cq();
                    let d = (this.u);
                    this.u = true;
                    this.cs(this.indeterminate);
                    this.u = d;
                    break;
                case "ActualCornerRadius":
                    this.cq();
                    break;
                case "IsChecked":
                    if (!this.n) {
                        let e = this.indeterminate;
                        this.n = true;
                        this.indeterminate = false;
                        this.n = false;
                        let f = (this.u);
                        this.u = true;
                        this.cs(e);
                        this.u = f;
                    }
                    break;
                case "IsIndeterminate":
                    if (!this.n) {
                        this.cs(b);
                    }
                    break;
                case "DisableRipple":
                    this.view.e.i = this.t;
                    break;
                case "InputId":
                    this.view.ae();
                    break;
            }
        }
        cq() {
            let a = this.view.r;
            NativeUI.l(a, new CornerRadius(0, this.aj));
            if (!isNaN_(this.ai)) {
                NativeUI.m(a, new Thickness(0, this.ai));
            }
            if (this.checked) {
                NativeUI.j(a, this.c5);
                NativeUI.k(a, this.c6);
            }
            else {
                NativeUI.j(a, this.c8);
                NativeUI.k(a, this.c9);
            }
        }
        ct() {
            let a = this.view.s;
            NativeUI.v(a, this.c7);
            NativeUI.y(a, this.ak);
        }
        get dt() {
            return this.c3;
        }
        set dt(a) {
            let b = this.c3;
            this.c3 = a;
            if (b != this.c3) {
                this.cl("UncheckedBackgroundColor", b, a);
            }
        }
        get c8() {
            return this.cy;
        }
        set c8(a) {
            let b = this.cy;
            this.cy = a;
            if (b != this.cy) {
                this.cl("ActualUncheckedBackgroundColor", b, a);
            }
        }
        get da() {
            return this.c0;
        }
        set da(a) {
            let b = this.c0;
            this.c0 = a;
            if (b != this.c0) {
                this.cl("CheckedBackgroundColor", b, a);
            }
        }
        get ds() {
            return this.c2;
        }
        set ds(a) {
            let b = this.c2;
            this.c2 = a;
            if (b != this.c2) {
                this.cl("TickColor", b, a);
            }
        }
        get c7() {
            return this.cx;
        }
        set c7(a) {
            let b = this.cx;
            this.cx = a;
            if (b != this.cx) {
                this.cl("ActualTickColor", b, a);
            }
        }
        get du() {
            return this.c4;
        }
        set du(a) {
            let b = this.c4;
            this.c4 = a;
            if (b != this.c4) {
                this.cl("UncheckedBorderColor", b, a);
            }
        }
        get db() {
            return this.c1;
        }
        set db(a) {
            let b = this.c1;
            this.c1 = a;
            if (b != this.c1) {
                this.cl("CheckedBorderColor", b, a);
            }
        }
        cu(a) {
            this.dr = ThemeResolver.e(a, Checkbox.dn, Checkbox.di);
            this.dd = ThemeResolver.e(a, Checkbox.dk, Checkbox.df);
            this.an = ThemeResolver.b(a, Checkbox.as, Checkbox.ap);
            this.dc = ThemeResolver.e(a, Checkbox.dj, Checkbox.de);
            this.ao = ThemeResolver.b(a, Checkbox.at, Checkbox.aq);
            this.dp = ThemeResolver.e(a, Checkbox.dl, Checkbox.dg);
            this.av = ThemeResolver.b(a, Checkbox.au, Checkbox.ar);
            this.dq = ThemeResolver.e(a, Checkbox.dm, Checkbox.dh);
        }
        get c9() {
            return this.cz;
        }
        set c9(a) {
            let b = this.cz;
            this.cz = a;
            if (b != this.cz) {
                this.cl("ActualUncheckedBorderColor", b, a);
            }
        }
        get c6() {
            return this.cw;
        }
        set c6(a) {
            let b = this.cw;
            this.cw = a;
            if (b != this.cw) {
                this.cl("ActualCheckedBorderColor", b, a);
            }
        }
        get al() {
            return this.af;
        }
        set al(a) {
            let b = this.af;
            this.af = a;
            if (b != this.af) {
                this.cl("BorderWidth", b, a);
            }
        }
        get ai() {
            return this.ac;
        }
        set ai(a) {
            let b = this.ac;
            this.ac = a;
            if (b != this.ac) {
                this.cl("ActualBorderWidth", b, a);
            }
        }
        get am() {
            return this.ag;
        }
        set am(a) {
            let b = this.ag;
            this.ag = a;
            if (b != this.ag) {
                this.cl("CornerRadius", b, a);
            }
        }
        get aw() {
            return this.ah;
        }
        set aw(a) {
            let b = this.ah;
            this.ah = a;
            if (b != this.ah) {
                this.cl("TickStrokeWidth", b, a);
            }
        }
        get ak() {
            return this.ae;
        }
        set ak(a) {
            let b = this.ae;
            this.ae = a;
            if (b != this.ae) {
                this.cl("ActualTickStrokeWidth", b, a);
            }
        }
        get aj() {
            return this.ad;
        }
        set aj(a) {
            let b = this.ad;
            this.ad = a;
            if (b != this.ad) {
                this.cl("ActualCornerRadius", b, a);
            }
        }
        get c5() {
            return this.cv;
        }
        set c5(a) {
            let b = this.cv;
            this.cv = a;
            if (b != this.cv) {
                this.cl("ActualCheckedBackgroundColor", b, a);
            }
        }
        get by() {
            return this.a9;
        }
        set by(a) {
            let b = this.a9;
            this.a9 = a;
            if (b != this.a9) {
                this.cl("InputId", b, a);
            }
        }
        get bw() {
            return this.a8;
        }
        set bw(a) {
            let b = this.a8;
            this.a8 = a;
            if (b != this.a8) {
                this.cl("Id", b, a);
            }
        }
        get labelId() {
            return this.ba;
        }
        set labelId(a) {
            let b = this.ba;
            this.ba = a;
            if (b != this.ba) {
                this.cl("LabelId", b, a);
            }
        }
        get a5() {
            return this.a3;
        }
        set a5(a) {
            let b = this.a3;
            this.a3 = a;
            if (b != this.a3) {
                this.cl("Value", b, a);
            }
        }
        get b7() {
            return this.bb;
        }
        set b7(a) {
            let b = this.bb;
            this.bb = a;
            if (b != this.bb) {
                this.cl("Name", b, a);
            }
        }
        get v() {
            return this.o;
        }
        get a0() {
            return this.ay;
        }
        set a0(a) {
            let b = this.ay;
            this.ay = a;
            this.o = true;
            if (b != this.ay) {
                this.cl("TabIndex", b, a);
            }
        }
        get az() {
            return this.ax;
        }
        set az(a) {
            let b = this.ax;
            this.ax = a;
            if (b != this.ax) {
                this.cl("Required", b, a);
            }
        }
        get focused() {
            return this.r;
        }
        set focused(a) {
            let b = this.r;
            this.r = a;
            if (b != this.r) {
                this.cl("IsFocused", b, a);
            }
        }
        get bl() {
            return this.a7;
        }
        set bl(a) {
            let b = this.a7;
            this.a7 = a;
            if (b != this.a7) {
                this.cl("AriaLabelledBy", b, a);
            }
        }
        get bk() {
            return this.a6;
        }
        set bk(a) {
            let b = this.a6;
            this.a6 = a;
            if (b != this.a6) {
                this.cl("AriaLabel", b, a);
            }
        }
        get h() {
            return this.g;
        }
        set h(a) {
            let b = this.g;
            this.g = a;
            if (b != this.g) {
                this.cl("LabelPosition", enumGetBox(CheckboxLabelPosition_$type, b), enumGetBox(CheckboxLabelPosition_$type, a));
            }
        }
        get t() {
            return this.l;
        }
        set t(a) {
            let b = this.l;
            this.l = a;
            if (b != this.l) {
                this.cl("DisableRipple", b, a);
            }
        }
        get checked() {
            return this.p;
        }
        set checked(a) {
            let b = this.p;
            this.p = a;
            if (b != this.p) {
                this.cl("IsChecked", b, a);
            }
        }
        get indeterminate() {
            return this.s;
        }
        set indeterminate(a) {
            let b = this.s;
            this.s = a;
            if (b != this.s) {
                this.cl("IsIndeterminate", b, a);
            }
        }
        get disabled() {
            return this.q;
        }
        set disabled(a) {
            let b = this.q;
            this.q = a;
            if (b != this.q) {
                this.cl("IsDisabled", b, a);
            }
        }
        get u() {
            return this.m;
        }
        set u(a) {
            let b = this.m;
            this.m = a;
            if (b != this.m) {
                this.cl("DisableTransitions", b, a);
            }
        }
        cm() {
            this.ch();
            if (this.checked) {
                this.view.ah(BrushUtil.n(this.c5, 0.6), BrushUtil.n(this.c5, 0.1));
            }
            else {
                this.view.ah(BrushUtil.n(this.c5, 0.6), BrushUtil.n(this.c9, 0.1));
            }
        }
        get a() {
            let a = new AnimationKeyFrameEffectTiming();
            a.g = 300;
            a.b = 0;
            return a;
        }
        ch() {
            this.view.y();
            let a = false;
            if (this.j == null) {
                if (!a) {
                    a = true;
                    this.view.af();
                }
                this.j = KeyFrameAnimationFactory.f.c(this.view.a(this.a).m(new AnimationKeyFrameProperty(2, this.c8), new AnimationKeyFrameProperty(3, this.c9)).m(new AnimationKeyFrameProperty(2, this.c5), new AnimationKeyFrameProperty(3, this.c6)));
                this.k = KeyFrameAnimationFactory.f.c(this.view.b(this.a).m(new AnimationKeyFrameProperty(19, 24), new AnimationKeyFrameProperty(1, 0)).m(new AnimationKeyFrameProperty(19, 0), new AnimationKeyFrameProperty(1, 1)));
            }
        }
        toggle() {
            if (this.disabled) {
                return;
            }
            this.ch();
            this.focused = false;
            this.n = true;
            let a = false;
            if (this.indeterminate) {
                a = true;
                this.checked = true;
            }
            this.indeterminate = false;
            this.checked = !this.checked;
            this.n = false;
            this.cs(a);
            if (this.change != null) {
                let b = new CheckboxChangeEventArgs();
                b.isChecked = this.checked;
                b.isIndeterminate = this.indeterminate;
                this.change(this, b);
            }
        }
        cs(a) {
            this.ch();
            let b = this.checked;
            if (this.indeterminate) {
                b = true;
            }
            let c = 1;
            if (!b) {
                c = -1;
            }
            if (b) {
                this.view.ah(BrushUtil.n(this.c5, 0.6), BrushUtil.n(this.c5, 0.1));
            }
            else {
                this.view.ah(BrushUtil.n(this.c5, 0.6), BrushUtil.n(this.c9, 0.1));
            }
            if (!this.indeterminate) {
                NativeUI.z(this.view.s, null);
            }
            if (this.u || this.indeterminate || a) {
                let d = this.view.r;
                let e = this.view.s;
                if (this.indeterminate) {
                    let f = new TransformGroup();
                    f.j.add(((() => {
                        let $ret = new RotateTransform();
                        $ret.j = 45;
                        return $ret;
                    })()));
                    f.j.add(((() => {
                        let $ret = new TranslateTransform();
                        $ret.j = -this.view.k();
                        return $ret;
                    })()));
                    NativeUI.j(d, this.c5);
                    NativeUI.k(d, this.c6);
                    NativeUI.t(e, 1);
                    NativeUI.x(e, 41);
                    NativeUI.z(e, f);
                }
                else if (b) {
                    NativeUI.j(d, this.c5);
                    NativeUI.k(d, this.c6);
                    NativeUI.t(e, 1);
                    NativeUI.x(e, 0);
                }
                else {
                    NativeUI.j(d, this.c8);
                    NativeUI.k(d, this.c9);
                    NativeUI.t(e, 0);
                    NativeUI.x(e, 24);
                }
                return;
            }
            if ((c > 0 && this.j.playbackRate < 0) || (c < 0 && this.j.playbackRate > 0)) {
                this.j.reverse();
                this.j.finished.f((g) => {
                    if (this.j != null) {
                        this.j.commitStyles();
                    }
                });
                this.k.reverse();
                this.k.finished.f((g) => {
                    if (this.k != null) {
                        this.k.commitStyles();
                    }
                });
            }
            else {
                this.j.play();
                this.j.finished.f((g) => {
                    if (this.j != null) {
                        this.j.commitStyles();
                    }
                });
                this.k.play();
                this.k.finished.f((g) => {
                    if (this.k != null) {
                        this.k.commitStyles();
                    }
                });
            }
        }
        onDetachedFromUI() {
            this.view.ac();
        }
        onAttachedToUI() {
            this.view.aa();
        }
        onContentReady() {
            if (this.indeterminate) {
                this.cs(false);
            }
        }
        aa() {
            return this.view.i();
        }
        a4() {
            return this.e();
        }
        bv() {
            let a = this.e();
            return a.s();
        }
        e() {
            let a = new CheckboxVisualModelExport();
            a.f = this.d;
            a.d = AppearanceHelper.a(this.c8);
            a.c = AppearanceHelper.a(this.c7);
            a.e = AppearanceHelper.a(this.c9);
            a.b = AppearanceHelper.a(this.c6);
            a.o = this.al;
            a.l = this.ai;
            a.p = this.am;
            a.q = this.aw;
            a.n = this.ak;
            a.m = this.aj;
            a.a = AppearanceHelper.a(this.c5);
            a.r = this.a5;
            a.j = this.focused;
            a.g = this.t;
            a.h = this.checked;
            a.k = this.indeterminate;
            a.i = this.disabled;
            return a;
        }
        provideContainer(a) {
            this.view.ab(a);
        }
    }
    Checkbox.$t = /*@__PURE__*/ markType(Checkbox, 'Checkbox', Base.$, [INotifyPropertyChanged_$type]);
    Checkbox.dn = /*@__PURE__*/ BrushUtil.g(138, 0, 0, 0);
    Checkbox.dk = /*@__PURE__*/ BrushUtil.g(138, 0, 0, 0);
    Checkbox.as = NaN;
    Checkbox.dj = /*@__PURE__*/ BrushUtil.g(255, 228, 28, 119);
    Checkbox.at = 2;
    Checkbox.dl = /*@__PURE__*/ BrushUtil.g(255, 255, 255, 255);
    Checkbox.au = 3;
    Checkbox.dm = /*@__PURE__*/ BrushUtil.g(255, 255, 255, 255);
    Checkbox.di = /*@__PURE__*/ BrushUtil.g(255, 153, 153, 153);
    Checkbox.df = /*@__PURE__*/ BrushUtil.g(138, 33, 150, 243);
    Checkbox.ap = NaN;
    Checkbox.de = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    Checkbox.aq = 2;
    Checkbox.dg = /*@__PURE__*/ BrushUtil.g(255, 255, 255, 255);
    Checkbox.ar = 3;
    Checkbox.dh = /*@__PURE__*/ BrushUtil.g(255, 255, 255, 255);
    Checkbox.c = 2;
    Checkbox.a2 = 0;
    Checkbox.a1 = 0;
    return Checkbox;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

class IgrCheckboxChangeEventArgs {
    createImplementation() {
        return new CheckboxChangeEventArgs();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    get isChecked() {
        return this.i.isChecked;
    }
    set isChecked(v) {
        this.i.isChecked = ensureBool(v);
    }
    get isIndeterminate() {
        return this.i.isIndeterminate;
    }
    set isIndeterminate(v) {
        this.i.isIndeterminate = ensureBool(v);
    }
}

let requiredStyle$1 = `

/*.ig-checkbox-mark {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    stroke: #fff;
    stroke-linecap: square;
    stroke-width: 3;
    stroke-dasharray: 24;
    stroke-dashoffset: 24;
    fill: none;
    opacity: 0;
    z-index: 1;
}*/

/*.ig-native-checkbox {
    position: absolute;
    width: 1px;
    height: 1px;
    margin: -1px;
    border: none;
    clip: rect(0, 0, 0, 0);
    outline: 0;
    pointer-events: none;
    overflow: hidden;
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
}*/

/*.ig-checkbox-box {
    width: 1.25em;
    height: 1.25em;
}*/

/*.ig-checkbox-composite {
    box-sizing: border-box;
    position: relative;
    display: inline-block;
    cursor: pointer;
    width: 1.25em;
    height: 1.25em;
    min-width: 1.25em;
    border-width: .125rem;
    border-style: solid;
    border-color: rgba(0,0,0,0.54);
    border-top-color: rgba(0, 0, 0, 0.54);
    border-right-color: rgba(0, 0, 0, 0.54);
    border-bottom-color: rgba(0, 0, 0, 0.54);
    border-left-color: rgba(0, 0, 0, 0.54);
    border-radius: 2px;
    -webkit-tap-highlight-color: transparent;
    overflow: hidden;
}*/

/*.ig-checkbox-label {
    font-family: "Titillium Web", Verdana;
    font-weight: 400;
    font-size: 1rem;
    letter-spacing: .00937rem;
    text-transform: none;
    line-height: 1.5rem;
    margin-left: 8px;
    margin-top: 0;
    margin-bottom: 0;
    cursor: pointer;
}*/
`;
class IgrCheckbox extends Component {
    constructor(props) {
        super(props);
        this._wrapper = null;
        this._implementation = null;
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        this._change = null;
        this._change_wrapped = null;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this._getMainRef = this._getMainRef.bind(this);
        var container;
        if (document) {
            container = document.createElement("div");
        }
        var root;
        root = container;
        if (container != null) {
            root = container;
        }
        this.requestRender = this.requestRender.bind(this);
        this._portalManager = new PortalManager("checkboxLabel", this.requestRender);
        var ren = new ReactRenderer(root, document, true, {}, this._portalManager);
        this._wrapper = ren;
        this._container = this._wrapper.rootWrapper;
        this._container.setStyleProperty("display", "inline-block");
        var checkbox = this.i;
        this._checkbox = checkbox;
        checkbox.provideContainer(ren);
        if (props) {
            this.initializeProperties();
        }
    }
    _getMainRef(ref) {
        this._elRef = ref;
    }
    render() {
        let propChildren = this.props.children;
        let children = [];
        Children.forEach(propChildren, (ch) => {
            children.push(cloneElement(ch));
        });
        this._portalManager.onRender(children);
        let div = createElement("div", {
            className: "ig-checkbox igr-checkbox",
            ref: this._getMainRef,
            children: children
        });
        return div;
    }
    requestRender() {
        if (this._initialized) {
            this.setState({});
        }
    }
    //private _getLabelPortal(element: DomWrapper, portalCallback: (portal: DomPortal) => void): void {
    //    this._portalManager.getPortal(element, "TemplateContent", portalCallback);
    //}
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    initializeProperties() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    // supports angular themes or custom properties set in CSS
    updateStyle() {
        this._styling(this._elRef, this);
    }
    componentWillUnmount() {
        this._checkbox.destroy();
        this._wrapper.destroy();
    }
    componentDidMount() {
        this._elRef.appendChild(this._container.getNativeElement());
        this.initializeContent();
    }
    initializeContent() {
        this._styling(this._container.getNativeElement(), this);
        this.updateStyle();
        this.i.onContentReady();
    }
    createImplementation() {
        return new Checkbox();
    }
    get i() {
        return this._implementation;
    }
    /**
 * Gets or sets the base built in theme to use for the checkbox.
*/
    get baseTheme() {
        return this.i.d;
    }
    set baseTheme(v) {
        this.i.d = ensureEnum(BaseControlTheme_$type, v);
    }
    /**
     * Gets or sets the color to use for the background when the checkbox is unchecked.
    */
    get uncheckedBackgroundColor() {
        return brushToString(this.i.dt);
    }
    set uncheckedBackgroundColor(v) {
        this.i.dt = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the actual background when the checkbox is unchecked.
    */
    get actualUncheckedBackgroundColor() {
        return brushToString(this.i.c8);
    }
    set actualUncheckedBackgroundColor(v) {
        this.i.c8 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the background when the checkbox is checked.
    */
    get checkedBackgroundColor() {
        return brushToString(this.i.da);
    }
    set checkedBackgroundColor(v) {
        this.i.da = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    get tickColor() {
        return brushToString(this.i.ds);
    }
    set tickColor(v) {
        this.i.ds = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    get actualTickColor() {
        return brushToString(this.i.c7);
    }
    set actualTickColor(v) {
        this.i.c7 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the check mark when the checkbox is unchecked.
    */
    get uncheckedBorderColor() {
        return brushToString(this.i.du);
    }
    set uncheckedBorderColor(v) {
        this.i.du = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    get checkedBorderColor() {
        return brushToString(this.i.db);
    }
    set checkedBorderColor(v) {
        this.i.db = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    get actualUncheckedBorderColor() {
        return brushToString(this.i.c9);
    }
    set actualUncheckedBorderColor(v) {
        this.i.c9 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the check mark when the checkbox is checked.
    */
    get actualCheckedBorderColor() {
        return brushToString(this.i.c6);
    }
    set actualCheckedBorderColor(v) {
        this.i.c6 = stringToBrush(v);
    }
    /**
     * Gets or sets the Width to use for the check mark when the checkbox is checked.
    */
    get borderWidth() {
        return this.i.al;
    }
    set borderWidth(v) {
        this.i.al = +v;
    }
    /**
     * Gets or sets the Width to use for the check mark when the checkbox is checked.
    */
    get actualBorderWidth() {
        return this.i.ai;
    }
    set actualBorderWidth(v) {
        this.i.ai = +v;
    }
    /**
     * Gets or sets the corner radius to use for the checkbox.
    */
    get cornerRadius() {
        return this.i.am;
    }
    set cornerRadius(v) {
        this.i.am = +v;
    }
    /**
     * Gets or sets the corner radius to use for the checkbox.
    */
    get tickStrokeWidth() {
        return this.i.aw;
    }
    set tickStrokeWidth(v) {
        this.i.aw = +v;
    }
    /**
     * Gets or sets the stroke width to use for the check mark.
    */
    get actualTickStrokeWidth() {
        return this.i.ak;
    }
    set actualTickStrokeWidth(v) {
        this.i.ak = +v;
    }
    /**
     * Gets the actual corner radius to use for the checkbox.
    */
    get actualCornerRadius() {
        return this.i.aj;
    }
    set actualCornerRadius(v) {
        this.i.aj = +v;
    }
    /**
     * Gets or sets the color to use for the actual background when the checkbox is checked.
    */
    get actualCheckedBackgroundColor() {
        return brushToString(this.i.c5);
    }
    set actualCheckedBackgroundColor(v) {
        this.i.c5 = stringToBrush(v);
    }
    /**
     * Gets or sets the id to use for the internal native checkbox.
    */
    get inputId() {
        return this.i.by;
    }
    set inputId(v) {
        this.i.by = v;
    }
    /**
     * Gets or sets the id to use for the checkbox.
    */
    get id() {
        return this.i.bw;
    }
    set id(v) {
        this.i.bw = v;
    }
    /**
     * Gets or sets id to use for the checkbox label.
    */
    get labelId() {
        return this.i.labelId;
    }
    set labelId(v) {
        this.i.labelId = v;
    }
    /**
     * Gets or sets value to use for the checkbox.
    */
    get value() {
        return this.i.a5;
    }
    set value(v) {
        this.i.a5 = v;
    }
    /**
     * Gets or sets name to use for the checkbox.
    */
    get name() {
        return this.i.b7;
    }
    set name(v) {
        this.i.b7 = v;
    }
    /**
     * Gets or sets TabIndex to use for the checkbox.
    */
    get tabIndex() {
        return this.i.a0;
    }
    set tabIndex(v) {
        this.i.a0 = +v;
    }
    /**
     * Gets or sets if the checkbox is required.
    */
    get required() {
        return this.i.az;
    }
    set required(v) {
        this.i.az = +v;
    }
    /**
     * Gets or sets if the checkbox is Focused.
    */
    get focused() {
        return this.i.focused;
    }
    set focused(v) {
        this.i.focused = ensureBool(v);
    }
    /**
     * Gets or sets the value of the aria-labelledby attribute.
    */
    get ariaLabelledBy() {
        return this.i.bl;
    }
    set ariaLabelledBy(v) {
        this.i.bl = v;
    }
    /**
     * Gets or sets the value of the aria-label attribute.
    */
    get ariaLabel() {
        return this.i.bk;
    }
    set ariaLabel(v) {
        this.i.bk = v;
    }
    /**
     * Gets or sets LabelPosition to use for the checkbox.
    */
    get labelPosition() {
        return this.i.h;
    }
    set labelPosition(v) {
        this.i.h = ensureEnum(CheckboxLabelPosition_$type, v);
    }
    /**
     * Gets or sets whether to disable the ripple effect for the checkbox.
    */
    get disableRipple() {
        return this.i.t;
    }
    set disableRipple(v) {
        this.i.t = ensureBool(v);
    }
    /**
     * Gets or sets whether the checkbox is checked.
    */
    get checked() {
        return this.i.checked;
    }
    set checked(v) {
        this.i.checked = ensureBool(v);
    }
    /**
     * Gets or sets whether the checkbox is indeterminate.
    */
    get indeterminate() {
        return this.i.indeterminate;
    }
    set indeterminate(v) {
        this.i.indeterminate = ensureBool(v);
    }
    /**
     * Gets or sets whether the checkbox is disabled.
    */
    get disabled() {
        return this.i.disabled;
    }
    set disabled(v) {
        this.i.disabled = ensureBool(v);
    }
    /**
     * Gets or sets whether the checkbox transitions are disabled.
    */
    get disableTransitions() {
        return this.i.u;
    }
    set disableTransitions(v) {
        this.i.u = ensureBool(v);
    }
    findByName(name) {
        return null;
    }
    get hasUserValues() {
        return this._hasUserValues;
    }
    __m(propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    }
    _styling(container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        let genericPrefix = "";
        let typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("Checkbox");
        let additionalPrefixes = [];
        let prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        let b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            let basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            let parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            let parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    }
    onDetachedFromUI() {
        this.i.onDetachedFromUI();
    }
    onAttachedToUI() {
        this.i.onAttachedToUI();
    }
    /**
     * Exports visual information about the current state of the grid.
    
    */
    exportVisualModel() {
        let iv = this.i.a4();
        return (iv);
    }
    /**
     * Returns a serialized copy of the exported visual model
    
    */
    exportSerializedVisualModel() {
        let iv = this.i.bv();
        return (iv);
    }
    get change() {
        return this._change;
    }
    set change(ev) {
        if (this._change_wrapped !== null) {
            this.i.change = delegateRemove(this.i.change, this._change_wrapped);
            this._change_wrapped = null;
            this._change = null;
        }
        this._change = ev;
        this._change_wrapped = (o, e) => {
            let outerArgs = new IgrCheckboxChangeEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeChange) {
                this.beforeChange(this, outerArgs);
            }
            if (this._change) {
                this._change(this, outerArgs);
            }
        };
        this.i.change = delegateCombine(this.i.change, this._change_wrapped);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrCheckboxModule {
    static register() {
        IgrRippleModule.register();
        IgrChildContentModule.register();
        TypeRegistrar.registerCons('IgrCheckbox', IgrCheckbox);
        TypeRegistrar.registerCons('IgrCheckbox', IgrCheckbox);
        TypeRegistrar.register('Checkbox', Checkbox.$type);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
var ButtonGroupOrientation = /*@__PURE__*/ (function (ButtonGroupOrientation) {
    ButtonGroupOrientation[ButtonGroupOrientation["Horizontal"] = 0] = "Horizontal";
    ButtonGroupOrientation[ButtonGroupOrientation["Vertical"] = 1] = "Vertical";
    return ButtonGroupOrientation;
})({});
/**
 * @hidden
 */
let ButtonGroupOrientation_$type = /*@__PURE__*/ markEnum('ButtonGroupOrientation', 'Horizontal,0|Vertical,1');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let ButtonGroupDisplayStyle_$type = /*@__PURE__*/ markEnum('ButtonGroupDisplayStyle', 'Flat,0|Outlined,1');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let ButtonGroupButtonCollection = /*@__PURE__*/ (() => {
    class ButtonGroupButtonCollection extends ObservableCollection$1 {
        constructor() {
            super(Button.$, 0);
            this.collectionResetting = null;
        }
        p() {
            if (this.collectionResetting != null) {
                this.collectionResetting(this, null);
            }
            super.p();
        }
    }
    ButtonGroupButtonCollection.$t = /*@__PURE__*/ markType(ButtonGroupButtonCollection, 'ButtonGroupButtonCollection', /*@__PURE__*/ ObservableCollection$1.$.specialize(Button.$));
    return ButtonGroupButtonCollection;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let ButtonGroupSelectionChangedEventArgs = /*@__PURE__*/ (() => {
    class ButtonGroupSelectionChangedEventArgs extends EventArgs {
    }
    ButtonGroupSelectionChangedEventArgs.$t = /*@__PURE__*/ markType(ButtonGroupSelectionChangedEventArgs, 'ButtonGroupSelectionChangedEventArgs', EventArgs.$);
    return ButtonGroupSelectionChangedEventArgs;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let ButtonGroupVisualModelExport = /*@__PURE__*/ (() => {
    class ButtonGroupVisualModelExport extends Base {
        constructor() {
            super(...arguments);
            this.e = 0;
            this.f = 0;
            this.a = null;
            this.k = 0;
            this.b = null;
            this.d = null;
            this.c = null;
            this.j = 0;
            this.g = false;
            this.h = false;
            this.i = null;
        }
        l() {
            let a = new StringBuilder(0);
            a.l("{");
            a.l("baseTheme : " + enumGetBox(BaseControlTheme_$type, this.e) + ", ");
            a.l("actualDensity : " + enumGetBox(ControlDisplayDensity_$type, this.f) + ", ");
            a.l("selectedIndices : " + this.a + ", ");
            a.l("actualItemBackgroundColor : " + this.b.serialize() + ", ");
            a.l("actualItemTextColor : " + this.d.serialize() + ", ");
            a.l("actualItemBorderColor : " + this.c.serialize() + ", ");
            a.l("actualItemBorderWidth : " + this.j + ", ");
            a.l("isDisabled : " + this.g + ", ");
            a.l("isMultiSelect : " + this.h + ", ");
            a.l("buttonModels: [");
            for (let b = 0; b < this.i.count; b++) {
                if (b != 0) {
                    a.l(",");
                }
                a.l(this.i._inner[b].ab());
            }
            a.l("]");
            a.l("}");
            return a.toString();
        }
    }
    ButtonGroupVisualModelExport.$t = /*@__PURE__*/ markType(ButtonGroupVisualModelExport, 'ButtonGroupVisualModelExport');
    return ButtonGroupVisualModelExport;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let ButtonGroupView = /*@__PURE__*/ (() => {
    class ButtonGroupView extends Base {
        constructor() {
            super();
            this.a = null;
            this.g = null;
            this.b = null;
            this.f = new List$1(Delegate_$type, 0);
            this.m = null;
            this.c = true;
            this.h = null;
            this.i = null;
            this.j = null;
            this.k = null;
        }
        s() {
        }
        d() {
            return true;
        }
        get l() {
            return this.h;
        }
        get y() {
            return null;
        }
        get e() {
            return true;
        }
        q(a) {
            if (a == null) {
                for (let b of fromEnum(this.f)) {
                    b();
                }
                this.f.clear();
            }
            this.g = a;
            a.rootWrapper.setStyleProperty("position", "relative");
            let c = this.g.createElement("div");
            c.addClass("ig-button-content");
            c.setStyleProperty("position", "relative");
            c.setStyleProperty("display", "flex");
            c.setStyleProperty("flex-direction", "row");
            c.setStyleProperty("flex-wrap", "no-wrap");
            c.setStyleProperty("align-items", "center");
            this.j = c;
            this.f.add(c.listen("click", runOn(this, this.n)));
            this.g.append(c);
            this.g.getPortal(c, "ChildContent", (d) => {
                let comp_ = d.componentRef;
                this.k = comp_;
                if (this.a.r == 0) {
                    this.j.setStyleProperty("flex-direction", "row");
                    comp_.display = 'flex';
                    comp_.flexDirection = 'row';
                }
                else {
                    this.j.setStyleProperty("flex-direction", "column");
                    comp_.display = 'flex';
                    comp_.flexDirection = 'column';
                }
            }, true);
            this.a.db();
        }
        w(a) {
            if (this.m != a) {
                this.m = a;
                if (this.i != null) {
                    this.i.setAttribute("d", this.m);
                }
            }
        }
        v() {
            let comp_ = this.k;
            if (comp_ != null) {
                if (this.a.r == 0) {
                    this.j.setStyleProperty("flex-direction", "row");
                    comp_.display = 'flex';
                    comp_.flexDirection = 'row';
                }
                else {
                    this.j.setStyleProperty("flex-direction", "column");
                    comp_.display = 'flex';
                    comp_.flexDirection = 'column';
                }
            }
        }
        n(a) {
        }
        t() {
            if (this.d()) {
            }
        }
        p() {
            this.c = true;
        }
        r() {
            this.c = false;
            for (let a of fromEnum(this.f)) {
                a();
            }
            this.f.clear();
        }
        x(a) {
            if (a != null) {
                this.g.rootWrapper.setStyleProperty("font", a.fontString);
            }
        }
        u(a) {
            if (this.a.r == 0) {
                a.gb = "flex";
                a.he = "row";
                a.fv = "center";
            }
            else {
                a.gb = "flex";
                a.he = "column";
                a.fv = "stretch";
            }
        }
        o(a) {
            this.j.append(a);
        }
    }
    ButtonGroupView.$t = /*@__PURE__*/ markType(ButtonGroupView, 'ButtonGroupView');
    return ButtonGroupView;
})();
/**
 * @hidden
 */
let ButtonGroup = /*@__PURE__*/ (() => {
    class ButtonGroup extends Base {
        constructor() {
            super();
            this.o = 1;
            this.e = 0;
            this.i = 1;
            this.h = 1;
            this.a = new Array(0);
            this.u = false;
            this._view = null;
            this.ax = ThemeResolver.b(ButtonGroup.f, ButtonGroup.av, ButtonGroup.ap);
            this.gz = ThemeResolver.e(ButtonGroup.f, ButtonGroup.gn, ButtonGroup.fn);
            this.g1 = ThemeResolver.e(ButtonGroup.f, ButtonGroup.gp, ButtonGroup.fp);
            this.g0 = ThemeResolver.e(ButtonGroup.f, ButtonGroup.go, ButtonGroup.fo);
            this.g2 = ThemeResolver.e(ButtonGroup.f, ButtonGroup.gq, ButtonGroup.fq);
            this.aw = ThemeResolver.b(ButtonGroup.f, ButtonGroup.au, ButtonGroup.ao);
            this.g6 = ThemeResolver.e(ButtonGroup.f, ButtonGroup.gu, ButtonGroup.fu);
            this.g3 = ThemeResolver.e(ButtonGroup.f, ButtonGroup.gr, ButtonGroup.fr);
            this.g7 = ThemeResolver.e(ButtonGroup.f, ButtonGroup.gv, ButtonGroup.fv);
            this.ha = ThemeResolver.e(ButtonGroup.f, ButtonGroup.gy, ButtonGroup.fy);
            this.g4 = ThemeResolver.e(ButtonGroup.f, ButtonGroup.gs, ButtonGroup.fs);
            this.g5 = ThemeResolver.e(ButtonGroup.f, ButtonGroup.gt, ButtonGroup.ft);
            this.g8 = ThemeResolver.e(ButtonGroup.f, ButtonGroup.gw, ButtonGroup.fw);
            this.g9 = ThemeResolver.e(ButtonGroup.f, ButtonGroup.gx, ButtonGroup.fx);
            this.ar = ThemeResolver.b(ButtonGroup.f, ButtonGroup.at, ButtonGroup.an);
            this.fz = ThemeResolver.e(ButtonGroup.f, ButtonGroup.gb, ButtonGroup.fb);
            this.f1 = ThemeResolver.e(ButtonGroup.f, ButtonGroup.gd, ButtonGroup.fd);
            this.f0 = ThemeResolver.e(ButtonGroup.f, ButtonGroup.gc, ButtonGroup.fc);
            this.f2 = ThemeResolver.e(ButtonGroup.f, ButtonGroup.ge, ButtonGroup.fe);
            this.aq = ThemeResolver.b(ButtonGroup.f, ButtonGroup.as, ButtonGroup.am);
            this.f6 = ThemeResolver.e(ButtonGroup.f, ButtonGroup.gi, ButtonGroup.fi);
            this.f3 = ThemeResolver.e(ButtonGroup.f, ButtonGroup.gf, ButtonGroup.ff);
            this.f7 = ThemeResolver.e(ButtonGroup.f, ButtonGroup.gj, ButtonGroup.fj);
            this.ga = ThemeResolver.e(ButtonGroup.f, ButtonGroup.gm, ButtonGroup.fm);
            this.f4 = ThemeResolver.e(ButtonGroup.f, ButtonGroup.gg, ButtonGroup.fg);
            this.f5 = ThemeResolver.e(ButtonGroup.f, ButtonGroup.gh, ButtonGroup.fh);
            this.f8 = ThemeResolver.e(ButtonGroup.f, ButtonGroup.gk, ButtonGroup.fk);
            this.f9 = ThemeResolver.e(ButtonGroup.f, ButtonGroup.gl, ButtonGroup.fl);
            this.ad = ThemeResolver.b(ButtonGroup.f, ButtonGroup.av, ButtonGroup.ap);
            this.dm = ThemeResolver.e(ButtonGroup.f, ButtonGroup.gn, ButtonGroup.fn);
            this.dp = ThemeResolver.e(ButtonGroup.f, ButtonGroup.gp, ButtonGroup.fp);
            this.du = ThemeResolver.e(ButtonGroup.f, ButtonGroup.gu, ButtonGroup.fu);
            this.dr = ThemeResolver.e(ButtonGroup.f, ButtonGroup.gr, ButtonGroup.fr);
            this.dn = ThemeResolver.e(ButtonGroup.f, ButtonGroup.go, ButtonGroup.fo);
            this.dq = ThemeResolver.e(ButtonGroup.f, ButtonGroup.gq, ButtonGroup.fq);
            this.ac = ThemeResolver.b(ButtonGroup.f, ButtonGroup.au, ButtonGroup.ao);
            this.dv = ThemeResolver.e(ButtonGroup.f, ButtonGroup.gv, ButtonGroup.fv);
            this.dy = ThemeResolver.e(ButtonGroup.f, ButtonGroup.gy, ButtonGroup.fy);
            this.ds = ThemeResolver.e(ButtonGroup.f, ButtonGroup.gs, ButtonGroup.fs);
            this.dt = ThemeResolver.e(ButtonGroup.f, ButtonGroup.gt, ButtonGroup.ft);
            this.dw = ThemeResolver.e(ButtonGroup.f, ButtonGroup.gw, ButtonGroup.fw);
            this.dx = ThemeResolver.e(ButtonGroup.f, ButtonGroup.gx, ButtonGroup.fx);
            this.ah = NaN;
            this.d7 = null;
            this.d9 = null;
            this.ee = null;
            this.eb = null;
            this.ec = null;
            this.d8 = null;
            this.ea = null;
            this.ag = NaN;
            this.ed = null;
            this.ev = null;
            this.ey = null;
            this.ew = null;
            this.ex = null;
            this.aj = NaN;
            this.ef = null;
            this.eh = null;
            this.em = null;
            this.ej = null;
            this.ek = null;
            this.eg = null;
            this.ei = null;
            this.ai = NaN;
            this.el = null;
            this.er = null;
            this.eu = null;
            this.es = null;
            this.et = null;
            this.af = NaN;
            this.dz = null;
            this.d1 = null;
            this.d6 = null;
            this.d3 = null;
            this.d4 = null;
            this.d0 = null;
            this.d2 = null;
            this.ae = NaN;
            this.d5 = null;
            this.en = null;
            this.eq = null;
            this.eo = null;
            this.ep = null;
            this.q = 0;
            this.a6 = "ig-buttongroup-" + ButtonGroup.a4++;
            this.w = false;
            this.v = false;
            this.x = false;
            this.propertyChanged = null;
            this.m = new ButtonGroupButtonCollection();
            this.selectionChanged = null;
            let a = new ButtonGroupView();
            a.a = this;
            this.view = a;
            this.view.s();
            let b = this.m;
            b.collectionChanged = delegateCombine(b.collectionChanged, runOn(this, this.c3));
            let c = this.m;
            c.collectionResetting = delegateCombine(c.collectionResetting, runOn(this, this.c4));
        }
        get p() {
            return this.o;
        }
        set p(a) {
            let b = this.o;
            this.o = a;
            if (b != this.o) {
                this.da("DisplayType", enumGetBox(ButtonGroupDisplayStyle_$type, b), enumGetBox(ButtonGroupDisplayStyle_$type, a));
            }
        }
        get g() {
            return this.e;
        }
        set g(a) {
            let b = this.e;
            this.e = a;
            if (b != this.e) {
                this.da("BaseTheme", enumGetBox(BaseControlTheme_$type, b), enumGetBox(BaseControlTheme_$type, a));
            }
        }
        c4(a, b) {
            for (let c of fromEnum(this.buttons)) {
                c.clicked = delegateRemove(c.clicked, runOn(this, this.c6));
            }
            this.df();
        }
        appendContentChild(a) {
            this.view.o(a);
        }
        c3(a, b) {
            if (b.oldItems != null) {
                for (let c of fromEn(b.oldItems)) {
                    let d = c;
                    if (d != null) {
                        d.clicked = delegateRemove(d.clicked, runOn(this, this.c6));
                    }
                }
            }
            if (b.newItems != null) {
                for (let e of fromEn(b.newItems)) {
                    let f = e;
                    if (f != null) {
                        f.clicked = delegateCombine(f.clicked, runOn(this, this.c6));
                    }
                }
            }
            this.df();
        }
        c6(a, b) {
            let c = a;
            let d = this.buttons.indexOf(c);
            this.de(c, d);
        }
        get k() {
            return this.i;
        }
        set k(a) {
            let b = this.i;
            this.i = a;
            if (b != this.i) {
                this.da("Density", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, a));
            }
        }
        get j() {
            return this.h;
        }
        set j(a) {
            let b = this.h;
            this.h = a;
            if (b != this.h) {
                this.da("ActualDensity", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, a));
            }
        }
        get d() {
            return this.a;
        }
        set d(a) {
            let b = this.a;
            this.a = a;
            if (b != this.a) {
                this.da("SelectedIndices", b, a);
            }
        }
        de(a, b) {
            this.u = true;
            if (this.aa(a)) {
                this.d = this.b(this.d, a, b);
            }
            else {
                if (!this.z) {
                    this.d = new Array(0);
                }
                this.d = this.c(this.d, a, b);
            }
            this.df();
            if (this.selectionChanged != null) {
                this.selectionChanged(this, new ButtonGroupSelectionChangedEventArgs());
            }
            this.u = false;
        }
        c(a, b, c) {
            let d = new Array(Math.max(0, this.a.length + 1));
            let e = 0;
            for (let f = 0; f < this.a.length; f++) {
                if (this.a[f] != c) {
                    d[e] = this.a[f];
                    e++;
                }
            }
            d[e] = c;
            return d;
        }
        b(a, b, c) {
            let d = new Array(Math.max(0, this.a.length - 1));
            let e = 0;
            for (let f = 0; f < this.a.length; f++) {
                if (this.a[f] != c) {
                    d[e] = this.a[f];
                    e++;
                }
            }
            return d;
        }
        get view() {
            return this._view;
        }
        set view(a) {
            this._view = a;
        }
        destroy() {
            this.provideContainer(null);
        }
        da(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            this.dc(a, b, c);
        }
        dc(a, b, c) {
            switch (a) {
                case "BaseTheme":
                    this.dh(this.g);
                    this.dg();
                    break;
                case "DisplayType":
                case "ItemBorderColor":
                case "ItemDisabledBorderColor":
                case "ItemBackgroundColor":
                case "ItemDisabledBackgroundColor":
                case "SelectedItemBackgroundColor":
                case "ItemTextColor":
                case "ItemDisabledTextColor":
                case "SelectedItemTextColor":
                case "ItemHoverBackgroundColor":
                case "SelectedItemHoverBackgroundColor":
                case "ItemHoverTextColor":
                case "SelectedItemHoverTextColor":
                case "OutlinedItemBorderColor":
                case "OutlinedItemDisabledBorderColor":
                case "OutlinedItemBackgroundColor":
                case "OutlinedItemDisabledBackgroundColor":
                case "OutlinedSelectedItemBackgroundColor":
                case "OutlinedItemTextColor":
                case "OutlinedItemDisabledTextColor":
                case "OutlinedSelectedItemTextColor":
                case "OutlinedItemHoverBackgroundColor":
                case ButtonGroup.cv:
                case "OutlinedItemHoverTextColor":
                case "OutlinedSelectedItemHoverTextColor":
                case "FlatItemBorderColor":
                case "FlatItemDisabledBorderColor":
                case "FlatItemBackgroundColor":
                case "FlatItemDisabledBackgroundColor":
                case "FlatSelectedItemBackgroundColor":
                case "FlatItemTextColor":
                case "FlatItemDisabledTextColor":
                case "FlatSelectedItemTextColor":
                case "FlatItemHoverBackgroundColor":
                case "FlatSelectedItemHoverBackgroundColor":
                case "FlatItemHoverTextColor":
                case "FlatSelectedItemHoverTextColor":
                    this.dg();
                    break;
                case "ActualItemBorderColor":
                case "ActualItemDisabledBorderColor":
                case "ActualItemDisabledBackgroundColor":
                case "ActualItemBackgroundColor":
                case "ActualItemTextColor":
                case "ActualItemDisabledTextColor":
                case "ActualSelectedItemTextColor":
                case "ActualSelectedItemBackgroundColor":
                    this.df();
                    break;
                case "Orientation":
                    this.view.v();
                    this.df();
                    break;
                case "Density":
                    this.j = this.k == 0 ? 1 : this.k;
                    break;
                case "ActualDensity":
                    for (let d = 0; d < this.buttons.count; d++) {
                        this.buttons._inner[d].h = this.j;
                    }
                    break;
                case "IsDisabled":
                    for (let e = 0; e < this.buttons.count; e++) {
                        this.buttons._inner[e].disabled = this.disabled;
                    }
                    break;
                case "SelectedIndices":
                    if (!this.u) {
                        this.df();
                    }
                    break;
            }
        }
        dl(a, b) {
            return new CornerRadius(1, !isNaN_(a.c) ? a.c : b.c, !isNaN_(a.d) ? a.d : b.d, !isNaN_(a.b) ? a.b : b.b, !isNaN_(a.a) ? a.a : b.a);
        }
        dg() {
            switch (this.p) {
                case 1:
                    this.al = !isNaN_(this.a1) ? this.a1 : this.ax;
                    this.ez = this.hn != null ? this.hn : this.gz;
                    this.e1 = this.hp != null ? this.hp : this.g1;
                    this.e6 = this.hu != null ? this.hu : this.g6;
                    this.e3 = this.hr != null ? this.hr : this.g3;
                    this.e0 = this.ho != null ? this.ho : this.g0;
                    this.e2 = this.hq != null ? this.hq : this.g2;
                    this.ak = !isNaN_(this.a0) ? this.a0 : this.aw;
                    this.e7 = this.h7 != null ? this.h7 : this.g7;
                    this.fa = this.ia != null ? this.ia : this.ha;
                    this.e4 = this.hs != null ? this.hs : this.g4;
                    this.e5 = this.ht != null ? this.ht : this.g5;
                    this.e8 = this.h8 != null ? this.h8 : this.g8;
                    this.e9 = this.h9 != null ? this.h9 : this.g9;
                    break;
                case 0:
                    this.al = !isNaN_(this.a1) ? this.a1 : this.ar;
                    this.ez = this.hn != null ? this.hn : this.fz;
                    this.e1 = this.hp != null ? this.hp : this.f1;
                    this.e6 = this.hu != null ? this.hu : this.f6;
                    this.e3 = this.hr != null ? this.hr : this.f3;
                    this.e0 = this.ho != null ? this.ho : this.f0;
                    this.e2 = this.hq != null ? this.hq : this.f2;
                    this.ak = !isNaN_(this.a0) ? this.a0 : this.aq;
                    this.e7 = this.h7 != null ? this.h7 : this.f7;
                    this.fa = this.ia != null ? this.ia : this.ga;
                    this.e4 = this.hs != null ? this.hs : this.f4;
                    this.e5 = this.ht != null ? this.ht : this.f5;
                    this.e8 = this.h8 != null ? this.h8 : this.f8;
                    this.e9 = this.h9 != null ? this.h9 : this.f9;
                    break;
            }
        }
        df() {
            for (let a = 0; a < this.buttons.count; a++) {
                let b = this.buttons._inner[a];
                b.h = this.j;
                if (a == 0) {
                    this.di(b);
                }
                else if (a == this.buttons.count - 1) {
                    this.dj(b);
                }
                else {
                    this.dk(b);
                }
                b.s = 1;
                b.ak = false;
                if (this.v) {
                    b.disabled = this.disabled;
                }
                b.nl = this.e0;
                b.ax = this.ak;
                b.sh = this.e2;
                b.sg = this.e1;
                b.si = this.e3;
                this.view.u(b);
                if (this.aa(b)) {
                    b.nk = this.e7;
                    b.t7 = this.fa;
                    b.s7 = this.e8;
                    b.s8 = this.e9;
                }
                else {
                    b.nk = this.ez;
                    b.t7 = this.e6;
                    b.s7 = this.e4;
                    b.s8 = this.e5;
                }
            }
        }
        aa(a) {
            let b = this.buttons.indexOf(a);
            for (let c = 0; c < this.d.length; c++) {
                if (this.d[c] == b) {
                    return true;
                }
            }
            return false;
        }
        dk(a) {
            a.kd = new CornerRadius(1, 0, 0, 0, 0);
        }
        dj(a) {
            if (this.r == 1) {
                a.kd = new CornerRadius(1, 0, 0, this.al, this.al);
            }
            else {
                a.kd = new CornerRadius(1, 0, this.al, this.al, 0);
            }
        }
        di(a) {
            if (this.r == 1) {
                a.kd = new CornerRadius(1, this.al, this.al, 0, 0);
            }
            else {
                a.kd = new CornerRadius(1, this.al, 0, 0, this.al);
            }
        }
        dh(a) {
            this.ax = ThemeResolver.b(a, ButtonGroup.av, ButtonGroup.ap);
            this.gz = ThemeResolver.e(a, ButtonGroup.gn, ButtonGroup.fn);
            this.g1 = ThemeResolver.e(a, ButtonGroup.gp, ButtonGroup.fp);
            this.g0 = ThemeResolver.e(a, ButtonGroup.go, ButtonGroup.fo);
            this.g2 = ThemeResolver.e(a, ButtonGroup.gq, ButtonGroup.fq);
            this.aw = ThemeResolver.b(a, ButtonGroup.au, ButtonGroup.ao);
            this.g6 = ThemeResolver.e(a, ButtonGroup.gu, ButtonGroup.fu);
            this.g3 = ThemeResolver.e(a, ButtonGroup.gr, ButtonGroup.fr);
            this.g7 = ThemeResolver.e(a, ButtonGroup.gv, ButtonGroup.fv);
            this.ha = ThemeResolver.e(a, ButtonGroup.gy, ButtonGroup.fy);
            this.g4 = ThemeResolver.e(a, ButtonGroup.gs, ButtonGroup.fs);
            this.g5 = ThemeResolver.e(a, ButtonGroup.gt, ButtonGroup.ft);
            this.g8 = ThemeResolver.e(a, ButtonGroup.gw, ButtonGroup.fw);
            this.g9 = ThemeResolver.e(a, ButtonGroup.gx, ButtonGroup.fx);
            this.ar = ThemeResolver.b(a, ButtonGroup.at, ButtonGroup.an);
            this.fz = ThemeResolver.e(a, ButtonGroup.gb, ButtonGroup.fb);
            this.f1 = ThemeResolver.e(a, ButtonGroup.gd, ButtonGroup.fd);
            this.f0 = ThemeResolver.e(a, ButtonGroup.gc, ButtonGroup.fc);
            this.f2 = ThemeResolver.e(a, ButtonGroup.ge, ButtonGroup.fe);
            this.aq = ThemeResolver.b(a, ButtonGroup.as, ButtonGroup.am);
            this.f6 = ThemeResolver.e(a, ButtonGroup.gi, ButtonGroup.fi);
            this.f3 = ThemeResolver.e(a, ButtonGroup.gf, ButtonGroup.ff);
            this.f7 = ThemeResolver.e(a, ButtonGroup.gj, ButtonGroup.fj);
            this.ga = ThemeResolver.e(a, ButtonGroup.gm, ButtonGroup.fm);
            this.f4 = ThemeResolver.e(a, ButtonGroup.gg, ButtonGroup.fg);
            this.f5 = ThemeResolver.e(a, ButtonGroup.gh, ButtonGroup.fh);
            this.f8 = ThemeResolver.e(a, ButtonGroup.gk, ButtonGroup.fk);
            this.f9 = ThemeResolver.e(a, ButtonGroup.gl, ButtonGroup.fl);
        }
        get al() {
            return this.ad;
        }
        set al(a) {
            let b = this.ad;
            this.ad = a;
            if (b != this.ad) {
                this.da("ActualItemCornerRadius", b, a);
            }
        }
        get ez() {
            return this.dm;
        }
        set ez(a) {
            let b = this.dm;
            this.dm = a;
            if (b != this.dm) {
                this.da("ActualItemBackgroundColor", b, a);
            }
        }
        get e1() {
            return this.dp;
        }
        set e1(a) {
            let b = this.dp;
            this.dp = a;
            if (b != this.dp) {
                this.da("ActualItemDisabledBackgroundColor", b, a);
            }
        }
        get e6() {
            return this.du;
        }
        set e6(a) {
            let b = this.du;
            this.du = a;
            if (b != this.du) {
                this.da("ActualItemTextColor", b, a);
            }
        }
        get e3() {
            return this.dr;
        }
        set e3(a) {
            let b = this.dr;
            this.dr = a;
            if (b != this.dr) {
                this.da("ActualItemDisabledTextColor", b, a);
            }
        }
        get e0() {
            return this.dn;
        }
        set e0(a) {
            let b = this.dn;
            this.dn = a;
            if (b != this.dn) {
                this.da("ActualItemBorderColor", b, a);
            }
        }
        get e2() {
            return this.dq;
        }
        set e2(a) {
            let b = this.dq;
            this.dq = a;
            if (b != this.dq) {
                this.da("ActualItemDisabledBorderColor", b, a);
            }
        }
        get ak() {
            return this.ac;
        }
        set ak(a) {
            let b = this.ac;
            this.ac = a;
            if (b != this.ac) {
                this.da("ActualItemBorderWidth", b, a);
            }
        }
        get e7() {
            return this.dv;
        }
        set e7(a) {
            let b = this.dv;
            this.dv = a;
            if (b != this.dv) {
                this.da("ActualSelectedItemBackgroundColor", b, a);
            }
        }
        get fa() {
            return this.dy;
        }
        set fa(a) {
            let b = this.dy;
            this.dy = a;
            if (b != this.dy) {
                this.da("ActualSelectedItemTextColor", b, a);
            }
        }
        get e4() {
            return this.ds;
        }
        set e4(a) {
            let b = this.ds;
            this.ds = a;
            if (b != this.ds) {
                this.da("ActualItemHoverBackgroundColor", b, a);
            }
        }
        get e5() {
            return this.dt;
        }
        set e5(a) {
            let b = this.dt;
            this.dt = a;
            if (b != this.dt) {
                this.da("ActualItemHoverTextColor", b, a);
            }
        }
        get e8() {
            return this.dw;
        }
        set e8(a) {
            let b = this.dw;
            this.dw = a;
            if (b != this.dw) {
                this.da("ActualSelectedItemHoverBackgroundColor", b, a);
            }
        }
        get e9() {
            return this.dx;
        }
        set e9(a) {
            let b = this.dx;
            this.dx = a;
            if (b != this.dx) {
                this.da("ActualSelectedItemHoverTextColor", b, a);
            }
        }
        get a1() {
            return this.ah;
        }
        set a1(a) {
            let b = this.ah;
            this.ah = a;
            if (b != this.ah) {
                this.da("ItemCornerRadius", b, a);
            }
        }
        get hn() {
            return this.d7;
        }
        set hn(a) {
            let b = this.d7;
            this.d7 = a;
            if (b != this.d7) {
                this.da("ItemBackgroundColor", b, a);
            }
        }
        get hp() {
            return this.d9;
        }
        set hp(a) {
            let b = this.d9;
            this.d9 = a;
            if (b != this.d9) {
                this.da("ItemDisabledBackgroundColor", b, a);
            }
        }
        get hu() {
            return this.ee;
        }
        set hu(a) {
            let b = this.ee;
            this.ee = a;
            if (b != this.ee) {
                this.da("ItemTextColor", b, a);
            }
        }
        get hr() {
            return this.eb;
        }
        set hr(a) {
            let b = this.eb;
            this.eb = a;
            if (b != this.eb) {
                this.da("ItemDisabledTextColor", b, a);
            }
        }
        get hs() {
            return this.ec;
        }
        set hs(a) {
            let b = this.ec;
            this.ec = a;
            if (b != this.ec) {
                this.da("ItemHoverBackgroundColor", b, a);
            }
        }
        get ho() {
            return this.d8;
        }
        set ho(a) {
            let b = this.d8;
            this.d8 = a;
            if (b != this.d8) {
                this.da("ItemBorderColor", b, a);
            }
        }
        get hq() {
            return this.ea;
        }
        set hq(a) {
            let b = this.ea;
            this.ea = a;
            if (b != this.ea) {
                this.da("ItemDisabledBorderColor", b, a);
            }
        }
        get a0() {
            return this.ag;
        }
        set a0(a) {
            let b = this.ag;
            this.ag = a;
            if (b != this.ag) {
                this.da("ItemBorderWidth", b, a);
            }
        }
        get ht() {
            return this.ed;
        }
        set ht(a) {
            let b = this.ed;
            this.ed = a;
            if (b != this.ed) {
                this.da("ItemHoverTextColor", b, a);
            }
        }
        get h7() {
            return this.ev;
        }
        set h7(a) {
            let b = this.ev;
            this.ev = a;
            if (b != this.ev) {
                this.da("SelectedItemBackgroundColor", b, a);
            }
        }
        get ia() {
            return this.ey;
        }
        set ia(a) {
            let b = this.ey;
            this.ey = a;
            if (b != this.ey) {
                this.da("SelectedItemTextColor", b, a);
            }
        }
        get h8() {
            return this.ew;
        }
        set h8(a) {
            let b = this.ew;
            this.ew = a;
            if (b != this.ew) {
                this.da("SelectedItemHoverBackgroundColor", b, a);
            }
        }
        get h9() {
            return this.ex;
        }
        set h9(a) {
            let b = this.ex;
            this.ex = a;
            if (b != this.ex) {
                this.da("SelectedItemHoverTextColor", b, a);
            }
        }
        get a3() {
            return this.aj;
        }
        set a3(a) {
            let b = this.aj;
            this.aj = a;
            if (b != this.aj) {
                this.da("OutlinedItemCornerRadius", b, a);
            }
        }
        get hv() {
            return this.ef;
        }
        set hv(a) {
            let b = this.ef;
            this.ef = a;
            if (b != this.ef) {
                this.da("OutlinedItemBackgroundColor", b, a);
            }
        }
        get hx() {
            return this.eh;
        }
        set hx(a) {
            let b = this.eh;
            this.eh = a;
            if (b != this.eh) {
                this.da("OutlinedItemDisabledBackgroundColor", b, a);
            }
        }
        get h2() {
            return this.em;
        }
        set h2(a) {
            let b = this.em;
            this.em = a;
            if (b != this.em) {
                this.da("OutlinedItemTextColor", b, a);
            }
        }
        get hz() {
            return this.ej;
        }
        set hz(a) {
            let b = this.ej;
            this.ej = a;
            if (b != this.ej) {
                this.da("OutlinedItemDisabledTextColor", b, a);
            }
        }
        get h0() {
            return this.ek;
        }
        set h0(a) {
            let b = this.ek;
            this.ek = a;
            if (b != this.ek) {
                this.da("OutlinedItemHoverBackgroundColor", b, a);
            }
        }
        get hw() {
            return this.eg;
        }
        set hw(a) {
            let b = this.eg;
            this.eg = a;
            if (b != this.eg) {
                this.da("OutlinedItemBorderColor", b, a);
            }
        }
        get hy() {
            return this.ei;
        }
        set hy(a) {
            let b = this.ei;
            this.ei = a;
            if (b != this.ei) {
                this.da("OutlinedItemDisabledBorderColor", b, a);
            }
        }
        get a2() {
            return this.ai;
        }
        set a2(a) {
            let b = this.ai;
            this.ai = a;
            if (b != this.ai) {
                this.da("OutlinedItemBorderWidth", b, a);
            }
        }
        get h1() {
            return this.el;
        }
        set h1(a) {
            let b = this.el;
            this.el = a;
            if (b != this.el) {
                this.da("OutlinedItemHoverTextColor", b, a);
            }
        }
        get h3() {
            return this.er;
        }
        set h3(a) {
            let b = this.er;
            this.er = a;
            if (b != this.er) {
                this.da("OutlinedSelectedItemBackgroundColor", b, a);
            }
        }
        get h6() {
            return this.eu;
        }
        set h6(a) {
            let b = this.eu;
            this.eu = a;
            if (b != this.eu) {
                this.da("OutlinedSelectedItemTextColor", b, a);
            }
        }
        get h4() {
            return this.es;
        }
        set h4(a) {
            let b = this.es;
            this.es = a;
            if (b != this.es) {
                this.da(ButtonGroup.cv, b, a);
            }
        }
        get h5() {
            return this.et;
        }
        set h5(a) {
            let b = this.et;
            this.et = a;
            if (b != this.et) {
                this.da("OutlinedSelectedItemHoverTextColor", b, a);
            }
        }
        get az() {
            return this.af;
        }
        set az(a) {
            let b = this.af;
            this.af = a;
            if (b != this.af) {
                this.da("FlatItemCornerRadius", b, a);
            }
        }
        get hb() {
            return this.dz;
        }
        set hb(a) {
            let b = this.dz;
            this.dz = a;
            if (b != this.dz) {
                this.da("FlatItemBackgroundColor", b, a);
            }
        }
        get hd() {
            return this.d1;
        }
        set hd(a) {
            let b = this.d1;
            this.d1 = a;
            if (b != this.d1) {
                this.da("FlatItemDisabledBackgroundColor", b, a);
            }
        }
        get hi() {
            return this.d6;
        }
        set hi(a) {
            let b = this.d6;
            this.d6 = a;
            if (b != this.d6) {
                this.da("FlatItemTextColor", b, a);
            }
        }
        get hf() {
            return this.d3;
        }
        set hf(a) {
            let b = this.d3;
            this.d3 = a;
            if (b != this.d3) {
                this.da("FlatItemDisabledTextColor", b, a);
            }
        }
        get hg() {
            return this.d4;
        }
        set hg(a) {
            let b = this.d4;
            this.d4 = a;
            if (b != this.d4) {
                this.da("FlatItemHoverBackgroundColor", b, a);
            }
        }
        get hc() {
            return this.d0;
        }
        set hc(a) {
            let b = this.d0;
            this.d0 = a;
            if (b != this.d0) {
                this.da("FlatItemBorderColor", b, a);
            }
        }
        get he() {
            return this.d2;
        }
        set he(a) {
            let b = this.d2;
            this.d2 = a;
            if (b != this.d2) {
                this.da("FlatItemDisabledBorderColor", b, a);
            }
        }
        get ay() {
            return this.ae;
        }
        set ay(a) {
            let b = this.ae;
            this.ae = a;
            if (b != this.ae) {
                this.da("FlatItemBorderWidth", b, a);
            }
        }
        get hh() {
            return this.d5;
        }
        set hh(a) {
            let b = this.d5;
            this.d5 = a;
            if (b != this.d5) {
                this.da("FlatItemHoverTextColor", b, a);
            }
        }
        get hj() {
            return this.en;
        }
        set hj(a) {
            let b = this.en;
            this.en = a;
            if (b != this.en) {
                this.da("FlatSelectedItemBackgroundColor", b, a);
            }
        }
        get hm() {
            return this.eq;
        }
        set hm(a) {
            let b = this.eq;
            this.eq = a;
            if (b != this.eq) {
                this.da("FlatSelectedItemTextColor", b, a);
            }
        }
        get hk() {
            return this.eo;
        }
        set hk(a) {
            let b = this.eo;
            this.eo = a;
            if (b != this.eo) {
                this.da("FlatSelectedItemHoverBackgroundColor", b, a);
            }
        }
        get hl() {
            return this.ep;
        }
        set hl(a) {
            let b = this.ep;
            this.ep = a;
            if (b != this.ep) {
                this.da("FlatSelectedItemHoverTextColor", b, a);
            }
        }
        get r() {
            return this.q;
        }
        set r(a) {
            let b = this.q;
            this.q = a;
            if (b != this.q) {
                this.da("Orientation", enumGetBox(ButtonGroupOrientation_$type, b), enumGetBox(ButtonGroupOrientation_$type, a));
            }
        }
        get b5() {
            return this.a6;
        }
        set b5(a) {
            let b = this.a6;
            this.a6 = a;
            if (b != this.a6) {
                this.da("Id", b, a);
            }
        }
        get disabled() {
            return this.w;
        }
        set disabled(a) {
            let b = this.w;
            this.w = a;
            this.v = true;
            if (b != this.w) {
                this.da("IsDisabled", b, a);
            }
        }
        get z() {
            return this.x;
        }
        set z(a) {
            let b = this.x;
            this.x = a;
            if (b != this.x) {
                this.da("IsMultiSelect", b, a);
            }
        }
        db() {
        }
        onDetachedFromUI() {
            this.view.r();
        }
        onAttachedToUI() {
            this.view.p();
        }
        ab() {
            return this.view.d();
        }
        a5() {
            return this.l();
        }
        bq() {
            let a = this.l();
            return a.l();
        }
        l() {
            let a = new ButtonGroupVisualModelExport();
            a.e = this.g;
            a.f = this.j;
            a.a = this.d;
            a.k = this.al;
            a.b = AppearanceHelper.a(this.ez);
            a.d = AppearanceHelper.a(this.e6);
            a.c = AppearanceHelper.a(this.e0);
            a.j = this.ak;
            a.g = this.disabled;
            a.h = this.z;
            a.i = new List$1(ButtonVisualModelExport.$, 0);
            for (let b = 0; b < this.buttons.count; b++) {
                a.i.add1(this.buttons._inner[b].ey());
            }
            return a;
        }
        provideContainer(a) {
            this.view.q(a);
        }
        get buttons() {
            return this.m;
        }
    }
    ButtonGroup.$t = /*@__PURE__*/ markType(ButtonGroup, 'ButtonGroup', Base.$, [INotifyPropertyChanged_$type]);
    ButtonGroup.f = 2;
    ButtonGroup.av = 4;
    ButtonGroup.gn = /*@__PURE__*/ BrushUtil.g(255, 255, 255, 255);
    ButtonGroup.gp = /*@__PURE__*/ BrushUtil.g(10, 0, 0, 0);
    ButtonGroup.go = /*@__PURE__*/ BrushUtil.g(255, 199, 199, 199);
    ButtonGroup.gq = /*@__PURE__*/ BrushUtil.g(255, 199, 199, 199);
    ButtonGroup.au = 1;
    ButtonGroup.gu = /*@__PURE__*/ BrushUtil.g(255, 0, 0, 0);
    ButtonGroup.gr = /*@__PURE__*/ BrushUtil.g(66, 0, 0, 0);
    ButtonGroup.gv = /*@__PURE__*/ BrushUtil.g(60, 0, 0, 0);
    ButtonGroup.gy = /*@__PURE__*/ BrushUtil.g(255, 0, 0, 0);
    ButtonGroup.gs = /*@__PURE__*/ BrushUtil.g(30, 0, 0, 0);
    ButtonGroup.gt = /*@__PURE__*/ BrushUtil.g(255, 0, 0, 0);
    ButtonGroup.gw = /*@__PURE__*/ BrushUtil.g(96, 0, 0, 0);
    ButtonGroup.gx = /*@__PURE__*/ BrushUtil.g(255, 0, 0, 0);
    ButtonGroup.ap = 3;
    ButtonGroup.fn = /*@__PURE__*/ BrushUtil.g(0, 255, 255, 255);
    ButtonGroup.fp = /*@__PURE__*/ BrushUtil.g(10, 0, 0, 0);
    ButtonGroup.fo = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    ButtonGroup.fq = /*@__PURE__*/ BrushUtil.g(255, 199, 199, 199);
    ButtonGroup.ao = 1;
    ButtonGroup.fu = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    ButtonGroup.fr = /*@__PURE__*/ BrushUtil.g(66, 0, 0, 0);
    ButtonGroup.fv = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    ButtonGroup.fy = /*@__PURE__*/ BrushUtil.g(255, 255, 255, 255);
    ButtonGroup.fs = /*@__PURE__*/ BrushUtil.g(26, 33, 150, 243);
    ButtonGroup.ft = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    ButtonGroup.fw = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    ButtonGroup.fx = /*@__PURE__*/ BrushUtil.g(255, 255, 255, 255);
    ButtonGroup.at = 4;
    ButtonGroup.gb = /*@__PURE__*/ BrushUtil.g(0, 255, 255, 255);
    ButtonGroup.gd = /*@__PURE__*/ BrushUtil.g(10, 0, 0, 0);
    ButtonGroup.gc = /*@__PURE__*/ BrushUtil.g(0, 0, 0, 0);
    ButtonGroup.ge = /*@__PURE__*/ BrushUtil.g(255, 199, 199, 199);
    ButtonGroup.as = 0;
    ButtonGroup.gi = /*@__PURE__*/ BrushUtil.g(255, 228, 28, 119);
    ButtonGroup.gf = /*@__PURE__*/ BrushUtil.g(66, 0, 0, 0);
    ButtonGroup.gj = /*@__PURE__*/ BrushUtil.g(30, 228, 28, 119);
    ButtonGroup.gm = /*@__PURE__*/ BrushUtil.g(255, 228, 28, 119);
    ButtonGroup.gg = /*@__PURE__*/ BrushUtil.g(13, 228, 28, 119);
    ButtonGroup.gh = /*@__PURE__*/ BrushUtil.g(255, 228, 28, 119);
    ButtonGroup.gk = /*@__PURE__*/ BrushUtil.g(30, 228, 28, 119);
    ButtonGroup.gl = /*@__PURE__*/ BrushUtil.g(255, 228, 28, 119);
    ButtonGroup.an = 0;
    ButtonGroup.fb = /*@__PURE__*/ BrushUtil.g(0, 255, 255, 255);
    ButtonGroup.fd = /*@__PURE__*/ BrushUtil.g(10, 0, 0, 0);
    ButtonGroup.fc = /*@__PURE__*/ BrushUtil.g(0, 0, 0, 0);
    ButtonGroup.fe = /*@__PURE__*/ BrushUtil.g(0, 0, 0, 0);
    ButtonGroup.am = 0;
    ButtonGroup.fi = /*@__PURE__*/ BrushUtil.g(255, 119, 119, 119);
    ButtonGroup.ff = /*@__PURE__*/ BrushUtil.g(66, 0, 0, 0);
    ButtonGroup.fj = /*@__PURE__*/ BrushUtil.g(26, 33, 150, 243);
    ButtonGroup.fm = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    ButtonGroup.fg = /*@__PURE__*/ BrushUtil.g(10, 33, 150, 243);
    ButtonGroup.fh = /*@__PURE__*/ BrushUtil.g(255, 119, 119, 119);
    ButtonGroup.fk = /*@__PURE__*/ BrushUtil.g(26, 33, 150, 243);
    ButtonGroup.fl = /*@__PURE__*/ BrushUtil.g(255, 33, 150, 243);
    ButtonGroup.cv = "OutlinedSelectedItemHoverBackgroundColor";
    ButtonGroup.a4 = 0;
    return ButtonGroup;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

class IgrButtonGroupButtonCollection extends IgCollection {
    constructor(list) {
        super();
        if (!IgrButton.$type) {
            IgrButton.$type = markType(IgrButton, "IgrButton");
        }
        if (list) {
            for (let i = 0; i < list.length; i++) {
                this.add(list[i]);
            }
        }
    }
    _createInnerColl() {
        if (!IgrButton.$type) {
            IgrButton.$type = markType(IgrButton, "IgrButton");
        }
        let coll = new SyncableObservableCollection$2(IgrButton.$type, Button.$type, 0);
        coll.compare = (ext, int) => {
            let comp = ext;
            if (comp._implementation) {
                comp = comp._implementation;
            }
            if (comp.equals) {
                return comp.equals(int);
            }
            return comp === int;
        };
        coll.createTo = (ext) => {
            return ext._implementation;
        };
        coll.createFrom = (int) => {
            let ext = int.externalObject;
            if (!ext) {
                ext = IgrButton._createFromInternal(int);
                if (ext) {
                    ext._implementation = int;
                }
            }
            return ext;
        };
        return coll;
    }
}

class IgrButtonGroupSelectionChangedEventArgs {
    createImplementation() {
        return new ButtonGroupSelectionChangedEventArgs();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
}

class IgrButtonGroup extends Component {
    constructor(props) {
        super(props);
        this._wrapper = null;
        this.contentButtons = [];
        /**
        * The style mappings actually present in the treemap. Do not directly modify this array.
        * This array's contents can be modified by causing React to reproject the child content.
        * Or adding and removing ranges from the manual ranges collection on the ranges property.
        */
        this.actualButtons = [];
        this._buttons = null;
        this._buttonsAdapter = null;
        this._implementation = null;
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        this._selectionChanged = null;
        this._selectionChanged_wrapped = null;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._contentChildrenManager = new ContentChildrenManager((ch) => ch.props.name || ch.key || ch.props.id, (ch) => ch.name || ch.key || ch.id, () => this._updateContentChildren());
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this._getMainRef = this._getMainRef.bind(this);
        var container;
        if (document) {
            container = document.createElement("div");
        }
        var root;
        root = container;
        if (container != null) {
            root = container;
        }
        this.requestRender = this.requestRender.bind(this);
        this._portalManager = new PortalManager("buttonContent", this.requestRender);
        var ren = new ReactRenderer(root, document, true, {}, this._portalManager);
        this._wrapper = ren;
        this._container = this._wrapper.rootWrapper;
        this._container.setStyleProperty("display", "inline-block");
        var buttonGroup = this.i;
        this._buttonGroup = buttonGroup;
        this._buttonsAdapter = new CollectionAdapter(this.contentButtons, this.i.buttons, this.actualButtons, (c) => c.i, (i) => {
            if (this._container && this._container.getNativeElement().parentElement) {
                i._styling(this._container.getNativeElement(), this, this);
            }
        }, (i) => { });
        buttonGroup.provideContainer(ren);
        if (props) {
            this.initializeProperties();
        }
    }
    _getMainRef(ref) {
        this._elRef = ref;
    }
    _updateContentChildren() {
        this.contentButtons.length = 0;
        let contentChildrenActual = this._contentChildrenManager.contentChildrenActual;
        for (let i = 0; i < contentChildrenActual.length; i++) {
            if ((Button.$type).isAssignableFrom(contentChildrenActual[i].i.$type)) {
                this.contentButtons.push(contentChildrenActual[i]);
            }
        }
        if (this._buttonsAdapter !== null) {
            this._buttonsAdapter.notifyContentChanged();
        }
    }
    /**
     * A collection of manually added style mappings for the treemap.
    */
    get buttons() {
        if (this._buttons === null) {
            let coll = new IgrButtonGroupButtonCollection();
            let inner = coll._innerColl;
            inner.addListener((sender, e) => {
                switch (e.action) {
                    case NotifyCollectionChangedAction.Add:
                        this._buttonsAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));
                        break;
                    case NotifyCollectionChangedAction.Remove:
                        this._buttonsAdapter.removeManualItemAt(e.oldStartingIndex);
                        break;
                    case NotifyCollectionChangedAction.Replace:
                        this._buttonsAdapter.removeManualItemAt(e.oldStartingIndex);
                        this._buttonsAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));
                        break;
                    case NotifyCollectionChangedAction.Reset:
                        this._buttonsAdapter.clearManualItems();
                        break;
                }
            });
            this._buttons = coll;
        }
        return this._buttons;
    }
    render() {
        let children = this._contentChildrenManager.getChildren(this.props.children);
        this._portalManager.onRender(children);
        let div = createElement("div", {
            className: "ig-button-group igr-button-group",
            ref: this._getMainRef,
            children: children
        });
        return div;
    }
    requestRender() {
        if (this._initialized) {
            this.setState({});
        }
    }
    //private _getLabelPortal(element: DomWrapper, portalCallback: (portal: DomPortal) => void): void {
    //    this._portalManager.getPortal(element, "TemplateContent", portalCallback);
    //}
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    initializeProperties() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    // supports angular themes or custom properties set in CSS
    updateStyle() {
        this._styling(this._elRef, this);
    }
    componentWillUnmount() {
        this._buttonGroup.destroy();
        this._wrapper.destroy();
    }
    componentDidMount() {
        this._elRef.appendChild(this._container.getNativeElement());
        this.initializeContent();
    }
    initializeContent() {
        this._styling(this._container.getNativeElement(), this);
        this.updateStyle();
    }
    createImplementation() {
        return new ButtonGroup();
    }
    get i() {
        return this._implementation;
    }
    /**
 * Gets or sets the display style to use for the button.
*/
    get displayType() {
        return this.i.p;
    }
    set displayType(v) {
        this.i.p = ensureEnum(ButtonGroupDisplayStyle_$type, v);
    }
    /**
     * Gets or sets the base built in theme to use for the button group.
    */
    get baseTheme() {
        return this.i.g;
    }
    set baseTheme(v) {
        this.i.g = ensureEnum(BaseControlTheme_$type, v);
    }
    /**
     * Gets or sets the display density to use for the button group.
    */
    get density() {
        return this.i.k;
    }
    set density(v) {
        this.i.k = ensureEnum(ControlDisplayDensity_$type, v);
    }
    /**
     * Gets the actual display density to use for the button group.
    */
    get actualDensity() {
        return this.i.j;
    }
    set actualDensity(v) {
        this.i.j = ensureEnum(ControlDisplayDensity_$type, v);
    }
    /**
     * Gets the currently selected button indices.
    */
    get selectedIndices() {
        return this.i.d;
    }
    set selectedIndices(v) {
        this.i.d = v;
    }
    /**
     * Gets the actual item corner radius for the appropriate corners.
    */
    get actualItemCornerRadius() {
        return this.i.al;
    }
    set actualItemCornerRadius(v) {
        this.i.al = +v;
    }
    /**
     * Gets the actual item background color.
    */
    get actualItemBackgroundColor() {
        return brushToString(this.i.ez);
    }
    set actualItemBackgroundColor(v) {
        this.i.ez = stringToBrush(v);
    }
    /**
     * Gets the actual item background color.
    */
    get actualItemDisabledBackgroundColor() {
        return brushToString(this.i.e1);
    }
    set actualItemDisabledBackgroundColor(v) {
        this.i.e1 = stringToBrush(v);
    }
    /**
     * Gets the actual item text color.
    */
    get actualItemTextColor() {
        return brushToString(this.i.e6);
    }
    set actualItemTextColor(v) {
        this.i.e6 = stringToBrush(v);
    }
    /**
     * Gets the actual item text color.
    */
    get actualItemDisabledTextColor() {
        return brushToString(this.i.e3);
    }
    set actualItemDisabledTextColor(v) {
        this.i.e3 = stringToBrush(v);
    }
    /**
     * Gets the actual item border color.
    */
    get actualItemBorderColor() {
        return brushToString(this.i.e0);
    }
    set actualItemBorderColor(v) {
        this.i.e0 = stringToBrush(v);
    }
    /**
     * Gets the actual item border color.
    */
    get actualItemDisabledBorderColor() {
        return brushToString(this.i.e2);
    }
    set actualItemDisabledBorderColor(v) {
        this.i.e2 = stringToBrush(v);
    }
    /**
     * Gets the actual item border width.
    */
    get actualItemBorderWidth() {
        return this.i.ak;
    }
    set actualItemBorderWidth(v) {
        this.i.ak = +v;
    }
    /**
     * Gets the actual selected item background color.
    */
    get actualSelectedItemBackgroundColor() {
        return brushToString(this.i.e7);
    }
    set actualSelectedItemBackgroundColor(v) {
        this.i.e7 = stringToBrush(v);
    }
    /**
     * Gets the stroke actual selected item text color.
    */
    get actualSelectedItemTextColor() {
        return brushToString(this.i.fa);
    }
    set actualSelectedItemTextColor(v) {
        this.i.fa = stringToBrush(v);
    }
    /**
     * Gets the actual item hovered background color.
    */
    get actualItemHoverBackgroundColor() {
        return brushToString(this.i.e4);
    }
    set actualItemHoverBackgroundColor(v) {
        this.i.e4 = stringToBrush(v);
    }
    /**
     * Gets the actual item text color.
    */
    get actualItemHoverTextColor() {
        return brushToString(this.i.e5);
    }
    set actualItemHoverTextColor(v) {
        this.i.e5 = stringToBrush(v);
    }
    /**
     * Gets the actual selected item hovered background color.
    */
    get actualSelectedItemHoverBackgroundColor() {
        return brushToString(this.i.e8);
    }
    set actualSelectedItemHoverBackgroundColor(v) {
        this.i.e8 = stringToBrush(v);
    }
    /**
     * Gets the actual selected item hovered text color.
    */
    get actualSelectedItemHoverTextColor() {
        return brushToString(this.i.e9);
    }
    set actualSelectedItemHoverTextColor(v) {
        this.i.e9 = stringToBrush(v);
    }
    /**
     * Gets or sets the corner radius to use for the appropriate corners for the item buttons.
    */
    get itemCornerRadius() {
        return this.i.a1;
    }
    set itemCornerRadius(v) {
        this.i.a1 = +v;
    }
    /**
     * Gets or sets the color to use the background of the buttons in the group.
    */
    get itemBackgroundColor() {
        return brushToString(this.i.hn);
    }
    set itemBackgroundColor(v) {
        this.i.hn = stringToBrush(v);
    }
    /**
     * Gets or sets the disabled color to use the background of the buttons in the group.
    */
    get itemDisabledBackgroundColor() {
        return brushToString(this.i.hp);
    }
    set itemDisabledBackgroundColor(v) {
        this.i.hp = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use the text of the buttons in the group.
    */
    get itemTextColor() {
        return brushToString(this.i.hu);
    }
    set itemTextColor(v) {
        this.i.hu = stringToBrush(v);
    }
    /**
     * Gets or sets the disabled color to use the text of the buttons in the group.
    */
    get itemDisabledTextColor() {
        return brushToString(this.i.hr);
    }
    set itemDisabledTextColor(v) {
        this.i.hr = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use the hovered background of the buttons in the group.
    */
    get itemHoverBackgroundColor() {
        return brushToString(this.i.hs);
    }
    set itemHoverBackgroundColor(v) {
        this.i.hs = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use the border of the buttons in the group.
    */
    get itemBorderColor() {
        return brushToString(this.i.ho);
    }
    set itemBorderColor(v) {
        this.i.ho = stringToBrush(v);
    }
    /**
     * Gets or sets the disabled color to use the border of the buttons in the group.
    */
    get itemDisabledBorderColor() {
        return brushToString(this.i.hq);
    }
    set itemDisabledBorderColor(v) {
        this.i.hq = stringToBrush(v);
    }
    /**
     * Gets or sets the border width to use for the buttons in the group.
    */
    get itemBorderWidth() {
        return this.i.a0;
    }
    set itemBorderWidth(v) {
        this.i.a0 = +v;
    }
    /**
     * Gets or sets the color to use the hovered text of the buttons in the group.
    */
    get itemHoverTextColor() {
        return brushToString(this.i.ht);
    }
    set itemHoverTextColor(v) {
        this.i.ht = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use the background of the buttons in the group that are selected.
    */
    get selectedItemBackgroundColor() {
        return brushToString(this.i.h7);
    }
    set selectedItemBackgroundColor(v) {
        this.i.h7 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use the text of the buttons in the group that are selected.
    */
    get selectedItemTextColor() {
        return brushToString(this.i.ia);
    }
    set selectedItemTextColor(v) {
        this.i.ia = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use the hovered background of the buttons in the group that are selected.
    */
    get selectedItemHoverBackgroundColor() {
        return brushToString(this.i.h8);
    }
    set selectedItemHoverBackgroundColor(v) {
        this.i.h8 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use the hovered text of the buttons in the group that are selected.
    */
    get selectedItemHoverTextColor() {
        return brushToString(this.i.h9);
    }
    set selectedItemHoverTextColor(v) {
        this.i.h9 = stringToBrush(v);
    }
    /**
     * Gets or sets the corner radius to use for the appropriate corners for the outlined type item buttons.
    */
    get outlinedItemCornerRadius() {
        return this.i.a3;
    }
    set outlinedItemCornerRadius(v) {
        this.i.a3 = +v;
    }
    /**
     * Gets or sets the color to use the background of the buttons in the group when type is outlined.
    */
    get outlinedItemBackgroundColor() {
        return brushToString(this.i.hv);
    }
    set outlinedItemBackgroundColor(v) {
        this.i.hv = stringToBrush(v);
    }
    /**
     * Gets or sets the disabled color to use the background of the buttons in the group when type is outlined.
    */
    get outlinedItemDisabledBackgroundColor() {
        return brushToString(this.i.hx);
    }
    set outlinedItemDisabledBackgroundColor(v) {
        this.i.hx = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use the text of the buttons in the group when type is outlined.
    */
    get outlinedItemTextColor() {
        return brushToString(this.i.h2);
    }
    set outlinedItemTextColor(v) {
        this.i.h2 = stringToBrush(v);
    }
    /**
     * Gets or sets the disabled color to use the text of the buttons in the group when type is outlined.
    */
    get outlinedItemDisabledTextColor() {
        return brushToString(this.i.hz);
    }
    set outlinedItemDisabledTextColor(v) {
        this.i.hz = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use the hovered background of the buttons in the group when type is outlined.
    */
    get outlinedItemHoverBackgroundColor() {
        return brushToString(this.i.h0);
    }
    set outlinedItemHoverBackgroundColor(v) {
        this.i.h0 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use the border of the buttons in the group when type is outlined.
    */
    get outlinedItemBorderColor() {
        return brushToString(this.i.hw);
    }
    set outlinedItemBorderColor(v) {
        this.i.hw = stringToBrush(v);
    }
    /**
     * Gets or sets the disabled color to use the border of the buttons in the group when type is outlined.
    */
    get outlinedItemDisabledBorderColor() {
        return brushToString(this.i.hy);
    }
    set outlinedItemDisabledBorderColor(v) {
        this.i.hy = stringToBrush(v);
    }
    /**
     * Gets or sets the border width to use for the buttons in the group when type is outlined.
    */
    get outlinedItemBorderWidth() {
        return this.i.a2;
    }
    set outlinedItemBorderWidth(v) {
        this.i.a2 = +v;
    }
    /**
     * Gets or sets the color to use the hovered text of the buttons in the group when type is outlined.
    */
    get outlinedItemHoverTextColor() {
        return brushToString(this.i.h1);
    }
    set outlinedItemHoverTextColor(v) {
        this.i.h1 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use the background of the buttons in the group that are selected when type is outlined.
    */
    get outlinedSelectedItemBackgroundColor() {
        return brushToString(this.i.h3);
    }
    set outlinedSelectedItemBackgroundColor(v) {
        this.i.h3 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use the text of the buttons in the group that are selected when type is outlined.
    */
    get outlinedSelectedItemTextColor() {
        return brushToString(this.i.h6);
    }
    set outlinedSelectedItemTextColor(v) {
        this.i.h6 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use the hovered background of the buttons in the group that are selected when type is outlined.
    */
    get outlinedSelectedItemHoverBackgroundColor() {
        return brushToString(this.i.h4);
    }
    set outlinedSelectedItemHoverBackgroundColor(v) {
        this.i.h4 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use the hovered text of the buttons in the group that are selected when type is outlined.
    */
    get outlinedSelectedItemHoverTextColor() {
        return brushToString(this.i.h5);
    }
    set outlinedSelectedItemHoverTextColor(v) {
        this.i.h5 = stringToBrush(v);
    }
    /**
     * Gets or sets the corner radius to use for the appropriate corners for the flat type item buttons.
    */
    get flatItemCornerRadius() {
        return this.i.az;
    }
    set flatItemCornerRadius(v) {
        this.i.az = +v;
    }
    /**
     * Gets or sets the color to use the background of the buttons in the group when type is flat.
    */
    get flatItemBackgroundColor() {
        return brushToString(this.i.hb);
    }
    set flatItemBackgroundColor(v) {
        this.i.hb = stringToBrush(v);
    }
    /**
     * Gets or sets the disabled color to use the background of the buttons in the group when type is flat.
    */
    get flatItemDisabledBackgroundColor() {
        return brushToString(this.i.hd);
    }
    set flatItemDisabledBackgroundColor(v) {
        this.i.hd = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use the text of the buttons in the group when type is flat.
    */
    get flatItemTextColor() {
        return brushToString(this.i.hi);
    }
    set flatItemTextColor(v) {
        this.i.hi = stringToBrush(v);
    }
    /**
     * Gets or sets the disabled color to use the text of the buttons in the group when type is flat.
    */
    get flatItemDisabledTextColor() {
        return brushToString(this.i.hf);
    }
    set flatItemDisabledTextColor(v) {
        this.i.hf = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use the hovered background of the buttons in the group when type is flat.
    */
    get flatItemHoverBackgroundColor() {
        return brushToString(this.i.hg);
    }
    set flatItemHoverBackgroundColor(v) {
        this.i.hg = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use the border of the buttons in the group when type is flat.
    */
    get flatItemBorderColor() {
        return brushToString(this.i.hc);
    }
    set flatItemBorderColor(v) {
        this.i.hc = stringToBrush(v);
    }
    /**
     * Gets or sets the disabled color to use the border of the buttons in the group when type is flat.
    */
    get flatItemDisabledBorderColor() {
        return brushToString(this.i.he);
    }
    set flatItemDisabledBorderColor(v) {
        this.i.he = stringToBrush(v);
    }
    /**
     * Gets or sets the border width to use for the buttons in the group when type is flat.
    */
    get flatItemBorderWidth() {
        return this.i.ay;
    }
    set flatItemBorderWidth(v) {
        this.i.ay = +v;
    }
    /**
     * Gets or sets the color to use the hovered text of the buttons in the group when type is flat.
    */
    get flatItemHoverTextColor() {
        return brushToString(this.i.hh);
    }
    set flatItemHoverTextColor(v) {
        this.i.hh = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use the background of the buttons in the group that are selected when type is flat.
    */
    get flatSelectedItemBackgroundColor() {
        return brushToString(this.i.hj);
    }
    set flatSelectedItemBackgroundColor(v) {
        this.i.hj = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use the text of the buttons in the group that are selected when type is flat.
    */
    get flatSelectedItemTextColor() {
        return brushToString(this.i.hm);
    }
    set flatSelectedItemTextColor(v) {
        this.i.hm = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use the hovered background of the buttons in the group that are selected when type is flat.
    */
    get flatSelectedItemHoverBackgroundColor() {
        return brushToString(this.i.hk);
    }
    set flatSelectedItemHoverBackgroundColor(v) {
        this.i.hk = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use the hovered text of the buttons in the group that are selected when type is flat.
    */
    get flatSelectedItemHoverTextColor() {
        return brushToString(this.i.hl);
    }
    set flatSelectedItemHoverTextColor(v) {
        this.i.hl = stringToBrush(v);
    }
    /**
     * Gets or sets the oreientation to use the button group when type is outlined.
    */
    get orientation() {
        return this.i.r;
    }
    set orientation(v) {
        this.i.r = ensureEnum(ButtonGroupOrientation_$type, v);
    }
    /**
     * Gets or sets the id to use for the button group.
    */
    get id() {
        return this.i.b5;
    }
    set id(v) {
        this.i.b5 = v;
    }
    /**
     * Gets or sets whether the checkbox is disabled.
    */
    get disabled() {
        return this.i.disabled;
    }
    set disabled(v) {
        this.i.disabled = ensureBool(v);
    }
    /**
     * Gets or sets whether the group supports multi-select.
    */
    get isMultiSelect() {
        return this.i.z;
    }
    set isMultiSelect(v) {
        this.i.z = ensureBool(v);
    }
    findByName(name) {
        if (this.buttons != null && this.buttons.findByName && this.buttons.findByName(name)) {
            return this.buttons.findByName(name);
        }
        return null;
    }
    get hasUserValues() {
        return this._hasUserValues;
    }
    __m(propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    }
    _styling(container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        let genericPrefix = "";
        let typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("ButtonGroup");
        let additionalPrefixes = [];
        let prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        let b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            let basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            let parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            let parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    }
    onDetachedFromUI() {
        this.i.onDetachedFromUI();
    }
    onAttachedToUI() {
        this.i.onAttachedToUI();
    }
    /**
     * Exports visual information about the current state of the grid.
    
    */
    exportVisualModel() {
        let iv = this.i.a5();
        return (iv);
    }
    /**
     * Returns a serialized copy of the exported visual model
    
    */
    exportSerializedVisualModel() {
        let iv = this.i.bq();
        return (iv);
    }
    get selectionChanged() {
        return this._selectionChanged;
    }
    set selectionChanged(ev) {
        if (this._selectionChanged_wrapped !== null) {
            this.i.selectionChanged = delegateRemove(this.i.selectionChanged, this._selectionChanged_wrapped);
            this._selectionChanged_wrapped = null;
            this._selectionChanged = null;
        }
        this._selectionChanged = ev;
        this._selectionChanged_wrapped = (o, e) => {
            let outerArgs = new IgrButtonGroupSelectionChangedEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeSelectionChanged) {
                this.beforeSelectionChanged(this, outerArgs);
            }
            if (this._selectionChanged) {
                this._selectionChanged(this, outerArgs);
            }
        };
        this.i.selectionChanged = delegateCombine(this.i.selectionChanged, this._selectionChanged_wrapped);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrButtonGroupModule {
    static register() {
        IgrChildContentModule.register();
        IgrButtonModule.register();
        TypeRegistrar.registerCons('IgrButtonGroup', IgrButtonGroup);
        TypeRegistrar.registerCons('IgrButtonGroup', IgrButtonGroup);
        TypeRegistrar.register('ButtonGroup', ButtonGroup.$type);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

class IgrPrefix extends IgrInputGroupItem {
    constructor(props) {
        super(props);
        this._wrapper = null;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this._getMainRef = this._getMainRef.bind(this);
        var container;
        if (document) {
            container = document.createElement("div");
        }
        var root;
        root = container;
        if (container != null) {
            root = container;
        }
        this.requestRender = this.requestRender.bind(this);
        this._portalManager = new PortalManager("prefixContent", this.requestRender);
        var ren = new ReactRenderer(root, document, true, {}, this._portalManager);
        this._wrapper = ren;
        this._container = this._wrapper.rootWrapper;
        this._container.setStyleProperty("display", "inline-block");
        this._container.setStyleProperty("vertical-align", "middle");
        var prefix = this.i;
        this._prefix = prefix;
        prefix.provideContainer(ren);
        if (props) {
            this.initializeProperties();
        }
    }
    _getMainRef(ref) {
        this._elRef = ref;
    }
    render() {
        let propChildren = this.props.children;
        let children = [];
        Children.forEach(propChildren, (ch) => {
            children.push(cloneElement(ch));
        });
        this._portalManager.onRender(children);
        let div = createElement("div", {
            className: "ig-prefix igr-prefix",
            ref: this._getMainRef,
            children: children
        });
        return div;
    }
    requestRender() {
        if (this._initialized) {
            this.setState({});
        }
    }
    //private _getLabelPortal(element: DomWrapper, portalCallback: (portal: DomPortal) => void): void {
    //    this._portalManager.getPortal(element, "TemplateContent", portalCallback);
    //}
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    initializeProperties() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    // supports angular themes or custom properties set in CSS
    updateStyle() {
        this._styling(this._elRef, this);
    }
    componentWillUnmount() {
        this._prefix.destroy();
        this._wrapper.destroy();
    }
    componentDidMount() {
        this._elRef.appendChild(this._container.getNativeElement());
        this.initializeContent();
    }
    initializeContent() {
        this._styling(this._container.getNativeElement(), this);
        this.updateStyle();
    }
    createImplementation() {
        return new Prefix();
    }
    /**
                             * @hidden
                             */
    get i() {
        return this._implementation;
    }
    /**
 * Gets or sets the id to use for the checkbox.
*/
    get id() {
        return this.i.z;
    }
    set id(v) {
        this.i.z = v;
    }
    /**
     * Gets or sets the value of the aria-label attribute.
    */
    get ariaLabel() {
        return this.i.w;
    }
    set ariaLabel(v) {
        this.i.w = v;
    }
    /**
     * Gets or sets whether the prefix is hovered.
    */
    get isHover() {
        return this.i.q;
    }
    set isHover(v) {
        this.i.q = ensureBool(v);
    }
    /**
     * Gets or sets whether the checkbox is disabled.
    */
    get disabled() {
        return this.i.disabled;
    }
    set disabled(v) {
        this.i.disabled = ensureBool(v);
    }
    onDetachedFromUI() {
        this.i.onDetachedFromUI();
    }
    onAttachedToUI() {
        this.i.onAttachedToUI();
    }
    /**
     * Exports visual information about the current state of the grid.
    
    */
    exportVisualModel() {
        let iv = this.i.t();
        return (iv);
    }
    /**
     * Returns a serialized copy of the exported visual model
    
    */
    exportSerializedVisualModel() {
        let iv = this.i.y();
        return (iv);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrPrefixModule {
    static register() {
        IgrChildContentModule.register();
        TypeRegistrar.registerCons('IgrPrefix', IgrPrefix);
        TypeRegistrar.registerCons('IgrPrefix', IgrPrefix);
        TypeRegistrar.register('Prefix', Prefix.$type);
    }
}

class IgrSuffix extends IgrInputGroupItem {
    constructor(props) {
        super(props);
        this._wrapper = null;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this._getMainRef = this._getMainRef.bind(this);
        var container;
        if (document) {
            container = document.createElement("div");
        }
        var root;
        root = container;
        if (container != null) {
            root = container;
        }
        this.requestRender = this.requestRender.bind(this);
        this._portalManager = new PortalManager("suffixContent", this.requestRender);
        var ren = new ReactRenderer(root, document, true, {}, this._portalManager);
        this._wrapper = ren;
        this._container = this._wrapper.rootWrapper;
        this._container.setStyleProperty("display", "inline-block");
        this._container.setStyleProperty("vertical-align", "middle");
        var suffix = this.i;
        this._suffix = suffix;
        suffix.provideContainer(ren);
        if (props) {
            this.initializeProperties();
        }
    }
    _getMainRef(ref) {
        this._elRef = ref;
    }
    render() {
        let propChildren = this.props.children;
        let children = [];
        Children.forEach(propChildren, (ch) => {
            children.push(cloneElement(ch));
        });
        this._portalManager.onRender(children);
        let div = createElement("div", {
            className: "ig-suffix igr-suffix",
            ref: this._getMainRef,
            children: children
        });
        return div;
    }
    requestRender() {
        if (this._initialized) {
            this.setState({});
        }
    }
    //private _getLabelPortal(element: DomWrapper, portalCallback: (portal: DomPortal) => void): void {
    //    this._portalManager.getPortal(element, "TemplateContent", portalCallback);
    //}
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    initializeProperties() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    // supports angular themes or custom properties set in CSS
    updateStyle() {
        this._styling(this._elRef, this);
    }
    componentWillUnmount() {
        this._suffix.destroy();
        this._wrapper.destroy();
    }
    componentDidMount() {
        this._elRef.appendChild(this._container.getNativeElement());
        this.initializeContent();
    }
    initializeContent() {
        this._styling(this._container.getNativeElement(), this);
        this.updateStyle();
    }
    createImplementation() {
        return new Suffix();
    }
    /**
                             * @hidden
                             */
    get i() {
        return this._implementation;
    }
    /**
 * Gets or sets the id to use for the checkbox.
*/
    get id() {
        return this.i.z;
    }
    set id(v) {
        this.i.z = v;
    }
    /**
     * Gets or sets the value of the aria-label attribute.
    */
    get ariaLabel() {
        return this.i.w;
    }
    set ariaLabel(v) {
        this.i.w = v;
    }
    /**
     * Gets or sets whether the suffix is hovered.
    */
    get isHover() {
        return this.i.q;
    }
    set isHover(v) {
        this.i.q = ensureBool(v);
    }
    /**
     * Gets or sets whether the checkbox is disabled.
    */
    get disabled() {
        return this.i.disabled;
    }
    set disabled(v) {
        this.i.disabled = ensureBool(v);
    }
    onDetachedFromUI() {
        this.i.onDetachedFromUI();
    }
    onAttachedToUI() {
        this.i.onAttachedToUI();
    }
    /**
     * Exports visual information about the current state of the grid.
    
    */
    exportVisualModel() {
        let iv = this.i.t();
        return (iv);
    }
    /**
     * Returns a serialized copy of the exported visual model
    
    */
    exportSerializedVisualModel() {
        let iv = this.i.y();
        return (iv);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let KEYCODES_$type = /*@__PURE__*/ markEnum('KEYCODES', 'ENTER,13|SPACE,32|ESCAPE,27|LEFT_ARROW,37|UP_ARROW,38|RIGHT_ARROW,39|DOWN_ARROW,40|F2,113|TAB,9|CTRL,17|Z,90|Y,89|X,88|BACKSPACE,8|DELETE,46|INPUT_METHOD,229');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

export { Button, ButtonClickEventArgs, ButtonDisplayStyle_$type, ButtonGroup, ButtonGroupButtonCollection, ButtonGroupDisplayStyle_$type, ButtonGroupOrientation, ButtonGroupOrientation_$type, ButtonGroupSelectionChangedEventArgs, ButtonGroupView, ButtonGroupVisualModelExport, ButtonView, ButtonVisualModelExport, Calendar, CalendarView, CalendarVisualModelExport, Checkbox, CheckboxChangeEventArgs, CheckboxLabelPosition_$type, CheckboxView, CheckboxVisualModelExport, DatePicker, DatePickerView, DatePickerVisualModelExport, DayInfo, ElevationHelper, Icon, IconView, IconVisualModelExport, IgrButton, IgrButtonClickEventArgs, IgrButtonGroup, IgrButtonGroupButtonCollection, IgrButtonGroupModule, IgrButtonGroupSelectionChangedEventArgs, IgrButtonModule, IgrCalendar, IgrCalendarModule, IgrCheckbox, IgrCheckboxChangeEventArgs, IgrCheckboxModule, IgrDatePicker, IgrDatePickerModule, IgrIcon, IgrIconModule, IgrInput, IgrInputChangeEventArgs, IgrInputGroup, IgrInputGroupInputCollection, IgrInputGroupItem, IgrInputGroupModule, IgrInputModule, IgrLabel, IgrLabelModule, IgrPrefix, IgrPrefixModule, IgrRipple, IgrRippleModule, IgrSuffix, IgrValueChangedEventArgs, Input, InputChangeEventArgs, InputGroup, InputGroupDisplayType, InputGroupDisplayType_$type, InputGroupInputCollection, InputGroupItem, InputGroupView, InputGroupVisualModelExport, InputShiftType, InputShiftType_$type, InputView, InputVisualModelExport, KEYCODES_$type, Label, LabelShiftType, LabelShiftType_$type, LabelView, LabelVisualModelExport, MaskOptions, MaskParsingService, Prefix, PrefixShiftType, PrefixShiftType_$type, PrefixView, PrefixVisualModelExport, Replaced, Ripple, RippleView, RippleVisualModelExport, Suffix, SuffixShiftType, SuffixShiftType_$type, SuffixView, SuffixVisualModelExport, ThemeResolver, ValueChangedEventArgs };
//# sourceMappingURL=igniteui-react-inputs.js.map
