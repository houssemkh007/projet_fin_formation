import * as React from 'react';
import { ensureEnum, brushToString, stringToBrush, ensureBool, initializePropertiesFromCss, NamePatcher, isValidProp, toSpinal, getModifiedProps } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
import { ReactRenderer } from "igniteui-react-core";
import { DataGridToolbar } from './DataGridToolbar';
import { IgrColumnChooser } from "./igr-column-chooser";
import { IgrColumnPinning } from "./igr-column-pinning";
import { ControlDisplayDensity_$type } from "igniteui-react-core";
import { BaseControlTheme_$type } from "igniteui-react-core";
export class IgrDataGridToolbar extends React.Component {
    constructor(props) {
        super(props);
        this._implementation = null;
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._getMainRef = this._getMainRef.bind(this);
        this._getColumnChooserRef = this._getColumnChooserRef.bind(this);
        this._getColumnPinningRef = this._getColumnPinningRef.bind(this);
        this._implementation = this.createImplementation();
        var toolbar = this.i;
        this._toolbar = toolbar;
        toolbar.notifySizeChanged();
        if (props) {
            this.initializeProperties();
        }
    }
    set height(value) {
        this._height = value;
        if (this._elRef) {
            this._elRef.style.height = value;
            this._toolbar.notifySizeChanged();
        }
    }
    get height() {
        return this._height;
    }
    set width(value) {
        this._width = value;
        if (this._elRef) {
            this._elRef.style.height = value;
            this._toolbar.notifySizeChanged();
        }
    }
    get width() {
        return this._width;
    }
    _getMainRef(ref) {
        this._elRef = ref;
        if (this._elRef != null && this._columnChooserRef != null && this._columnPinningRef != null) {
            this._renderer = new ReactRenderer(this._elRef, document, false, null);
            this._toolbar.provideContainer(this._renderer, this._columnChooserRef.i, this._columnPinningRef.i);
        }
    }
    _getColumnChooserRef(ref) {
        this._columnChooserRef = ref;
        if (this._elRef != null && this._columnChooserRef != null && this._columnPinningRef != null) {
            this._renderer = new ReactRenderer(this._elRef, document, false, null);
            this._toolbar.provideContainer(this._renderer, this._columnChooserRef.i, this._columnPinningRef.i);
        }
    }
    _getColumnPinningRef(ref) {
        this._columnPinningRef = ref;
        if (this._elRef != null && this._columnChooserRef != null && this._columnPinningRef != null) {
            this._renderer = new ReactRenderer(this._elRef, document, false, null);
            this._toolbar.provideContainer(this._renderer, this._columnChooserRef.i, this._columnPinningRef.i);
        }
    }
    render() {
        let children = [];
        let title = React.createElement("span", {
            key: "titleSpan"
        });
        children.push(title);
        let buttons = [];
        let hideBtnContainer = React.createElement("div", {
            key: "hideBtnContainer"
        });
        buttons.push(hideBtnContainer);
        let pinBtnContainer = React.createElement("div", {
            key: "pinBtnContainer"
        });
        buttons.push(pinBtnContainer);
        /*let exportInput = React.createElement("input", {
            key: "exportInput",
            type: "Button"
        });
        buttons.push(exportInput);*/
        let buttonsContainer = React.createElement("div", {
            key: "buttonsContainer",
            children: buttons
        });
        children.push(buttonsContainer);
        let chooserDialogChildren = [];
        let chooserDialog = React.createElement("div", {
            key: "chooserDialog",
            children: chooserDialogChildren
        });
        children.push(chooserDialog);
        let columnChooser = React.createElement(IgrColumnChooser, {
            ref: this._getColumnChooserRef,
            key: "columnChooser"
        });
        chooserDialogChildren.push(columnChooser);
        let pinningChildren = [];
        let pinningDialog = React.createElement("div", {
            key: "pinningDialog",
            children: pinningChildren,
        });
        children.push(pinningDialog);
        let columnPinning = React.createElement(IgrColumnPinning, {
            ref: this._getColumnPinningRef,
            key: "columnPinning"
        });
        pinningChildren.push(columnPinning);
        /*let exportChildren: any[] = [];
        let exportDialog = React.createElement("div", {
            key: "exportDialog",
            children: exportChildren,
            style: {
                background: "white",
                display: "none",
                position: "absolute",
                zIndex: 12000,
                borderWidth: "1px",
                borderStyle: "solid"
            }
        });
        children.push(exportDialog);

        let exportExcel = React.createElement("input", {
            key: "exportExcel",
            type: "Button"
        });
        exportChildren.push(exportExcel);

        let exportCsv = React.createElement("input", {
            key: "exportCsv",
            type: "Button"
        });
        exportChildren.push(exportCsv);*/
        let div = React.createElement("div", {
            className: "ig-data-grid-toolbar igr-data-grid-toolbar",
            ref: this._getMainRef,
            children: children
        });
        return div;
    }
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    initializeProperties() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    // supports angular themes or custom properties set in CSS
    updateStyle() {
        this._styling(this._elRef, this);
    }
    componentWillUnmount() {
        this._toolbar.destroy();
        if (this._renderer) {
            this._renderer.destroy();
        }
    }
    componentDidMount() {
        this._elRef.style.width = this._width ? this._width : "";
        this._elRef.style.height = this._height ? this._height : "";
        this._toolbar.notifySizeChanged();
        this.initializeContent();
    }
    initializeContent() {
        this.updateStyle();
        this.i.notifySizeChanged();
    }
    createImplementation() {
        return new DataGridToolbar();
    }
    get i() {
        return this._implementation;
    }
    /**
 * Gets or Sets the property name that contains the values.
*/
    get targetGrid() {
        if (this.i.b == null) {
            return null;
        }
        return this.i.b.externalObject;
    }
    set targetGrid(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.b = null : this.i.b = v.i;
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get toolbarTitle() {
        return this.i.ap;
    }
    set toolbarTitle(v) {
        this.i.ap = v;
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get toolbarTitleStyle() {
        if (this.i.m == null) {
            return null;
        }
        return this.i.m.fontString;
    }
    set toolbarTitleStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.m = fi;
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get toolbarTitleColor() {
        return brushToString(this.i.bd);
    }
    set toolbarTitleColor(v) {
        this.i.bd = stringToBrush(v);
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get backgroundColor() {
        return brushToString(this.i.bb);
    }
    set backgroundColor(v) {
        this.i.bb = stringToBrush(v);
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get dialogBackgroundColor() {
        return brushToString(this.i.bc);
    }
    set dialogBackgroundColor(v) {
        this.i.bc = stringToBrush(v);
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get columnChooser() {
        return this.i.p;
    }
    set columnChooser(v) {
        this.i.p = ensureBool(v);
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get columnChooserText() {
        return this.i.ab;
    }
    set columnChooserText(v) {
        this.i.ab = v;
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get columnChooserTitle() {
        return this.i.ad;
    }
    set columnChooserTitle(v) {
        this.i.ad = v;
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get columnPinning() {
        return this.i.q;
    }
    set columnPinning(v) {
        this.i.q = ensureBool(v);
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get columnPinningText() {
        return this.i.ag;
    }
    set columnPinningText(v) {
        this.i.ag = v;
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get columnPinningTitle() {
        return this.i.ai;
    }
    set columnPinningTitle(v) {
        this.i.ai = v;
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get density() {
        return this.i.i;
    }
    set density(v) {
        this.i.i = ensureEnum(ControlDisplayDensity_$type, v);
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get baseTheme() {
        return this.i.g;
    }
    set baseTheme(v) {
        this.i.g = ensureEnum(BaseControlTheme_$type, v);
    }
    findByName(name) {
        if (this.targetGrid && this.targetGrid.name && this.targetGrid.name == name) {
            return this.targetGrid;
        }
        return null;
    }
    get hasUserValues() {
        return this._hasUserValues;
    }
    __m(propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    }
    _styling(container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        let genericPrefix = "";
        let typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("DataGridToolbar");
        let additionalPrefixes = [];
        let prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        let b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            let basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            let parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            let parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this.targetGrid && this.targetGrid._styling) {
            this.targetGrid._styling(container, component, this);
        }
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    }
}
//# sourceMappingURL=igr-data-grid-toolbar.js.map
