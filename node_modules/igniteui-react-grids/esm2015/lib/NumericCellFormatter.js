/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, markType } from "igniteui-react-core";
import { isNaN_ } from "igniteui-react-core";
import { isDigit } from "igniteui-react-core";
import { stringIsNullOrEmpty } from "igniteui-react-core";
/**
 * @hidden
 */
export let NumericCellFormatter = /*@__PURE__*/ (() => {
    class NumericCellFormatter extends Base {
        static c() {
            if (NumericCellFormatter.a != null) {
                return NumericCellFormatter.a;
            }
            let a = "";
            let b = 1.1;
            let c = b.toLocaleString();
            let d = false;
            for (let e = 0; e < c.length; e++) {
                if (c.charAt(e) == '1') {
                    d = !d;
                }
                if (c.charAt(e) != '1' && d) {
                    a += c.charAt(e);
                }
            }
            NumericCellFormatter.a = a;
            return NumericCellFormatter.a;
        }
        static b(a) {
            if (a.ks != null) {
                return a.ks.i(a.kz);
            }
            let b = a.kz;
            let c = a.kz;
            let d = 10;
            let e = 0;
            let f = "0";
            if (isNaN_(a.kz)) {
                return "";
            }
            let g = 0;
            if (a.kz >= 0) {
                g = a.kz - Math.floor(a.kz);
            }
            else {
                g = Math.abs(a.kz - Math.ceil(a.kz));
            }
            let h = 0;
            if (a.kz >= 0) {
                h = a.kz - g;
            }
            else {
                h = a.kz + g;
            }
            let i = Math.abs(h);
            let j = g.toString();
            if (g == 0) {
                j = "";
            }
            else {
                j = j.substr(2);
            }
            let k = Math.round(i).toString();
            d = a.k7;
            e = a.k9;
            if (e < 0) {
                e = 0;
            }
            if (d < 0) {
                d = 10;
            }
            if (e > d) {
                d = e;
            }
            if (j.length > d) {
                let l = Math.round(g * (Math.pow(10, d))) / (Math.pow(10, d));
                j = (l).toString();
                if (l == 1) {
                    if (a.kz >= 0) {
                        h += 1;
                        i += 1;
                    }
                    else {
                        h -= 1;
                        i += 1;
                    }
                    j = "";
                    k = Math.round(i).toString();
                }
                else if (l == 0) {
                    j = "";
                }
                else {
                    j = j.substr(2);
                }
            }
            let m = k.length;
            let n = Math.max(0, a.lb - k.length);
            let o = Math.max(0, a.k9 - j.length);
            let p = false;
            if (k.charAt(0) == '1') {
                p = true;
            }
            for (let q = 0; q < n; q++) {
                let r = "0";
                if (a.kx) {
                    if (p) {
                        r = "9";
                    }
                    else {
                        r = "1";
                    }
                }
                k = r + k;
            }
            for (let s = 0; s < o; s++) {
                j = j + "0";
            }
            if (d == 0) {
                j = "";
            }
            if (a.kx && k.length > 0) {
                let t = parseInt(k);
                let u = t.toLocaleString();
                let v = '1';
                if (p) {
                    v = '9';
                }
                let w = true;
                let x = "";
                for (let y = 0; y < u.length; y++) {
                    if (u.charAt(y) == v && w) {
                        x += "0";
                    }
                    else {
                        x += u.charAt(y);
                        if (isDigit(u.charAt(y)) && u.charAt(y) != v) {
                            w = false;
                        }
                    }
                }
                k = x;
            }
            if (h < 0) {
                k = "-" + k;
            }
            let z = k;
            if (j.length > 0) {
                z += NumericCellFormatter.c() + j;
            }
            if (b >= 0) {
                if (!stringIsNullOrEmpty(a.l4)) {
                    z = a.l4 + z;
                }
                if (!stringIsNullOrEmpty(a.l6)) {
                    z += a.l6;
                }
            }
            else {
                if (!stringIsNullOrEmpty(a.lz)) {
                    z = a.lz + z;
                }
                if (!stringIsNullOrEmpty(a.l1)) {
                    z += a.l1;
                }
            }
            return z;
        }
    }
    NumericCellFormatter.$t = /*@__PURE__*/ markType(NumericCellFormatter, 'NumericCellFormatter');
    NumericCellFormatter.a = null;
    return NumericCellFormatter;
})();
//# sourceMappingURL=NumericCellFormatter.js.map
