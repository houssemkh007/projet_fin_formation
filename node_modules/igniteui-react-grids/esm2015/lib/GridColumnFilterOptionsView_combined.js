/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { GridColumnOptionsViewBase } from "./GridColumnOptionsViewBase";
import { ControlDisplayDensity_$type } from "igniteui-react-core";
import { GridColumnOptionsUtilities } from "./GridColumnOptionsUtilities";
import { EventArgs, runOn, delegateCombine, markType, enumGetBox, fromEnum, toNullable, typeCast } from "igniteui-react-core";
import { Size } from "igniteui-react-core";
import { GridColumnOptionsSectionBase } from "./GridColumnOptionsSectionBase";
import { StringComparer } from "igniteui-react-core";
import { ColumnComparisonConditionOperatorType_$type } from "./ColumnComparisonConditionOperatorType";
import { List$1 } from "igniteui-react-core";
import { ColumnComparisonFilterCondition } from "./ColumnComparisonFilterCondition";
import { ColumnFilterConditionGroup } from "./ColumnFilterConditionGroup";
import { PrimaryKeyValue } from "./PrimaryKeyValue";
import { SortDescription } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { FilterApplyButtonClickEventArgs } from "./FilterApplyButtonClickEventArgs";
import { FilterCancelButtonClickEventArgs } from "./FilterCancelButtonClickEventArgs";
import { nullableEquals } from "igniteui-react-core";
/**
 * @hidden
 */
export let GridColumnFilterOptionsView = /*@__PURE__*/ (() => {
    class GridColumnFilterOptionsView extends GridColumnOptionsViewBase {
        constructor() {
            super(...arguments);
            this.y = null;
            this.z = null;
            this.u = null;
            this.x = null;
            this.aa = null;
            this.t = null;
            this.v = null;
            this.w = null;
            this.q = null;
            this.o = null;
            this.p = null;
            this.applyButtonClick = null;
            this.cancelButtonClick = null;
        }
        m() {
            super.m();
            let a = this.n;
            a.bd(this.q);
            a.bd(this.o);
            a.bd(this.p);
            if (null != this.w && null != this.x) {
                this.w.setStyleProperty("padding-bottom", "5px");
                this.w.setStyleProperty("margin", "0 -8px");
                switch (this.q.g) {
                    case 2:
                        this.x.setStyleProperty("margin", "0 -.25rem");
                        break;
                    case 1:
                    case 3:
                        this.x.setStyleProperty("margin", "0 -.5rem");
                        break;
                }
                this.x.setRawText(a.cb);
                this.x.setStyleProperty("font", a.aa.fontString);
            }
            if (null != this.aa) {
                this.aa.setRawText(a.ck);
                this.aa.setStyleProperty("font", a.aa.fontString);
                GridColumnOptionsUtilities.j(this.aa, false);
            }
            if (null != this.t) {
                this.t.setRawText(a.b3);
            }
            if (null != this.v) {
                this.v.setRawText(a.b7);
            }
        }
        get n() {
            return this.b;
        }
        al(a) {
            this.o.disabled = !a;
        }
        am(a) {
            if (null != this.q) {
                this.q.disabled = !a;
            }
        }
        ah(a) {
            let b = this.e;
            let c = this.n;
            this.y = a;
            let d;
            let e;
            this.w = ((() => { let f = GridColumnOptionsUtilities.g(b, GridColumnFilterOptionsView.ab, 1, c.p, c.j, new Size(1, 24, 24), this.q, d, this.x, e, false, true); this.q = f.p6; d = f.p7; this.x = f.p8; e = f.p9; return f.ret; })());
            let f = this.q;
            f.clicked = delegateCombine(f.clicked, runOn(this, this.ae));
            this.y.append(this.w);
        }
        aj(a) {
            let b = this.e;
            this.z = a;
            this.aa = b.createElement("span");
            this.aa.setRawText(this.n.ck);
            this.z.append(this.aa);
        }
        ai(a) {
            let b = this.e;
            let c = this.n;
            this.u = a;
            let d = b.createElement("hr");
            d.setStyleProperty("margin", "3px -7px");
            d.setStyleProperty("border-top", "1px solid #dde2eb");
            d.setStyleProperty("border-left", "0px");
            d.setStyleProperty("border-right", "0px");
            d.setStyleProperty("border-bottom", "0px");
            this.u.append(d);
            let e;
            let f = ((() => { let g = GridColumnOptionsUtilities.f(b, null, c.p, c.j, Size.empty, this.o, e, this.t); this.o = g.p5; e = g.p6; this.t = g.p7; return g.ret; })());
            f.setStyleProperty("margin-left", "1rem");
            let g = this.o;
            g.clicked = delegateCombine(g.clicked, runOn(this, this.ac));
            this.o.hg = "1";
            let h;
            let i = ((() => { let j = GridColumnOptionsUtilities.f(b, null, c.p, c.j, Size.empty, this.p, h, this.v); this.p = j.p5; h = j.p6; this.v = j.p7; return j.ret; })());
            let j = this.p;
            j.clicked = delegateCombine(j.clicked, runOn(this, this.ad));
            this.p.hg = "1";
            this.p.s = 2;
            let k = b.createElement("div");
            k.setStyleProperty("display", "flex");
            k.setStyleProperty("justify-content", "space-between");
            k.append(i);
            k.append(f);
            this.u.append(k);
        }
        ak(a) {
            this.h(a);
        }
        af() {
            if (null != this.applyButtonClick) {
                this.applyButtonClick(this, EventArgs.empty);
            }
        }
        ag() {
            if (null != this.cancelButtonClick) {
                this.cancelButtonClick(this, EventArgs.empty);
            }
        }
        ac(a, b) {
            this.af();
        }
        ad(a, b) {
            this.ag();
        }
        ae(a, b) {
            this.n.cp();
        }
    }
    GridColumnFilterOptionsView.$t = /*@__PURE__*/ markType(GridColumnFilterOptionsView, 'GridColumnFilterOptionsView', GridColumnOptionsViewBase.$);
    GridColumnFilterOptionsView.ab = "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z";
    return GridColumnFilterOptionsView;
})();
/**
 * @hidden
 */
export let GridColumnFilterOptions = /*@__PURE__*/ (() => {
    class GridColumnFilterOptions extends GridColumnOptionsSectionBase {
        constructor() {
            super();
            this.by = null;
            this.b2 = "Apply";
            this.b6 = "Cancel";
            this.ca = "Clear column filters";
            this.cf = "Search";
            this.bu = 0;
            this.bt = 0;
            this.cj = "Text filter";
            this.applyButtonClick = null;
            this.cancelButtonClick = null;
        }
        f() {
            return new GridColumnFilterOptionsView();
        }
        bo() {
            if (null == this.column) {
                return false;
            }
            if (!this.column.gb) {
                return false;
            }
            if (this.c == null || this.c.actualDataSource == null || !this.c.actualDataSource.isGroupingSupported) {
                return false;
            }
            return true;
        }
        a3() {
            super.a3();
            this.cu();
            this.c0();
        }
        a4(a, b) {
            super.a4(a, b);
            switch (b.propertyName) {
                case "Filter":
                    this.c0();
                    break;
            }
        }
        onViewInitialized() {
            super.onViewInitialized();
            let a = this.bs;
            a.applyButtonClick = delegateCombine(a.applyButtonClick, runOn(this, this.c4));
            let b = this.bs;
            b.cancelButtonClick = delegateCombine(b.cancelButtonClick, runOn(this, this.c5));
        }
        ba(a, b, c) {
            super.ba(a, b, c);
            switch (a) {
                case "ApplyButtonCaption":
                case "CancelButtonCaption":
                case "ClearColumnFiltersCaption":
                case "TextFilterCaption":
                    this.bs.m();
                    break;
                case "ActualBaseTheme":
                case "ActualDensity":
                case "ActualFilterListDensity":
                case "FilterListPlaceholderText":
                case "BackgroundColor":
                case "TextColor":
                    this.c2();
                    break;
                case "FilterListDensity":
                    this.bv = this.bx == 0 ? this.q : this.bx;
                    break;
            }
        }
        get bs() {
            return this.e;
        }
        get b3() {
            return this.b2;
        }
        set b3(a) {
            if (0 == StringComparer.b.compare(a, this.b2)) {
                return;
            }
            let b = this.b2;
            this.b2 = a;
            this.a8("ApplyButtonCaption", b, this.b2);
        }
        get b7() {
            return this.b6;
        }
        set b7(a) {
            if (0 == StringComparer.b.compare(a, this.b6)) {
                return;
            }
            let b = this.b6;
            this.b6 = a;
            this.a8("CancelButtonCaption", b, this.b6);
        }
        get cb() {
            return this.ca;
        }
        set cb(a) {
            if (0 == StringComparer.b.compare(a, this.ca)) {
                return;
            }
            let b = this.ca;
            this.ca = a;
            this.a8("ClearColumnFiltersCaption", b, this.ca);
        }
        get cg() {
            return this.cf;
        }
        set cg(a) {
            if (0 == StringComparer.b.compare(a, this.cf)) {
                return;
            }
            let b = this.cf;
            this.cf = a;
            this.a8("FilterListPlaceholderText", b, this.cf);
        }
        get bx() {
            return this.bu;
        }
        set bx(a) {
            let b = this.bu;
            this.bu = a;
            if (b != this.bu) {
                this.a8("FilterListDensity", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, a));
            }
        }
        get bv() {
            return this.bt;
        }
        set bv(a) {
            let b = this.bt;
            this.bt = a;
            if (b != this.bt) {
                this.a8("ActualFilterListDensity", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, a));
            }
        }
        get ck() {
            return this.cj;
        }
        set ck(a) {
            if (0 == StringComparer.b.compare(a, this.cj)) {
                return;
            }
            let b = this.cj;
            this.cj = a;
            this.a8("TextFilterCaption", b, this.cj);
        }
        c0() {
            let a = this.by.ad();
            this.bs.al(!a);
            let b = this.bz();
            this.bs.am(b);
        }
        cn() {
            if (0 == this.by.g.count) {
                this.cp();
                return;
            }
            let a;
            let b;
            if (this.by.p == 0) {
                b = false;
                a = 10;
            }
            else {
                b = true;
                a = 5;
            }
            let c = new List$1(ColumnComparisonFilterCondition.$, 0);
            let d = this.by.g;
            for (let e = 0; e < d.count; e++) {
                let f = d._inner[e];
                let g = f.value[0];
                let h = GridColumnFilterOptions.bp(a, g);
                c.add(h);
            }
            if (c.count == 1) {
                this.column.eo = c._inner[0];
            }
            else {
                let i = new ColumnFilterConditionGroup();
                i.f = b;
                for (let j of fromEnum(c)) {
                    i.h(j);
                }
                this.column.eo = i;
            }
        }
        provideClearFiltersSection(a) {
            this.bs.ah(a);
        }
        provideFilterSection(a) {
            this.bs.aj(a);
        }
        provideFilterCheckboxListSection(a) {
            this.by = a;
            this.c2();
            let b = this.by;
            b.selectAllCheckboxChanged = delegateCombine(b.selectAllCheckboxChanged, runOn(this, this.co));
            let c = this.by;
            c.checkedChanged = delegateCombine(c.checkedChanged, runOn(this, this.cr));
        }
        provideFilterButtonSection(a) {
            this.bs.ai(a);
        }
        provideMainDiv(a) {
            this.bs.ak(a);
        }
        cp() {
            this.column.eo = null;
            this.c1();
        }
        static bp(a, b) {
            let c = new ColumnComparisonFilterCondition();
            c.e = a;
            c.j = b;
            return c;
        }
        bz() {
            let a = this.column;
            if (null == a) {
                return false;
            }
            return null != a.eo;
        }
        cu() {
            let a = this.column;
            let b = this.c;
            let c = (null != a) ? a.hy : null;
            let d = (null != b) ? b.actualDataSource.clone() : null;
            if (null != d) {
                this.c3(b.actualDataSource, d);
                d.summaryDescriptions.clear();
                d.groupDescriptions.clear();
                let e = new SortDescription();
                e.propertyName = c;
                e.direction = 0;
                d.groupDescriptions.add(e);
                let f = b.z(a);
                let g = d.filterExpressions;
                for (let h = g.j.count - 1; h >= 0; h--) {
                    let i = g.j.item(h);
                    if (i.isAutoGenerated) {
                        if (null != f) {
                            g.j.item(h, f);
                        }
                        else {
                            d.filterExpressions.removeAt(h);
                        }
                        break;
                    }
                }
                this.by.itemsSource = d;
                this.by.at = c;
                this.by.b = [c];
                d.isSectionHeaderNormalRow = true;
                d.isSectionExpandedDefault = false;
                d.isSectionCollapsable = true;
                d.isSectionContentVisible = false;
                this.c1();
            }
        }
        c3(a, b) {
            if (a != null && a.actualSchema != null && b != null && b.actualSchema != null) {
                let c = b.actualSchema.propertyTypes;
                let d = a.actualSchema.propertyTypes;
                for (let e = 0; e < c.length; e++) {
                    if (c[e] != d[e]) {
                        c[e] = d[e];
                    }
                }
            }
        }
        c1() {
            let a = this.column;
            let b = (null != a) ? a.hy : null;
            let c = true;
            let d = toNullable(ColumnComparisonConditionOperatorType_$type, null);
            let e = this.b0();
            for (let f = e.count - 1; f >= 0; f--) {
                let g = e._inner[f];
                switch (g.e) {
                    case 5:
                    case 10: break;
                    default:
                        e.removeAt(f);
                        continue;
                }
                if (nullableEquals(d, null)) {
                    d = toNullable(ColumnComparisonConditionOperatorType_$type, g.e);
                }
                else if (d.value != g.e) {
                    c = false;
                    break;
                }
            }
            if (e.count == 0 || !c) {
                this.by.b5();
                return;
            }
            switch (d.value) {
                case 5:
                    this.by.bh();
                    break;
                case 10:
                    this.by.b5();
                    break;
            }
            let h = this.by.g;
            for (let i of fromEnum(e)) {
                h.add(new PrimaryKeyValue([b], [i.j]));
            }
            this.c0();
        }
        b0() {
            let a = new List$1(ColumnComparisonFilterCondition.$, 0);
            let b = this.column;
            if (null == b) {
                return a;
            }
            if (null != b.eo) {
                let c = GridColumnFilterOptions.cq(b.eo, a);
                a = c.p1;
            }
            return a;
        }
        static cq(a, b) {
            let c = typeCast(ColumnFilterConditionGroup.$, a);
            if (null != c) {
                for (let d = 0; d < c.g; d++) {
                    let e = c.item(d);
                    let f = GridColumnFilterOptions.cq(e, b);
                    b = f.p1;
                }
            }
            else if (null != a) {
                b.add1(a);
            }
            return {
                p1: b
            };
        }
        c2() {
            if (null != this.by) {
                this.by.n = this.bv;
                this.by.ax = this.cg;
                this.by.cg = this.bk;
                this.by.cl = this.bn;
                this.by.l = this.i;
                this.by.updateHrMargin(new Thickness(1, -7, 3, -7, 3));
            }
        }
        co(a, b) {
            this.c0();
        }
        cr(a, b) {
            this.c0();
        }
        c4(a, b) {
            this.cn();
            this.cs();
        }
        c5(a, b) {
            this.ct();
        }
        cs() {
            if (null != this.applyButtonClick) {
                this.applyButtonClick(this, new FilterApplyButtonClickEventArgs());
            }
        }
        ct() {
            if (null != this.cancelButtonClick) {
                this.cancelButtonClick(this, new FilterCancelButtonClickEventArgs());
            }
        }
    }
    GridColumnFilterOptions.$t = /*@__PURE__*/ markType(GridColumnFilterOptions, 'GridColumnFilterOptions', GridColumnOptionsSectionBase.$);
    return GridColumnFilterOptions;
})();
//# sourceMappingURL=GridColumnFilterOptionsView_combined.js.map
