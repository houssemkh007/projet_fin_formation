/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, markType } from "igniteui-react-core";
import { Color } from "igniteui-react-core";
import { CellModel } from "./CellModel";
import { FontUtil } from "igniteui-react-core";
/**
 * @hidden
 */
export let CanvasContentCellModelHelper = /*@__PURE__*/ (() => {
    class CanvasContentCellModelHelper extends Base {
        static e(a) {
            if (a == null) {
                return CanvasContentCellModelHelper.d;
            }
            return a.color;
        }
        static a(a, b, c) {
            if (b.as) {
                if (b.ax(CellModel.ei) || b.ax(CellModel.dw) || b.ax(CellModel.ge) || b.aw("IsRowPinned") || b.aw("IsRowSticky") || b.aw("PinnedRowOpacity")) {
                    let d = Math.min(1, Math.max(0, b.cb));
                    let e = b.bz * (1 - d);
                    c.cb(e);
                    if (b.a4) {
                        c.cr(b.bz * d);
                    }
                }
                if (b.ax(CellModel.d7)) {
                    CanvasContentCellModelHelper.c(c, b.kd);
                    if (b.a4) {
                        c.cp(b.kd);
                    }
                }
                if (b.ax(CellModel.fi)) {
                }
                if (b.ax(CellModel.e2) || b.ax(CellModel.gd)) {
                    let f = b.f;
                    let g = b.h;
                    c.ce(f);
                    c.cm(g);
                    if (b.a4) {
                        c.co(f, g);
                    }
                }
                if (b.aw("ActualFontInfo")) {
                    CanvasContentCellModelHelper.b(a, c, b.af);
                }
                if (b.aw("IsEdited") || b.aw("IsDeleted")) {
                    if (b.ay || b.av) {
                        if (b.av) {
                            c.cj(true);
                        }
                        else {
                            c.cj(false);
                        }
                    }
                    else {
                        c.cj(false);
                    }
                }
            }
        }
        static b(a, b, c) {
            if (c == null) {
                c = FontUtil.getDefaultFont(a);
            }
            b.cc(c);
        }
        static c(a, b) {
            let c = CanvasContentCellModelHelper.e(b);
            a.cl(c);
        }
    }
    CanvasContentCellModelHelper.$t = /*@__PURE__*/ markType(CanvasContentCellModelHelper, 'CanvasContentCellModelHelper');
    CanvasContentCellModelHelper.d = /*@__PURE__*/ Color.u(0, 0, 0, 0);
    return CanvasContentCellModelHelper;
})();
//# sourceMappingURL=CanvasContentCellModelHelper.js.map
