/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { DataGridCellLayoutPanel } from "./DataGridCellLayoutPanel";
import { DomWrapper_$type } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { Stack$1 } from "igniteui-react-core";
import { FastIterationDictionary$2 } from "igniteui-react-core";
import { AccessibilityRow } from "./AccessibilityRow";
import { Number_$type, markType } from "igniteui-react-core";
/**
 * @hidden
 */
export let DataGridAccessibilityLayoutPanel = /*@__PURE__*/ (() => {
    class DataGridAccessibilityLayoutPanel extends DataGridCellLayoutPanel {
        constructor(a, b, c) {
            super(a, b, c);
            this.a0 = new List$1(DomWrapper_$type, 0);
            this.a1 = new Stack$1(DomWrapper_$type);
            this.ay = new FastIterationDictionary$2(Number_$type, AccessibilityRow.$, 0);
            this.aw = null;
            this.a5 = null;
            this.a5 = DataGridAccessibilityLayoutPanel.a4.toString();
            DataGridAccessibilityLayoutPanel.a4++;
        }
        refresh(a, b) {
            super.refresh(a, b);
            if (this.rootElement != null) {
                let c = a.ck();
                let d = a.br.count;
                if (a.cl > 0) {
                    c++;
                }
                this.rootElement.setAttribute("role", "grid");
                this.rootElement.setAttribute("aria-rowcount", c.toString());
                this.rootElement.setAttribute("aria-colcount", d.toString());
                this.rootElement.setAttribute("aria-multiselectable", "true");
            }
        }
        af(a, b) {
            if (this.az(a)) {
                if (a.k.g) {
                    if (this.aw == null) {
                        this.aw = new AccessibilityRow();
                        this.aw.i = this.a5;
                        this.aw.e = -1;
                        this.aw.d = this.f.br.count;
                        this.aw.f = "columnheader";
                    }
                    this.aw.j(a, b);
                }
                else {
                    let c = a.k.g ? -1 : a.k.w;
                    let d = this.ax(c);
                    if (d == null) {
                        d = new AccessibilityRow();
                        d.i = this.a5;
                        d.e = c;
                        d.d = this.f.br.count;
                        d.f = "gridcell";
                        this.ay.s(c, d);
                    }
                    d.j(a, b);
                }
            }
        }
        ah(a, b) {
            if (this.az(a)) {
                this.a9(b, "id");
                this.a9(b, "role");
                this.a9(b, "aria-colindex");
                this.a9(b, "aria-selected");
                if (a.k.g) {
                    this.a9(b, "aria-sort");
                }
            }
        }
        ag(a, b) {
            if (this.az(a)) {
                this.af(a, b);
            }
        }
        al() {
            this.a6();
            if (this.aw != null) {
                this.a8(this.aw);
                this.aw.k();
            }
            let a = this.ay.q;
            for (let b = 0; b < a.count; b++) {
                let c = a._inner[b];
                this.a8(c);
                c.k();
            }
            this.aw = null;
            this.ay.u();
        }
        ax(a) {
            let b = this.ay.o;
            for (let c = 0; c < b.count; c++) {
                let d = b._inner[c];
                let e = this.ay.item(d);
                if (e != null && e.e == a) {
                    return e;
                }
            }
            return null;
        }
        a2() {
            if (this.a1.f > 0) {
                return this.a1.e();
            }
            return null;
        }
        a3(a) {
            for (let b = 0; b < this.a0.count; b++) {
                let c = parseInt(this.a0._inner[b].getAttribute("aria-rowindex"));
                if (c == a.c) {
                    return this.a0._inner[b];
                }
            }
            return null;
        }
        a8(a) {
            let b = this.a3(a);
            if (b != null) {
                b.setAttribute("aria-owns", a.h());
                return;
            }
            b = this.a2();
            if (b != null) {
                b.setAttribute("aria-rowindex", a.c.toString());
                b.setAttribute("aria-owns", a.h());
                this.a7(a, b);
                return;
            }
            b = this.s.createElement("div");
            b.setAttribute("role", "row");
            b.setAttribute("aria-rowindex", a.c.toString());
            b.setAttribute("aria-owns", a.h());
            this.a7(a, b);
        }
        a6() {
            for (let a = 0; a < this.a0.count; a++) {
                let b = this.a0._inner[a];
                let c = parseInt(b.getAttribute("aria-rowindex")) - 2;
                if (c != -1 && !this.ay.d(c)) {
                    b.remove();
                    this.a1.h(b);
                    this.a0.removeAt(a);
                    a--;
                }
            }
        }
        a7(a, b) {
            let c = -1;
            for (let d = 0; d < this.a0.count; d++) {
                let e = parseInt(this.a0._inner[d].getAttribute("aria-rowindex"));
                if (a.c < e) {
                    c = d;
                    break;
                }
            }
            if (c != -1) {
                let native_ = this.element.getNativeElement();
                native_.insertBefore(b.getNativeElement(), this.a0._inner[c].getNativeElement());
                this.a0.insert(c, b);
            }
            else {
                this.element.append(b);
                this.a0.add(b);
            }
        }
        az(a) {
            return a.k.ag || (a.k.aj && !a.k.h);
        }
        a9(a, b) {
            a.getNativeElement().removeAttribute(b);
        }
    }
    DataGridAccessibilityLayoutPanel.$t = /*@__PURE__*/ markType(DataGridAccessibilityLayoutPanel, 'DataGridAccessibilityLayoutPanel', DataGridCellLayoutPanel.$);
    DataGridAccessibilityLayoutPanel.a4 = 0;
    return DataGridAccessibilityLayoutPanel;
})();
//# sourceMappingURL=DataGridAccessibilityLayoutPanel.js.map
