import { IgrCellInfo } from "./igr-cell-info";
import { NumericCellModel as NumericCellModel_internal } from "./NumericCellModel";
import { ensureBool, arrayFindByName } from "igniteui-react-core";
/**
 * Backing information for a numeric cell in the grid.
*/
export class IgrNumericCellInfo extends IgrCellInfo {
    createImplementation() {
        return new NumericCellModel_internal();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor() {
        super();
    }
    /**
     * Sets or gets the numeric value to use for the cell.
    */
    get numericValue() {
        return this.i.kz;
    }
    set numericValue(v) {
        this.i.kz = +v;
    }
    /**
     * Sets or gets whether there is a decimal numeric value to use for the cell.
    */
    get hasDecimalValue() {
        return this.i.kv;
    }
    set hasDecimalValue(v) {
        this.i.kv = ensureBool(v);
    }
    /**
     * The format string to apply to the value
    */
    get formatStringOverride() {
        return this.i.lt;
    }
    set formatStringOverride(v) {
        this.i.lt = v;
    }
    get formatSpecifiers() {
        return this.i.kr;
    }
    set formatSpecifiers(v) {
        this.i.kr = v;
    }
    /**
     * The format options to apply to the value
    */
    get formatOverride() {
        return this.i.ll;
    }
    set formatOverride(v) {
        this.i.ll = v;
    }
    /**
     * Sets or gets the text prepended to a negative numeric value
    */
    get negativePrefix() {
        return this.i.lz;
    }
    set negativePrefix(v) {
        this.i.lz = v;
    }
    /**
     * Sets or gets the text prepended to a positive numeric value
    */
    get positivePrefix() {
        return this.i.l4;
    }
    set positivePrefix(v) {
        this.i.l4 = v;
    }
    /**
     * Sets or gets the text appended to a negative numeric value
    */
    get negativeSuffix() {
        return this.i.l1;
    }
    set negativeSuffix(v) {
        this.i.l1 = v;
    }
    /**
     * Sets or gets the text appended to a positive numeric value
    */
    get positiveSuffix() {
        return this.i.l6;
    }
    set positiveSuffix(v) {
        this.i.l6 = v;
    }
    /**
     * The maximum number of decimal places to display when formatting
    */
    get maxFractionDigits() {
        return this.i.k7;
    }
    set maxFractionDigits(v) {
        this.i.k7 = +v;
    }
    /**
     * The minimum number of decimal places to display when formatting
    */
    get minFractionDigits() {
        return this.i.k9;
    }
    set minFractionDigits(v) {
        this.i.k9 = +v;
    }
    /**
     * The minimum number of integer digits to display when formatting
    */
    get minIntegerDigits() {
        return this.i.lb;
    }
    set minIntegerDigits(v) {
        this.i.lb = +v;
    }
    /**
     * Sets or gets if the grouping separator is shown
    */
    get showGroupingSeparator() {
        return this.i.kx;
    }
    set showGroupingSeparator(v) {
        this.i.kx = ensureBool(v);
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.formatSpecifiers != null && arrayFindByName(this.formatSpecifiers, name)) {
            return arrayFindByName(this.formatSpecifiers, name);
        }
        return null;
    }
}
//# sourceMappingURL=igr-numeric-cell-info.js.map
