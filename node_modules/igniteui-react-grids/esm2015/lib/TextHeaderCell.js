/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { GridCellBase } from "./GridCellBase";
import { GridSortIndicator } from "./GridSortIndicator";
import { GridFilterDialog } from "./GridFilterDialog";
import { ColumnOptionsIconBehavior_$type } from "./ColumnOptionsIconBehavior";
import { ColumnOptionsIconAlignment_$type } from "./ColumnOptionsIconAlignment";
import { enumGetBox, runOn, delegateCombine, markType } from "igniteui-react-core";
/**
 * @hidden
 */
export let TextHeaderCell = /*@__PURE__*/ (() => {
    class TextHeaderCell extends GridCellBase {
        constructor(a) {
            super(a);
            this.ci = null;
            this.ce = null;
            this.cc = null;
            this.b8 = 0;
            this.b7 = 0;
            this.ca = 3;
            this.ck = null;
            this.cn = -1;
            this.cm = -1;
            this.cg = false;
            this.cj = null;
            this.ch = false;
            this.ci = a.createElement("span");
            this.z.setRawStyleProperty("text-align", "left");
            this.z.setRawStyleProperty("vertical-align", "middle");
            this.ci.setRawStyleProperty("display", "inline-block");
            this.ci.setRawStyleProperty("line-height", "normal");
            this.ci.setRawStyleProperty("vertical-align", "middle");
            this.ci.setRawStyleProperty("overflow", "hidden");
            this.ci.setRawStyleProperty("white-space", "nowrap");
            this.ci.setRawStyleProperty("text-overflow", "ellipsis");
            this.z.append(this.ci);
            let b = 18;
            let c = 18;
            let d = a.createElement("div");
            d.setAttribute("aria-hidden", "true");
            d.setRawStyleProperty("display", "none");
            d.setRawStyleProperty("vertical-align", "middle");
            d.setRawStyleProperty("width", b + "px");
            d.setRawStyleProperty("height", c + "px");
            this.cj = d;
            let e = a.getSubRenderer(d);
            this.cc = new GridFilterDialog();
            this.cc.bf(e, this.z, a);
            this.z.append(d);
            this.cc.a8(b, c);
            this.cc.af = 24;
            let f = this.cc.x;
            this.cc.x = false;
            this.cc.a5();
            this.cc.x = f;
            let g = 18;
            let h = 18;
            d = a.createElement("div");
            d.setAttribute("aria-hidden", "true");
            d.setRawStyleProperty("display", "inline-block");
            d.setRawStyleProperty("vertical-align", "middle");
            d.setRawStyleProperty("width", "0px");
            d.setRawStyleProperty("height", h + "px");
            d.setRawStyleProperty("margin", "0 0 0 5px");
            this.ck = d;
            e = a.getSubRenderer(d);
            this.ce = new GridSortIndicator();
            this.ce.l = false;
            this.ce.ax(e);
            this.z.append(d);
            this.ce.ar(g, h);
            let i = this.ce;
            i.propertyChanged = delegateCombine(i.propertyChanged, runOn(this, this.cq));
            let j = this.cc;
            j.dialogOpening = delegateCombine(j.dialogOpening, runOn(this, this.cr));
            let k = this.cc;
            k.filterChanging = delegateCombine(k.filterChanging, runOn(this, this.ct));
            let l = this.cc;
            l.filterChanged = delegateCombine(l.filterChanged, runOn(this, this.cs));
            this.z.listen("mouseenter", runOn(this, this.cx));
            this.z.listen("mouseleave", runOn(this, this.cw));
        }
        get cl() {
            return this.ci;
        }
        get cf() {
            return this.ce;
        }
        get cd() {
            return this.cc;
        }
        get cb() {
            return this.ca;
        }
        set cb(a) {
            let b = this.ca;
            this.ca = a;
            this.bg("ColumnOptionsIconBehavior", enumGetBox(ColumnOptionsIconBehavior_$type, b), enumGetBox(ColumnOptionsIconBehavior_$type, this.ca));
        }
        get b9() {
            return this.b8;
        }
        set b9(a) {
            let b = this.b8;
            this.b8 = a;
            this.bg("ColumnOptionsIconAlignment", enumGetBox(ColumnOptionsIconAlignment_$type, b), enumGetBox(ColumnOptionsIconAlignment_$type, this.b8));
        }
        s(a) {
            return true;
        }
        bw(a, b) {
            super.bw(a, b);
            a -= 21;
            if (this.ch) {
                a -= 15;
            }
            let c = Math.max(0, a - b);
            if (c != this.cn) {
                this.cn = c;
                this.ci.setRawStyleProperty("max-width", c.toString() + "px");
            }
        }
        bq(a, b) {
            super.bq(a, b);
            let c = Math.max(0, a - b);
            if (this.cm != c) {
                this.cm = c;
                this.ci.setRawStyleProperty("max-height", c.toString() + "px");
            }
        }
        bx(a, b, c, d) {
            this.cc.a7();
        }
        cq(a, b) {
            switch (b.propertyName) {
                case "CurrentOpacity":
                    if (this.cf.r > 0) {
                        this.ck.setRawStyleProperty("width", "18px");
                        if (this.b7 == 2) {
                            this.ck.setRawStyleProperty("margin", "0 5px 0 0");
                        }
                        else {
                            this.ck.setRawStyleProperty("margin", "0 0 0 5px");
                        }
                    }
                    else {
                        this.ck.setRawStyleProperty("width", "0px");
                        this.ck.setRawStyleProperty("margin", "0");
                    }
                    break;
            }
        }
        cx(a) {
            if (this.b.isGridDragging) {
                return;
            }
            switch (this.cb) {
                case 2:
                case 3:
                    this.cc.bk();
                    break;
            }
        }
        cw(a) {
            switch (this.cb) {
                case 2:
                case 3:
                    this.cc.a5();
                    break;
            }
        }
        cs(a, b) {
            this.b.columnFilterChanged(b.a);
        }
        ct(a, b) {
            this.b.columnFilterChanging(b.a);
        }
        cr(a, b) {
            if (this.b != null) {
                b.a = this.d.getColumn();
                this.b.cancelEditMode(false);
            }
        }
        be(a, b, c) {
            super.be(a, b, c);
            this.b7 = c;
            this.cc.k = c;
            if (c == 2) {
                this.z.removeChild(this.ck);
                this.z.removeChild(this.cj);
                this.ci.before(this.cj);
                this.cj.before(this.ck);
                if (this.b9 == 1) {
                    this.cj.setRawStyleProperty("margin", "0 5px 0 0");
                    this.cc.l = this.b7;
                }
                else {
                    this.cj.setRawStyleProperty("margin", "0");
                    this.cc.l = 0;
                }
            }
            else {
                this.z.removeChild(this.ck);
                this.z.removeChild(this.ci);
                this.cj.before(this.ci);
                this.cj.before(this.ck);
                if (this.b9 == 1) {
                    this.cj.setRawStyleProperty("margin", "0 0 0 5px");
                    this.cc.l = this.b7;
                }
                else {
                    this.cj.setRawStyleProperty("margin", "0");
                    this.cc.l = 2;
                }
            }
        }
        bu(a, b, c, d) {
            super.bu(a, b, c, d);
            this.cc.ai = a;
            this.cc.aj = c;
        }
        cv() {
            if (this.b9 == 2 || this.b9 == 0) {
                if (this.b7 == 2) {
                    this.cc.l = 0;
                }
                else {
                    this.cc.l = 2;
                }
            }
            else {
                this.cc.l = this.b7;
                if (this.b7 == 2) {
                    this.cj.setRawStyleProperty("margin", "0 5px 0 0");
                }
                else {
                    this.cj.setRawStyleProperty("margin", "0 0 0 5px");
                }
            }
        }
        cu() {
            switch (this.cb) {
                case 1:
                    this.cc.x = false;
                    this.cc.bk();
                    break;
                case 2:
                    this.cc.x = false;
                    break;
                case 3:
                    this.cc.x = true;
                    break;
            }
        }
        bg(a, b, c) {
            super.bg(a, b, c);
            switch (a) {
                case "ColumnOptionsIconAlignment":
                    this.cv();
                    break;
                case "ColumnOptionsIconBehavior":
                    this.cu();
                    break;
            }
        }
        onContactStarted(e_, a) {
            if (e_.button == 2) {
                return;
            }
            let filterIconCanvas_ = this.cc.aq();
            let b = (e_.originalEvent.srcElement === filterIconCanvas_ || e_.originalEvent.target === filterIconCanvas_);
            if (b) {
                this.cg = true;
                return;
            }
            if (this.cc.y) {
                this.cc.a2();
            }
            super.onContactStarted(e_, a);
        }
        onContactCompleted(e_, a) {
            if (!this.cg) {
                super.onContactCompleted(e_, a);
            }
            this.cg = false;
        }
        get_q() {
            return true;
        }
    }
    TextHeaderCell.$t = /*@__PURE__*/ markType(TextHeaderCell, 'TextHeaderCell', GridCellBase.$);
    return TextHeaderCell;
})();
//# sourceMappingURL=TextHeaderCell.js.map
