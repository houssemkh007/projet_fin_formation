import * as React from 'react';
import { ensureEnum, NamePatcher, isValidProp, getModifiedProps } from "igniteui-react-core";
import { ReactRenderer } from "igniteui-react-core";
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { DataGridStylingDefaults } from './DataGridStylingDefaults';
import { GridColumnFilterOptions } from './GridColumnFilterOptions';
import { IgrGridColumnOptionsSectionBase } from "./igr-grid-column-options-section-base";
import { IgrCheckboxList } from "./igr-checkbox-list";
import { IgrFilterApplyButtonClickEventArgs } from './igr-filter-apply-button-click-event-args';
import { IgrFilterCancelButtonClickEventArgs } from './igr-filter-cancel-button-click-event-args';
import { ControlDisplayDensity_$type } from "igniteui-react-core";
export class IgrGridColumnFilterOptions extends IgrGridColumnOptionsSectionBase {
    constructor(props) {
        super(props);
        this._reactRenderer = null;
        this._applyButtonClick = null;
        this._applyButtonClick_wrapped = null;
        this._cancelButtonClick = null;
        this._cancelButtonClick_wrapped = null;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._getMainRef = this._getMainRef.bind(this);
        this._getClearFiltersSectionRef = this._getClearFiltersSectionRef.bind(this);
        this._getFilterSectionRef = this._getFilterSectionRef.bind(this);
        this._getFilterCheckboxListSectionRef = this._getFilterCheckboxListSectionRef.bind(this);
        this._getFilterButtonsSectionRef = this._getFilterButtonsSectionRef.bind(this);
        if (document) {
            this._mainDiv = document.createElement("div");
            this._mainDiv.style.display = "block";
            this._mainDiv.style.width = "100%";
            this._mainDiv.style.height = "100%";
        }
        var ren = new ReactRenderer(this._mainDiv, document, true, DataGridStylingDefaults);
        this._reactRenderer = ren;
        var gridColumnFilterOptions = this.i;
        gridColumnFilterOptions.provideRenderer(ren);
        if (props) {
            this.initializeProperties();
        }
    }
    _getMainRef(ref) {
        this._elRef = ref;
        this.verifyReferences();
    }
    _getClearFiltersSectionRef(ref) {
        this._clearFiltersSectionRef = ref;
        this.verifyReferences();
    }
    _getFilterSectionRef(ref) {
        this._filterSectionRef = ref;
        this.verifyReferences();
    }
    _getFilterCheckboxListSectionRef(ref) {
        this._filterCheckboxListSectionRef = ref;
        this.verifyReferences();
    }
    _getFilterButtonsSectionRef(ref) {
        this._filterButtonsSectionRef = ref;
        this.verifyReferences();
    }
    verifyReferences() {
        if (this._reactRenderer &&
            this._elRef &&
            this._clearFiltersSectionRef &&
            this._filterSectionRef &&
            this._filterCheckboxListSectionRef &&
            this._filterButtonsSectionRef) {
            var gridColumnFilterOptions = this.i;
            var mainRef = this._reactRenderer.getWrapper(this._elRef);
            gridColumnFilterOptions.provideMainDiv(mainRef);
            var clearFiltersSectionWrapper = this._reactRenderer.getWrapper(this._clearFiltersSectionRef);
            gridColumnFilterOptions.provideClearFiltersSection(clearFiltersSectionWrapper);
            var filtersSectionWrapper = this._reactRenderer.getWrapper(this._filterSectionRef);
            gridColumnFilterOptions.provideFilterSection(filtersSectionWrapper);
            gridColumnFilterOptions.provideFilterCheckboxListSection(this._filterCheckboxListSectionRef.i);
            var filterButtonsSectionWrapper = this._reactRenderer.getWrapper(this._filterButtonsSectionRef);
            gridColumnFilterOptions.provideFilterButtonSection(filterButtonsSectionWrapper);
        }
    }
    render() {
        const divStyle = {
            height: "195px"
        };
        return (React.createElement("div", { className: "ig-grid-column-filter-options igr-grid-column-filter-options", ref: this._getMainRef }, React.createElement("div", { ref: this._getClearFiltersSectionRef, key: "clearFiltersSection" }), React.createElement("div", { ref: this._getFilterSectionRef, key: "filtersSection" }), React.createElement("div", { style: divStyle }, React.createElement(IgrCheckboxList, { height: "100%", ref: this._getFilterCheckboxListSectionRef, key: "filterCheckboxListSection" })), React.createElement("div", { ref: this._getFilterButtonsSectionRef, key: "filterButtonsSection" })));
    }
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    initializeProperties() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    // supports angular themes or custom properties set in CSS
    updateStyle() {
        this._styling(this._mainDiv, this);
    }
    componentWillUnmount() {
        this.i.destroy();
        this._reactRenderer.destroy();
    }
    componentDidMount() {
        this._elRef.appendChild(this._mainDiv);
        this.initializeContent();
    }
    initializeContent() {
        this._styling(this._mainDiv, this);
        this.updateStyle();
    }
    createImplementation() {
        return new GridColumnFilterOptions();
    }
    get i() {
        return this._implementation;
    }
    get applyButtonCaption() {
        return this.i.b3;
    }
    set applyButtonCaption(v) {
        this.i.b3 = v;
    }
    get cancelButtonCaption() {
        return this.i.b7;
    }
    set cancelButtonCaption(v) {
        this.i.b7 = v;
    }
    get clearColumnFiltersCaption() {
        return this.i.cb;
    }
    set clearColumnFiltersCaption(v) {
        this.i.cb = v;
    }
    get filterListPlaceholderText() {
        return this.i.cg;
    }
    set filterListPlaceholderText(v) {
        this.i.cg = v;
    }
    /**
     * Gets or sets the display Density to use for the buttons in the component.
    */
    get filterListDensity() {
        return this.i.bx;
    }
    set filterListDensity(v) {
        this.i.bx = ensureEnum(ControlDisplayDensity_$type, v);
    }
    /**
     * Gets the actual display filterListDensity to use for the component.
    */
    get actualFilterListDensity() {
        return this.i.bv;
    }
    set actualFilterListDensity(v) {
        this.i.bv = ensureEnum(ControlDisplayDensity_$type, v);
    }
    get textFilterCaption() {
        return this.i.ck;
    }
    set textFilterCaption(v) {
        this.i.ck = v;
    }
    get applyButtonClick() {
        return this._applyButtonClick;
    }
    set applyButtonClick(ev) {
        if (this._applyButtonClick_wrapped !== null) {
            this.i.applyButtonClick = delegateRemove(this.i.applyButtonClick, this._applyButtonClick_wrapped);
            this._applyButtonClick_wrapped = null;
            this._applyButtonClick = null;
        }
        this._applyButtonClick = ev;
        this._applyButtonClick_wrapped = (o, e) => {
            let outerArgs = new IgrFilterApplyButtonClickEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeApplyButtonClick) {
                this.beforeApplyButtonClick(this, outerArgs);
            }
            if (this._applyButtonClick) {
                this._applyButtonClick(this, outerArgs);
            }
        };
        this.i.applyButtonClick = delegateCombine(this.i.applyButtonClick, this._applyButtonClick_wrapped);
    }
    get cancelButtonClick() {
        return this._cancelButtonClick;
    }
    set cancelButtonClick(ev) {
        if (this._cancelButtonClick_wrapped !== null) {
            this.i.cancelButtonClick = delegateRemove(this.i.cancelButtonClick, this._cancelButtonClick_wrapped);
            this._cancelButtonClick_wrapped = null;
            this._cancelButtonClick = null;
        }
        this._cancelButtonClick = ev;
        this._cancelButtonClick_wrapped = (o, e) => {
            let outerArgs = new IgrFilterCancelButtonClickEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeCancelButtonClick) {
                this.beforeCancelButtonClick(this, outerArgs);
            }
            if (this._cancelButtonClick) {
                this._cancelButtonClick(this, outerArgs);
            }
        };
        this.i.cancelButtonClick = delegateCombine(this.i.cancelButtonClick, this._cancelButtonClick_wrapped);
    }
}
//# sourceMappingURL=igr-grid-column-filter-options.js.map
