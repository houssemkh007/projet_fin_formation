/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { CanvasGridCellBase } from "./CanvasGridCellBase";
import { TextBlock } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { FontUtil } from "igniteui-react-core";
import { markType } from "igniteui-react-core";
import { intDivide } from "igniteui-react-core";
/**
 * @hidden
 */
export let CanvasSummaryCell = /*@__PURE__*/ (() => {
    class CanvasSummaryCell extends CanvasGridCellBase {
        constructor(a) {
            super(a);
            this.db = null;
            this.dg = new TextBlock();
            this.c7 = 0;
            this.c8 = 0;
            this.c6 = 0;
            this.c3 = null;
            this.da = 0;
            this.c4 = false;
            this.c5 = true;
            this.c9 = 0;
            this.ce(2);
        }
        cn(a) {
            super.cn(a);
            this.bf = intDivide(a, 2);
            this.c5 = true;
        }
        de(a) {
            this.c3 = a;
            this.c4 = true;
            this.y = true;
            this.c5 = true;
        }
        dc(a) {
            this.db = a;
            this.dg.ak = this.db;
            this.y = true;
            this.c5 = true;
        }
        dd(a) {
            this.y = true;
            this.dg.am = ((() => {
                let $ret = new Brush();
                $ret.color = a;
                return $ret;
            })());
        }
        df(a) {
            if (this.dg.ak == null) {
                return;
            }
            if (a == null) {
                return;
            }
            if (this.c4 || (this.c3 != null && this.c3.g != this.da)) {
                this.c4 = false;
                this.da = this.c3.g;
                a.ac(this.c3);
                this.c6 = FontUtil.getCurrentFontHeight(this.bl, this.c3);
            }
            let b = this.bj;
            let c = this.a8;
            b -= (this.a5 + this.ba + this.a6 + this.bb);
            c -= (this.a7 + this.bc + this.a4 + this.a9);
            b = Math.max(b, 0);
            c = Math.max(c, 0);
            this.c9 = this.bi(this.dg, this.db, b / 2, a);
            this.c7 = this.ba + this.a5;
            this.c8 = this.bc + this.a7 + ((c / 2) - (this.c6 / 2));
        }
        b5(a) {
            if (this.dg.ak != null) {
                if (this.c5) {
                    this.df(a);
                    this.c5 = false;
                }
                this.dg.n = this.c7;
                this.dg.o = this.c8;
                a.w(this.dg);
            }
            super.b5(a);
        }
        get_aa() {
            return false;
        }
    }
    CanvasSummaryCell.$t = /*@__PURE__*/ markType(CanvasSummaryCell, 'CanvasSummaryCell', CanvasGridCellBase.$);
    return CanvasSummaryCell;
})();
//# sourceMappingURL=CanvasSummaryCell.js.map
