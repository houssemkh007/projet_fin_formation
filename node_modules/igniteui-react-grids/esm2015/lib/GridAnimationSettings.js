/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, INotifyPropertyChanged_$type, PropertyChangedEventArgs, runOn, delegateRemove, delegateCombine, markType } from "igniteui-react-core";
import { GridAnimationPhaseSettings } from "./GridAnimationPhaseSettings";
/**
 * @hidden
 */
export let GridAnimationSettings = /*@__PURE__*/ (() => {
    class GridAnimationSettings extends Base {
        constructor() {
            super();
            this.i = null;
            this.b = null;
            this.d = null;
            this.a = null;
            this.c = null;
            this.propertyChanged = null;
            this.b = new GridAnimationPhaseSettings();
            this.b.l = 500;
            this.b.c = 1;
            this.b.e = false;
            this.d = new GridAnimationPhaseSettings();
            this.d.l = 300;
            this.d.c = 1;
            this.d.n = 0;
            this.d.e = true;
            this.a = new GridAnimationPhaseSettings();
            this.a.l = 0;
            this.a.c = 1;
            this.a.n = 0;
            this.a.e = true;
            this.c = new GridAnimationPhaseSettings();
            this.c.l = 100;
            this.c.c = 1;
            this.c.n = 0;
            this.c.e = true;
        }
        get f() {
            return this.b;
        }
        set f(a) {
            let b = this.b;
            this.b = a;
            this.p("CellDataLoadedMainPhase", b, this.b);
        }
        get h() {
            return this.d;
        }
        set h(a) {
            let b = this.d;
            this.d = a;
            this.p("RowSelectionMainPhase", b, this.d);
        }
        get e() {
            return this.a;
        }
        set e(a) {
            let b = this.a;
            this.a = a;
            this.p("CellActivationMainPhase", b, this.a);
        }
        get g() {
            return this.c;
        }
        set g(a) {
            let b = this.c;
            this.c = a;
            this.p("RowHoverMainPhase", b, this.c);
        }
        p(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            this.q(a, b, c);
        }
        q(a, b, c) {
            switch (a) {
                case "CellDataLoadedMainPhase":
                    if (b != null) {
                        let d = b;
                        d.propertyChanged = delegateRemove(d.propertyChanged, runOn(this, this.o));
                    }
                    if (c != null) {
                        let e = c;
                        e.propertyChanged = delegateCombine(e.propertyChanged, runOn(this, this.o));
                    }
                    break;
                case "RowSelectionMainPhase":
                    if (b != null) {
                        let f = b;
                        f.propertyChanged = delegateRemove(f.propertyChanged, runOn(this, this.r));
                    }
                    if (c != null) {
                        let g = c;
                        g.propertyChanged = delegateCombine(g.propertyChanged, runOn(this, this.r));
                    }
                    break;
                case "CellActivationMainPhase":
                    if (b != null) {
                        let h = b;
                        h.propertyChanged = delegateRemove(h.propertyChanged, runOn(this, this.n));
                    }
                    if (c != null) {
                        let i = c;
                        i.propertyChanged = delegateCombine(i.propertyChanged, runOn(this, this.n));
                    }
                    break;
            }
        }
        o(a, b) {
            this.p("CellDataLoadedMainPhase", this.f, this.f);
        }
        r(a, b) {
            this.p("RowSelectionMainPhase", this.h, this.h);
        }
        n(a, b) {
            this.p("CellActivationMainPhase", this.e, this.e);
        }
    }
    GridAnimationSettings.$t = /*@__PURE__*/ markType(GridAnimationSettings, 'GridAnimationSettings', Base.$, [INotifyPropertyChanged_$type]);
    return GridAnimationSettings;
})();
//# sourceMappingURL=GridAnimationSettings.js.map
