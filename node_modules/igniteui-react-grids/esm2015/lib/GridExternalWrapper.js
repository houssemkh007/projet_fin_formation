/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, markType, TypeRegistrar } from "igniteui-react-core";
import { IExternalGrid_$type } from "./IExternalGrid";
import { LocalDataSource } from "igniteui-react-core";
/**
 * @hidden
 */
export let GridExternalWrapper = /*@__PURE__*/ (() => {
    class GridExternalWrapper extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.a = a;
        }
        get renderer() {
            let grid_ = this.a;
            return (grid_._renderer);
        }
        onContentSizeChanged() {
            let grid_ = this.a;
            grid_.refreshContentSize();
        }
        createLocalDataSource(a) {
            let b = new LocalDataSource();
            b.dataSource = a;
            return b;
        }
        createTextColumn(a) {
            if (TypeRegistrar.isRegistered("IgxTextColumnComponent")) {
                let column_ = TypeRegistrar.create("IgxTextColumnComponent");
                let b = (column_._implementation);
                b.hy = a;
                return b;
            }
            return null;
        }
        createNumericColumn(a) {
            if (TypeRegistrar.isRegistered("IgxNumericColumnComponent")) {
                let column_ = TypeRegistrar.create("IgxNumericColumnComponent");
                let b = (column_._implementation);
                b.hy = a;
                return b;
            }
            return null;
        }
        createDateTimeColumn(a) {
            if (TypeRegistrar.isRegistered("IgxDateTimeColumnComponent")) {
                let column_ = TypeRegistrar.create("IgxDateTimeColumnComponent");
                let b = (column_._implementation);
                b.hy = a;
                return b;
            }
            return null;
        }
        createImageColumn(a) {
            if (TypeRegistrar.isRegistered("IgxImageColumnComponent")) {
                let column_ = TypeRegistrar.create("IgxImageColumnComponent");
                let b = (column_._implementation);
                b.hy = a;
                return b;
            }
            return null;
        }
        createTemplateColumn(a) {
            if (TypeRegistrar.isRegistered("IgxTemplateColumnComponent")) {
                let column_ = TypeRegistrar.create("IgxTemplateColumnComponent");
                let b = (column_._implementation);
                b.hy = a;
                return b;
            }
            return null;
        }
        createComboBoxColumn(a) {
            if (TypeRegistrar.isRegistered("IgxComboBoxColumnComponent")) {
                let column_ = TypeRegistrar.create("IgxComboBoxColumnComponent");
                let b = (column_._implementation);
                b.hy = a;
                return b;
            }
            return null;
        }
        focusScroller() {
            let grid_ = this.a;
            grid_._focusScroller();
        }
        insertExternalColumnAtIndex(index_, column_) {
            let grid_ = this.a;
            grid_._insertExternalColumnAtIndex(index_, column_);
        }
        removeExternalColumn(column_) {
            let grid_ = this.a;
            grid_._removeExternalColumn(column_);
        }
        setDefaultCursor() {
            let grid_ = this.a;
            grid_._setDefaultCursor();
        }
        setResizeCursor() {
            let grid_ = this.a;
            grid_._setResizeCursor();
        }
        setHandCursor() {
            let grid_ = this.a;
            grid_._setHandCursor();
        }
        setBorder(a, b, c, d, e, f, g, h, i) {
            let grid_ = this.a;
            let color_ = a._fill;
            let borderLeft_ = b;
            let borderTop_ = c;
            let borderRight_ = d;
            let borderBottom_ = e;
            let topLeftRadius_ = f;
            let topRightRadius_ = g;
            let botLeftRadius_ = h;
            let botRightRadius_ = i;
            grid_._setBorder(color_, borderLeft_, borderTop_, borderRight_, borderBottom_, topLeftRadius_, topRightRadius_, botLeftRadius_, botRightRadius_);
        }
        setScrollerVerticalTrackInset(a) {
            this.a._setScrollerVerticalTrackInset(a);
        }
        ensureColumnsAreManual() {
            let grid_ = this.a;
            grid_._ensureColumnsAreManual();
        }
    }
    GridExternalWrapper.$t = /*@__PURE__*/ markType(GridExternalWrapper, 'GridExternalWrapper', Base.$, [IExternalGrid_$type]);
    return GridExternalWrapper;
})();
//# sourceMappingURL=GridExternalWrapper.js.map
