import * as React from 'react';
import { ensureEnum, brushToString, stringToBrush, initializePropertiesFromCss, NamePatcher, isValidProp, toSpinal, getModifiedProps } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
import { ReactRenderer } from "igniteui-react-core";
import { ColumnPinning } from './ColumnPinning';
import { IgrCheckboxListModule } from "./igr-checkbox-list-module";
import { IgrCheckboxList } from "./igr-checkbox-list";
import { BaseControlTheme_$type } from "igniteui-react-core";
import { ControlDisplayDensity_$type } from "igniteui-react-core";
/*@__PURE__*/ IgrCheckboxListModule.register();
export class IgrColumnPinning extends React.Component {
    constructor(props) {
        super(props);
        this._wrapper = null;
        this._implementation = null;
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._getMainRef = this._getMainRef.bind(this);
        this._getCheckboxListRef = this._getCheckboxListRef.bind(this);
        this._implementation = this.createImplementation();
        var columnPinning = this.i;
        this._columnPinning = columnPinning;
        columnPinning.notifySizeChanged();
        if (props) {
            this.initializeProperties();
        }
    }
    set height(value) {
        this._height = value;
        if (this._elRef) {
            this._elRef.style.height = value;
            this._columnPinning.notifySizeChanged();
        }
    }
    get height() {
        return this._height;
    }
    set width(value) {
        this._width = value;
        if (this._elRef) {
            this._elRef.style.height = value;
            this._columnPinning.notifySizeChanged();
        }
    }
    get width() {
        return this._width;
    }
    _getMainRef(ref) {
        this._elRef = ref;
        if (this._elRef != null && this._checkboxListRef != null) {
            this._renderer = new ReactRenderer(this._elRef, document, false, null);
            this._columnPinning.provideContainer(this._renderer, this._checkboxListRef.i);
        }
    }
    _getCheckboxListRef(ref) {
        this._checkboxListRef = ref;
        if (this._elRef != null && this._checkboxListRef != null) {
            this._renderer = new ReactRenderer(this._elRef, document, false, null);
            this._columnPinning.provideContainer(this._renderer, this._checkboxListRef.i);
        }
    }
    render() {
        let children = [];
        let title = React.createElement("span", {
            key: "titleSpan"
        });
        children.push(title);
        let checkboxList = React.createElement(IgrCheckboxList, {
            ref: this._getCheckboxListRef,
            key: "checkboxList"
        });
        children.push(checkboxList);
        let div = React.createElement("div", {
            className: "ig-column-pinning igr-column-pinning",
            ref: this._getMainRef,
            children: children
        });
        return div;
    }
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    initializeProperties() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    // supports angular themes or custom properties set in CSS
    updateStyle() {
        this._styling(this._elRef, this);
    }
    componentWillUnmount() {
        this._columnPinning.destroy();
        if (this._renderer) {
            this._renderer.destroy();
        }
    }
    componentDidMount() {
        this._elRef.style.width = this._width ? this._width : "";
        this._elRef.style.height = this._height ? this._height : "";
        this._columnPinning.notifySizeChanged();
        this.initializeContent();
    }
    initializeContent() {
        this.updateStyle();
        this.i.notifySizeChanged();
    }
    createImplementation() {
        return new ColumnPinning();
    }
    get i() {
        return this._implementation;
    }
    /**
 * Gets or Sets the property name that contains the values.
*/
    get targetGrid() {
        if (this.i.b == null) {
            return null;
        }
        return this.i.b.externalObject;
    }
    set targetGrid(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.b = null : this.i.b = v.i;
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get title() {
        return this.i.t;
    }
    set title(v) {
        this.i.t = v;
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get titleStyle() {
        if (this.i.j == null) {
            return null;
        }
        return this.i.j.fontString;
    }
    set titleStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.j = fi;
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get titleColor() {
        return brushToString(this.i.am);
    }
    set titleColor(v) {
        this.i.am = stringToBrush(v);
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get filterPlaceholderText() {
        return this.i.q;
    }
    set filterPlaceholderText(v) {
        this.i.q = v;
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get baseTheme() {
        return this.i.e;
    }
    set baseTheme(v) {
        this.i.e = ensureEnum(BaseControlTheme_$type, v);
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get density() {
        return this.i.g;
    }
    set density(v) {
        this.i.g = ensureEnum(ControlDisplayDensity_$type, v);
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get backgroundColor() {
        return brushToString(this.i.al);
    }
    set backgroundColor(v) {
        this.i.al = stringToBrush(v);
    }
    findByName(name) {
        if (this.targetGrid && this.targetGrid.name && this.targetGrid.name == name) {
            return this.targetGrid;
        }
        return null;
    }
    get hasUserValues() {
        return this._hasUserValues;
    }
    __m(propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    }
    _styling(container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        let genericPrefix = "";
        let typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("ColumnPinning");
        let additionalPrefixes = [];
        let prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        let b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            let basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            let parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            let parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this.targetGrid && this.targetGrid._styling) {
            this.targetGrid._styling(container, component, this);
        }
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    }
}
//# sourceMappingURL=igr-column-pinning.js.map
