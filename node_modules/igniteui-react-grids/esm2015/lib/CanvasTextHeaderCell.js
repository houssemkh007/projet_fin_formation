/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { CanvasGridCellBase } from "./CanvasGridCellBase";
import { GridSortIndicator } from "./GridSortIndicator";
import { delegateCombine, markType } from "igniteui-react-core";
/**
 * @hidden
 */
export let CanvasTextHeaderCell = /*@__PURE__*/ (() => {
    class CanvasTextHeaderCell extends CanvasGridCellBase {
        constructor(a) {
            super(a);
            this.c3 = null;
            this.c6 = null;
            this.c5 = null;
            this.ce(0);
            this.cm(1);
            this.c3 = new GridSortIndicator();
            let b = a.createElement("div");
            b.setRawStyleProperty("display", "inline-block");
            b.setRawStyleProperty("width", "16px");
            b.setRawStyleProperty("height", "16px");
            this.c6 = b;
            let c = a.getSubRenderer(this.c6);
            this.c3.ax(c);
            this.c3.w = window.devicePixelRatio;
            let d = this.c3;
            d.renderCompleted = delegateCombine(d.renderCompleted, (d, e) => this.b3());
            this.c3.ar(16, 16);
            this.c5 = this.c3.ad();
        }
        get c4() {
            return this.c3;
        }
        c7(a) {
            this.c4.b = a;
            this.b3();
        }
        b5(a) {
            super.b5(a);
            let b = this.bg + 5;
            if (this.d == 2) {
                b = this.be - 21;
            }
            a.m(this.c5, 1, b, this.bh - 8, 16, 16);
        }
        get_z() {
            return true;
        }
    }
    CanvasTextHeaderCell.$t = /*@__PURE__*/ markType(CanvasTextHeaderCell, 'CanvasTextHeaderCell', CanvasGridCellBase.$);
    return CanvasTextHeaderCell;
})();
//# sourceMappingURL=CanvasTextHeaderCell.js.map
