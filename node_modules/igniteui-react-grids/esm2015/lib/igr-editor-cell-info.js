import { IgrCellInfo } from "./igr-cell-info";
import { DataSourceSchemaPropertyType_$type } from "igniteui-react-core";
import { EditorType_$type } from "./EditorType";
import { EditorCellModel as EditorCellModel_internal } from "./EditorCellModel";
import { ensureBool, ensureEnum } from "igniteui-react-core";
/**
 * Represents info about the current cell.
*/
export class IgrEditorCellInfo extends IgrCellInfo {
    createImplementation() {
        return new EditorCellModel_internal();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor() {
        super();
    }
    /**
     * Gets or sets whether the editor cell is hidden or not.
    */
    get isHidden() {
        return this.i.kz;
    }
    set isHidden(v) {
        this.i.kz = ensureBool(v);
    }
    /**
     * Gets or sets the edit target for this cell.
    */
    get editTarget() {
        if (this.i.kv == null) {
            return null;
        }
        return this.i.kv.externalObject;
    }
    set editTarget(v) {
        v == null ? this.i.kv = null : this.i.kv = v.i;
    }
    /**
     * Gets or sets the data type associated with the cell being edited.
    */
    get dataType() {
        return this.i.kt;
    }
    set dataType(v) {
        this.i.kt = ensureEnum(DataSourceSchemaPropertyType_$type, v);
    }
    /**
     * Gets or sets the error message to display in the editor cell.
    */
    get errorMessage() {
        return this.i.lp;
    }
    set errorMessage(v) {
        this.i.lp = v;
    }
    /**
     * Gets or sets the user selected value.
    */
    get editValue() {
        return this.i.le;
    }
    set editValue(v) {
        this.i.le = v;
    }
    /**
     * Gets or sets the type of editor to use while cell editing.
    */
    get editorType() {
        return this.i.kx;
    }
    set editorType(v) {
        this.i.kx = ensureEnum(EditorType_$type, v);
    }
    /**
     * Gets or sets the data source to use for the editor where it makes sense.
    */
    get editorDataSource() {
        return this.i.ld;
    }
    set editorDataSource(v) {
        this.i.ld = v;
    }
    /**
     * Gets or sets the editors display member.
    */
    get editorTextField() {
        return this.i.lj;
    }
    set editorTextField(v) {
        this.i.lj = v;
    }
    /**
     * Gets or sets the editors value member.
    */
    get editorValueField() {
        return this.i.kr;
    }
    set editorValueField(v) {
        this.i.kr = v;
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.editTarget && this.editTarget.name && this.editTarget.name == name) {
            return this.editTarget;
        }
        return null;
    }
}
//# sourceMappingURL=igr-editor-cell-info.js.map
