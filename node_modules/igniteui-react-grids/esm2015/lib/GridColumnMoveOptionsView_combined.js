/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { GridColumnOptionsViewBase } from "./GridColumnOptionsViewBase";
import { Size } from "igniteui-react-core";
import { GridColumnOptionsUtilities } from "./GridColumnOptionsUtilities";
import { runOn, delegateCombine, markType } from "igniteui-react-core";
import { GridColumnOptionsSimpleSectionBase } from "./GridColumnOptionsSimpleSectionBase";
import { StringComparer } from "igniteui-react-core";
/**
 * @hidden
 */
export let GridColumnMoveOptionsView = /*@__PURE__*/ (() => {
    class GridColumnMoveOptionsView extends GridColumnOptionsViewBase {
        constructor() {
            super(...arguments);
            this.q = null;
            this.v = null;
            this.w = null;
            this.o = null;
            this.p = null;
            this.r = null;
        }
        get n() {
            return this.b;
        }
        s() {
            let a = this.e;
            let b = a.createElement("div");
            let c = a.createElement("div");
            b.append(c);
            c.setStyleProperty("display", "flex");
            c.setStyleProperty("flexDirection", "row");
            c.setStyleProperty("flexWrap", "no-wrap");
            c.setStyleProperty("justify-content", "center");
            let d = ((() => { let e = this.u(true, this.v); this.v = e.p1; return e.ret; })());
            let e = ((() => { let f = this.u(false, this.w); this.w = f.p1; return f.ret; })());
            c.append(d);
            c.append(e);
            return b;
        }
        t() {
            let a = this.e.createElement("label");
            return a;
        }
        u(a, b) {
            let c = this.e;
            let d = this.n;
            let e = a ? GridColumnMoveOptionsView.x : GridColumnMoveOptionsView.y;
            let f;
            let g;
            let h;
            let i = ((() => { let j = GridColumnOptionsUtilities.g(c, e, 1, d.p, d.j, new Size(1, 18, 18), f, g, b, h, a, false); f = j.p6; g = j.p7; b = j.p8; h = j.p9; return j.ret; })());
            if (a) {
                this.o = f;
                f.clicked = delegateCombine(f.clicked, runOn(this, this.z));
            }
            else {
                this.p = f;
                f.clicked = delegateCombine(f.clicked, runOn(this, this.aa));
            }
            return {
                ret: i,
                p1: b
            };
        }
        k() {
            super.k();
            if (null == this.g || null == this.e) {
                return;
            }
            this.r = this.t();
            this.q = this.s();
            let a = this.g;
            a.setStyleProperty("display", "flex");
            a.setStyleProperty("flex-direction", "row");
            a.setStyleProperty("flex-wrap", "no-wrap");
            a.setStyleProperty("justify-content", "space-between");
            a.setStyleProperty("align-items", "center");
            a.append(this.r);
            a.append(this.q);
        }
        ab() {
            let a = this.n.by();
            let b = this.n.bz();
            if (null != this.o) {
                this.o.disabled = !a;
            }
            if (null != this.p) {
                this.p.disabled = !b;
            }
        }
        m() {
            super.m();
            let a = this.n;
            if (null != this.r) {
                this.r.setRawText(a.bs);
                let b = a.bq;
                if (a.bq) {
                    this.g.setStyleProperty("display", "flex");
                    this.r.setStyleProperty("display", "inline-block");
                }
                else {
                    this.g.setStyleProperty("display", "block");
                    this.r.setStyleProperty("display", "none");
                }
                this.r.setStyleProperty("font", a.aa.fontString);
            }
            if (null != this.v) {
                this.v.setRawText(this.n.b1);
            }
            if (null != this.w) {
                this.w.setRawText(this.n.b5);
            }
            a.bd(this.o);
            a.bd(this.p);
        }
        z(a, b) {
            this.n.b9();
        }
        aa(a, b) {
            this.n.cb();
        }
    }
    GridColumnMoveOptionsView.$t = /*@__PURE__*/ markType(GridColumnMoveOptionsView, 'GridColumnMoveOptionsView', GridColumnOptionsViewBase.$);
    GridColumnMoveOptionsView.x = "M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z";
    GridColumnMoveOptionsView.y = "M12 4l-1.41 1.41L16.17 11H4v2h12.17l-5.58 5.59L12 20l8-8z";
    return GridColumnMoveOptionsView;
})();
/**
 * @hidden
 */
export let GridColumnMoveOptions = /*@__PURE__*/ (() => {
    class GridColumnMoveOptions extends GridColumnOptionsSimpleSectionBase {
        constructor() {
            super();
            this.b0 = "Left";
            this.b4 = "Right";
        }
        f() {
            return new GridColumnMoveOptionsView();
        }
        get_bu() {
            return "Move";
        }
        get bu() {
            return this.get_bu();
        }
        bo() {
            if (null == this.column) {
                return false;
            }
            let a = this.c;
            if (null == a) {
                return false;
            }
            switch (a.bg) {
                case 0: return true;
                case 1: return false;
                default: break;
            }
            return true;
        }
        a5(a, b) {
            super.a5(a, b);
            this.bw.ab();
        }
        a3() {
            super.a3();
            this.bw.ab();
        }
        a4(a, b) {
            super.a4(a, b);
            let c = this.column;
            if (null == c) {
                return;
            }
            switch (b.propertyName) {
                case "Pinned":
                    this.bw.ab();
                    break;
            }
        }
        ba(a, b, c) {
            super.ba(a, b, c);
            switch (a) {
                case "MoveLeftCaption":
                case "MoveRightCaption":
                    this.bw.m();
                    break;
            }
        }
        get bw() {
            return this.e;
        }
        get b1() {
            return this.b0;
        }
        set b1(a) {
            if (0 == StringComparer.b.compare(a, this.b0)) {
                return;
            }
            let b = this.b0;
            this.b0 = a;
            this.a8("MoveLeftCaption", b, this.b0);
        }
        get b5() {
            return this.b4;
        }
        set b5(a) {
            if (0 == StringComparer.b.compare(a, this.b4)) {
                return;
            }
            let b = this.b4;
            this.b4 = a;
            this.a8("MoveRightCaption", b, this.b4);
        }
        bx(a) {
            let b = this.column;
            if (null == b) {
                return false;
            }
            let c = b.grid;
            if (null == c) {
                return false;
            }
            let d = c.actualColumns;
            let e = d.indexOf(b);
            if (e < 0) {
                return false;
            }
            if (a) {
                return this.c.g6(e);
            }
            else {
                return this.c.g7(e);
            }
        }
        b8(a) {
            let b = this.column;
            if (null == b) {
                return;
            }
            let c = this.c;
            if (null == c) {
                return;
            }
            if (!this.bx(a)) {
                return;
            }
            let d = c.actualColumns;
            let e = d.indexOf(b);
            if (a) {
                c.qg(e);
            }
            else {
                c.qh(e);
            }
        }
        by() {
            return this.bx(true);
        }
        bz() {
            return this.bx(false);
        }
        b9() {
            this.b8(true);
        }
        cb() {
            this.b8(false);
        }
        ca(a, b) {
            this.b9();
        }
        cc(a, b) {
            this.cb();
        }
    }
    GridColumnMoveOptions.$t = /*@__PURE__*/ markType(GridColumnMoveOptions, 'GridColumnMoveOptions', GridColumnOptionsSimpleSectionBase.$);
    return GridColumnMoveOptions;
})();
//# sourceMappingURL=GridColumnMoveOptionsView_combined.js.map
