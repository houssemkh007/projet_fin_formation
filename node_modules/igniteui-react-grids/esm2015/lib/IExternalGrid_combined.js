/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, Type, typeCast, markType, delegateCombine, delegateRemove, PropertyChangedEventArgs, String_$type, Number_$type, enumGetBox, Boolean_$type, EnumUtil, Delegate_$type, typeGetValue, runOn, INotifyPropertyChanged_$type, EventArgs, IList$1_$type, NotSupportedException, Point_$type, fromEnum, fromEn, getInstanceType, Date_$type } from "igniteui-react-core";
import { IDataSource_$type } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { ICellActionManager_$type } from "./ICellActionManager";
import { RowPath } from "./RowPath";
import { DataSourceSchemaPropertyType_$type } from "igniteui-react-core";
import { ControlDisplayDensity_$type } from "igniteui-react-core";
import { GridViewportChangedEventArgs } from "./GridViewportChangedEventArgs";
import { DateTimeFormats_$type } from "./DateTimeFormats";
import { dateMinValue, dateNow } from "igniteui-react-core";
import { ModelStates_$type } from "./ModelStates";
import { CellPath } from "./CellPath";
import { ModelTypes_$type } from "./ModelTypes";
import { CellContentHorizontalAlignment_$type } from "./CellContentHorizontalAlignment";
import { CellContentVerticalAlignment_$type } from "./CellContentVerticalAlignment";
import { FontInfo } from "igniteui-react-core";
import { TextCellLineBreakMode_$type } from "./TextCellLineBreakMode";
import { ColumnSortDirection_$type } from "./ColumnSortDirection";
import { PinnedPositions_$type } from "./PinnedPositions";
import { Dictionary$2 } from "igniteui-react-core";
import { GridStyleRepository } from "./GridStyleRepository";
import { BrushUtil } from "igniteui-react-core";
import { CellModelExport } from "./CellModelExport";
import { AppearanceHelper } from "igniteui-react-core";
import { FontUtil } from "igniteui-react-core";
import { DataSourceRowType_$type } from "igniteui-react-core";
import { truncate, isNaN_, intDivide, tryParseNumber } from "igniteui-react-core";
import { GroupSummaryDisplayMode_$type } from "./GroupSummaryDisplayMode";
import { BindingFormatter } from "igniteui-react-core";
import { DateTimeCellModelExport } from "./DateTimeCellModelExport";
import { EditorType_$type } from "./EditorType";
import { EditorCellModelExport } from "./EditorCellModelExport";
import { SummaryCellModelExport } from "./SummaryCellModelExport";
import { ImageStretchOptions_$type } from "./ImageStretchOptions";
import { ImageResourceType_$type } from "./ImageResourceType";
import { ImageCellModelExport } from "./ImageCellModelExport";
import { NumericCellModelExport } from "./NumericCellModelExport";
import { RowSeparatorModelExport } from "./RowSeparatorModelExport";
import { GroupData } from "./GroupData";
import { SummaryData } from "./SummaryData";
import { SectionHeaderCellModelExport } from "./SectionHeaderCellModelExport";
import { TemplateCellModelExport } from "./TemplateCellModelExport";
import { TextCellModelExport } from "./TextCellModelExport";
import { SortIndicatorStyle_$type } from "./SortIndicatorStyle";
import { ColumnOptionsIconAlignment_$type } from "./ColumnOptionsIconAlignment";
import { ColumnOptionsIconBehavior_$type } from "./ColumnOptionsIconBehavior";
import { TextHeaderCellModelExport } from "./TextHeaderCellModelExport";
import { IDataSourceUpdateNotifier_$type } from "igniteui-react-core";
import { HashSet$1 } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { createGuid, stringStartsWith, stringEmpty, stringIsNullOrWhiteSpace } from "igniteui-react-core";
import { FastIterationDictionary$2 } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { EditModeType_$type } from "./EditModeType";
import { ColumnResizingMode_$type } from "./ColumnResizingMode";
import { ColumnMovingMode_$type } from "./ColumnMovingMode";
import { ColumnWidth } from "./ColumnWidth";
import { HeaderClickAction_$type } from "./HeaderClickAction";
import { EditModeClickAction_$type } from "./EditModeClickAction";
import { ColumnShowingAnimationMode_$type } from "./ColumnShowingAnimationMode";
import { ColumnPropertyUpdatingAnimationMode_$type } from "./ColumnPropertyUpdatingAnimationMode";
import { CellDataLoadedAnimationMode_$type } from "./CellDataLoadedAnimationMode";
import { RowSelectionAnimationMode_$type } from "./RowSelectionAnimationMode";
import { RowHoverAnimationMode_$type } from "./RowHoverAnimationMode";
import { CellSelectionAnimationMode_$type } from "./CellSelectionAnimationMode";
import { GridColumnAnimationSettings } from "./GridColumnAnimationSettings";
import { GridAnimationSettings } from "./GridAnimationSettings";
import { ColumnResizingAnimationMode_$type } from "./ColumnResizingAnimationMode";
import { ColumnMovingAnimationMode_$type } from "./ColumnMovingAnimationMode";
import { ColumnHidingAnimationMode_$type } from "./ColumnHidingAnimationMode";
import { ColumnExchangingAnimationMode_$type } from "./ColumnExchangingAnimationMode";
import { GridSelectionMode_$type } from "./GridSelectionMode";
import { GridActivationMode_$type } from "./GridActivationMode";
import { GridSelectionBehavior_$type } from "./GridSelectionBehavior";
import { GridSelectedItemsCollection } from "./GridSelectedItemsCollection";
import { GridSelectedKeysCollection } from "./GridSelectedKeysCollection";
import { GridSelectedCellRangesCollection } from "./GridSelectedCellRangesCollection";
import { GridCellPosition } from "./GridCellPosition";
import { CornerRadius } from "igniteui-react-core";
import { ColumnSortDescriptionCollection } from "./ColumnSortDescriptionCollection";
import { ColumnGroupDescriptionCollection } from "./ColumnGroupDescriptionCollection";
import { FilterExpressionCollection } from "igniteui-react-core";
import { ColumnSummaryDescriptionCollection } from "./ColumnSummaryDescriptionCollection";
import { DataSourceSummaryScope_$type } from "igniteui-react-core";
import { DataSourceSectionHeaderDisplayMode_$type } from "igniteui-react-core";
import { IEditableDataSource_$type } from "igniteui-react-core";
import { GridFilterExpressionsEventArgs } from "./GridFilterExpressionsEventArgs";
import { CellRange } from "./CellRange";
import { DeviceUtils } from "igniteui-react-core";
import { DefaultPlatformPixelConverter } from "./DefaultPlatformPixelConverter";
import { ObservableCollection$1 } from "igniteui-react-core";
import { ColumnSortDescription } from "./ColumnSortDescription";
import { GridGroupDescriptionsChangedEventArgs } from "./GridGroupDescriptionsChangedEventArgs";
import { GridSortDescriptionsChangedEventArgs } from "./GridSortDescriptionsChangedEventArgs";
import { PrimaryKeyValue } from "./PrimaryKeyValue";
import { GridSelectedItemsChangedEventArgs } from "./GridSelectedItemsChangedEventArgs";
import { GridSelectedKeysChangedEventArgs } from "./GridSelectedKeysChangedEventArgs";
import { GridSelectedCellRangesChangedEventArgs } from "./GridSelectedCellRangesChangedEventArgs";
import { GridDataCommittedEventArgs } from "./GridDataCommittedEventArgs";
import { GridDataCommittingEventArgs } from "./GridDataCommittingEventArgs";
import { DefinitionPropertyUpdatedEventArgs } from "./DefinitionPropertyUpdatedEventArgs";
import { CellPropertyAnimationType_$type } from "./CellPropertyAnimationType";
import { GridSizeChangedEventArgs } from "./GridSizeChangedEventArgs";
import { ColumnStates_$type } from "./ColumnStates";
import { InvalidOperationException } from "igniteui-react-core";
import { VisualModelExport } from "./VisualModelExport";
import { GridActiveCellChangedEventArgs } from "./GridActiveCellChangedEventArgs";
import { FilterFactory } from "igniteui-react-core";
import { Convert } from "igniteui-react-core";
import { GridRowEditStartedEventArgs } from "./GridRowEditStartedEventArgs";
import { GridRowEditEndedEventArgs } from "./GridRowEditEndedEventArgs";
import { timeSpanTotalSeconds, timeSpanFromMilliseconds, timeSpanTotalMilliseconds } from "igniteui-react-core";
import { GridAnimationPhaseSettings } from "./GridAnimationPhaseSettings";
import { GridAnimationManagerAnimationCreatedEventArgs } from "./GridAnimationManagerAnimationCreatedEventArgs";
import { GridAnimationManagerAnimationCompletedEventArgs } from "./GridAnimationManagerAnimationCompletedEventArgs";
import { GridAnimationManagerAnimationCanceledEventArgs } from "./GridAnimationManagerAnimationCanceledEventArgs";
import { GridColumnSpacer } from "./GridColumnSpacer";
import { GridColumnSpacerCollection } from "./GridColumnSpacerCollection";
import { CellStyleRequestedEventArgs } from "./CellStyleRequestedEventArgs";
import { Stack$1 } from "igniteui-react-core";
import { DataSourceSpecialRow } from "igniteui-react-core";
import { DefaultSectionInformation } from "igniteui-react-core";
import { Color } from "igniteui-react-core";
import { EasingFunctions } from "igniteui-react-core";
import { CalculationParameters } from "./CalculationParameters";
import { ColumnPropertySettersCollection } from "./ColumnPropertySettersCollection";
import { ColumnPropertySetter } from "./ColumnPropertySetter";
import { ResponsiveStateEnteringEventArgs } from "./ResponsiveStateEnteringEventArgs";
import { ResponsiveStateEnteredEventArgs } from "./ResponsiveStateEnteredEventArgs";
import { ResponsiveStateExitedEventArgs } from "./ResponsiveStateExitedEventArgs";
import { RectData } from "igniteui-react-core";
import { GridLayerExport } from "./GridLayerExport";
/**
 * @hidden
 */
export let IExternalGrid_$type = /*@__PURE__*/ new Type(null, 'IExternalGrid');
/**
 * @hidden
 */
export let DefaultCellActionManager = /*@__PURE__*/ (() => {
    class DefaultCellActionManager extends Base {
        constructor(a, b) {
            super();
            this.b = null;
            this.a = null;
            this.c = false;
            this.d = false;
            this.b = a;
            this.a = b;
        }
        clickExpansionIndicator() {
            if (this.b != null && this.a != null) {
                this.b.ru(this.a);
            }
        }
        clickCell(a) {
            if (this.b != null && this.a != null) {
                this.b.qr(this.a, this.c, this.d, a);
            }
        }
        dragStarted() {
            if (this.b != null && this.b.aq != null) {
                this.b.rs(this.b.aq, this.mousePosition.x, this.mousePosition.y, this.c);
                this.mouseUpCell(this.mousePosition.x, this.mousePosition.y);
            }
        }
        previewPointerDownCell() {
            if (this.b != null && this.a != null) {
                this.b.q2(this.a);
            }
        }
        previewPointerUpCell() {
            if (this.b != null && this.a != null) {
                this.b.q3(this.a);
            }
        }
        pointerDownCell() {
            if (this.b != null && this.a != null) {
                this.b.q0(this.a);
            }
        }
        pointerUpCell() {
            if (this.b != null && this.a != null) {
                this.b.q1(this.a);
            }
        }
        mouseDownCell(a, b) {
            if (this.b != null && this.a != null) {
                this.b.qy(this.a, a, b);
            }
        }
        mouseUpCell(a, b) {
            if (this.b != null && this.a != null) {
                this.b.qz(this.a, a, b);
            }
        }
        mouseLeaveCell(a, b) {
            if (this.b != null && this.a != null) {
                this.b.qx(this.a, a, b);
            }
        }
        mouseEnterCell(a, b) {
            if (this.b != null && this.a != null) {
                this.b.qw(this.a, a, b);
            }
        }
        mouseIsOver(a, b) {
            if (this.b != null && this.a != null) {
                this.b.ry(this.a, a, b);
            }
        }
        doubleClicked() {
            if (this.b != null && this.a != null) {
                this.b.qt(this.a);
            }
        }
        getColumnFilterCondition() {
            if (this.b == null) {
                return null;
            }
            return this.b.o(this.a);
        }
        getColumnPropertyType() {
            if (this.b == null) {
                return 11;
            }
            return this.b.p(this.a);
        }
        columnFilterChanging(a) {
            if (this.b == null) {
                return;
            }
            this.b.pv(this.a, a);
        }
        columnFilterChanged(a) {
            if (this.b == null) {
                return;
            }
            this.b.pu(this.a, a);
        }
        isCellDown() {
            if (this.b != null && this.b.aq != null && this.a != null) {
                return this.b.aq.equals(this.a.k);
            }
            return false;
        }
        get isLeaveActionDesired() {
            if (this.a.k.h) {
                return true;
            }
            return this.b.h4;
        }
        get isEnterActionDesired() {
            return this.b.h4;
        }
        get isClickActionDesired() {
            return this.b.hh;
        }
        get isHoverActionDesired() {
            return this.b.hw;
        }
        get isPreviewPointerDownActionDesired() {
            return this.b.h1;
        }
        get isPreviewPointerUpActionDesired() {
            return this.b.h2;
        }
        get isPointerDownActionDesired() {
            return this.b.hz;
        }
        get isPointerUpActionDesired() {
            return this.b.h0;
        }
        get isControlPressed() {
            return this.c;
        }
        set isControlPressed(a) {
            this.c = a;
        }
        get isShiftPressed() {
            return this.d;
        }
        set isShiftPressed(a) {
            this.d = a;
        }
        get isDrag() {
            return this.b.dragger.isDragActive;
        }
        get isMouseDown() {
            return this.b.aq != null;
        }
        get mousePosition() {
            return this.b.vo;
        }
        get isGridDragging() {
            if (this.b != null && this.b.dragger != null) {
                return this.b.dragger.isDragActive;
            }
            else {
                return false;
            }
        }
        updateCellEditValue(a) {
            let b = typeCast(EditorCellModel.$, this.a);
            if (b != null) {
                b.le = a;
            }
        }
        editorCellLostFocus() {
            if (this.b != null) {
                this.b.rt(typeCast(EditorCellModel.$, this.a));
            }
        }
        cancelEditMode(a) {
            if (this.b != null) {
                this.b.ha(a);
            }
        }
    }
    DefaultCellActionManager.$t = /*@__PURE__*/ markType(DefaultCellActionManager, 'DefaultCellActionManager', Base.$, [ICellActionManager_$type]);
    return DefaultCellActionManager;
})();
/**
 * @hidden
 */
export let IGridInfoRequestor_$type = /*@__PURE__*/ new Type(null, 'IGridInfoRequestor');
/**
 * @hidden
 */
export let DefaultGridInfoRequestor = /*@__PURE__*/ (() => {
    class DefaultGridInfoRequestor extends Base {
        constructor(a, b) {
            super();
            this.b = null;
            this.a = null;
            this.b = a;
            this.a = b;
        }
        getColumn() {
            if (this.b == null) {
                return null;
            }
            return this.b.a0(this.a.k);
        }
        getDensity() {
            if (this.b == null) {
                return 3;
            }
            return this.b.fg;
        }
        getTheme() {
            if (this.b == null) {
                return 0;
            }
            return 1;
        }
        setViewportChangedHandler(a) {
            if (this.b != null && a != null) {
                let b = this.b;
                b.viewportChanged = delegateCombine(b.viewportChanged, a);
            }
        }
        removeViewportChangedHandler(a) {
            if (this.b != null && a != null) {
                let b = this.b;
                b.viewportChanged = delegateRemove(b.viewportChanged, a);
            }
        }
    }
    DefaultGridInfoRequestor.$t = /*@__PURE__*/ markType(DefaultGridInfoRequestor, 'DefaultGridInfoRequestor', Base.$, [IGridInfoRequestor_$type]);
    return DefaultGridInfoRequestor;
})();
/**
 * @hidden
 */
export let DateTimeColumnValueFormatter = /*@__PURE__*/ (() => {
    class DateTimeColumnValueFormatter extends Base {
        constructor() {
            super(...arguments);
            this.a = 0;
            this.b = false;
            this.f = null;
            this.e = null;
            this.c = null;
            this.d = null;
            this.g = null;
            this.h = null;
        }
        k() {
            this.b = true;
        }
        j(a) {
            this.a = a.kw;
            this.b = false;
        }
        i(a) {
            if (+a == +(dateMinValue())) {
                return "";
            }
            let b = (Intl && Intl.DateTimeFormat);
            if (b) {
                let format_ = null;
                switch (this.a) {
                    case 4:
                        if (this.f == null) {
                            this.f = (new Intl.DateTimeFormat([], { month: 'numeric', day: 'numeric', year: 'numeric', hour: 'numeric', minute: 'numeric', second: 'numeric' }));
                        }
                        format_ = this.f;
                        break;
                    case 5:
                        if (this.e == null) {
                            this.e = (new Intl.DateTimeFormat([], { weekday: 'long', month: 'long', day: 'numeric', year: 'numeric', hour: 'numeric', minute: 'numeric', second: 'numeric' }));
                        }
                        format_ = this.e;
                        break;
                    case 1:
                        if (this.c == null) {
                            this.c = (new Intl.DateTimeFormat([], { weekday: 'long', month: 'long', day: 'numeric', year: 'numeric' }));
                        }
                        format_ = this.c;
                        break;
                    case 0:
                        if (this.d == null) {
                            this.d = (new Intl.DateTimeFormat([], { month: 'numeric', day: 'numeric', year: 'numeric' }));
                        }
                        format_ = this.d;
                        break;
                    case 3:
                        if (this.g == null) {
                            this.g = (new Intl.DateTimeFormat([], { hour: 'numeric', minute: 'numeric', second: 'numeric' }));
                        }
                        format_ = this.g;
                        break;
                    case 2:
                        if (this.h == null) {
                            this.h = (new Intl.DateTimeFormat([], { hour: 'numeric', minute: 'numeric' }));
                        }
                        format_ = this.h;
                        break;
                }
                let date_ = a;
                return (format_.format(date_));
            }
            else {
                let date_ = a;
                switch (this.a) {
                    case 4: return (date_.toLocaleString());
                    case 5: return (date_.toLocaleString());
                    case 1: return (date_.toLocaleDateString());
                    case 0: return (date_.toLocaleDateString());
                    case 3: return (date_.toLocaleTimeString());
                    case 2: return (date_.toLocaleTimeString());
                }
                return a.toString();
            }
        }
    }
    DateTimeColumnValueFormatter.$t = /*@__PURE__*/ markType(DateTimeColumnValueFormatter, 'DateTimeColumnValueFormatter');
    return DateTimeColumnValueFormatter;
})();
/**
 * @hidden
 */
export let CellModel = /*@__PURE__*/ (() => {
    class CellModel extends Base {
        constructor() {
            super();
            this.n = null;
            this.r = null;
            this.s = 0;
            this.i0 = null;
            this.j = null;
            this.ej = 0;
            this.a5 = false;
            this.ba = false;
            this.as = false;
            this.aq = false;
            this.a3 = false;
            this.bb = false;
            this.au = false;
            this.a4 = false;
            this.c = null;
            this.d = null;
            this.am = false;
            this.an = false;
            this.al = false;
            this.c1 = 0;
            this.bc = new Dictionary$2(String_$type, Boolean_$type, 0);
            this.cu = -1;
            this.a = null;
            this.be = null;
            this.p = null;
            this.gl = null;
            this.bw = 0;
            this.bx = 0;
            this.c8 = 0;
            this.c9 = 0;
            this.bm = 1;
            this.bl = 1;
            this.bj = 1;
            this.bq = 1;
            this.bk = 1;
            this.bo = 0;
            this.bt = 0;
            this.bp = 0;
            this.bu = 0;
            this.c0 = 0;
            this.da = 0;
            this.ao = false;
            this.u = 0;
            this.bs = 0;
            this.bi = 0;
            this.bn = 0;
            this.e = 0;
            this.g = 1;
            this.jz = null;
            this.j0 = null;
            this.jw = null;
            this.jx = null;
            this.jv = null;
            this.j2 = null;
            this.j6 = null;
            this.j3 = null;
            this.j7 = null;
            this.j8 = null;
            this.j5 = null;
            this.j4 = null;
            this.br = 0.3;
            this.gk = null;
            this.gr = "";
            this.j9 = null;
            this.jy = null;
            this.j1 = null;
            this.ac = null;
            this.aa = null;
            this.y = 0;
            this.bv = 0;
            this.c5 = 0;
            this.c7 = 0;
            this.c6 = 0;
            this.c4 = 0;
            this.cn = 0;
            this.cp = 0;
            this.co = 0;
            this.cm = 0;
            this.cr = 0;
            this.ct = 0;
            this.cs = 0;
            this.cq = 0;
            this.cf = 1;
            this.ch = 1;
            this.cg = 1;
            this.ce = 1;
            this.cx = 2;
            this.cz = 2;
            this.cy = 2;
            this.cw = 2;
            this.cj = 0;
            this.cl = 0;
            this.ck = 0;
            this.ci = 0;
            this.l = 0;
            this.aj = false;
            this.ag = false;
            this.w = 0;
            this.ab = null;
            this.ai = false;
            this.ah = false;
            this.gq = null;
            this.a1 = false;
            this.cv = -1;
            this.ak = false;
            this.gj = 0;
            this.propertyChanged = null;
            this.cellReconciling = null;
            this.t = 0;
            this.ej = -1;
            this.jr();
            this.ke = GridStyleRepository.aw;
        }
        get o() {
            return this.n;
        }
        set o(a) {
            this.n = a;
        }
        static ez(a) {
            if (CellModel.bf == null || CellModel.bf == undefined) {
                CellModel.bf = new Dictionary$2(String_$type, Number_$type, 0);
            }
            if (CellModel.bf.containsKey(a)) {
                return CellModel.bf.item(a);
            }
            let b = CellModel.c3;
            CellModel.c3++;
            CellModel.c2 = b;
            CellModel.bf.item(a, b);
            return b;
        }
        get t() {
            return this.s;
        }
        set t(a) {
            let b = this.s;
            this.s = a;
            if (this.s != b) {
                this.jm("State", CellModel.f8, enumGetBox(ModelStates_$type, b), enumGetBox(ModelStates_$type, this.s));
            }
        }
        get k() {
            return this.j;
        }
        set k(a) {
            let b = this.j;
            this.j = a;
            if (this.j != b) {
                this.jm("Path", CellModel.fu, b, this.j);
            }
        }
        get a6() {
            return this.am;
        }
        set a6(a) {
            let b = this.am;
            this.am = a;
            if (this.am != b) {
                this.jm("IsRowPinned", CellModel.fc, b, this.am);
            }
        }
        get a7() {
            return this.an;
        }
        set a7(a) {
            let b = this.an;
            this.an = a;
            if (this.an != b) {
                this.jm("IsRowSticky", CellModel.fd, b, this.an);
            }
        }
        get a2() {
            return this.al;
        }
        set a2(a) {
            let b = this.al;
            this.al = a;
            if (this.al != b) {
                this.jm("IsLastStickyRow", CellModel.fb, b, this.al);
            }
        }
        get e5() {
            return this.c1;
        }
        set e5(a) {
            let b = this.c1;
            this.c1 = a;
            if (this.c1 != b) {
                this.jm("Indent", CellModel.e6, b, this.c1);
            }
        }
        at(a) {
            if (this.bc.containsKey(a)) {
                return this.bc.item(a);
            }
            return false;
        }
        ax(propertyId_) {
            if (this.cu == -1) {
                return false;
            }
            let a = ((propertyId_ / 32) | 0);
            let b = propertyId_ % 32;
            return ((this.a[a] >> b) & 1) != 0;
        }
        aw(a) {
            let b = CellModel.bf.f(a);
            if (b != undefined) {
                return this.ax(b);
            }
            if (this.at(a)) {
                return true;
            }
            return false;
        }
        je(propertyId_) {
            if (this.cu == -1) {
                this.cu = truncate(Math.ceil(CellModel.c2 / 32));
                this.a = new Array(propertyId_);
            }
            let a = ((propertyId_ / 32) | 0);
            let b = propertyId_ % 32;
            this.a[a] = this.a[a] | (1 << b);
        }
        jb() {
            for (let a = 0; a < this.cu; a++) {
                this.a[a] = 0;
            }
        }
        jf(a) {
            let b = CellModel.bf.f(a);
            if (b != undefined) {
                this.je(b);
                return;
            }
            this.bc.item(a, true);
        }
        jm(a, b, c, d) {
            this.je(b);
            this.jp(a, c, d);
            if (this.o != null) {
                this.o.sk();
            }
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
        }
        jp(a, b, c) {
            switch (a) {
                case "State":
                    this.a5 = true;
                    this.ba = true;
                    this.as = true;
                    this.bb = true;
                    break;
                case "LeftOffset":
                case "TopOffset":
                case "LeftPercentOffset":
                case "TopPercentOffset":
                case "X":
                case "Y":
                    this.a5 = true;
                    break;
                case "Width":
                case "Height":
                    this.ba = true;
                    break;
                case "RowItem":
                    this.jn();
                    break;
                case "Background":
                case "SelectedBackground":
                case "SelectedStatus":
                case "HoverBackground":
                case "HoverStatus":
                case "IsLastStickyRow":
                case "StickyRowBackground":
                case "PinnedRowBackground":
                case "LastStickyRowBackground":
                    this.jh();
                    break;
                case "IsRowSticky":
                case "IsRowPinned":
                case "PinnedRowOpacity":
                    this.jh();
                    this.jk();
                    break;
                case "Border":
                case "ActivationBorder":
                case "ErrorBorder":
                case "BorderLeftWidth":
                case "BorderTopWidth":
                case "BorderBottomWidth":
                case "BorderRightWidth":
                case "ActivationBorderLeftWidth":
                case "ActivationBorderTopWidth":
                case "ActivationBorderBottomWidth":
                case "ActivationBorderRightWidth":
                case "ActivationStatus":
                case "EditError":
                case "ErrorBorderLeftWidth":
                case "ErrorBorderTopWidth":
                case "ErrorBorderBottomWidth":
                case "ErrorBorderRightWidth":
                    this.aq = true;
                    this.ji();
                    break;
                case "PaddingLeft":
                case "PaddingTop":
                case "PaddingBottom":
                case "PaddingRight":
                    this.ji();
                    break;
                case "Opacity":
                    this.jj();
                    break;
                case "ContentOpacity":
                case "EditOpacity":
                    this.jk();
                    break;
                case "IsEdited":
                case "IsDeleted":
                    this.jo();
                    this.jk();
                    this.jl();
                    this.as = true;
                    break;
                case "TextColor":
                case "DeletedTextColor":
                    this.jo();
                    break;
                case "FontInfo":
                case "EditFontInfo":
                    this.jl();
                    break;
                case "Path": break;
                default:
                    this.as = true;
                    break;
            }
        }
        jn() {
        }
        jh() {
            let a = this.ke;
            if (this.a2 && this.kk != null) {
                a = this.kk;
            }
            else if (this.a7 && this.ko != null) {
                a = this.ko;
            }
            else if (this.a6 && this.kl != null) {
                a = this.kl;
            }
            if (this.kj != null) {
                a = this.ki(a, this.kj, this.b3);
            }
            this.kb = this.ki(a, this.km, this.b8);
        }
        ji() {
            let a = false;
            if (this.by != 0 && this.ka != null) {
                a = true;
            }
            if (this.hl != null) {
                let b = this.er - this.eb;
                let c = this.ew - this.eg;
                let d = this.eu - this.ee;
                let e = this.ep - this.d9;
                this.d1 = Math.max(0, this.fo - b);
                this.d5 = Math.max(0, this.fs - c);
                this.d3 = Math.max(0, this.fq - d);
                this.dz = Math.max(0, this.fm - e);
                this.dp = Math.max(0, this.eb + b);
                this.du = Math.max(0, this.eg + c);
                this.ds = Math.max(0, this.ee + d);
                this.dm = Math.max(0, this.d9 + e);
                this.kc = this.kh;
            }
            else {
                if (a && (this.eb == 0 || this.eg == 0 || this.ee == 0 || this.d9 == 0)) {
                    let f = this.dd - this.eb;
                    let g = this.di - this.eg;
                    let h = this.dg - this.ee;
                    let i = this.db - this.d9;
                    this.d1 = Math.max(0, this.fo - f);
                    this.d5 = Math.max(0, this.fs - g);
                    this.d3 = Math.max(0, this.fq - h);
                    this.dz = Math.max(0, this.fm - i);
                    this.dp = Math.max(0, this.eb + f);
                    this.du = Math.max(0, this.eg + g);
                    this.ds = Math.max(0, this.ee + h);
                    this.dm = Math.max(0, this.d9 + i);
                }
                else {
                    this.d1 = this.fo;
                    this.d5 = this.fs;
                    this.d3 = this.fq;
                    this.dz = this.fm;
                    this.dp = this.eb;
                    this.du = this.eg;
                    this.ds = this.ee;
                    this.dm = this.d9;
                }
                let j = this.kf;
                this.kc = this.ki(j, this.ka, this.by);
            }
        }
        jj() {
            this.b0 = this.b6;
        }
        jk() {
            if (this.ay && !this.av) {
                this.bz = this.b2;
            }
            else if (this.a6 && !this.a7) {
                this.bz = this.b7;
            }
            else {
                this.bz = this.b1;
            }
        }
        jo() {
            if (this.av) {
                this.kd = this.kg;
            }
            else {
                this.kd = this.kp;
            }
        }
        jl() {
            if (this.ay || this.av) {
                this.ad = this.ae;
            }
            else {
                this.ad = this.af;
            }
        }
        ki(a, b, c) {
            if (c == 0) {
                return a;
            }
            if (c == 1) {
                return b;
            }
            return BrushUtil.k(a, c, b, 0);
        }
        jr() {
            this.js();
        }
        js() {
            this.jb();
            if (this.be != null) {
                this.be.clear();
            }
            this.b8 = 0;
            this.as = true;
            this.a5 = true;
            this.ba = true;
            this.a3 = false;
        }
        jt(a, b) {
            if (this.be == null) {
                this.be = new Dictionary$2(String_$type, Base.$, 0);
            }
            let c = null;
            if (this.be.containsKey(a)) {
                c = this.be.item(a);
            }
            this.be.item(a, b);
            let d = false;
            if (c == null && b != null) {
                d = true;
            }
            if (c != null) {
                if (!Base.equalsStatic(c, b)) {
                    d = true;
                }
            }
            if (d) {
                this.jf(a);
                this.as = true;
                if (this.o != null) {
                    this.o.sk();
                }
            }
        }
        ap(a) {
            if (this.be == null) {
                return false;
            }
            return this.be.containsKey(a);
        }
        jq(a) {
            if (this.be == null) {
                return;
            }
            if (this.be.containsKey(a)) {
                this.be.removeItem(a);
            }
        }
        gm(a) {
            if (this.be == null) {
                return null;
            }
            if (this.be.containsKey(a)) {
                return this.be.item(a);
            }
            return null;
        }
        get q() {
            return this.p;
        }
        set q(a) {
            let b = this.p;
            this.p = a;
            if (this.p != b) {
                this.a3 = true;
            }
        }
        get gp() {
            return this.gl;
        }
        set gp(a) {
            let b = this.gl;
            this.gl = a;
            if (this.gl != b) {
                this.jm("RowItem", CellModel.fz, b, this.gl);
            }
        }
        get cc() {
            return this.bw;
        }
        set cc(a) {
            let b = this.bw;
            this.bw = a;
            if (this.bw != b) {
                this.jm("X", CellModel.gh, b, this.bw);
            }
        }
        get cd() {
            return this.bx;
        }
        set cd(a) {
            let b = this.bx;
            this.bx = a;
            if (this.bx != b) {
                this.jm("Y", CellModel.gi, b, this.bx);
            }
        }
        get f2() {
            return this.c8;
        }
        set f2(a) {
            let b = this.c8;
            this.c8 = a;
            if (this.c8 != b) {
                this.jm("SnappedX", CellModel.f3, b, this.c8);
            }
        }
        get f4() {
            return this.c9;
        }
        set f4(a) {
            let b = this.c9;
            this.c9 = a;
            if (this.c9 != b) {
                this.jm("SnappedY", CellModel.f5, b, this.c9);
            }
        }
        get b2() {
            return this.bm;
        }
        set b2(a) {
            let b = this.bm;
            this.bm = a;
            if (this.bm != b) {
                this.jm("EditOpacity", CellModel.eo, b, this.bm);
            }
        }
        get b1() {
            return this.bl;
        }
        set b1(a) {
            let b = this.bl;
            this.bl = a;
            if (this.bl != b) {
                this.jm("ContentOpacity", CellModel.ei, b, this.bl);
            }
        }
        get bz() {
            return this.bj;
        }
        set bz(a) {
            let b = this.bj;
            this.bj = a;
            if (this.bj != b) {
                this.jm("ActualContentOpacity", CellModel.dw, b, this.bj);
            }
        }
        get b6() {
            return this.bq;
        }
        set b6(a) {
            let b = this.bq;
            this.bq = a;
            if (this.bq != b) {
                this.jm("Opacity", CellModel.fk, b, this.bq);
            }
        }
        get b0() {
            return this.bk;
        }
        set b0(a) {
            let b = this.bk;
            this.bk = a;
            if (this.bk != b) {
                this.jm("ActualOpacity", CellModel.dy, b, this.bk);
            }
        }
        jg() {
            if (this.cellReconciling != null) {
                this.cellReconciling(this);
            }
        }
        get b4() {
            return this.bo;
        }
        set b4(a) {
            let b = this.bo;
            this.bo = a;
            if (this.bo != b) {
                this.jm("LeftOffset", CellModel.fg, b, this.bo);
            }
        }
        get b9() {
            return this.bt;
        }
        set b9(a) {
            let b = this.bt;
            this.bt = a;
            if (this.bt != b) {
                this.jm("TopOffset", CellModel.gb, b, this.bt);
            }
        }
        get b5() {
            return this.bp;
        }
        set b5(a) {
            let b = this.bp;
            this.bp = a;
            if (this.bp != b) {
                this.jm("LeftPercentOffset", CellModel.fh, b, this.bp);
            }
        }
        get ca() {
            return this.bu;
        }
        set ca(a) {
            let b = this.bu;
            this.bu = a;
            if (this.bu != b) {
                this.jm("TopPercentOffset", CellModel.gc, b, this.bu);
            }
        }
        get e0() {
            return this.c0;
        }
        set e0(a) {
            let b = this.c0;
            this.c0 = a;
            if (this.c0 != b) {
                this.jm("Height", CellModel.e1, b, this.c0);
            }
        }
        get gf() {
            return this.da;
        }
        set gf(a) {
            let b = this.da;
            this.da = a;
            if (this.da != b) {
                this.jm("Width", CellModel.gg, b, this.da);
            }
        }
        get a9() {
            return this.ao;
        }
        set a9(a) {
            let b = this.ao;
            this.ao = a;
            if (this.ao != b) {
                this.jm("IsSelected", CellModel.fe, b, this.ao);
            }
        }
        get v() {
            return this.u;
        }
        set v(a) {
            let b = this.u;
            this.u = a;
            if (this.u != b) {
                this.jm("ModelType", CellModel.fj, enumGetBox(ModelTypes_$type, b), enumGetBox(ModelTypes_$type, this.u));
            }
        }
        get b8() {
            return this.bs;
        }
        set b8(a) {
            let b = this.bs;
            this.bs = a;
            if (this.bs != b) {
                this.jm("SelectedStatus", CellModel.f1, b, this.bs);
            }
        }
        get by() {
            return this.bi;
        }
        set by(a) {
            let b = this.bi;
            this.bi = a;
            if (this.bi != b) {
                this.jm("ActivationStatus", CellModel.dk, b, this.bi);
            }
        }
        get b3() {
            return this.bn;
        }
        set b3(a) {
            let b = this.bn;
            this.bn = a;
            if (this.bn != b) {
                this.jm("HoverStatus", CellModel.e4, b, this.bn);
            }
        }
        get f() {
            return this.e;
        }
        set f(a) {
            let b = this.e;
            this.e = a;
            if (this.e != b) {
                this.jm("HorizontalAlignment", CellModel.e2, enumGetBox(CellContentHorizontalAlignment_$type, b), enumGetBox(CellContentHorizontalAlignment_$type, this.e));
            }
        }
        get h() {
            return this.g;
        }
        set h(a) {
            let b = this.g;
            this.g = a;
            if (this.g != b) {
                this.jm("VerticalAlignment", CellModel.gd, enumGetBox(CellContentVerticalAlignment_$type, b), enumGetBox(CellContentHorizontalAlignment_$type, this.e));
            }
        }
        get ke() {
            return this.jz;
        }
        set ke(a) {
            let b = this.jz;
            this.jz = a;
            if (this.jz != b) {
                this.jm("Background", CellModel.d8, b, this.jz);
            }
        }
        get kf() {
            return this.j0;
        }
        set kf(a) {
            let b = this.j0;
            this.j0 = a;
            if (this.j0 != b) {
                this.jm("Border", CellModel.ed, b, this.j0);
            }
        }
        get kb() {
            return this.jw;
        }
        set kb(a) {
            let b = this.jw;
            this.jw = a;
            if (this.jw != b) {
                this.jm("ActualBackground", CellModel.dl, b, this.jw);
            }
        }
        get kc() {
            return this.jx;
        }
        set kc(a) {
            let b = this.jx;
            this.jx = a;
            if (this.jx != b) {
                this.jm("ActualBorder", CellModel.dr, b, this.jx);
            }
        }
        get ka() {
            return this.jv;
        }
        set ka(a) {
            let b = this.jv;
            this.jv = a;
            if (this.jv != b) {
                this.jm("ActivationBorder", CellModel.df, b, this.jv);
            }
        }
        get kh() {
            return this.j2;
        }
        set kh(a) {
            let b = this.j2;
            this.j2 = a;
            if (this.j2 != b) {
                this.jm("ErrorBorder", CellModel.et, b, this.j2);
            }
        }
        get km() {
            return this.j6;
        }
        set km(a) {
            let b = this.j6;
            this.j6 = a;
            if (this.j6 != b) {
                this.jm("SelectedBackground", CellModel.f0, b, this.j6);
            }
        }
        get kj() {
            return this.j3;
        }
        set kj(a) {
            let b = this.j3;
            this.j3 = a;
            if (this.j3 != b) {
                this.jm("HoverBackground", CellModel.e3, b, this.j3);
            }
        }
        get kn() {
            return this.j7;
        }
        set kn(a) {
            let b = this.j7;
            this.j7 = a;
            if (this.j7 != b) {
                this.jm("SortIndicatorColor", CellModel.f7, b, this.j7);
            }
        }
        get ko() {
            return this.j8;
        }
        set ko(a) {
            let b = this.j8;
            this.j8 = a;
            if (this.j8 != b) {
                this.jm("StickyRowBackground", CellModel.f9, b, this.j8);
            }
        }
        get kl() {
            return this.j5;
        }
        set kl(a) {
            let b = this.j5;
            this.j5 = a;
            if (this.j5 != b) {
                this.jm("PinnedRowBackground", CellModel.fw, b, this.j5);
            }
        }
        get kk() {
            return this.j4;
        }
        set kk(a) {
            let b = this.j4;
            this.j4 = a;
            if (this.j4 != b) {
                this.jm("LastStickyRowBackground", CellModel.ff, b, this.j4);
            }
        }
        get b7() {
            return this.br;
        }
        set b7(a) {
            let b = this.br;
            this.br = a;
            if (this.br != b) {
                this.jm("PinnedRowOpacity", CellModel.fx, b, this.br);
            }
        }
        get go() {
            return this.gk;
        }
        set go(a) {
            let b = this.gk;
            this.gk = a;
            if (this.gk != b) {
                this.jm("OriginalValue", CellModel.fl, b, this.gk);
            }
        }
        get ip() {
            return this.gr;
        }
        set ip(a) {
            let b = this.gr;
            this.gr = a;
            if (this.gr != b) {
                this.jm("RenderValue", CellModel.fy, b, this.gr);
            }
        }
        get kp() {
            return this.j9;
        }
        set kp(a) {
            let b = this.j9;
            this.j9 = a;
            if (this.j9 != b) {
                this.jm("TextColor", CellModel.ga, b, this.j9);
            }
        }
        get kd() {
            return this.jy;
        }
        set kd(a) {
            let b = this.jy;
            this.jy = a;
            if (this.jy != b) {
                this.jm("ActualTextColor", CellModel.d7, b, this.jy);
            }
        }
        get kg() {
            return this.j1;
        }
        set kg(a) {
            let b = this.j1;
            this.j1 = a;
            if (this.j1 != b) {
                this.jm("DeletedTextColor", CellModel.ek, b, this.j1);
            }
        }
        get af() {
            return this.ac;
        }
        set af(a) {
            let b = this.ac;
            this.ac = a;
            if (this.ac != b) {
                this.jm("FontInfo", CellModel.ey, b, this.ac);
            }
        }
        get ad() {
            return this.aa;
        }
        set ad(a) {
            let b = this.aa;
            this.aa = a;
            if (this.aa != b) {
                this.jm("ActualFontInfo", CellModel.dx, b, this.aa);
            }
        }
        get z() {
            return this.y;
        }
        set z(a) {
            let b = this.y;
            this.y = a;
            if (this.y != b) {
                this.jm("LineBreakMode", CellModel.fi, enumGetBox(TextCellLineBreakMode_$type, b), enumGetBox(TextCellLineBreakMode_$type, this.y));
            }
        }
        get cb() {
            return this.bv;
        }
        set cb(a) {
            let b = this.bv;
            this.bv = a;
            if (this.bv != b) {
                this.jm("VirtualizationPercentage", CellModel.ge, b, this.bv);
            }
        }
        get fo() {
            return this.c5;
        }
        set fo(a) {
            let b = this.c5;
            this.c5 = a;
            if (this.c5 != b) {
                this.jm("PaddingLeft", CellModel.fp, b, this.c5);
            }
        }
        get fs() {
            return this.c7;
        }
        set fs(a) {
            let b = this.c7;
            this.c7 = a;
            if (this.c7 != b) {
                this.jm("PaddingTop", CellModel.ft, b, this.c7);
            }
        }
        get fq() {
            return this.c6;
        }
        set fq(a) {
            let b = this.c6;
            this.c6 = a;
            if (this.c6 != b) {
                this.jm("PaddingRight", CellModel.fr, b, this.c6);
            }
        }
        get fm() {
            return this.c4;
        }
        set fm(a) {
            let b = this.c4;
            this.c4 = a;
            if (this.c4 != b) {
                this.jm("PaddingBottom", CellModel.fn, b, this.c4);
            }
        }
        get d1() {
            return this.cn;
        }
        set d1(a) {
            let b = this.cn;
            this.cn = a;
            if (this.cn != b) {
                this.jm("ActualPaddingLeft", CellModel.d2, b, this.cn);
            }
        }
        get d5() {
            return this.cp;
        }
        set d5(a) {
            let b = this.cp;
            this.cp = a;
            if (this.cp != b) {
                this.jm("ActualPaddingTop", CellModel.d6, b, this.cp);
            }
        }
        get d3() {
            return this.co;
        }
        set d3(a) {
            let b = this.co;
            this.co = a;
            if (this.co != b) {
                this.jm("ActualPaddingRight", CellModel.d4, b, this.co);
            }
        }
        get dz() {
            return this.cm;
        }
        set dz(a) {
            let b = this.cm;
            this.cm = a;
            if (this.cm != b) {
                this.jm("ActualPaddingBottom", CellModel.d0, b, this.cm);
            }
        }
        get eb() {
            return this.cr;
        }
        set eb(a) {
            let b = this.cr;
            this.cr = a;
            if (this.cr != b) {
                this.jm("BorderLeftWidth", CellModel.ec, b, this.cr);
            }
        }
        get eg() {
            return this.ct;
        }
        set eg(a) {
            let b = this.ct;
            this.ct = a;
            if (this.ct != b) {
                this.jm("BorderTopWidth", CellModel.eh, b, this.ct);
            }
        }
        get ee() {
            return this.cs;
        }
        set ee(a) {
            let b = this.cs;
            this.cs = a;
            if (this.cs != b) {
                this.jm("BorderRightWidth", CellModel.ef, b, this.cs);
            }
        }
        get d9() {
            return this.cq;
        }
        set d9(a) {
            let b = this.cq;
            this.cq = a;
            if (this.cq != b) {
                this.jm("BorderBottomWidth", CellModel.ea, b, this.cq);
            }
        }
        get dd() {
            return this.cf;
        }
        set dd(a) {
            let b = this.cf;
            this.cf = a;
            if (this.cf != b) {
                this.jm("ActivationBorderLeftWidth", CellModel.de, b, this.cf);
            }
        }
        get di() {
            return this.ch;
        }
        set di(a) {
            let b = this.ch;
            this.ch = a;
            if (this.ch != b) {
                this.jm("ActivationBorderTopWidth", CellModel.dj, b, this.ch);
            }
        }
        get dg() {
            return this.cg;
        }
        set dg(a) {
            let b = this.cg;
            this.cg = a;
            if (this.cg != b) {
                this.jm("ActivationBorderRightWidth", CellModel.dh, b, this.cg);
            }
        }
        get db() {
            return this.ce;
        }
        set db(a) {
            let b = this.ce;
            this.ce = a;
            if (this.ce != b) {
                this.jm("ActivationBorderBottomWidth", CellModel.dc, b, this.ce);
            }
        }
        get er() {
            return this.cx;
        }
        set er(a) {
            let b = this.cx;
            this.cx = a;
            if (this.cx != b) {
                this.jm("ErrorBorderLeftWidth", CellModel.es, b, this.cx);
            }
        }
        get ew() {
            return this.cz;
        }
        set ew(a) {
            let b = this.cz;
            this.cz = a;
            if (this.cz != b) {
                this.jm("ErrorBorderTopWidth", CellModel.ex, b, this.cz);
            }
        }
        get eu() {
            return this.cy;
        }
        set eu(a) {
            let b = this.cy;
            this.cy = a;
            if (this.cy != b) {
                this.jm("ErrorBorderRightWidth", CellModel.ev, b, this.cy);
            }
        }
        get ep() {
            return this.cw;
        }
        set ep(a) {
            let b = this.cw;
            this.cw = a;
            if (this.cw != b) {
                this.jm("ErrorBorderBottomWidth", CellModel.eq, b, this.cw);
            }
        }
        get dp() {
            return this.cj;
        }
        set dp(a) {
            let b = this.cj;
            this.cj = a;
            if (this.cj != b) {
                this.jm("ActualBorderLeftWidth", CellModel.dq, b, this.cj);
            }
        }
        get du() {
            return this.cl;
        }
        set du(a) {
            let b = this.cl;
            this.cl = a;
            if (this.cl != b) {
                this.jm("ActualBorderTopWidth", CellModel.dv, b, this.cl);
            }
        }
        get ds() {
            return this.ck;
        }
        set ds(a) {
            let b = this.ck;
            this.ck = a;
            if (this.ck != b) {
                this.jm("ActualBorderRightWidth", CellModel.dt, b, this.ck);
            }
        }
        get dm() {
            return this.ci;
        }
        set dm(a) {
            let b = this.ci;
            this.ci = a;
            if (this.ci != b) {
                this.jm("ActualBorderBottomWidth", CellModel.dn, b, this.ci);
            }
        }
        get m() {
            return this.l;
        }
        set m(a) {
            let b = this.l;
            this.l = a;
            if (this.l != b) {
                this.jm("SortDirection", CellModel.f6, enumGetBox(ColumnSortDirection_$type, b), enumGetBox(ColumnSortDirection_$type, this.l));
            }
        }
        get az() {
            return this.aj;
        }
        set az(a) {
            let b = this.aj;
            this.aj = a;
            if (this.aj != b) {
                this.jm("IsExpanded", CellModel.fa, b, this.aj);
            }
        }
        get ar() {
            return this.ag;
        }
        set ar(a) {
            let b = this.ag;
            this.ag = a;
            if (this.ag != b) {
                this.jm("IsCollapsable", CellModel.e7, b, this.ag);
            }
        }
        get x() {
            return this.w;
        }
        set x(a) {
            let b = this.w;
            this.w = a;
            if (this.w != b) {
                this.jm("Pinned", CellModel.fv, enumGetBox(PinnedPositions_$type, b), enumGetBox(PinnedPositions_$type, this.w));
            }
        }
        get ae() {
            return this.ab;
        }
        set ae(a) {
            let b = this.ab;
            this.ab = a;
            if (this.ab != b) {
                this.jm("EditFontInfo", CellModel.em, b, this.ab);
            }
        }
        get ay() {
            return this.ai;
        }
        set ay(a) {
            let b = this.ai;
            this.ai = a;
            if (this.ai != b) {
                this.jm("IsEdited", CellModel.e9, b, this.ai);
            }
        }
        get av() {
            return this.ah;
        }
        set av(a) {
            let b = this.ah;
            this.ah = a;
            if (this.ah != b) {
                this.jm("IsDeleted", CellModel.e8, b, this.ah);
            }
        }
        get hl() {
            return this.gq;
        }
        set hl(a) {
            let b = this.gq;
            this.gq = a;
            if (this.gq != b) {
                this.jm("EditError", CellModel.el, b, this.gq);
            }
        }
        get en() {
            return this.cv;
        }
        set en(a) {
            this.cv = a;
        }
        get a0() {
            return this.ak;
        }
        set a0(a) {
            this.ak = a;
        }
        i9() {
            this.ja();
        }
        ja() {
            this.a5 = false;
            this.ba = false;
            this.as = false;
            this.aq = false;
            this.a3 = false;
            this.bb = false;
            this.au = false;
            this.jb();
        }
        b(a) {
            if (a == null) {
                a = new CellModelExport();
            }
            a.r = this.cc;
            a.s = this.cd;
            a.n = this.f2;
            a.o = this.f4;
            a.k = this.e0;
            a.q = this.gf;
            a.m = this.b8;
            a.h = this.by;
            a.z = EnumUtil.getName(TextCellLineBreakMode_$type, this.z);
            a.a = AppearanceHelper.a(this.kb);
            a.b = AppearanceHelper.a(this.kc);
            a.l = this.b0;
            a.i = this.bz;
            a.t = this.e5;
            a.g = this.ar;
            a.d = this.f;
            a.e = this.h;
            a.aa = this.ip;
            a.p = this.cb;
            a.f = this.m;
            a.c = AppearanceHelper.a(this.kd);
            if (this.ad != null) {
                let b = this.ad;
                if (this.o != null && b.n == null) {
                    let c = this.o.externalGrid.renderer;
                    let d = FontUtil.getFontInfoFromString(c, b.fontString);
                    b.n = d.n;
                    b.d = d.d;
                    b.o = d.o;
                    b.q = d.q;
                    b.r = d.r;
                    b.s = d.s;
                }
                if (b.n != null) {
                    a.u = b.n;
                }
                if (!isNaN_(b.d)) {
                    a.j = b.d;
                }
                if (b.s != null) {
                    a.y = b.s;
                }
                if (b.q != null) {
                    a.w = b.q;
                }
                if (b.o != null) {
                    a.v = b.q;
                }
            }
            return a;
        }
        jd() {
            if (CellModel.bg == null) {
                CellModel.bg = new Dictionary$2(String_$type, Delegate_$type, 0);
                CellModel.bg.addItem("X", (a, b) => a.cc = typeGetValue(b));
                CellModel.bg.addItem("Y", (a, b) => a.cd = typeGetValue(b));
                CellModel.bg.addItem("SnappedX", (a, b) => a.f2 = typeGetValue(b));
                CellModel.bg.addItem("SnappedY", (a, b) => a.f4 = typeGetValue(b));
                CellModel.bg.addItem("ContentOpacity", (a, b) => a.b1 = b);
                CellModel.bg.addItem("Opacity", (a, b) => a.b6 = b);
                CellModel.bg.addItem("LeftOffset", (a, b) => a.b4 = b);
                CellModel.bg.addItem("LeftPercentOffset", (a, b) => a.b5 = b);
                CellModel.bg.addItem("TopOffset", (a, b) => a.b9 = b);
                CellModel.bg.addItem("TopPercentOffset", (a, b) => a.ca = b);
                CellModel.bg.addItem("Height", (a, b) => a.e0 = typeGetValue(b));
                CellModel.bg.addItem("Width", (a, b) => a.gf = typeGetValue(b));
                CellModel.bg.addItem("IsSelected", (a, b) => a.a9 = b);
                CellModel.bg.addItem("ModelType", (a, b) => a.v = EnumUtil.getEnumValue(ModelTypes_$type, b));
                CellModel.bg.addItem("SelectedStatus", (a, b) => a.b8 = b);
                CellModel.bg.addItem("ActivationStatus", (a, b) => a.by = b);
                CellModel.bg.addItem("HoverStatus", (a, b) => a.b3 = b);
                CellModel.bg.addItem("HorizontalAlignment", (a, b) => a.f = EnumUtil.getEnumValue(CellContentHorizontalAlignment_$type, b));
                CellModel.bg.addItem("VerticalAlignment", (a, b) => a.h = EnumUtil.getEnumValue(CellContentVerticalAlignment_$type, b));
                CellModel.bg.addItem("Background", (a, b) => a.ke = b);
                CellModel.bg.addItem("Border", (a, b) => a.kf = b);
                CellModel.bg.addItem("ActivationBorder", (a, b) => a.ka = b);
                CellModel.bg.addItem("SelectedBackground", (a, b) => a.km = b);
                CellModel.bg.addItem("HoverBackground", (a, b) => a.kj = b);
                CellModel.bg.addItem("RenderValue", (a, b) => a.ip = b);
                CellModel.bg.addItem("OriginalValue", (a, b) => a.go = b);
                CellModel.bg.addItem("TextColor", (a, b) => a.kp = b);
                CellModel.bg.addItem("SortIndicatorColor", (a, b) => a.kn = b);
                CellModel.bg.addItem("FontInfo", (a, b) => a.af = b);
                CellModel.bg.addItem("LineBreakMode", (a, b) => a.z = EnumUtil.getEnumValue(TextCellLineBreakMode_$type, b));
                CellModel.bg.addItem("VirtualizationPercentage", (a, b) => a.cb = b);
                CellModel.bg.addItem("PaddingLeft", (a, b) => a.fo = typeGetValue(b));
                CellModel.bg.addItem("PaddingTop", (a, b) => a.fs = typeGetValue(b));
                CellModel.bg.addItem("PaddingRight", (a, b) => a.fq = typeGetValue(b));
                CellModel.bg.addItem("PaddingBottom", (a, b) => a.fm = typeGetValue(b));
                CellModel.bg.addItem("BorderLeftWidth", (a, b) => a.eb = typeGetValue(b));
                CellModel.bg.addItem("BorderTopWidth", (a, b) => a.eg = typeGetValue(b));
                CellModel.bg.addItem("BorderRightWidth", (a, b) => a.ee = typeGetValue(b));
                CellModel.bg.addItem("BorderBottomWidth", (a, b) => a.d9 = typeGetValue(b));
                CellModel.bg.addItem("ActivationBorderLeftWidth", (a, b) => a.dd = typeGetValue(b));
                CellModel.bg.addItem("ActivationBorderTopWidth", (a, b) => a.di = typeGetValue(b));
                CellModel.bg.addItem("ActivationBorderRightWidth", (a, b) => a.dg = typeGetValue(b));
                CellModel.bg.addItem("ActivationBorderBottomWidth", (a, b) => a.db = typeGetValue(b));
                CellModel.bg.addItem("SortDirection", (a, b) => a.m = EnumUtil.getEnumValue(ColumnSortDirection_$type, b));
                CellModel.bg.addItem("PinnedRowBackground", (a, b) => a.kl = b);
                CellModel.bg.addItem("StickyRowBackground", (a, b) => a.ko = b);
                CellModel.bg.addItem("LastStickyRowBackground", (a, b) => a.kk = b);
                CellModel.bg.addItem("PinnedRowOpacity", (a, b) => a.b7 = b);
                CellModel.bg.addItem("Pinned", (a, b) => a.x = EnumUtil.getEnumValue(PinnedPositions_$type, b));
                CellModel.bg.addItem("IsEdited", (a, b) => a.ay = b);
                CellModel.bg.addItem("IsDeleted", (a, b) => a.av = b);
                CellModel.bg.addItem("DeletedTextColor", (a, b) => a.kg = b);
                CellModel.bg.addItem("EditOpacity", (a, b) => a.b2 = b);
                CellModel.bg.addItem("EditFontInfo", (a, b) => a.ae = b);
                CellModel.bg.addItem("ErrorBorder", (a, b) => a.kh = b);
                CellModel.bg.addItem("ErrorBorderLeftWidth", (a, b) => a.er = typeGetValue(b));
                CellModel.bg.addItem("ErrorBorderTopWidth", (a, b) => a.ew = typeGetValue(b));
                CellModel.bg.addItem("ErrorBorderBottomWidth", (a, b) => a.ep = typeGetValue(b));
                CellModel.bg.addItem("ErrorBorderRightWidth", (a, b) => a.eu = typeGetValue(b));
                CellModel.bg.addItem("EditError", (a, b) => a.hl = b);
            }
        }
        jc() {
            if (CellModel.bd == null) {
                CellModel.bd = new Dictionary$2(String_$type, Delegate_$type, 0);
                CellModel.bd.addItem("X", (a) => a.cc);
                CellModel.bd.addItem("Y", (a) => a.cd);
                CellModel.bd.addItem("SnappedX", (a) => a.f2);
                CellModel.bd.addItem("SnappedY", (a) => a.f4);
                CellModel.bd.addItem("ContentOpacity", (a) => a.b1);
                CellModel.bd.addItem("Opacity", (a) => a.b6);
                CellModel.bd.addItem("LeftOffset", (a) => a.b4);
                CellModel.bd.addItem("LeftPercentOffset", (a) => a.b5);
                CellModel.bd.addItem("TopOffset", (a) => a.b9);
                CellModel.bd.addItem("TopPercentOffset", (a) => a.ca);
                CellModel.bd.addItem("Height", (a) => a.e0);
                CellModel.bd.addItem("Width", (a) => a.gf);
                CellModel.bd.addItem("IsSelected", (a) => a.a9);
                CellModel.bd.addItem("ModelType", (a) => enumGetBox(ModelTypes_$type, a.v));
                CellModel.bd.addItem("SelectedStatus", (a) => a.b8);
                CellModel.bd.addItem("ActivationStatus", (a) => a.by);
                CellModel.bd.addItem("HorizontalAlignment", (a) => enumGetBox(CellContentHorizontalAlignment_$type, a.f));
                CellModel.bd.addItem("VerticalAlignment", (a) => enumGetBox(CellContentVerticalAlignment_$type, a.h));
                CellModel.bd.addItem("Background", (a) => a.ke);
                CellModel.bd.addItem("Border", (a) => a.kf);
                CellModel.bd.addItem("ActivationBorder", (a) => a.ka);
                CellModel.bd.addItem("SelectedBackground", (a) => a.km);
                CellModel.bd.addItem("HoverBackground", (a) => a.kj);
                CellModel.bd.addItem("RenderValue", (a) => a.ip);
                CellModel.bd.addItem("OriginalValue", (a) => a.go);
                CellModel.bd.addItem("TextColor", (a) => a.kp);
                CellModel.bd.addItem("SortIndicatorColor", (a) => a.kn);
                CellModel.bd.addItem("FontInfo", (a) => a.af);
                CellModel.bd.addItem("LineBreakMode", (a) => enumGetBox(TextCellLineBreakMode_$type, a.z));
                CellModel.bd.addItem("VirtualizationPercentage", (a) => a.cb);
                CellModel.bd.addItem("PaddingLeft", (a) => a.fo);
                CellModel.bd.addItem("PaddingTop", (a) => a.fs);
                CellModel.bd.addItem("PaddingRight", (a) => a.fq);
                CellModel.bd.addItem("PaddingBottom", (a) => a.fm);
                CellModel.bd.addItem("BorderLeftWidth", (a) => a.eb);
                CellModel.bd.addItem("BorderTopWidth", (a) => a.eg);
                CellModel.bd.addItem("BorderRightWidth", (a) => a.ee);
                CellModel.bd.addItem("BorderBottomWidth", (a) => a.d9);
                CellModel.bd.addItem("ActivationBorderLeftWidth", (a) => a.dd);
                CellModel.bd.addItem("ActivationBorderTopWidth", (a) => a.di);
                CellModel.bd.addItem("ActivationBorderRightWidth", (a) => a.dg);
                CellModel.bd.addItem("ActivationBorderBottomWidth", (a) => a.db);
                CellModel.bd.addItem("SortDirection", (a) => enumGetBox(ColumnSortDirection_$type, a.m));
                CellModel.bd.addItem("PinnedRowBackground", (a) => a.kl);
                CellModel.bd.addItem("StickyRowBackground", (a) => a.ko);
                CellModel.bd.addItem("LastStickyRowBackground", (a) => a.kk);
                CellModel.bd.addItem("PinnedRowOpacity", (a) => a.b7);
                CellModel.bd.addItem("Pinned", (a) => enumGetBox(PinnedPositions_$type, a.x));
                CellModel.bd.addItem("IsEdited", (a) => a.ay);
                CellModel.bd.addItem("IsDeleted", (a) => a.av);
                CellModel.bd.addItem("DeletedTextColor", (a) => a.kg);
                CellModel.bd.addItem("EditOpacity", (a) => a.b2);
                CellModel.bd.addItem("EditFontInfo", (a) => a.ae);
                CellModel.bd.addItem("ErrorBorder", (a) => a.kh);
                CellModel.bd.addItem("ErrorBorderLeftWidth", (a) => a.er);
                CellModel.bd.addItem("ErrorBorderTopWidth", (a) => a.ew);
                CellModel.bd.addItem("ErrorBorderBottomWidth", (a) => a.ep);
                CellModel.bd.addItem("ErrorBorderRightWidth", (a) => a.eu);
                CellModel.bd.addItem("EditError", (a) => a.hl);
            }
        }
        ju(a, b) {
            this.jd();
            if (CellModel.bg.containsKey(a)) {
                CellModel.bg.item(a)(this, b);
            }
            else {
                this.jt(a, b);
            }
        }
        gn(a) {
            this.jc();
            if (CellModel.bd.containsKey(a)) {
                return CellModel.bd.item(a)(this);
            }
            if (this.ap(a)) {
                return this.gm(a);
            }
            return null;
        }
        a8(a) {
            return (a != 1 || (a == 1 && this.n.dy == 1)) && a != 2 && a != 4 && a != 5;
        }
    }
    CellModel.$t = /*@__PURE__*/ markType(CellModel, 'CellModel');
    CellModel.c3 = 0;
    CellModel.c2 = 0;
    CellModel.bf = null;
    CellModel.f8 = /*@__PURE__*/ CellModel.ez("State");
    CellModel.fu = /*@__PURE__*/ CellModel.ez("Path");
    CellModel.fc = /*@__PURE__*/ CellModel.ez("IsRowPinned");
    CellModel.fd = /*@__PURE__*/ CellModel.ez("IsRowSticky");
    CellModel.fb = /*@__PURE__*/ CellModel.ez("IsLastStickyRow");
    CellModel.e6 = /*@__PURE__*/ CellModel.ez("Indent");
    CellModel.fz = /*@__PURE__*/ CellModel.ez("RowItem");
    CellModel.gh = /*@__PURE__*/ CellModel.ez("X");
    CellModel.gi = /*@__PURE__*/ CellModel.ez("Y");
    CellModel.f3 = /*@__PURE__*/ CellModel.ez("SnappedX");
    CellModel.f5 = /*@__PURE__*/ CellModel.ez("SnappedY");
    CellModel.eo = /*@__PURE__*/ CellModel.ez("EditOpacity");
    CellModel.ei = /*@__PURE__*/ CellModel.ez("ContentOpacity");
    CellModel.dw = /*@__PURE__*/ CellModel.ez("ActualContentOpacity");
    CellModel.fk = /*@__PURE__*/ CellModel.ez("Opacity");
    CellModel.dy = /*@__PURE__*/ CellModel.ez("ActualOpacity");
    CellModel.fg = /*@__PURE__*/ CellModel.ez("LeftOffset");
    CellModel.gb = /*@__PURE__*/ CellModel.ez("TopOffset");
    CellModel.fh = /*@__PURE__*/ CellModel.ez("LeftPercentOffset");
    CellModel.gc = /*@__PURE__*/ CellModel.ez("TopPercentOffset");
    CellModel.e1 = /*@__PURE__*/ CellModel.ez("Height");
    CellModel.gg = /*@__PURE__*/ CellModel.ez("Width");
    CellModel.fe = /*@__PURE__*/ CellModel.ez("IsSelected");
    CellModel.fj = /*@__PURE__*/ CellModel.ez("ModelType");
    CellModel.f1 = /*@__PURE__*/ CellModel.ez("SelectedStatus");
    CellModel.dk = /*@__PURE__*/ CellModel.ez("ActivationStatus");
    CellModel.e4 = /*@__PURE__*/ CellModel.ez("HoverStatus");
    CellModel.e2 = /*@__PURE__*/ CellModel.ez("HorizontalAlignment");
    CellModel.gd = /*@__PURE__*/ CellModel.ez("VerticalAlignment");
    CellModel.d8 = /*@__PURE__*/ CellModel.ez("Background");
    CellModel.ed = /*@__PURE__*/ CellModel.ez("Border");
    CellModel.dl = /*@__PURE__*/ CellModel.ez("ActualBackground");
    CellModel.dr = /*@__PURE__*/ CellModel.ez("ActualBorder");
    CellModel.df = /*@__PURE__*/ CellModel.ez("ActivationBorder");
    CellModel.et = /*@__PURE__*/ CellModel.ez("ErrorBorder");
    CellModel.f0 = /*@__PURE__*/ CellModel.ez("SelectedBackground");
    CellModel.e3 = /*@__PURE__*/ CellModel.ez("HoverBackground");
    CellModel.f7 = /*@__PURE__*/ CellModel.ez("SortIndicatorColor");
    CellModel.f9 = /*@__PURE__*/ CellModel.ez("StickyRowBackground");
    CellModel.fw = /*@__PURE__*/ CellModel.ez("PinnedRowBackground");
    CellModel.ff = /*@__PURE__*/ CellModel.ez("LastStickyRowBackground");
    CellModel.fx = /*@__PURE__*/ CellModel.ez("PinnedRowOpacity");
    CellModel.fl = /*@__PURE__*/ CellModel.ez("OriginalValue");
    CellModel.fy = /*@__PURE__*/ CellModel.ez("RenderValue");
    CellModel.ga = /*@__PURE__*/ CellModel.ez("TextColor");
    CellModel.d7 = /*@__PURE__*/ CellModel.ez("ActualTextColor");
    CellModel.ek = /*@__PURE__*/ CellModel.ez("DeletedTextColor");
    CellModel.ey = /*@__PURE__*/ CellModel.ez("FontInfo");
    CellModel.dx = /*@__PURE__*/ CellModel.ez("ActualFontInfo");
    CellModel.fi = /*@__PURE__*/ CellModel.ez("LineBreakMode");
    CellModel.ge = /*@__PURE__*/ CellModel.ez("VirtualizationPercentage");
    CellModel.fp = /*@__PURE__*/ CellModel.ez("PaddingLeft");
    CellModel.ft = /*@__PURE__*/ CellModel.ez("PaddingTop");
    CellModel.fr = /*@__PURE__*/ CellModel.ez("PaddingRight");
    CellModel.fn = /*@__PURE__*/ CellModel.ez("PaddingBottom");
    CellModel.d2 = /*@__PURE__*/ CellModel.ez("ActualPaddingLeft");
    CellModel.d6 = /*@__PURE__*/ CellModel.ez("ActualPaddingTop");
    CellModel.d4 = /*@__PURE__*/ CellModel.ez("ActualPaddingRight");
    CellModel.d0 = /*@__PURE__*/ CellModel.ez("ActualPaddingBottom");
    CellModel.ec = /*@__PURE__*/ CellModel.ez("BorderLeftWidth");
    CellModel.eh = /*@__PURE__*/ CellModel.ez("BorderTopWidth");
    CellModel.ef = /*@__PURE__*/ CellModel.ez("BorderRightWidth");
    CellModel.ea = /*@__PURE__*/ CellModel.ez("BorderBottomWidth");
    CellModel.de = /*@__PURE__*/ CellModel.ez("ActivationBorderLeftWidth");
    CellModel.dj = /*@__PURE__*/ CellModel.ez("ActivationBorderTopWidth");
    CellModel.dh = /*@__PURE__*/ CellModel.ez("ActivationBorderRightWidth");
    CellModel.dc = /*@__PURE__*/ CellModel.ez("ActivationBorderBottomWidth");
    CellModel.es = /*@__PURE__*/ CellModel.ez("ErrorBorderLeftWidth");
    CellModel.ex = /*@__PURE__*/ CellModel.ez("ErrorBorderTopWidth");
    CellModel.ev = /*@__PURE__*/ CellModel.ez("ErrorBorderRightWidth");
    CellModel.eq = /*@__PURE__*/ CellModel.ez("ErrorBorderBottomWidth");
    CellModel.dq = /*@__PURE__*/ CellModel.ez("ActualBorderLeftWidth");
    CellModel.dv = /*@__PURE__*/ CellModel.ez("ActualBorderTopWidth");
    CellModel.dt = /*@__PURE__*/ CellModel.ez("ActualBorderRightWidth");
    CellModel.dn = /*@__PURE__*/ CellModel.ez("ActualBorderBottomWidth");
    CellModel.f6 = /*@__PURE__*/ CellModel.ez("SortDirection");
    CellModel.fa = /*@__PURE__*/ CellModel.ez("IsExpanded");
    CellModel.e7 = /*@__PURE__*/ CellModel.ez("IsCollapsable");
    CellModel.fv = /*@__PURE__*/ CellModel.ez("Pinned");
    CellModel.em = /*@__PURE__*/ CellModel.ez("EditFontInfo");
    CellModel.e9 = /*@__PURE__*/ CellModel.ez("IsEdited");
    CellModel.e8 = /*@__PURE__*/ CellModel.ez("IsDeleted");
    CellModel.el = /*@__PURE__*/ CellModel.ez("EditError");
    CellModel.bg = null;
    CellModel.bd = null;
    return CellModel;
})();
/**
 * @hidden
 */
export let DateTimeCellModel = /*@__PURE__*/ (() => {
    class DateTimeCellModel extends CellModel {
        constructor() {
            super();
            this.kz = new Date();
            this.lb = null;
            this.kq = null;
            this.ks = null;
            this.k9 = null;
            this._formatOverride = null;
            this.kv = 0;
            this.kt = null;
            this.kx = false;
            this.k0 = dateMinValue();
            this.je(DateTimeCellModel.k2);
            this.a0 = true;
        }
        get k0() {
            return this.kz;
        }
        set k0(a) {
            let b = this.kz;
            this.kz = a;
            if (+(this.kz) != +b) {
                this.jm("DateTimeValue", DateTimeCellModel.k2, b, this.kz);
            }
        }
        get lh() {
            return this.lb;
        }
        set lh(a) {
            let b = this.lb;
            this.lb = a;
            if (this.lb != b) {
                this.jm("FormatStringOverride", DateTimeCellModel.k5, b, this.lb);
            }
        }
        get kr() {
            return this.kq;
        }
        set kr(a) {
            let b = this.kq;
            this.kq = a;
            if (this.kq != b) {
                this.jm("FormatSpecifiers", DateTimeCellModel.k4, b, this.kq);
            }
        }
        get la() {
            return this._formatOverride;
        }
        set la(a) {
            let b = this._formatOverride;
            this._formatOverride = a;
            if (this._formatOverride != b) {
                this.jm("FormatOverride", DateTimeCellModel.k3, b, this._formatOverride);
            }
        }
        get kw() {
            return this.kv;
        }
        set kw(a) {
            let b = this.kv;
            this.kv = a;
            if (this.kv != b) {
                this.jm("DateTimeFormat", DateTimeCellModel.k1, enumGetBox(DateTimeFormats_$type, b), enumGetBox(DateTimeFormats_$type, this.kv));
            }
        }
        le(a) {
            if (this.ks != null) {
                return this.ks.i(a);
            }
            if (this._formatOverride != null) {
                let date_ = a;
                return (this._formatOverride.format(date_));
            }
            this.kt.j(this);
            return this.kt.i(a);
        }
        get ku() {
            return this.kt;
        }
        set ku(a) {
            let b = this.kt;
            this.kt = a;
            if (this.kt != b) {
                this.jm("Formatter", DateTimeCellModel.k6, b, this.kt);
            }
        }
        get ky() {
            return this.kx;
        }
        set ky(a) {
            let b = this.kx;
            this.kx = a;
            if (this.kx != b) {
                this.jm("IsOffsetValue", DateTimeCellModel.k7, b, this.kx);
            }
        }
        jp(a, b, c) {
            switch (a) {
                case "FormatStringOverride":
                case "FormatSpecifiers":
                    if (this.lh != null) {
                        this.ks = new BindingFormatter();
                        this.ks.j = this.lh;
                        this.ks.d = this.kr;
                    }
                    else {
                        this.ks = null;
                    }
                    break;
            }
            super.jp(a, b, c);
        }
        ju(a, b) {
            super.ju(a, b);
            if (a == "DateTimeFormat") {
                this.kw = EnumUtil.getEnumValue(DateTimeFormats_$type, b);
            }
            if (a == "DateTimeValue") {
                this.k0 = b;
            }
            if (a == "IsOffsetValue") {
                this.ky = b;
            }
            if (a == "FormatOverride") {
                this.la = b;
            }
        }
        gn(a) {
            if (a == "DateTimeFormat") {
                return enumGetBox(DateTimeFormats_$type, this.kw);
            }
            if (a == "DateTimeValue") {
                return this.k0;
            }
            if (a == "IsOffsetValue") {
                return this.ky;
            }
            if (a == "FormatOverride") {
                return this.la;
            }
            return super.gn(a);
        }
        b(a) {
            if (a == null) {
                a = new DateTimeCellModelExport();
            }
            a = super.b(a);
            let b = a;
            b.af = this.k0;
            b.ag = this.kw;
            b.ae = this.ky;
            return b;
        }
    }
    DateTimeCellModel.$t = /*@__PURE__*/ markType(DateTimeCellModel, 'DateTimeCellModel', CellModel.$);
    DateTimeCellModel.k2 = /*@__PURE__*/ CellModel.ez("DateTimeValue");
    DateTimeCellModel.k5 = /*@__PURE__*/ CellModel.ez("FormatStringOverride");
    DateTimeCellModel.k4 = /*@__PURE__*/ CellModel.ez("FormatSpecifiers");
    DateTimeCellModel.k3 = /*@__PURE__*/ CellModel.ez("FormatOverride");
    DateTimeCellModel.k1 = /*@__PURE__*/ CellModel.ez("DateTimeFormat");
    DateTimeCellModel.k6 = /*@__PURE__*/ CellModel.ez("Formatter");
    DateTimeCellModel.k7 = /*@__PURE__*/ CellModel.ez("IsOffsetValue");
    return DateTimeCellModel;
})();
/**
 * @hidden
 */
export let EditorCellModel = /*@__PURE__*/ (() => {
    class EditorCellModel extends CellModel {
        constructor() {
            super();
            this.k1 = 0;
            this.k0 = 0;
            this.ky = true;
            this.ku = null;
            this.ks = 0;
            this.lg = null;
            this.lc = null;
            this.kw = 0;
            this.lb = null;
            this.lf = null;
            this.kq = null;
            this.i0 = "editorCell";
        }
        get kz() {
            return this.ky;
        }
        set kz(a) {
            let b = this.ky;
            this.ky = a;
            if (b != this.ky) {
                this.jm("IsHidden", EditorCellModel.la, b, this.ky);
            }
        }
        get kv() {
            return this.ku;
        }
        set kv(a) {
            let b = this.ku;
            this.ku = a;
            if (b != this.ku) {
                this.jm("EditTarget", EditorCellModel.k7, b, this.ku);
            }
        }
        get kt() {
            return this.ks;
        }
        set kt(a) {
            let b = this.ks;
            this.ks = a;
            if (b != this.ks) {
                this.jm("DataType", EditorCellModel.k2, enumGetBox(DataSourceSchemaPropertyType_$type, b), enumGetBox(DataSourceSchemaPropertyType_$type, this.ks));
            }
        }
        get lp() {
            return this.lg;
        }
        set lp(a) {
            let b = this.lg;
            this.lg = a;
            if (b != this.lg) {
                this.jm("ErrorMessage", EditorCellModel.k9, b, this.lg);
            }
        }
        get le() {
            return this.lc;
        }
        set le(a) {
            let b = this.lc;
            this.lc = a;
            if (b != this.lc) {
                this.jm("EditValue", EditorCellModel.k8, b, this.lc);
            }
        }
        get kx() {
            return this.kw;
        }
        set kx(a) {
            let b = this.kw;
            this.kw = a;
            if (b != this.kw) {
                this.jm("EditorType", EditorCellModel.k5, enumGetBox(EditorType_$type, b), enumGetBox(EditorType_$type, this.kw));
            }
        }
        get ld() {
            return this.lb;
        }
        set ld(a) {
            let b = this.lb;
            this.lb = a;
            if (b != this.lb) {
                this.jm("EditorItemsSource", EditorCellModel.k3, b, this.lb);
            }
        }
        get lj() {
            return this.lf;
        }
        set lj(a) {
            let b = this.lf;
            this.lf = a;
            if (b != this.lf) {
                this.jm("EditorTextField", EditorCellModel.k4, b, this.lf);
            }
        }
        get kr() {
            return this.kq;
        }
        set kr(a) {
            let b = this.kq;
            this.kq = a;
            if (b != this.kq) {
                this.jm("EditorValueField", EditorCellModel.k6, b, this.kq);
            }
        }
        jp(a, b, c) {
            super.jp(a, b, c);
            switch (a) {
                case "IsHidden":
                    this.a5 = true;
                    break;
                case "EditTarget":
                    this.ls(b);
                    this.lu();
                    this.as = true;
                    break;
                case "OriginalValue":
                case "DataType":
                    this.as = true;
                    break;
                case "ErrorMessage":
                    this.lu();
                    this.as = true;
                    break;
            }
        }
        ju(a, b) {
            super.ju(a, b);
            if (a == "IsHidden") {
                this.kz = b;
            }
            else if (a == "DataType") {
                this.kt = EnumUtil.getEnumValue(DataSourceSchemaPropertyType_$type, b);
            }
            else if (a == "ErrorMessage") {
                this.lp = b;
            }
            else if (a == "EditValue") {
                this.le = b;
            }
        }
        gn(a) {
            switch (a) {
                case "IsHidden": return this.kz;
                case "DataType": return enumGetBox(DataSourceSchemaPropertyType_$type, this.kt);
                case "ErrorMessage": return this.lp;
                case "EditValue": return this.le;
            }
            return super.gn(a);
        }
        b(a) {
            if (a == null) {
                a = new EditorCellModelExport();
            }
            let b = super.b(a);
            b.af = this.kz;
            b.ae = this.kt;
            b.ag = this.le != null ? this.le.toString() : null;
            b.ah = this.lp;
            return b;
        }
        ls(a) {
            if (a != null) {
                let b = a;
                b.propertyChanged = delegateRemove(b.propertyChanged, runOn(this, this.lt));
            }
            if (this.kv != null) {
                this.cc = this.kv.cc;
                this.cd = this.kv.cd;
                this.gf = this.kv.gf;
                this.e0 = this.kv.e0;
                this.k0 = this.kv.k.az;
                this.k1 = this.kv.k.w;
                this.go = this.kv.go;
                this.lp = this.kv.hl;
                this.fo = this.kv.d1;
                this.fs = this.kv.d5;
                this.fq = this.kv.d3;
                this.fm = this.kv.dz;
                this.ka = this.kv.ka;
                this.dd = this.kv.dd + 1;
                this.di = this.kv.di + 1;
                this.dg = this.kv.dg + 1;
                this.db = this.kv.db + 1;
                this.by = 1;
                this.af = this.kv.af;
                let c = this.kv;
                c.propertyChanged = delegateCombine(c.propertyChanged, runOn(this, this.lt));
            }
            else {
                this.lp = null;
            }
        }
        lu() {
            if (this.kv != null) {
                if (this.lp != null) {
                    this.ka = GridStyleRepository.bg;
                }
                else {
                    this.ka = this.kv.ka;
                }
            }
        }
        lt(a, b) {
            switch (b.propertyName) {
                case "X":
                    this.cc = this.kv.cc;
                    break;
                case "Y":
                    this.cd = this.kv.cd;
                    break;
                case "Width":
                    this.gf = this.kv.gf;
                    break;
                case "Height":
                    this.e0 = this.kv.e0;
                    break;
                case "Path":
                    if (this.k1 != this.kv.k.w || this.k0 != this.kv.k.az) {
                        this.kv = null;
                    }
                    break;
                case "OriginalValue":
                    this.le = this.kv.go;
                    break;
            }
        }
    }
    EditorCellModel.$t = /*@__PURE__*/ markType(EditorCellModel, 'EditorCellModel', CellModel.$);
    EditorCellModel.la = /*@__PURE__*/ CellModel.ez("IsHidden");
    EditorCellModel.k7 = /*@__PURE__*/ CellModel.ez("EditTarget");
    EditorCellModel.k2 = /*@__PURE__*/ CellModel.ez("DataType");
    EditorCellModel.k9 = /*@__PURE__*/ CellModel.ez("ErrorMessage");
    EditorCellModel.k8 = /*@__PURE__*/ CellModel.ez("EditValue");
    EditorCellModel.k5 = /*@__PURE__*/ CellModel.ez("EditorType");
    EditorCellModel.k3 = /*@__PURE__*/ CellModel.ez("EditorItemsSource");
    EditorCellModel.k4 = /*@__PURE__*/ CellModel.ez("EditorTextField");
    EditorCellModel.k6 = /*@__PURE__*/ CellModel.ez("EditorValueField");
    return EditorCellModel;
})();
/**
 * @hidden
 */
export let EditorRowCellModel = /*@__PURE__*/ (() => {
    class EditorRowCellModel extends CellModel {
        constructor() {
            super();
            this.ks = 0;
            this.kq = null;
            this.i0 = "editorRowCell";
            this.a0 = false;
        }
        get kr() {
            return this.kq;
        }
        set kr(a) {
            let b = this.kq;
            this.kq = a;
            if (b != this.kq) {
                this.jm("EditTarget", EditorRowCellModel.kt, b, this.kq);
            }
        }
        jp(a, b, c) {
            super.jp(a, b, c);
            switch (a) {
                case "EditTarget":
                    this.kv(b);
                    break;
            }
        }
        kv(a) {
            if (a != null) {
                let b = a;
                b.propertyChanged = delegateRemove(b.propertyChanged, runOn(this, this.kw));
            }
            if (this.kr != null) {
                this.cd = this.kr.cd;
                this.e0 = this.kr.e0;
                this.cc = this.o.model.b0;
                this.gf = this.o.model.absoluteWidth;
                this.ks = this.kr.k.w;
                let c = this.kr;
                c.propertyChanged = delegateCombine(c.propertyChanged, runOn(this, this.kw));
            }
        }
        kw(a, b) {
            switch (b.propertyName) {
                case "Y":
                    this.cd = this.kr.cd;
                    break;
                case "Height":
                    this.e0 = this.kr.e0;
                    break;
                case "Path":
                    if (this.ks != this.kr.k.w) {
                        this.kr = null;
                    }
                    break;
            }
        }
    }
    EditorRowCellModel.$t = /*@__PURE__*/ markType(EditorRowCellModel, 'EditorRowCellModel', CellModel.$);
    EditorRowCellModel.kt = /*@__PURE__*/ CellModel.ez("EditTarget");
    return EditorRowCellModel;
})();
/**
 * @hidden
 */
export let SummaryCellModel = /*@__PURE__*/ (() => {
    class SummaryCellModel extends CellModel {
        constructor() {
            super();
            this.kw = null;
            this.kx = null;
            this.k4 = null;
            this.kq = null;
            this.a0 = true;
        }
        get ky() {
            return this.kw;
        }
        set ky(a) {
            let b = this.kw;
            this.kw = a;
            if (this.kw != b) {
                this.jm("ResolvedSummaryLabel", SummaryCellModel.ks, b, this.kw);
            }
        }
        get k0() {
            return this.kx;
        }
        set k0(a) {
            let b = this.kx;
            this.kx = a;
            if (this.kx != b) {
                this.jm("ResolvedSummaryValue", SummaryCellModel.kt, b, this.kx);
            }
        }
        get k5() {
            return this.k4;
        }
        set k5(a) {
            let b = this.k4;
            this.k4 = a;
            if (this.k4 != b) {
                this.jm("SummaryLabelTextColor", SummaryCellModel.kv, b, this.k4);
            }
        }
        get kr() {
            return this.kq;
        }
        set kr(a) {
            let b = this.kq;
            this.kq = a;
            if (this.kq != b) {
                this.jm("SummaryLabelFontInfo", SummaryCellModel.ku, b, this.kq);
            }
        }
        b(a) {
            if (a == null) {
                a = new SummaryCellModelExport();
            }
            a = super.b(a);
            let b = a;
            b.ai = this.ky;
            b.ao = this.k0;
            b.ae = AppearanceHelper.a(this.k5);
            b.af = AppearanceHelper.a(this.kp);
            if (this.kr != null) {
                let c = this.kr;
                if (this.o != null && c.n == null) {
                    let d = this.o.externalGrid.renderer;
                    let e = FontUtil.getFontInfoFromString(d, c.fontString);
                    c.n = e.n;
                    c.d = e.d;
                    c.o = e.o;
                    c.q = e.q;
                    c.r = e.r;
                    c.s = e.s;
                }
                if (c.n != null) {
                    b.aj = c.n;
                }
                if (!isNaN_(c.d)) {
                    b.ag = c.d;
                }
                if (c.s != null) {
                    b.an = c.s;
                }
                if (c.q != null) {
                    b.al = c.q;
                }
                if (c.o != null) {
                    b.ak = c.q;
                }
            }
            if (this.af != null) {
                let f = this.af;
                if (this.o != null && f.n == null) {
                    let g = this.o.externalGrid.renderer;
                    let h = FontUtil.getFontInfoFromString(g, f.fontString);
                    f.n = h.n;
                    f.d = h.d;
                    f.o = h.o;
                    f.q = h.q;
                    f.r = h.r;
                    f.s = h.s;
                }
                if (f.n != null) {
                    b.ap = f.n;
                }
                if (!isNaN_(f.d)) {
                    b.ah = f.d;
                }
                if (f.s != null) {
                    b.at = f.s;
                }
                if (f.q != null) {
                    b.ar = f.q;
                }
                if (f.o != null) {
                    b.aq = f.q;
                }
            }
            return b;
        }
        a8(a) {
            return a == 4 || a == 5;
        }
    }
    SummaryCellModel.$t = /*@__PURE__*/ markType(SummaryCellModel, 'SummaryCellModel', CellModel.$);
    SummaryCellModel.ks = /*@__PURE__*/ CellModel.ez("ResolvedSummaryLabel");
    SummaryCellModel.kt = /*@__PURE__*/ CellModel.ez("ResolvedSummaryValue");
    SummaryCellModel.kv = /*@__PURE__*/ CellModel.ez("SummaryLabelTextColor");
    SummaryCellModel.ku = /*@__PURE__*/ CellModel.ez("SummaryLabelFontInfo");
    return SummaryCellModel;
})();
/**
 * @hidden
 */
export let VerticalSeparatorCellModel = /*@__PURE__*/ (() => {
    class VerticalSeparatorCellModel extends CellModel {
        constructor() {
            super();
            this.kq = true;
        }
        get kr() {
            return this.kq;
        }
        set kr(a) {
            let b = this.kq;
            this.kq = a;
            if (b != this.kq) {
                this.jm("IsHitTestVisible", VerticalSeparatorCellModel.ks, b, this.kq);
            }
        }
    }
    VerticalSeparatorCellModel.$t = /*@__PURE__*/ markType(VerticalSeparatorCellModel, 'VerticalSeparatorCellModel', CellModel.$);
    VerticalSeparatorCellModel.ks = /*@__PURE__*/ CellModel.ez("IsHitTestVisible");
    return VerticalSeparatorCellModel;
})();
/**
 * @hidden
 */
export let ImageCellModel = /*@__PURE__*/ (() => {
    class ImageCellModel extends CellModel {
        constructor() {
            super();
            this.kx = "";
            this.ks = 0;
            this.kq = 0;
            this.f = 3;
            this.a0 = true;
        }
        get ky() {
            return this.kx;
        }
        set ky(a) {
            let b = this.kx;
            this.kx = a;
            if (this.kx != b) {
                this.jm("ImagePath", ImageCellModel.ku, b, this.kx);
            }
        }
        get kt() {
            return this.ks;
        }
        set kt(a) {
            let b = this.ks;
            this.ks = a;
            if (this.ks != b) {
                this.jm("ImageStretchOption", ImageCellModel.kw, enumGetBox(ImageStretchOptions_$type, b), enumGetBox(ImageStretchOptions_$type, this.ks));
            }
        }
        get kr() {
            return this.kq;
        }
        set kr(a) {
            let b = this.kq;
            this.kq = a;
            if (this.kq != b) {
                this.jm("ImageResourceType", ImageCellModel.kv, enumGetBox(ImageResourceType_$type, b), enumGetBox(ImageResourceType_$type, this.kq));
            }
        }
        b(a) {
            if (a == null) {
                a = new ImageCellModelExport();
            }
            a = super.b(a);
            let b = a;
            b.ae = this.ky;
            return b;
        }
        ju(a, b) {
            super.ju(a, b);
            if (a == "ImageStretchOption") {
                this.kt = EnumUtil.getEnumValue(ImageStretchOptions_$type, b);
            }
            if (a == "ImageResourceType") {
                this.kr = EnumUtil.getEnumValue(ImageResourceType_$type, b);
            }
            if (a == "ImagePath") {
                this.ky = b;
            }
        }
        gn(a) {
            if (a == "ImageStretchOption") {
                return enumGetBox(ImageStretchOptions_$type, this.kt);
            }
            if (a == "ImageResourceType") {
                return enumGetBox(ImageResourceType_$type, this.kr);
            }
            if (a == "ImagePath") {
                return this.ky;
            }
            return super.gn(a);
        }
    }
    ImageCellModel.$t = /*@__PURE__*/ markType(ImageCellModel, 'ImageCellModel', CellModel.$);
    ImageCellModel.ku = /*@__PURE__*/ CellModel.ez("ImagePath");
    ImageCellModel.kw = /*@__PURE__*/ CellModel.ez("ImageStretchOption");
    ImageCellModel.kv = /*@__PURE__*/ CellModel.ez("ImageResourceType");
    return ImageCellModel;
})();
/**
 * @hidden
 */
export let NumericCellModel = /*@__PURE__*/ (() => {
    class NumericCellModel extends CellModel {
        constructor() {
            super();
            this.ky = NaN;
            this.kt = false;
            this.lm = null;
            this.kq = null;
            this.ks = null;
            this.lk = null;
            this._formatOverride = null;
            this.ln = null;
            this.lp = null;
            this.lo = null;
            this.lq = "";
            this.k0 = 5;
            this.k1 = 0;
            this.k2 = -1;
            this.ku = false;
            this.f = 2;
            this.a0 = true;
        }
        get kz() {
            return this.ky;
        }
        set kz(a) {
            let b = this.ky;
            this.ky = a;
            if (this.ky != b) {
                this.jm("NumericValue", NumericCellModel.lf, b, this.ky);
            }
        }
        get kv() {
            return this.kt;
        }
        set kv(a) {
            let b = this.kt;
            this.kt = a;
            if (this.kt != b) {
                this.jm("HasDecimalValue", NumericCellModel.k6, b, this.kt);
            }
        }
        get lt() {
            return this.lm;
        }
        set lt(a) {
            let b = this.lm;
            this.lm = a;
            if (this.lm != b) {
                this.jm("FormatStringOverride", NumericCellModel.k5, b, this.lm);
            }
        }
        get kr() {
            return this.kq;
        }
        set kr(a) {
            let b = this.kq;
            this.kq = a;
            if (this.kq != b) {
                this.jm("FormatSpecifiers", NumericCellModel.k4, b, this.kq);
            }
        }
        get ll() {
            return this._formatOverride;
        }
        set ll(a) {
            let b = this._formatOverride;
            this._formatOverride = a;
            if (this._formatOverride != b) {
                this.jm("FormatOverride", NumericCellModel.k3, b, this._formatOverride);
            }
        }
        get lz() {
            return this.ln;
        }
        set lz(a) {
            let b = this.ln;
            this.ln = a;
            if (this.ln != b) {
                this.jm("NegativePrefix", NumericCellModel.ld, b, this.ln);
            }
        }
        get l4() {
            return this.lp;
        }
        set l4(a) {
            let b = this.lp;
            this.lp = a;
            if (this.lp != b) {
                this.jm("PositivePrefix", NumericCellModel.lg, b, this.lp);
            }
        }
        get l1() {
            return this.lo;
        }
        set l1(a) {
            let b = this.lo;
            this.lo = a;
            if (this.lo != b) {
                this.jm("NegativeSuffix", NumericCellModel.le, b, this.lo);
            }
        }
        get l6() {
            return this.lq;
        }
        set l6(a) {
            let b = this.lq;
            this.lq = a;
            if (this.lq != b) {
                this.jm("PositiveSuffix", NumericCellModel.lh, b, this.lq);
            }
        }
        get k7() {
            return this.k0;
        }
        set k7(a) {
            let b = this.k0;
            this.k0 = a;
            if (this.k0 != b) {
                this.jm("MaxFractionDigits", NumericCellModel.k8, b, this.k0);
            }
        }
        get k9() {
            return this.k1;
        }
        set k9(a) {
            let b = this.k1;
            this.k1 = a;
            if (this.k1 != b) {
                this.jm("MinFractionDigits", NumericCellModel.la, b, this.k1);
            }
        }
        get lb() {
            return this.k2;
        }
        set lb(a) {
            let b = this.k2;
            this.k2 = a;
            if (this.k2 != b) {
                this.jm("MinIntegerDigits", NumericCellModel.lc, b, this.k2);
            }
        }
        get kx() {
            return this.ku;
        }
        set kx(a) {
            let b = this.ku;
            this.ku = a;
            if (this.ku != b) {
                this.jm("ShowGroupingSeparator", NumericCellModel.li, b, this.ku);
            }
        }
        kw() {
            if (this.ax(NumericCellModel.la) || this.ax(NumericCellModel.k8) || this.ax(NumericCellModel.lc) || this.ax(NumericCellModel.lh) || this.ax(NumericCellModel.le) || this.ax(NumericCellModel.lg) || this.ax(NumericCellModel.ld) || this.ax(NumericCellModel.k3) || this.ax(NumericCellModel.li)) {
                return true;
            }
            return false;
        }
        jp(a, b, c) {
            switch (a) {
                case "FormatStringOverride":
                case "FormatSpecifiers":
                    if (this.lt != null) {
                        this.ks = new BindingFormatter();
                        this.ks.j = this.lt;
                        this.ks.d = this.kr;
                    }
                    else {
                        this.ks = null;
                    }
                    break;
            }
            super.jp(a, b, c);
        }
        ju(a, b) {
            super.ju(a, b);
            if (a == "NumericValue") {
                this.kz = b;
            }
            if (a == "NegativePrefix") {
                this.lz = b;
            }
            if (a == "PositivePrefix") {
                this.l4 = b;
            }
            if (a == "NegativeSuffix") {
                this.l1 = b;
            }
            if (a == "PositiveSuffix") {
                this.l6 = b;
            }
            if (a == "MinFractionDigits") {
                this.k9 = typeGetValue(b);
            }
            if (a == "MaxFractionDigits") {
                this.k7 = typeGetValue(b);
            }
            if (a == "MinIntegerDigits") {
                this.lb = typeGetValue(b);
            }
            if (a == "ShowGroupingSeparator") {
                this.kx = b;
            }
            if (a == "FormatOverride") {
                this.ll = b;
            }
        }
        gn(a) {
            if (a == "NumericValue") {
                return this.kz;
            }
            if (a == "NegativePrefix") {
                return this.lz;
            }
            if (a == "PositivePrefix") {
                return this.l4;
            }
            if (a == "NegativeSuffix") {
                return this.lz;
            }
            if (a == "PositiveSuffix") {
                return this.l6;
            }
            if (a == "MinFractionDigits") {
                return this.k9;
            }
            if (a == "MaxFractionDigits") {
                return this.k7;
            }
            if (a == "MinIntegerDigits") {
                return this.lb;
            }
            if (a == "ShowGroupingSeparator") {
                return this.kx;
            }
            if (a == "FormatOverride") {
                return this.ll;
            }
            return super.gn(a);
        }
        b(a) {
            if (a == null) {
                a = new NumericCellModelExport();
            }
            a = super.b(a);
            let b = a;
            b.ae = this.kz;
            return b;
        }
    }
    NumericCellModel.$t = /*@__PURE__*/ markType(NumericCellModel, 'NumericCellModel', CellModel.$);
    NumericCellModel.lf = /*@__PURE__*/ CellModel.ez("NumericValue");
    NumericCellModel.k6 = /*@__PURE__*/ CellModel.ez("HasDecimalValue");
    NumericCellModel.k5 = /*@__PURE__*/ CellModel.ez("FormatStringOverride");
    NumericCellModel.k4 = /*@__PURE__*/ CellModel.ez("FormatSpecifiers");
    NumericCellModel.k3 = /*@__PURE__*/ CellModel.ez("FormatOverride");
    NumericCellModel.ld = /*@__PURE__*/ CellModel.ez("NegativePrefix");
    NumericCellModel.lg = /*@__PURE__*/ CellModel.ez("PositivePrefix");
    NumericCellModel.le = /*@__PURE__*/ CellModel.ez("NegativeSuffix");
    NumericCellModel.lh = /*@__PURE__*/ CellModel.ez("PositiveSuffix");
    NumericCellModel.k8 = /*@__PURE__*/ CellModel.ez("MaxFractionDigits");
    NumericCellModel.la = /*@__PURE__*/ CellModel.ez("MinFractionDigits");
    NumericCellModel.lc = /*@__PURE__*/ CellModel.ez("MinIntegerDigits");
    NumericCellModel.li = /*@__PURE__*/ CellModel.ez("ShowGroupingSeparator");
    return NumericCellModel;
})();
/**
 * @hidden
 */
export let RowSeparatorModel = /*@__PURE__*/ (() => {
    class RowSeparatorModel extends CellModel {
        constructor() {
            super();
        }
        b(a) {
            if (a == null) {
                a = new RowSeparatorModelExport();
            }
            a = super.b(a);
            return a;
        }
    }
    RowSeparatorModel.$t = /*@__PURE__*/ markType(RowSeparatorModel, 'RowSeparatorModel', CellModel.$);
    return RowSeparatorModel;
})();
/**
 * @hidden
 */
export let SectionHeaderCellModel = /*@__PURE__*/ (() => {
    class SectionHeaderCellModel extends CellModel {
        constructor() {
            super();
            this.kq = null;
            this.kr = null;
            this.k2 = null;
            this.k1 = null;
            this.ku = 4;
            this.a0 = true;
        }
        get ks() {
            return this.kq;
        }
        set ks(a) {
            let b = this.kq;
            this.kq = a;
            if (this.kq != b) {
                this.jm("Groups", SectionHeaderCellModel.kw, b, this.kq);
            }
        }
        get kt() {
            return this.kr;
        }
        set kt(a) {
            let b = this.kr;
            this.kr = a;
            if (this.kr != b) {
                this.jm("Summaries", SectionHeaderCellModel.kz, b, this.kr);
            }
        }
        get k6() {
            return this.k2;
        }
        set k6(a) {
            let b = this.k2;
            this.k2 = a;
            if (this.k2 != b) {
                this.jm("ResolvedText", SectionHeaderCellModel.ky, b, this.k2);
            }
        }
        get k4() {
            return this.k1;
        }
        set k4(a) {
            let b = this.k1;
            this.k1 = a;
            if (this.k1 != b) {
                this.jm("ResolvedSummaryText", SectionHeaderCellModel.kx, b, this.k1);
            }
        }
        get kv() {
            return this.ku;
        }
        set kv(a) {
            let b = this.ku;
            this.ku = a;
            if (this.ku != b) {
                this.jm("SummaryDisplayMode", SectionHeaderCellModel.k0, enumGetBox(GroupSummaryDisplayMode_$type, b), enumGetBox(GroupSummaryDisplayMode_$type, this.ku));
            }
        }
        ju(a, b) {
            super.ju(a, b);
            if (a == "Groups") {
                this.ks = b;
            }
            else if (a == "SummaryDisplayMode") {
                this.kv = EnumUtil.getEnumValue(GroupSummaryDisplayMode_$type, b);
            }
        }
        gn(a) {
            if (a == "Groups") {
                return this.ks;
            }
            else if (a == "IsCollapsable") {
                return this.ar;
            }
            else if (a == "SummaryDisplayMode") {
                return enumGetBox(GroupSummaryDisplayMode_$type, this.kv);
            }
            return super.gn(a);
        }
        b(a) {
            if (a == null) {
                a = new SectionHeaderCellModelExport();
            }
            a = super.b(a);
            let b = a;
            b.af = new Array(this.ks.length);
            b.ag = new Array(this.ks.length);
            b.ae = new Array(this.ks.length);
            b.al = this.k6;
            b.ai = new Array(this.kt.length);
            b.ak = new Array(this.kt.length);
            b.aj = new Array(this.kt.length);
            b.ah = new Array(this.kt.length);
            b.am = this.k4;
            for (let c = 0; c < this.ks.length; c++) {
                b.af[c] = this.ks[c].c;
                b.ag[c] = this.ks[c].a;
                b.ae[c] = this.ks[c].b;
            }
            for (let d = 0; d < this.kt.length; d++) {
                b.ai[d] = this.kt[d].e;
                b.ak[d] = this.kt[d].b;
                b.aj[d] = this.kt[d].a;
                b.ah[d] = this.kt[d].c;
            }
            return b;
        }
        a8(a) {
            return a == 1;
        }
    }
    SectionHeaderCellModel.$t = /*@__PURE__*/ markType(SectionHeaderCellModel, 'SectionHeaderCellModel', CellModel.$);
    SectionHeaderCellModel.kw = /*@__PURE__*/ CellModel.ez("Groups");
    SectionHeaderCellModel.kz = /*@__PURE__*/ CellModel.ez("Summaries");
    SectionHeaderCellModel.ky = /*@__PURE__*/ CellModel.ez("ResolvedText");
    SectionHeaderCellModel.kx = /*@__PURE__*/ CellModel.ez("ResolvedSummaryText");
    SectionHeaderCellModel.k0 = /*@__PURE__*/ CellModel.ez("SummaryDisplayMode");
    return SectionHeaderCellModel;
})();
/**
 * @hidden
 */
export let TemplateCellModel = /*@__PURE__*/ (() => {
    class TemplateCellModel extends CellModel {
        constructor() {
            super();
            this.kr = null;
            this.a0 = true;
        }
        get ks() {
            return this.kr;
        }
        set ks(a) {
            let b = this.kr;
            this.kr = a;
            if (this.kr != b) {
                this.jm("Value", TemplateCellModel.kq, b, this.kr);
            }
        }
        ju(a, b) {
            super.ju(a, b);
            if (a == "Value") {
                this.ks = b;
            }
        }
        gn(a) {
            if (a == "Value") {
                return this.ks;
            }
            return super.gn(a);
        }
        b(a) {
            if (a == null) {
                a = new TemplateCellModelExport();
            }
            a = super.b(a);
            let b = a;
            b.ae = this.ks;
            return b;
        }
    }
    TemplateCellModel.$t = /*@__PURE__*/ markType(TemplateCellModel, 'TemplateCellModel', CellModel.$);
    TemplateCellModel.kq = /*@__PURE__*/ CellModel.ez("Value");
    return TemplateCellModel;
})();
/**
 * @hidden
 */
export let TextCellModel = /*@__PURE__*/ (() => {
    class TextCellModel extends CellModel {
        constructor() {
            super();
            this.kr = "";
            this.a0 = true;
        }
        get ks() {
            return this.kr;
        }
        set ks(a) {
            let b = this.kr;
            this.kr = a;
            if (this.kr != b) {
                this.jm("TextValue", TextCellModel.kq, b, this.kr);
            }
        }
        ju(a, b) {
            super.ju(a, b);
            if (a == "TextValue") {
                this.ks = b;
            }
        }
        gn(a) {
            if (a == "TextValue") {
                return this.ks;
            }
            return super.gn(a);
        }
        b(a) {
            if (a == null) {
                a = new TextCellModelExport();
            }
            a = super.b(a);
            let b = a;
            b.af = this.ks;
            return b;
        }
    }
    TextCellModel.$t = /*@__PURE__*/ markType(TextCellModel, 'TextCellModel', CellModel.$);
    TextCellModel.kq = /*@__PURE__*/ CellModel.ez("TextValue");
    return TextCellModel;
})();
/**
 * @hidden
 */
export let TextHeaderCellModel = /*@__PURE__*/ (() => {
    class TextHeaderCellModel extends TextCellModel {
        constructor() {
            super();
            this.k0 = false;
            this.ky = 0;
            this.ku = 0;
            this.lc = null;
            this.kw = 0;
        }
        get k1() {
            return this.k0;
        }
        set k1(a) {
            let b = this.k0;
            this.k0 = a;
            if (this.k0 != b) {
                this.jm("IsColumnOptionsEnabled", TextHeaderCellModel.k5, b, this.k0);
            }
        }
        get kz() {
            return this.ky;
        }
        set kz(a) {
            let b = this.ky;
            this.ky = a;
            if (this.ky != b) {
                this.jm("SortIndicatorStyle", TextHeaderCellModel.k6, enumGetBox(SortIndicatorStyle_$type, b), enumGetBox(SortIndicatorStyle_$type, this.ky));
            }
        }
        get kv() {
            return this.ku;
        }
        set kv(a) {
            let b = this.ku;
            this.ku = a;
            if (this.ku != b) {
                this.jm("ColumnOptionsIconAlignment", TextHeaderCellModel.k2, enumGetBox(ColumnOptionsIconAlignment_$type, b), enumGetBox(ColumnOptionsIconAlignment_$type, this.ku));
            }
        }
        get ld() {
            return this.lc;
        }
        set ld(a) {
            let b = this.lc;
            this.lc = a;
            if (this.lc != b) {
                this.jm("ColumnOptionsIconColor", TextHeaderCellModel.k4, b, this.lc);
            }
        }
        get kx() {
            return this.kw;
        }
        set kx(a) {
            let b = this.kw;
            this.kw = a;
            if (this.kw != b) {
                this.jm("ColumnOptionsIconBehavior", TextHeaderCellModel.k3, enumGetBox(ColumnOptionsIconBehavior_$type, b), enumGetBox(ColumnOptionsIconBehavior_$type, this.kw));
            }
        }
        ju(a, b) {
            super.ju(a, b);
            if (a == "IsColumnOptionsEnabled") {
                this.k1 = b;
            }
            else if (a == "SortIndicatorStyle") {
                this.kz = EnumUtil.getEnumValue(SortIndicatorStyle_$type, b);
            }
            else if (a == "ColumnOptionsIconAlignment") {
                this.kv = EnumUtil.getEnumValue(ColumnOptionsIconAlignment_$type, b);
            }
            else if (a == "ColumnOptionsIconColor") {
                this.ld = b;
            }
            else if (a == "ColumnOptionsIconBehavior") {
                this.kx = EnumUtil.getEnumValue(ColumnOptionsIconBehavior_$type, b);
            }
        }
        gn(a) {
            if (a == "IsColumnOptionsEnabled") {
                return this.k1;
            }
            if (a == "SortIndicatorStyle") {
                return enumGetBox(SortIndicatorStyle_$type, this.kz);
            }
            if (a == "ColumnOptionsIconAlignment") {
                return enumGetBox(ColumnOptionsIconAlignment_$type, this.kv);
            }
            if (a == "ColumnOptionsIconColor") {
                return this.ld;
            }
            if (a == "ColumnOptionsIconBehavior") {
                return enumGetBox(ColumnOptionsIconBehavior_$type, this.kx);
            }
            return super.gn(a);
        }
        b(a) {
            if (a == null) {
                a = new TextHeaderCellModelExport();
            }
            a = super.b(a);
            let b = a;
            return b;
        }
    }
    TextHeaderCellModel.$t = /*@__PURE__*/ markType(TextHeaderCellModel, 'TextHeaderCellModel', TextCellModel.$);
    TextHeaderCellModel.k5 = /*@__PURE__*/ CellModel.ez("IsColumnOptionsEnabled");
    TextHeaderCellModel.k6 = /*@__PURE__*/ CellModel.ez("SortIndicatorStyle");
    TextHeaderCellModel.k2 = /*@__PURE__*/ CellModel.ez("ColumnOptionsIconAlignment");
    TextHeaderCellModel.k4 = /*@__PURE__*/ CellModel.ez("ColumnOptionsIconColor");
    TextHeaderCellModel.k3 = /*@__PURE__*/ CellModel.ez("ColumnOptionsIconBehavior");
    return TextHeaderCellModel;
})();
/**
 * @hidden
 */
export let ICellPresenter_$type = /*@__PURE__*/ new Type(null, 'ICellPresenter');
/**
 * @hidden
 */
export let DataSourceNotificationBridge = /*@__PURE__*/ (() => {
    class DataSourceNotificationBridge extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.a = a;
        }
        rangeActualized(a, b) {
            this.a.rk(a, b);
        }
        notifySetItem(a, b, c) {
            this.a.r9(a, b, c);
        }
        notifyClearItems() {
            this.a.q6();
        }
        notifyInsertItem(a, b) {
            this.a.rv(a, b);
        }
        notifyRemoveItem(a, b) {
            this.a.r0(a, b);
        }
    }
    DataSourceNotificationBridge.$t = /*@__PURE__*/ markType(DataSourceNotificationBridge, 'DataSourceNotificationBridge', Base.$, [IDataSourceUpdateNotifier_$type]);
    return DataSourceNotificationBridge;
})();
/**
 * @hidden
 */
export let ColumnController = /*@__PURE__*/ (() => {
    class ColumnController extends Base {
        constructor(a, b, c) {
            super();
            this.i = null;
            this.n = false;
            this.c = null;
            this.a = null;
            this.u = new HashSet$1(String_$type, 0);
            this.m = false;
            this.k = null;
            this.l = null;
            this.n = b;
            this.i = a;
            this.l = c;
        }
        get p() {
            return this.n;
        }
        set p(a) {
            let b = this.n;
            this.n = a;
            if (b != this.n) {
                this.m = false;
            }
            this.t();
        }
        get d() {
            return this.c;
        }
        set d(a) {
            let b = this.c;
            this.c = a;
            if (b != this.c) {
                this.m = false;
            }
            this.t();
        }
        get b() {
            return this.a;
        }
        set b(a) {
            let b = this.a;
            this.a = a;
            if (b != this.a) {
                this.m = false;
                this.u.clear();
                for (let c = 0; c < this.a.length; c++) {
                    this.u.add_1(this.a[c]);
                }
            }
            this.t();
        }
        get j() {
            return this.i;
        }
        get o() {
            return this.m;
        }
        set o(a) {
            this.m = a;
        }
        t() {
            if (this.m) {
                return false;
            }
            if (this.c == null) {
                return false;
            }
            let a = new Dictionary$2(String_$type, Boolean_$type, 0);
            for (let b = 0; b < this.i.count; b++) {
                let c = this.i._inner[b];
                if (!c.f8) {
                    a.item(c.hy, true);
                }
            }
            let d = false;
            for (let e = this.i.count - 1; e >= 0; e--) {
                if (this.i._inner[e].f8) {
                    this.k.removeExternalColumn(this.i._inner[e].externalObject);
                }
            }
            if (this.n && this.c != null) {
                d = this.q(a, this.c);
            }
            this.m = true;
            if (d) {
                this.l();
            }
            return d;
        }
        q(a, b) {
            let c = new GridColumnCollection();
            for (let d = 0; d < b.propertyNames.length; d++) {
                let e = b.propertyNames[d];
                if (!a.containsKey(e)) {
                    if (this.b != null && !this.u.contains(e)) {
                        continue;
                    }
                    let f = this.e(e, b.propertyTypes[d]);
                    c.add(f);
                    a.item(e, true);
                }
            }
            let g = new Dictionary$2(String_$type, Boolean_$type, 0);
            for (let h = 0; h < c.count; h++) {
                g.item(c._inner[h].hy, true);
            }
            let i = false;
            let j = this.i.count;
            for (let k = 0; k < c.count; k++) {
                i = true;
                this.k.insertExternalColumnAtIndex(j + k, c._inner[k].externalObject);
            }
            return i;
        }
        e(a, b) {
            let c = null;
            switch (b) {
                case 8:
                case 9:
                    c = this.k.createDateTimeColumn(a);
                    break;
                case 5:
                case 6:
                case 7:
                case 1:
                case 3:
                case 4:
                case 10:
                    c = this.k.createNumericColumn(a);
                    break;
                case 11:
                    c = this.k.createTextColumn(a);
                    break;
                case 0:
                case 2:
                    c = this.k.createTextColumn(a);
                    break;
            }
            c.hy = a;
            c.f8 = true;
            c.id = (createGuid());
            return c;
        }
        h(a) {
            if (a.az < 0 || this.i.count == 0 || this.i.count <= a.az) {
                return null;
            }
            return this.i._inner[a.az];
        }
        f(a) {
            for (let b = 0; b < this.i.count; b++) {
                if (this.i._inner[b].g2 == a) {
                    return this.i._inner[b];
                }
            }
            return null;
        }
        g(a) {
            for (let b = 0; b < this.i.count; b++) {
                if (this.i._inner[b].h0() == a) {
                    return this.i._inner[b];
                }
            }
            return null;
        }
        r(a) {
            return false;
        }
        s(a) {
            return false;
        }
    }
    ColumnController.$t = /*@__PURE__*/ markType(ColumnController, 'ColumnController');
    return ColumnController;
})();
/**
 * @hidden
 */
export let EditingManager = /*@__PURE__*/ (() => {
    class EditingManager extends Base {
        constructor(a) {
            super();
            this.f = null;
            this.c = null;
            this.b = null;
            this.e = null;
            this.n = 0;
            this.m = 0;
            this.j = false;
            this._item = null;
            this.k = false;
            this.f = a;
            this.n = -1;
            this.m = -1;
        }
        get item() {
            return this._item;
        }
        set item(a) {
            this._item = a;
        }
        get d() {
            return this.c;
        }
        get a() {
            return this.d != null ? this.d.kv : null;
        }
        get l() {
            return this.a != null ? this.a.en : -1;
        }
        v(a) {
            if (a == null || a.k.az < 0 || a.k.w < 0) {
                return;
            }
            if (this.c == null) {
                this.c = new EditorCellModel();
                this.c.c = new DefaultCellActionManager(this.f, this.c);
                this.c.d = new DefaultGridInfoRequestor(this.f, this.c);
                this.c.k = new CellPath(1, -1000, 0, -1000);
                this.c.o = this.f;
                let b = this.f;
                b.viewportChanged = delegateCombine(b.viewportChanged, runOn(this, this.r));
            }
            if (this.e == null) {
                this.e = new EditorRowCellModel();
                this.e.k = new CellPath(1, -1001, 0, -1001);
                this.e.o = this.f;
                this.e.ke = GridStyleRepository.bf;
            }
            if (this.j && this.c.lp != null) {
                return;
            }
            this.j = true;
            this.b = this.f.actualColumns._inner[a.k.az];
            let c = this.g(this.b, a.k.w);
            if (this.c.q != c) {
                if (this.c.q != null) {
                    this.c.q.f(this.c.k);
                }
                c.s(this.c.k, this.c);
            }
            this.c.q = c;
            this.c.kv = a;
            this.c.le = a.go;
            this.c.lp = a.hl;
            this.c.kx = this.b.fc;
            this.c.ld = this.b.g4;
            this.c.lj = this.b.hu;
            this.c.kr = this.b.em;
            this.c.kz = false;
            this.c.kt = this.f.actualDataSource.resolveSchemaPropertyType(this.b.hy);
            this.n = a.k.w;
            this.m = a.k.az;
            this.item = a.gp;
            a.a1 = true;
            if (this.f.cf == 3) {
                if (this.e.q != this.f.model.ar) {
                    if (this.e.q != null) {
                        this.e.q.f(this.e.k);
                    }
                    this.f.model.ar.s(this.e.k, this.e);
                }
                this.e.q = this.f.model.ar;
                this.e.kr = a;
                this.e.by = 1;
                if (this.f.uz != null) {
                    this.e.ka = this.f.uz;
                }
                else {
                    this.e.ka = GridStyleRepository.av;
                }
                this.e.dd = truncate(this.f.v0.c);
                this.e.di = truncate(this.f.v0.e);
                this.e.dg = truncate(this.f.v0.d);
                this.e.db = truncate(this.f.v0.b);
            }
            this.s();
        }
        h(a, b) {
            if (this.c != null && this.c.kv != null && this.j) {
                let c = true;
                if (a) {
                    c = this.f.i2(this.c.kv, this.c.le);
                }
                else {
                    if (this.l != -1) {
                        this.f.so(this.l);
                    }
                    this.c.lp = null;
                }
                if (c && this.c.lp == null) {
                    this.j = false;
                    this.c.kv.a1 = false;
                    this.c.kv = null;
                    this.c.go = null;
                    this.c.le = null;
                    this.c.kz = true;
                    this.c.cc = -1000;
                    this.c.cd = -1000;
                    this.b = null;
                    if (this.f.cf == 3 && b) {
                        this.e.kr = null;
                        this.e.by = 0;
                        this.e.cc = -1000;
                        this.e.cd = -1000;
                    }
                    this.s();
                }
            }
            return !this.j;
        }
        p() {
            if (this.e != null && this.f.cf == 3) {
                this.e.kr = null;
                this.e.by = 0;
                this.e.cc = -1000;
                this.e.cd = -1000;
                this.n = -1;
            }
        }
        t(a) {
            if (this.c != null) {
                this.c.lp = a;
                this.s();
            }
        }
        u(a) {
            if (this.c != null) {
                this.c.kv = a;
            }
            if (this.e != null) {
                this.e.kr = a;
            }
        }
        i(a) {
            return a.k.w == this.n;
        }
        s() {
            this.f.renderingEngine.refresh(this.f.model, false);
        }
        g(a, b) {
            if (a.fk != 0) {
                if (this.f.d9.isRowPinned(b)) {
                    return this.f.model.ar;
                }
                else {
                    return this.f.model.av;
                }
            }
            else {
                if (this.f.d9.isRowPinned(b)) {
                    return this.f.model.a2;
                }
                else {
                    return this.f.model.ba;
                }
            }
        }
        r(a, b) {
            this.q();
        }
        q() {
            if (!this.j) {
                return;
            }
            let a = this.f.vp.top + this.f.kk + this.f.lg + this.f.model.cv;
            let b = this.f.vp.bottom;
            let c = this.f.vp.left;
            let d = this.f.vp.right;
            if (this.d.cc > d || this.d.cc + this.d.gf < c || this.d.cd > b || this.d.cd + this.d.e0 < a) {
                if (this.d.q != null) {
                    this.f.de.j(this.d.k, this.d.q, this.f.model);
                    this.d.q = null;
                }
            }
            else {
                if (this.d.q == null && this.b != null && this.a != null) {
                    let e = this.g(this.b, this.a.k.w);
                    e.s(this.d.k, this.d);
                    this.d.q = e;
                }
            }
            if (this.e.cd > b || this.e.cd + this.e.e0 < a) {
                if (this.e.q != null) {
                    this.f.de.j(this.e.k, this.e.q, this.f.model);
                    this.e.q = null;
                }
            }
            else {
                if (this.e.q == null && this.b != null && this.a != null) {
                    let f = this.f.model.ar;
                    f.s(this.e.k, this.e);
                    this.e.q = f;
                }
            }
        }
    }
    EditingManager.$t = /*@__PURE__*/ markType(EditingManager, 'EditingManager');
    return EditingManager;
})();
/**
 * @hidden
 */
export let Grid = /*@__PURE__*/ (() => {
    class Grid extends Base {
        constructor() {
            super();
            this.lm = null;
            this._propertySetter = null;
            this.ed = null;
            this.eb = null;
            this.columnExchangingAnimationCompleted = null;
            this.columnExchangingAnimationCanceled = null;
            this.columnShowingAnimationCompleted = null;
            this.columnShowingAnimationCanceled = null;
            this.filterExpressionsChanging = null;
            this.filterExpressionsChanged = null;
            this.columnMovingAnimationCompleted = null;
            this.columnMovingAnimationCanceled = null;
            this.columnHidingAnimationCompleted = null;
            this.columnHidingAnimationCanceled = null;
            this.cellPreviewPointerDown = null;
            this.cellPreviewPointerUp = null;
            this.cellPointerDown = null;
            this.cellPointerUp = null;
            this.cellClicked = null;
            this.j3 = -1;
            this.bt = 0;
            this.bf = 0;
            this.d5 = null;
            this.gk = true;
            this.ua = null;
            this.t2 = null;
            this.vu = new Thickness(0, 1);
            this.vo = null;
            this.aq = null;
            this.gc = false;
            this.hb = false;
            this.j6 = -1;
            this.ke = -1;
            this.gm = false;
            this.gl = false;
            this.jd = 0;
            this.jk = 0;
            this.ji = 0;
            this.jj = 0;
            this.i3 = new Date();
            this.i8 = 0;
            this.i9 = 0;
            this.ja = 0;
            this.jb = 0;
            this.as = null;
            this.ki = 0;
            this.kh = 0;
            this.gv = false;
            this.ka = -1;
            this.kj = -1;
            this.ej = 0;
            this.an = null;
            this.i6 = -1;
            this.jh = 0;
            this.je = 0;
            this.jf = 0;
            this.am = null;
            this.hx = false;
            this.gy = false;
            this.g0 = false;
            this.gx = false;
            this.cj = new GridAnimationManager();
            this._delayedExecutionManager = null;
            this.ek = null;
            this.d8 = null;
            this.a1 = null;
            this.dd = new GridLayerController();
            this.e5 = new SpatialEngine();
            this.c8 = null;
            this.ez = null;
            this.ai = null;
            this.e3 = null;
            this.cb = null;
            this.fz = null;
            this.ex = null;
            this.ev = new SectionFooter();
            this.e7 = null;
            this.e9 = null;
            this.et = null;
            this.d1 = null;
            this.d3 = null;
            this.bv = null;
            this.bh = null;
            this.eh = null;
            this.b = null;
            this.c = null;
            this.fb = new VisibilityEngine();
            this._viewportManager = null;
            this.i5 = 0;
            this.i4 = 0;
            this.ff = 2;
            this.jz = truncate(DeviceUtils.g(36));
            this.kb = -1;
            this.b8 = ColumnWidth.a;
            this.i7 = 0;
            this.jy = truncate(DeviceUtils.g(36));
            this.j4 = -1;
            this.kg = truncate(DeviceUtils.g(0));
            this.ln = null;
            this.kf = truncate(DeviceUtils.g(0));
            this.kd = truncate(DeviceUtils.g(0));
            this.j2 = truncate(DeviceUtils.g(0));
            this.dz = 0;
            this.ce = 1;
            this.cc = 2;
            this.f4 = true;
            this.kc = truncate(DeviceUtils.g(1));
            this.gj = true;
            this.bx = 1;
            this.bo = 0;
            this.ak = 0;
            this.er = 1;
            this.eo = 1;
            this.av = 1;
            this.cy = new GridColumnAnimationSettings();
            this.cl = new GridAnimationSettings();
            this.bq = 1;
            this.by = 1;
            this.bc = 1;
            this.a9 = 1;
            this.a3 = 1;
            this.vv = new Thickness(1, 0, 0, 0, 0);
            this.ds = 5;
            this.cg = 1;
            this.dq = 1;
            this.f8 = false;
            this.ab = new GridSelectedItemsCollection();
            this.af = new GridSelectedKeysCollection();
            this.dl = new GridSelectedCellsCollection();
            this.di = new GridSelectedCellRangesCollection();
            this.f7 = false;
            this.aa = new GridSelectedItemsCollection();
            this.ae = new GridSelectedKeysCollection();
            this.gb = true;
            this.gh = true;
            this.gi = true;
            this.tw = null;
            this.ug = null;
            this.uj = null;
            this.un = null;
            this.jg = NaN;
            this.fi = null;
            this.jc = NaN;
            this.t1 = null;
            this.ui = null;
            this.t9 = null;
            this.t8 = null;
            this.cv = null;
            this.cu = null;
            this.tv = null;
            this.tx = null;
            this.t6 = null;
            this.e1 = 0;
            this.fh = null;
            this.uf = null;
            this.uh = null;
            this.fk = null;
            this.fl = null;
            this.fn = null;
            this.um = null;
            this.fm = null;
            this.fo = null;
            this.uq = null;
            this.uk = null;
            this.uo = null;
            this.ul = null;
            this.up = null;
            this.j9 = truncate(DeviceUtils.g(2));
            this.j5 = truncate(DeviceUtils.g(1));
            this.t5 = null;
            this.t3 = null;
            this.t7 = null;
            this.fj = null;
            this.ub = null;
            this.t4 = null;
            this.ue = null;
            this.uc = null;
            this.ud = null;
            this.j1 = truncate(DeviceUtils.g(4));
            this.j0 = truncate(DeviceUtils.g(2));
            this.t0 = null;
            this.ty = null;
            this.gu = false;
            this.bj = 0;
            this.tz = null;
            this.bl = 0;
            this.tu = null;
            this.vt = GridStyleRepository.bp;
            this.vr = GridStyleRepository.bp;
            this.vs = new Thickness(0, NaN);
            this.go = false;
            this.tp = GridStyleRepository.r;
            this.to = new CornerRadius(0, NaN);
            this.tn = GridStyleRepository.r;
            this.ga = true;
            this.fx = new DefaultPlatformPixelConverter();
            this.d6 = null;
            this.em = null;
            this.fd = new VisualModel();
            this.b3 = null;
            this.a6 = null;
            this.u = null;
            this.b6 = null;
            this.sortDescriptionsChanged = null;
            this.groupDescriptionsChanged = null;
            this.columnHiddenChanged = null;
            this.columnPinnedChanged = null;
            this.cellValueChanging = null;
            this.dataCommitted = null;
            this.dataCommitting = null;
            this.gw = false;
            this.s = 0;
            this.ge = false;
            this.gd = false;
            this.f5 = false;
            this.q = 0;
            this.gg = false;
            this.gf = true;
            this.f6 = false;
            this.dx = 4;
            this.f3 = true;
            this.propertyChanged = null;
            this.gt = false;
            this.y = null;
            this.w = null;
            this.d = null;
            this.a = null;
            this.f2 = true;
            this.sizeChanged = null;
            this.viewportChanged = null;
            this.j7 = -1;
            this.j8 = -1;
            this.i0 = false;
            this.actualColumnsChanged = null;
            this.c0 = new GridColumnCollection();
            this.gn = false;
            this.iy = false;
            this.iz = false;
            this.f1 = false;
            this.hh = false;
            this.hw = false;
            this.gz = false;
            this.ar = null;
            this.columnsAutoGenerated = null;
            this.selectedItemsChanged = null;
            this.selectedKeysChanged = null;
            this.selectedCellsChanged = null;
            this.activeCellChanged = null;
            this.selectedCellRangesChanged = null;
            this.at = null;
            this.f9 = false;
            this.gs = true;
            this.gr = true;
            this.gq = true;
            this.columnWidthChanged = null;
            this.cellEditStarted = null;
            this.cellEditEnded = null;
            this.rowEditStarted = null;
            this.rowEditEnded = null;
            this.gp = false;
            this.ey = new SectionHeader();
            this.eu = new RowSeparator();
            this.d2 = new HeaderRowSeparator();
            this.d4 = new HeaderSeparator();
            this.bw = new ColumnResizingSeparator();
            this.bi = new ColumnMovingSeparator();
            this.ei = new PinnedAreaSeparator();
            this.e8 = new SummaryRowRoot();
            this.fa = new SummaryRowSection();
            this.vs = this.vt;
            this.to = this.tp;
            this.tu = GridStyleRepository.ax;
            this.a1 = new ColumnController(this.c0, this.g3, runOn(this, this.qk));
            let a = this.a1.j;
            a.collectionChanged = delegateCombine(a.collectionChanged, runOn(this, this.pk));
            this.d8 = new DataAdapter(this.a1);
            this.em = new ResponsiveStatesCollection();
            this.ek = new ResponsiveEngine(this);
            this.ek.g = this.em;
            this.hh = this.iq();
            this.hw = this.ir();
            this.e0 = new SelectionManager(this, this.ck);
            this.aj = new ActivationManager(this, this.ck);
            this.ab.af(runOn(this, this.s5));
            this.af.af(runOn(this, this.s6));
            this.dl.an(runOn(this, this.s4));
            let b = this.di;
            b.collectionChanged = delegateCombine(b.collectionChanged, runOn(this, this.s3));
            this.aa.af(runOn(this, this.se));
            this.ae.af(runOn(this, this.sf));
            this.b3 = new ColumnSortDescriptionCollection();
            this.a6 = new ColumnGroupDescriptionCollection();
            this.b6 = new ColumnSummaryDescriptionCollection();
            this.b3.l(runOn(this, this.tb));
            this.a6.l(runOn(this, this.p6));
            this.b6.l(runOn(this, this.tc));
            this.u = new FilterExpressionCollection();
            this.u.m(runOn(this, this.p3));
            this.e4 = new SortManager(this);
            this.cb = new EditingManager(this);
            this.d5 = new HoverManager(this);
        }
        get lq() {
            return this.lm;
        }
        set lq(a) {
            this.lm = a;
        }
        get propertySetter() {
            return this._propertySetter;
        }
        set propertySetter(a) {
            this._propertySetter = a;
        }
        get externalGrid() {
            return this.ed;
        }
        set externalGrid(a) {
            this.ed = a;
            if (this.a2 != null) {
                this.a2.k = this.ed;
            }
        }
        get dragger() {
            return this.eb;
        }
        set dragger(a) {
            if (this.eb != null) {
                let b = this.eb;
                b.onDrag = delegateRemove(b.onDrag, runOn(this, this.rn));
                let c = this.eb;
                c.onDragEnd = delegateCombine(c.onDragEnd, runOn(this, this.rp));
            }
            this.eb = a;
            let d = this.eb;
            d.onDrag = delegateCombine(d.onDrag, runOn(this, this.rn));
            let e = this.eb;
            e.onDragEnd = delegateCombine(e.onDragEnd, runOn(this, this.rp));
        }
        q8(a) {
            if (this.columnExchangingAnimationCompleted != null) {
                this.columnExchangingAnimationCompleted(a.externalObject, new EventArgs());
            }
        }
        q7(a) {
            if (this.columnExchangingAnimationCanceled != null) {
                this.columnExchangingAnimationCanceled(a.externalObject, new EventArgs());
            }
        }
        o(a) {
            let b = this.a0(a.k);
            if (b == null) {
                return null;
            }
            return b.eo;
        }
        p(a) {
            let b = this.a0(a.k);
            if (b == null) {
                return 11;
            }
            if (this.actualDataSource == null) {
                return 11;
            }
            return this.actualDataSource.resolveSchemaPropertyType(b.hy);
        }
        rh(a) {
            if (this.columnShowingAnimationCompleted != null) {
                this.columnShowingAnimationCompleted(a.externalObject, new EventArgs());
            }
        }
        pv(a, b) {
            let c = this.a0(a.k);
            if (c == null) {
                return;
            }
            if (!Base.equalsStatic(c.eo, b)) {
                c.eo = b;
                if (this.filterExpressionsChanging != null) {
                    this.filterExpressionsChanging(this, ((() => {
                        let $ret = new GridFilterExpressionsEventArgs();
                        $ret.a = this.v;
                        return $ret;
                    })()));
                }
            }
        }
        pu(a, b) {
            let c = this.a0(a.k);
            if (c == null) {
                return;
            }
            if (!Base.equalsStatic(c.eo, b)) {
                c.eo = b;
            }
        }
        rg(a) {
            if (this.columnShowingAnimationCanceled != null) {
                this.columnShowingAnimationCanceled(a.externalObject, new EventArgs());
            }
        }
        re(a) {
            if (this.columnMovingAnimationCompleted != null) {
                this.columnMovingAnimationCompleted(a.externalObject, new EventArgs());
            }
        }
        rd(a) {
            if (this.columnMovingAnimationCanceled != null) {
                this.columnMovingAnimationCanceled(a.externalObject, new EventArgs());
            }
        }
        ra(a) {
            if (this.columnHidingAnimationCompleted != null) {
                this.columnHidingAnimationCompleted(a.externalObject, new EventArgs());
            }
        }
        q9(a) {
            if (this.columnHidingAnimationCanceled != null) {
                this.columnHidingAnimationCanceled(a.externalObject, new EventArgs());
            }
        }
        q2(a) {
            if (this.cellPreviewPointerDown != null) {
                this.cellPreviewPointerDown(a, ((() => {
                    let $ret = new GridCellEventArgs();
                    $ret.cellInfo = a;
                    $ret.grid = this;
                    return $ret;
                })()));
            }
        }
        q3(a) {
            if (this.cellPreviewPointerUp != null) {
                this.cellPreviewPointerUp(a, ((() => {
                    let $ret = new GridCellEventArgs();
                    $ret.cellInfo = a;
                    $ret.grid = this;
                    return $ret;
                })()));
            }
        }
        q0(a) {
            if (this.cellPointerDown != null) {
                this.cellPointerDown(a, ((() => {
                    let $ret = new GridCellEventArgs();
                    $ret.cellInfo = a;
                    $ret.grid = this;
                    return $ret;
                })()));
            }
        }
        q1(a) {
            if (this.cellPointerUp != null) {
                this.cellPointerUp(a, ((() => {
                    let $ret = new GridCellEventArgs();
                    $ret.cellInfo = a;
                    $ret.grid = this;
                    return $ret;
                })()));
            }
        }
        r4(a, b) {
            this.qb(a);
        }
        ru(a) {
            if (a.v == 2) {
                this.tj(a.k.w);
            }
        }
        tj(a) {
            if (this.cb.j) {
                if (!this.ha(true)) {
                    return;
                }
                if (this.cf == 3) {
                    this.p1(true);
                }
            }
            let b = !this.actualDataSource.getIsRowExpandedAtIndex(a);
            this.actualDataSource.setIsRowExpandedAtIndex(a, b);
            let c = this.actualDataSource.getRowLevel(a);
            if (a < this.model.bf.w) {
                this.s2(a - c);
            }
        }
        rt(a) {
            if (a != null && this.cf != 3) {
                this.ha(true);
            }
        }
        qt(a) {
            if (a.v == 1) {
                if (this.hr()) {
                    if (this.cd == 2) {
                        this.ix(a);
                    }
                }
            }
        }
        qr(a, b, c, d) {
            this.externalGrid.focusScroller();
            if (a.v == 1) {
                if (this.cb.j && a != this.cb.a) {
                    if (!this.ha(true)) {
                        return;
                    }
                }
                if (a.k.w != this.j3) {
                    this.p1(true);
                }
                if (d && this.hr()) {
                    if (this.cd == 1 || (this.cf == 3 && a.k.w == this.j3)) {
                        this.ix(a);
                    }
                }
            }
            else if (a.v == 2 || a.v == 3) {
                this.ha(true);
                this.p1(true);
            }
            if (a.v == 0 && this.d0 != 4) {
                this.e4.d(this.a0(a.k));
            }
            if (this.dt == 5) {
                if (a.k.ag && !a.k.au) {
                    let e = this.model.br._inner[a.k.az].n;
                    if (this.dr == 1) {
                        if (b) {
                            this.si(a.k.w, e);
                        }
                        else {
                            if (c && this.at != null) {
                                let f = e;
                                let g = a.k.w;
                                this.dj.remove(this.at);
                                this.pm(Math.min(this.at.k, f), Math.max(this.at.k, f), Math.min(this.at.l, g), Math.max(this.at.l, g));
                            }
                            else {
                                this.sp();
                                this.pm(e, e, a.k.w, a.k.w);
                            }
                        }
                    }
                    else if (this.dr == 0) {
                        this.si(a.k.w, e);
                    }
                }
            }
            else {
                if (this.dr == 0) {
                    this.e0.an(a);
                }
                else if (this.dr == 1) {
                    if (b) {
                        this.e0.an(a);
                    }
                    else {
                        this.e0.am(a);
                    }
                }
            }
            if (this.ch == 1) {
                this.aj.x(a);
            }
            if (this.cellClicked != null) {
                this.cellClicked(a, ((() => {
                    let $ret = new GridCellEventArgs();
                    $ret.cellInfo = a;
                    $ret.grid = this;
                    return $ret;
                })()));
            }
        }
        si(a, b) {
            let c = false;
            for (let d = 0; d < this.dj.count; d++) {
                let e = this.dj._inner[d];
                if (e.k == b && e.i == b && e.l == a && e.j == a) {
                    this.sq(this.dj._inner[d]);
                    c = true;
                    break;
                }
            }
            if (!c) {
                this.pm(b, b, a, a);
            }
        }
        get bu() {
            return this.bt;
        }
        set bu(a) {
            let b = this.bt;
            this.bt = a;
            if (b != this.bt) {
                this.rz("ColumnResizingMode", enumGetBox(ColumnResizingMode_$type, b), enumGetBox(ColumnResizingMode_$type, this.bt));
            }
        }
        get bg() {
            return this.bf;
        }
        set bg(a) {
            let b = this.bf;
            this.bf = a;
            if (b != this.bf) {
                this.rz("ColumnMovingMode", enumGetBox(ColumnMovingMode_$type, b), enumGetBox(ColumnMovingMode_$type, this.bf));
            }
        }
        get h4() {
            return this.gk;
        }
        set h4(a) {
            let b = this.gk;
            this.gk = a;
            if (b != this.gk) {
                this.rz("IsRowHoverEnabled", b, this.gk);
            }
        }
        get u7() {
            return this.ua;
        }
        set u7(a) {
            let b = this.ua;
            this.ua = a;
            if (b != this.ua) {
                this.rz("RowHoverBackground", b, this.ua);
            }
        }
        get uz() {
            return this.t2;
        }
        set uz(a) {
            let b = this.t2;
            this.t2 = a;
            if (b != this.t2) {
                this.rz("EditRowBorder", b, this.t2);
            }
        }
        get v0() {
            return this.vu;
        }
        set v0(a) {
            let b = this.vu;
            this.vu = a;
            if (b != this.vu) {
                this.rz("EditRowBorderWidth", b, this.vu);
            }
        }
        qy(a, b, c) {
            this.aq = a.k.aa();
            this.vo = { $type: Point_$type, x: b, y: c };
            this.gc = a.a6 && a.a7;
            if (this.dragger != null && this.bu != 2 && this.aq.h) {
                let d = this.a2.j._inner[a.k.az];
                if (d.ge) {
                    let e = this.model.br._inner[this.aq.az];
                    this.jh = e.k;
                    this.je = this.model.cf;
                    this.jf = this.model.cg;
                    this.ji = this.model.actualVisibleRegion.left;
                    this.jj = this.model.actualVisibleRegion.top;
                    let f = this.dragger.view.transformPoint(b, c);
                    this.ld = truncate((f.x + this.ji)) - (intDivide(this.kp, 2));
                    this.i6 = -1;
                    this.externalGrid.setResizeCursor();
                    this.dragger.dragStart(b, c, this.model.actualVisibleRegion.x, this.model.actualVisibleRegion.y, 1, this.aq, false);
                    if (this.bu == 0) {
                        this.sk();
                    }
                }
            }
        }
        qz(a, b, c) {
            this.aq = null;
        }
        qx(a, b, c) {
            let d = 0;
            for (let e = 0; e < this.model.br.count; e++) {
                let f = this.model.br._inner[e];
                d += f.k;
            }
            let g = this.dragger.view.transformPoint(b, c);
            if ((this.dragger == null || !this.dragger.isDragActive) && g.x >= d) {
                this.externalGrid.setDefaultCursor();
            }
            if (this.h4) {
                this.d5.f(-1);
            }
        }
        get lb() {
            return this.j6;
        }
        set lb(a) {
            this.j6 = a;
            this.hb = true;
        }
        qw(a, b, c) {
            if (this.h4) {
                let d = false;
                let e = -1;
                if (a.k.ag || a.k.as || a.k.ah) {
                    d = true;
                    e = a.k.w;
                    if (a.k.ah && this.cb.j) {
                        e = this.cb.a.k.w;
                    }
                }
                else if (a.k.g || a.k.j) {
                    d = true;
                }
                if (d) {
                    if (this.i0) {
                        this.lb = e;
                    }
                    else {
                        this.d5.f(e);
                    }
                }
            }
        }
        ry(a, b, c) {
            if (this.dragger == null || !this.dragger.isDragActive) {
                if (a.k.h && this.bu != 2) {
                    let d = this.a2.j._inner[a.k.az];
                    if (d.ge) {
                        this.externalGrid.setResizeCursor();
                    }
                }
                else {
                    this.externalGrid.setDefaultCursor();
                }
            }
            else if (this.dragger.dragType != 1 && this.dragger.dragType != 2) {
                this.externalGrid.setDefaultCursor();
            }
        }
        pq() {
            if (this.ke != -1) {
                this.fz.teardownTicking(this.ke);
                this.ke = -1;
            }
        }
        rs(a, b, c, d) {
            this.ji = this.model.actualVisibleRegion.left;
            this.jj = this.model.actualVisibleRegion.top;
            if ((this.dragger == null || !this.dragger.isDragActive) && a.g && !a.h && this.bg != 1) {
                let e = this.a0(a);
                if (e != null && e.gc) {
                    this.externalGrid.ensureColumnsAreManual();
                }
                this.externalGrid.setHandCursor();
                this.dragger.dragStart(b, c, this.model.actualVisibleRegion.x, this.model.actualVisibleRegion.y, 2, a, d);
            }
            else if (this.dt == 5 && a.ag && !a.au) {
                if (!d) {
                    this.sp();
                }
                this.ki = a.w;
                this.kh = this.model.br._inner[a.az].n;
                this.gv = this.gc;
                if (this.ch == 1) {
                    this.aj.w(a);
                }
                this.dragger.dragStart(b, c, this.model.actualVisibleRegion.x, this.model.actualVisibleRegion.y, 0, a, d);
            }
        }
        rp(a, b) {
            this.pq();
            this.as = null;
            this.an = null;
            this.ka = -1;
            this.aq = null;
            if (this.dragger == null) {
                return;
            }
            if (this.dragger.dragType == 1) {
                this.externalGrid.setDefaultCursor();
                if (this.bu == 0) {
                    if (this.i6 != -1) {
                        let c = this.model.br._inner[this.dragger.cellPath.az];
                        this.ck.ag(this, this.cz, c, this.i6);
                    }
                    else {
                        this.renderingEngine.refresh(this.model, false);
                    }
                }
            }
            else if (this.dragger.dragType == 2) {
                this.externalGrid.setDefaultCursor();
                if (this.bg == 0) {
                    let d = true;
                    if ((this.kj != -1 && this.kj != this.dragger.cellPath.az) || this.ej != this.columns._inner[this.dragger.cellPath.az].fk) {
                        let e = this.columns._inner[this.dragger.cellPath.az].fk;
                        if (e != this.ej) {
                            this.iz = true;
                            this.qf(this.dragger.cellPath.az, this.kj);
                            this.iz = false;
                            this.sd(this.columns._inner[this.kj], this.ej);
                        }
                        else {
                            this.qf(this.dragger.cellPath.az, this.kj);
                        }
                        d = false;
                    }
                    if (d) {
                        this.sk();
                    }
                    this.kj = -1;
                }
            }
        }
        rn(a, b) {
            if (this.dragger == null) {
                return;
            }
            this.i8 = b.startX;
            this.i9 = b.startY;
            this.ja = b.currentX;
            this.jb = b.currentY;
            switch (this.dragger.dragType) {
                case 0:
                    this.rr(false);
                    break;
                case 1:
                    this.rq();
                    break;
                case 2:
                    this.ro(false);
                    break;
            }
        }
        get ld() {
            return this.ka;
        }
        set ld(a) {
            if (this.ka != a) {
                this.ka = a;
            }
        }
        ro(a) {
            if (this.dragger == null) {
                return;
            }
            let b = this.ja + this.model.actualVisibleRegion.x;
            if (a || !this.g4(b, NaN)) {
                let c = this.dragger.cellPath.az;
                let d = this.ld;
                this.ej = 0;
                for (let e = 0; e < this.model.br.count; e++) {
                    let f = this.model.br._inner[e];
                    if (f.a == 3) {
                        continue;
                    }
                    let g = f.l;
                    if (f.d == 1) {
                        g = f.l + this.model.actualVisibleRegion.x;
                    }
                    let h = g + f.k;
                    let i = g + (intDivide(f.k, 2));
                    if ((f.n == 0 && b < g) || (b > g && b <= i)) {
                        d = g;
                        if (e != c) {
                            c = e < this.dragger.cellPath.az ? e : e - 1;
                        }
                        if (f.d != 1 && d < this.model.actualVisibleRegion.x + this.model.cf) {
                            d = this.model.actualVisibleRegion.x + this.model.cf;
                        }
                        this.ej = f.d;
                        break;
                    }
                    else if ((b > i && b < h) || (e == this.model.br.count - 1 && b > h)) {
                        d = h - this.kn;
                        if (e != c) {
                            c = e < this.dragger.cellPath.az ? e + 1 : e;
                        }
                        this.ej = f.d;
                        break;
                    }
                }
                if (d != this.ld) {
                    let j = this.ld;
                    this.ld = truncate(d);
                    if (j == -1) {
                        this.renderingEngine.invalidateVisibility(() => this.fc.l(this));
                        this.renderingEngine.refresh(this.model, true);
                    }
                    else {
                        if (this.an == null) {
                            this.an = this.de.c(new CellPath(1, -400, 0, -102), this.model);
                        }
                        this.an.cc = this.ld;
                        this.renderingEngine.refresh(this.model, false);
                    }
                    this.kj = c;
                }
            }
        }
        rq() {
            let a = this.a2.h(this.dragger.cellPath);
            if (this.an == null) {
                this.an = this.de.c(new CellPath(1, -400, 0, -102), this.model);
            }
            let b = (this.ja + this.model.actualVisibleRegion.x) - this.i8;
            let c = isNaN_(a.gm) ? isNaN_(this.jn) ? 0 : this.jn : a.gm;
            this.i6 = Math.max(this.jh + b, Math.max(c, 10));
            let d = 20;
            if (a.fk == 1) {
                d = Math.min(20, this.vp.width - this.model.cf);
                let e = this.vp.width - d - this.model.cg;
                let f = this.je + (this.i6 - this.jh);
                if (f > e) {
                    this.i6 = this.i6 - (f - e);
                }
            }
            else if (a.fk == 2) {
                d = Math.min(20, this.vp.width - this.model.cg);
                let g = this.vp.width - d - this.model.cf;
                let h = this.jf + (this.i6 - this.jh);
                if (h > g) {
                    this.i6 = this.i6 - (h - g);
                }
            }
            if (this.bu == 0) {
                this.ld = truncate((this.i8 - this.jh + this.i6)) - (intDivide(this.kp, 2));
                if (this.an != null) {
                    this.an.cc = this.ld;
                    this.renderingEngine.refresh(this.model, false);
                }
            }
            else {
                let i = ((() => {
                    let $ret = new ColumnWidth();
                    $ret.f = this.i6;
                    $ret.c = false;
                    return $ret;
                })());
                if (!isNaN_(a.gm)) {
                    i.e = a.gm;
                }
                a.width = i;
            }
        }
        rr(a) {
            if (a || !this.g4(this.ja + this.model.actualVisibleRegion.x, this.jb + this.model.actualVisibleRegion.y)) {
                let b = this.ja + this.model.actualVisibleRegion.x;
                let c = this.vq(b, this.i9, this.ja, this.jb);
                let d = this.au(c, this.ki, this.kh, this.gv);
                if (this.as == null) {
                    this.as = d;
                    this.pl(this.as);
                }
                else {
                    this.tm(d);
                }
            }
        }
        vq(a, b, c, d) {
            c += this.model.actualVisibleRegion.x;
            d += this.model.actualVisibleRegion.y;
            return new Rect(0, Math.min(a, c), Math.min(b, d), Math.abs(c - a), Math.abs(d - b));
        }
        ap(a, b) {
            if (this.fd == null) {
                return null;
            }
            return this.fd.e(a, b);
        }
        au(a, b, c, d) {
            let e = this.model.al.q;
            let f = this.model.a0.q;
            let g = this.model.a3.q;
            let h = this.model.an.q;
            let i = new List$1(CellModel.$, 1, f);
            i.o(e);
            i.o(g);
            i.o(h);
            let j = b;
            let k = c;
            let l = this.ja + this.model.actualVisibleRegion.x;
            for (let m = 0; m < i.count; m++) {
                let n = i._inner[m];
                if (!n.k.ag || n.k.au) {
                    continue;
                }
                if (l < this.model.actualVisibleRegion.x + this.model.cf && n.k.d != 1) {
                    continue;
                }
                if (l > this.model.actualVisibleRegion.right - this.model.cg && n.k.d != 2) {
                    continue;
                }
                if (this.dt == 5) {
                    if (d) {
                        if (!n.a6 || (n.a6 && !n.a7)) {
                            continue;
                        }
                    }
                    else {
                        if (n.a6 && n.a7) {
                            continue;
                        }
                    }
                    let o = new Rect(0, n.cc, n.cd, n.gf, n.e0);
                    if (a.intersectsWith(o)) {
                        let p = this.model.br._inner[n.k.az].n;
                        let q = Math.abs(n.k.w - b);
                        let r = Math.abs(Math.max(0, p) - c);
                        let s = Math.abs(j - b);
                        let t = Math.abs(k - c);
                        if (q > s) {
                            j = n.k.w;
                        }
                        if (r > t && !n.k.au) {
                            k = p;
                        }
                    }
                }
            }
            let u = new CellRange();
            u.k = Math.min(c, k);
            u.i = Math.max(c, k);
            u.l = Math.min(b, j);
            u.j = Math.max(b, j);
            return u;
        }
        g4(a, b) {
            let c = 20;
            let d = 20;
            let e = new Rect(0, this.model.actualVisibleRegion.x + d, this.model.actualVisibleRegion.y + c, this.model.actualVisibleRegion.width - d * 2, this.model.actualVisibleRegion.height - c * 2);
            let f = 5;
            let g = 1000;
            let h = 5;
            let i = 1000;
            if (!this.gv && !isNaN_(b)) {
                if (b > e.bottom) {
                    let j = b - e.bottom;
                    this.jk = Math.min(j * f, g);
                    this.gm = true;
                }
                else if (b < e.top) {
                    let k = e.top - b;
                    this.jk = -Math.min(k * f, g);
                    this.gm = true;
                }
                else {
                    this.jk = 0;
                    this.gm = false;
                }
            }
            if (a > e.right) {
                let l = a - e.right;
                this.jd = Math.min(l * h, i);
                this.gl = true;
            }
            else if (a < e.left) {
                let m = e.left - a;
                this.jd = -Math.min(m * h, i);
                this.gl = true;
            }
            else {
                this.jd = 0;
                this.gl = false;
            }
            if ((this.gm || this.gl) && this.ke == -1) {
                this.i3 = dateNow();
                this.ke = this.fz.setupTicking(runOn(this, this.p0));
                this.fz.requestFrame(this.ke);
            }
            if (!this.gm && !this.gl) {
                this.pq();
            }
            return this.gl || this.gm;
        }
        p0() {
            if (this.dragger == null) {
                return;
            }
            let a = dateNow();
            let b = timeSpanTotalSeconds((+a - +(this.i3)));
            this.i3 = a;
            this.ji = Math.max(this.ji + this.jd * b, 0);
            this.jj = Math.max(this.jj + this.jk * b, 0);
            if (this.model.absoluteWidth > 0 && this.model.actualVisibleRegion.width > 0 && this.ji + this.model.actualVisibleRegion.width > this.model.absoluteWidth) {
                this.ji = Math.round(this.model.absoluteWidth - this.model.actualVisibleRegion.width);
            }
            if (this.model.absoluteHeight > 0 && this.model.actualVisibleRegion.height > 0 && this.jj + this.model.actualVisibleRegion.height > this.model.absoluteHeight) {
                this.jj = Math.round(this.model.absoluteHeight - this.model.actualVisibleRegion.height);
            }
            this.viewportManager.moveViewportTo(truncate(this.ji), truncate(this.jj));
            switch (this.dragger.dragType) {
                case 0:
                    this.rr(true);
                    break;
                case 1:
                    this.rq();
                    break;
                case 2:
                    this.ro(true);
                    break;
            }
            this.fz.requestFrame(this.ke);
        }
        tm(a) {
            if (a.k != this.as.k || a.i != this.as.i || a.l != this.as.l || a.j != this.as.j) {
                this.as.k = a.k;
                this.as.i = a.i;
                this.as.l = a.l;
                this.as.j = a.j;
                this.g0 = true;
                this.e0.at();
                this.g0 = false;
                this.qi(this.as);
            }
        }
        sv(a) {
            if (this.actualDataSource != null && this.actualDataSource.actualSchema != null) {
                a.m = this.actualDataSource.resolveSchemaPropertyType(a.f);
                a.o = true;
            }
        }
        sw(a) {
            if (this.actualDataSource != null && this.actualDataSource.actualSchema != null) {
                a.g = this.actualDataSource.resolveSchemaPropertyType(a.af);
                a.r = true;
            }
        }
        tc(a, b) {
            switch (b.action) {
                case 0:
                    if (b.newItems != null) {
                        for (let c = 0; c < b.newItems.count; c++) {
                            let d = b.newItems.item(c);
                            if (!d.r) {
                                this.sw(d);
                            }
                        }
                    }
                    break;
            }
        }
        p6(a, b) {
            switch (b.action) {
                case 0:
                    if (b.newItems != null) {
                        for (let c = 0; c < b.newItems.count; c++) {
                            let d = b.newItems.item(c);
                            if (!d.o) {
                                this.sv(d);
                            }
                        }
                    }
                    break;
            }
            if (this.groupDescriptionsChanged != null) {
                this.groupDescriptionsChanged(this, ((() => {
                    let $ret = new GridGroupDescriptionsChangedEventArgs();
                    $ret.groupDescriptions = this.a7;
                    return $ret;
                })()));
            }
        }
        p3(a, b) {
            if (this.filterExpressionsChanged != null) {
                this.filterExpressionsChanged(this, ((() => {
                    let $ret = new GridFilterExpressionsEventArgs();
                    $ret.a = this.v;
                    return $ret;
                })()));
            }
        }
        tb(a, b) {
            this.hx = true;
            try {
                switch (b.action) {
                    case 0:
                        if (b.newItems != null) {
                            for (let c = 0; c < b.newItems.count; c++) {
                                let d = b.newItems.item(c);
                                this.ti(d.f, this.b5(d.c));
                            }
                        }
                        break;
                    case 1:
                        if (b.oldItems != null) {
                            for (let e = 0; e < b.oldItems.count; e++) {
                                let f = b.oldItems.item(e);
                                this.ti(f.f, 0);
                            }
                        }
                        break;
                    case 2:
                        if (b.oldItems != null) {
                            for (let g = 0; g < b.oldItems.count; g++) {
                                let h = b.oldItems.item(g);
                                this.ti(h.f, 0);
                            }
                        }
                        if (b.newItems != null) {
                            for (let i = 0; i < b.newItems.count; i++) {
                                let j = b.newItems.item(i);
                                this.ti(j.f, this.b5(j.c));
                            }
                        }
                        break;
                    case 4:
                        for (let k of fromEnum(this.columns)) {
                            k.e6 = 0;
                        }
                        break;
                }
                if (this.sortDescriptionsChanged != null) {
                    this.sortDescriptionsChanged(this, ((() => {
                        let $ret = new GridSortDescriptionsChangedEventArgs();
                        $ret.sortDescriptions = this.b4;
                        return $ret;
                    })()));
                }
            }
            finally {
                this.hx = false;
            }
        }
        ti(a, b) {
            for (let c = 0; c < this.columns.count; c++) {
                if (this.columns._inner[c].hy == a) {
                    this.columns._inner[c].e6 = b;
                }
            }
        }
        b5(a) {
            switch (a) {
                case 0: return 1;
                case 1: return 2;
            }
            return 0;
        }
        s5(a, b) {
            if (!this.hd && this.actualDataSource != null) {
                if (!this.gy) {
                    this.gy = true;
                    switch (b.action) {
                        case 0:
                            if (b.newItems != null) {
                                for (let c = 0; c < b.newItems.count; c++) {
                                    let d = this.d9.getItemKey(this.i(), b.newItems.item(c));
                                    this.ah.ae.insert(c + b.newStartingIndex, d);
                                }
                            }
                            break;
                        case 1:
                            if (b.oldItems != null) {
                                for (let e = 0; e < b.oldItems.count; e++) {
                                    this.ah.ae.removeAt(b.oldStartingIndex);
                                }
                            }
                            break;
                        case 2:
                            if (b.oldItems != null) {
                                for (let f = 0; f < b.oldItems.count; f++) {
                                    this.ah.ae.removeAt(b.oldStartingIndex);
                                }
                            }
                            if (b.newItems != null) {
                                for (let g = 0; g < b.newItems.count; g++) {
                                    let h = this.d9.getItemKey(this.i(), b.newItems.item(g));
                                    this.ah.ae.insert(g + b.newStartingIndex, h);
                                }
                            }
                            break;
                        case 4:
                            this.ah.clear();
                            for (let i of fromEnum(this.ad.ae)) {
                                let j = this.d9.getItemKey(this.i(), i);
                                this.ah.add(j);
                            }
                            break;
                    }
                    this.e0.av();
                    this.gy = false;
                }
            }
            if (this.h7) {
                if (this.selectedItemsChanged != null) {
                    let k = null;
                    if (b.newItems != null && b.newItems.count > 0) {
                        k = new GridSelectedItemsCollection();
                        for (let l of fromEn(b.newItems)) {
                            k.add1(l);
                        }
                    }
                    let m = null;
                    if (b.oldItems != null && b.oldItems.count > 0) {
                        m = new GridSelectedItemsCollection();
                        for (let n of fromEn(b.oldItems)) {
                            m.add1(n);
                        }
                    }
                    this.selectedItemsChanged(this, ((() => {
                        let $ret = new GridSelectedItemsChangedEventArgs();
                        $ret.addedItems = k;
                        $ret.removedItems = m;
                        $ret.currentItems = this.ad;
                        return $ret;
                    })()));
                }
            }
        }
        s6(a, b) {
            if (!this.hd && this.actualDataSource != null) {
                if (!this.gy) {
                    this.gy = true;
                    switch (b.action) {
                        case 0:
                            if (b.newItems != null) {
                                for (let c = 0; c < b.newItems.count; c++) {
                                    let d = this.d9.getItemForKey(b.newItems.item(c));
                                    this.ad.ae.insert1(c + b.newStartingIndex, d);
                                }
                            }
                            break;
                        case 1:
                            if (b.oldItems != null) {
                                for (let e = 0; e < b.oldItems.count; e++) {
                                    this.ad.ae.removeAt(b.oldStartingIndex);
                                }
                            }
                            break;
                        case 2:
                            if (b.oldItems != null) {
                                for (let f = 0; f < b.oldItems.count; f++) {
                                    this.ad.ae.removeAt(b.oldStartingIndex);
                                }
                            }
                            if (b.newItems != null) {
                                for (let g = 0; g < b.newItems.count; g++) {
                                    let h = this.d9.getItemForKey(b.newItems.item(g));
                                    this.ad.ae.insert1(g + b.newStartingIndex, h);
                                }
                            }
                            break;
                        case 4:
                            this.ad.clear();
                            for (let i of fromEnum(this.ah.ae)) {
                                let j = this.d9.getItemForKey(i);
                                this.ad.add1(j);
                            }
                            break;
                    }
                    this.e0.av();
                    this.gy = false;
                }
            }
            if (this.h7) {
                if (this.selectedKeysChanged != null) {
                    let k = null;
                    if (b.newItems != null && b.newItems.count > 0) {
                        k = new GridSelectedKeysCollection();
                        for (let l of fromEn(b.newItems)) {
                            k.add(l);
                        }
                    }
                    let m = null;
                    if (b.oldItems != null && b.oldItems.count > 0) {
                        m = new GridSelectedKeysCollection();
                        for (let n of fromEn(b.oldItems)) {
                            m.add(n);
                        }
                    }
                    this.selectedKeysChanged(this, ((() => {
                        let $ret = new GridSelectedKeysChangedEventArgs();
                        $ret.addedKeys = k;
                        $ret.removedKeys = m;
                        $ret.currentKeys = this.ah;
                        return $ret;
                    })()));
                }
            }
        }
        s4(a, b) {
            switch (b.action) {
                case 0:
                case 2:
                    for (let c = 0; c < b.newItems.count; c++) {
                        (typeCast(CellKey.$, b.newItems.item(c))).d = this;
                    }
                    break;
            }
            if (!this.hd) {
                this.g0 = true;
                this.e0.au();
                this.g0 = false;
            }
            if (this.h7) {
                let d = null;
                if (b.newItems != null && b.newItems.count > 0) {
                    d = new GridSelectedCellsCollection();
                    for (let e of fromEn(b.newItems)) {
                        d.add(e);
                    }
                }
                let f = null;
                if (b.oldItems != null && b.oldItems.count > 0) {
                    f = new GridSelectedCellsCollection();
                    for (let g of fromEn(b.oldItems)) {
                        f.add(g);
                    }
                }
                if (this.selectedCellsChanged != null) {
                    this.selectedCellsChanged(this, ((() => {
                        let $ret = new GridSelectedCellsChangedEventArgs();
                        $ret.addedCells = d;
                        $ret.removedCells = f;
                        $ret.currentCells = this.dm;
                        return $ret;
                    })()));
                }
            }
        }
        s3(a, b) {
            this.g0 = true;
            this.e0.at();
            this.g0 = false;
            if (this.h7) {
                if (this.selectedCellRangesChanged != null) {
                    this.selectedCellRangesChanged(this, ((() => {
                        let $ret = new GridSelectedCellRangesChangedEventArgs();
                        $ret.currentRanges = this.dj;
                        return $ret;
                    })()));
                }
            }
        }
        se(a, b) {
            if (!this.hc && this.actualDataSource != null) {
                if (!this.gx) {
                    this.gx = true;
                    switch (b.action) {
                        case 0:
                            if (b.newItems != null) {
                                for (let c = 0; c < b.newItems.count; c++) {
                                    let d = this.d9.getItemKey(this.i(), b.newItems.item(c));
                                    this.ag.ae.insert(c + b.newStartingIndex, d);
                                    this.d9.pinRow(d);
                                }
                            }
                            break;
                        case 1:
                            if (b.oldItems != null) {
                                for (let e = 0; e < b.oldItems.count; e++) {
                                    this.d9.unpinRow(this.ag.ae._inner[b.oldStartingIndex]);
                                    this.ag.ae.removeAt(b.oldStartingIndex);
                                }
                            }
                            break;
                        case 2:
                            if (b.oldItems != null) {
                                for (let f = 0; f < b.oldItems.count; f++) {
                                    this.d9.unpinRow(this.ag.ae._inner[b.oldStartingIndex]);
                                    this.ag.ae.removeAt(b.oldStartingIndex);
                                }
                            }
                            if (b.newItems != null) {
                                for (let g = 0; g < b.newItems.count; g++) {
                                    let h = this.d9.getItemKey(this.i(), b.newItems.item(g));
                                    this.ag.ae.insert(g + b.newStartingIndex, h);
                                    this.d9.pinRow(h);
                                }
                            }
                            break;
                        case 4:
                            this.ag.clear();
                            this.d9.clearPinnedRows();
                            for (let i of fromEnum(this.ac.ae)) {
                                let j = this.d9.getItemKey(this.i(), i);
                                this.ag.add(j);
                                this.d9.pinRow(j);
                            }
                            break;
                    }
                    this.gx = false;
                }
            }
        }
        sf(a, b) {
            if (!this.hc && this.actualDataSource != null) {
                if (!this.gx) {
                    this.gx = true;
                    switch (b.action) {
                        case 0:
                            if (b.newItems != null) {
                                for (let c = 0; c < b.newItems.count; c++) {
                                    let d = this.d9.getItemForKey(b.newItems.item(c));
                                    this.ac.ae.insert1(c + b.newStartingIndex, d);
                                    this.d9.pinRow(b.newItems.item(c));
                                }
                            }
                            break;
                        case 1:
                            if (b.oldItems != null) {
                                for (let e = 0; e < b.oldItems.count; e++) {
                                    this.d9.unpinRow(b.oldItems.item(e));
                                    this.ac.ae.removeAt(b.oldStartingIndex);
                                }
                            }
                            break;
                        case 2:
                            if (b.oldItems != null) {
                                for (let f = 0; f < b.oldItems.count; f++) {
                                    this.d9.unpinRow(b.oldItems.item(f));
                                    this.ac.ae.removeAt(b.oldStartingIndex);
                                }
                            }
                            if (b.newItems != null) {
                                for (let g = 0; g < b.newItems.count; g++) {
                                    let h = this.d9.getItemForKey(b.newItems.item(g));
                                    let i = this.d9.indexOfKey(b.newItems.item(g));
                                    this.ac.ae.insert1(g + b.newStartingIndex, h);
                                    this.d9.pinRow(b.newItems.item(g));
                                }
                            }
                            break;
                        case 4:
                            this.ac.clear();
                            this.d9.clearPinnedRows();
                            for (let j of fromEnum(this.ag.ae)) {
                                let k = this.d9.getItemForKey(j);
                                this.ac.add1(k);
                                this.d9.pinRow(j);
                            }
                            break;
                    }
                    this.gx = false;
                }
            }
        }
        get ck() {
            return this.cj;
        }
        set ck(a) {
            this.cj = a;
        }
        get delayedExecutionManager() {
            return this._delayedExecutionManager;
        }
        set delayedExecutionManager(a) {
            this._delayedExecutionManager = a;
        }
        get el() {
            return this.ek;
        }
        get d9() {
            return this.d8;
        }
        set d9(a) {
            this.d8 = a;
        }
        get a2() {
            return this.a1;
        }
        set a2(a) {
            this.a1 = a;
        }
        get de() {
            return this.dd;
        }
        set de(a) {
            this.dd = a;
        }
        get e6() {
            return this.e5;
        }
        set e6(a) {
            this.e5 = a;
        }
        get c9() {
            return this.c8;
        }
        set c9(a) {
            this.c8 = a;
        }
        get e0() {
            return this.ez;
        }
        set e0(a) {
            this.ez = a;
        }
        get aj() {
            return this.ai;
        }
        set aj(a) {
            this.ai = a;
        }
        get e4() {
            return this.e3;
        }
        set e4(a) {
            this.e3 = a;
        }
        get tickProvider() {
            return this.fz;
        }
        set tickProvider(a) {
            this.fz = a;
            this.c8 = new GridEffectManager(this.fz, this);
        }
        get ey() {
            return this.ex;
        }
        set ey(a) {
            let b = this.ex;
            this.ex = a;
            if (this.ex == null) {
                this.ex = new SectionHeader();
            }
            this.ex.grid = this;
            if (b != this.ex) {
                this.rz("SectionHeader", b, this.ex);
            }
        }
        get ew() {
            return this.ev;
        }
        set ew(a) {
            this.ev = a;
        }
        get e8() {
            return this.e7;
        }
        set e8(a) {
            let b = this.e7;
            this.e7 = a;
            if (this.e7 == null) {
                this.e7 = new SummaryRowRoot();
            }
            this.e7.grid = this;
            if (b != this.e7) {
                this.rz("SummaryRowRoot", b, this.e7);
            }
        }
        get fa() {
            return this.e9;
        }
        set fa(a) {
            let b = this.e9;
            this.e9 = a;
            if (this.e9 == null) {
                this.e9 = new SummaryRowSection();
            }
            this.e9.grid = this;
            if (b != this.e9) {
                this.rz("SummaryRowSection", b, this.e9);
            }
        }
        get eu() {
            return this.et;
        }
        set eu(a) {
            let b = this.et;
            this.et = a;
            if (b != this.et) {
                this.rz("RowSeparator", b, this.et);
            }
        }
        get d2() {
            return this.d1;
        }
        set d2(a) {
            let b = this.d1;
            this.d1 = a;
            if (b != this.d1) {
                this.rz("HeaderRowSeparator", b, this.d1);
            }
        }
        get d4() {
            return this.d3;
        }
        set d4(a) {
            let b = this.d3;
            this.d3 = a;
            if (b != this.d3) {
                this.rz("HeaderSeparator", b, this.d3);
            }
        }
        get bw() {
            return this.bv;
        }
        set bw(a) {
            let b = this.bv;
            this.bv = a;
            if (b != this.bv) {
                this.rz("ColumnResizingSeparator", b, this.bv);
            }
        }
        get bi() {
            return this.bh;
        }
        set bi(a) {
            let b = this.bh;
            this.bh = a;
            if (b != this.bh) {
                this.rz("ColumnMovingSeparator", b, this.bh);
            }
        }
        get ei() {
            return this.eh;
        }
        set ei(a) {
            let b = this.eh;
            this.eh = a;
            if (b != this.eh) {
                this.rz("PinnedAreaSeparator", b, this.eh);
            }
        }
        get f() {
            return this.b;
        }
        set f(a) {
            let b = this.b;
            this.b = a;
            if (b != this.b) {
                this.rz("AutoGenerateDesiredColumns", b, this.b);
            }
        }
        get g() {
            return this.c;
        }
        set g(a) {
            let b = this.c;
            this.c = a;
            if (b != this.c) {
                this.rz("DataSourceDesiredProperties", b, this.c);
            }
        }
        get fc() {
            return this.fb;
        }
        set fc(a) {
            this.fb = a;
        }
        get viewportManager() {
            return this._viewportManager;
        }
        set viewportManager(a) {
            this._viewportManager = a;
        }
        get jm() {
            return this.i5;
        }
        set jm(a) {
            this.i5 = a;
        }
        get jl() {
            return this.i4;
        }
        set jl(a) {
            this.i4 = a;
        }
        get fg() {
            return this.ff;
        }
        set fg(a) {
            let b = this.ff;
            this.ff = a;
            if (b != this.ff) {
                this.rz("Density", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, this.ff));
            }
        }
        get kl() {
            return this.jz;
        }
        set kl(a) {
            let b = this.jz;
            this.jz = a;
            if (b != this.jz) {
                this.rz("ActualRowHeight", b, this.jz);
            }
        }
        get le() {
            return this.kb;
        }
        set le(a) {
            let b = this.kb;
            this.kb = a;
            if (b != this.kb) {
                this.rz("RowHeight", b, this.kb);
            }
        }
        get defaultColumnWidth() {
            return this.b8;
        }
        set defaultColumnWidth(a) {
            let b = this.b8;
            this.b8 = a;
            if (b != this.b8) {
                this.rz("DefaultColumnWidth", b, this.b8);
            }
        }
        get jn() {
            return this.i7;
        }
        set jn(a) {
            let b = this.i7;
            this.i7 = a;
            if (b != this.i7) {
                this.rz("DefaultColumnMinWidth", b, this.i7);
            }
        }
        get kk() {
            return this.jy;
        }
        set kk(a) {
            let b = this.jy;
            this.jy = a;
            if (b != this.jy) {
                this.rz("ActualHeaderHeight", b, this.jy);
            }
        }
        get k6() {
            return this.j4;
        }
        set k6(a) {
            let b = this.j4;
            this.j4 = a;
            if (b != this.j4) {
                this.rz("HeaderHeight", b, this.j4);
            }
        }
        get lk() {
            return this.kg;
        }
        set lk(a) {
            let b = this.kg;
            this.kg = a;
            if (b != this.kg) {
                this.rz("SectionHeaderHeight", b, this.kg);
            }
        }
        get itemsSource() {
            return this.ln;
        }
        set itemsSource(a) {
            let b = this.ln;
            this.ln = a;
            if (b != this.ln) {
                this.rz("ItemsSource", b, this.ln);
            }
        }
        get li() {
            return this.kf;
        }
        set li(a) {
            let b = this.kf;
            this.kf = a;
            if (b != this.kf) {
                this.rz("SectionFooterHeight", b, this.kf);
            }
        }
        get lh() {
            return this.kd;
        }
        set lh(a) {
            let b = this.kd;
            this.kd = a;
            if (b != this.kd) {
                this.rz("RowSpacingHeight", b, this.kd);
            }
        }
        get kq() {
            return this.j2;
        }
        set kq(a) {
            let b = this.j2;
            this.j2 = a;
            if (b != this.j2) {
                this.rz("ColumnSpacingWidth", b, this.j2);
            }
        }
        get d0() {
            return this.dz;
        }
        set d0(a) {
            let b = this.dz;
            this.dz = a;
            if (b != this.dz) {
                this.rz("HeaderClickAction", enumGetBox(HeaderClickAction_$type, b), enumGetBox(HeaderClickAction_$type, this.dz));
                if ((this.dz == 0 || this.dz == 2) && (b == 1 || b == 3)) {
                    this.e4.h();
                }
            }
        }
        get cf() {
            return this.ce;
        }
        set cf(a) {
            let b = this.ce;
            this.ce = a;
            if (b != this.ce) {
                this.rz("EditMode", enumGetBox(EditModeType_$type, b), enumGetBox(EditModeType_$type, this.ce));
            }
        }
        get cd() {
            return this.cc;
        }
        set cd(a) {
            let b = this.cc;
            this.cc = a;
            if (b != this.cc) {
                this.rz("EditModeClickAction", enumGetBox(EditModeClickAction_$type, b), enumGetBox(EditModeClickAction_$type, this.cc));
            }
        }
        get g3() {
            return this.f4;
        }
        set g3(a) {
            let b = this.f4;
            this.f4 = a;
            if (b != this.f4) {
                this.rz("AutoGenerateColumns", b, this.f4);
            }
        }
        get lg() {
            return this.kc;
        }
        set lg(a) {
            let b = this.kc;
            this.kc = a;
            if (b != this.kc) {
                this.rz("RowSeparatorHeight", b, this.kc);
            }
        }
        get hy() {
            return this.gj;
        }
        set hy(a) {
            let b = this.gj;
            this.gj = a;
            if (b != this.gj) {
                this.rz("IsPlaceholderRenderingEnabled", b, this.gj);
            }
        }
        hi(a) {
            return this.b1(a) != 1 && this.hj;
        }
        b1(a) {
            if (this.bx == 0) {
                return a.e4();
            }
            return this.bx;
        }
        get bz() {
            return this.bx;
        }
        set bz(a) {
            let b = this.bx;
            this.bx = a;
            this.rz("ColumnAddingAnimationMode", enumGetBox(ColumnShowingAnimationMode_$type, b), enumGetBox(ColumnShowingAnimationMode_$type, this.bx));
        }
        get ho() {
            return this.bo != 1 && this.hj;
        }
        get columnPropertyUpdatingAnimationMode() {
            return this.bo;
        }
        set columnPropertyUpdatingAnimationMode(a) {
            let b = this.bo;
            this.bo = a;
            this.rz("ColumnPropertyUpdatingAnimationMode", enumGetBox(ColumnPropertyUpdatingAnimationMode_$type, b), enumGetBox(ColumnPropertyUpdatingAnimationMode_$type, this.bo));
        }
        get hj() {
            return this.renderingEngine.initialRefreshFinished;
        }
        get hf() {
            return this.ak != 1;
        }
        get al() {
            return this.ak;
        }
        set al(a) {
            let b = this.ak;
            this.ak = a;
            this.rz("CellDataLoadedAnimationMode", enumGetBox(CellDataLoadedAnimationMode_$type, b), enumGetBox(CellDataLoadedAnimationMode_$type, this.ak));
        }
        get h5() {
            return this.er != 1;
        }
        get es() {
            return this.er;
        }
        set es(a) {
            let b = this.er;
            this.er = a;
            this.rz("RowSelectionAnimationMode", enumGetBox(RowSelectionAnimationMode_$type, b), enumGetBox(RowSelectionAnimationMode_$type, this.er));
        }
        get h3() {
            return this.eo != 1;
        }
        get ep() {
            return this.eo;
        }
        set ep(a) {
            let b = this.eo;
            this.eo = a;
            if (b != this.eo) {
                this.rz("RowHoverAnimationMode", enumGetBox(RowHoverAnimationMode_$type, b), enumGetBox(RowHoverAnimationMode_$type, this.eo));
            }
        }
        get hg() {
            return this.av != 1;
        }
        get aw() {
            return this.av;
        }
        set aw(a) {
            let b = this.av;
            this.av = a;
            this.rz("CellSelectionAnimationMode", enumGetBox(CellSelectionAnimationMode_$type, b), enumGetBox(CellSelectionAnimationMode_$type, this.av));
        }
        get cz() {
            return this.cy;
        }
        set cz(a) {
            let b = this.cy;
            this.cy = a;
            if (b != this.cy) {
                this.rz("ColumnAnimationSettings", b, this.cy);
            }
        }
        get cm() {
            return this.cl;
        }
        set cm(a) {
            let b = this.cl;
            this.cl = a;
            if (b != this.cl) {
                this.rz("AnimationSettings", b, this.cl);
            }
        }
        hp(a) {
            return this.bs(a) != 1 && this.hj;
        }
        bs(a) {
            if (this.bq == 0) {
                return a.e3();
            }
            return this.bq;
        }
        get br() {
            return this.bq;
        }
        set br(a) {
            let b = this.bq;
            this.bq = a;
            this.rz("ColumnResizingAnimationMode", enumGetBox(ColumnResizingAnimationMode_$type, b), enumGetBox(ColumnResizingAnimationMode_$type, this.bq));
        }
        hq(a) {
            return this.b2(a) != 1 && this.hj;
        }
        b2(a) {
            if (this.by == 0) {
                return a.e4();
            }
            return this.by;
        }
        get b0() {
            return this.by;
        }
        set b0(a) {
            let b = this.by;
            this.by = a;
            this.rz("ColumnShowingAnimationMode", enumGetBox(ColumnShowingAnimationMode_$type, b), enumGetBox(ColumnShowingAnimationMode_$type, this.by));
        }
        hm(a) {
            return this.be(a) != 1 && this.hj && !this.iz;
        }
        be(a) {
            if (this.bc == 0) {
                return 2;
            }
            return this.bc;
        }
        get bd() {
            return this.bc;
        }
        set bd(a) {
            let b = this.bc;
            this.bc = a;
            this.rz("ColumnMovingAnimationMode", enumGetBox(ColumnMovingAnimationMode_$type, b), enumGetBox(ColumnMovingAnimationMode_$type, this.bc));
        }
        hl(a) {
            return this.bb(a) != 1 && this.hj;
        }
        bb(a) {
            if (this.a9 == 0) {
                return a.eu();
            }
            return this.a9;
        }
        get ba() {
            return this.a9;
        }
        set ba(a) {
            let b = this.a9;
            this.a9 = a;
            this.rz("ColumnHidingAnimationMode", enumGetBox(ColumnHidingAnimationMode_$type, b), enumGetBox(ColumnHidingAnimationMode_$type, this.a9));
        }
        hk(a) {
            return this.a5(a) != 1 && this.hj;
        }
        a5(a) {
            if (this.a3 == 0) {
                return a.et();
            }
            return this.a3;
        }
        get a4() {
            return this.a3;
        }
        set a4(a) {
            let b = this.a3;
            this.a3 = a;
            this.rz("ColumnExchangingAnimationMode", enumGetBox(ColumnExchangingAnimationMode_$type, b), enumGetBox(ColumnExchangingAnimationMode_$type, this.a3));
        }
        get inset() {
            return this.vv;
        }
        set inset(a) {
            let b = this.vv;
            this.vv = a;
            if (b != this.vv) {
                this.rz("Inset", b, this.vv);
            }
        }
        get dt() {
            return this.ds;
        }
        set dt(a) {
            let b = this.ds;
            this.ds = a;
            if (b != this.ds) {
                this.rz("SelectionMode", enumGetBox(GridSelectionMode_$type, b), enumGetBox(GridSelectionMode_$type, this.ds));
            }
        }
        get ch() {
            return this.cg;
        }
        set ch(a) {
            let b = this.cg;
            this.cg = a;
            if (b != this.cg) {
                this.rz("ActivationMode", enumGetBox(GridActivationMode_$type, b), enumGetBox(GridActivationMode_$type, this.cg));
            }
        }
        get dr() {
            return this.dq;
        }
        set dr(a) {
            let b = this.dq;
            this.dq = a;
            if (b != this.dq) {
                this.rz("SelectionBehavior", enumGetBox(GridSelectionBehavior_$type, b), enumGetBox(GridSelectionBehavior_$type, this.dq));
            }
        }
        get hd() {
            return this.f8;
        }
        set hd(a) {
            this.f8 = a;
        }
        get ad() {
            return this.ab;
        }
        get ah() {
            return this.af;
        }
        get dm() {
            return this.dl;
        }
        get dj() {
            return this.di;
        }
        get hc() {
            return this.f7;
        }
        set hc(a) {
            this.f7 = a;
        }
        get ac() {
            return this.aa;
        }
        get ag() {
            return this.ae;
        }
        te(a, b) {
            if (this.actualDataSource == null) {
                return;
            }
            if (a.ae.count > 0 && b.ae.count == 0) {
                let c = this.i();
                for (let d of fromEnum(a.ae)) {
                    let e = this.d9.getItemKey(c, d);
                    b.ae.add(e);
                }
            }
            else if (a.ae.count == 0 && b.ae.count > 0) {
                for (let f of fromEnum(b.ae)) {
                    let g = this.d9.getItemForKey(f);
                    a.ae.add1(g);
                }
            }
            else {
                a.ae.clear();
                for (let h of fromEnum(b.ae)) {
                    let i = this.d9.getItemForKey(h);
                    a.ae.add1(i);
                }
            }
        }
        get hn() {
            return this.gb;
        }
        set hn(a) {
            let b = this.gb;
            this.gb = a;
            if (b != this.gb) {
                this.rz("IsColumnOptionsEnabled", b, this.gb);
            }
        }
        get hu() {
            return this.gh;
        }
        set hu(a) {
            let b = this.gh;
            this.gh = a;
            if (b != this.gh) {
                this.rz("IsGroupRowSticky", b, this.gh);
            }
        }
        get hv() {
            return this.gi;
        }
        set hv(a) {
            let b = this.gi;
            this.gi = a;
            if (b != this.gi) {
                this.rz("IsHeaderSeparatorVisible", b, this.gi);
            }
        }
        get ut() {
            return this.tw;
        }
        set ut(a) {
            let b = this.tw;
            this.tw = a;
            if (b != this.tw) {
                this.rz("CellSelectedBackground", b, this.tw);
            }
        }
        get vd() {
            return this.ug;
        }
        set vd(a) {
            let b = this.ug;
            this.ug = a;
            if (b != this.ug) {
                this.rz("SectionHeaderSelectedBackground", b, this.ug);
            }
        }
        get vg() {
            return this.uj;
        }
        set vg(a) {
            let b = this.uj;
            this.uj = a;
            if (b != this.uj) {
                this.rz("SummaryRootBackground", b, this.uj);
            }
        }
        get vk() {
            return this.un;
        }
        set vk(a) {
            let b = this.un;
            this.un = a;
            if (b != this.un) {
                this.rz("SummarySectionBackground", b, this.un);
            }
        }
        get jp() {
            return this.jg;
        }
        set jp(a) {
            let b = this.jg;
            this.jg = a;
            if (b != this.jg) {
                this.rz("PinnedRowOpacity", b, this.jg);
            }
        }
        get fq() {
            return this.fi;
        }
        set fq(a) {
            let b = this.fi;
            this.fi = a;
            if (b != this.fi) {
                this.rz("EditTextStyle", b, this.fi);
            }
        }
        get jo() {
            return this.jc;
        }
        set jo(a) {
            let b = this.jc;
            this.jc = a;
            if (b != this.jc) {
                this.rz("EditOpacity", b, this.jc);
            }
        }
        get uy() {
            return this.t1;
        }
        set uy(a) {
            let b = this.t1;
            this.t1 = a;
            if (b != this.t1) {
                this.rz("DeletedTextColor", b, this.t1);
            }
        }
        get vf() {
            return this.ui;
        }
        set vf(a) {
            let b = this.ui;
            this.ui = a;
            if (b != this.ui) {
                this.rz("StickyRowBackground", b, this.ui);
            }
        }
        get u6() {
            return this.t9;
        }
        set u6(a) {
            let b = this.t9;
            this.t9 = a;
            if (b != this.t9) {
                this.rz("PinnedRowBackground", b, this.t9);
            }
        }
        get u5() {
            return this.t8;
        }
        set u5(a) {
            let b = this.t8;
            this.t8 = a;
            if (b != this.t8) {
                this.rz("LastStickyRowBackground", b, this.t8);
            }
        }
        get cw() {
            return this.cu;
        }
        set cw(a) {
            let b = this.cu;
            this.cu = a;
            if (b != this.cu) {
                this.rz("ActiveCell", b, this.cu);
            }
        }
        get us() {
            return this.tv;
        }
        set us(a) {
            let b = this.tv;
            this.tv = a;
            if (b != this.tv) {
                this.rz("CellBackground", b, this.tv);
            }
        }
        get uu() {
            return this.tx;
        }
        set uu(a) {
            let b = this.tx;
            this.tx = a;
            if (b != this.tx) {
                this.rz("CellTextColor", b, this.tx);
            }
        }
        get u3() {
            return this.t6;
        }
        set u3(a) {
            let b = this.t6;
            this.t6 = a;
            if (b != this.t6) {
                this.rz("HeaderSortIndicatorColor", b, this.t6);
            }
        }
        get e2() {
            return this.e1;
        }
        set e2(a) {
            let b = this.e1;
            this.e1 = a;
            if (b != this.e1) {
                this.rz("HeaderSortIndicatorStyle", enumGetBox(SortIndicatorStyle_$type, b), enumGetBox(SortIndicatorStyle_$type, this.e1));
            }
        }
        get fp() {
            return this.fh;
        }
        set fp(a) {
            let b = this.fh;
            this.fh = a;
            if (b != this.fh) {
                this.rz("CellTextStyle", b, this.fh);
            }
        }
        get vc() {
            return this.uf;
        }
        set vc(a) {
            let b = this.uf;
            this.uf = a;
            if (b != this.uf) {
                this.rz("SectionHeaderBackground", b, this.uf);
            }
        }
        get ve() {
            return this.uh;
        }
        set ve(a) {
            let b = this.uh;
            this.uh = a;
            if (b != this.uh) {
                this.rz("SectionHeaderTextColor", b, this.uh);
            }
        }
        get fs() {
            return this.fk;
        }
        set fs(a) {
            let b = this.fk;
            this.fk = a;
            if (b != this.fk) {
                this.rz("SectionHeaderTextStyle", b, this.fk);
            }
        }
        get ft() {
            return this.fl;
        }
        set ft(a) {
            let b = this.fl;
            this.fl = a;
            if (b != this.fl) {
                this.rz("SummaryRootLabelTextStyle", b, this.fl);
            }
        }
        get fv() {
            return this.fn;
        }
        set fv(a) {
            let b = this.fn;
            this.fn = a;
            if (b != this.fn) {
                this.rz("SummarySectionLabelTextStyle", b, this.fn);
            }
        }
        get vj() {
            return this.um;
        }
        set vj(a) {
            let b = this.um;
            this.um = a;
            if (b != this.um) {
                this.rz("SummaryRootValueTextColor", b, this.um);
            }
        }
        get fu() {
            return this.fm;
        }
        set fu(a) {
            let b = this.fm;
            this.fm = a;
            if (b != this.fm) {
                this.rz("SummaryRootValueTextStyle", b, this.fm);
            }
        }
        get fw() {
            return this.fo;
        }
        set fw(a) {
            let b = this.fo;
            this.fo = a;
            if (b != this.fo) {
                this.rz("SummarySectionValueTextStyle", b, this.fo);
            }
        }
        get vn() {
            return this.uq;
        }
        set vn(a) {
            let b = this.uq;
            this.uq = a;
            if (b != this.uq) {
                this.rz("SummarySectionValueTextColor", b, this.uq);
            }
        }
        get vh() {
            return this.uk;
        }
        set vh(a) {
            let b = this.uk;
            this.uk = a;
            if (b != this.uk) {
                this.rz("SummaryRootLabelTextColor", b, this.uk);
            }
        }
        get vl() {
            return this.uo;
        }
        set vl(a) {
            let b = this.uo;
            this.uo = a;
            if (b != this.uo) {
                this.rz("SummarySectionLabelTextColor", b, this.uo);
            }
        }
        get vi() {
            return this.ul;
        }
        set vi(a) {
            let b = this.ul;
            this.ul = a;
            if (b != this.ul) {
                this.rz("SummaryRootSelectedBackground", b, this.ul);
            }
        }
        get vm() {
            return this.up;
        }
        set vm(a) {
            let b = this.up;
            this.up = a;
            if (b != this.up) {
                this.rz("SummarySectionSelectedBackground", b, this.up);
            }
        }
        get lc() {
            return this.j9;
        }
        set lc(a) {
            let b = this.j9;
            this.j9 = a;
            if (b != this.j9) {
                this.rz("PinnedAreaSeparatorWidth", b, this.j9);
            }
        }
        get la() {
            return this.j5;
        }
        set la(a) {
            let b = this.j5;
            this.j5 = a;
            if (b != this.j5) {
                this.rz("HeaderSeparatorWidth", b, this.j5);
            }
        }
        km(a) {
            let b = 3;
            let c = Math.max(b - a, 0);
            if (c % 2 == 1) {
                c += 1;
            }
            return intDivide(c, 2);
        }
        get u2() {
            return this.t5;
        }
        set u2(a) {
            let b = this.t5;
            this.t5 = a;
            if (b != this.t5) {
                this.rz("HeaderSeparatorBackground", b, this.t5);
            }
        }
        get u0() {
            return this.t3;
        }
        set u0(a) {
            let b = this.t3;
            this.t3 = a;
            if (b != this.t3) {
                this.rz("HeaderBackground", b, this.t3);
            }
        }
        get u4() {
            return this.t7;
        }
        set u4(a) {
            let b = this.t7;
            this.t7 = a;
            if (b != this.t7) {
                this.rz("HeaderTextColor", b, this.t7);
            }
        }
        get fr() {
            return this.fj;
        }
        set fr(a) {
            let b = this.fj;
            this.fj = a;
            if (b != this.fj) {
                this.rz("HeaderTextStyle", b, this.fj);
            }
        }
        get u8() {
            return this.ub;
        }
        set u8(a) {
            let b = this.ub;
            this.ub = a;
            if (b != this.ub) {
                this.rz("RowSeparatorBackground", b, this.ub);
            }
        }
        get u1() {
            return this.t4;
        }
        set u1(a) {
            let b = this.t4;
            this.t4 = a;
            if (b != this.t4) {
                this.rz("HeaderRowSeparatorBackground", b, this.t4);
            }
        }
        get vb() {
            return this.ue;
        }
        set vb(a) {
            let b = this.ue;
            this.ue = a;
            if (b != this.ue) {
                this.rz("RowSeparatorStickyRowBackground", b, this.ue);
            }
        }
        get u9() {
            return this.uc;
        }
        set u9(a) {
            let b = this.uc;
            this.uc = a;
            if (b != this.uc) {
                this.rz("RowSeparatorLastStickyRowBackground", b, this.uc);
            }
        }
        get va() {
            return this.ud;
        }
        set va(a) {
            let b = this.ud;
            this.ud = a;
            if (b != this.ud) {
                this.rz("RowSeparatorPinnedRowBackground", b, this.ud);
            }
        }
        get kp() {
            return this.j1;
        }
        set kp(a) {
            let b = this.j1;
            this.j1 = a;
            if (b != this.j1) {
                this.rz("ColumnResizingSeparatorWidth", b, this.j1);
            }
        }
        get kn() {
            return this.j0;
        }
        set kn(a) {
            let b = this.j0;
            this.j0 = a;
            if (b != this.j0) {
                this.rz("ColumnMovingSeparatorWidth", b, this.j0);
            }
        }
        get ux() {
            return this.t0;
        }
        set ux(a) {
            let b = this.t0;
            this.t0 = a;
            if (b != this.t0) {
                this.rz("ColumnResizingSeparatorBackground", b, this.t0);
            }
        }
        get uv() {
            return this.ty;
        }
        set uv(a) {
            let b = this.ty;
            this.ty = a;
            if (b != this.ty) {
                this.rz("ColumnMovingSeparatorBackground", b, this.ty);
            }
        }
        get iv() {
            return this.gu;
        }
        set iv(a) {
            let b = this.gu;
            this.gu = a;
            if (b != this.gu) {
                this.rz("ShiftSectionContent", b, this.gu);
            }
        }
        get bk() {
            return this.bj;
        }
        set bk(a) {
            let b = this.bj;
            this.bj = a;
            if (b != this.bj) {
                this.rz("ColumnOptionsIconAlignment", enumGetBox(ColumnOptionsIconAlignment_$type, b), enumGetBox(ColumnOptionsIconAlignment_$type, this.bj));
            }
        }
        get uw() {
            return this.tz;
        }
        set uw(a) {
            let b = this.tz;
            this.tz = a;
            if (b != this.tz) {
                this.rz("ColumnOptionsIconColor", b, this.tz);
            }
        }
        get bm() {
            return this.bl;
        }
        set bm(a) {
            let b = this.bl;
            this.bl = a;
            if (b != this.bl) {
                this.rz("ColumnOptionsIconBehavior", enumGetBox(ColumnOptionsIconBehavior_$type, b), enumGetBox(ColumnOptionsIconBehavior_$type, this.bl));
            }
        }
        get border() {
            return this.tu;
        }
        set border(a) {
            let b = this.tu;
            this.tu = a;
            if (b != this.tu) {
                this.rz("Border", b, this.tu);
            }
        }
        get vz() {
            return this.vt;
        }
        set vz(a) {
            let b = this.vt;
            this.vt = a;
            if (b != this.vt) {
                this.rz("DefaultBorderWidth", b, this.vt);
            }
        }
        get vw() {
            return this.vr;
        }
        set vw(a) {
            let b = this.vr;
            this.vr = a;
            if (b != this.vr) {
                this.rz("ActualBorderWidth", b, this.vr);
            }
        }
        get vx() {
            return this.vs;
        }
        set vx(a) {
            let b = this.vs;
            this.vs = a;
            if (b != this.vs) {
                this.rz("BorderWidth", b, this.vs);
            }
        }
        get h7() {
            return this.go;
        }
        set h7(a) {
            let b = this.go;
            this.go = a;
            if (b != this.go) {
                this.rz("NotifyOnAllSelectionChanges", b, this.go);
            }
        }
        get tt() {
            return this.tp;
        }
        set tt(a) {
            let b = this.tp;
            this.tp = a;
            if (b != this.tp) {
                this.rz("DefaultCornerRadius", b, this.tp);
            }
        }
        get ts() {
            return this.to;
        }
        set ts(a) {
            let b = this.to;
            this.to = a;
            if (b != this.to) {
                this.rz("CornerRadius", b, this.to);
            }
        }
        get tq() {
            return this.tn;
        }
        set tq(a) {
            let b = this.tn;
            this.tn = a;
            if (b != this.tn) {
                this.rz("ActualCornerRadius", b, this.tn);
            }
        }
        get he() {
            return this.ga;
        }
        set he(a) {
            let b = this.ga;
            this.ga = a;
            if (this.ga != b) {
                this.rz("IsActiveCellStyleEnabled", b, this.ga);
            }
        }
        get platformPixelConverter() {
            return this.fx;
        }
        set platformPixelConverter(a) {
            this.fx = a;
        }
        get renderingEngine() {
            return this.d6;
        }
        set renderingEngine(a) {
            this.d6 = a;
            this.r1(this.d6);
        }
        r1(a) {
            if (a != null) {
                a.refresh(this.model, false);
            }
        }
        get en() {
            return this.em;
        }
        get model() {
            return this.fd;
        }
        set model(a) {
            this.fd = a;
        }
        get vp() {
            return new Rect(0, this.fd.b3, this.fd.b8, this.fd.b9, this.fd.by);
        }
        get b4() {
            return this.b3;
        }
        get a7() {
            return this.a6;
        }
        get v() {
            return this.u;
        }
        get b7() {
            return this.b6;
        }
        get t() {
            return this.s;
        }
        set t(a) {
            let b = this.s;
            this.s = a;
            this.gw = true;
            if (b != this.s) {
                this.rz("SummaryScope", enumGetBox(DataSourceSummaryScope_$type, b), enumGetBox(DataSourceSummaryScope_$type, this.s));
            }
        }
        get hs() {
            return this.gd;
        }
        set hs(a) {
            let b = this.gd;
            this.gd = a;
            this.ge = true;
            if (b != this.gd) {
                this.rz("IsGroupCollapsable", b, this.gd);
            }
        }
        get r() {
            return this.q;
        }
        set r(a) {
            let b = this.q;
            this.q = a;
            this.f5 = true;
            if (b != this.q) {
                this.rz("GroupHeaderDisplayMode", enumGetBox(DataSourceSectionHeaderDisplayMode_$type, b), enumGetBox(DataSourceSectionHeaderDisplayMode_$type, this.q));
            }
        }
        get ht() {
            return this.gf;
        }
        set ht(a) {
            let b = this.gf;
            this.gf = a;
            this.gg = true;
            if (b != this.gf) {
                this.rz("IsGroupExpandedDefault", b, this.gf);
            }
        }
        get dy() {
            return this.dx;
        }
        set dy(a) {
            let b = this.dx;
            this.dx = a;
            this.f6 = true;
            if (b != this.dx) {
                this.rz("GroupSummaryDisplayMode", enumGetBox(GroupSummaryDisplayMode_$type, b), enumGetBox(GroupSummaryDisplayMode_$type, this.dx));
            }
        }
        get g2() {
            return this.f3;
        }
        set g2(a) {
            this.f3 = a;
        }
        rz(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            this.sg(a, b, c);
        }
        su() {
        }
        sl() {
            if (this.i5 == 0) {
                return;
            }
            let a = this.model.absoluteWidth;
            let b = this.model.absoluteHeight;
            this.ip = true;
            this.e6.r(this, this.model, truncate(this.jm));
            if (a != this.model.absoluteWidth || b != this.model.absoluteHeight) {
                this.externalGrid.onContentSizeChanged();
            }
            this.ip = false;
            this.fc.v();
            this.renderingEngine.invalidateVisibility(() => this.fc.l(this));
            this.renderingEngine.refresh(this.model, false);
        }
        sm() {
            if (this.f9) {
                this.p5();
            }
            else {
                this.renderingEngine.invalidateVisibility(() => this.fc.l(this));
                this.renderingEngine.refresh(this.model, true);
            }
        }
        p5() {
            if (this.f9) {
                this.f9 = false;
                this.sl();
                this.qe();
            }
        }
        get ip() {
            return this.gt;
        }
        set ip(a) {
            this.gt = a;
        }
        sk() {
            if (this.gt) {
                return;
            }
            this.renderingEngine.invalidateVisibility(() => this.fc.l(this));
            this.renderingEngine.refresh(this.model, false);
        }
        p4() {
            if (this.actualDataSource != null) {
                this.actualDataSource.flushAutoRefresh();
            }
            this.c9.an(true);
            this.renderingEngine.refresh(this.model, true);
        }
        get actualDataSource() {
            return this.w;
        }
        set actualDataSource(a) {
            let b = this.w;
            this.w = a;
            if (this.w != b) {
                this.rz("ActualDataSource", b, this.w);
            }
        }
        get l() {
            return this.d;
        }
        set l(a) {
            let b = this.d;
            this.d = a;
            if (this.d != b) {
                this.rz("PrimaryKey", b, this.d);
            }
        }
        get e() {
            return this.a;
        }
        set e(a) {
            let b = this.a;
            this.a = a;
            if (this.a != b) {
                this.rz("ActualPrimaryKey", b, this.a);
            }
        }
        get g1() {
            return this.f2;
        }
        set g1(a) {
            this.f2 = a;
        }
        sg(a, b, c) {
            if (a == "ItemsSource") {
                if (this.w != null) {
                    let d = this.w;
                    d.schemaChanged = delegateRemove(d.schemaChanged, runOn(this, this.pz));
                    if (this.y != null) {
                        let e = this.y;
                        e.dataCommitted = delegateRemove(e.dataCommitted, runOn(this, this.py));
                    }
                    this.w.updateNotifier = null;
                    this.b4.b = null;
                    this.a7.b = null;
                    this.v.syncTarget = null;
                    this.b7.b = null;
                    this.e = this.m();
                }
                if (typeCast(IDataSource_$type, this.itemsSource) !== null) {
                    this.actualDataSource = this.itemsSource;
                }
                else {
                    let f = this.externalGrid.createLocalDataSource(this.itemsSource);
                    this.actualDataSource = f;
                }
                if (this.w != null) {
                    this.y = typeCast(IEditableDataSource_$type, this.actualDataSource);
                    let g = this.w;
                    g.schemaChanged = delegateCombine(g.schemaChanged, runOn(this, this.pz));
                    if (this.y != null) {
                        let h = this.y;
                        h.dataCommitted = delegateCombine(h.dataCommitted, runOn(this, this.py));
                    }
                    this.w.updateNotifier = new DataSourceNotificationBridge(this);
                    if (this.w.isVirtual) {
                        this.model.bl = this.hy;
                    }
                    if (this.io) {
                        this.b4.b = this.w.sortDescriptions;
                    }
                    if (this.im) {
                        this.a7.b = this.w.groupDescriptions;
                    }
                    if (this.il) {
                        this.v.syncTarget = this.w.filterExpressions;
                    }
                    this.b7.b = this.w.summaryDescriptions;
                    this.w.propertiesRequested = this.n();
                    if (this.l != null) {
                        this.actualDataSource.primaryKey = this.l;
                    }
                    this.e = this.m();
                    if (this.w.actualSchema != null) {
                        this.delayedExecutionManager.executeIn(() => this.rl(), 0);
                        this.d8.setDataSource(this.w);
                    }
                    this.hd = true;
                    this.hc = true;
                    this.gy = true;
                    this.gx = true;
                    this.te(this.ad, this.ah);
                    this.te(this.ac, this.ag);
                    this.e0.av();
                    this.hd = false;
                    this.hc = false;
                    this.gy = false;
                    this.gx = false;
                    for (let i = 0; i < this.ag.ae.count; ++i) {
                        this.d9.pinRow(this.ag.ae._inner[i]);
                    }
                    if (this.ge) {
                        this.actualDataSource.isSectionCollapsable = this.hs;
                    }
                    if (this.f5) {
                        this.actualDataSource.sectionHeaderDisplayMode = this.r;
                    }
                    if (this.gw) {
                        this.actualDataSource.summaryScope = this.t;
                    }
                    if (this.gg) {
                        this.actualDataSource.isSectionExpandedDefault = this.ht;
                    }
                    if (this.f6) {
                        switch (this.dy) {
                            case 1:
                            case 0:
                            case 4:
                                this.actualDataSource.includeSummaryRowsInSection = false;
                                break;
                            case 2:
                                this.actualDataSource.includeSummaryRowsInSection = true;
                                this.actualDataSource.isSectionSummaryRowsAtBottom = false;
                                break;
                            case 3:
                                this.actualDataSource.includeSummaryRowsInSection = true;
                                this.actualDataSource.isSectionSummaryRowsAtBottom = true;
                                break;
                        }
                    }
                    this.tg();
                }
            }
            if (a == "AutoGenerateColumns") {
                this.a2.p = this.g3;
            }
            if (a == "AutoGenerateDesiredColumns") {
                this.a2.b = this.f;
            }
            if (a == "IsPlaceholderRenderingEnabled") {
                if (this.w != null && this.w.isVirtual) {
                    this.model.bl = this.hy;
                }
            }
            if (a == "ColumnResizingMode") {
                this.hw = this.ir();
            }
            if (a == "ActivationMode") {
                this.hh = this.iq();
            }
            if (a == "SelectionMode") {
                this.hh = this.iq();
                switch (this.dt) {
                    case 1:
                        if (this.dj.count > 0) {
                            this.dj.clear();
                        }
                        if (this.dm.count > 0) {
                            this.dm.clear();
                        }
                        if (this.ah.count > 1) {
                            let j = this.ah._inner[this.ah.count - 1];
                            this.ah.clear();
                            this.ah.add(j);
                        }
                        break;
                    case 2:
                        if (this.dj.count > 0) {
                            this.dj.clear();
                        }
                        if (this.dm.count > 0) {
                            this.dm.clear();
                        }
                        break;
                    case 3:
                        if (this.ah.count > 0) {
                            this.ah.clear();
                        }
                        if (this.dj.count > 0) {
                            this.dj.clear();
                        }
                        if (this.dm.count > 1) {
                            let k = this.dm._inner[this.dm.count - 1];
                            this.dm.clear();
                            this.dm.add(k);
                        }
                        break;
                    case 4:
                        if (this.ah.count > 0) {
                            this.ah.clear();
                        }
                        if (this.dj.count > 0) {
                            this.dj.clear();
                        }
                        break;
                    case 5:
                        if (this.dm.count > 0) {
                            this.dm.clear();
                        }
                        if (this.ah.count > 0) {
                            this.ah.clear();
                        }
                        break;
                    case 0:
                        if (this.ah.count > 0) {
                            this.ah.clear();
                        }
                        if (this.dm.count > 0) {
                            this.dm.clear();
                        }
                        if (this.dj.count > 0) {
                            this.dj.clear();
                        }
                        break;
                }
            }
            if (a == "RowSeparator") {
                let l = b;
                let m = c;
                if (l != null) {
                    l.definitionPropertyUpdated = delegateRemove(l.definitionPropertyUpdated, runOn(this, this.sx));
                    l.grid = null;
                }
                if (m != null) {
                    m.definitionPropertyUpdated = delegateCombine(m.definitionPropertyUpdated, runOn(this, this.sx));
                    m.grid = this;
                }
                if (this.is()) {
                    if (!l.d0.equals(m.d0)) {
                        this.ck.r(this, null, "Background", 2, l.d0, m.d0, false, true, false, false);
                    }
                    if (!l.d3.equals(m.d3)) {
                        this.ck.r(this, null, "LastStickyRowBackground", 2, l.d3, m.d3, false, true, false, false);
                    }
                    if (!l.d5.equals(m.d5)) {
                        this.ck.r(this, null, "StickyRowBackground", 2, l.d5, m.d5, false, true, false, false);
                    }
                    if (!l.d4.equals(m.d4)) {
                        this.ck.r(this, null, "PinnedRowBackground", 2, l.d4, m.d4, false, true, false, false);
                    }
                }
            }
            if (a == "HeaderRowSeparator") {
                let n = b;
                let o = c;
                if (n != null) {
                    n.definitionPropertyUpdated = delegateRemove(n.definitionPropertyUpdated, runOn(this, this.p7));
                    n.grid = null;
                }
                if (o != null) {
                    o.definitionPropertyUpdated = delegateCombine(o.definitionPropertyUpdated, runOn(this, this.p7));
                    o.grid = this;
                }
            }
            if (a == "HeaderSeparator") {
                let p = b;
                let q = c;
                if (p != null) {
                    p.definitionPropertyUpdated = delegateRemove(p.definitionPropertyUpdated, runOn(this, this.p8));
                    p.grid = null;
                }
                if (q != null) {
                    q.definitionPropertyUpdated = delegateCombine(q.definitionPropertyUpdated, runOn(this, this.p8));
                    q.grid = this;
                }
            }
            if (a == "ColumnResizingSeparator") {
                let r = b;
                let s = c;
                if (r != null) {
                    r.grid = null;
                }
                if (s != null) {
                    s.grid = this;
                }
            }
            if (a == "ColumnMovingSeparator") {
                let t = b;
                let u = c;
                if (t != null) {
                    t.grid = null;
                }
                if (u != null) {
                    u.grid = this;
                }
            }
            if (a == "DataSourceDesiredProperties") {
                if (this.w != null) {
                    this.w.propertiesRequested = this.g;
                }
            }
            if (a == "PrimaryKey") {
                if (this.actualDataSource != null && this.l != null) {
                    this.actualDataSource.primaryKey = c;
                }
                this.e = this.m();
            }
            if (a == "ActualRowHeight" || a == "ActualHeaderHeight" || a == "RowSeparatorHeight" || a == "IsGroupRowSticky" || a == "IsHeaderSeparatorVisible" || a == "ShiftSectionContent" || a == "PinnedAreaSeparatorWidth") {
                this.hw = this.ir();
                if (this.is()) {
                    this.sl();
                }
            }
            if (a == "DefaultColumnWidth" || a == "DefaultColumnMinWidth" || a == "Inset" || a == "HeaderSeparatorWidth") {
                if (this.model != null && this.model.br != null && this.model.br.count > 0) {
                    this.sl();
                }
            }
            if (a == "SectionHeader") {
                if (b != null) {
                    let v = typeCast(SectionHeader.$, b);
                    v.sectionHeaderPropertyUpdating = delegateRemove(v.sectionHeaderPropertyUpdating, runOn(this, this.r7));
                    v.grid = null;
                }
                if (this.ey != null) {
                    let w = this.ey;
                    w.sectionHeaderPropertyUpdating = delegateCombine(w.sectionHeaderPropertyUpdating, runOn(this, this.r7));
                    this.ey.grid = this;
                }
                this.model.bn = true;
                this.sl();
            }
            if (a == "PinnedAreaSeparator") {
                if (b != null) {
                    let x = typeCast(PinnedAreaSeparator.$, b);
                    x.grid = null;
                }
                if (this.ei != null) {
                    this.ei.grid = this;
                }
                this.sl();
            }
            if (a == "ActiveCell") {
                this.cv = typeCast(GridCellPosition.$, b);
                this.gz = true;
                if (this.cw != null && this.cw.b >= 0) {
                    this.aj.y(this.cw.b, this.cw.d);
                }
                else {
                    this.aj.aa();
                }
                this.gz = false;
            }
            if (a == "ReactsToSortChanges") {
                let y = c;
                if (!y) {
                    this.b4.b = null;
                }
                else {
                    if (this.w != null) {
                        this.b4.b = this.w.sortDescriptions;
                    }
                }
            }
            if (a == "ReactsToGroupChanges") {
                let z = c;
                if (!z) {
                    this.a7.b = null;
                }
                else {
                    if (this.w != null) {
                        this.a7.b = this.w.groupDescriptions;
                    }
                }
            }
            if (a == "ReactsToFilterChanges") {
                let aa = c;
                if (!aa) {
                    this.v.syncTarget = null;
                }
                else {
                    if (this.w != null) {
                        this.v.syncTarget = this.w.filterExpressions;
                    }
                }
            }
            if (a == "IsGroupCollapsable") {
                if (this.actualDataSource != null) {
                    this.actualDataSource.isSectionCollapsable = c;
                }
            }
            if (a == "GroupHeaderDisplayMode") {
                if (this.actualDataSource != null) {
                    this.actualDataSource.sectionHeaderDisplayMode = EnumUtil.getEnumValue(DataSourceSectionHeaderDisplayMode_$type, c);
                }
            }
            if (a == "SummaryScope") {
                if (this.actualDataSource != null) {
                    this.actualDataSource.summaryScope = EnumUtil.getEnumValue(DataSourceSummaryScope_$type, c);
                }
            }
            if (a == "IsGroupExpandedDefault") {
                if (this.actualDataSource != null) {
                    this.actualDataSource.isSectionExpandedDefault = c;
                }
            }
            if (a == "GroupSummaryDisplayMode") {
                this.ey.en = this.dy;
                this.model.bn = true;
                if (this.actualDataSource != null) {
                    switch (this.dy) {
                        case 1:
                        case 0:
                        case 4:
                            this.actualDataSource.includeSummaryRowsInSection = false;
                            break;
                        case 2:
                            this.actualDataSource.includeSummaryRowsInSection = true;
                            this.actualDataSource.isSectionSummaryRowsAtBottom = false;
                            break;
                        case 3:
                            this.actualDataSource.includeSummaryRowsInSection = true;
                            this.actualDataSource.isSectionSummaryRowsAtBottom = true;
                            break;
                    }
                }
                this.sl();
            }
            if (a == "Density" || a == "RowHeight") {
                this.rm();
            }
            if (a == "HeaderHeight") {
                this.rm();
                this.externalGrid.setScrollerVerticalTrackInset(this.kk);
            }
            if (a == "DefaultBorderWidth" || a == "BorderWidth") {
                this.vw = this.vy(this.vx, this.vz);
            }
            if (a == "DefaultCornerRadius" || a == "CornerRadius") {
                this.tq = this.tr(this.ts, this.tt);
            }
            if (a == "Border" || a == "ActualCornerRadius" || a == "ActualBorderWidth") {
                this.externalGrid.setBorder(this.border, this.vw.c, this.vw.e, this.vw.d, this.vw.b, this.tq.c, this.tq.d, this.tq.a, this.tq.b);
            }
            if (a == "EditMode") {
                this.tg();
            }
        }
        tg() {
            if (this.y != null) {
                if (this.cf == 2 || this.cf == 3) {
                    this.y.isBatchingEnabled = true;
                }
                else {
                    this.y.isBatchingEnabled = false;
                }
            }
        }
        tr(a, b) {
            return new CornerRadius(1, !isNaN_(a.c) ? a.c : b.c, !isNaN_(a.d) ? a.d : b.d, !isNaN_(a.b) ? a.b : b.b, !isNaN_(a.a) ? a.a : b.a);
        }
        vy(a, b) {
            return new Thickness(1, !isNaN_(a.c) ? a.c : b.c, !isNaN_(a.e) ? a.e : b.e, !isNaN_(a.d) ? a.d : b.d, !isNaN_(a.b) ? a.b : b.b);
        }
        syncBorder() {
            if (this.externalGrid != null) {
                this.externalGrid.setBorder(this.border, this.vw.c, this.vw.e, this.vw.d, this.vw.b, this.tq.c, this.tq.d, this.tq.a, this.tq.b);
            }
        }
        rm() {
            if (this.le == -1) {
                switch (this.fg) {
                    case 0:
                    case 2:
                        this.kl = GridStyleRepository.p;
                        break;
                    case 3:
                        this.kl = GridStyleRepository.o;
                        break;
                    case 1:
                        this.kl = GridStyleRepository.n;
                        break;
                }
            }
            else {
                this.kl = this.le;
            }
            if (this.k6 == -1) {
                switch (this.fg) {
                    case 0:
                    case 2:
                        this.kk = GridStyleRepository.p;
                        break;
                    case 3:
                        this.kk = GridStyleRepository.o;
                        break;
                    case 1:
                        this.kk = GridStyleRepository.n;
                        break;
                }
            }
            else {
                this.kk = this.k6;
            }
        }
        m() {
            if (this.l != null) {
                return this.l;
            }
            if (this.actualDataSource != null) {
                return this.actualDataSource.actualPrimaryKey;
            }
            return null;
        }
        n() {
            if (!this.g3 && this.g == null && this.w.propertiesRequested == null && this.columns.count > 0) {
                return this.h();
            }
            if (this.g != null) {
                return this.g;
            }
            return this.w.propertiesRequested;
        }
        h() {
            let a = new Array(this.columns.count);
            for (let b = 0; b < this.columns.count; b++) {
                a[b] = this.columns._inner[b].hy;
            }
            return a;
        }
        sx(a, b) {
            this.sy(b.propertyName, b.animationType, b.oldValue, b.newValue, false);
        }
        p7(a, b) {
            this.sy(b.propertyName, b.animationType, b.oldValue, b.newValue, true);
        }
        p8(a, b) {
            this.p9(b.propertyName, b.animationType, b.oldValue, b.newValue);
        }
        sy(a, b, c, d, e) {
            if (b == 10) {
                return;
            }
            if (a != null && stringStartsWith(a, "Actual")) {
                a = a.substr(6);
            }
            this.ck.r(this, null, a, b, c, d, e, true, false, false);
        }
        p9(a, b, c, d) {
            if (b == 10) {
                return;
            }
            if (a != null && stringStartsWith(a, "Actual")) {
                a = a.substr(6);
            }
            for (let e = 0; e < this.model.br.count; e++) {
                let f = this.model.br._inner[e];
                this.ck.r(this, f, a, b, c, d, true, false, false, true);
            }
        }
        pz(a, b) {
            this.rl();
        }
        py(a, b) {
            if (this.dataCommitted != null) {
                this.dataCommitted(this, new GridDataCommittedEventArgs(b.commitID, b.changes));
            }
        }
        rl() {
            this.d8.setDataSource(this.w);
            this.a2.d = this.w.actualSchema;
            this.th();
            for (let a = 0; a < this.a7.i.count; a++) {
                this.sv(this.a7.i.item(a));
            }
            for (let b = 0; b < this.b7.i.count; b++) {
                this.sw(this.b7.i.item(b));
            }
            this.sl();
            this.qe();
        }
        qk() {
            if (this.columnsAutoGenerated != null) {
                let a = new GridColumnsAutoGeneratedEventArgs();
                a.columns = this.actualColumns;
                this.columnsAutoGenerated(this, a);
            }
            for (let b of fromEnum(this.actualColumns)) {
                b.gf = false;
            }
        }
        onSizeChanged(a, b) {
            this.jm = a;
            this.jl = b;
            this.ek.y(a, b);
            this.sl();
            if (this.sizeChanged != null) {
                this.sizeChanged(this, ((() => {
                    let $ret = new GridSizeChangedEventArgs();
                    $ret.b = a;
                    $ret.a = b;
                    return $ret;
                })()));
            }
        }
        notifyScrollStart() {
            this.i0 = true;
        }
        notifyScrollStop() {
            this.i0 = false;
            if (this.hb) {
                this.d5.f(this.lb);
                this.hb = false;
            }
        }
        setViewport(a, b, c, d) {
            this.j7 = -1;
            this.j8 = -1;
            let e = c - a;
            let f = new Rect(0, a, b, c - a, d - b);
            if (f.x != this.model.actualVisibleRegion.x || f.y != this.model.actualVisibleRegion.y || f.width != this.model.actualVisibleRegion.width || f.height != this.model.actualVisibleRegion.height) {
                let g = this.model.actualVisibleRegion;
                this.model.actualVisibleRegion = f;
                this.sm();
                if (this.viewportChanged != null) {
                    this.viewportChanged(this, ((() => {
                        let $ret = new GridViewportChangedEventArgs();
                        $ret.g = f.x;
                        $ret.d = g.x;
                        $ret.h = f.y;
                        $ret.e = g.y;
                        $ret.f = f.width;
                        $ret.c = g.width;
                        $ret.a = f.height;
                        $ret.b = g.height;
                        return $ret;
                    })()));
                }
            }
        }
        get actualColumns() {
            return this.a1.j;
        }
        get columns() {
            return this.c0;
        }
        rx(a, b, c) {
            let d = this.ca(a.k);
            d.cw(a, this, b, c);
            d.cx(a, this, b, c);
        }
        rw(a, b, c, d) {
            a.i0 = d;
            let e = this.ca(a.k);
            e.cx(a, this, b, c);
        }
        a0(a) {
            return this.a2.h(a);
        }
        qa(a) {
            a.f7 = true;
            a.gd = true;
        }
        p2(a, b) {
            let c = this.columns.indexOf(b);
            if (c == -1) {
                return;
            }
            if ((a != null && a.gc) || (b != null && b.gc)) {
                throw new InvalidOperationException(1, "Cannot exchange a column created from markup");
            }
            if (this.columns.contains(a)) {
                if (a.gd) {
                    this.externalGrid.removeExternalColumn(a.externalObject);
                }
                else {
                    return;
                }
            }
            let d = this.a4;
            if (d == 0) {
                d = a.et();
            }
            let e = false;
            if (d == 2 || d == 7) {
                e = true;
            }
            a.e8 = 3;
            if (e) {
                this.externalGrid.insertExternalColumnAtIndex(c + 1, a.externalObject);
            }
            else {
                this.externalGrid.insertExternalColumnAtIndex(c, a.externalObject);
            }
            b.fk = a.fk;
            if (!this.hk(a)) {
                a.gd = false;
                a.e8 = 5;
                this.externalGrid.removeExternalColumn(b.externalObject);
                this.q8(a);
            }
            this.sl();
            if (this.hk(a)) {
                let f = this.model.g(b.g2).a;
                b.e8 = 2;
                a.e8 = 1;
                this.ck.ai(this, this.cz, this.model.g(b.g2), this.model.g(a.g2), f);
            }
        }
        pk(a, b) {
            this.e0.w();
            this.aj.ad();
            this.e0.au();
            if (this.iy) {
                return;
            }
            switch (b.action) {
                case 0:
                    if (b.newItems != null) {
                        for (let c = 0; c < b.newItems.count; c++) {
                            this.rb(c + b.newStartingIndex, b.newItems.item(c));
                        }
                    }
                    break;
                case 1:
                    if (b.oldItems != null) {
                        for (let d = 0; d < b.oldItems.count; d++) {
                            this.rf(b.oldStartingIndex, b.oldItems.item(d));
                        }
                    }
                    break;
                case 2:
                    if (b.oldItems != null) {
                        for (let e = 0; e < b.oldItems.count; e++) {
                            this.rf(b.oldStartingIndex, b.oldItems.item(e));
                        }
                    }
                    if (b.newItems != null) {
                        for (let f = 0; f < b.newItems.count; f++) {
                            this.rb(f + b.newStartingIndex, b.newItems.item(f));
                        }
                    }
                    break;
                case 4:
                    this.ri();
                    break;
            }
            this.sl();
            if (!this.gn) {
                this.gn = true;
                this.delayedExecutionManager.executeIn(() => {
                    this.gn = false;
                    if (this.actualColumnsChanged != null) {
                        this.actualColumnsChanged(this, ((() => {
                            let $ret = new GridColumnsChangedEventArgs();
                            $ret.columns = this.actualColumns;
                            return $ret;
                        })()));
                    }
                }, 0);
            }
        }
        ri() {
            this.e6.w(this.de, this.model);
        }
        rf(a, b) {
            b.grid = null;
            b.propertyChanged = delegateRemove(b.propertyChanged, runOn(this, this.ps));
            b.columnCellsPropertyUpdating = delegateRemove(b.columnCellsPropertyUpdating, runOn(this, this.pt));
            b.columnHeaderCellsPropertyUpdating = delegateRemove(b.columnHeaderCellsPropertyUpdating, runOn(this, this.pw));
            this.e6.v(this.de, a, b, this.model);
            this.sl();
            b.e8 = 0;
            this.e0.ac(a, b);
        }
        rb(a, b) {
            b.grid = this;
            b.propertyChanged = delegateCombine(b.propertyChanged, runOn(this, this.ps));
            b.columnCellsPropertyUpdating = delegateCombine(b.columnCellsPropertyUpdating, runOn(this, this.pt));
            b.columnHeaderCellsPropertyUpdating = delegateCombine(b.columnHeaderCellsPropertyUpdating, runOn(this, this.pw));
            this.e6.t(a, b, this.model);
            if (b.gd) {
                b.e8 = 3;
            }
            if (this.hi(b) && !b.gd && b.e8 != 3) {
                let c = b.e8;
                b.e8 = 1;
                this.sl();
                this.ck.aq(this, this.cz, this.model.g(b.g2), true, c);
            }
            else {
                this.sl();
            }
            for (let d = 0; d < this.b4.i.count; d++) {
                if (b.hy == this.b4.i.item(d).f) {
                    b.e6 = this.b5(this.b4.i.item(d).c);
                    break;
                }
            }
            this.e0.aa(a, b);
        }
        pt(a, b, c, d, e) {
            if (b == "Pinned") {
                this.ha(false);
            }
            if (b == "Width" || b == "MinWidth" || b == "Pinned") {
                this.sl();
                this.pr();
                if (b == "Width") {
                    this.rj(a, d);
                }
                return;
            }
            if (c == 10) {
                return;
            }
            let f = this.model.g(a.g2);
            if (f == null) {
                return;
            }
            if (b != null && stringStartsWith(b, "Actual")) {
                b = b.substr(6);
            }
            if (b == "HeaderText") {
                this.pw(a, "TextValue", c, d, e);
                return;
            }
            if (b == "ColumnOptionsIconAlignment" || b == "ColumnOptionsIconColor" || b == "ColumnOptionsIconBehavior" || b == "IsColumnOptionsEnabled") {
                this.pw(a, b, c, d, e);
                return;
            }
            if (b == "FormatString") {
                if (typeCast(NumericColumn.$, a) !== null || typeCast(DateTimeColumn.$, a) !== null) {
                    b = "FormatStringOverride";
                }
            }
            if (b == "SortDirection" && false == this.hx) {
                this.e4.f(a, a.e6);
            }
            this.ck.r(this, f, b, c, d, e, false, false, false, false);
        }
        r7(a, b, c, d, e) {
            if (c == 10) {
                return;
            }
            if (b != null && stringStartsWith(b, "Actual")) {
                b = b.substr(6);
            }
            this.ck.r(this, null, b, c, d, e, false, false, true, false);
        }
        pw(a, b, c, d, e) {
            if (c == 10) {
                return;
            }
            let f = this.model.g(a.g2);
            if (f == null) {
                return;
            }
            if (b != null && stringStartsWith(b, "Actual")) {
                b = b.substr(6);
            }
            this.ck.r(this, f, b, c, d, e, true, false, false, false);
        }
        sd(a, b) {
            let c = b;
            if (c == null) {
                b = 0;
            }
            if ((typeof c == "number")) {
                let d = typeGetValue(c);
                if ((EnumUtil.getName(PinnedPositions_$type, d) == undefined)) {
                    b = 0;
                }
                b = d;
            }
            else {
                b = (typeGetValue(EnumUtil.parse(PinnedPositions_$type, c, true)));
            }
            let e = this.columns.indexOf(a);
            if (e == -1) {
                return;
            }
            if (a.fk == b) {
                return;
            }
            this.ha(false);
            a.gv = this.e6.k(e, this, this.model);
            a.gw = this.model.br._inner[e].n;
            a.fj = a.fk;
            a.fk = b;
            this.e6.s(this.model);
            let f = a.e8;
            if (this.hm(a)) {
                a.e8 = 6;
                this.ck.ak(this, this.cz, this.model.g(a.g2), f);
            }
        }
        qf(a, b) {
            this.externalGrid.ensureColumnsAreManual();
            let c = this.columns._inner[a];
            b = Math.min(this.columns.count - 1, Math.max(0, b));
            this.iy = true;
            if (c != null && c.gc) {
                throw new InvalidOperationException(1, "Can't move a column that was created from markup");
            }
            if (b > a) {
                let d = this.columns._inner[b - 1];
                if (d.gc) {
                    throw new InvalidOperationException(1, "Can't move a column to before columns created from markup");
                }
            }
            else {
                let e = this.columns._inner[b];
                if (e.gc) {
                    throw new InvalidOperationException(1, "Can't move a column to before columns created from markup");
                }
            }
            this.externalGrid.removeExternalColumn(c.externalObject);
            this.externalGrid.insertExternalColumnAtIndex(b, c.externalObject);
            this.iy = false;
            this.ha(false);
            this.rc(a, b, c);
            if (this.actualColumnsChanged != null) {
                this.actualColumnsChanged(this, ((() => {
                    let $ret = new GridColumnsChangedEventArgs();
                    $ret.columns = this.actualColumns;
                    return $ret;
                })()));
            }
        }
        qg(a) {
            this.h6(a, true, true);
        }
        qh(a) {
            this.h6(a, false, true);
        }
        g6(a) {
            return this.h6(a, true, false);
        }
        g7(a) {
            return this.h6(a, false, false);
        }
        h6(a, b, c) {
            let d = this.actualColumns;
            let e = d.count - 1;
            let f = d._inner[a];
            let g = f.fk;
            let h = -1;
            let i = a;
            do {
                i += b ? -1 : 1;
                if (i < 0 || i > e) {
                    break;
                }
                let j = d._inner[i];
                if (!j.gd && j.fk == g) {
                    h = i;
                }
            } while (h == -1);
            if (h != -1) {
                if (c) {
                    this.qf(a, h);
                }
                return true;
            }
            switch (f.fk) {
                case 0:
                    let k = this.ay(b);
                    if (null == k) {
                        return false;
                    }
                    if (c) {
                        h = d.indexOf(k);
                        this.qf(a, h + (b ? 1 : -1));
                        f.fk = k.fk;
                    }
                    break;
                case 1:
                    if (b) {
                        return false;
                    }
                    if (c) {
                        let l = this.ax(true);
                        if (l == null) {
                            this.sd(d._inner[a], 0);
                        }
                        else {
                            h = d.indexOf(l);
                            this.qf(a, h - 1);
                            f.fk = 0;
                        }
                    }
                    break;
                case 2:
                    if (!b) {
                        return false;
                    }
                    if (c) {
                        let m = this.ax(false);
                        if (m == null) {
                            this.sd(d._inner[a], 0);
                        }
                        else {
                            h = d.indexOf(m);
                            this.qf(a, h + 1);
                            f.fk = 0;
                        }
                    }
                    break;
            }
            return true;
        }
        ay(a) {
            let b = a ? 1 : 2;
            let c = this.actualColumns;
            let d = this.model.bx;
            let e = d.count - 1;
            let f = a ? 0 : e;
            let g = d._inner[f];
            let h = c._inner[g];
            let i = null;
            while (h.fk == b) {
                i = h;
                f += a ? 1 : -1;
                if (f < 0 || f > e) {
                    break;
                }
                g = d._inner[f];
                h = c._inner[g];
            }
            return i;
        }
        ax(a) {
            let b = this.actualColumns;
            let c = this.model.bx;
            let d = c.count - 1;
            let e = a ? 0 : d;
            let f = c._inner[e];
            let g = b._inner[f];
            while (g.fk != 0) {
                e += a ? 1 : -1;
                if (e < 0 || e > d) {
                    break;
                }
                f = c._inner[e];
                g = b._inner[f];
            }
            if (g.fk == 0) {
                return g;
            }
            else {
                return null;
            }
        }
        rc(a, b, c) {
            c.gv = this.e6.k(a, this, this.model);
            c.gu = a;
            c.gw = this.model.br._inner[a].n;
            let d = c.e8;
            this.e6.u(this.de, this.model, a, b, c.g2);
            if (!this.hm(c) && d != 3) {
                c.e8 = 5;
            }
            this.sl();
            if (this.hm(c)) {
                c.e8 = 6;
                this.ck.ak(this, this.cz, this.model.g(c.g2), d);
            }
            this.e0.ab(a, b, c);
        }
        ps(a, b) {
            let c = a;
            switch (b.propertyName) {
                case "Filter":
                    this.th();
                    break;
                case "IsHidden":
                    if (c.gd) {
                        if (this.hl(c)) {
                            let d = c.e8;
                            c.e8 = 2;
                            this.sl();
                            this.ck.aj(this, this.cz, this.model.g(c.g2), false, d);
                        }
                        else {
                            c.e8 = 3;
                            if (c.f4) {
                                this.externalGrid.ensureColumnsAreManual();
                                this.externalGrid.removeExternalColumn(c.externalObject);
                            }
                            this.sl();
                        }
                    }
                    else {
                        if (this.hq(c)) {
                            let e = c.e8;
                            c.e8 = 1;
                            this.sl();
                            this.ck.aq(this, this.cz, this.model.g(c.g2), false, e);
                        }
                        else {
                            c.e8 = 5;
                            this.ck.ah(this, this.model.g(c.g2));
                            this.c9.ab();
                            this.sl();
                        }
                    }
                    if (this.columnHiddenChanged != null) {
                        this.columnHiddenChanged(this, ((() => {
                            let $ret = new ColumnHiddenChangedEventArgs();
                            $ret.a = c;
                            $ret.b = c.gd;
                            return $ret;
                        })()));
                    }
                    break;
                case "Pinned":
                    if (this.columnPinnedChanged != null) {
                        this.columnPinnedChanged(this, ((() => {
                            let $ret = new ColumnPinnedChangedEventArgs();
                            $ret.a = c;
                            $ret.b = c.fk;
                            return $ret;
                        })()));
                    }
                    break;
            }
        }
        th() {
            if (this.actualDataSource == null) {
                return;
            }
            let a = this.z(null);
            if (a != null) {
                a.markAutoGenerated();
                let b = false;
                if (this.v != null) {
                    for (let c = 0; c < this.v.j.count; c++) {
                        if (this.v.j.item(c).isAutoGenerated) {
                            this.v.j.item(c, a);
                            b = true;
                            break;
                        }
                    }
                }
                if (!b) {
                    this.v.add(a);
                }
            }
            else {
                for (let d = this.v.j.count - 1; d >= 0; d--) {
                    if (this.v.j.item(d).isAutoGenerated) {
                        this.v.removeAt(d);
                    }
                }
            }
        }
        ca(a) {
            let b = this.d8.getRowType(a.w);
            if (b != 0 && b != 3) {
                if (a.as) {
                    if (a.g) {
                        return this.d2;
                    }
                    return this.eu;
                }
                switch (b) {
                    case 1: if (this.dy != 1) {
                        return this.ey;
                    }
                    else {
                        return this.a0(a);
                    }
                    case 2: return this.ew;
                    case 4: return this.e8;
                    case 5: return this.fa;
                    default: throw new NotSupportedException(0);
                }
            }
            else {
                if (a.as) {
                    if (a.g) {
                        return this.d2;
                    }
                    return this.eu;
                }
                else {
                    if (a.ap && this.dragger != null) {
                        if (this.dragger.dragType == 1) {
                            return this.bw;
                        }
                        else if (this.dragger.dragType == 2) {
                            return this.bi;
                        }
                    }
                    if (a.al || a.an || a.ak || a.am) {
                        return this.ei;
                    }
                    let c = this.a0(a);
                    if (a.g) {
                        if (a.h) {
                            return this.d4;
                        }
                        else {
                            return c.header;
                        }
                    }
                    else {
                        return c;
                    }
                }
            }
        }
        nc(a, b, c, d) {
            return this.ca(a).cl(a, b, c, d);
        }
        ao(a, b) {
            let c = this.ca(a);
            let d = c.k(a, b);
            d.o = this;
            return d;
        }
        lp() {
            return this.model.b();
        }
        nb() {
            let a = this.model.b();
            return a.av();
        }
        eq(a) {
            return this.d9.getRowPathForRow(a);
        }
        s2(a) {
            let b = truncate(this.model.actualVisibleRegion.left);
            if (this.j7 != -1) {
                b = this.j7;
            }
            let c = 0;
            let d = 0;
            if (a < 0) {
                a = 0;
            }
            if (a >= this.d9.getRowCount()) {
                a = this.d9.getRowCount() - 1;
            }
            let e = 0;
            for (let f of fromEnum(this.model.bv)) {
                if (d + f.m > a) {
                    e = truncate(Math.floor(a - d));
                    let g = f.e(e);
                    c = f.f(e);
                    c += truncate(Math.round(g * ((a - d) - e)));
                }
                else {
                    d += f.m;
                    continue;
                }
            }
            let h = this.fc.i(this, this.model, new Rect(0, b, c, this.model.b9, this.model.by));
            let i = -1;
            let j = -1;
            let k = false;
            for (let l = 0; l < h.count; l++) {
                if (h._inner[l].m == e) {
                    i = l;
                    j = h._inner[l].n;
                    break;
                }
                if (h._inner[l].m > e) {
                    i = l - 1;
                    break;
                }
                switch (h._inner[l].a) {
                    case 3:
                        k = true;
                        break;
                    case 1:
                        k = false;
                        break;
                }
            }
            if (i == -1) {
                i = h.count - 1;
            }
            let m = 0;
            for (let n = i; n >= 0; n--) {
                if (k) {
                    if (h._inner[n].n >= j) {
                        if (h._inner[n].a != 3) {
                            j = h._inner[n].n;
                            k = false;
                        }
                        m += h._inner[n].k + this.lg + this.lh;
                    }
                }
                else {
                    if (h._inner[n].n > j) {
                        if (h._inner[n].a != 3) {
                            j = h._inner[n].n;
                        }
                        m += h._inner[n].k + this.lg + this.lh;
                    }
                }
            }
            c -= truncate(m);
            c = Math.max(c, 0);
            if (this.model.absoluteHeight > 0 && this.model.actualVisibleRegion.height > 0 && c + this.model.actualVisibleRegion.height > this.model.absoluteHeight) {
                c = truncate(Math.round(this.model.absoluteHeight - this.model.actualVisibleRegion.height));
            }
            if (c < 0) {
                c = 0;
            }
            this.j8 = c;
            this.j7 = b;
            this.viewportManager.moveViewportTo(b, c);
        }
        s1(a) {
            let b = truncate(this.model.actualVisibleRegion.left);
            if (this.j7 != -1) {
                b = this.j7;
            }
            let c = 0;
            let d = 0;
            if (a < 0) {
                a = 0;
            }
            if (a >= this.d9.getRowCount()) {
                a = this.d9.getRowCount() - 1;
            }
            let e = 0;
            for (let f of fromEnum(this.model.bv)) {
                if (d + f.m > a) {
                    let g = truncate(Math.floor(a - d));
                    let h = f.e(g);
                    e = h;
                    c = f.i + f.f(g);
                    c += truncate(Math.round(h * ((a - d) - g)));
                }
                else {
                    d += f.m;
                    continue;
                }
            }
            c -= this.model.ci;
            c = Math.max(c, 0);
            if (this.model.absoluteHeight > 0 && this.model.actualVisibleRegion.height > 0) {
                c -= truncate(Math.round(this.model.actualVisibleRegion.height - this.model.cu - (e + this.model.ci)));
            }
            if (this.model.absoluteHeight > 0 && this.model.actualVisibleRegion.height > 0 && c + this.model.actualVisibleRegion.height > this.model.absoluteHeight) {
                c = truncate(Math.round(this.model.absoluteHeight - this.model.actualVisibleRegion.height));
            }
            if (c < 0) {
                c = 0;
            }
            this.j8 = c;
            this.j7 = b;
            this.viewportManager.moveViewportTo(b, c);
        }
        it(a) {
            let b = this.kr(a);
            if (b == -1) {
                return false;
            }
            this.s2(b);
            return true;
        }
        iu(a) {
            let b = this.ks(a);
            if (b == -1) {
                return false;
            }
            this.s2(b);
            return true;
        }
        sz(a) {
            let b = truncate(a);
            if (b < 0) {
                b = 0;
                a = 0;
            }
            if (a > this.model.br.count) {
                b = this.model.br.count - 1;
                a = this.model.br.count - 1;
            }
            let c = this.columns._inner[b];
            if (c.fk != 0) {
                return;
            }
            let d = this.e6.k(b, this, this.model);
            let e = truncate(this.model.actualVisibleRegion.top);
            if (this.j8 != -1) {
                e = this.j8;
            }
            let f = d + truncate((this.model.br._inner[b].k * (a - b)));
            f -= this.model.cf;
            if (this.model.absoluteWidth > 0 && this.model.actualVisibleRegion.width > 0 && f + this.model.actualVisibleRegion.width > this.model.absoluteWidth) {
                f = truncate(Math.round(this.model.absoluteWidth - this.model.actualVisibleRegion.width));
            }
            if (f < 0) {
                f = 0;
            }
            this.j8 = e;
            this.j7 = f;
            this.viewportManager.moveViewportTo(f, e);
        }
        s0(a) {
            let b = truncate(a);
            if (b < 0) {
                b = 0;
                a = 0;
            }
            if (a > this.model.br.count) {
                b = this.model.br.count - 1;
                a = this.model.br.count - 1;
            }
            let c = this.columns._inner[b];
            let d = this.e6.k(b, this, this.model);
            let e = truncate(this.model.actualVisibleRegion.top);
            if (this.j8 != -1) {
                e = this.j8;
            }
            let f = d + truncate((this.model.br._inner[b].k * (a - b)));
            let g = this.model.actualVisibleRegion.width - this.model.cg;
            if (this.model.absoluteWidth > 0 && g > 0) {
                f -= truncate(Math.round(g - this.model.br._inner[b].k));
            }
            if (this.model.absoluteWidth > 0 && this.model.actualVisibleRegion.width > 0 && f + this.model.actualVisibleRegion.width > this.model.absoluteWidth) {
                f = truncate(Math.round(this.model.absoluteWidth - this.model.actualVisibleRegion.width));
            }
            if (f < 0) {
                f = 0;
            }
            this.j8 = e;
            this.j7 = f;
            this.viewportManager.moveViewportTo(f, e);
        }
        iw(a) {
            return this.hi(a);
        }
        rk(a, b) {
            if (this.ch == 1 && this.cw != null) {
                if (this.cw.b >= a && this.cw.b <= b) {
                    if (this.activeCellChanged != null) {
                        let c = new GridActiveCellChangedEventArgs();
                        c.newActiveCell = this.cw;
                        c.oldActiveCell = this.cw;
                        this.activeCellChanged(this, c);
                    }
                }
            }
            let d = this.ky();
            let e = this.k2();
            if (b < d || a > e) {
                return;
            }
            if (a < d) {
                a = d;
            }
            if (b > e) {
                b = e;
            }
            if (!this.is()) {
                return;
            }
            this.ck.y(this, a, b, false);
            if (this.d9.getRowCount() != this.model.ck()) {
                this.sl();
            }
            else {
                this.sm();
            }
            this.pr();
        }
        pr() {
            if (this.model.actualVisibleRegion.isEmpty) {
                return;
            }
            if (this.model.actualVisibleRegion.bottom > this.model.absoluteHeight || this.model.actualVisibleRegion.top > this.model.absoluteHeight) {
                let a = this.d9.getRowCount() - 1;
                if (a < 0) {
                    a = 0;
                }
                this.s2(a);
            }
            if (this.model.actualVisibleRegion.right > this.model.absoluteWidth || this.model.actualVisibleRegion.left > this.model.absoluteWidth) {
                let b = this.a2.j.count - 1;
                if (b < 0) {
                    b = 0;
                }
                this.s0(b);
            }
        }
        ku(a) {
            return this.e6.i(this.model, a.k);
        }
        is() {
            return this.model.be != null && this.model.bf != null && this.model.bf.w >= 0 && this.model.be.w >= 0;
        }
        k2() {
            return this.e6.i(this.model, this.model.be);
        }
        ky() {
            return this.e6.i(this.model, this.model.bf);
        }
        kw() {
            let a = this.e6.b(this.model.actualVisibleRegion.top + this.model.cl + this.model.cm + this.model.cv, this.model);
            return this.e6.i(this.model, a);
        }
        k0() {
            let a = this.e6.b(this.model.actualVisibleRegion.bottom - this.model.cu, this.model);
            return this.e6.i(this.model, a);
        }
        sb() {
            let a = this.ky();
            let b = this.k2();
            this.d9.firstVisibleIndexRequested = a;
            this.d9.lastVisibleIndexRequested = b;
        }
        get h1() {
            return this.cellPreviewPointerDown != null;
        }
        get h2() {
            return this.cellPreviewPointerUp != null;
        }
        get hz() {
            return this.cellPointerDown != null;
        }
        get h0() {
            return this.cellPointerUp != null;
        }
        iq() {
            return this.dt != 0 || this.cellClicked != null || this.ch != 0 || this.bu != 2 || this.bg != 1;
        }
        ir() {
            return (this.bu != 2 && this.hv) || this.bg != 1;
        }
        r5(a, b) {
            this.hd = true;
            this.pn(a, b);
            this.hd = false;
        }
        r6(a, b) {
            this.hd = true;
            this.st(a, b);
            this.hd = false;
        }
        r8(a, b, c) {
            this.hd = true;
            this.tl(a, b, c);
            this.hd = false;
        }
        qq(a, b) {
            if (!this.gz) {
                let c = new GridCellPosition();
                c.d = b;
                c.b = a;
                this.cw = c;
            }
            if (this.activeCellChanged != null) {
                let d = new GridActiveCellChangedEventArgs();
                d.newActiveCell = this.cw;
                d.oldActiveCell = this.cv;
                this.activeCellChanged(this, d);
            }
        }
        qs(a, b) {
            if (b == null) {
                return;
            }
            let c = this.cw;
            if (!this.gz) {
                let d = new GridCellPosition();
                d.d = b;
                d.b = a;
                this.cw = d;
            }
            if (this.activeCellChanged != null) {
                let e = new GridActiveCellChangedEventArgs();
                e.newActiveCell = this.cw;
                e.oldActiveCell = c;
                this.activeCellChanged(this, e);
            }
        }
        h8(a, b) {
            if (this.ch == 0 || this.cw == null) {
                return false;
            }
            let c = this.cu.b;
            let d = this.cu.d;
            if (c > this.d9.getRowCount() - 1) {
                return false;
            }
            let e = c + 1;
            if (b) {
                e = this.d9.getRowCount() - 1;
            }
            if (e > this.d9.getRowCount() - 1) {
                e = this.d9.getRowCount() - 1;
            }
            if (e == c) {
                return false;
            }
            let f = Math.min(this.aj.r(), this.actualColumns.count - 1);
            f = this.kt(f);
            let g = this.actualColumns._inner[f];
            if (d != g.h0()) {
                d = g.h0();
            }
            if (this.dy != 1) {
                let h = this.d9.getRowType(e);
                if (h == 1 || h == 2) {
                    d = null;
                }
            }
            this.cw = ((() => {
                let $ret = new GridCellPosition();
                $ret.b = e;
                $ret.d = d;
                return $ret;
            })());
            if (this.model.br.count > 0) {
                let i = this.aj.r();
                this.po(e, this.model.br._inner[i].n, false);
            }
            return true;
        }
        h9(a, b) {
            if (this.ch == 0 || this.cw == null) {
                return false;
            }
            if (!b || this.cb.j) {
                return false;
            }
            let c = this.kz();
            let d = this.actualColumns._inner[c];
            let e = this.cu.b;
            let f = this.cu.d;
            if (e >= this.d9.getRowCount() - 1 && f == d.h0()) {
                return false;
            }
            e = this.d9.getRowCount() - 1;
            f = d.h0();
            let g = this.d9.getRowType(e);
            if (g == 1 || g == 2) {
                f = null;
            }
            this.cw = ((() => {
                let $ret = new GridCellPosition();
                $ret.b = e;
                $ret.d = f;
                return $ret;
            })());
            this.f1 = true;
            this.s1(e);
            this.f1 = false;
            this.sz(c);
            return true;
        }
        kz() {
            let a = this.actualColumns.count - 1;
            let b = this.e6.j(a, this.model);
            while (a > 0 && this.actualColumns._inner[b].gd) {
                a--;
                b = this.e6.j(a, this.model);
            }
            return b;
        }
        kv() {
            let a = 0;
            let b = this.e6.j(a, this.model);
            while (a < this.actualColumns.count - 1 && this.actualColumns._inner[b].gd) {
                a++;
                b = this.e6.j(a, this.model);
            }
            return b;
        }
        k4(a, b = true) {
            let c = Math.max(0, a - 1);
            if (!b) {
                c = this.e6.j(c, this.model);
            }
            if (this.actualColumns._inner[c].gd) {
                let d = c;
                let e = this.model.br._inner[c].n;
                while (e > 0 && this.actualColumns._inner[d].gd) {
                    e--;
                    d = this.e6.j(e, this.model);
                }
                if (this.actualColumns._inner[d].gd) {
                    d = c;
                    e = this.model.br._inner[c].n;
                    while (e < this.actualColumns.count - 1 && this.actualColumns._inner[d].gd) {
                        e++;
                        d = this.e6.j(e, this.model);
                    }
                    if (!this.actualColumns._inner[d].gd) {
                        c = d;
                    }
                }
                else {
                    c = d;
                }
            }
            return c;
        }
        k3(a, b = true) {
            let c = Math.min(this.actualColumns.count - 1, a + 1);
            if (!b) {
                c = this.e6.j(c, this.model);
            }
            return this.kt(c);
        }
        kt(a) {
            a = Math.min(a, this.actualColumns.count - 1);
            if (this.actualColumns._inner[a].gd) {
                let b = a;
                let c = this.model.br._inner[b].n;
                while (c < this.actualColumns.count - 1 && this.actualColumns._inner[b].gd) {
                    c++;
                    b = this.e6.j(c, this.model);
                }
                if (this.actualColumns._inner[b].gd) {
                    b = a;
                    c = this.model.br._inner[b].n;
                    while (c > 0 && this.actualColumns._inner[b].gd) {
                        c--;
                        b = this.e6.j(c, this.model);
                    }
                    if (!this.actualColumns._inner[b].gd) {
                        a = b;
                    }
                }
                else {
                    a = b;
                }
            }
            return a;
        }
        po(a, b, c) {
            if (b <= this.kx()) {
                b = this.e6.j(b, this.model);
                this.sz(b);
            }
            else if (b >= this.k1()) {
                b = this.e6.j(b, this.model);
                this.s0(b);
            }
            if (a <= this.kw()) {
                this.s2(a);
            }
            else if (a >= this.k0()) {
                if (c) {
                    this.s2(a);
                }
                else {
                    this.s1(a);
                }
            }
        }
        id(a, b) {
            if (!b || this.cb.j) {
                return false;
            }
            let c = this.kv();
            let d = this.actualColumns._inner[c];
            let e = this.cu.b;
            let f = this.cu.d;
            if (e <= 0 && f == d.h0()) {
                return false;
            }
            e = 0;
            f = d.h0();
            if (this.dy != 1) {
                let g = this.d9.getRowType(e);
                if (g == 1 || g == 2) {
                    f = null;
                }
            }
            this.cw = ((() => {
                let $ret = new GridCellPosition();
                $ret.b = e;
                $ret.d = f;
                return $ret;
            })());
            this.f1 = true;
            this.s1(e);
            this.f1 = false;
            this.sz(c);
            return true;
        }
        ie(a, b) {
            if (this.ch == 0 || this.cw == null) {
                return false;
            }
            let c = this.aj.r();
            let d = this.model.br._inner[c].n;
            let e = this.cu.b;
            let f = this.cu.d;
            if (f == null) {
                return false;
            }
            let g = this.k4(d, false);
            if (b) {
                g = this.kv();
            }
            let h = this.actualColumns._inner[g];
            if (f == h.h0()) {
                return false;
            }
            f = h.h0();
            this.cw = ((() => {
                let $ret = new GridCellPosition();
                $ret.b = e;
                $ret.d = f;
                return $ret;
            })());
            if (this.model.br.count > 0) {
                if (h.fk == 0) {
                    this.po(e, this.model.br._inner[g].n, false);
                }
            }
            return true;
        }
        ig(a, b) {
            if (this.ch == 0 || this.cw == null) {
                return false;
            }
            let c = this.cu.d;
            let d = this.aj.r();
            let e = this.ky();
            let f = this.k2();
            let g = f - e;
            let h = Math.min(f + 1, this.d9.getRowCount() - 1);
            if (!this.cb.j) {
                let i = this.d9.getRowType(h);
                if (i == 1 || i == 2) {
                    c = null;
                }
                this.cw = ((() => {
                    let $ret = new GridCellPosition();
                    $ret.b = h;
                    $ret.d = c;
                    return $ret;
                })());
            }
            this.po(h, this.model.br._inner[d].n, true);
            return true;
        }
        ih(a, b) {
            if (this.ch == 0 || this.cw == null) {
                return false;
            }
            let c = this.cu.d;
            let d = this.aj.r();
            let e = this.ky();
            let f = this.k2();
            let g = f - e;
            let h = Math.max(e - g - 1, 0);
            if (!this.cb.j) {
                let i = this.d9.getRowType(h);
                if (i == 1 || i == 2) {
                    c = null;
                }
                this.cw = ((() => {
                    let $ret = new GridCellPosition();
                    $ret.b = h;
                    $ret.d = c;
                    return $ret;
                })());
            }
            this.po(h, this.model.br._inner[d].n, false);
            return true;
        }
        ii(a, b) {
            if (this.ch == 0 || this.cw == null) {
                return false;
            }
            let c = this.aj.r();
            let d = this.model.br._inner[c].n;
            let e = this.cu.b;
            let f = this.cu.d;
            if (f == null) {
                return false;
            }
            let g = this.k3(d, false);
            if (b) {
                g = this.kz();
            }
            let h = this.actualColumns._inner[g];
            if (f == h.h0()) {
                return false;
            }
            f = h.h0();
            this.cw = ((() => {
                let $ret = new GridCellPosition();
                $ret.b = e;
                $ret.d = f;
                return $ret;
            })());
            if (this.model.br.count > 0) {
                if (h.fk == 0) {
                    this.po(e, this.model.br._inner[g].n, false);
                }
            }
            return true;
        }
        ij(a, b) {
            if (this.ch == 0 || this.cw == null) {
                return false;
            }
            let c = this.aj.r();
            let d = this.model.br._inner[c].n;
            let e = this.cu.b;
            let f = this.cu.d;
            let g = e;
            let h = f;
            let i = c;
            let j = 0;
            if (g >= 0 && g < this.d9.getRowCount()) {
                j = this.d9.getRowType(g);
            }
            let k = this.dy != 1 && j == 1;
            let l = j != 1 && j != 2 && j != 4 && j != 5;
            if (a) {
                let m;
                let n = null;
                do {
                    m = this.k4(d, false);
                    n = this.actualColumns._inner[m];
                    if (h == n.h0() || k) {
                        if (g > 0) {
                            g--;
                            j = this.d9.getRowType(g);
                            k = j == 1;
                            l = j != 1 && j != 2 && j != 4 && j != 5;
                            if (this.dy != 1 && j == 1) {
                                m = this.kv();
                            }
                            else {
                                m = this.kz();
                            }
                            n = this.actualColumns._inner[m];
                        }
                        else {
                            return false;
                        }
                    }
                    d = m;
                    h = n.h0();
                } while (this.cb.j && g >= 0 && (!l || !n.ga));
                if (this.dy != 1) {
                    if (j == 1 || j == 2) {
                        h = null;
                    }
                }
                i = m;
            }
            else {
                let o;
                let p = null;
                do {
                    o = this.k3(d, false);
                    p = this.actualColumns._inner[o];
                    if (h == p.h0() || k) {
                        if (g < this.d9.getRowCount() - 1) {
                            o = this.kv();
                            p = this.actualColumns._inner[o];
                            g++;
                            j = this.d9.getRowType(g);
                            k = j == 1;
                            l = j != 1 && j != 2 && j != 4 && j != 5;
                        }
                        else {
                            return false;
                        }
                    }
                    d = o;
                    h = p.h0();
                } while (this.cb.j && g < this.d9.getRowCount() - 1 && (!l || !p.ga));
                if (this.dy != 1) {
                    if (j == 1 || j == 2) {
                        h = null;
                    }
                }
                i = o;
            }
            if (this.cb.j && (f != h || e != g)) {
                this.ha(true);
                if (!this.cb.j) {
                    this.cw = ((() => {
                        let $ret = new GridCellPosition();
                        $ret.b = g;
                        $ret.d = h;
                        return $ret;
                    })());
                    this.po(g, this.model.br._inner[i].n, false);
                    this.i1();
                }
            }
            else {
                this.cw = ((() => {
                    let $ret = new GridCellPosition();
                    $ret.b = g;
                    $ret.d = h;
                    return $ret;
                })());
                this.po(g, this.model.br._inner[i].n, false);
            }
            return true;
        }
        sc() {
        }
        ik(a, b) {
            if (this.ch == 0 || this.cw == null) {
                return false;
            }
            let c = this.cu.b;
            let d = this.cu.d;
            if (c < 0) {
                return false;
            }
            let e = c - 1;
            if (b) {
                e = 0;
            }
            if (e < 0) {
                e = 0;
            }
            if (e == c) {
                return false;
            }
            let f = Math.min(this.aj.r(), this.actualColumns.count - 1);
            f = this.kt(f);
            let g = this.actualColumns._inner[f];
            if (d != g.h0()) {
                d = g.h0();
            }
            if (this.dy != 1) {
                let h = this.d9.getRowType(e);
                if (h == 1 || h == 2) {
                    d = null;
                }
            }
            this.cw = ((() => {
                let $ret = new GridCellPosition();
                $ret.b = e;
                $ret.d = d;
                return $ret;
            })());
            if (this.model.br.count > 0) {
                let i = this.aj.r();
                this.po(e, this.model.br._inner[i].n, false);
            }
            return true;
        }
        ia(a, b) {
            if (this.cb.j) {
                this.ha(true);
                if (this.cf == 3) {
                    this.p1(true);
                }
            }
            else {
                if (this.ch != 0 && this.cw != null) {
                    let c = this.d9.getRowType(this.cw.b);
                    if (c == 1) {
                        this.tj(this.cw.b);
                    }
                    else if (this.hr() && c == 0) {
                        let d = this.aj.r();
                        let e = this.actualColumns._inner[d];
                        if (e != null && e.ga) {
                            let f = this.model.d(d, this.cw.b);
                            return this.ix(f);
                        }
                    }
                }
            }
            return false;
        }
        ib() {
            if (this.hr()) {
                if (this.cb.l != -1) {
                    this.y.rejectPendingTransaction(this.cb.l);
                }
                this.ha(false);
                if (this.cf == 3) {
                    this.p1(false);
                }
            }
            return false;
        }
        ic() {
            return this.i1();
        }
        i1() {
            if (this.cb.j) {
                this.ha(true);
                return true;
            }
            if (this.ch != 0 && this.cw != null) {
                let a = this.d9.getRowType(this.cw.b);
                if (this.hr() && (a == 0 || a == 3)) {
                    let b = this.aj.r();
                    let c = this.actualColumns._inner[b];
                    if (c != null && c.ga) {
                        let d = this.model.d(b, this.cw.b);
                        if (d == null) {
                            this.ar = new CellPath(1, b, 0, this.cw.b);
                        }
                        else {
                            this.ix(d);
                        }
                        return true;
                    }
                }
            }
            return false;
        }
        ix(a) {
            if (!this.hr() || a == null || a.k.az < 0 || a.k.w < 0 || a.k.av) {
                return false;
            }
            this.ar = null;
            this.cb.h(true, false);
            let b = false;
            if (this.cf == 3) {
                if (!this.cb.i(a)) {
                    this.p1(true);
                    b = true;
                }
            }
            let c = this.a0(a.k);
            if (!c.ga) {
                return false;
            }
            this.cb.v(a);
            this.po(a.k.w, a.k.az, false);
            this.j3 = a.k.w;
            let d = this.actualColumns._inner[this.cb.m];
            let e = this.cb.n;
            let f = this.cb.item;
            if (b) {
                this.r3(e, f);
            }
            this.qv(d, e, f);
            return true;
        }
        ha(a, b = true) {
            if (this.cb.j) {
                let c = this.actualColumns._inner[this.cb.m];
                let d = this.cb.n;
                let e = this.cb.item;
                if (this.cb.h(a, b)) {
                    this.qu(c, d, e);
                    this.externalGrid.focusScroller();
                    return true;
                }
                return false;
            }
            return true;
        }
        p1(a) {
            if (this.cf != 3 || this.j3 == -1) {
                return;
            }
            this.j3 = -1;
            let b = this.cb.n;
            let c = this.cb.item;
            this.cb.p();
            this.r2(b, c);
            if (a) {
                this.px();
            }
            else {
                this.pp();
            }
        }
        q4(a, b) {
            this.hd = true;
            if (!this.g0) {
                let c = this.dm.af(a, this.a2.f(b).h0());
            }
            if (this.selectedCellsChanged != null) {
                let d = new GridSelectedCellsChangedEventArgs();
                d.addedCells = new GridSelectedCellsCollection();
                d.addedCells.add(this.dm.ai(a, b));
                d.removedCells = new GridSelectedCellsCollection();
                d.currentCells = this.dm;
                this.selectedCellsChanged(this, d);
            }
            this.hd = false;
        }
        q5(a, b) {
            this.hd = true;
            let c = this.dm.ai(a, b);
            if (c != null) {
                if (!this.g0) {
                    this.dm.remove(c);
                }
                if (this.selectedCellsChanged != null) {
                    let d = new GridSelectedCellsChangedEventArgs();
                    d.addedCells = new GridSelectedCellsCollection();
                    d.removedCells = new GridSelectedCellsCollection();
                    d.removedCells.add(c);
                    d.currentCells = this.dm;
                    this.selectedCellsChanged(this, d);
                }
            }
            this.hd = false;
        }
        pn(a, b) {
            let c = this.h7;
            this.h7 = false;
            if (!this.gy) {
                this.ad.add1(a);
                this.ah.add(b);
            }
            this.h7 = c;
            let d = new GridSelectedItemsChangedEventArgs();
            let e = new GridSelectedItemsCollection();
            e.add1(a);
            d.addedItems = e;
            d.currentItems = this.ad;
            if (this.selectedItemsChanged != null) {
                this.selectedItemsChanged(this, d);
            }
            let f = new GridSelectedKeysChangedEventArgs();
            let g = new GridSelectedKeysCollection();
            g.add(b);
            f.addedKeys = g;
            f.currentKeys = this.ah;
            if (this.selectedKeysChanged != null) {
                this.selectedKeysChanged(this, f);
            }
        }
        tl(a, b, c) {
            let d = this.h7;
            this.h7 = false;
            let e = this.ad.ae._inner[a];
            if (!this.gy) {
                this.ad.ae._inner[a] = b;
            }
            this.h7 = d;
            let f = new GridSelectedItemsChangedEventArgs();
            let g = new GridSelectedItemsCollection();
            g.add1(b);
            f.addedItems = g;
            let h = new GridSelectedItemsCollection();
            h.add1(b);
            f.removedItems = h;
            f.currentItems = this.ad;
            if (this.selectedItemsChanged != null) {
                this.selectedItemsChanged(this, f);
            }
        }
        st(a, b) {
            let c = this.h7;
            this.h7 = false;
            if (!this.gy) {
                this.ad.remove1(a);
                this.ah.remove(b);
            }
            this.h7 = c;
            let d = new GridSelectedItemsChangedEventArgs();
            let e = new GridSelectedItemsCollection();
            e.add1(a);
            d.removedItems = e;
            d.currentItems = this.ad;
            if (this.selectedItemsChanged != null) {
                this.selectedItemsChanged(this, d);
            }
            let f = new GridSelectedKeysChangedEventArgs();
            let g = new GridSelectedKeysCollection();
            g.add(b);
            f.removedKeys = g;
            f.currentKeys = this.ah;
            if (this.selectedKeysChanged != null) {
                this.selectedKeysChanged(this, f);
            }
        }
        pm(a, b, c, d) {
            let e = new CellRange();
            e.k = a;
            e.i = b;
            e.l = c;
            e.j = d;
            this.pl(e);
        }
        pl(a) {
            this.dj.add(a);
            this.at = a;
            if (this.selectedCellRangesChanged != null) {
                let b = new GridSelectedCellRangesChangedEventArgs();
                b.addedRanges = ((() => {
                    let $ret = new GridSelectedCellRangesCollection();
                    $ret.add(a);
                    return $ret;
                })());
                b.currentRanges = this.dj;
                this.selectedCellRangesChanged(this, b);
            }
        }
        sq(a) {
            if (this.dj.contains(a)) {
                this.dj.remove(a);
                if (this.selectedCellRangesChanged != null) {
                    let b = new GridSelectedCellRangesChangedEventArgs();
                    b.removedRanges = ((() => {
                        let $ret = new GridSelectedCellRangesCollection();
                        $ret.add(a);
                        return $ret;
                    })());
                    b.currentRanges = this.dj;
                    this.selectedCellRangesChanged(this, b);
                }
            }
        }
        sp() {
            if (this.dj.count > 0) {
                let a = new GridSelectedCellRangesCollection();
                for (let b = 0; b < this.dj.count; b++) {
                    a.add(this.dj._inner[b]);
                }
                this.dj.clear();
                if (this.selectedCellRangesChanged != null) {
                    let c = new GridSelectedCellRangesChangedEventArgs();
                    c.removedRanges = a;
                    c.currentRanges = this.dj;
                    this.selectedCellRangesChanged(this, c);
                }
            }
        }
        qi(a) {
            if (this.dj.contains(a)) {
                if (this.selectedCellRangesChanged != null) {
                    let b = new GridSelectedCellRangesChangedEventArgs();
                    b.updatedRanges = ((() => {
                        let $ret = new GridSelectedCellRangesCollection();
                        $ret.add(a);
                        return $ret;
                    })());
                    b.currentRanges = this.dj;
                    this.selectedCellRangesChanged(this, b);
                }
            }
        }
        r9(a, b, c) {
            this.qb(a);
            if (b != c) {
                this.e0.af(a);
                this.aj.ah(a);
            }
        }
        qb(a) {
            this.ck.al(this, a, a);
        }
        q6() {
            if (this.cb.j) {
                this.ha(false);
                this.j3 = -1;
            }
            this.e0.z();
            this.sl();
            this.qe();
        }
        qe() {
            if (!this.is()) {
                return;
            }
            let a = this.ky();
            let b = this.k2();
            this.qc(a, b);
        }
        qc(a, b) {
            let c = this.ky();
            let d = this.k2();
            if (b < c || a > d) {
                return;
            }
            if (a < c) {
                a = c;
            }
            if (b > d) {
                b = d;
            }
            this.ck.y(this, a, b, true);
            this.model.bn = true;
            this.sm();
        }
        kx() {
            return this.e6.o(this.model.actualVisibleRegion.left + this.model.cf, this, this.model);
        }
        k1() {
            return this.e6.o(this.model.actualVisibleRegion.right - this.model.cg, this, this.model);
        }
        qd(a, b) {
            let c = this.e6.i(this.model, a);
            let d = this.e6.i(this.model, b);
            this.qc(c, d);
        }
        sh() {
            if (!this.f9) {
                this.f9 = true;
                this.fc.v();
                this.renderingEngine.invalidateVisibility(() => this.fc.l(this));
                this.renderingEngine.refresh(this.model, false);
            }
        }
        rv(a, b) {
            let c = this.d9.getRowPathForRow(a);
            this.c9.ae(c);
            this.e0.ad(this.e6.i(this.model, c));
            this.aj.af(this.e6.i(this.model, c));
            this.sh();
        }
        r0(a, b) {
            let c = this.d9.getRowPathForRow(a);
            this.c9.af(c);
            this.e0.ae(this.e6.i(this.model, c));
            this.aj.ag(this.e6.i(this.model, c));
            this.sh();
        }
        s7(a) {
            for (let b = 0; b < this.ek.g.count; b++) {
                if (this.ek.g._inner[b].n == a) {
                    this.s8(this.ek.g._inner[b]);
                }
            }
        }
        s8(a) {
            this.ek.x(a);
        }
        qp(a, b, c) {
            if (this.w != null) {
                this.w.notifySetItem(a, b, c);
            }
        }
        qj() {
            if (this.w != null) {
                this.w.notifyClearItems();
            }
        }
        ql(a, b) {
            if (this.w != null) {
                this.w.notifyInsertItem(a, b);
            }
            ;
        }
        qm(a, b) {
            if (this.w != null) {
                this.w.notifyRemoveItem(a, b);
            }
            ;
        }
        kr(a) {
            if (this.w == null) {
                return -1;
            }
            return this.w.indexOfItem(a);
        }
        ks(a) {
            if (this.w == null) {
                return -1;
            }
            return this.w.indexOfKey(a);
        }
        i() {
            if (this.actualDataSource != null) {
                return this.actualDataSource.actualPrimaryKey;
            }
            return this.e;
        }
        ls(a) {
            let b = a.b != null ? a.b : this.a2.g(a.j);
            let c = null;
            if (a.h != null) {
                c = a.h;
            }
            else if (a.primaryKey != null) {
                if (this.i() == null && a.primaryKey.key == null && a.primaryKey.value.length == 1) {
                    c = a.primaryKey.value[0];
                }
                else {
                    c = this.d9.getItemForKey(a.primaryKey);
                }
            }
            if (b != null && c != null) {
                return this.actualDataSource.getItemProperty(c, b.hy);
            }
            return null;
        }
        lt(a, b) {
            if (b < 0 || b > this.a2.j.count) {
                return null;
            }
            if (a < 0 || a > this.d9.getRowCount() - 1) {
                return null;
            }
            let c = this.actualDataSource.getItemAtIndex(a);
            if (c == null) {
                return null;
            }
            else {
                let d = this.d9.getRowType(a);
                if (d != 0 && d != 3) {
                    return null;
                }
            }
            let e = this.e6.j(b, this.model);
            let f = this.a2.j._inner[e];
            return this.actualDataSource.getItemProperty(c, f.hy);
        }
        az(a) {
            let b = this.e6.j(a, this.model);
            if (b >= 0 && b < this.a2.j.count) {
                return this.a2.j._inner[b];
            }
            return null;
        }
        j() {
            if (this.actualDataSource != null) {
                return this.actualDataSource.getRootSummaryResults();
            }
            return null;
        }
        k(a) {
            if (this.actualDataSource != null) {
                return this.actualDataSource.getSectionSummaryResults(a);
            }
            return null;
        }
        get io() {
            return this.gs;
        }
        set io(a) {
            let b = this.gs;
            this.gs = a;
            if (b != this.gs) {
                this.rz("ReactsToSortChanges", b, this.gs);
            }
        }
        get im() {
            return this.gr;
        }
        set im(a) {
            let b = this.gr;
            this.gr = a;
            if (b != this.gr) {
                this.rz("ReactsToGroupChanges", b, this.gr);
            }
        }
        get il() {
            return this.gq;
        }
        set il(a) {
            let b = this.gq;
            this.gq = a;
            if (b != this.gq) {
                this.rz("ReactsToFilterChanges", b, this.gq);
            }
        }
        z(a) {
            let b = null;
            for (let c = 0; c < this.a2.j.count; c++) {
                let d = this.a2.j._inner[c];
                if (d != a && d.eo != null) {
                    let e = this.actualDataSource.resolveSchemaPropertyType(d.hy);
                    let f = d.eo.a(d.hy, e);
                    if (b != null) {
                        b = FilterFactory.instance.and(b, f);
                    }
                    else {
                        b = f;
                    }
                }
            }
            return b;
        }
        i2(a, b) {
            if (this.actualDataSource != null && a.k.az >= 0 && a.k.az < this.actualColumns.count) {
                let c = this.actualColumns._inner[a.k.az];
                let d = this.actualDataSource.resolveSchemaPropertyType(c.hy);
                let e = null;
                try {
                    e = this.lo(d, b);
                }
                catch (f) {
                    this.cb.t(f.message);
                    return false;
                }
                if (e == null && a.go != null || e != null && a.go == null || !Base.equalsStatic(e, a.go)) {
                    if (this.cb.l != -1) {
                        this.y.rejectPendingTransaction(this.cb.l);
                    }
                    this.cb.t(null);
                    let g = this.d9.getItemKey(this.e, a.gp);
                    let h = this.y.updatePropertyAtKey(g.value, c.hy, e, true);
                    this.gp = true;
                    if (this.cellValueChanging != null) {
                        let i = ((() => {
                            let $ret = new GridCellValueChangingEventArgs();
                            $ret.c = h;
                            $ret.cellInfo = a;
                            $ret.b = c;
                            $ret.e = a.go;
                            $ret.d = e;
                            return $ret;
                        })());
                        this.cellValueChanging(this, i);
                        let j = this.y.getTransactionErrorByID(h);
                        if (j != null) {
                            this.cb.t(j);
                            a.en = h;
                            return false;
                        }
                        let k = this.y.isPendingTransaction(h);
                        if (k && this.g2) {
                            this.pj(h);
                        }
                    }
                    else {
                        this.pj(h);
                    }
                    this.gp = false;
                }
                else {
                    if (this.cb.l != -1) {
                        let l = this.y.getTransactionErrorByID(this.cb.l);
                        if (l != null) {
                            this.cb.t(l);
                            return false;
                        }
                    }
                }
            }
            return true;
        }
        lo(a, b) {
            if (b == null) {
                return null;
            }
            switch (a) {
                case 2: return Convert.toBoolean(b);
                case 10: return Convert.toByte1(b);
                case 8: return Convert.toDateTime(b);
                case 6: return Convert.toDecimal2(b);
                case 5: return Convert.toDouble3(b);
                case 1: return Convert.toInt321(b);
                case 3: return Convert.toInt64(b);
                case 11: return b;
                case 0: return b.toString();
            }
            return b;
        }
        rj(a, b) {
            if (this.columnWidthChanged != null) {
                let c = ((() => {
                    let $ret = new GridColumnWidthChangedEventArgs();
                    $ret.a = a;
                    $ret.b = b;
                    return $ret;
                })());
                this.columnWidthChanged(a.externalObject, c);
            }
        }
        qv(a, b, c) {
            if (this.cellEditStarted != null) {
                this.cellEditStarted(this, ((() => {
                    let $ret = new GridCellEditStartedEventArgs();
                    $ret.a = a;
                    $ret.b = b;
                    $ret.item = c;
                    return $ret;
                })()));
            }
        }
        qu(a, b, c) {
            if (this.cellEditEnded != null) {
                this.cellEditEnded(this, ((() => {
                    let $ret = new GridCellEditEndedEventArgs();
                    $ret.a = a;
                    $ret.b = b;
                    $ret.item = c;
                    return $ret;
                })()));
            }
        }
        r3(a, b) {
            if (this.rowEditStarted != null) {
                this.rowEditStarted(this, ((() => {
                    let $ret = new GridRowEditStartedEventArgs();
                    $ret.a = a;
                    $ret.item = b;
                    return $ret;
                })()));
            }
        }
        r2(a, b) {
            if (this.rowEditEnded != null) {
                this.rowEditEnded(this, ((() => {
                    let $ret = new GridRowEditEndedEventArgs();
                    $ret.a = a;
                    $ret.item = b;
                    return $ret;
                })()));
            }
        }
        hr() {
            return this.y != null && !this.y.isReadOnly && this.cf != 0;
        }
        get g9() {
            if (this.y != null) {
                return this.y.canUndo;
            }
            return false;
        }
        get g8() {
            if (this.y != null) {
                return this.y.canRedo;
            }
            return false;
        }
        get g5() {
            if (this.y != null) {
                return this.y.canCommit;
            }
            return false;
        }
        px() {
            if (this.hr() && this.g5) {
                if (this.cb.j && this.cb.l != -1) {
                    this.ha(false);
                }
                let a = this.y.commitEdits(true);
                if (a != -1) {
                    let b = this.y.getAggregatedChanges(a);
                    if (this.dataCommitting != null) {
                        let c = new GridDataCommittingEventArgs(a, b);
                        this.dataCommitting(this, c);
                        if (this.y.isPendingCommit(a) && this.g2) {
                            this.pi(a);
                        }
                    }
                    else {
                        this.pi(a);
                    }
                }
            }
        }
        pp() {
            if (this.hr()) {
                this.y.cancelEdits();
            }
        }
        pi(a) {
            if (this.hr()) {
                this.y.acceptPendingCommit(a);
            }
        }
        sn(a) {
            if (this.hr()) {
                this.y.rejectPendingCommit(a);
            }
        }
        tf() {
            if (this.hr()) {
                this.y.undo();
            }
        }
        sj() {
            if (this.hr()) {
                this.y.redo();
            }
        }
        tk(a, b, c) {
            if (this.hr()) {
                this.y.updatePropertyAtKey(a, b, c, false);
                if (this.cf != 2) {
                    this.px();
                }
            }
        }
        ss(a) {
            if (this.hr()) {
                this.y.removeItemByKey(a);
                if (this.cf != 2) {
                    this.px();
                }
            }
        }
        sr(a) {
            if (this.hr()) {
                this.y.removeItem(a);
                if (this.cf != 2) {
                    this.px();
                }
            }
        }
        pj(a) {
            if (this.hr()) {
                this.y.acceptPendingTransaction(a);
                if (!this.y.isBatchingEnabled) {
                    this.px();
                }
            }
        }
        so(a) {
            if (this.hr()) {
                this.y.rejectPendingTransaction(a);
            }
        }
        s9(a, b) {
            if (this.hr()) {
                this.y.setTransactionError(a, b);
            }
        }
    }
    Grid.$t = /*@__PURE__*/ markType(Grid, 'Grid', Base.$, [INotifyPropertyChanged_$type]);
    return Grid;
})();
/**
 * @hidden
 */
export let GridColumnsAutoGeneratedEventArgs = /*@__PURE__*/ (() => {
    class GridColumnsAutoGeneratedEventArgs extends EventArgs {
        constructor() {
            super(...arguments);
            this._columns = null;
        }
        get columns() {
            return this._columns;
        }
        set columns(a) {
            this._columns = a;
        }
    }
    GridColumnsAutoGeneratedEventArgs.$t = /*@__PURE__*/ markType(GridColumnsAutoGeneratedEventArgs, 'GridColumnsAutoGeneratedEventArgs', EventArgs.$);
    return GridColumnsAutoGeneratedEventArgs;
})();
/**
 * @hidden
 */
export let GridColumnsChangedEventArgs = /*@__PURE__*/ (() => {
    class GridColumnsChangedEventArgs extends EventArgs {
        constructor() {
            super(...arguments);
            this._columns = null;
        }
        get columns() {
            return this._columns;
        }
        set columns(a) {
            this._columns = a;
        }
    }
    GridColumnsChangedEventArgs.$t = /*@__PURE__*/ markType(GridColumnsChangedEventArgs, 'GridColumnsChangedEventArgs', EventArgs.$);
    return GridColumnsChangedEventArgs;
})();
/**
 * @hidden
 */
export let GridSelectedCellsChangedEventArgs = /*@__PURE__*/ (() => {
    class GridSelectedCellsChangedEventArgs extends EventArgs {
        constructor() {
            super(...arguments);
            this._currentCells = null;
            this._addedCells = null;
            this._removedCells = null;
        }
        get currentCells() {
            return this._currentCells;
        }
        set currentCells(a) {
            this._currentCells = a;
        }
        get addedCells() {
            return this._addedCells;
        }
        set addedCells(a) {
            this._addedCells = a;
        }
        get removedCells() {
            return this._removedCells;
        }
        set removedCells(a) {
            this._removedCells = a;
        }
    }
    GridSelectedCellsChangedEventArgs.$t = /*@__PURE__*/ markType(GridSelectedCellsChangedEventArgs, 'GridSelectedCellsChangedEventArgs', EventArgs.$);
    return GridSelectedCellsChangedEventArgs;
})();
/**
 * @hidden
 */
export let GridCellEventArgs = /*@__PURE__*/ (() => {
    class GridCellEventArgs extends EventArgs {
        constructor() {
            super(...arguments);
            this._cellInfo = null;
            this._grid = null;
        }
        get cellInfo() {
            return this._cellInfo;
        }
        set cellInfo(a) {
            this._cellInfo = a;
        }
        get grid() {
            return this._grid;
        }
        set grid(a) {
            this._grid = a;
        }
    }
    GridCellEventArgs.$t = /*@__PURE__*/ markType(GridCellEventArgs, 'GridCellEventArgs', EventArgs.$);
    return GridCellEventArgs;
})();
/**
 * @hidden
 */
export let ColumnHiddenChangedEventArgs = /*@__PURE__*/ (() => {
    class ColumnHiddenChangedEventArgs extends Base {
        constructor() {
            super(...arguments);
            this.a = null;
            this.b = false;
        }
    }
    ColumnHiddenChangedEventArgs.$t = /*@__PURE__*/ markType(ColumnHiddenChangedEventArgs, 'ColumnHiddenChangedEventArgs');
    return ColumnHiddenChangedEventArgs;
})();
/**
 * @hidden
 */
export let ColumnPinnedChangedEventArgs = /*@__PURE__*/ (() => {
    class ColumnPinnedChangedEventArgs extends Base {
        constructor() {
            super(...arguments);
            this.a = null;
            this.b = 0;
        }
    }
    ColumnPinnedChangedEventArgs.$t = /*@__PURE__*/ markType(ColumnPinnedChangedEventArgs, 'ColumnPinnedChangedEventArgs');
    return ColumnPinnedChangedEventArgs;
})();
/**
 * @hidden
 */
export let GridCellValueChangingEventArgs = /*@__PURE__*/ (() => {
    class GridCellValueChangingEventArgs extends Base {
        constructor() {
            super(...arguments);
            this.c = 0;
            this._cellInfo = null;
            this.b = null;
            this.e = null;
            this.d = null;
        }
        get cellInfo() {
            return this._cellInfo;
        }
        set cellInfo(a) {
            this._cellInfo = a;
        }
    }
    GridCellValueChangingEventArgs.$t = /*@__PURE__*/ markType(GridCellValueChangingEventArgs, 'GridCellValueChangingEventArgs');
    return GridCellValueChangingEventArgs;
})();
/**
 * @hidden
 */
export let GridColumnWidthChangedEventArgs = /*@__PURE__*/ (() => {
    class GridColumnWidthChangedEventArgs extends Base {
        constructor() {
            super(...arguments);
            this.a = null;
            this.b = null;
        }
    }
    GridColumnWidthChangedEventArgs.$t = /*@__PURE__*/ markType(GridColumnWidthChangedEventArgs, 'GridColumnWidthChangedEventArgs');
    return GridColumnWidthChangedEventArgs;
})();
/**
 * @hidden
 */
export let GridCellEditStartedEventArgs = /*@__PURE__*/ (() => {
    class GridCellEditStartedEventArgs extends Base {
        constructor() {
            super(...arguments);
            this.a = null;
            this.b = 0;
            this._item = null;
        }
        get item() {
            return this._item;
        }
        set item(a) {
            this._item = a;
        }
    }
    GridCellEditStartedEventArgs.$t = /*@__PURE__*/ markType(GridCellEditStartedEventArgs, 'GridCellEditStartedEventArgs');
    return GridCellEditStartedEventArgs;
})();
/**
 * @hidden
 */
export let GridCellEditEndedEventArgs = /*@__PURE__*/ (() => {
    class GridCellEditEndedEventArgs extends Base {
        constructor() {
            super(...arguments);
            this.a = null;
            this.b = 0;
            this._item = null;
        }
        get item() {
            return this._item;
        }
        set item(a) {
            this._item = a;
        }
    }
    GridCellEditEndedEventArgs.$t = /*@__PURE__*/ markType(GridCellEditEndedEventArgs, 'GridCellEditEndedEventArgs');
    return GridCellEditEndedEventArgs;
})();
/**
 * @hidden
 */
export let GridAnimationManager = /*@__PURE__*/ (() => {
    class GridAnimationManager extends Base {
        constructor() {
            super();
            this.l = new List$1(Number_$type, 0);
            this.i = false;
            this.animationCreated = null;
            this.animationCompleted = null;
            this.animationCanceled = null;
            this.g = new GridColumnAnimationSettings();
            this.f = new GridAnimationSettings();
            this.k = new Dictionary$2(Number_$type, List$1.$.specialize(Delegate_$type), 0);
            this.e = null;
            this.d = null;
            this.e = new GridAnimationPhaseSettings();
            this.e.l = 0;
            this.e.e = true;
            this.e.n = 0;
            this.d = new GridAnimationPhaseSettings();
            this.d.l = 0;
            this.d.e = true;
            this.d.n = 0;
        }
        get h() {
            return this.g;
        }
        p() {
            let a = GridAnimationManager.o;
            GridAnimationManager.o++;
            return a;
        }
        ar() {
            this.i = true;
            this.l = new List$1(Number_$type, 0);
        }
        m() {
            this.i = false;
            return this.l;
        }
        w(a) {
            if (this.i) {
                this.l.add(a);
            }
            if (this.animationCreated != null) {
                this.animationCreated(this, ((() => {
                    let $ret = new GridAnimationManagerAnimationCreatedEventArgs();
                    $ret.a = a;
                    return $ret;
                })()));
            }
        }
        u(a) {
            if (this.i) {
                this.l.remove(a);
            }
            if (this.animationCanceled != null) {
                this.animationCanceled(this, ((() => {
                    let $ret = new GridAnimationManagerAnimationCanceledEventArgs();
                    $ret.a = a;
                    return $ret;
                })()));
            }
        }
        v(a) {
            if (this.i) {
                this.l.remove(a);
            }
            if (this.animationCompleted != null) {
                this.animationCompleted(this, ((() => {
                    let $ret = new GridAnimationManagerAnimationCompletedEventArgs();
                    $ret.a = a;
                    return $ret;
                })()));
            }
        }
        aq(a, b, c, d, e) {
            if (c == null) {
                return;
            }
            let f = this.p();
            this.w(f);
            let g;
            let h;
            let i = a.a2.f(c.o);
            if (i == null) {
                return;
            }
            let j = new GridEffectGroup(1);
            j.effectsFinished = delegateCombine(j.effectsFinished, (k, l) => {
                i.e8 = 5;
                c.a = 5;
                a.model.bk = false;
                a.sl();
                a.rh(i);
                this.v(f);
            });
            j.effectsCanceled = delegateCombine(j.effectsCanceled, (k, l) => {
                a.model.bk = false;
                a.rg(i);
                this.u(f);
            });
            if (d) {
                if (i.fe != null && i.fe.n != null) {
                    g = i.fe.n;
                }
                else if (b != null && b.n != null) {
                    g = b.n;
                }
                else {
                    g = this.g.n;
                }
                if (i.fe != null && i.fe.m != null) {
                    h = i.fe.m;
                }
                else if (b != null && b.m != null) {
                    h = b.m;
                }
                else {
                    h = this.g.m;
                }
            }
            else {
                if (i.fe != null && i.fe.x != null) {
                    g = i.fe.x;
                }
                else if (b != null && b.x != null) {
                    g = b.x;
                }
                else {
                    g = this.g.x;
                }
                if (i.fe != null && i.fe.w != null) {
                    h = i.fe.w;
                }
                else if (b != null && b.w != null) {
                    h = b.w;
                }
                else {
                    h = this.g.w;
                }
            }
            let k = a.bz;
            if (!d) {
                k = a.b0;
            }
            if (k == 0) {
                k = i.e4();
            }
            if (e == 3 || e == 0) {
                switch (k) {
                    case 2:
                    case 4:
                    case 5:
                    case 7:
                    case 9:
                    case 10:
                    case 6:
                        c.h = -1;
                        break;
                    case 3:
                    case 8:
                        c.h = 1;
                        break;
                }
            }
            a.model.bk = true;
            let l = new ColumnEffect();
            l.bx(g);
            l.al = true;
            l.bq = 0;
            l.x = (m, n, o, p, q) => {
                let r = o;
                let s = n;
                let t = p;
                t.h = s + (r - s) * m;
            };
            l.o = (m, n) => c.h;
            j.g(l);
            a.c9.u(c, l);
            let m = new ColumnCellsEffect();
            m.t = 1;
            m.bx(h);
            m.al = true;
            m.bq = 0;
            m.x = (n, o, p, q, r) => {
                let s = p;
                let t = o;
                let u = q;
                switch (k) {
                    case 6:
                    case 2:
                    case 3:
                    case 7:
                    case 8:
                        u.b5 = t + (s - t) * n;
                        break;
                    case 4:
                    case 5:
                    case 9:
                    case 10:
                        u.b9 = t + (s - t) * n;
                        break;
                }
            };
            m.o = (n, o) => {
                let p = n;
                let q = p.b5;
                if (k == 4 || k == 5 || k == 9 || k == 10) {
                    q = p.b9;
                }
                if (e == 0 || e == 3) {
                    switch (k) {
                        case 6:
                            q = 0;
                            p.b5 = q;
                            p.ca = q;
                            p.b4 = 0;
                            p.b9 = 0;
                            break;
                        case 2:
                        case 7:
                            q = -1;
                            p.b5 = q;
                            p.b4 = 0;
                            p.ca = 0;
                            p.b9 = 0;
                            break;
                        case 3:
                        case 8:
                            q = 1;
                            p.b5 = q;
                            p.b4 = 0;
                            p.ca = 0;
                            p.b9 = 0;
                            break;
                        case 4:
                        case 9:
                            q = (a.jl + a.model.ci) * -1;
                            p.b9 = q;
                            p.b4 = 0;
                            p.b5 = 0;
                            p.ca = 0;
                            break;
                        case 5:
                        case 10:
                            q = (a.jl + a.model.ci) * 1;
                            p.b9 = q;
                            p.b4 = 0;
                            p.b5 = 0;
                            p.ca = 0;
                            break;
                    }
                }
                return q;
            };
            if (a.model.bm()) {
                m.g = new CellPath(0, 0, c.m, a.model.bf.x, a.model.bf.w);
                m.e = new CellPath(0, 0, c.m, a.model.be.x, a.model.be.w);
            }
            j.g(m);
            if (k == 4 || k == 9) {
                m.ao = true;
            }
            a.c9.t(c, m);
            let n = new ColumnCellsEffect();
            n.t = 2;
            n.bx(h);
            n.al = true;
            n.bq = 1;
            n.x = (o, p, q, r, s) => {
                let t = q;
                let u = p;
                let v = r;
                let w = u + (t - u) * o;
                if (w < 0) {
                    w = 0;
                }
                v.b1 = w;
            };
            n.o = (o, p) => {
                let q = o;
                if (e == 0 || e == 3) {
                    switch (k) {
                        case 10:
                        case 7:
                        case 8:
                        case 9:
                            q.b1 = -1;
                            break;
                        case 6:
                            q.b1 = 0;
                            break;
                    }
                }
                return q.b1;
            };
            if (a.model.bm()) {
                n.g = new CellPath(0, 0, c.m, a.model.bf.x, a.model.bf.w);
                n.e = new CellPath(0, 0, c.m, a.model.be.x, a.model.be.w);
            }
            j.g(n);
            if (k == 4 || k == 9) {
                n.ao = true;
            }
            a.c9.t(c, n);
        }
        ai(a, b, c, d, e) {
            if (c == null || d == null) {
                return;
            }
            let f = this.p();
            this.w(f);
            c.a = 2;
            d.a = 1;
            let g;
            let h;
            let i = a.a2.f(d.o);
            let j = a.a2.f(c.o);
            if (i == null || j == null) {
                return;
            }
            if (i.fe != null && i.fe.o != null) {
                g = i.fe.o;
            }
            else if (j.fe != null && j.fe.o != null) {
                g = j.fe.o;
            }
            else if (b != null && b.x != null) {
                g = b.o;
            }
            else {
                g = this.g.o;
            }
            if (i.fe != null && i.fe.p != null) {
                h = i.fe.p;
            }
            else if (j.fe != null && j.fe.p != null) {
                h = j.fe.p;
            }
            else if (b != null && b.p != null) {
                h = b.p;
            }
            else {
                h = this.g.p;
            }
            let k = a.a4;
            if (k == 0) {
                k = i.et();
            }
            let l = false;
            if (k == 2 || k == 7) {
                l = true;
            }
            if (l) {
                d.h = 1;
            }
            else {
                d.h = -1;
            }
            if (this.k.containsKey(c.o)) {
                this.k.addItem(d.o, new List$1(Delegate_$type, 0));
                this.k.item(c.o).add(() => {
                    c = a.model.g(c.o);
                    d = a.model.g(d.o);
                    if (c == null || d == null) {
                        return;
                    }
                    j.e8 = 2;
                    c.a = 2;
                    i.e8 = 1;
                    d.a = 1;
                    this.x(a, c, d, g, h, i, j, k, l, f);
                });
            }
            else {
                this.k.addItem(d.o, new List$1(Delegate_$type, 0));
                this.x(a, c, d, g, h, i, j, k, l, f);
            }
        }
        x(a, b, c, d, e, f, g, h, i, j) {
            if (b == null || c == null) {
                return;
            }
            let k = new GridEffectGroup(1);
            k.effectsFinished = delegateCombine(k.effectsFinished, (l, m) => {
                let n = a.model.g(b.o);
                let o = a.model.g(c.o);
                let p = new GridEffectGroup(1);
                p.effectsFinished = delegateCombine(p.effectsFinished, (q, r) => {
                    g.e8 = 3;
                    b.a = 3;
                    a.columns.remove(g);
                    f.e8 = 5;
                    c.a = 5;
                    a.model.bk = false;
                    a.sl();
                    if (this.k.containsKey(c.o)) {
                        let s = this.k.item(c.o);
                        if (s.count == 0) {
                            this.k.removeItem(c.o);
                        }
                        else {
                            let t = s._inner[0];
                            s.removeAt(0);
                            t();
                        }
                    }
                    a.q8(f);
                    this.v(j);
                });
                p.effectsCanceled = delegateCombine(p.effectsCanceled, (q, r) => {
                    a.model.bk = false;
                    a.q7(f);
                    this.u(j);
                });
                this.t(a, n, o, d, g, i, p);
                this.s(a, n, o, d, f, g, i, p);
            });
            k.effectsCanceled = delegateCombine(k.effectsCanceled, (l, m) => {
                a.q7(f);
                let n = new GridEffectGroup(1);
                n.effectsFinished = delegateCombine(n.effectsFinished, (o, p) => {
                    g.e8 = 3;
                    b.a = 3;
                    a.columns.remove(g);
                    a.model.bk = false;
                    a.sl();
                });
                n.effectsCanceled = delegateCombine(n.effectsCanceled, (o, p) => a.model.bk = false);
                let o = a.model.g(b.o);
                let p = a.model.g(c.o);
                this.t(a, o, p, d, g, i, n);
            });
            let l = new ColumnCellsEffect();
            l.t = 1;
            l.bx(e);
            l.al = true;
            k.g(l);
            if (c.d != 0) {
                a.model.bk = true;
            }
            if (i) {
                l.bq = -1 - b.h;
            }
            else {
                l.bq = 1 + b.h;
            }
            let m = false;
            switch (h) {
                case 4:
                case 9:
                    l.bq = (a.jl + a.model.ci) * -1;
                    m = true;
                    break;
                case 5:
                case 10:
                    l.bq = (a.jl + a.model.ci) * 1;
                    m = true;
                    break;
            }
            if (m) {
                l.bi = 0;
            }
            l.x = (n, o, p, q, r) => {
                let s = p;
                let t = o;
                let u = q;
                switch (h) {
                    case 2:
                    case 3:
                    case 7:
                    case 8:
                        u.b5 = t + (s - t) * n;
                        break;
                    case 4:
                    case 5:
                    case 9:
                    case 10:
                        u.b9 = t + (s - t) * n;
                        break;
                }
            };
            l.o = (n, o) => {
                let p = n;
                let q = p.b5;
                if (h == 4 || h == 5 || h == 9 || h == 10) {
                    q = p.b9;
                }
                if (h == 6) {
                    q = 0;
                }
                switch (h) {
                    case 2:
                    case 7:
                    case 6:
                        p.b5 = q;
                        p.b4 = 0;
                        p.ca = 0;
                        p.b9 = 0;
                        break;
                    case 3:
                    case 8:
                        p.b5 = q;
                        p.b4 = 0;
                        p.ca = 0;
                        p.b9 = 0;
                        break;
                    case 4:
                    case 9:
                        q = p.b9;
                        p.b9 = q;
                        p.b4 = 0;
                        p.b5 = 0;
                        p.ca = 0;
                        break;
                    case 5:
                    case 10:
                        q = p.b9;
                        p.b9 = q;
                        p.b4 = 0;
                        p.b5 = 0;
                        p.ca = 0;
                        break;
                }
                return q;
            };
            if (a.model.bm()) {
                l.g = new CellPath(0, 0, b.m, a.model.bf.x, a.model.bf.w);
                l.e = new CellPath(0, 0, b.m, a.model.be.x, a.model.be.w);
            }
            l.onFinished = delegateCombine(l.onFinished, (n) => {
            });
            if (h == 4 || h == 9) {
                l.ao = true;
            }
            a.c9.t(b, l);
            let n = new ColumnCellsEffect();
            n.t = 1;
            n.bx(e);
            n.al = true;
            k.g(n);
            if (i) {
                n.bq = -1;
            }
            else {
                n.bq = 1;
            }
            if (m) {
                n.bq = 0;
            }
            if (m) {
                n.bi = 0;
            }
            n.x = (o, p, q, r, s) => {
                let t = q;
                let u = p;
                let v = r;
                switch (h) {
                    case 2:
                    case 3:
                    case 7:
                    case 8:
                        v.b5 = u + (t - u) * o;
                        break;
                    case 4:
                    case 5:
                    case 9:
                    case 10:
                        v.b9 = u + (t - u) * o;
                        break;
                }
            };
            n.o = (o, p) => {
                let q = o;
                let r = q.b5;
                if (h == 4 || h == 5 || h == 9 || h == 10) {
                    r = q.b9;
                }
                if (h == 6) {
                    r = n.bq;
                }
                else {
                    r = 0;
                }
                switch (h) {
                    case 2:
                    case 7:
                    case 6:
                        q.b5 = r;
                        q.b4 = 0;
                        q.ca = 0;
                        q.b9 = 0;
                        break;
                    case 3:
                    case 8:
                        q.b5 = r;
                        q.b4 = 0;
                        q.ca = 0;
                        q.b9 = 0;
                        break;
                    case 4:
                    case 9:
                        r = (a.jl + a.model.ci) * 1;
                        q.b9 = r;
                        q.b4 = 0;
                        q.b5 = 1;
                        q.ca = 0;
                        break;
                    case 5:
                    case 10:
                        r = (a.jl + a.model.ci) * -1;
                        q.b9 = r;
                        q.b4 = 0;
                        q.b5 = 1;
                        q.ca = 0;
                        break;
                }
                return r;
            };
            if (a.model.bm()) {
                n.g = new CellPath(0, 0, c.m, a.model.bf.x, a.model.bf.w);
                n.e = new CellPath(0, 0, c.m, a.model.be.x, a.model.be.w);
            }
            if (h == 5 || h == 10) {
                n.ao = true;
            }
            a.c9.t(c, n);
            let o = new ColumnCellsEffect();
            o.t = 2;
            o.bx(e);
            o.al = true;
            o.bq = 0;
            k.g(o);
            if (h != 6 && h != 10 && h != 7 && h != 9) {
                o.bq = 1;
            }
            o.x = (p, q, r, s, t) => {
                let u = r;
                let v = q;
                let w = s;
                w.b6 = v + (u - v) * p;
            };
            o.o = (p, q) => {
                let r = p;
                let s = r.b6;
                return s;
            };
            if (a.model.bm()) {
                o.g = new CellPath(0, 0, b.m, a.model.bf.x, a.model.bf.w);
                o.e = new CellPath(0, 0, b.m, a.model.be.x, a.model.be.w);
            }
            o.onFinished = delegateCombine(o.onFinished, (p) => {
            });
            if (h == 5 || h == 10) {
                o.ao = true;
            }
            a.c9.t(b, o);
            let p = new ColumnCellsEffect();
            p.t = 2;
            p.bx(e);
            p.al = true;
            p.bq = 1;
            k.g(p);
            p.x = (q, r, s, t, u) => {
                let v = s;
                let w = r;
                let x = t;
                x.b6 = w + (v - w) * q;
            };
            p.o = (q, r) => {
                let s = q;
                let t = s.b6;
                if (h == 6 || h == 10 || h == 8 || h == 7 || h == 9) {
                    t = 0;
                }
                s.b6 = t;
                return t;
            };
            if (a.model.bm()) {
                p.g = new CellPath(0, 0, c.m, a.model.bf.x, a.model.bf.w);
                p.e = new CellPath(0, 0, c.m, a.model.be.x, a.model.be.w);
            }
            if (h == 5 || h == 10) {
                p.ao = true;
            }
            a.c9.t(c, p);
        }
        t(a, b, c, d, e, f, g) {
            if (b == null) {
                return;
            }
            let h = new ColumnEffect();
            h.bx(d);
            h.al = true;
            g.g(h);
            if (f) {
                h.bq = -1;
            }
            else {
                h.bq = 1;
            }
            h.x = (i, j, k, l, m) => {
                let n = k;
                let o = j;
                let p = l;
                p.h = o + (n - o) * i;
            };
            h.o = (i, j) => {
                if (this.j(b, c)) {
                    b.h = h.bq;
                    return h.bq;
                }
                return b.h;
            };
            a.c9.u(b, h);
        }
        s(a, b, c, d, e, f, g, h) {
            if (c == null) {
                return;
            }
            let i = new ColumnEffect();
            i.bx(d);
            i.al = true;
            i.bq = 0;
            h.g(i);
            i.x = (j, k, l, m, n) => {
                let o = l;
                let p = k;
                let q = m;
                q.h = p + (o - p) * j;
            };
            i.o = (j, k) => {
                if (this.j(b, c)) {
                    c.h = i.bq;
                    return c.h;
                }
                return c.h;
            };
            a.c9.u(c, i);
            let j = new ColumnCellsEffect();
            j.bx(d);
            j.al = true;
            j.bq = 0;
            h.g(j);
            j.x = (k, l, m, n, o) => {
                let p = m;
                let q = l;
                let r = n;
                r.b5 = q + (p - q) * k;
            };
            j.o = (k, l) => {
                let m = k;
                if (this.j(b, c)) {
                    m.b5 = j.bq;
                    return m.b5;
                }
                return m.b5;
            };
            a.c9.t(c, j);
        }
        j(a, b) {
            if (a == null) {
                return true;
            }
            if (b == null) {
                return true;
            }
            if (a.b == null && b.b == null) {
                return true;
            }
            if (a.b == null && (b.b.c && b.b.f == 1)) {
                return true;
            }
            if ((a.b.c && a.b.f == 1) && b.b == null) {
                return true;
            }
            if (a.b.c && b.b.c && a.b.f == b.b.f) {
                return true;
            }
            if (!a.b.c && !b.b.c && a.b.f == b.b.f) {
                return true;
            }
            return false;
        }
        ag(a, b, c, d) {
            if (c == null) {
                return;
            }
            let e = a.a2.f(c.o);
            if (e == null) {
                return;
            }
            let f = this.p();
            this.w(f);
            let g;
            if (e.fe != null && e.fe.v != null) {
                g = e.fe.v;
            }
            else if (b != null && b.v != null) {
                g = b.v;
            }
            else {
                g = this.g.v;
            }
            let h = new ColumnEffect();
            h.bx(g);
            h.al = true;
            h.bq = d;
            h.onFinished = delegateCombine(h.onFinished, (i) => this.v(f));
            h.onCanceled = delegateCombine(h.onCanceled, (i, j) => this.u(f));
            h.x = (i, j, k, l, m) => {
                let n = k;
                let o = j;
                let p = l;
                let q = o + (n - o) * i;
                let r = ((() => {
                    let $ret = new ColumnWidth();
                    $ret.f = q;
                    $ret.c = false;
                    return $ret;
                })());
                if (!isNaN_(e.gm)) {
                    r.e = e.gm;
                }
                e.width = r;
            };
            h.o = (i, j) => c.k;
            if (!a.hp(e)) {
                h.ba = 0;
            }
            a.c9.u(c, h);
        }
        ak(a, b, c, d) {
            if (c == null) {
                return;
            }
            let e = this.p();
            this.w(e);
            let f;
            let g;
            let h = a.a2.f(c.o);
            if (h == null) {
                return;
            }
            if (h.fe != null && h.fe.t != null) {
                f = h.fe.t;
            }
            else if (b != null && b.t != null) {
                f = b.t;
            }
            else {
                f = this.g.t;
            }
            if (h.fe != null && h.fe.s != null) {
                g = h.fe.s;
            }
            else if (b != null && b.w != null) {
                g = b.s;
            }
            else {
                g = this.g.s;
            }
            let i = a.bd;
            let j = new GridEffectGroup(1);
            j.effectsFinished = delegateCombine(j.effectsFinished, (k, l) => {
                let m = a.model.g(c.o);
                let n = a.model.bt(m);
                for (let o = 0; o < n.count; o++) {
                    a.model.cz(n._inner[o]);
                }
                h.e8 = 5;
                a.sl();
                a.re(h);
                this.v(e);
            });
            j.effectsCanceled = delegateCombine(j.effectsCanceled, (k, l) => {
                a.rd(h);
                this.u(e);
            });
            if (i == 0) {
                i = 2;
            }
            let k = 0;
            let l = c.h;
            c.h = 0;
            k = a.e6.k(c.m, a, a.model);
            c.h = l;
            let m = a.e6.j(h.gw, a.model);
            let n = m;
            let o = false;
            if (c.n < h.gw) {
                o = true;
            }
            let p = null;
            if (d != 6) {
                p = a.model.h(n, c, (c.k + a.model.cc) - c.f(a.model), c.b == null || c.b.c, o);
            }
            let q = a.model.bt(c);
            for (let r = 0; r < q.count; r++) {
                q._inner[r].e = true;
            }
            let s = c.m;
            let t = null;
            let u = a.model.bw;
            if (u._inner[s].count > 0) {
                for (let v = 0; v < u._inner[s].count; v++) {
                    if (u._inner[s]._inner[v].n == c.o) {
                        t = u._inner[s]._inner[v];
                        break;
                    }
                }
            }
            let w;
            if (t != null) {
                w = t;
                w.e = false;
            }
            else {
                w = a.model.h(s, c, 0, c.b == null || c.b.c, !o);
                w.e = false;
            }
            let x = h.gv;
            let y = GridAnimationManager.as(a.model, c, h, k, x);
            k = y.p3;
            x = y.p4;
            let z = k - x;
            let aa = -1 * z;
            c.h = aa / c.k;
            c.a = 6;
            let ab = new ColumnEffect();
            ab.bx(f);
            ab.al = true;
            ab.bq = 0;
            let ac = c.k;
            let ad = false;
            let ae = 0;
            let af = c.m;
            let ag = a.e6.k(c.m, a, a.model);
            let ah = this.n(a, c, c.m);
            ag = this.q(a, c, ag, a.model.bt(c), ah);
            j.g(ab);
            ab.x = (ai, aj, ak, al, am) => {
                let an = ak;
                let ao = aj;
                let ap = al;
                ap.h = ao + (an - ao) * ai;
                if (ap.k > 0) {
                    let aq = a.e6.l(ap.m, am, true);
                    x = h.gv;
                    let ar = GridAnimationManager.as(a.model, c, h, aq, x);
                    aq = ar.p3;
                    x = ar.p4;
                    if (aq - x != z) {
                        let as = aq - x;
                        let at = z - as;
                        let au = ae + (at / ap.k);
                        let av = au / (1 - ai);
                        ab.by(av, am, ap.o);
                        ap.h = au;
                        ae = au;
                        z = as;
                        ap.h = av + (an - av) * ai;
                    }
                    if (!ad) {
                        let aw = a.model.bs(ap);
                        for (let ax = 0; ax < aw.count; ax++) {
                            let ay = aw._inner[ax];
                            ay.b5 += (ae - ap.h);
                        }
                    }
                    ae = ap.h;
                    af = ap.m;
                    let az = a.model.bt(ap);
                    ah = this.n(a, ap, ap.m);
                    ag = this.q(a, ap, ag, az, ah);
                }
            };
            ab.o = (ai, aj) => {
                ae = c.h;
                return c.h;
            };
            a.c9.u(c, ab);
            let ai = new ColumnCellsEffect();
            ai.ar = true;
            ai.bx(g);
            ai.al = true;
            ai.bq = 0;
            j.g(ai);
            ai.x = (aj, ak, al, am, an) => {
                if (aj > 0) {
                    ad = true;
                }
                if (ad) {
                    let ao = al;
                    let ap = ak;
                    let aq = am;
                    let ar = ap + (ao - ap) * aj;
                    aq.b5 = ar;
                }
            };
            ai.o = (aj, ak) => {
                let al = aj;
                return al.b5;
            };
            if (a.model.bm()) {
                ai.g = new CellPath(0, 0, c.m, a.model.bf.x, a.model.bf.w);
                ai.e = new CellPath(0, 0, c.m, a.model.be.x, a.model.be.w);
            }
            a.c9.t(c, ai);
        }
        static as(a, b, c, d, e) {
            if (a.b3 > a.b0) {
                if (b.d == 1) {
                    e += truncate(a.b0);
                    d += truncate(a.b3);
                }
                else if (b.d == 0 && c.fj == 1) {
                    e += truncate(a.b3);
                    d += truncate(a.b0);
                }
            }
            if (a.b6 < a.absoluteWidth - a.b1) {
                let f = a.absoluteWidth - a.b1 - a.b6;
                if (b.d == 2) {
                    d -= truncate(f);
                }
                else if (b.d == 0 && c.fj == 2) {
                    e -= truncate(f);
                }
            }
            return {
                p3: d,
                p4: e
            };
        }
        q(a, b, c, d, e) {
            if (e > 0) {
                let f = 0;
                for (let g = 0; g < d.count; g++) {
                    if (!d._inner[g].e) {
                        if (e > d._inner[g].i) {
                            f = Math.abs(d._inner[g].i - e);
                            d._inner[g].i = e;
                        }
                    }
                }
                let h = 0;
                for (let i = 0; i < d.count; i++) {
                    if (d._inner[i].e) {
                        h += d._inner[i].i;
                    }
                }
                let j = h - f;
                if (j < 0) {
                    j = 0;
                }
                let k = 1;
                if (h == 0) {
                    k = 0;
                }
                else {
                    k = j / h;
                }
                for (let l = 0; l < d.count; l++) {
                    if (d._inner[l].e) {
                        d._inner[l].i = d._inner[l].i * k;
                    }
                }
            }
            if (b.o == 0) {
                c = a.e6.k(b.m, a, a.model);
            }
            return c;
        }
        n(a, b, c) {
            let d = a.e6.l(c, a.model, true);
            let e = d + b.k;
            let f = a.e6.l(b.m, a.model, false);
            if (d > f) {
                return Math.max(0, (f + b.k) - d);
            }
            else {
                return Math.max(0, (d + b.k) - f);
            }
        }
        aj(a, b, c, d, e) {
            if (c == null) {
                return;
            }
            let f = this.p();
            this.w(f);
            let g;
            let h;
            let i = a.a2.f(c.o);
            if (i == null) {
                return;
            }
            if (i.fe != null && i.fe.q != null) {
                g = i.fe.q;
            }
            else if (b != null && b.q != null) {
                g = b.q;
            }
            else {
                g = this.g.q;
            }
            if (i.fe != null && i.fe.r != null) {
                h = i.fe.r;
            }
            else if (b != null && b.r != null) {
                h = b.r;
            }
            else {
                h = this.g.r;
            }
            let j = a.ba;
            let k = new GridEffectGroup(1);
            k.effectsFinished = delegateCombine(k.effectsFinished, (l, m) => {
                i.e8 = 3;
                c.a = 3;
                if (i.f4) {
                    a.externalGrid.ensureColumnsAreManual();
                    a.externalGrid.removeExternalColumn(i.externalObject);
                }
                a.model.bk = false;
                a.sl();
                a.ra(i);
                this.v(f);
            });
            k.effectsCanceled = delegateCombine(k.effectsCanceled, (l, m) => {
                a.model.bk = false;
                a.q9(i);
                this.u(f);
            });
            if (j == 0) {
                j = i.eu();
            }
            let l = 0;
            switch (j) {
                case 2:
                case 7:
                    l = -1;
                    break;
                case 3:
                case 8:
                    l = 1;
                    break;
                case 4:
                case 9:
                    l = (a.jl + a.model.ci) * -1;
                    break;
                case 5:
                case 10:
                    l = (a.jl + a.model.ci) * 1;
                    break;
            }
            a.model.bk = true;
            let m = new ColumnCellsEffect();
            m.bx(g);
            m.t = 1;
            m.al = true;
            m.bq = l;
            k.g(m);
            m.x = (n, o, p, q, r) => {
                let s = p;
                let t = o;
                let u = q;
                switch (j) {
                    case 2:
                    case 3:
                    case 7:
                    case 8:
                        u.b5 = t + (s - t) * n;
                        break;
                    case 4:
                    case 5:
                    case 9:
                    case 10:
                        u.b9 = t + (s - t) * n;
                        break;
                }
            };
            m.o = (n, o) => {
                let p = n;
                let q = p.b5;
                if (j == 4 || j == 5) {
                    q = p.b9;
                }
                return q;
            };
            if (a.model.bm()) {
                m.g = new CellPath(0, 0, c.m, a.model.bf.x, a.model.bf.w);
                m.e = new CellPath(0, 0, c.m, a.model.be.x, a.model.be.w);
            }
            if (j == 5 || j == 10) {
                m.ao = true;
            }
            a.c9.t(c, m);
            let n = 0;
            switch (j) {
                case 2:
                case 4:
                case 5:
                case 7:
                case 9:
                case 10:
                case 6:
                    n = -1;
                    break;
                case 3:
                case 8:
                    n = 1;
                    break;
            }
            let o = new ColumnEffect();
            o.bx(h);
            o.al = true;
            o.bq = n;
            k.g(o);
            o.x = (p, q, r, s, t) => {
                let u = r;
                let v = q;
                let w = s;
                w.h = v + (u - v) * p;
            };
            o.o = (p, q) => c.h;
            a.c9.u(c, o);
            let p = new ColumnCellsEffect();
            p.t = 2;
            p.bx(g);
            p.al = true;
            if (j == 6 || j == 10 || j == 7 || j == 8 || j == 9) {
                p.bq = 0;
            }
            else {
                p.bq = 1;
            }
            p.x = (q, r, s, t, u) => {
                let v = s;
                let w = r;
                let x = t;
                let y = w + (v - w) * q;
                if (y < 0) {
                    y = 0;
                }
                x.b1 = y;
            };
            p.o = (q, r) => {
                let s = q;
                if (e == 0 || e == 3) {
                    switch (j) {
                        case 10:
                        case 7:
                        case 8:
                        case 9:
                            s.b1 = 1;
                            break;
                        case 6:
                            s.b1 = 1;
                            break;
                    }
                }
                return s.b1;
            };
            if (a.model.bm()) {
                p.g = new CellPath(0, 0, c.m, a.model.bf.x, a.model.bf.w);
                p.e = new CellPath(0, 0, c.m, a.model.be.x, a.model.be.w);
            }
            k.g(p);
            if (j == 5 || j == 10) {
                p.ao = true;
            }
            a.c9.t(c, p);
        }
        r(a, b, c, d, e, f, g, h, i, j) {
            if (!a.model.bm()) {
                return;
            }
            let k = this.p();
            this.w(k);
            let l = this.g.u;
            if (a.cz != null && a.cz.u != null) {
                l = a.cz.u;
            }
            let m = a.columnPropertyUpdatingAnimationMode;
            let n = new ColumnCellsEffect();
            n.bx(l);
            n.t = 7;
            n.as = true;
            if (g) {
                n.v = 5;
            }
            if (j) {
                n.v = 6;
            }
            n.bs = c;
            n.al = true;
            n.bq = f;
            n.onFinished = delegateCombine(n.onFinished, (o) => this.v(k));
            n.onCanceled = delegateCombine(n.onCanceled, (o, p) => this.u(k));
            if (m == 0) {
                m = 2;
            }
            if (d == 11) {
                n.x = (o, p, q, r, s) => {
                    let t = r;
                    if (g != t.k.g) {
                        return;
                    }
                    if ((h && !t.k.as) || (!h && t.k.as)) {
                        return;
                    }
                    if ((j && !t.k.h) || (!j && t.k.h)) {
                        return;
                    }
                    t.ju(c, q);
                };
            }
            if (d == 5 || d == 4 || d == 9 || d == 8 || (m != 3 && (d == 7 || d == 1 || d == 3))) {
                n.x = (o, p, q, r, s) => {
                    let t = r;
                    if (g != t.k.g) {
                        return;
                    }
                    if ((h && !t.k.as) || (!h && t.k.as)) {
                        return;
                    }
                    if ((j && !t.k.h) || (!j && t.k.h)) {
                        return;
                    }
                    if (o > 0.5) {
                        t.ju(c, q);
                    }
                    else {
                        t.ju(c, p);
                    }
                };
            }
            if (m == 3 && d == 1) {
                n.x = (o, p, q, r, s) => {
                    let t = r;
                    if (g != t.k.g) {
                        return;
                    }
                    if ((h && !t.k.as) || (!h && t.k.as)) {
                        return;
                    }
                    if ((j && !t.k.h) || (!j && t.k.h)) {
                        return;
                    }
                    let u = p;
                    let v = q;
                    let w = u + (v - u) * o;
                    t.ju(c, w);
                };
            }
            if (d == 0) {
                n.x = (o, p, q, r, s) => {
                    let t = r;
                    if (g != t.k.g) {
                        return;
                    }
                    if ((h && !t.k.as) || (!h && t.k.as)) {
                        return;
                    }
                    if ((j && !t.k.h) || (!j && t.k.h)) {
                        return;
                    }
                    let u = p;
                    let v = q;
                    let w = u + (v - u) * o;
                    t.ju(c, w);
                };
            }
            if (d == 2) {
                n.x = (o, p, q, r, s) => {
                    let t = r;
                    if (g != t.k.g) {
                        return;
                    }
                    if ((h && !t.k.as) || (!h && t.k.as)) {
                        return;
                    }
                    if ((j && !t.k.h) || (!j && t.k.h)) {
                        return;
                    }
                    let u = p;
                    let v = q;
                    let w = BrushUtil.k(u, o, v, 0);
                    t.ju(c, w);
                };
            }
            if (d == 3) {
                n.x = (o, p, q, r, s) => {
                    let t = r;
                    if (g != t.k.g) {
                        return;
                    }
                    if ((h && !t.k.as) || (!h && t.k.as)) {
                        return;
                    }
                    if ((j && !t.k.h) || (!j && t.k.h)) {
                        return;
                    }
                    let u = p;
                    let v = q;
                    if (u != null) {
                        u.t(a.externalGrid.renderer);
                    }
                    if (v != null) {
                        v.t(a.externalGrid.renderer);
                    }
                    let w = new FontInfo();
                    FontUtil.interpolateFont(w, o, u, v);
                    t.ju(c, w);
                };
            }
            if (d == 6) {
                n.x = (o, p, q, r, s) => {
                    let t = r;
                    if (g != t.k.g) {
                        return;
                    }
                    if ((h && !t.k.as) || (!h && t.k.as)) {
                        return;
                    }
                    if ((j && !t.k.h) || (!j && t.k.h)) {
                        return;
                    }
                    let u = typeGetValue(p);
                    let v = typeGetValue(q);
                    let w = truncate((Math.round(u + (v - u) * o)));
                    t.ju(c, w);
                };
            }
            n.o = (o, p) => {
                let q = o;
                return q.gn(c);
            };
            if (a.model.bm()) {
                if (h) {
                    n.g = new CellPath(0, 0, -300, a.model.bf.x, a.model.bf.w);
                    n.e = new CellPath(0, 0, -300, a.model.be.x, a.model.be.w);
                }
                else if (i) {
                    n.g = new CellPath(0, 0, -400, a.model.bf.x, a.model.bf.w);
                    n.e = new CellPath(0, 0, -400, a.model.be.x, a.model.be.w);
                }
                else {
                    n.g = new CellPath(0, 0, b.m, a.model.bf.x, a.model.bf.w);
                    n.e = new CellPath(0, 0, b.m, a.model.be.x, a.model.be.w);
                }
            }
            if (!a.ho || d == 11) {
                n.ba = 0;
            }
            if (h) {
                a.c9.x(n);
            }
            else if (i) {
                a.c9.y(n);
            }
            else {
                a.c9.t(b, n);
            }
        }
        al(a, b, c) {
            let d = this.p();
            this.w(d);
            let e = this.e;
            let f = a.model;
            let g = new GridEffectGroup(1);
            g.effectsCanceled = delegateCombine(g.effectsCanceled, (h, i) => this.u(d));
            g.effectsFinished = delegateCombine(g.effectsFinished, (h, i) => this.v(d));
            for (let h = b; h <= c; h++) {
                let i = new RowCellsEffect();
                g.g(i);
                i.t = 6;
                i.bx(e);
                i.al = true;
                i.bq = 1;
                i.x = (j, k, l, m, n) => {
                };
                i.o = (j, k) => {
                    let l = j;
                    if (l.k.ag) {
                        let m = a.d9.getDataRow(l.k);
                        l.ej = m;
                        if (m == -1) {
                            return l.ip;
                        }
                        let n = a.d9.getRowType(m);
                        if (l.a8(n)) {
                            let o = a.d9.resolveValueForPath(a, l.k);
                            let p = a.nc(l.k, a, o, m);
                            a.rw(l, o, a.d9.resolveRow(m), p);
                        }
                    }
                    return l.ip;
                };
                let j = a.eq(h);
                if (a.model.bm()) {
                    i.g = new CellPath(0, 0, a.model.cn, j.x, j.w);
                    i.e = new CellPath(0, 0, a.model.cq, j.x, j.w);
                }
                if (!a.h5) {
                    i.ba = 0;
                }
                a.c9.v(j, i);
            }
        }
        ah(a, b) {
            if (b == null) {
                return;
            }
            let c = this.p();
            this.w(c);
            let d = this.d;
            let e = a.model;
            let f = new GridEffectGroup(1);
            f.effectsFinished = delegateCombine(f.effectsFinished, (g, h) => this.v(c));
            f.effectsCanceled = delegateCombine(f.effectsCanceled, (g, h) => this.u(c));
            let g = a.a2.f(b.o);
            if (g == null) {
                return;
            }
            let h = new ColumnEffect();
            f.g(h);
            h.bx(d);
            h.al = true;
            h.bq = 1;
            h.x = (i, j, k, l, m) => {
            };
            h.o = (i, j) => {
                let k = i;
                k.g = 0;
                k.h = 0;
                k.j = 0;
                a.sl();
                return k.g;
            };
            a.c9.u(b, h);
            let i = new ColumnCellsEffect();
            f.g(i);
            i.t = 1;
            i.bx(d);
            i.al = true;
            i.bq = 1;
            i.x = (j, k, l, m, n) => {
            };
            i.o = (j, k) => {
                let l = j;
                l.b4 = 0;
                l.b5 = 0;
                l.b9 = 0;
                l.ca = 0;
                l.b1 = 1;
                return l.b4;
            };
            a.c9.t(b, i);
        }
        y(a, b, c, d) {
            let e = this.p();
            this.w(e);
            let f = this.f.f;
            if (a.cm != null && a.cm.f != null) {
                f = a.cm.f;
            }
            let g = a.al;
            let h = a.model;
            let i = new GridEffectGroup(1);
            i.effectsFinished = delegateCombine(i.effectsFinished, (j, k) => this.v(e));
            i.effectsCanceled = delegateCombine(i.effectsCanceled, (j, k) => this.u(e));
            for (let j = 0; j < h.br.count; j++) {
                let k = h.br._inner[j];
                let l = a.a2.f(k.o);
                if (l == null) {
                    continue;
                }
                let m = new ColumnCellsEffect();
                i.g(m);
                m.t = 3;
                m.bx(f);
                m.al = true;
                m.bq = 0;
                if (g == 0) {
                    g = 2;
                }
                m.x = (n, o, p, q, r) => {
                    let s = q;
                    let t = o;
                    let u = p;
                    if (s.k.ag) {
                        let v = a.a0(s.k);
                        if (a.d9.isPlaceholderValue(s.k)) {
                            n = 0;
                        }
                    }
                    s.cb = t + (u - t) * n;
                };
                m.o = (n, o) => {
                    let p = n;
                    if (p.k.ag) {
                        let q = a.d9.getDataRow(p.k);
                        p.ej = q;
                        if (q == -1) {
                            return p.cb;
                        }
                        let r = a.d9.resolveValueForPath(a, p.k);
                        let s = false;
                        if (r == null && a.d9.isPlaceholderValue(p.k)) {
                            s = true;
                        }
                        if (p.a8(a.d9.getRowType(p.k.w))) {
                            let t = a.nc(p.k, a, r, q);
                            a.rw(p, r, a.d9.resolveRow(q), t);
                        }
                        if (s) {
                            p.cb = 1;
                        }
                    }
                    return p.cb;
                };
                if (a.model.bm()) {
                    m.g = new CellPath(0, 0, k.m, a.model.bf.x, a.model.bf.w);
                    m.e = new CellPath(0, 0, k.m, a.model.be.x, a.model.be.w);
                }
                if (!a.hf || d) {
                    m.ba = 0;
                }
                a.c9.t(k, m);
            }
        }
        af(a, b, c, d, e) {
            let f = this.p();
            this.w(f);
            let g = this.f.f;
            if (a.cm != null && a.cm.f != null) {
                g = a.cm.f;
            }
            let h = a.al;
            let i = a.model;
            if (d < 0 || d >= i.br.count) {
                return;
            }
            let j = i.br._inner[d];
            let k = a.a2.f(j.o);
            if (k == null) {
                return;
            }
            let l = new ColumnCellsEffect();
            l.onFinished = delegateCombine(l.onFinished, (m) => this.v(f));
            l.onCanceled = delegateCombine(l.onCanceled, (m, n) => this.u(f));
            l.t = 3;
            l.bx(g);
            l.al = true;
            l.bq = 0;
            if (h == 0) {
                h = 2;
            }
            l.x = (m, n, o, p, q) => {
                let r = p;
                let s = n;
                let t = o;
                if (r.k.ag) {
                    let u = a.a0(r.k);
                    if (a.d9.isPlaceholderValue(r.k)) {
                        m = 0;
                    }
                }
                r.cb = s + (t - s) * m;
            };
            l.o = (m, n) => {
                let o = m;
                if (o.k.ag) {
                    let p = a.d9.getDataRow(o.k);
                    o.ej = p;
                    if (p == -1) {
                        return o.cb;
                    }
                    let q = a.d9.resolveValueForPath(a, o.k);
                    let r = false;
                    if (q == null && a.d9.isPlaceholderValue(o.k)) {
                        r = true;
                    }
                    if (o.a8(a.d9.getRowType(o.k.w))) {
                        let s = a.nc(o.k, a, q, p);
                        a.rw(o, q, a.d9.resolveRow(p), s);
                    }
                    if (r) {
                        o.cb = 1;
                    }
                }
                return o.cb;
            };
            if (a.model.bm()) {
                l.g = new CellPath(0, 0, j.m, a.model.bf.x, a.model.bf.w);
                l.e = new CellPath(0, 0, j.m, a.model.be.x, a.model.be.w);
            }
            if (!a.hf || e) {
                l.ba = 0;
            }
            a.c9.t(j, l);
        }
        an(a, b) {
            let c = this.p();
            this.w(c);
            let d = this.f.h;
            if (a.cz != null && a.cm.h != null) {
                d = a.cm.h;
            }
            let e = a.es;
            let f = a.model;
            let g = new RowCellsEffect();
            g.onFinished = delegateCombine(g.onFinished, (h) => this.v(c));
            g.onCanceled = delegateCombine(g.onCanceled, (h, i) => this.u(c));
            g.t = 5;
            g.bx(d);
            g.al = true;
            g.bq = 1;
            if (e == 0) {
                e = 2;
            }
            g.x = (h, i, j, k, l) => {
                let m = k;
                let n = i;
                let o = j;
                if (m.k.ag) {
                    m.b8 = n + (o - n) * h;
                }
                else {
                    m.b8 = 0;
                }
            };
            g.o = (h, i) => {
                let j = h;
                return j.b8;
            };
            let h = a.eq(b);
            if (a.model.bm()) {
                g.g = new CellPath(0, 0, a.model.cn, h.x, h.w);
                g.g.d = a.model.br._inner[a.model.cn].d;
                g.e = new CellPath(0, 0, a.model.cq, h.x, h.w);
                g.e.d = a.model.br._inner[a.model.cq].d;
            }
            if (!a.h5 || a.dragger.isDragActive) {
                g.ba = 0;
            }
            a.c9.v(h, g);
        }
        ap(a, b) {
            let c = this.p();
            this.w(c);
            let d = this.f.h;
            if (a.cz != null && a.cm.h != null) {
                d = a.cm.h;
            }
            let e = a.es;
            let f = a.model;
            let g = new RowCellsEffect();
            g.onFinished = delegateCombine(g.onFinished, (h) => this.v(c));
            g.onCanceled = delegateCombine(g.onCanceled, (h, i) => this.u(c));
            g.t = 5;
            g.bx(d);
            g.al = true;
            g.bq = 0;
            if (e == 0) {
                e = 2;
            }
            g.x = (h, i, j, k, l) => {
                let m = k;
                let n = i;
                let o = j;
                if (m.k.ag) {
                    m.b8 = n + (o - n) * h;
                }
                else {
                    m.b8 = 0;
                }
            };
            g.o = (h, i) => {
                let j = h;
                return j.b8;
            };
            let h = a.eq(b);
            if (a.model.bm()) {
                g.g = new CellPath(0, 0, a.model.cn, h.x, h.w);
                g.g.d = a.model.br._inner[a.model.cn].d;
                g.e = new CellPath(0, 0, a.model.cq, h.x, h.w);
                g.e.d = a.model.br._inner[a.model.cq].d;
            }
            if (!a.h5 || a.dragger.isDragActive) {
                g.ba = 0;
            }
            a.c9.v(h, g);
        }
        ad(a, b, c, d) {
            let e = this.p();
            this.w(e);
            let f = this.f.h;
            if (a.cm != null && a.cm.h != null) {
                f = a.cm.h;
            }
            let g = a.model;
            let h = new CellEffect();
            h.onFinished = delegateCombine(h.onFinished, (i) => this.v(e));
            h.onCanceled = delegateCombine(h.onCanceled, (i, j) => this.u(e));
            h.t = 5;
            h.bx(f);
            h.al = true;
            h.bq = 1;
            h.x = (i, j, k, l, m) => {
                let n = l;
                let o = j;
                let p = k;
                if (n.k.ag) {
                    n.b8 = o + (p - o) * i;
                }
                else {
                    n.b8 = 0;
                }
            };
            h.o = (i, j) => {
                let k = i;
                return k.b8;
            };
            let i = new CellPath(1, c, 0, b);
            if (a.model.bm()) {
                h.g = new CellPath(0, 0, a.model.cn, i.x, i.w);
                h.e = new CellPath(0, 0, a.model.cq, i.x, i.w);
            }
            if (!a.hg || a.dragger.isDragActive) {
                h.ba = 0;
            }
            a.c9.r(i, h, d);
        }
        z(a, b, c, d) {
            let e = this.p();
            this.w(e);
            let f = this.f.e;
            if (a.cm != null && a.cm.e != null) {
                f = a.cm.e;
            }
            let g = a.model;
            let h = new CellEffect();
            h.onFinished = delegateCombine(h.onFinished, (i) => this.v(e));
            h.onCanceled = delegateCombine(h.onCanceled, (i, j) => this.u(e));
            h.t = 8;
            h.bx(f);
            h.al = true;
            h.bq = 1;
            h.x = (i, j, k, l, m) => {
                let n = l;
                let o = j;
                let p = k;
                if (n.k.ag) {
                    n.by = o + (p - o) * i;
                }
                else {
                    n.by = 0;
                }
            };
            h.o = (i, j) => {
                let k = i;
                return k.by;
            };
            let i = new CellPath(1, c, 0, b);
            if (a.model.bm()) {
                h.g = new CellPath(0, 0, c, i.x, i.w);
                h.e = new CellPath(0, 0, c, i.x, i.w);
            }
            a.c9.r(i, h, d);
        }
        ae(a, b, c, d) {
            let e = this.p();
            this.w(e);
            let f = this.f.h;
            if (a.cm != null && a.cm.h != null) {
                f = a.cm.h;
            }
            let g = a.model;
            let h = new CellEffect();
            h.onFinished = delegateCombine(h.onFinished, (i) => this.v(e));
            h.onCanceled = delegateCombine(h.onCanceled, (i, j) => this.u(e));
            h.t = 5;
            h.bx(f);
            h.al = true;
            h.bq = 0;
            h.x = (i, j, k, l, m) => {
                let n = l;
                let o = j;
                let p = k;
                if (n.k.ag) {
                    n.b8 = o + (p - o) * i;
                }
                else {
                    n.b8 = 0;
                }
            };
            h.o = (i, j) => {
                let k = i;
                return k.b8;
            };
            let i = new CellPath(1, c, 0, b);
            if (a.model.bm()) {
                h.g = new CellPath(0, 0, a.model.cn, i.x, i.w);
                h.e = new CellPath(0, 0, a.model.cq, i.x, i.w);
            }
            if (!a.hg || a.dragger.isDragActive) {
                h.ba = 0;
            }
            a.c9.r(i, h, d);
        }
        aa(a, b, c, d) {
            let e = this.p();
            this.w(e);
            let f = this.f.e;
            if (a.cm != null && a.cm.e != null) {
                f = a.cm.e;
            }
            let g = a.model;
            let h = new CellEffect();
            h.onFinished = delegateCombine(h.onFinished, (i) => this.v(e));
            h.onCanceled = delegateCombine(h.onCanceled, (i, j) => this.u(e));
            h.t = 8;
            h.bx(f);
            h.al = true;
            h.bq = 0;
            h.x = (i, j, k, l, m) => {
                let n = l;
                let o = j;
                let p = k;
                if (n.k.ag) {
                    n.by = o + (p - o) * i;
                }
                else {
                    n.by = 0;
                }
            };
            h.o = (i, j) => {
                let k = i;
                return k.by;
            };
            let i = new CellPath(1, c, 0, b);
            if (a.model.bm()) {
                h.g = new CellPath(0, 0, c, i.x, i.w);
                h.e = new CellPath(0, 0, c, i.x, i.w);
            }
            a.c9.r(i, h, d);
        }
        ab(a, b, c) {
            let d = this.p();
            this.w(d);
            let e = this.f.h;
            if (a.cm != null && a.cm.h != null) {
                e = a.cm.h;
            }
            let f = a.model;
            let g = new CellPositionEffect();
            g.onFinished = delegateCombine(g.onFinished, (h) => this.v(d));
            g.onCanceled = delegateCombine(g.onCanceled, (h, i) => this.u(d));
            g.t = 5;
            g.bx(e);
            g.al = true;
            g.bq = 1;
            g.x = (h, i, j, k, l) => {
                let m = k;
                let n = i;
                let o = j;
                if (m.k.ag) {
                    m.b8 = n + (o - n) * h;
                }
                else {
                    m.b8 = 0;
                }
            };
            g.o = (h, i) => {
                let j = h;
                return j.b8;
            };
            let h = new CellPath(1, c, 0, b);
            if (a.model.bm()) {
                g.g = new CellPath(0, 0, a.model.cn, h.x, h.w);
                g.e = new CellPath(0, 0, a.model.cq, h.x, h.w);
            }
            if (!a.hg || a.dragger.isDragActive) {
                g.ba = 0;
            }
            a.c9.s(h, g);
        }
        ac(a, b, c) {
            let d = this.p();
            this.w(d);
            let e = this.f.h;
            if (a.cm != null && a.cm.h != null) {
                e = a.cm.h;
            }
            let f = a.model;
            let g = new CellPositionEffect();
            g.onFinished = delegateCombine(g.onFinished, (h) => this.v(d));
            g.onCanceled = delegateCombine(g.onCanceled, (h, i) => this.u(d));
            g.t = 5;
            g.bx(e);
            g.al = true;
            g.bq = 0;
            g.x = (h, i, j, k, l) => {
                let m = k;
                let n = i;
                let o = j;
                if (m.k.ag) {
                    m.b8 = n + (o - n) * h;
                }
                else {
                    m.b8 = 0;
                }
            };
            g.o = (h, i) => {
                let j = h;
                return j.b8;
            };
            let h = new CellPath(1, c, 0, b);
            if (a.model.bm()) {
                g.g = new CellPath(0, 0, a.model.cn, h.x, h.w);
                g.e = new CellPath(0, 0, a.model.cq, h.x, h.w);
            }
            if (!a.hg || a.dragger.isDragActive) {
                g.ba = 0;
            }
            a.c9.s(h, g);
        }
        am(a, b) {
            let c = this.p();
            this.w(c);
            let d = this.f.g;
            if (a.cz != null && a.cm.g != null) {
                d = a.cm.g;
            }
            let e = new RowCellsEffect();
            e.onFinished = delegateCombine(e.onFinished, (f) => this.v(c));
            e.onCanceled = delegateCombine(e.onCanceled, (f, g) => this.u(c));
            e.t = 5;
            e.bx(d);
            e.al = true;
            e.bq = 1;
            e.x = (f, g, h, i, j) => {
                let k = i;
                let l = g;
                let m = h;
                if (k.k.ag) {
                    k.b3 = l + (m - l) * f;
                }
                else {
                    k.b3 = 0;
                }
            };
            e.o = (f, g) => {
                let h = f;
                return h.b3;
            };
            let f = a.eq(b);
            if (a.model.bm()) {
                e.g = new CellPath(0, 0, a.model.cn, f.x, f.w);
                e.g.d = a.model.br._inner[a.model.cn].d;
                e.e = new CellPath(0, 0, a.model.cq, f.x, f.w);
                e.e.d = a.model.br._inner[a.model.cq].d;
            }
            if (!a.h3) {
                e.ba = 0;
            }
            a.c9.v(f, e);
        }
        ao(a, b) {
            let c = this.p();
            this.w(c);
            let d = this.f.g;
            if (a.cz != null && a.cm.g != null) {
                d = a.cm.g;
            }
            let e = new RowCellsEffect();
            e.onFinished = delegateCombine(e.onFinished, (f) => this.v(c));
            e.onCanceled = delegateCombine(e.onCanceled, (f, g) => this.u(c));
            e.t = 5;
            e.bx(d);
            e.al = true;
            e.bq = 0;
            e.x = (f, g, h, i, j) => {
                let k = i;
                let l = g;
                let m = h;
                if (k.k.ag) {
                    k.b3 = l + (m - l) * f;
                }
                else {
                    k.b3 = 0;
                }
            };
            e.o = (f, g) => {
                let h = f;
                return h.b3;
            };
            let f = a.eq(b);
            if (a.model.bm()) {
                e.g = new CellPath(0, 0, a.model.cn, f.x, f.w);
                e.g.d = a.model.br._inner[a.model.cn].d;
                e.e = new CellPath(0, 0, a.model.cq, f.x, f.w);
                e.e.d = a.model.br._inner[a.model.cq].d;
            }
            if (!a.h3) {
                e.ba = 0;
            }
            a.c9.v(f, e);
        }
    }
    GridAnimationManager.$t = /*@__PURE__*/ markType(GridAnimationManager, 'GridAnimationManager');
    GridAnimationManager.o = 0;
    return GridAnimationManager;
})();
/**
 * @hidden
 */
export let CellKey = /*@__PURE__*/ (() => {
    class CellKey extends Base {
        constructor() {
            super(...arguments);
            this.e = null;
            this.g = null;
            this.i = null;
            this.a = null;
            this.c = null;
        }
        get primaryKey() {
            if (this.e == null && this.g != null && this.d != null) {
                this.e = this.d.d9.getItemKey(this.d.i(), this.g);
            }
            return this.e;
        }
        set primaryKey(a) {
            this.e = a;
        }
        get h() {
            if (this.g == null && this.e != null && this.d != null) {
                this.g = this.d.d9.getItemForKey(this.primaryKey);
            }
            return this.g;
        }
        set h(a) {
            this.g = a;
        }
        get j() {
            return this.i;
        }
        set j(a) {
            this.i = a;
        }
        get b() {
            if ((this.a == null || this.a.grid != this.d) && this.d != null) {
                this.a = this.d.a2.g(this.j);
            }
            return this.a;
        }
        get d() {
            return this.c;
        }
        set d(a) {
            this.c = a;
        }
    }
    CellKey.$t = /*@__PURE__*/ markType(CellKey, 'CellKey');
    return CellKey;
})();
/**
 * @hidden
 */
export let GridSelectedCellsCollection = /*@__PURE__*/ (() => {
    class GridSelectedCellsCollection extends ObservableCollection$1 {
        constructor() {
            super(CellKey.$, 0);
        }
        an(a) {
            this.collectionChanged = delegateCombine(this.collectionChanged, a);
        }
        ao(a) {
            this.collectionChanged = delegateRemove(this.collectionChanged, a);
        }
        get am() {
            return this;
        }
        ai(a, b) {
            for (let c = 0; c < this.count; c++) {
                if (this._inner[c].primaryKey != null && this._inner[c].primaryKey.equals(a) && this._inner[c].b != null && this._inner[c].b.g2 == b) {
                    return this._inner[c];
                }
            }
            return null;
        }
        aj(a, b) {
            for (let c = 0; c < this.count; c++) {
                if (this._inner[c].primaryKey.equals(a) && this._inner[c].j == b) {
                    return this._inner[c];
                }
            }
            return null;
        }
        ak(a, b) {
            for (let c = 0; c < this.count; c++) {
                if (this._inner[c].h == a && this._inner[c].j == b) {
                    return this._inner[c];
                }
            }
            return null;
        }
        ae(a, b) {
            return this.af(a, b.h0());
        }
        af(a, b) {
            if (this.aj(a, b) != null) {
                return null;
            }
            let c = new CellKey();
            c.primaryKey = a;
            c.j = b;
            this.add(c);
            return c;
        }
        ag(a, b) {
            return this.ah(a, b.h0());
        }
        ah(a, b) {
            if (this.ak(a, b) != null) {
                return null;
            }
            let c = new CellKey();
            c.h = a;
            c.j = b;
            this.add(c);
            return c;
        }
        al(a, b) {
            let c = this.ai(a, b);
            if (c != null) {
                this.remove(c);
            }
            return c;
        }
    }
    GridSelectedCellsCollection.$t = /*@__PURE__*/ markType(GridSelectedCellsCollection, 'GridSelectedCellsCollection', /*@__PURE__*/ ObservableCollection$1.$.specialize(CellKey.$));
    return GridSelectedCellsCollection;
})();
/**
 * @hidden
 */
export let DefinitionBase = /*@__PURE__*/ (() => {
    class DefinitionBase extends Base {
        constructor() {
            super();
            this.bl = null;
            this.t = null;
            this.dr = null;
            this.ds = null;
            this.dh = null;
            this.dt = null;
            this.dk = null;
            this.a2 = truncate(DeviceUtils.g(0));
            this.a4 = truncate(DeviceUtils.g(0));
            this.a3 = truncate(DeviceUtils.g(0));
            this.a1 = truncate(DeviceUtils.g(0));
            this.ay = truncate(DeviceUtils.g(1));
            this.a0 = truncate(DeviceUtils.g(1));
            this.az = truncate(DeviceUtils.g(1));
            this.ax = truncate(DeviceUtils.g(1));
            this.a6 = truncate(DeviceUtils.g(2));
            this.a8 = truncate(DeviceUtils.g(2));
            this.a7 = truncate(DeviceUtils.g(2));
            this.a5 = truncate(DeviceUtils.g(2));
            this.r = null;
            this.dj = null;
            this.di = null;
            this.dl = null;
            this.dw = null;
            this.dp = null;
            this.dv = null;
            this.dn = null;
            this.du = null;
            this.dm = null;
            this.ar = 1;
            this.b = 4;
            this.g = 4;
            this.a = 0;
            this.f = 1;
            this.w = 0;
            this.v = 0;
            this.dx = null;
            this.dq = null;
            this.as = NaN;
            this.aq = 0;
            this.ac = null;
            this.ab = null;
            this.dataBinding = null;
            this.dataBound = null;
            this.propertyChanged = null;
            this.ag = false;
            this.am = new HashSet$1(String_$type, 0);
            this.ao = new List$1(String_$type, 0);
            this.al = new Dictionary$2(String_$type, CellPropertyAnimationType_$type, 0);
            this.definitionPropertyUpdated = null;
            this.z = null;
            this.cellStyleKeyRequested = null;
            this.d0 = this.eb();
            this.d5 = this.ef();
            this.d4 = this.ed();
            this.d3 = this.ec();
            this.at = this.av();
            this.d6 = this.eg();
            this.ad = this.af();
            this.d2 = GridStyleRepository.bg;
        }
        get externalObject() {
            return this.bl;
        }
        set externalObject(a) {
            let b = this.bl;
            this.bl = a;
            this.t = typeCast(IExternalDefinitionBase_$type, this.bl);
            if (this.bl != b) {
                this.c2("ExternalObject", 10, b, this.bl);
            }
        }
        get d7() {
            return this.dr;
        }
        set d7(a) {
            let b = this.dr;
            this.dr = a;
            if (this.dr != b) {
                this.c2("Background", 10, b, this.dr);
            }
        }
        get d8() {
            return this.ds;
        }
        set d8(a) {
            let b = this.ds;
            this.ds = a;
            if (this.ds != b) {
                this.c2("Border", 10, b, this.ds);
            }
        }
        get dy() {
            return this.dh;
        }
        set dy(a) {
            let b = this.dh;
            this.dh = a;
            if (this.dh != b) {
                this.c2("ActivationBorder", 10, b, this.dh);
            }
        }
        get d9() {
            return this.dt;
        }
        set d9(a) {
            let b = this.dt;
            this.dt = a;
            if (this.dt != b) {
                this.c2("ErrorBorder", 10, b, this.dt);
            }
        }
        get d1() {
            return this.dk;
        }
        set d1(a) {
            let b = this.dk;
            this.dk = a;
            if (this.dk != b) {
                this.c2("ActualBorder", 2, b, this.dk);
            }
        }
        get be() {
            return this.a2;
        }
        set be(a) {
            let b = this.a2;
            this.a2 = a;
            if (this.a2 != b) {
                this.c2("BorderLeftWidth", 6, b, this.a2);
            }
        }
        get bg() {
            return this.a4;
        }
        set bg(a) {
            let b = this.a4;
            this.a4 = a;
            if (this.a4 != b) {
                this.c2("BorderTopWidth", 6, b, this.a4);
            }
        }
        get bf() {
            return this.a3;
        }
        set bf(a) {
            let b = this.a3;
            this.a3 = a;
            if (this.a3 != b) {
                this.c2("BorderRightWidth", 6, b, this.a3);
            }
        }
        get bd() {
            return this.a1;
        }
        set bd(a) {
            let b = this.a1;
            this.a1 = a;
            if (this.a1 != b) {
                this.c2("BorderBottomWidth", 6, b, this.a1);
            }
        }
        get ba() {
            return this.ay;
        }
        set ba(a) {
            let b = this.ay;
            this.ay = a;
            if (this.ay != b) {
                this.c2("ActivationBorderLeftWidth", 6, b, this.ay);
            }
        }
        get bc() {
            return this.a0;
        }
        set bc(a) {
            let b = this.a0;
            this.a0 = a;
            if (this.a0 != b) {
                this.c2("ActivationBorderTopWidth", 6, b, this.a0);
            }
        }
        get bb() {
            return this.az;
        }
        set bb(a) {
            let b = this.az;
            this.az = a;
            if (this.az != b) {
                this.c2("ActivationBorderRightWidth", 6, b, this.az);
            }
        }
        get a9() {
            return this.ax;
        }
        set a9(a) {
            let b = this.ax;
            this.ax = a;
            if (this.ax != b) {
                this.c2("ActivationBorderBottomWidth", 6, b, this.ax);
            }
        }
        get bi() {
            return this.a6;
        }
        set bi(a) {
            let b = this.a6;
            this.a6 = a;
            if (this.a6 != b) {
                this.c2("ErrorBorderLeftWidth", 6, b, this.a6);
            }
        }
        get bk() {
            return this.a8;
        }
        set bk(a) {
            let b = this.a8;
            this.a8 = a;
            if (this.a8 != b) {
                this.c2("ErrorBorderTopWidth", 6, b, this.a8);
            }
        }
        get bj() {
            return this.a7;
        }
        set bj(a) {
            let b = this.a7;
            this.a7 = a;
            if (this.a7 != b) {
                this.c2("ErrorBorderRightWidth", 6, b, this.a7);
            }
        }
        get bh() {
            return this.a5;
        }
        set bh(a) {
            let b = this.a5;
            this.a5 = a;
            if (this.a5 != b) {
                this.c2("ErrorBorderBottomWidth", 6, b, this.a5);
            }
        }
        get grid() {
            return this.r;
        }
        set grid(a) {
            let b = this.r;
            this.r = a;
            this.c0(b, a);
        }
        c0(a, b) {
            if (a != null) {
                a.propertyChanged = delegateRemove(a.propertyChanged, runOn(this, this.c1));
            }
            if (b != null) {
                b.propertyChanged = delegateCombine(b.propertyChanged, runOn(this, this.c1));
            }
            this.c7();
            this.cz(a, b);
        }
        cz(a, b) {
        }
        c1(a, b) {
            switch (b.propertyName) {
                case "IsActiveCellStyleEnabled":
                    this.c7();
                    break;
            }
        }
        get d0() {
            return this.dj;
        }
        set d0(a) {
            let b = this.dj;
            this.dj = a;
            if (this.dj != b) {
                this.c2("ActualBackground", 2, b, this.dj);
            }
        }
        get dz() {
            return this.di;
        }
        set dz(a) {
            let b = this.di;
            this.di = a;
            if (this.di != b) {
                this.c2("ActualActivationBorder", 2, b, this.di);
            }
        }
        get d2() {
            return this.dl;
        }
        set d2(a) {
            let b = this.dl;
            this.dl = a;
            if (this.dl != b) {
                this.c2("ActualErrorBorder", 2, b, this.dl);
            }
        }
        get ej() {
            return this.dw;
        }
        set ej(a) {
            let b = this.dw;
            this.dw = a;
            if (this.dw != b) {
                this.c2("PinnedBackground", 10, b, this.dw);
            }
        }
        get d5() {
            return this.dp;
        }
        set d5(a) {
            let b = this.dp;
            this.dp = a;
            if (this.dp != b) {
                this.c2("ActualStickyRowBackground", 2, b, this.dp);
            }
        }
        get ei() {
            return this.dv;
        }
        set ei(a) {
            let b = this.dv;
            this.dv = a;
            if (this.dv != b) {
                this.c2("PinnedRowBackground", 10, b, this.dv);
            }
        }
        get d4() {
            return this.dn;
        }
        set d4(a) {
            let b = this.dn;
            this.dn = a;
            if (this.dn != b) {
                this.c2("ActualPinnedRowBackground", 2, b, this.dn);
            }
        }
        get eh() {
            return this.du;
        }
        set eh(a) {
            let b = this.du;
            this.du = a;
            if (this.du != b) {
                this.c2("LastStickyRowBackground", 10, b, this.du);
            }
        }
        get d3() {
            return this.dm;
        }
        set d3(a) {
            let b = this.dm;
            this.dm = a;
            if (this.dm != b) {
                this.c2("ActualLastStickyRowBackground", 2, b, this.dm);
            }
        }
        get au() {
            return this.ar;
        }
        set au(a) {
            let b = this.ar;
            this.ar = a;
            if (this.ar != b) {
                this.c2("ContentOpacity", 0, b, this.ar);
            }
        }
        get e() {
            return this.b;
        }
        set e(a) {
            let b = this.b;
            this.b = a;
            if (this.b != b) {
                this.c2("HorizontalAlignment", 10, enumGetBox(CellContentHorizontalAlignment_$type, b), enumGetBox(CellContentHorizontalAlignment_$type, this.b));
            }
        }
        get j() {
            return this.g;
        }
        set j(a) {
            let b = this.g;
            this.g = a;
            if (this.g != b) {
                this.c2("VerticalAlignment", 10, enumGetBox(CellContentVerticalAlignment_$type, b), enumGetBox(CellContentVerticalAlignment_$type, this.g));
            }
        }
        get c() {
            return this.a;
        }
        set c(a) {
            let b = this.a;
            this.a = a;
            if (this.a != b) {
                this.c2("ActualHorizontalAlignment", 4, enumGetBox(CellContentHorizontalAlignment_$type, b), enumGetBox(CellContentHorizontalAlignment_$type, this.a));
            }
        }
        get h() {
            return this.f;
        }
        set h(a) {
            let b = this.f;
            this.f = a;
            if (this.f != b) {
                this.c2("VerticalAlignment", 4, enumGetBox(CellContentVerticalAlignment_$type, b), enumGetBox(CellContentVerticalAlignment_$type, this.f));
            }
        }
        get y() {
            return this.w;
        }
        set y(a) {
            let b = this.w;
            this.w = a;
            if (this.w != b) {
                this.c2("LineBreakMode", 10, enumGetBox(TextCellLineBreakMode_$type, b), enumGetBox(TextCellLineBreakMode_$type, this.w));
            }
        }
        get x() {
            return this.v;
        }
        set x(a) {
            let b = this.v;
            this.v = a;
            if (this.v != b) {
                this.c2("ActualLineBreakMode", 4, enumGetBox(TextCellLineBreakMode_$type, b), enumGetBox(TextCellLineBreakMode_$type, this.v));
            }
        }
        get ek() {
            return this.dx;
        }
        set ek(a) {
            let b = this.dx;
            this.dx = a;
            if (this.dx != b) {
                this.c2("TextColor", 10, b, this.dx);
            }
        }
        get d6() {
            return this.dq;
        }
        set d6(a) {
            let b = this.dq;
            this.dq = a;
            if (this.dq != b) {
                this.c2("ActualTextColor", 2, b, this.dq);
            }
        }
        get aw() {
            return this.as;
        }
        set aw(a) {
            let b = this.as;
            this.as = a;
            if (this.as != b) {
                this.c2("PinnedRowOpacity", 10, b, this.as);
            }
        }
        get at() {
            return this.aq;
        }
        set at(a) {
            let b = this.aq;
            this.aq = a;
            if (this.aq != b) {
                this.c2("ActualPinnedRowOpacity", 0, b, this.aq);
            }
        }
        get textStyle() {
            return this.ac;
        }
        set textStyle(a) {
            let b = this.ac;
            this.ac = a;
            if (this.ac != b) {
                this.c2("FontInfo", 10, b, this.ac);
            }
        }
        get ad() {
            return this.ab;
        }
        set ad(a) {
            let b = this.ab;
            this.ab = a;
            if (this.ab != b) {
                this.c2("ActualFontInfo", 3, b, this.ab);
            }
        }
        k(a, b) {
            let c = this.l(a);
            c.i0 = b;
            return c;
        }
        cl(a, b, c, d) {
            let e = this.cm(a, b, c);
            if (this.cellStyleKeyRequested == null) {
                return e;
            }
            let f = new CellStyleRequestedEventArgs();
            f.resolvedValue = c;
            f.rowNumber = d;
            f.styleKey = e;
            this.cellStyleKeyRequested(this, f);
            return f.styleKey;
        }
        cw(a, b, c, d) {
            a.a4 = b.model.bl;
            a.f = this.c;
            a.h = this.h;
            a.b4 = 0;
            a.b9 = 0;
            a.b5 = 0;
            a.ca = 0;
            a.b1 = 1;
            a.cb = 0;
            a.b6 = 1;
            a.b1 = this.au;
            a.kp = this.d6;
            a.ke = this.d0;
            a.ka = this.dz;
            a.dd = this.ba;
            a.di = this.bc;
            a.dg = this.bb;
            a.db = this.a9;
            a.kh = this.d2;
            a.er = this.bi;
            a.ew = this.bk;
            a.eu = this.bj;
            a.ep = this.bh;
            if (this.ag) {
                a.kf = this.d1;
                a.eb = this.be;
                a.ee = this.bf;
                a.eg = this.bg;
                a.d9 = this.bd;
            }
            else {
                if (a.kf != null) {
                    a.kf = null;
                    a.eb = 0;
                    a.eg = 0;
                    a.ee = 0;
                    a.d9 = 0;
                }
            }
            if (this.grid != null) {
                if (this.ad != null) {
                    this.ad.t(this.grid.externalGrid.renderer);
                }
            }
            a.af = this.ad;
            a.z = this.x;
            a.ko = this.d5;
            a.kl = this.d4;
            a.kk = this.d3;
            a.b7 = this.at;
            if (a.c == null) {
                a.c = new DefaultCellActionManager(b, a);
            }
            if (a.d == null) {
                a.d = new DefaultGridInfoRequestor(b, a);
            }
        }
        cx(a, b, c, d) {
            if (this.dataBinding != null) {
                let e = this.n(a, b, c, d);
                this.dataBinding(this, e);
                c = e.resolvedValue;
                d = e.rowObject;
            }
            this.cy(a, b, c, d);
            if (this.dataBound != null) {
                this.dataBound(this, this.n(a, b, c, d));
            }
        }
        n(a, b, c, d) {
            let e = new DataBindingEventArgs();
            e.cellInfo = a;
            e.resolvedValue = c;
            e.rowObject = d;
            return e;
        }
        cy(a, b, c, d) {
            a.gp = d;
            if (!a.k.g && this.ai()) {
                let e = this.aa;
                let f = e.o;
                let g = f.count;
                let h = e.p;
                let i = e.q;
                for (let j = 0; j < g; j++) {
                    if (h._inner[j]) {
                        continue;
                    }
                    a.jt(f._inner[j], i._inner[j]);
                }
            }
        }
        c5() {
            for (let a = 0; a < this.ao.count; a++) {
                if (!this.ak(this.ao._inner[a])) {
                    this.aj(this.ao._inner[a]);
                }
            }
        }
        aj(a) {
            if (this.ah(a)) {
                let b = 11;
                if (this.al.containsKey(a)) {
                    b = this.al.item(a);
                }
                this.c3(a, b, this.bn(a), this.bn(a));
                return true;
            }
            return false;
        }
        ak(a) {
            if (stringStartsWith(a, "Actual")) {
                return false;
            }
            switch (a) {
                case "Background":
                    this.c2("ActualBackground", 2, this.d0, this.d0);
                    return true;
                case "ContentOpacity":
                    this.c2("ContentOpacity", 0, this.au, this.au);
                    return true;
                case "FontInfo":
                    this.c2("ActualFontInfo", 3, this.ad, this.ad);
                    return true;
                case "HorizontalAlignment":
                    this.c2("ActualHorizontalAlignment", 4, enumGetBox(CellContentHorizontalAlignment_$type, this.c), enumGetBox(CellContentHorizontalAlignment_$type, this.c));
                    return true;
                case "TextColor":
                    this.c2("ActualTextColor", 2, this.d6, this.d6);
                    return true;
                case "VerticalAlignment":
                    this.c2("VerticalAlignment", 4, enumGetBox(CellContentVerticalAlignment_$type, this.h), enumGetBox(CellContentVerticalAlignment_$type, this.h));
                    return true;
                case "Border":
                    this.c2("ActualBorder", 2, this.d1, this.d1);
                    return true;
                case "ActivationBorder":
                    this.c2("ActualActivationBorder", 2, this.dz, this.dz);
                    return true;
                case "BorderLeftWidth":
                    this.c2("BorderLeftWidth", 0, this.be, this.be);
                    return true;
                case "BorderTopWidth":
                    this.c2("BorderTopWidth", 0, this.bg, this.bg);
                    return true;
                case "BorderRightWidth":
                    this.c2("BorderRightWidth", 0, this.bf, this.bf);
                    return true;
                case "BorderBottomWidth":
                    this.c2("BorderBottomWidth", 0, this.bd, this.bd);
                    return true;
                case "ActivationBorderLeftWidth":
                    this.c2("ActivationBorderLeftWidth", 0, this.ba, this.ba);
                    return true;
                case "ActivationBorderTopWidth":
                    this.c2("ActivationBorderTopWidth", 0, this.bc, this.bc);
                    return true;
                case "ActivationBorderRightWidth":
                    this.c2("ActivationBorderRightWidth", 0, this.bb, this.bb);
                    return true;
                case "ActivationBorderBottomWidth":
                    this.c2("ActivationBorderBottomWidth", 0, this.a9, this.a9);
                    return true;
            }
            return false;
        }
        c2(a, b, c, d) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            this.c3(a, b, c, d);
            if (this.definitionPropertyUpdated != null) {
                this.definitionPropertyUpdated(this, ((() => {
                    let $ret = new DefinitionPropertyUpdatedEventArgs();
                    $ret.propertyName = a;
                    $ret.animationType = b;
                    $ret.newValue = d;
                    $ret.oldValue = c;
                    return $ret;
                })()));
            }
        }
        c8() {
            if (this.d7 != null) {
                this.d0 = this.d7;
            }
            else {
                this.d0 = this.eb();
            }
        }
        df() {
            if (this.ek != null) {
                this.d6 = this.ek;
            }
            else {
                this.d6 = this.eg();
            }
        }
        dg() {
            this.ad = this.textStyle;
        }
        dd() {
            if (!isNaN_(this.aw)) {
                this.at = this.aw;
            }
            else {
                this.at = this.av();
            }
        }
        dc() {
            if (this.ei != null) {
                this.d4 = this.ei;
            }
            else {
                this.d4 = this.ed();
            }
        }
        de() {
            if (this.ej != null) {
                this.d5 = this.ej;
            }
            else {
                this.d5 = this.ef();
            }
        }
        db() {
            if (this.eh != null) {
                this.d3 = this.eh;
            }
            else {
                this.d3 = this.ec();
            }
        }
        c3(a, b, c, d) {
            this.cv(a, b);
            switch (a) {
                case "TextColor":
                    this.df();
                    break;
                case "Background":
                    this.c8();
                    break;
                case "PinnedBackground":
                    this.de();
                    break;
                case "PinnedRowBackground":
                    this.dc();
                    break;
                case "LastStickyRowBackground":
                    this.db();
                    break;
                case "PinnedRowOpacity":
                    this.dd();
                    break;
                case "VerticalAlignment":
                    if (this.j == 4) {
                        this.h = this.i();
                    }
                    else {
                        this.h = this.j;
                    }
                    break;
                case "HorizontalAlignment":
                    if (this.e == 4) {
                        this.c = this.d();
                    }
                    else {
                        this.c = this.e;
                    }
                    break;
                case "LineBreakMode":
                    this.x = this.y;
                    break;
                case "FontInfo":
                    this.dg();
                    break;
                case "Border":
                case "BorderLeftWidth":
                case "BorderTopWidth":
                case "BorderRightWidth":
                case "BorderBottomWidth":
                    this.c9();
                    break;
                case "ActivationBorder":
                    this.c7();
                    break;
                case "ErrorBorder":
                    this.da();
                    break;
            }
        }
        c9() {
            if (this.be != 0 || this.bg != 0 || this.bf != 0 || this.bd != 0) {
                if (this.d8 != null) {
                    this.ag = true;
                    this.d1 = this.d8;
                }
                else if (this.d1 != null) {
                    this.ag = true;
                }
            }
        }
        c7() {
            if (this.grid != null && this.grid.he) {
                if (this.dy == null) {
                    this.dz = this.ea();
                }
                else {
                    this.dz = this.dy;
                }
            }
            else {
                this.dy = null;
            }
        }
        da() {
            if (this.d9 != null) {
                this.d2 = this.d9;
            }
            else {
                this.d2 = GridStyleRepository.bg;
            }
        }
        get an() {
            return this.am;
        }
        get ap() {
            return this.ao;
        }
        cv(a, b) {
            if (this.am.contains(a)) {
                return;
            }
            this.am.add_1(a);
            this.ao.add(a);
            this.al.addItem(a, b);
        }
        d() {
            if (this.e != 4) {
                return this.e;
            }
            return 0;
        }
        i() {
            if (this.j != 4) {
                return this.j;
            }
            return 1;
        }
        eg() {
            return GridStyleRepository.bn;
        }
        ea() {
            return GridStyleRepository.av;
        }
        af() {
            return GridStyleRepository.l;
        }
        eb() {
            return GridStyleRepository.aw;
        }
        ef() {
            return null;
        }
        ed() {
            return null;
        }
        ec() {
            return null;
        }
        ee() {
            return GridStyleRepository.ba;
        }
        av() {
            return 0.3;
        }
        c6(a, b, c) {
            if (this.z == null) {
                this.z = new FastIterationDictionary$2(String_$type, Base.$, 0);
            }
            let d = null;
            if (this.z.d(a)) {
                d = this.z.item(a);
            }
            this.z.item(a, c);
            let e = false;
            if (d == null && c != null) {
                e = true;
            }
            if (d != null) {
                if (!Base.equalsStatic(d, c)) {
                    e = true;
                }
            }
            if (e) {
                this.c2(a, b, d, c);
            }
        }
        ai() {
            if (this.z == null) {
                return false;
            }
            return this.z.r > 0;
        }
        get aa() {
            return this.z;
        }
        ah(a) {
            if (this.z == null) {
                return false;
            }
            return this.z.d(a);
        }
        c4(a) {
            if (this.z == null) {
                return;
            }
            if (this.z.d(a)) {
                this.z.f(a);
            }
        }
        bn(a) {
            if (this.z == null) {
                return null;
            }
            if (this.z.d(a)) {
                return this.z.item(a);
            }
            return null;
        }
        ck(a, b, c) {
            let d = stringEmpty();
            switch (b) {
                case 10:
                    if (c != null) {
                        let override_ = c;
                        let val_ = typeGetValue(a);
                        d = (override_.format(val_));
                    }
                    else {
                        d = (typeGetValue(a)).toString();
                    }
                    break;
                case 8:
                    if (c != null) {
                        let override_ = c;
                        let val_ = a;
                        d = (override_.format(val_));
                    }
                    else {
                        d = a.toString();
                    }
                    break;
                case 5:
                    if (c != null) {
                        let override_ = c;
                        let val_ = a;
                        d = (override_.format(val_));
                    }
                    else {
                        d = a.toString();
                    }
                    break;
                case 1:
                    if (c != null) {
                        let override_ = c;
                        let val_ = typeGetValue(a);
                        d = (override_.format(val_));
                    }
                    else {
                        d = (typeGetValue(a)).toString();
                    }
                    break;
                case 3:
                    if (c != null) {
                        let override_ = c;
                        let val_ = typeGetValue(a);
                        d = (override_.format(val_));
                    }
                    else {
                        d = typeGetValue(a).toString();
                    }
                    break;
                case 4:
                    if (c != null) {
                        let override_ = c;
                        let val_ = typeGetValue(a);
                        d = (override_.format(val_));
                    }
                    else {
                        d = typeGetValue(a).toString();
                    }
                    break;
                case 7:
                    if (c != null) {
                        let override_ = c;
                        let val_ = a;
                        d = (override_.format(val_));
                    }
                    else {
                        d = a.toString();
                    }
                    break;
                case 6:
                    if (c != null) {
                        let override_ = c;
                        let val_ = a;
                        d = (override_.format(val_));
                    }
                    else {
                        d = a.toString();
                    }
                    break;
                case 0:
                case 2:
                case 11:
                    d = a.toString();
                    break;
            }
            return d;
        }
        u(a, b) {
            let c = b != null ? b.value.toString() : stringEmpty();
            let d = a.g;
            if (a.n == 4) {
                d = 1;
            }
            let e = b.value;
            switch (d) {
                case 10:
                    if (a.w != null) {
                        let override_ = a.w;
                        let val_ = typeGetValue(e);
                        c = (override_.format(val_));
                    }
                    else {
                        c = (typeGetValue(e)).toString();
                    }
                    break;
                case 8:
                    if (a.w != null) {
                        let override_ = a.w;
                        let val_ = e;
                        c = (override_.format(val_));
                    }
                    else {
                        c = e.toString();
                    }
                    break;
                case 5:
                    if (a.w != null) {
                        let override_ = a.w;
                        let val_ = e;
                        c = (override_.format(val_));
                    }
                    else {
                        let summaryValue_ = e;
                        let maxFractionDigits_ = a.u;
                        c = (parseFloat(summaryValue_.toFixed(maxFractionDigits_)).toString());
                    }
                    break;
                case 1:
                    if (a.w != null) {
                        let override_ = a.w;
                        let val_ = typeGetValue(e);
                        c = (override_.format(val_));
                    }
                    else {
                        c = (typeGetValue(e)).toString();
                    }
                    break;
                case 3:
                    if (a.w != null) {
                        let override_ = a.w;
                        let val_ = typeGetValue(e);
                        c = (override_.format(val_));
                    }
                    else {
                        c = typeGetValue(e).toString();
                    }
                    break;
                case 4:
                    if (a.w != null) {
                        let override_ = a.w;
                        let val_ = typeGetValue(e);
                        c = (override_.format(val_));
                    }
                    else {
                        c = typeGetValue(e).toString();
                    }
                    break;
                case 7:
                    if (a.w != null) {
                        let override_ = a.w;
                        let val_ = e;
                        c = (override_.format(val_));
                    }
                    else {
                        let summaryValue_ = e;
                        let maxFractionDigits_ = a.u;
                        c = (parseFloat(summaryValue_.toFixed(maxFractionDigits_)).toString());
                    }
                    break;
                case 6:
                    if (a.w != null) {
                        let override_ = a.w;
                        let val_ = e;
                        c = (override_.format(val_));
                    }
                    else {
                        let summaryValue_ = e;
                        let maxFractionDigits_ = a.u;
                        c = (parseFloat(summaryValue_.toFixed(maxFractionDigits_)).toString());
                    }
                    break;
                case 0:
                case 2:
                case 11:
                    c = e.toString();
                    break;
            }
            let f = a.ac != null ? a.ac : a.j != null ? a.j.displayName : stringEmpty();
            if (a.f != null) {
                c = a.f.i(e);
            }
            let g = stringIsNullOrWhiteSpace(a.ae) ? a.af : a.ae;
            let h = g + " " + f + " = " + c;
            if (a.e != null) {
                h = a.e.i(e);
            }
            let i = a.o(b, c, h);
            h = i.e;
            c = i.d;
            return ((() => {
                let $ret = new SummaryData();
                $ret.e = g;
                $ret.b = e;
                $ret.a = a.n;
                $ret.c = i.e;
                $ret.d = i.d;
                return $ret;
            })());
        }
    }
    DefinitionBase.$t = /*@__PURE__*/ markType(DefinitionBase, 'DefinitionBase', Base.$, [INotifyPropertyChanged_$type]);
    return DefinitionBase;
})();
/**
 * @hidden
 */
export let Column = /*@__PURE__*/ (() => {
    class Column extends DefinitionBase {
        constructor() {
            super();
            this.g2 = 0;
            this.e7 = 0;
            this.gr = truncate(DeviceUtils.g(12));
            this.gt = truncate(DeviceUtils.g(1));
            this.gs = truncate(DeviceUtils.g(12));
            this.gq = truncate(DeviceUtils.g(1));
            this.ha = stringEmpty();
            this.go = 0;
            this.gn = 0;
            this.gp = 0;
            this.fh = 0;
            this.g8 = null;
            this.g9 = null;
            this.g6 = null;
            this.jd = null;
            this.i9 = null;
            this.jc = null;
            this.i8 = null;
            this.fd = null;
            this.e9 = null;
            this.gj = NaN;
            this.fy = false;
            this.fu = false;
            this.f1 = false;
            this.en = null;
            this.ff = null;
            this.fx = true;
            this.f0 = true;
            this.fz = false;
            this.f2 = false;
            this.e5 = 0;
            this.fi = 0;
            this.ft = false;
            this.ev = 0;
            this.ew = 0;
            this.i6 = null;
            this.ja = null;
            this.e0 = 0;
            this.ez = 0;
            this.fr = true;
            this.fv = true;
            this.fw = true;
            this.jb = null;
            this.i7 = null;
            this.gi = NaN;
            this.gh = 0;
            this.fo = null;
            this.fn = null;
            this.fb = 0;
            this.g3 = null;
            this.g7 = null;
            this.el = null;
            this.columnCellsPropertyUpdating = null;
            this.columnHeaderCellsPropertyUpdating = null;
            this.fl = null;
            this.fs = false;
            this.fs = true;
            this.header = new TextHeader();
            this.fs = false;
            this.c = this.d();
            this.h = this.i();
            this.jh = this.jl();
            this.jg = this.jk();
            this.g2 = Column.g1++;
        }
        jl() {
            return GridStyleRepository.ba;
        }
        jk() {
            return GridStyleRepository.a1;
        }
        get e8() {
            return this.e7;
        }
        set e8(a) {
            let b = this.e7;
            this.e7 = a;
            if (this.e7 != b) {
                this.c2("State", 10, enumGetBox(ColumnStates_$type, b), enumGetBox(ColumnStates_$type, this.e7));
            }
        }
        get gy() {
            return this.gr;
        }
        set gy(a) {
            let b = this.gr;
            this.gr = a;
            if (this.gr != b) {
                this.c2("PaddingLeft", 6, b, this.gr);
            }
        }
        get g0() {
            return this.gt;
        }
        set g0(a) {
            let b = this.gt;
            this.gt = a;
            if (this.gt != b) {
                this.c2("PaddingTop", 6, b, this.gt);
            }
        }
        get gz() {
            return this.gs;
        }
        set gz(a) {
            let b = this.gs;
            this.gs = a;
            if (this.gs != b) {
                this.c2("PaddingRight", 6, b, this.gs);
            }
        }
        get gx() {
            return this.gq;
        }
        set gx(a) {
            let b = this.gq;
            this.gq = a;
            if (this.gq != b) {
                this.c2("PaddingBottom", 6, b, this.gq);
            }
        }
        get id() {
            return this.ha;
        }
        set id(a) {
            let b = this.ha;
            this.ha = a;
            if (this.ha != b) {
                this.c2("Name", 10, b, this.ha);
            }
        }
        get gv() {
            return this.go;
        }
        set gv(a) {
            this.go = a;
        }
        get gu() {
            return this.gn;
        }
        set gu(a) {
            this.gn = a;
        }
        get gw() {
            return this.gp;
        }
        set gw(a) {
            this.gp = a;
        }
        get fj() {
            return this.fh;
        }
        set fj(a) {
            this.fh = a;
        }
        get hy() {
            return this.g8;
        }
        set hy(a) {
            this.g8 = a;
            if (this.h2 == null) {
                this.hh = this.hy;
            }
        }
        get h2() {
            return this.g9;
        }
        set h2(a) {
            let b = this.g9;
            this.g9 = a;
            if (this.g9 != b) {
                this.c2("HeaderText", 8, b, this.g9);
            }
        }
        get hh() {
            return this.g6;
        }
        set hh(a) {
            let b = this.g6;
            this.g6 = a;
            if (this.g6 != b) {
                this.c2("ActualHeaderText", 8, b, this.g6);
            }
        }
        get jn() {
            return this.jd;
        }
        set jn(a) {
            let b = this.jd;
            this.jd = a;
            if (this.jd != b) {
                this.c2("SelectedBackground", 10, b, this.jd);
            }
        }
        get jh() {
            return this.i9;
        }
        set jh(a) {
            let b = this.i9;
            this.i9 = a;
            if (this.i9 != b) {
                this.c2("ActualSelectedBackground", 2, b, this.i9);
            }
        }
        get jm() {
            return this.jc;
        }
        set jm(a) {
            let b = this.jc;
            this.jc = a;
            if (this.jc != b) {
                this.c2("RowHoverBackground", 10, b, this.jc);
            }
        }
        get jg() {
            return this.i8;
        }
        set jg(a) {
            let b = this.i8;
            this.i8 = a;
            if (this.i8 != b) {
                this.c2("ActualHoverBackground", 2, b, this.i8);
            }
        }
        get fe() {
            return this.fd;
        }
        set fe(a) {
            let b = this.fd;
            this.fd = a;
            if (this.fd != b) {
                this.c2("AnimationSettings", 10, b, "AnimationSettings");
            }
        }
        get width() {
            return this.e9;
        }
        set width(a) {
            let b = this.e9;
            this.e9 = a;
            if (this.e9 != b) {
                this.c2("Width", 10, b, a);
            }
        }
        get gm() {
            return this.gj;
        }
        set gm(a) {
            let b = this.gj;
            this.gj = a;
            if (this.gj != b) {
                this.c2("MinWidth", 10, b, a);
            }
        }
        get gc() {
            return this.fy;
        }
        set gc(a) {
            let b = this.fy;
            this.fy = a;
            if (this.fy != b) {
                this.c2("IsFromMarkup", 10, b, this.fy);
            }
        }
        get f8() {
            return this.fu;
        }
        set f8(a) {
            let b = this.fu;
            if (a) {
                this.gf = true;
            }
            this.fu = a;
            if (this.fu != b) {
                this.c2("IsAutoGenerated", 10, b, this.fu);
            }
        }
        get gf() {
            return this.f1;
        }
        set gf(a) {
            let self_ = this;
            let value_ = a;
            this.f1 = value_;
            self_.___mustPassByValue = true;
        }
        get eo() {
            return this.en;
        }
        set eo(a) {
            let b = this.en;
            this.en = a;
            if (this.en != b) {
                this.c2("Filter", 10, b, this.en);
            }
        }
        get header() {
            return this.ff;
        }
        set header(a) {
            let b = this.ff;
            this.ff = a;
            if (this.ff != b) {
                this.c2("Header", 10, b, this.ff);
            }
            this.ff.grid = this.grid;
        }
        get gb() {
            return this.fx;
        }
        set gb(a) {
            let b = this.fx;
            this.fx = a;
            if (this.fx != b) {
                this.c2("IsFilteringEnabled", 10, b, this.fx);
            }
        }
        get ge() {
            return this.f0;
        }
        set ge(a) {
            let b = this.f0;
            this.f0 = a;
            if (this.f0 != b) {
                this.c2("IsResizingEnabled", 10, b, this.f0);
            }
        }
        get gd() {
            return this.fz;
        }
        set gd(a) {
            let b = this.fz;
            this.fz = a;
            if (this.fz != b) {
                this.c2("IsHidden", 10, b, this.fz);
            }
        }
        get gg() {
            return this.f2;
        }
        set gg(a) {
            let b = this.f2;
            this.f2 = a;
            if (this.f2 != b) {
                this.c2("ShouldRemoveWhenHidden", 10, b, this.f2);
            }
        }
        get e6() {
            return this.e5;
        }
        set e6(a) {
            let b = this.e5;
            this.e5 = a;
            if (this.e5 != b) {
                this.c2("SortDirection", 11, enumGetBox(ColumnSortDirection_$type, b), enumGetBox(ColumnSortDirection_$type, this.e5));
            }
        }
        get fk() {
            return this.fi;
        }
        set fk(a) {
            let b = this.fi;
            this.fi = a;
            if (this.fi != b) {
                this.c2("Pinned", 11, enumGetBox(PinnedPositions_$type, b), enumGetBox(PinnedPositions_$type, this.fi));
            }
        }
        get f7() {
            return this.ft;
        }
        set f7(a) {
            let b = this.ft;
            this.ft = a;
            if (this.ft != b) {
                this.c2("InternalShouldRemoveWhenHidden", 10, b, this.ft);
            }
        }
        get f4() {
            if (this.ft) {
                return true;
            }
            return this.f2;
        }
        get ex() {
            return this.ev;
        }
        set ex(a) {
            let b = this.ev;
            this.ev = a;
            if (this.ev != b) {
                this.c2("ActualColumnOptionsIconAlignment", 4, enumGetBox(ColumnOptionsIconAlignment_$type, b), enumGetBox(ColumnOptionsIconAlignment_$type, this.ev));
            }
        }
        get ey() {
            return this.ew;
        }
        set ey(a) {
            let b = this.ew;
            this.ew = a;
            if (this.ew != b) {
                this.c2("ColumnOptionsIconAlignment", 10, enumGetBox(ColumnOptionsIconAlignment_$type, b), enumGetBox(ColumnOptionsIconAlignment_$type, this.ew));
            }
        }
        get je() {
            return this.i6;
        }
        set je(a) {
            let b = this.i6;
            this.i6 = a;
            if (this.i6 != b) {
                this.c2("ActualColumnOptionsIconColor", 2, b, this.i6);
            }
        }
        get ji() {
            return this.ja;
        }
        set ji(a) {
            let b = this.ja;
            this.ja = a;
            if (this.ja != b) {
                this.c2("ColumnOptionsIconColor", 10, b, this.ja);
            }
        }
        get e2() {
            return this.e0;
        }
        set e2(a) {
            let b = this.e0;
            this.e0 = a;
            if (this.e0 != b) {
                this.c2("ColumnOptionsIconBehavior", 10, enumGetBox(ColumnOptionsIconBehavior_$type, b), enumGetBox(ColumnOptionsIconBehavior_$type, this.e0));
            }
        }
        get e1() {
            return this.ez;
        }
        set e1(a) {
            let b = this.ez;
            this.ez = a;
            if (this.ez != b) {
                this.c2("ActualColumnOptionsIconBehavior", 4, enumGetBox(ColumnOptionsIconBehavior_$type, b), enumGetBox(ColumnOptionsIconBehavior_$type, this.ez));
            }
        }
        get f3() {
            return this.fr;
        }
        set f3(a) {
            let b = this.fr;
            this.fr = a;
            if (this.fr != b) {
                this.c2("ActualIsColumnOptionsEnabled", 5, b, this.fr);
            }
        }
        get f9() {
            return this.fv;
        }
        set f9(a) {
            let b = this.fv;
            this.fv = a;
            if (this.fv != b) {
                this.c2("IsColumnOptionsEnabled", 10, b, this.fv);
            }
        }
        get ga() {
            return this.fw;
        }
        set ga(a) {
            let b = this.fw;
            this.fw = a;
            if (this.fw != b) {
                this.c2("IsEditable", 10, b, this.fw);
            }
        }
        get jj() {
            return this.jb;
        }
        set jj(a) {
            let b = this.jb;
            this.jb = a;
            if (this.jb != b) {
                this.c2("DeletedTextColor", 10, b, this.jb);
            }
        }
        get jf() {
            return this.i7;
        }
        set jf(a) {
            let b = this.i7;
            this.i7 = a;
            if (this.i7 != b) {
                this.c2("ActualDeletedTextColor", 2, b, this.i7);
            }
        }
        get gl() {
            return this.gi;
        }
        set gl(a) {
            let b = this.gi;
            this.gi = a;
            if (this.gi != b) {
                this.c2("EditOpacity", 10, b, this.gi);
            }
        }
        get gk() {
            return this.gh;
        }
        set gk(a) {
            let b = this.gh;
            this.gh = a;
            if (this.gh != b) {
                this.c2("ActualEditOpacity", 0, b, this.gh);
            }
        }
        get textEditStyle() {
            return this.fo;
        }
        set textEditStyle(a) {
            let b = this.fo;
            this.fo = a;
            if (this.fo != b) {
                this.c2("EditFontInfo", 10, b, this.fo);
            }
        }
        get fp() {
            return this.fn;
        }
        set fp(a) {
            let b = this.fn;
            this.fn = a;
            if (this.fn != b) {
                this.c2("ActualEditFontInfo", 3, b, this.fn);
            }
        }
        get fc() {
            return this.fb;
        }
        set fc(a) {
            let b = this.fb;
            this.fb = a;
            if (b != this.fb) {
                this.c2("EditorTypeInternal", 4, enumGetBox(EditorType_$type, b), enumGetBox(EditorType_$type, this.fb));
            }
        }
        get g4() {
            return this.g3;
        }
        set g4(a) {
            let b = this.g3;
            this.g3 = a;
            if (b != this.g3) {
                this.c2("EditorItemsSourceInternal", 9, b, this.g3);
            }
        }
        get hu() {
            return this.g7;
        }
        set hu(a) {
            let b = this.g7;
            this.g7 = a;
            if (b != this.g7) {
                this.c2("EditorTextFieldInternal", 8, b, this.g7);
            }
        }
        get em() {
            return this.el;
        }
        set em(a) {
            let b = this.el;
            this.el = a;
            if (b != this.el) {
                this.c2("EditorValueFieldInternal", 8, b, this.el);
            }
        }
        ed() {
            return GridStyleRepository.a4;
        }
        ef() {
            return GridStyleRepository.bb;
        }
        cy(a, b, c, d) {
            super.cy(a, b, c, d);
            a.go = c;
            a.ay = b.d9.isEditedValue(d, this.hy);
            a.av = b.d9.isDeletedRow(d);
            a.en = b.d9.getPendingEditID(d, this.hy);
            a.hl = b.d9.getError(a.en);
            if (b.e0.o(a)) {
                a.b8 = 1;
            }
            else {
                a.b8 = 0;
            }
            if (b.aj.m(a)) {
                a.by = 1;
            }
            else {
                a.by = 0;
            }
            if (b.d5.c(a.k.w)) {
                a.b3 = 1;
            }
            else {
                a.b3 = 0;
            }
        }
        cw(a, b, c, d) {
            super.cw(a, b, c, d);
            a.km = this.jh;
            a.kj = this.jg;
            a.fo = this.gy;
            a.fs = this.g0;
            a.fq = this.gz;
            a.fm = this.gx;
            if (this.grid != null) {
                if (this.fp != null) {
                    this.fp.t(this.grid.externalGrid.renderer);
                }
            }
            a.ae = this.fp;
            a.b2 = this.gk;
            a.kg = this.jf;
        }
        c3(a, b, c, d) {
            super.c3(a, b, c, d);
            switch (a) {
                case "Header":
                    let e = c;
                    let f = d;
                    if (e != null) {
                        e.definitionPropertyUpdated = delegateRemove(e.definitionPropertyUpdated, runOn(this, this.is));
                    }
                    if (f != null) {
                        f.definitionPropertyUpdated = delegateCombine(f.definitionPropertyUpdated, runOn(this, this.is));
                        if (f.e == 4) {
                            f.c = this.ep();
                        }
                        if (f.j == 4) {
                            f.h = this.eq();
                        }
                        if (!this.fs) {
                            f.c5();
                        }
                    }
                    break;
                case "HeaderText":
                    this.hh = d;
                    break;
                case "SelectedBackground":
                    this.i5();
                    break;
                case "ActualHorizontalAlignment":
                    if (this.header != null) {
                        if (this.header.e == 4) {
                            this.header.c = this.ep();
                        }
                    }
                    break;
                case "VerticalAlignment":
                    if (this.header != null) {
                        if (this.header.j == 4) {
                            this.header.h = this.eq();
                        }
                    }
                    break;
                case "SortDirection":
                    this.i3(this, "SortDirection", 11, c, d);
                    break;
                case "ActualLastStickyRowBackground":
                    if (c != null && this.d3 == null) {
                        d = this.d5;
                    }
                    break;
                case "ColumnOptionsIconAlignment":
                    this.iw();
                    break;
                case "ColumnOptionsIconColor":
                    this.iz();
                    break;
                case "ColumnOptionsIconBehavior":
                    this.iy();
                    break;
                case "IsColumnOptionsEnabled":
                    this.ix();
                    break;
                case "DeletedTextColor":
                    this.i0();
                    break;
                case "EditOpacity":
                    this.i2();
                    break;
                case "EditFontInfo":
                    this.i1();
                    break;
                case "RowHoverBackground":
                    this.i4();
                    break;
            }
            this.iv(a, b, c, d);
        }
        eq() {
            return this.h;
        }
        ep() {
            return this.c;
        }
        i3(a, b, c, d, e) {
            if (this.columnHeaderCellsPropertyUpdating != null) {
                this.columnHeaderCellsPropertyUpdating(this, b, c, d, e);
            }
        }
        is(a, b) {
            this.i3(this, b.propertyName, b.animationType, b.oldValue, b.newValue);
        }
        cz(a, b) {
            if (this.header != null) {
                this.header.grid = b;
            }
            this.i5();
            this.i5();
            this.c8();
            this.df();
            this.dg();
            this.de();
            this.db();
            this.dc();
            this.dd();
            this.i2();
            this.i1();
            this.i0();
            this.iw();
            this.iz();
            this.iy();
            this.ix();
            this.i4();
        }
        c1(a, b) {
            switch (b.propertyName) {
                case "CellSelectedBackground":
                    this.i5();
                    break;
                case "CellBackground":
                    this.c8();
                    break;
                case "CellTextColor":
                    this.df();
                    break;
                case "CellTextStyle":
                    this.dg();
                    break;
                case "StickyRowBackground":
                    this.de();
                    break;
                case "LastStickyRowBackground":
                    this.db();
                    break;
                case "PinnedRowBackground":
                    this.dc();
                    break;
                case "PinnedRowOpacity":
                    this.dd();
                    break;
                case "ColumnOptionsIconAlignment":
                    this.iw();
                    break;
                case "ColumnOptionsIconColor":
                    this.iz();
                    break;
                case "ColumnOptionsIconBehavior":
                    this.iy();
                    break;
                case "IsColumnOptionsEnabled":
                    this.ix();
                    break;
                case "DeletedTextColor":
                    this.i0();
                    break;
                case "EditOpacity":
                    this.i2();
                    break;
                case "EditTextStyle":
                    this.i1();
                    break;
                case "RowHoverBackground":
                    this.i4();
                    break;
            }
        }
        i4() {
            if (this.jm == null) {
                if (this.grid != null && this.grid.u7 != null) {
                    this.jg = this.grid.u7;
                    return;
                }
                this.jg = this.jk();
            }
            else {
                this.jg = this.jm;
            }
        }
        i5() {
            if (this.jn == null) {
                if (this.grid != null && this.grid.ut != null) {
                    this.jh = this.grid.ut;
                    return;
                }
                this.jh = this.jl();
            }
            else {
                this.jh = this.jn;
            }
        }
        c8() {
            if (this.d7 == null) {
                if (this.grid != null && this.grid.us != null) {
                    this.d0 = this.grid.us;
                }
                else {
                    this.d0 = this.eb();
                }
            }
            else {
                this.d0 = this.d7;
            }
        }
        df() {
            if (this.ek == null) {
                if (this.grid != null && this.grid.uu != null) {
                    this.d6 = this.grid.uu;
                    return;
                }
                this.d6 = this.eg();
            }
            else {
                this.d6 = this.ek;
            }
        }
        dg() {
            if (this.textStyle == null) {
                if (this.grid != null && this.grid.fp != null) {
                    this.ad = this.grid.fp;
                    return;
                }
                this.ad = this.af();
            }
            else {
                this.ad = this.textStyle;
            }
        }
        dd() {
            if (isNaN_(this.aw)) {
                if (this.grid != null && !isNaN_(this.grid.jp)) {
                    this.at = this.grid.jp;
                    return;
                }
                this.at = this.av();
            }
            else {
                this.at = this.aw;
            }
        }
        i0() {
            if (this.jj == null) {
                if (this.grid != null && this.grid.uy != null) {
                    this.jf = this.grid.uy;
                    return;
                }
                this.jf = GridStyleRepository.bm;
            }
            else {
                this.jf = this.jj;
            }
        }
        i2() {
            if (isNaN_(this.gl)) {
                if (this.grid != null && !isNaN_(this.grid.jo)) {
                    this.gk = this.grid.jo;
                    return;
                }
                this.gk = GridStyleRepository.m;
            }
            else {
                this.gk = this.gl;
            }
        }
        i1() {
            if (this.textEditStyle == null) {
                if (this.grid != null && this.grid.fq != null) {
                    this.fp = this.grid.fq;
                    return;
                }
                this.fp = GridStyleRepository.k;
            }
            else {
                this.fp = this.textEditStyle;
            }
        }
        dc() {
            if (this.ei == null) {
                if (this.grid != null && this.grid.u6 != null) {
                    this.d4 = this.grid.u6;
                    return;
                }
                this.d4 = this.ed();
            }
            else {
                this.d4 = this.ei;
            }
        }
        de() {
            if (this.ej == null) {
                if (this.grid != null && this.grid.vf != null) {
                    this.d5 = this.grid.vf;
                    return;
                }
                this.d5 = this.ef();
            }
            else {
                this.d5 = this.ej;
            }
        }
        db() {
            if (this.eh == null) {
                if (this.grid != null && this.grid.u5 != null) {
                    this.d3 = this.grid.u5;
                    return;
                }
                this.d3 = this.ec();
            }
            else {
                this.d3 = this.eh;
            }
        }
        iw() {
            if (this.ey == 0) {
                if (this.grid != null && this.grid.bk != 0) {
                    this.ex = this.grid.bk;
                    return;
                }
                this.ex = GridStyleRepository.a;
            }
            else {
                this.ex = this.ey;
            }
        }
        iz() {
            if (this.ji == null) {
                if (this.grid != null && this.grid.uw != null) {
                    this.je = this.grid.uw;
                    return;
                }
                this.je = GridStyleRepository.az;
            }
            else {
                this.je = this.ji;
            }
        }
        iy() {
            if (this.e2 == 0) {
                if (this.grid != null && this.grid.bm != 0) {
                    this.e1 = this.grid.bm;
                    return;
                }
                this.e1 = GridStyleRepository.b;
            }
            else {
                this.e1 = this.e2;
            }
        }
        ix() {
            if (this.grid != null) {
                this.f3 = this.grid.hn && this.f9;
            }
            else {
                this.f3 = false;
            }
        }
        iv(a, b, c, d) {
            if (this.columnCellsPropertyUpdating != null) {
                this.columnCellsPropertyUpdating(this, a, b, c, d);
            }
        }
        eu() {
            if (this.c == 0) {
                return 3;
            }
            return 2;
        }
        e4() {
            if (this.c == 0) {
                return 3;
            }
            return 2;
        }
        et() {
            return 2;
        }
        e3() {
            return 2;
        }
        h0() {
            return this.id != null && this.id != "" ? this.id : this.hy;
        }
        iu(a, b, c) {
            if (this.fl == null) {
                this.fl = new FastIterationDictionary$2(String_$type, Base.$, 0);
            }
            let d = null;
            if (this.fl.d(a)) {
                d = this.fl.item(a);
            }
            this.fl.item(a, c);
            let e = false;
            if (d == null && c != null) {
                e = true;
            }
            if (d != null) {
                if (!Base.equalsStatic(d, c)) {
                    e = true;
                }
            }
            if (e) {
                this.i3(this, a, b, d, c);
            }
        }
        f6() {
            if (this.fl == null) {
                return false;
            }
            return this.fl.r > 0;
        }
        get fm() {
            return this.fl;
        }
        f5(a) {
            if (this.fl == null) {
                return false;
            }
            return this.fl.d(a);
        }
        it(a) {
            if (this.fl == null) {
                return;
            }
            if (this.fl.d(a)) {
                this.fl.f(a);
            }
        }
        g5(a) {
            if (this.fl == null) {
                return null;
            }
            if (this.fl.d(a)) {
                return this.fl.item(a);
            }
            return null;
        }
    }
    Column.$t = /*@__PURE__*/ markType(Column, 'Column', DefinitionBase.$);
    Column.g1 = 0;
    return Column;
})();
/**
 * @hidden
 */
export let GridColumnCollection = /*@__PURE__*/ (() => {
    class GridColumnCollection extends ObservableCollection$1 {
        constructor() {
            super(Column.$, 0);
        }
    }
    GridColumnCollection.$t = /*@__PURE__*/ markType(GridColumnCollection, 'GridColumnCollection', /*@__PURE__*/ ObservableCollection$1.$.specialize(Column.$));
    return GridColumnCollection;
})();
/**
 * @hidden
 */
export let GridEffectGroup = /*@__PURE__*/ (() => {
    class GridEffectGroup extends Base {
        constructor(a, ..._rest) {
            super();
            this.c = null;
            this.f = 0;
            this.a = false;
            this.b = false;
            this.effectsFinished = null;
            this.effectsCanceled = null;
            a = (a == void 0) ? 0 : a;
            switch (a) {
                case 0:
                    {
                        let c = _rest[0];
                        this.a = c;
                        this.c = new List$1(GridEffect.$, 0);
                        this.b = false;
                    }
                    break;
                case 1:
                    {
                        let c = [true];
                        {
                            let e = c[0];
                            this.a = e;
                            this.c = new List$1(GridEffect.$, 0);
                            this.b = false;
                        }
                    }
                    break;
            }
        }
        k() {
            this.b = false;
            for (let a = 0; a < this.c.count; a++) {
                let b = this.c._inner[a];
                b.onFinished = delegateRemove(b.onFinished, runOn(this, this.i));
                let c = this.c._inner[a];
                c.onCanceled = delegateRemove(c.onCanceled, runOn(this, this.h));
            }
            this.f = 0;
            this.c.clear();
        }
        g(a) {
            this.c.add(a);
            a.onFinished = delegateCombine(a.onFinished, runOn(this, this.i));
            a.onCanceled = delegateCombine(a.onCanceled, runOn(this, this.h));
        }
        h(a, b) {
            this.b = true;
            this.f++;
            if (this.f == this.c.count) {
                this.j();
            }
        }
        i(a) {
            this.f++;
            if (this.f == this.c.count) {
                this.j();
            }
        }
        j() {
            if (this.b) {
                if (this.effectsCanceled != null) {
                    this.effectsCanceled(this, new EventArgs());
                }
            }
            else {
                if (this.effectsFinished != null) {
                    this.effectsFinished(this, new EventArgs());
                }
            }
            if (this.a) {
                this.k();
            }
        }
    }
    GridEffectGroup.$t = /*@__PURE__*/ markType(GridEffectGroup, 'GridEffectGroup');
    return GridEffectGroup;
})();
/**
 * @hidden
 */
export let HoverManager = /*@__PURE__*/ (() => {
    class HoverManager extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.b = false;
            this.d = -1;
            this.e = -1;
            this.a = a;
        }
        f(a) {
            this.d = a;
            if (!this.b) {
                this.a.delayedExecutionManager.executeIn(() => {
                    if (this.d != this.e) {
                        if (this.e > -1) {
                            this.a.ck.ao(this.a, this.e);
                        }
                        if (this.d > -1) {
                            this.a.ck.am(this.a, this.d);
                        }
                        this.e = this.d;
                    }
                    this.b = false;
                }, 0);
                this.b = true;
            }
        }
        c(a) {
            return this.e == a;
        }
    }
    HoverManager.$t = /*@__PURE__*/ markType(HoverManager, 'HoverManager');
    return HoverManager;
})();
/**
 * @hidden
 */
export let RecyclingManager = /*@__PURE__*/ (() => {
    class RecyclingManager extends Base {
        constructor() {
            super();
            this.b = null;
            this.b = new Dictionary$2(String_$type, Stack$1.$.specialize(CellModel.$), 0);
        }
        a(a) {
            if (!this.b.containsKey(a)) {
                this.b.addItem(a, new Stack$1(CellModel.$));
                return null;
            }
            let b = this.b.item(a);
            if (b.f > 0) {
                let c = b.e();
                if (c.t == 2) {
                    c.t = 1;
                }
                return c;
            }
            return null;
        }
        c(a) {
            a.t = 1;
            if (!this.b.containsKey(a.i0)) {
                this.b.addItem(a.i0, new Stack$1(CellModel.$));
            }
            this.b.item(a.i0).h(a);
        }
    }
    RecyclingManager.$t = /*@__PURE__*/ markType(RecyclingManager, 'RecyclingManager');
    return RecyclingManager;
})();
/**
 * @hidden
 */
export let ActivationManager = /*@__PURE__*/ (() => {
    class ActivationManager extends Base {
        constructor(a, b) {
            super();
            this.a = null;
            this.b = null;
            this.c = new FastIterationDictionary$2(Number_$type, Number_$type, 0);
            this.e = new FastIterationDictionary$2(Number_$type, Number_$type, 0);
            this.d = new FastIterationDictionary$2(Number_$type, String_$type, 0);
            this.f = new FastIterationDictionary$2(String_$type, Number_$type, 0);
            this.k = false;
            this.l = false;
            this.q = -1;
            this.s = -1;
            this.p = -1;
            this.a = a;
            this.b = b;
        }
        get g() {
            if (this.k) {
                this.z();
                this.k = false;
            }
            return this.c;
        }
        get i() {
            if (this.k) {
                this.z();
                this.k = false;
            }
            return this.e;
        }
        get h() {
            if (this.k) {
                this.z();
                this.k = false;
            }
            return this.d;
        }
        get j() {
            if (this.k) {
                this.z();
                this.k = false;
            }
            return this.f;
        }
        ai(a) {
            if (!a.k.ag) {
                return;
            }
            if (this.m(a)) {
                this.ac(a);
            }
            else {
                this.x(a);
            }
        }
        m(a) {
            let b = false;
            let c = this.a.d9.getDataRow(a.k);
            if (c == -1) {
                return false;
            }
            if (this.q < 0) {
                return false;
            }
            if (c != this.q) {
                return false;
            }
            if (typeCast(SectionHeaderCellModel.$, a) !== null) {
                return true;
            }
            if (this.i.d(a.k.az)) {
                let d = this.i.item(a.k.az);
                if (d >= 0) {
                    b = this.n(c, d);
                }
            }
            return b;
        }
        n(a, b) {
            return this.q == a && b == this.s;
        }
        o() {
            return this.a.ch == 1;
        }
        aa() {
            if (this.q >= 0 && this.s >= 0) {
                this.ab(this.q, this.s, true);
            }
        }
        ac(a) {
            let b = this.a.d9.getDataRow(a.k);
            if (b == -1) {
                return;
            }
            if (this.i.d(a.k.az)) {
                let c = this.i.item(a.k.az);
                if (this.n(b, c)) {
                    this.ab(b, c, true);
                }
            }
        }
        x(a) {
            this.w(a.k);
        }
        w(a) {
            if (!a.ag) {
                return;
            }
            if (!this.o()) {
                return;
            }
            if (this.q >= 0 && this.s != null) {
                this.ab(this.q, this.s, false);
            }
            let b = this.a.d9.getDataRow(a);
            if (b == -1) {
                return;
            }
            if (a.az == -400) {
                if (this.q != b) {
                    this.v(b, 0);
                }
            }
            if (this.i.d(a.az)) {
                let c = this.i.item(a.az);
                if (!this.n(b, c)) {
                    this.u(b, c);
                }
            }
        }
        y(a, b) {
            let c = this.s;
            if (b == null) {
                if (this.a.dy != 1) {
                    let d = this.a.d9.getRowType(a);
                    if (this.a.d9.isRowSpanning(d) && this.s == -1) {
                        c = this.i.item(0);
                    }
                }
            }
            else if (this.j.d(b)) {
                c = this.j.item(b);
            }
            if (c != -1) {
                if (this.q >= 0 && this.s >= 0) {
                    if (a != this.q || c != this.s) {
                        this.ab(this.q, this.s, false);
                        this.u(a, c);
                    }
                }
                else if (this.q == -1 && this.s == -1) {
                    this.u(a, c);
                }
            }
        }
        v(a, b) {
            if (!this.i.d(b)) {
                return;
            }
            let c = this.i.item(b);
            if (a != this.q || c != this.s) {
                this.q = a;
                this.s = c;
                this.p = b;
                if (a >= 0 && b >= 0) {
                    if (a >= 0 && a < this.a.d9.getRowCount()) {
                        if (this.a.dy != 1) {
                            let d = this.a.d9.getRowType(a);
                            if (this.a.d9.isRowSpanning(d)) {
                                b = -400;
                                c = -400;
                            }
                        }
                    }
                    this.b.z(this.a, a, b, c);
                }
                this.a.qq(a, this.t(c));
            }
        }
        u(a, b) {
            if (!this.g.d(b)) {
                return;
            }
            let c = this.g.item(b);
            if (a != this.q || b != this.s) {
                this.q = a;
                this.s = b;
                this.p = c;
                if (a >= 0 && c >= 0) {
                    if (a >= 0 && a < this.a.d9.getRowCount()) {
                        if (this.a.dy != 1) {
                            let d = this.a.d9.getRowType(a);
                            if (this.a.d9.isRowSpanning(d)) {
                                c = -400;
                                b = -400;
                            }
                        }
                    }
                    this.b.z(this.a, a, c, b);
                }
                this.a.qq(a, this.t(b));
            }
        }
        ab(a, b, c) {
            if (this.n(a, b)) {
                this.s = -1;
                this.q = -1;
                this.p = -1;
                if (a >= 0) {
                    if (this.g.d(b)) {
                        let d = this.g.item(b);
                        if (d >= 0) {
                            if (a >= 0 && a < this.a.d9.getRowCount()) {
                                if (this.a.dy != 1) {
                                    let e = this.a.d9.getRowType(a);
                                    if (this.a.d9.isRowSpanning(e)) {
                                        d = -400;
                                        b = -400;
                                    }
                                }
                            }
                            this.b.aa(this.a, a, d, b);
                        }
                    }
                }
                if (c) {
                    this.a.qs(a, this.t(b));
                }
            }
        }
        ae() {
            this.q = -1;
            this.s = -1;
            this.p = -1;
        }
        af(a) {
        }
        ag(a) {
        }
        t(a) {
            if (!this.h.d(a)) {
                return null;
            }
            return this.h.item(a);
        }
        ah(a) {
        }
        ad() {
            this.k = true;
        }
        z() {
            this.c.u();
            this.e.u();
            this.d.u();
            this.f.u();
            for (let a = 0; a < this.a.actualColumns.count; a++) {
                this.c.s(this.a.actualColumns._inner[a].g2, a);
                this.e.s(a, this.a.actualColumns._inner[a].g2);
                this.d.s(this.a.actualColumns._inner[a].g2, this.a.actualColumns._inner[a].h0());
                this.f.s(this.a.actualColumns._inner[a].h0(), this.a.actualColumns._inner[a].g2);
            }
        }
        r() {
            if (this.g.d(this.s)) {
                return this.g.item(this.s);
            }
            if (this.p != -1) {
                return this.p;
            }
            return 0;
        }
    }
    ActivationManager.$t = /*@__PURE__*/ markType(ActivationManager, 'ActivationManager');
    return ActivationManager;
})();
/**
 * @hidden
 */
export let SelectionManager = /*@__PURE__*/ (() => {
    class SelectionManager extends Base {
        constructor(a, b) {
            super();
            this.a = null;
            this.b = null;
            this.f = new FastIterationDictionary$2(PrimaryKeyValue.$, Number_$type, 0);
            this.e = new FastIterationDictionary$2(PrimaryKeyValue.$, FastIterationDictionary$2.$.specialize(Number_$type, Number_$type), 0);
            this.c = new FastIterationDictionary$2(Number_$type, Number_$type, 0);
            this.d = new FastIterationDictionary$2(Number_$type, Number_$type, 0);
            this.i = false;
            this.r = new List$1(CellRange.$, 0);
            this.q = new List$1(CellRange.$, 0);
            this.j = false;
            this.a = a;
            this.b = b;
        }
        get g() {
            if (this.i) {
                this.v();
                this.i = false;
            }
            return this.c;
        }
        get h() {
            if (this.i) {
                this.v();
                this.i = false;
            }
            return this.d;
        }
        an(a) {
            if (!a.k.ag) {
                return;
            }
            if (this.o(a)) {
                this.aq(a);
            }
            else {
                this.aj(a);
            }
        }
        am(a) {
            if (!a.k.ag) {
                return;
            }
            this.j = true;
            this.aj(a);
            this.j = false;
        }
        o(a) {
            let b = this.a.d9.getDataRow(a.k);
            if (b == -1) {
                return false;
            }
            if (this.a.d9.isPlaceholderItem(b)) {
                return false;
            }
            let c = this.a.d9.getRowKey(this.a.i(), b);
            if (c == null) {
                return false;
            }
            let d = this.f.d(c);
            if (d) {
                let e = this.f.item(c);
                if (e == -1) {
                    this.f.item(c, b);
                }
                let f = this.a.d9.resolveValueForRow(a.k);
                let g = this.a.ah.indexOf(c);
                if (g >= 0) {
                    if (this.a.ad.ae._inner[g] == null) {
                        this.a.r8(g, f, c);
                    }
                }
            }
            if (!d) {
                if (this.h.d(a.k.az)) {
                    let h = this.h.item(a.k.az);
                    if (h >= 0) {
                        d = this.k(c, h);
                        if (d && this.e.item(c).item(h) == -1) {
                            this.e.item(c).item(h, b);
                        }
                    }
                }
            }
            if (!d) {
                if (a.k.az >= 0) {
                    let i = this.a.model.br._inner[a.k.az];
                    for (let j = 0; j < this.q.count; j++) {
                        if (this.q._inner[j].b(a.k.w, i.n)) {
                            d = true;
                            break;
                        }
                    }
                }
            }
            if (!d) {
                if (this.a.d9.isRowPinned(b)) {
                    let k = typeCast(DataSourceSpecialRow.$, c.value[0]);
                    if (k != null) {
                        let l = this.a.d9.getItemKey(this.a.i(), k.targetRow);
                        d = this.f.d(l);
                        if (!d) {
                            if (this.h.d(a.k.az)) {
                                let m = this.h.item(a.k.az);
                                if (m >= 0) {
                                    d = this.k(l, m);
                                }
                            }
                        }
                    }
                }
            }
            return d;
        }
        m(a) {
            return this.f.d(a);
        }
        k(a, b) {
            return this.e.d(a) && this.e.item(a).d(b);
        }
        n() {
            return this.a.dt == 1 || this.a.dt == 2;
        }
        l() {
            return this.a.dt == 3 || this.a.dt == 4;
        }
        aq(a) {
            let b = this.a.d9.getDataRow(a.k);
            if (b == -1) {
                return;
            }
            if (this.a.d9.isPlaceholderItem(b)) {
                return;
            }
            let c = this.a.d9.getRowKey(this.a.i(), b);
            if (this.m(c)) {
                this.ar(c, b, false);
            }
            if (this.h.d(a.k.az)) {
                let d = this.h.item(a.k.az);
                if (this.k(c, d)) {
                    this.ao(c, b, d);
                }
            }
        }
        aj(a) {
            if (this.a.dt == 0) {
                return;
            }
            if (this.a.dt == 1 || this.j) {
                let b = this.f.o;
                let c = this.f.p;
                let d = new List$1(PrimaryKeyValue.$, 0);
                let e = new List$1(Number_$type, 0);
                for (let f = 0; f < b.count; f++) {
                    if (c._inner[f]) {
                        continue;
                    }
                    d.add(b._inner[f]);
                    e.add(this.f.q._inner[f]);
                }
                for (let g = 0; g < d.count; g++) {
                    this.ar(d._inner[g], e._inner[g], false);
                }
            }
            if (this.a.dt == 3 || this.j) {
                let h = this.e.o;
                let i = this.e.p;
                let j = new List$1(PrimaryKeyValue.$, 0);
                let k = new List$1(Number_$type, 0);
                let l = new List$1(Number_$type, 0);
                for (let m = 0; m < h.count; m++) {
                    if (i._inner[m]) {
                        continue;
                    }
                    let n = h._inner[m];
                    let o = this.e.item(n).o;
                    let p = this.e.item(n).q;
                    let q = this.e.item(n).p;
                    for (let r = 0; r < o.count; r++) {
                        if (q._inner[r]) {
                            continue;
                        }
                        let s = o._inner[r];
                        let t = p._inner[r];
                        if (this.h.d(a.k.az) && this.h.item(a.k.az) == s && a.k.w == t) {
                            continue;
                        }
                        j.add(n);
                        k.add(s);
                        l.add(t);
                    }
                }
                for (let u = 0; u < j.count; u++) {
                    this.ao(j._inner[u], l._inner[u], k._inner[u]);
                }
            }
            let v = this.a.d9.getDataRow(a.k);
            if (v == -1) {
                return;
            }
            if (this.a.d9.isPlaceholderItem(v)) {
                return;
            }
            let w = this.a.d9.getRowKey(this.a.i(), v);
            if (w == null) {
                return;
            }
            if (this.n()) {
                this.ak(w, v, false);
            }
            else if (this.l()) {
                this.ai(w, v, a.k.az);
            }
        }
        ak(a, b, c) {
            let d = true;
            let e = false;
            if (!c) {
                if (this.a.d9.getRowType(b) == 3) {
                    let f = typeCast(DataSourceSpecialRow.$, a.value[0]);
                    if (f.targetRow != null) {
                        let g = this.a.d9.getItemKey(this.a.i(), f.targetRow);
                        let h = this.a.d9.indexOfVisibleItemByKey(this.a.i(), g, this.a.ky(), this.a.k2());
                        this.al(g, h, f.targetRow, true);
                    }
                    e = true;
                    d = false;
                }
            }
            let i = null;
            if (!e) {
                i = this.a.d9.resolveValueForDataRow(b);
                if (this.a.ag.contains(a)) {
                    let j = this.s(a);
                    if (j >= 0) {
                        let k = this.a.d9.getRowKey(this.a.i(), j);
                        if (!this.m(k)) {
                            this.al(k, j, null, false);
                        }
                    }
                }
            }
            this.al(a, b, i, d);
        }
        al(a, b, c, d) {
            if (!this.f.d(a)) {
                this.f.s(a, b);
                if (b >= 0 && this.a.model.br.count > 0) {
                    this.b.an(this.a, b);
                }
            }
            if (d && c != null) {
                this.a.r5(c, a);
            }
        }
        as(a, b, c, d) {
            if (this.f.d(a)) {
                this.f.f(a);
                if (b >= 0) {
                    let e = this.a.d9.getRowKey(this.a.i(), b);
                    if (e != null && e.equals(a) && b >= 0) {
                        this.b.ap(this.a, b);
                    }
                }
            }
            if (d && c != null) {
                this.a.r6(c, a);
            }
        }
        ar(a, b, c) {
            let d = true;
            let e = false;
            if (!c) {
                if (this.a.d9.getRowType(b) == 3) {
                    let f = typeCast(DataSourceSpecialRow.$, a.value[0]);
                    if (f.targetRow != null) {
                        let g = this.a.d9.getItemKey(this.a.i(), f.targetRow);
                        let h = this.a.d9.indexOfVisibleItemByKey(this.a.i(), g, this.a.ky(), this.a.k2());
                        this.as(g, h, f.targetRow, true);
                    }
                    e = true;
                    d = false;
                }
            }
            let i = null;
            if (!e) {
                i = this.a.d9.resolveValueForDataRow(b);
                if (this.a.ag.contains(a)) {
                    let j = this.s(a);
                    if (j >= 0) {
                        let k = this.a.d9.getRowKey(this.a.i(), j);
                        if (this.m(k)) {
                            this.as(k, j, null, false);
                        }
                    }
                }
            }
            this.as(a, b, i, d);
        }
        ai(a, b, c) {
            if (!this.h.d(c)) {
                return;
            }
            let d = this.h.item(c);
            let e = true;
            if (this.a.d9.getRowType(b) == 3) {
                let f = typeCast(DataSourceSpecialRow.$, a.value[0]);
                if (f.targetRow != null) {
                    let g = this.a.d9.getItemKey(this.a.i(), f.targetRow);
                    let h = this.a.d9.indexOfVisibleItemByKey(this.a.i(), g, this.a.ky(), this.a.k2());
                    this.ag(g, d, c, h, true);
                }
                e = false;
            }
            else {
                if (this.a.ag.contains(a)) {
                    let i = this.s(a);
                    if (i >= 0) {
                        let j = this.a.d9.getRowKey(this.a.i(), i);
                        if (!this.k(j, d)) {
                            this.ag(j, d, c, i, false);
                        }
                    }
                }
            }
            this.ag(a, d, c, b, e);
        }
        ah(a, b, c) {
            if (!this.g.d(c)) {
                return;
            }
            let d = this.g.item(c);
            if (!this.e.d(a)) {
                let e = new FastIterationDictionary$2(Number_$type, Number_$type, 0);
                e.s(c, b);
                this.e.s(a, e);
                if (b >= 0 && d >= 0) {
                    this.b.ad(this.a, b, d, c);
                }
                this.a.q4(a, c);
            }
            else {
                if (!this.e.item(a).d(c)) {
                    this.e.item(a).s(c, b);
                    if (b >= 0) {
                        this.b.ad(this.a, b, d, c);
                    }
                    this.a.q4(a, c);
                }
            }
        }
        ag(a, b, c, d, e) {
            if (!this.e.d(a)) {
                if (b >= 0) {
                    let f = new FastIterationDictionary$2(Number_$type, Number_$type, 0);
                    f.s(b, d);
                    this.e.s(a, f);
                    if (d >= 0) {
                        this.b.ad(this.a, d, c, b);
                    }
                    if (e) {
                        this.a.q4(a, b);
                    }
                }
            }
            else {
                if (!this.e.item(a).d(b)) {
                    this.e.item(a).s(b, d);
                    if (d >= 0) {
                        this.b.ad(this.a, d, c, b);
                    }
                    if (e) {
                        this.a.q4(a, b);
                    }
                }
            }
        }
        ap(a, b, c, d) {
            if (this.k(a, c)) {
                this.e.item(a).f(c);
                if (this.e.item(a).r == 0) {
                    this.e.f(a);
                }
                if (b >= 0) {
                    let e = this.a.d9.getRowKey(this.a.i(), b);
                    if (e != null && e.equals(a) && b >= 0) {
                        if (this.g.d(c)) {
                            let f = this.g.item(c);
                            if (f >= 0) {
                                this.b.ae(this.a, b, f, c);
                            }
                        }
                    }
                }
                if (d) {
                    this.a.q5(a, c);
                }
            }
        }
        ao(a, b, c) {
            let d = true;
            if (this.a.d9.getRowType(b) == 3) {
                let e = typeCast(DataSourceSpecialRow.$, a.value[0]);
                if (e.targetRow != null) {
                    let f = this.a.d9.getItemKey(this.a.i(), e.targetRow);
                    let g = this.a.d9.indexOfVisibleItemByKey(this.a.i(), f, this.a.ky(), this.a.k2());
                    this.ap(f, g, c, true);
                }
                d = false;
            }
            else {
                if (this.a.ag.contains(a)) {
                    let h = this.s(a);
                    if (h >= 0) {
                        let i = this.a.d9.getRowKey(this.a.i(), h);
                        if (this.k(i, c)) {
                            this.ap(i, h, c, false);
                        }
                    }
                }
            }
            this.ap(a, b, c, d);
        }
        s(a) {
            let b = -1;
            let c = this.a.d9.getStickyRows();
            if (c != null) {
                for (let d = 0; d < c.length; d++) {
                    let e = typeCast(DataSourceSpecialRow.$, this.a.actualDataSource.getItemAtIndex(c[d]));
                    if (e != null && e.rowType == 3) {
                        let f = this.a.d9.getItemKey(this.a.i(), e.targetRow);
                        if (f != null && f.equals(a)) {
                            b = c[d];
                            break;
                        }
                    }
                }
            }
            return b;
        }
        av() {
            let a = this.p();
            let b = new Dictionary$2(PrimaryKeyValue.$, Number_$type, 0);
            for (let c = 0; c < a.count; c++) {
                let d = a.item(c);
                let e = -1;
                if (this.f.d(d)) {
                    e = this.f.item(d);
                }
                if (e == -1) {
                    e = this.a.d9.indexOfVisibleItemByKey(this.a.i(), d, this.a.ky(), this.a.k2());
                }
                if (this.a.ag.contains(d)) {
                    let f = this.s(d);
                    if (f >= 0) {
                        let g = this.a.d9.getRowKey(this.a.i(), f);
                        if (!b.containsKey(g)) {
                            b.addItem(g, f);
                        }
                        if (!this.m(g)) {
                            this.ak(g, f, true);
                        }
                    }
                }
                if (!b.containsKey(d)) {
                    b.addItem(d, e);
                }
                if (!this.m(d)) {
                    this.ak(d, e, true);
                }
            }
            let h = this.f.o;
            let i = this.f.p;
            let j = new List$1(PrimaryKeyValue.$, 0);
            let k = new List$1(Number_$type, 0);
            for (let l = 0; l < h.count; l++) {
                if (i._inner[l]) {
                    continue;
                }
                let m = h._inner[l];
                if (!b.containsKey(m)) {
                    j.add(m);
                    k.add(this.f.q._inner[l]);
                }
            }
            for (let n = 0; n < k.count; n++) {
                this.ar(j._inner[n], k._inner[n], false);
            }
            for (let o = 0; o < this.a.ad.ae.count; o++) {
                let p = this.a.d9.getItemKey(this.a.i(), this.a.ad.ae._inner[o]);
                if (p != null && !b.containsKey(p)) {
                    let q = -1;
                    if (this.f.d(p)) {
                        q = this.f.item(p);
                    }
                    if (q == -1) {
                        q = this.a.d9.fastGetItemIndexForKey(this.a.i(), p, this.a.ky(), this.a.k2());
                    }
                    this.ar(p, q, false);
                }
            }
        }
        au() {
            let a = this.a.dm.am;
            let b = new Dictionary$2(PrimaryKeyValue.$, IList$1_$type.specialize(Number_$type), 0);
            for (let c = 0; c < a.count; c++) {
                let d = a.item(c).primaryKey;
                if (d == null) {
                    continue;
                }
                if (a.item(c).b == null) {
                    continue;
                }
                let e = a.item(c).b.g2;
                let f = -1;
                if (this.k(d, e)) {
                    f = this.e.item(d).item(e);
                }
                if (f == -1) {
                    let g = this.a.ky();
                    let h = this.a.k2();
                    if (g != -1 && h != -1) {
                        f = this.a.d9.indexOfVisibleItemByKey(this.a.i(), d, g, h);
                    }
                }
                if (this.a.ag.contains(d)) {
                    let i = this.s(d);
                    if (i >= 0) {
                        let j = this.a.d9.getRowKey(this.a.i(), i);
                        if (!b.containsKey(j)) {
                            b.addItem(j, ((() => {
                                let $ret = new List$1(Number_$type, 0);
                                $ret.add(e);
                                return $ret;
                            })()));
                        }
                        else if (!b.item(j).contains(e)) {
                            b.item(j).add(e);
                        }
                        if (!this.k(j, e)) {
                            this.ah(j, i, e);
                        }
                    }
                }
                if (!b.containsKey(d)) {
                    b.addItem(d, ((() => {
                        let $ret = new List$1(Number_$type, 0);
                        $ret.add(e);
                        return $ret;
                    })()));
                }
                else if (!b.item(d).contains(e)) {
                    b.item(d).add(e);
                }
                if (!this.k(d, e)) {
                    this.ah(d, f, e);
                }
            }
            let k = this.e.o;
            let l = this.e.p;
            let m = new List$1(PrimaryKeyValue.$, 0);
            let n = new List$1(Number_$type, 0);
            let o = new List$1(Number_$type, 0);
            for (let p = 0; p < k.count; p++) {
                if (l._inner[p]) {
                    continue;
                }
                let q = k._inner[p];
                for (let r = 0; r < this.e.item(q).o.count; r++) {
                    if (this.e.item(q).p._inner[r]) {
                        continue;
                    }
                    let s = this.e.item(q).o._inner[r];
                    let t = this.e.item(q).q._inner[r];
                    if (!b.containsKey(q) || !b.item(q).contains(s)) {
                        m.add(q);
                        n.add(s);
                        o.add(t);
                    }
                }
            }
            for (let u = 0; u < m.count; u++) {
                this.ao(m._inner[u], o._inner[u], n._inner[u]);
            }
        }
        at() {
            let a = this.a.dj.ae;
            this.r.clear();
            this.r = this.q;
            this.q = new List$1(CellRange.$, 0);
            for (let b = 0; b < a.count; b++) {
                this.q.add(a.item(b).a());
            }
            let c = this.a.d9.getStickyRows();
            if (c != null) {
                for (let d = 0; d < c.length; d++) {
                    let e = this.a.d9.getRowType(c[d]);
                    if (e == 3) {
                        for (let f = 0; f < this.a.model.bx.count; f++) {
                            let g = this.a.model.bx._inner[f];
                            let h = this.a.model.br._inner[g].n;
                            this.u(c[d], h);
                        }
                    }
                }
            }
            let i = this.a.ky();
            let j = this.a.k2();
            for (let k = i; k <= j; k++) {
                for (let l = 0; l < this.a.model.bx.count; l++) {
                    let m = this.a.model.bx._inner[l];
                    let n = this.a.model.br._inner[m].n;
                    this.u(k, n);
                }
            }
        }
        u(a, b) {
            let c = false;
            let d = false;
            for (let e = 0; e < this.r.count; e++) {
                let f = this.r._inner[e];
                if (f.b(a, b)) {
                    c = true;
                }
            }
            for (let g = 0; g < this.q.count; g++) {
                let h = this.q._inner[g];
                if (h.b(a, b)) {
                    d = true;
                }
            }
            if (c && !d) {
                let i = this.a.e6.j(b, this.a.model);
                this.a.ck.ac(this.a, a, i);
            }
            else if (!c && d) {
                let j = this.a.e6.j(b, this.a.model);
                this.a.ck.ab(this.a, a, j);
            }
        }
        p() {
            return this.a.ah.ae;
        }
        z() {
            this.y();
            this.x();
        }
        ad(a) {
            for (let b = 0; b < this.f.o.count; b++) {
                if (this.f.p._inner[b]) {
                    continue;
                }
                let c = this.f.o._inner[b];
                let d = this.f.q._inner[b];
                if (d >= a) {
                    this.f.item(c, d + 1);
                }
            }
            for (let e = 0; e < this.e.o.count; e++) {
                if (this.e.p._inner[e]) {
                    continue;
                }
                let f = this.e.o._inner[e];
                let g = this.e.q._inner[e];
                for (let h = 0; h < g.o.count; h++) {
                    if (this.e.item(f).p._inner[h]) {
                        continue;
                    }
                    let i = g.o._inner[h];
                    let j = this.e.item(f).item(i);
                    if (j >= a) {
                        this.e.item(f).item(i, j + 1);
                    }
                }
            }
        }
        ae(a) {
            let b = new List$1(PrimaryKeyValue.$, 0);
            let c = new List$1(Number_$type, 0);
            for (let d = 0; d < this.f.o.count; d++) {
                if (this.f.p._inner[d]) {
                    continue;
                }
                let e = this.f.o._inner[d];
                let f = this.f.q._inner[d];
                if (f == a) {
                    b.add(e);
                    c.add(f);
                }
                if (f > a) {
                    this.f.item(e, f - 1);
                }
            }
            for (let g = 0; g < b.count; g++) {
                this.ar(b._inner[g], c._inner[g], true);
            }
            for (let h = 0; h < this.e.o.count; h++) {
                if (this.e.p._inner[h]) {
                    continue;
                }
                let i = this.e.o._inner[h];
                let j = this.e.q._inner[h];
                for (let k = 0; k < j.o.count; k++) {
                    if (this.e.item(i).p._inner[k]) {
                        continue;
                    }
                    let l = j.o._inner[k];
                    let m = this.e.item(i).item(l);
                    if (m == a) {
                        this.e.item(i).item(l, -1);
                    }
                    if (m > a) {
                        this.e.item(i).item(l, m - 1);
                    }
                }
            }
        }
        ac(a, b) {
            let c = this.a.ky();
            let d = this.a.k2();
            let e = new List$1(Number_$type, 0);
            for (let f = 0; f < this.q.count; f++) {
                let g = this.q._inner[f];
                if (g.l > d || g.j < c) {
                    continue;
                }
                if (a < g.k) {
                    this.t(e, g.k - 1);
                }
                if (a <= g.i) {
                    this.t(e, g.i);
                }
            }
            for (let h = 0; h < e.count; h++) {
                if (e._inner[h] >= 0 && e._inner[h] <= this.a.actualColumns.count) {
                    this.a.ck.af(this.a, c, d, e._inner[h], true);
                }
            }
        }
        aa(a, b) {
            let c = this.a.ky();
            let d = this.a.k2();
            let e = new List$1(Number_$type, 0);
            for (let f = 0; f < this.q.count; f++) {
                let g = this.q._inner[f];
                if (g.l > d || g.j < c) {
                    continue;
                }
                if (a < g.k) {
                    this.t(e, g.k);
                }
                if (a <= g.i) {
                    this.t(e, g.i + 1);
                }
            }
            for (let h = 0; h < e.count; h++) {
                if (e._inner[h] >= 0 && e._inner[h] <= this.a.actualColumns.count) {
                    this.a.ck.af(this.a, c, d, e._inner[h], true);
                }
            }
        }
        ab(a, b, c) {
            let d = this.a.ky();
            let e = this.a.k2();
            let f = new List$1(Number_$type, 0);
            for (let g = 0; g < this.q.count; g++) {
                let h = this.q._inner[g];
                if (h.l > e || h.j < d) {
                    continue;
                }
                if (h.c(a) && !h.c(b)) {
                    this.t(f, b);
                    if (b > h.i) {
                        this.t(f, h.i);
                    }
                    else if (b < h.k) {
                        this.t(f, h.k);
                    }
                }
                else if (!h.c(a) && h.c(b)) {
                    this.t(f, b);
                    if (a > h.i) {
                        this.t(f, h.i + 1);
                    }
                    else if (a < h.k) {
                        this.t(f, h.k - 1);
                    }
                }
                else if (!h.c(a) && !h.c(b)) {
                    if (a < h.k && b > h.i) {
                        this.t(f, h.k - 1);
                        this.t(f, h.i);
                    }
                    if (a > h.i && b < h.k) {
                        this.t(f, h.k);
                        this.t(f, h.i + 1);
                    }
                }
            }
            for (let i = 0; i < f.count; i++) {
                this.a.ck.af(this.a, d, e, f._inner[i], true);
            }
        }
        t(a, b) {
            if (b < 0 || b >= this.a.actualColumns.count) {
                return;
            }
            if (!a.contains(b)) {
                a.add(b);
            }
        }
        af(a) {
            let b = new List$1(PrimaryKeyValue.$, 0);
            let c = new List$1(Number_$type, 0);
            for (let d = 0; d < this.f.o.count; d++) {
                if (this.f.p._inner[d]) {
                    continue;
                }
                let e = this.f.o._inner[d];
                let f = this.f.q._inner[d];
                if (f == a) {
                    b.add(e);
                    c.add(f);
                }
            }
            for (let g = 0; g < b.count; g++) {
                this.ar(b._inner[g], c._inner[g], true);
            }
        }
        w() {
            this.i = true;
        }
        v() {
            this.c.u();
            this.d.u();
            for (let a = 0; a < this.a.actualColumns.count; a++) {
                this.c.s(this.a.actualColumns._inner[a].g2, a);
                this.d.s(a, this.a.actualColumns._inner[a].g2);
            }
        }
        y() {
            let a = new List$1(Number_$type, 0);
            let b = new HashSet$1(Number_$type, 0);
            for (let c = 0; c < this.f.o.count; c++) {
                if (this.f.p._inner[c]) {
                    continue;
                }
                let d = this.f.o._inner[c];
                a.add(this.f.item(d));
                let e = this.a.d9.indexOfVisibleItemByKey(this.a.i(), d, this.a.ky(), this.a.k2());
                b.add_1(e);
                this.f.item(d, -1);
            }
            for (let f = 0; f < a.count; f++) {
                if (!b.contains(a._inner[f])) {
                    this.a.ck.ap(this.a, a._inner[f]);
                }
            }
        }
        x() {
            let a = new FastIterationDictionary$2(PrimaryKeyValue.$, Number_$type, 0);
            let b = new FastIterationDictionary$2(PrimaryKeyValue.$, Number_$type, 0);
            let c = new List$1(Number_$type, 0);
            for (let d = 0; d < this.e.q.count; d++) {
                let e = this.e.o._inner[d];
                let f = this.a.d9.indexOfVisibleItemByKey(this.a.i(), e, this.a.ky(), this.a.k2());
                let g = this.e.q._inner[d];
                for (let h = 0; h < g.q.count; h++) {
                    let i = g.o._inner[h];
                    if (!a.d(e)) {
                        a.s(e, this.e.item(e).item(i));
                        b.s(e, f);
                    }
                    c.add(i);
                    this.e.item(e).item(i, -1);
                }
            }
            for (let j = 0; j < a.q.count; j++) {
                let k = a.o._inner[j];
                let l = a.q._inner[j];
                let m = b.q._inner[j];
                if (l > -1 && l < this.a.d9.getRowCount()) {
                    let n = this.a.actualDataSource.getItemAtIndex(l);
                    let o = typeCast(DataSourceSpecialRow.$, n);
                    if (o != null && o.rowType == 3) {
                        let p = this.a.d9.getItemKey(this.a.i(), o.targetRow);
                        if (p.equals(k)) {
                            continue;
                        }
                    }
                }
                if (!b.q.contains(l)) {
                    this.a.ck.ae(this.a, l, this.c.item(c._inner[j]), c._inner[j]);
                }
            }
        }
    }
    SelectionManager.$t = /*@__PURE__*/ markType(SelectionManager, 'SelectionManager');
    return SelectionManager;
})();
/**
 * @hidden
 */
export let SortManager = /*@__PURE__*/ (() => {
    class SortManager extends Base {
        constructor(a) {
            super();
            this.c = null;
            this.e = false;
            this.c = a;
        }
        d(a) {
            if (null == a) {
                return false;
            }
            let b = a.hy;
            let c = this.c.b4;
            let d = this.a(b, c);
            let e = null == d ? 0 : d.c == 0 ? 1 : 2;
            let f = (this.c.d0 == 3 || this.c.d0 == 2);
            let g = this.b(e, f);
            this.f(a, g);
            return true;
        }
        f(a, b) {
            if (null == a) {
                return false;
            }
            let c = a.hy;
            let d = this.c.b4;
            let e = this.a(c, d);
            return this.g(c, b, e);
        }
        g(a, b, c) {
            if (this.e) {
                return false;
            }
            this.e = true;
            try {
                let d = this.c.b4;
                let e = d.j(c);
                let f = (this.c.d0 == 1 || this.c.d0 == 3);
                if (null != c) {
                    d.h(c);
                }
                if (false == f) {
                    d.m();
                }
                switch (b) {
                    case 0: break;
                    case 2:
                    case 1:
                        {
                            let g = b == 1 ? 0 : 1;
                            let h = new ColumnSortDescription(2, a, g);
                            if (f && e >= 0) {
                                d.i.insert(e, h);
                            }
                            else {
                                d.g(h);
                            }
                        }
                        break;
                }
                return true;
            }
            finally {
                this.e = false;
            }
        }
        h() {
            let a = this.c.b4;
            let b = a.i.count;
            if (b > 1) {
                for (let c = b - 1; c > 0; c--) {
                    a.i.removeAt(c);
                }
            }
        }
        a(a, b) {
            if (null == b || b.i.count < 1) {
                return null;
            }
            for (let c = 0; c < b.i.count; c++) {
                let d = b.i.item(c);
                if (d.f == a) {
                    return d;
                }
            }
            return null;
        }
        b(a, b) {
            if (b) {
                switch (a) {
                    case 0: return 1;
                    case 1: return 2;
                    case 2: return 0;
                }
            }
            else {
                switch (a) {
                    case 0:
                    case 2: return 1;
                    default: return 2;
                }
            }
            return 0;
        }
    }
    SortManager.$t = /*@__PURE__*/ markType(SortManager, 'SortManager');
    return SortManager;
})();
/**
 * @hidden
 */
export let IDataAdapter_$type = /*@__PURE__*/ new Type(null, 'IDataAdapter');
/**
 * @hidden
 */
export let DataAdapter = /*@__PURE__*/ (() => {
    class DataAdapter extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.h = new Dictionary$2(Base.$, Number_$type, 0);
            this.i = new List$1(PrimaryKeyValue.$, 0);
            this.g = null;
            this.b = null;
            this.d = null;
            this.propertyChanged = null;
            this.j = 0;
            this.k = 0;
            this.g = a;
        }
        get c() {
            return this.b;
        }
        set c(a) {
            let b = this.b;
            this.b = a;
            if (this.b != b) {
                this.n("DataSource", b, this.b);
            }
        }
        get e() {
            return this.d;
        }
        set e(a) {
            let b = this.d;
            this.d = a;
            if (this.d != b) {
                this.n("EditableDataSource", b, this.d);
            }
        }
        setDataSource(a) {
            this.c = a;
            this.e = typeCast(IEditableDataSource_$type, this.c);
        }
        getItemForKey(a) {
            let b = this.indexOfKey(a);
            if (b == -1) {
                if (a.value != null && a.value.length == 1) {
                    return a.value[0];
                }
                return null;
            }
            return this.c.getItemAtIndex(b);
        }
        getItemKey(a, item_) {
            let b = (item_ != null && item_.$$isSpecialRow !== undefined);
            if (a == null) {
                if (item_ == null) {
                    return null;
                }
                return PrimaryKeyValue.createIdentityKey(item_);
            }
            if (b) {
                let c = item_;
                if (this.c.isSectionContentVisible || !this.c.isSectionHeaderNormalRow || c.rowType != 1) {
                    return PrimaryKeyValue.createIdentityKey(item_);
                }
                else if (c.rowType == 1) {
                    let d = c.getSectionKeys();
                    for (let e = 0; e < d.length; e++) {
                        for (let f = 0; f < a.length; f++) {
                            if (a[f] != d[e]) {
                                return PrimaryKeyValue.createIdentityKey(item_);
                            }
                        }
                    }
                }
            }
            let g = new Array(a.length);
            for (let h = 0; h < a.length; h++) {
                g[h] = this.c.getItemProperty(item_, a[h]);
            }
            return new PrimaryKeyValue(a, g);
        }
        getRowKey(a, b) {
            if (this.c == null) {
                return null;
            }
            if (b < 0 || b > this.c.actualCount - 1) {
                return null;
            }
            let c = this.c.getItemAtIndex(b);
            if (c == null) {
                return null;
            }
            return this.getItemKey(a, c);
        }
        n(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            this.o(a, b, c);
        }
        o(a, b, c) {
            switch (a) {
                case "DataSource":
                    this.a = null;
                    this.h.clear();
                    if (this.c != null) {
                        if (this.a == null) {
                            this.a = new Array(1);
                            this.a[0] = new DefaultSectionInformation(0, this.b.actualCount, null, null, null);
                        }
                        for (let d = 0; d < this.a.length; d++) {
                            if (this.a[d].groupKeyValues != null) {
                                this.h.addItem(this.a[d].groupKeyValues, d);
                            }
                        }
                        for (let e = 0; e < this.i.count; e++) {
                            this.b.pinRow(this.i._inner[e].value);
                        }
                        this.i.clear();
                    }
                    break;
            }
        }
        getRowCount() {
            return this.l(0);
        }
        m(a, b) {
            if (this.b == null) {
                return -1;
            }
            if (this.b.actualPrimaryKey != null && this.b.isKeyIndexLookupSupported) {
                return this.indexOfKey(a);
            }
            if (this.b.isItemIndexLookupSupported) {
                return this.b.indexOfItem(b);
            }
            return -1;
        }
        indexOfKey(a) {
            if (this.b == null) {
                return -1;
            }
            if (this.b.actualPrimaryKey != null && this.b.isKeyIndexLookupSupported) {
                return this.b.indexOfKey(a.value);
            }
            return -1;
        }
        fastGetItemIndexForKey(a, b, c, d) {
            let e = this.indexOfVisibleItemByKey(a, b, c, d);
            if (e >= 0) {
                return e;
            }
            return this.indexOfKey(b);
        }
        indexOfVisibleItemByKey(a, b, c, d) {
            if (this.b == null) {
                return -1;
            }
            for (let e = c; e <= d; e++) {
                if (e > this.b.actualCount - 1) {
                    break;
                }
                let f = this.b.getItemAtIndex(e);
                if (f == null) {
                    continue;
                }
                let g = this.getItemKey(a, f);
                if (g == null) {
                    continue;
                }
                if (g.value != null && g.value.length == 1 && g.value[0] != null && getInstanceType(g.value[0]) == DataSourceSpecialRow.$ && b.value != null && b.value.length == 1 && b.value[0] != null && getInstanceType(b.value[0]) == DataSourceSpecialRow.$) {
                    let h = typeCast(DataSourceSpecialRow.$, g.value[0]);
                    let i = typeCast(DataSourceSpecialRow.$, b.value[0]);
                    if (h.rowType == i.rowType && h.targetRow == i.targetRow) {
                        return e;
                    }
                }
                if (g.equals(b)) {
                    return e;
                }
            }
            return -1;
        }
        l(a) {
            if (this.b == null) {
                return 0;
            }
            return this.b.actualCount;
        }
        getSectionCount() {
            if (this.a == null) {
                return 0;
            }
            return this.a.length;
        }
        f(a) {
            return a;
        }
        getDataRow(a) {
            if (a == null) {
                return -1;
            }
            a = this.f(a);
            if (this.a == null || this.a.length < 1) {
                if (this.b.actualCount > a.w) {
                    return a.w;
                }
            }
            else {
                let b = this.a[a.x].startIndex;
                let c = b + a.w;
                if (c < 0 || c >= this.b.actualCount) {
                    return -1;
                }
                return c;
            }
            return -1;
        }
        resolveValue(a, b) {
            if (a < 0 || a > this.b.actualCount - 1) {
                return null;
            }
            if (b != null && b.length == 1 && b.charAt(0) == '.') {
                return this.b.getItemAtIndex(a);
            }
            return this.b.getItemPropertyAtIndex(a, b);
        }
        resolveValueForPath(a, b) {
            let c = null;
            if (b.az == -400) {
                let d = this.b.getRowType(b.w);
                let e = this.b.getMainValuePath(d);
                c = e;
            }
            else {
                let f = a.a0(b);
                c = f.hy;
            }
            return this.resolveValue(b.w, c);
        }
        resolveRow(a) {
            if (a < 0 || a > this.b.actualCount - 1) {
                return null;
            }
            return this.b.getItemAtIndex(a);
        }
        resolveValueForDataRow(a) {
            if (a < 0 || a > this.b.actualCount - 1) {
                return null;
            }
            return this.b.getItemAtIndex(a);
        }
        resolveValueForRow(a) {
            a = this.f(a);
            if (a == null) {
                return null;
            }
            let b = this.getDataRow(a);
            if (b < 0 || b > this.b.actualCount - 1) {
                return null;
            }
            return this.b.getItemAtIndex(b);
        }
        getSectionForRow(a) {
            if (this.a == null || this.a.length < 2) {
                return 0;
            }
            for (let b = 0; b < this.a.length; b++) {
                if (b < this.a.length - 1) {
                    if (a > this.a[b + 1].startIndex) {
                        continue;
                    }
                }
                return b;
            }
            return this.a.length - 1;
        }
        getRowPathForRow(a) {
            let b = this.getSectionForRow(a);
            return new RowPath(b, a - this.a[b].startIndex);
        }
        get firstVisibleIndexRequested() {
            return this.j = 0;
        }
        set firstVisibleIndexRequested(a) {
            this.j = a;
            if (this.b != null) {
                this.b.firstVisibleIndexRequested = this.j;
            }
        }
        get lastVisibleIndexRequested() {
            return this.k = 0;
        }
        set lastVisibleIndexRequested(a) {
            this.k = a;
            if (this.b != null) {
                this.b.lastVisibleIndexRequested = this.k;
            }
        }
        isPlaceholderValue(a) {
            if (this.b == null) {
                return false;
            }
            let b = this.getDataRow(a);
            if (b < 0 || b > this.b.actualCount - 1) {
                return false;
            }
            return this.b.isPlaceholderItem(b);
        }
        isPlaceholderItem(a) {
            if (this.b == null) {
                return false;
            }
            return this.b.isPlaceholderItem(a);
        }
        getRowType(a) {
            if (this.b == null) {
                return 0;
            }
            return this.b.getRowType(a);
        }
        getStickyRows() {
            if (this.b == null) {
                return null;
            }
            return this.b.getStickyRows();
        }
        getStickyRowsInRange(a, b) {
            if (this.b == null) {
                return null;
            }
            return this.b.getStickyRowsInRange(a, b);
        }
        getStickRowPriority(a) {
            if (this.b == null) {
                return -1;
            }
            return this.b.getStickyRowPriority(a);
        }
        isExclusivelySticky(a) {
            if (this.b == null) {
                return false;
            }
            return this.b.isExclusivelySticky(a);
        }
        isRowSpanning(a) {
            if (this.b == null) {
                return false;
            }
            return this.b.isRowSpanning(a);
        }
        pinRow(a) {
            if (this.b == null) {
                this.i.add(a);
                return;
            }
            this.b.pinRow(a.value);
        }
        unpinRow(a) {
            if (this.b == null) {
                for (let b = 0; b < this.i.count; b++) {
                    if (this.i._inner[b].equals(a)) {
                        this.i.remove(this.i._inner[b]);
                        break;
                    }
                }
                return;
            }
            this.b.unpinRow(a.value);
        }
        clearPinnedRows() {
            if (this.b == null) {
                return;
            }
            this.b.clearPinnedRows();
        }
        isRowPinned(a) {
            if (this.b == null) {
                return false;
            }
            return this.b.isRowPinned(a);
        }
        getRowIndent(a) {
            if (this.b == null) {
                return 0;
            }
            return this.b.getRowLevel(a);
        }
        getRootSummaryRowCount() {
            if (this.b == null) {
                return 0;
            }
            return this.b.getRootSummaryRowCount();
        }
        isEditedValue(a, b) {
            if (this.e == null || a == null) {
                return false;
            }
            let c = this.getItemKey(this.b.actualPrimaryKey, a);
            return this.e.hasEdit(c.value, b) || this.e.hasAdd(c.value);
        }
        isDeletedRow(a) {
            if (this.e == null || a == null) {
                return false;
            }
            let b = this.getItemKey(this.b.actualPrimaryKey, a);
            return this.e.hasDelete(b.value);
        }
        getPendingEditID(a, b) {
            if (this.e == null || a == null) {
                return -1;
            }
            let c = this.getItemKey(this.b.actualPrimaryKey, a);
            return this.e.getTransactionID(c.value, b);
        }
        getError(a) {
            if (this.e == null || a == -1) {
                return null;
            }
            return this.e.getTransactionErrorByID(a);
        }
    }
    DataAdapter.$t = /*@__PURE__*/ markType(DataAdapter, 'DataAdapter', Base.$, [INotifyPropertyChanged_$type, IDataAdapter_$type]);
    return DataAdapter;
})();
/**
 * @hidden
 */
export let ColumnMovingSeparator = /*@__PURE__*/ (() => {
    class ColumnMovingSeparator extends DefinitionBase {
        constructor() {
            super(...arguments);
            this.el = truncate(DeviceUtils.g(2));
        }
        cm(a, b, c) {
            return "columnMovingSeparator";
        }
        l(a) {
            return new VerticalSeparatorCellModel();
        }
        eb() {
            return GridStyleRepository.ay;
        }
        get em() {
            return this.el;
        }
        set em(a) {
            let b = this.el;
            this.el = a;
            if (this.el != b) {
                this.c2("SeparatorWidth", 6, b, this.el);
            }
        }
        cz(a, b) {
            this.c8();
        }
        c8() {
            if (this.d7 == null) {
                if (this.grid != null && this.grid.uv != null) {
                    this.d0 = this.grid.uv;
                    return;
                }
                this.d0 = this.eb();
            }
            else {
                this.d0 = this.d7;
            }
        }
        c1(a, b) {
            switch (b.propertyName) {
                case "ColumnMovingSeparatorBackground":
                    this.c8();
                    break;
            }
        }
    }
    ColumnMovingSeparator.$t = /*@__PURE__*/ markType(ColumnMovingSeparator, 'ColumnMovingSeparator', DefinitionBase.$);
    return ColumnMovingSeparator;
})();
/**
 * @hidden
 */
export let ComboBoxColumn = /*@__PURE__*/ (() => {
    class ComboBoxColumn extends Column {
        constructor() {
            super();
            this.jp = null;
            this.fc = 1;
        }
        get jq() {
            return this.jp;
        }
        set jq(a) {
            let b = this.jp;
            this.jp = a;
            if (this.jp != b) {
                this.c2("ActualDataSource", 10, b, this.jp);
            }
        }
        get jr() {
            return this.g4;
        }
        set jr(a) {
            this.g4 = a;
        }
        get jv() {
            return this.hu;
        }
        set jv(a) {
            this.hu = a;
        }
        get jo() {
            return this.em;
        }
        set jo(a) {
            this.em = a;
        }
        l(a) {
            return new TextCellModel();
        }
        cm(a, b, c) {
            return "combobox";
        }
        cz(a, b) {
            super.cz(a, b);
            if (this.jq == null && this.jr != null) {
                if (b != null) {
                    this.jq = b.externalGrid.createLocalDataSource(this.jr);
                }
            }
        }
        cy(a, b, c, d) {
            super.cy(a, b, c, d);
            let e = a;
            e.ks = this.ju(c);
        }
        cw(a, b, c, d) {
            super.cw(a, b, c, d);
        }
        c3(a, b, c, d) {
            super.c3(a, b, c, d);
            switch (a) {
                case "EditorItemsSourceInternal":
                    if (typeCast(IDataSource_$type, this.jr) !== null) {
                        this.jq = this.jr;
                    }
                    else if (this.grid != null) {
                        this.jq = this.grid.externalGrid.createLocalDataSource(this.jr);
                    }
                    break;
                case "ActualDataSource":
                    if (c != null) {
                        let e = c;
                        e.schemaChanged = delegateRemove(e.schemaChanged, runOn(this, this.jw));
                    }
                    if (this.jq != null) {
                        let f = this.jq;
                        f.schemaChanged = delegateCombine(f.schemaChanged, runOn(this, this.jw));
                    }
                    this.jx();
                    break;
                case "EditorTextFieldInternal":
                case "EditorValueFieldInternal":
                    this.jx();
                    break;
            }
        }
        jw(a, b) {
            this.jx();
        }
        jx() {
            if (this.jq != null) {
                if (this.jo != null) {
                    this.jq.primaryKey = this.jo;
                }
                else if (this.jv != null) {
                    this.jq.primaryKey = [this.jv];
                }
                else {
                    let a = this.jq.actualSchema;
                    if (a != null && a.propertyNames.length > 0) {
                        this.jq.primaryKey = [a.propertyNames[0]];
                    }
                }
            }
        }
        jt(a) {
            if (typeof a === 'string') {
                return a;
            }
            return null;
        }
        ju(a) {
            let b = null;
            if (this.jq != null && this.jv != null) {
                let c = this.jq.indexOfKey([a]);
                if (c > -1) {
                    let d = this.jq.getItemPropertyAtIndex(c, this.jv);
                    if (d != null) {
                        b = this.jt(d);
                    }
                }
            }
            if (b == null && a != null) {
                b = this.jt(a);
            }
            return b;
        }
    }
    ComboBoxColumn.$t = /*@__PURE__*/ markType(ComboBoxColumn, 'ComboBoxColumn', Column.$);
    return ComboBoxColumn;
})();
/**
 * @hidden
 */
export let DateTimeColumn = /*@__PURE__*/ (() => {
    class DateTimeColumn extends Column {
        constructor() {
            super();
            this.jr = new DateTimeColumnValueFormatter();
            this.js = 0;
            this.jz = null;
            this.jo = null;
            this.jw = null;
        }
        get jt() {
            return this.js;
        }
        set jt(a) {
            let b = this.js;
            this.js = a;
            if (this.js != b) {
                this.c2("DateTimeFormat", 4, enumGetBox(DateTimeFormats_$type, b), enumGetBox(DateTimeFormats_$type, this.js));
            }
        }
        get j4() {
            return this.jz;
        }
        set j4(a) {
            let b = this.jz;
            this.jz = a;
            if (this.jz != b) {
                this.c2("FormatString", 8, b, this.jz);
            }
        }
        get jq() {
            return this.jo;
        }
        set jq(a) {
            let b = this.jo;
            this.jo = a;
            if (this.jo != b) {
                this.c2("FormatSpecifiers", 9, b, this.jo);
            }
        }
        get jy() {
            return this.jw;
        }
        set jy(a) {
            let b = this.jw;
            this.jw = a;
            if (this.jw != b) {
                this.c2("FormatOverride", 9, b, this.jw);
            }
        }
        get ju() {
            return this.fc;
        }
        set ju(a) {
            this.fc = a;
        }
        get jx() {
            return this.g4;
        }
        set jx(a) {
            this.g4 = a;
        }
        get j1() {
            return this.hu;
        }
        set j1(a) {
            this.hu = a;
        }
        get jp() {
            return this.em;
        }
        set jp(a) {
            this.em = a;
        }
        c3(a, b, c, d) {
            super.c3(a, b, c, d);
            switch (a) {
                case "DateTimeFormat":
                    this.jr.k();
                    break;
            }
        }
        l(a) {
            return new DateTimeCellModel();
        }
        cm(a, b, c) {
            return "datetime";
        }
        cy(a, b, c, d) {
            super.cy(a, b, c, d);
            let e = a;
            e.k0 = this.jv(c);
            e.ku = this.jr;
            this.jr.j(e);
        }
        cw(a, b, c, d) {
            super.cw(a, b, c, d);
            let e = a;
            e.kw = this.jt;
            e.lh = this.j4;
            e.kr = this.jq;
            e.la = this.jy;
        }
        jv(a) {
            if (a == null) {
                return dateMinValue();
            }
            if (typeCast(Date_$type, a) !== null) {
                return a;
            }
            return dateMinValue();
        }
    }
    DateTimeColumn.$t = /*@__PURE__*/ markType(DateTimeColumn, 'DateTimeColumn', Column.$);
    return DateTimeColumn;
})();
/**
 * @hidden
 */
export let IExternalDefinitionBase_$type = /*@__PURE__*/ new Type(null, 'IExternalDefinitionBase');
/**
 * @hidden
 */
export let DataBindingEventArgs = /*@__PURE__*/ (() => {
    class DataBindingEventArgs extends EventArgs {
        constructor() {
            super(...arguments);
            this._resolvedValue = null;
            this._rowObject = null;
            this._cellInfo = null;
        }
        get resolvedValue() {
            return this._resolvedValue;
        }
        set resolvedValue(a) {
            this._resolvedValue = a;
        }
        get rowObject() {
            return this._rowObject;
        }
        set rowObject(a) {
            this._rowObject = a;
        }
        get cellInfo() {
            return this._cellInfo;
        }
        set cellInfo(a) {
            this._cellInfo = a;
        }
    }
    DataBindingEventArgs.$t = /*@__PURE__*/ markType(DataBindingEventArgs, 'DataBindingEventArgs', EventArgs.$);
    return DataBindingEventArgs;
})();
/**
 * @hidden
 */
export let Header = /*@__PURE__*/ (() => {
    class Header extends DefinitionBase {
        constructor() {
            super();
            this.e8 = null;
            this.e7 = null;
            this.em = 3;
            this.el = 3;
            this.eq = truncate(DeviceUtils.g(12));
            this.es = truncate(DeviceUtils.g(0));
            this.er = truncate(DeviceUtils.g(12));
            this.ep = truncate(DeviceUtils.g(0));
            this.e9 = this.fa();
        }
        eg() {
            return GridStyleRepository.bj;
        }
        eb() {
            return GridStyleRepository.bh;
        }
        fa() {
            return GridStyleRepository.bl;
        }
        af() {
            return GridStyleRepository.h;
        }
        cz(a, b) {
            this.c8();
            this.df();
            this.dg();
            this.e5();
            this.e6();
        }
        c8() {
            if (this.d7 == null) {
                if (this.grid != null && this.grid.u0 != null) {
                    this.d0 = this.grid.u0;
                    return;
                }
                this.d0 = this.eb();
            }
            else {
                this.d0 = this.d7;
            }
        }
        df() {
            if (this.ek == null) {
                if (this.grid != null && this.grid.u4 != null) {
                    this.d6 = this.grid.u4;
                    return;
                }
                this.d6 = this.eg();
            }
            else {
                this.d6 = this.ek;
            }
        }
        dg() {
            if (this.textStyle == null) {
                if (this.grid != null && this.grid.fr != null) {
                    this.ad = this.grid.fr;
                    return;
                }
                this.ad = this.af();
            }
            else {
                this.ad = this.textStyle;
            }
        }
        e5() {
            if (this.fb == null) {
                if (this.grid != null && this.grid.u3 != null) {
                    this.e9 = this.grid.u3;
                    return;
                }
                this.e9 = this.fa();
            }
            else {
                this.e9 = this.fb;
            }
        }
        e6() {
            if (this.eo == 3) {
                if (this.grid != null) {
                    this.en = this.grid.e2;
                    return;
                }
                this.en = 0;
            }
            else {
                this.en = this.eo;
            }
        }
        c1(a, b) {
            switch (b.propertyName) {
                case "HeaderBackground":
                    this.c8();
                    break;
                case "HeaderTextColor":
                    this.df();
                    break;
                case "HeaderTextStyle":
                    this.dg();
                    break;
                case "HeaderSortIndicatorColor":
                    this.e5();
                    break;
                case "HeaderSortIndicatorStyle":
                    this.e6();
                    break;
            }
        }
        get fb() {
            return this.e8;
        }
        set fb(a) {
            let b = this.e8;
            this.e8 = a;
            if (this.e8 != b) {
                this.c2("SortIndicatorColor", 10, b, this.e8);
            }
        }
        get e9() {
            return this.e7;
        }
        set e9(a) {
            let b = this.e7;
            this.e7 = a;
            if (this.e7 != b) {
                this.c2("ActualSortIndicatorColor", 2, b, this.e7);
            }
        }
        get eo() {
            return this.em;
        }
        set eo(a) {
            let b = this.em;
            this.em = a;
            if (this.em != b) {
                this.c2("SortIndicatorStyle", 11, enumGetBox(SortIndicatorStyle_$type, b), enumGetBox(SortIndicatorStyle_$type, this.em));
            }
        }
        get en() {
            return this.el;
        }
        set en(a) {
            let b = this.el;
            this.el = a;
            if (this.el != b) {
                this.c2("ActualSortIndicatorStyle", 11, enumGetBox(SortIndicatorStyle_$type, b), enumGetBox(SortIndicatorStyle_$type, this.el));
            }
        }
        get eu() {
            return this.eq;
        }
        set eu(a) {
            let b = this.eq;
            this.eq = a;
            if (this.eq != b) {
                this.c2("PaddingLeft", 6, b, this.eq);
            }
        }
        get ew() {
            return this.es;
        }
        set ew(a) {
            let b = this.es;
            this.es = a;
            if (this.es != b) {
                this.c2("PaddingTop", 6, b, this.es);
            }
        }
        get ev() {
            return this.er;
        }
        set ev(a) {
            let b = this.er;
            this.er = a;
            if (this.er != b) {
                this.c2("PaddingRight", 6, b, this.er);
            }
        }
        get et() {
            return this.ep;
        }
        set et(a) {
            let b = this.ep;
            this.ep = a;
            if (this.ep != b) {
                this.c2("PaddingBottom", 6, b, this.ep);
            }
        }
        ak(a) {
            if (super.ak(a)) {
                return true;
            }
            if (stringStartsWith(a, "Actual")) {
                return false;
            }
            switch (a) {
                case "PaddingBottom":
                    this.c2("PaddingBottom", 0, this.et, this.et);
                    return true;
                case "PaddingLeft":
                    this.c2("PaddingLeft", 0, this.eu, this.eu);
                    return true;
                case "PaddingRight":
                    this.c2("PaddingRight", 0, this.ev, this.ev);
                    return true;
                case "PaddingTop":
                    this.c2("PaddingTop", 0, this.ew, this.ew);
                    return true;
                case "SortIndicatorColor":
                    this.c2("ActualSortIndicatorColor", 2, this.e9, this.e9);
                    return true;
            }
            return false;
        }
        cw(a, b, c, d) {
            super.cw(a, b, c, d);
            a.fo = this.eu;
            a.fs = this.ew;
            a.fq = this.ev;
            a.fm = this.et;
            a.kn = this.e9;
        }
        cy(a, b, c, d) {
            super.cy(a, b, c, d);
            let e = b.a0(a.k);
            if (e != null) {
                if (a.k.g && e.f6()) {
                    let f = e.fm;
                    let g = f.o;
                    let h = g.count;
                    let i = f.p;
                    let j = f.q;
                    for (let k = 0; k < h; k++) {
                        if (i._inner[k]) {
                            continue;
                        }
                        a.jt(g._inner[k], j._inner[k]);
                    }
                }
            }
        }
    }
    Header.$t = /*@__PURE__*/ markType(Header, 'Header', DefinitionBase.$);
    return Header;
})();
/**
 * @hidden
 */
export let ColumnResizingSeparator = /*@__PURE__*/ (() => {
    class ColumnResizingSeparator extends DefinitionBase {
        cm(a, b, c) {
            return "columnResizingSeparator";
        }
        l(a) {
            return new VerticalSeparatorCellModel();
        }
        eb() {
            return GridStyleRepository.a5;
        }
        cz(a, b) {
            this.c8();
        }
        c8() {
            if (this.d7 == null) {
                if (this.grid != null && this.grid.ux != null) {
                    this.d0 = this.grid.ux;
                    return;
                }
                this.d0 = this.eb();
            }
            else {
                this.d0 = this.d7;
            }
        }
        el(a, b) {
            switch (b.propertyName) {
                case "ColumnResizingSeparatorBackground":
                    this.c8();
                    break;
            }
        }
    }
    ColumnResizingSeparator.$t = /*@__PURE__*/ markType(ColumnResizingSeparator, 'ColumnResizingSeparator', DefinitionBase.$);
    return ColumnResizingSeparator;
})();
/**
 * @hidden
 */
export let HeaderSeparator = /*@__PURE__*/ (() => {
    class HeaderSeparator extends DefinitionBase {
        cm(a, b, c) {
            return "headerSeparator";
        }
        l(a) {
            return new VerticalSeparatorCellModel();
        }
        eb() {
            return GridStyleRepository.bi;
        }
        el() {
            return truncate(DeviceUtils.g(1));
        }
        cz(a, b) {
            this.c8();
            this.em();
        }
        c1(a, b) {
            switch (b.propertyName) {
                case "HeaderSeparatorBackground":
                    this.c8();
                    break;
            }
        }
        c8() {
            if (this.d7 == null) {
                if (this.grid != null && this.grid.u2 != null) {
                    this.d0 = this.grid.u2;
                    return;
                }
                this.d0 = this.eb();
            }
            else {
                this.d0 = this.d7;
            }
        }
        em() {
            if (this.grid != null) {
                this.d1 = ((() => {
                    let $ret = new Brush();
                    $ret.color = Color.u(0, 0, 0, 0);
                    return $ret;
                })());
                let a = this.grid.km(this.grid.la);
                this.be = a;
                this.bf = a;
            }
        }
        cw(a, b, c, d) {
            super.cw(a, b, c, d);
        }
    }
    HeaderSeparator.$t = /*@__PURE__*/ markType(HeaderSeparator, 'HeaderSeparator', DefinitionBase.$);
    return HeaderSeparator;
})();
/**
 * @hidden
 */
export let ImageColumn = /*@__PURE__*/ (() => {
    class ImageColumn extends Column {
        constructor() {
            super();
            this.js = 0;
            this.jq = 0;
            this.jt = 0;
            this.h = this.i();
            this.c = this.d();
        }
        get jt() {
            return this.js;
        }
        set jt(a) {
            let b = this.js;
            this.js = a;
            if (this.js != b) {
                this.c2("ImageStretchOption", 4, enumGetBox(ImageStretchOptions_$type, b), enumGetBox(ImageStretchOptions_$type, this.js));
            }
        }
        get jr() {
            return this.jq;
        }
        set jr(a) {
            let b = this.jq;
            this.jq = a;
            if (this.jq != b) {
                this.c2("ImageResourceType", 11, enumGetBox(ImageResourceType_$type, b), enumGetBox(ImageResourceType_$type, this.jq));
            }
        }
        get jp() {
            return this.fc;
        }
        set jp(a) {
            this.fc = a;
        }
        get ju() {
            return this.g4;
        }
        set ju(a) {
            this.g4 = a;
        }
        get jv() {
            return this.hu;
        }
        set jv(a) {
            this.hu = a;
        }
        get jo() {
            return this.em;
        }
        set jo(a) {
            this.em = a;
        }
        i() {
            if (this.j != 4) {
                return this.j;
            }
            return 3;
        }
        ep() {
            if (this.c == 3) {
                return 1;
            }
            return super.ep();
        }
        eq() {
            if (this.h == 3) {
                return 1;
            }
            return super.eq();
        }
        d() {
            if (this.e != 4) {
                return this.e;
            }
            return 3;
        }
        l(a) {
            return new ImageCellModel();
        }
        cm(a, b, c) {
            return "image";
        }
        cy(a, b, c, d) {
            super.cy(a, b, c, d);
            let e = a;
            if (c != null) {
                e.ip = c.toString();
                e.kt = this.jt;
                e.kr = this.jr;
                e.ky = this.jw(c);
            }
        }
        cw(a, b, c, d) {
            super.cw(a, b, c, d);
        }
        jw(a) {
            if (a == null) {
                return "";
            }
            if (typeof a === 'string') {
                return a;
            }
            return a.toString();
        }
    }
    ImageColumn.$t = /*@__PURE__*/ markType(ImageColumn, 'ImageColumn', Column.$);
    return ImageColumn;
})();
/**
 * @hidden
 */
export let NumericColumn = /*@__PURE__*/ (() => {
    class NumericColumn extends Column {
        constructor() {
            super();
            this.j5 = null;
            this.j7 = null;
            this.j6 = null;
            this.j8 = "";
            this.jv = 10;
            this.jw = 0;
            this.jx = -1;
            this.js = false;
            this.j4 = null;
            this.jo = null;
            this.j1 = null;
            this.c = this.d();
        }
        d() {
            if (this.e != 4) {
                return this.e;
            }
            return 2;
        }
        get kh() {
            return this.j5;
        }
        set kh(a) {
            let b = this.j5;
            this.j5 = a;
            if (this.j5 != b) {
                this.c2("NegativePrefix", 8, b, this.j5);
            }
        }
        get kl() {
            return this.j7;
        }
        set kl(a) {
            let b = this.j7;
            this.j7 = a;
            if (this.j7 != b) {
                this.c2("PositivePrefix", 8, b, this.j7);
            }
        }
        get kj() {
            return this.j6;
        }
        set kj(a) {
            let b = this.j6;
            this.j6 = a;
            if (this.j6 != b) {
                this.c2("NegativeSuffix", 8, b, this.j6);
            }
        }
        get kn() {
            return this.j8;
        }
        set kn(a) {
            let b = this.j8;
            this.j8 = a;
            if (this.j8 != b) {
                this.c2("PositiveSuffix", 8, b, this.j8);
            }
        }
        get jy() {
            return this.jv;
        }
        set jy(a) {
            let b = this.jv;
            this.jv = a;
            if (this.jv != b) {
                this.c2("MaxFractionDigits", 6, b, this.jv);
            }
        }
        get jz() {
            return this.jw;
        }
        set jz(a) {
            let b = this.jw;
            this.jw = a;
            if (this.jw != b) {
                this.c2("MinFractionDigits", 6, b, this.jw);
            }
        }
        get j0() {
            return this.jx;
        }
        set j0(a) {
            let b = this.jx;
            this.jx = a;
            if (this.jx != b) {
                this.c2("MinIntegerDigits", 6, b, this.jx);
            }
        }
        get jt() {
            return this.js;
        }
        set jt(a) {
            let b = this.js;
            this.js = a;
            if (this.js != b) {
                this.c2("ShowGroupingSeparator", 5, b, this.js);
            }
        }
        get kc() {
            return this.j4;
        }
        set kc(a) {
            let b = this.j4;
            this.j4 = a;
            if (this.j4 != b) {
                this.c2("FormatString", 8, b, this.j4);
            }
        }
        get jq() {
            return this.jo;
        }
        set jq(a) {
            let b = this.jo;
            this.jo = a;
            if (this.jo != b) {
                this.c2("FormatSpecifiers", 9, b, this.jo);
            }
        }
        get j3() {
            return this.j1;
        }
        set j3(a) {
            let b = this.j1;
            this.j1 = a;
            if (this.j1 != b) {
                this.c2("FormatOverride", 9, b, this.j1);
            }
        }
        get jr() {
            return this.fc;
        }
        set jr(a) {
            this.fc = a;
        }
        get j2() {
            return this.g4;
        }
        set j2(a) {
            this.g4 = a;
        }
        get j9() {
            return this.hu;
        }
        set j9(a) {
            this.hu = a;
        }
        get jp() {
            return this.em;
        }
        set jp(a) {
            this.em = a;
        }
        l(a) {
            return new NumericCellModel();
        }
        cm(a, b, c) {
            return "numeric";
        }
        cy(a, b, c, d) {
            super.cy(a, b, c, d);
            let e = a;
            {
                e.kv = false;
                e.kz = this.ju(c);
            }
        }
        cw(a, b, c, d) {
            super.cw(a, b, c, d);
            let e = a;
            e.k9 = this.jz;
            e.k7 = this.jy;
            e.lb = this.j0;
            e.l4 = this.kl;
            e.lz = this.kh;
            e.l6 = this.kn;
            e.l1 = this.kj;
            e.lt = this.kc;
            e.kr = this.jq;
            e.ll = this.j3;
            e.kx = this.jt;
        }
        ju(a) {
            if (a == null) {
                return NaN;
            }
            if (typeof a === 'number') {
                return typeGetValue(a);
            }
            if (typeof a === 'number') {
                return a;
            }
            if (typeof a === 'number') {
                return a;
            }
            if (typeof a === 'number') {
                return typeGetValue(a);
            }
            if (typeof a === 'string') {
                let b;
                if (((() => { let c = tryParseNumber(a, b); b = c.p1; return c.ret; })())) {
                    return b;
                }
            }
            if (typeof a === 'number') {
                return typeGetValue(a);
            }
            if (typeof a === 'number') {
                return typeGetValue(a);
            }
            if (typeof a === 'number') {
                return typeGetValue(a);
            }
            if (typeof a === 'number') {
                return typeGetValue(a);
            }
            if (typeof a === 'number') {
                return typeGetValue(a);
            }
            return NaN;
        }
    }
    NumericColumn.$t = /*@__PURE__*/ markType(NumericColumn, 'NumericColumn', Column.$);
    return NumericColumn;
})();
/**
 * @hidden
 */
export let PinnedAreaSeparator = /*@__PURE__*/ (() => {
    class PinnedAreaSeparator extends DefinitionBase {
        cm(a, b, c) {
            return "pinnedAreaSeparator";
        }
        l(a) {
            return ((() => {
                let $ret = new VerticalSeparatorCellModel();
                $ret.kr = false;
                return $ret;
            })());
        }
        eb() {
            return GridStyleRepository.a3;
        }
        cz(a, b) {
            this.c8();
        }
        c8() {
            if (this.d7 == null) {
                this.d0 = this.eb();
            }
            else {
                this.d0 = this.d7;
            }
        }
        c1(a, b) {
        }
    }
    PinnedAreaSeparator.$t = /*@__PURE__*/ markType(PinnedAreaSeparator, 'PinnedAreaSeparator', DefinitionBase.$);
    return PinnedAreaSeparator;
})();
/**
 * @hidden
 */
export let SectionFooter = /*@__PURE__*/ (() => {
    class SectionFooter extends DefinitionBase {
        l(a) {
            return new TextCellModel();
        }
        cm(a, b, c) {
            return "sectionFooter";
        }
        cy(a, b, c, d) {
            super.cy(a, b, c, d);
        }
        cw(a, b, c, d) {
            this.d0 = GridStyleRepository.a7;
            super.cw(a, b, c, d);
        }
    }
    SectionFooter.$t = /*@__PURE__*/ markType(SectionFooter, 'SectionFooter', DefinitionBase.$);
    return SectionFooter;
})();
/**
 * @hidden
 */
export let SectionHeader = /*@__PURE__*/ (() => {
    class SectionHeader extends DefinitionBase {
        constructor() {
            super();
            this.fc = null;
            this.fb = null;
            this.et = truncate(DeviceUtils.g(12));
            this.ev = truncate(DeviceUtils.g(1));
            this.eu = truncate(DeviceUtils.g(1));
            this.es = truncate(DeviceUtils.g(1));
            this.ep = false;
            this.em = 4;
            this.sectionHeaderPropertyUpdating = null;
            this.er = new Dictionary$2(String_$type, ComboBoxColumn.$, 0);
            this.fd = this.ee();
        }
        get fe() {
            return this.fc;
        }
        set fe(a) {
            let b = this.fc;
            this.fc = a;
            if (this.fc != b) {
                this.c2("SelectedBackground", 10, b, this.fc);
            }
        }
        get fd() {
            return this.fb;
        }
        set fd(a) {
            let b = this.fb;
            this.fb = a;
            if (this.fb != b) {
                this.c2("ActualSelectedBackground", 2, b, this.fb);
            }
        }
        get ex() {
            return this.et;
        }
        set ex(a) {
            let b = this.et;
            this.et = a;
            if (this.et != b) {
                this.c2("PaddingLeft", 6, b, this.et);
            }
        }
        get ez() {
            return this.ev;
        }
        set ez(a) {
            let b = this.ev;
            this.ev = a;
            if (this.ev != b) {
                this.c2("PaddingTop", 6, b, this.ev);
            }
        }
        get ey() {
            return this.eu;
        }
        set ey(a) {
            let b = this.eu;
            this.eu = a;
            if (this.eu != b) {
                this.c2("PaddingRight", 6, b, this.eu);
            }
        }
        get ew() {
            return this.es;
        }
        set ew(a) {
            let b = this.es;
            this.es = a;
            if (this.es != b) {
                this.c2("PaddingBottom", 6, b, this.es);
            }
        }
        get eq() {
            return this.ep;
        }
        set eq(a) {
            let b = this.ep;
            this.ep = a;
            if (this.ep != b) {
                this.c2("IsCollapsable", 5, b, this.ep);
            }
        }
        get en() {
            return this.em;
        }
        set en(a) {
            let b = this.em;
            this.em = a;
            if (this.em != b) {
                this.c2("SummaryDisplayMode", 4, enumGetBox(GroupSummaryDisplayMode_$type, b), enumGetBox(GroupSummaryDisplayMode_$type, this.em));
            }
        }
        cm(a, b, c) {
            return "sectionHeader";
        }
        l(a) {
            return new SectionHeaderCellModel();
        }
        eb() {
            return GridStyleRepository.a8;
        }
        cy(a, b, c, d) {
            super.cy(a, b, c, d);
            let e = new List$1(GroupData.$, 0);
            let f = new List$1(SummaryData.$, 0);
            let g = stringEmpty();
            let h = stringEmpty();
            let i = typeCast(FastIterationDictionary$2.$.specialize(String_$type, Base.$), c);
            if (i != null) {
                let j = b.actualDataSource.actualSchema;
                let k = 0;
                for (let l = 0; l < i.o.count; l++) {
                    let m = i.o._inner[l];
                    let n = i.q._inner[l];
                    let o = null;
                    for (let p = 0; p < b.a7.i.count; p++) {
                        if (b.a7.i.item(p).f == m) {
                            o = b.a7.i.item(p);
                            break;
                        }
                    }
                    if (!o.o) {
                        b.sv(o);
                    }
                    if (k > 0) {
                        g += ", ";
                    }
                    e.add(this.el(m, n, o, o.m));
                    g += e._inner[k].b;
                    k++;
                }
                if (this.en == 0 && b.b7.i.count > 0) {
                    let q = typeCast(DataSourceSpecialRow.$, d);
                    if (q != null && q.summaryResults != null) {
                        for (let r = 0; r < q.summaryResults.length; r++) {
                            if (q.summaryResults[r] != null) {
                                let s = q.summaryResults[r].summaryIndex;
                                let t = b.b7.i.item(s);
                                if (r > 0) {
                                    h += ", ";
                                }
                                f.add(this.u(t, q.summaryResults[r]));
                                h += f._inner[r].c;
                            }
                        }
                    }
                }
            }
            let u = typeCast(SectionHeaderCellModel.$, a);
            if (u != null) {
                u.ks = e.toArray();
                u.kt = f.toArray();
                u.k6 = g;
                u.k4 = h;
                u.kv = this.en;
                if (b.e0.o(u)) {
                    u.b8 = 1;
                }
                else {
                    u.b8 = 0;
                }
                if (b.aj.m(u)) {
                    u.by = 1;
                }
                else {
                    u.by = 0;
                }
                u.ar = this.eq;
                u.az = b.actualDataSource.getIsRowExpandedAtIndex(a.k.w);
                u.e5 = b.d9.getRowIndent(a.k.w);
            }
        }
        cw(a, b, c, d) {
            super.cw(a, b, c, d);
            a.km = this.fd;
            a.fo = this.ex;
            a.fs = this.ez;
            a.fq = this.ey;
            a.fm = this.ew;
        }
        cz(a, b) {
            this.fa();
            this.c8();
            this.df();
            this.dg();
            this.e9();
            if (a != null) {
                a.actualColumnsChanged = delegateRemove(a.actualColumnsChanged, runOn(this, this.e8));
            }
            if (b != null) {
                b.actualColumnsChanged = delegateCombine(b.actualColumnsChanged, runOn(this, this.e8));
            }
        }
        e8(a, b) {
            this.er.clear();
            for (let c = 0; c < b.columns.count; c++) {
                let d = typeCast(ComboBoxColumn.$, b.columns._inner[c]);
                if (d != null && !this.er.containsKey(d.hy)) {
                    this.er.addItem(d.hy, d);
                }
            }
        }
        c1(a, b) {
            switch (b.propertyName) {
                case "SectionHeaderSelectedBackground":
                    this.fa();
                    break;
                case "SectionHeaderBackground":
                    this.c8();
                    break;
                case "SectionHeaderTextColor":
                    this.df();
                    break;
                case "SectionHeaderTextStyle":
                    this.dg();
                    break;
                case "IsGroupCollapsable":
                    this.e9();
                    break;
            }
        }
        fa() {
            if (this.fe == null) {
                if (this.grid != null && this.grid.vd != null) {
                    this.fd = this.grid.vd;
                }
                else {
                    this.fd = this.ee();
                }
            }
            else {
                this.fd = this.fe;
            }
        }
        c8() {
            if (this.d7 == null) {
                if (this.grid != null && this.grid.vc != null) {
                    this.d0 = this.grid.vc;
                    return;
                }
                this.d0 = this.eb();
            }
            else {
                this.d0 = this.d7;
            }
        }
        df() {
            if (this.ek == null) {
                if (this.grid != null && this.grid.ve != null) {
                    this.d6 = this.grid.ve;
                    return;
                }
                this.d6 = this.eg();
            }
            else {
                this.d6 = this.ek;
            }
        }
        dg() {
            if (this.textStyle == null) {
                if (this.grid != null && this.grid.fs != null) {
                    this.ad = this.grid.fs;
                    return;
                }
                this.ad = this.af();
            }
            else {
                this.ad = this.textStyle;
            }
        }
        e9() {
            if (this.grid != null) {
                this.eq = this.grid.hs;
            }
        }
        c3(a, b, c, d) {
            super.c3(a, b, c, d);
            switch (a) {
                case "SelectedBackground":
                    this.fa();
                    break;
            }
            if (this.sectionHeaderPropertyUpdating != null) {
                this.sectionHeaderPropertyUpdating(this, a, b, c, d);
            }
        }
        el(a, b, c, d) {
            let e = b != null ? b.toString() : stringEmpty();
            let f = a + ": " + e;
            let g = stringEmpty();
            if (c != null) {
                if (c.v == null) {
                    g = a + ": ";
                }
                else if (c.v != stringEmpty()) {
                    g = c.v + ": ";
                }
                if (b != null) {
                    switch (d) {
                        case 10:
                            if (c.q != null) {
                                let override_ = c.q;
                                let val_ = typeGetValue(b);
                                e = (override_.format(val_));
                            }
                            else {
                                e = (typeGetValue(b)).toString();
                            }
                            break;
                        case 8:
                            if (c.q != null) {
                                let override_ = c.q;
                                let val_ = b;
                                e = (override_.format(val_));
                            }
                            else {
                                e = b.toString();
                            }
                            break;
                        case 5:
                            if (c.q != null) {
                                let override_ = c.q;
                                let val_ = b;
                                e = (override_.format(val_));
                            }
                            else {
                                e = b.toString();
                            }
                            break;
                        case 1:
                            if (c.q != null) {
                                let override_ = c.q;
                                let val_ = typeGetValue(b);
                                e = (override_.format(val_));
                            }
                            else {
                                e = (typeGetValue(b)).toString();
                            }
                            break;
                        case 3:
                            if (c.q != null) {
                                let override_ = c.q;
                                let val_ = typeGetValue(b);
                                e = (override_.format(val_));
                            }
                            else {
                                e = typeGetValue(b).toString();
                            }
                            break;
                        case 4:
                            if (c.q != null) {
                                let override_ = c.q;
                                let val_ = typeGetValue(b);
                                e = (override_.format(val_));
                            }
                            else {
                                e = typeGetValue(b).toString();
                            }
                            break;
                        case 7:
                            if (c.q != null) {
                                let override_ = c.q;
                                let val_ = b;
                                e = (override_.format(val_));
                            }
                            else {
                                e = b.toString();
                            }
                            break;
                        case 0:
                        case 6:
                        case 2:
                        case 11:
                            e = b.toString();
                            break;
                    }
                    if (this.er.containsKey(c.f)) {
                        let h = this.er.item(c.f);
                        let i = h.ju(b);
                        if (i != null) {
                            e = i;
                        }
                    }
                }
                if (c.l != null) {
                    e = c.l.i(b);
                }
                f = g + e;
                if (c.k != null) {
                    f = c.k.i(b);
                }
                f = c.w(b, e, f);
            }
            return ((() => {
                let $ret = new GroupData();
                $ret.c = a;
                $ret.a = b;
                $ret.b = f;
                return $ret;
            })());
        }
    }
    SectionHeader.$t = /*@__PURE__*/ markType(SectionHeader, 'SectionHeader', DefinitionBase.$);
    return SectionHeader;
})();
/**
 * @hidden
 */
export let RowSeparator = /*@__PURE__*/ (() => {
    class RowSeparator extends DefinitionBase {
        cm(a, b, c) {
            return "rowSeparator";
        }
        cz(a, b) {
            this.c8();
        }
        c8() {
            if (this.d7 == null) {
                if (this.grid != null && this.grid.u8 != null) {
                    this.d0 = this.grid.u8;
                    return;
                }
                this.d0 = this.eb();
            }
            else {
                this.d0 = this.d7;
            }
        }
        dc() {
            if (this.ei == null) {
                if (this.grid != null && this.grid.va != null) {
                    this.d4 = this.grid.va;
                    return;
                }
                this.d4 = this.ed();
            }
            else {
                this.d4 = this.ei;
            }
        }
        de() {
            if (this.ej == null) {
                if (this.grid != null && this.grid.vb != null) {
                    this.d5 = this.grid.vb;
                    return;
                }
                this.d5 = this.ef();
            }
            else {
                this.d5 = this.ej;
            }
        }
        db() {
            if (this.eh == null) {
                if (this.grid != null && this.grid.u9 != null) {
                    this.d3 = this.grid.u9;
                    return;
                }
                this.d3 = this.ec();
            }
            else {
                this.d3 = this.eh;
            }
        }
        c1(a, b) {
            switch (b.propertyName) {
                case "RowSeparatorBackground":
                    this.c8();
                    break;
                case "RowSeparatorLastStickyRowBackground":
                    this.db();
                    break;
                case "RowSeparatorPinnedRowBackground":
                    this.dc();
                    break;
                case "RowSeparatorStickyRowBackground":
                    this.de();
                    break;
            }
        }
        l(a) {
            return new RowSeparatorModel();
        }
        eb() {
            return GridStyleRepository.bk;
        }
        ef() {
            return GridStyleRepository.bc;
        }
        ec() {
            return GridStyleRepository.a2;
        }
        ed() {
            return this.eb();
        }
        av() {
            return 1;
        }
    }
    RowSeparator.$t = /*@__PURE__*/ markType(RowSeparator, 'RowSeparator', DefinitionBase.$);
    return RowSeparator;
})();
/**
 * @hidden
 */
export let HeaderRowSeparator = /*@__PURE__*/ (() => {
    class HeaderRowSeparator extends DefinitionBase {
        cm(a, b, c) {
            return "headerRowSeparator";
        }
        l(a) {
            return new RowSeparatorModel();
        }
        eb() {
            return GridStyleRepository.a0;
        }
        c8() {
            if (this.d7 == null) {
                if (this.grid != null && this.grid.u1 != null) {
                    this.d0 = this.grid.u1;
                    return;
                }
                this.d0 = this.eb();
            }
            else {
                this.d0 = this.d7;
            }
        }
        cz(a, b) {
            this.c8();
        }
        c1(a, b) {
            switch (b.propertyName) {
                case "HeaderRowSeparatorBackground":
                    this.c8();
                    break;
            }
        }
    }
    HeaderRowSeparator.$t = /*@__PURE__*/ markType(HeaderRowSeparator, 'HeaderRowSeparator', DefinitionBase.$);
    return HeaderRowSeparator;
})();
/**
 * @hidden
 */
export let SummaryRow = /*@__PURE__*/ (() => {
    class SummaryRow extends DefinitionBase {
        constructor() {
            super();
            this.fd = null;
            this.fb = null;
            this.fe = null;
            this.fc = null;
            this.em = null;
            this.el = null;
            this.er = truncate(DeviceUtils.g(12));
            this.et = truncate(DeviceUtils.g(0));
            this.es = truncate(DeviceUtils.g(12));
            this.eq = truncate(DeviceUtils.g(0));
            this.ff = this.ee();
            this.en = this.eo();
            this.fg = this.fh();
        }
        get fi() {
            return this.fd;
        }
        set fi(a) {
            let b = this.fd;
            this.fd = a;
            if (this.fd != b) {
                this.c2("SelectedBackground", 10, b, this.fd);
            }
        }
        get ff() {
            return this.fb;
        }
        set ff(a) {
            let b = this.fb;
            this.fb = a;
            if (this.fb != b) {
                this.c2("ActualSelectedBackground", 2, b, this.fb);
            }
        }
        get fj() {
            return this.fe;
        }
        set fj(a) {
            let b = this.fe;
            this.fe = a;
            if (this.fe != b) {
                this.c2("SummaryLabelTextColor", 10, b, this.fe);
            }
        }
        get fg() {
            return this.fc;
        }
        set fg(a) {
            let b = this.fc;
            this.fc = a;
            if (this.fc != b) {
                this.c2("ActualSummaryLabelTextColor", 2, b, this.fc);
            }
        }
        get summaryNameTextStyle() {
            return this.em;
        }
        set summaryNameTextStyle(a) {
            let b = this.em;
            this.em = a;
            if (this.em != b) {
                this.c2("SummaryNameFontInfo", 10, b, this.em);
            }
        }
        get en() {
            return this.el;
        }
        set en(a) {
            let b = this.el;
            this.el = a;
            if (this.el != b) {
                this.c2("ActualSummaryLabelFontInfo", 3, b, this.el);
            }
        }
        get ev() {
            return this.er;
        }
        set ev(a) {
            let b = this.er;
            this.er = a;
            if (this.er != b) {
                this.c2("PaddingLeft", 6, b, this.er);
            }
        }
        get ex() {
            return this.et;
        }
        set ex(a) {
            let b = this.et;
            this.et = a;
            if (this.et != b) {
                this.c2("PaddingTop", 6, b, this.et);
            }
        }
        get ew() {
            return this.es;
        }
        set ew(a) {
            let b = this.es;
            this.es = a;
            if (this.es != b) {
                this.c2("PaddingRight", 6, b, this.es);
            }
        }
        get eu() {
            return this.eq;
        }
        set eu(a) {
            let b = this.eq;
            this.eq = a;
            if (this.eq != b) {
                this.c2("PaddingBottom", 6, b, this.eq);
            }
        }
        cm(a, b, c) {
            return "summary";
        }
        l(a) {
            return new SummaryCellModel();
        }
        cy(a, b, c, d) {
            super.cy(a, b, c, d);
            let e = typeCast(DataSourceSpecialRow.$, d);
            let f = stringEmpty();
            let g = stringEmpty();
            let h = b.a0(a.k);
            if (h != null) {
                let i = e.getSummaryResults(h.hy);
                if (i.length > 0 && b.b7.i.count > 0) {
                    let j = b.b7.i.item(i[0].summaryIndex);
                    if (j.j != null) {
                        let k = this.u(j, i[0]);
                        f = j.ac != null ? j.ac : j.j.displayName;
                        g = k.d;
                    }
                }
            }
            let l = typeCast(SummaryCellModel.$, a);
            if (l != null) {
                l.ky = f;
                l.k0 = g;
                l.e5 = b.d9.getRowIndent(a.k.w);
                if (b.e0.o(l)) {
                    l.b8 = 1;
                }
                else {
                    l.b8 = 0;
                }
                if (b.aj.m(l)) {
                    l.by = 1;
                }
                else {
                    l.by = 0;
                }
            }
        }
        cw(a, b, c, d) {
            super.cw(a, b, c, d);
            let e = typeCast(SummaryCellModel.$, a);
            e.km = this.ff;
            e.ke = this.d0;
            e.k5 = this.fg;
            e.kr = this.en;
            e.fo = this.ev;
            e.fs = this.ex;
            e.fq = this.ew;
            e.fm = this.eu;
        }
        cz(a, b) {
            this.e8();
            this.e9();
            this.c8();
            this.df();
            this.dg();
            this.fa();
        }
        fh() {
            return GridStyleRepository.bd;
        }
        eg() {
            return GridStyleRepository.be;
        }
        c1(a, b) {
            switch (b.propertyName) {
                case "SummaryRootSelectedBackground":
                case "SummarySectionSelectedBackground":
                    this.e8();
                    break;
                case "SummaryRootBackground":
                case "SummarySectionBackground":
                    this.c8();
                    break;
                case "SummaryRootValueTextColor":
                case "SummarySectionValueTextColor":
                    this.df();
                    break;
                case "SummaryRootLabelTextColor":
                case "SummarySectionLabelTextColor":
                    this.e9();
                    break;
                case "SummaryRootLabelTextStyle":
                case "SummarySectionLabelTextStyle":
                    this.fa();
                    break;
                case "SummaryRootValueTextStyle":
                case "SummarySectionValueTextStyle":
                    this.dg();
                    break;
            }
        }
        e8() {
            if (this.fi == null) {
                this.ff = this.ee();
            }
            else {
                this.ff = this.fi;
            }
        }
        e9() {
        }
        dg() {
        }
        fa() {
        }
        c3(a, b, c, d) {
            super.c3(a, b, c, d);
            switch (a) {
                case "SelectedBackground":
                    this.e8();
                    break;
                case "SummaryLabelTextColor":
                    this.e9();
                    break;
                case "SummaryNameFontInfo":
                    this.fa();
                    break;
            }
        }
        af() {
            return GridStyleRepository.j;
        }
        eo() {
            return GridStyleRepository.i;
        }
    }
    SummaryRow.$t = /*@__PURE__*/ markType(SummaryRow, 'SummaryRow', DefinitionBase.$);
    return SummaryRow;
})();
/**
 * @hidden
 */
export let SummaryRowRoot = /*@__PURE__*/ (() => {
    class SummaryRowRoot extends SummaryRow {
        cm(a, b, c) {
            return "summaryRowRoot";
        }
        eb() {
            return GridStyleRepository.a6;
        }
        c8() {
            if (this.d7 == null) {
                if (this.grid != null && this.grid.vg != null) {
                    this.d0 = this.grid.vg;
                    return;
                }
                this.d0 = this.eb();
            }
            else {
                this.d0 = this.d7;
            }
        }
        e8() {
            if (this.fi == null) {
                if (this.grid != null && this.grid.vi != null) {
                    this.ff = this.grid.vi;
                }
                else {
                    this.ff = this.ee();
                }
            }
            else {
                this.ff = this.fi;
            }
        }
        e9() {
            if (this.fj == null) {
                if (this.grid != null && this.grid.vh != null) {
                    this.fg = this.grid.vh;
                }
                else {
                    this.fg = this.fh();
                }
            }
            else {
                this.fg = this.fj;
            }
        }
        df() {
            if (this.ek == null) {
                if (this.grid != null && this.grid.vj != null) {
                    this.d6 = this.grid.vj;
                }
                else {
                    this.d6 = this.eg();
                }
            }
            else {
                this.d6 = this.ek;
            }
        }
        fa() {
            if (this.summaryNameTextStyle == null) {
                if (this.grid != null && this.grid.ft != null) {
                    this.en = this.grid.ft;
                }
                else {
                    this.en = this.eo();
                }
            }
            else {
                this.en = this.summaryNameTextStyle;
            }
        }
    }
    SummaryRowRoot.$t = /*@__PURE__*/ markType(SummaryRowRoot, 'SummaryRowRoot', SummaryRow.$);
    return SummaryRowRoot;
})();
/**
 * @hidden
 */
export let SummaryRowSection = /*@__PURE__*/ (() => {
    class SummaryRowSection extends SummaryRow {
        cm(a, b, c) {
            return "summaryRowSection";
        }
        eb() {
            return GridStyleRepository.a9;
        }
        c8() {
            if (this.d7 == null) {
                if (this.grid != null && this.grid.vk != null) {
                    this.d0 = this.grid.vk;
                    return;
                }
                this.d0 = this.eb();
            }
            else {
                this.d0 = this.d7;
            }
        }
        e8() {
            if (this.fi == null) {
                if (this.grid != null && this.grid.vm != null) {
                    this.ff = this.grid.vm;
                }
                else {
                    this.ff = this.ee();
                }
            }
            else {
                this.ff = this.fi;
            }
        }
        e9() {
            if (this.fj == null) {
                if (this.grid != null && this.grid.vl != null) {
                    this.fg = this.grid.vl;
                }
                else {
                    this.fg = this.fh();
                }
            }
            else {
                this.fg = this.fj;
            }
        }
        df() {
            if (this.ek == null) {
                if (this.grid != null && this.grid.vn != null) {
                    this.d6 = this.grid.vn;
                }
                else {
                    this.d6 = this.eg();
                }
            }
            else {
                this.d6 = this.ek;
            }
        }
        fa() {
            if (this.summaryNameTextStyle == null) {
                if (this.grid != null && this.grid.fv != null) {
                    this.en = this.grid.fv;
                }
                else {
                    this.en = this.eo();
                }
            }
            else {
                this.en = this.summaryNameTextStyle;
            }
        }
    }
    SummaryRowSection.$t = /*@__PURE__*/ markType(SummaryRowSection, 'SummaryRowSection', SummaryRow.$);
    return SummaryRowSection;
})();
/**
 * @hidden
 */
export let TemplateColumn = /*@__PURE__*/ (() => {
    class TemplateColumn extends Column {
        constructor() {
            super();
            this.cellUpdating = null;
            this.ga = false;
        }
        l(a) {
            return new TemplateCellModel();
        }
        cm(a, b, c) {
            let d = "template-" + this.g2;
            return d;
        }
        cy(a, b, c, d) {
            super.cy(a, b, c, d);
            let e = a;
            e.ks = c;
        }
        cw(a, b, c, d) {
            super.cw(a, b, c, d);
        }
        jp(a, b) {
            if (this.cellUpdating != null) {
                this.cellUpdating(this, ((() => {
                    let $ret = new TemplateCellUpdatingEventArgs();
                    $ret.cellInfo = a;
                    $ret.content = b;
                    return $ret;
                })()));
            }
        }
        c3(a, b, c, d) {
            switch (a) {
                case "IsEditable":
                    this.ga = false;
                    break;
            }
            super.c3(a, b, c, d);
        }
    }
    TemplateColumn.$t = /*@__PURE__*/ markType(TemplateColumn, 'TemplateColumn', Column.$);
    return TemplateColumn;
})();
/**
 * @hidden
 */
export let TemplateCellUpdatingEventArgs = /*@__PURE__*/ (() => {
    class TemplateCellUpdatingEventArgs extends EventArgs {
        constructor() {
            super(...arguments);
            this._cellInfo = null;
            this._content = null;
        }
        get cellInfo() {
            return this._cellInfo;
        }
        set cellInfo(a) {
            this._cellInfo = a;
        }
        get content() {
            return this._content;
        }
        set content(a) {
            this._content = a;
        }
    }
    TemplateCellUpdatingEventArgs.$t = /*@__PURE__*/ markType(TemplateCellUpdatingEventArgs, 'TemplateCellUpdatingEventArgs', EventArgs.$);
    return TemplateCellUpdatingEventArgs;
})();
/**
 * @hidden
 */
export let TextColumn = /*@__PURE__*/ (() => {
    class TextColumn extends Column {
        constructor() {
            super(...arguments);
            this.jr = null;
        }
        get ju() {
            return this.jr;
        }
        set ju(a) {
            let b = this.jr;
            this.jr = a;
            if (this.jr != b) {
                this.c2("FormatString", 8, b, this.jr);
            }
        }
        get jp() {
            return this.fc;
        }
        set jp(a) {
            this.fc = a;
        }
        get jq() {
            return this.g4;
        }
        set jq(a) {
            this.g4 = a;
        }
        get js() {
            return this.hu;
        }
        set js(a) {
            this.hu = a;
        }
        get jo() {
            return this.em;
        }
        set jo(a) {
            this.em = a;
        }
        l(a) {
            return new TextCellModel();
        }
        cy(a, b, c, d) {
            super.cy(a, b, c, d);
            let e = a;
            if (c != null) {
                e.ks = this.jt(c);
            }
            else {
                e.ks = null;
            }
        }
        cw(a, b, c, d) {
            super.cw(a, b, c, d);
            let e = a;
        }
        jt(a) {
            if (typeof a === 'string') {
                return a;
            }
            return null;
        }
        cm(a, b, c) {
            return "text";
        }
    }
    TextColumn.$t = /*@__PURE__*/ markType(TextColumn, 'TextColumn', Column.$);
    return TextColumn;
})();
/**
 * @hidden
 */
export let TextHeader = /*@__PURE__*/ (() => {
    class TextHeader extends Header {
        constructor() {
            super();
            this.c = 0;
            this.h = 1;
        }
        l(a) {
            let b = new TextHeaderCellModel();
            return b;
        }
        cm(a, b, c) {
            return "textHeader";
        }
        cw(a, b, c, d) {
            super.cw(a, b, c, d);
            let e = a;
            let f = b.a0(a.k);
            e.kv = f.ex;
            e.ld = f.je;
            e.kx = f.e1;
        }
        cy(a, b, c, d) {
            super.cy(a, b, c, d);
            let e = a;
            let f = b.a0(a.k);
            e.ks = f.hh;
            e.ip = e.ks;
            e.m = f.e6;
            e.k1 = f.f3;
            e.kz = this.en;
        }
    }
    TextHeader.$t = /*@__PURE__*/ markType(TextHeader, 'TextHeader', Header.$);
    return TextHeader;
})();
/**
 * @hidden
 */
export let GridEffect = /*@__PURE__*/ (() => {
    class GridEffect extends Base {
        constructor() {
            super();
            this.s = 0;
            this.u = 0;
            this.br = "";
            this.af = false;
            this.ac = false;
            this.onFinished = null;
            this.onCanceled = null;
            this.a3 = 0;
            this.a1 = 0;
            this.h = null;
            this.a7 = -1;
            this.a8 = -1;
            this.a2 = 300;
            this.j = null;
            this.a4 = 0;
            this.c = null;
            this.a = null;
            this.a6 = -1;
            this.ad = false;
            this.ab = false;
            this.bk = -1;
            this.bm = null;
            this.bn = null;
            this.w = null;
            this.p = null;
            this.aa = false;
            this.n = null;
            this.ae = false;
            this.ay = null;
            this.az = 1;
            this.a5 = -1;
            this.b = null;
            this.ax = new Dictionary$2(CellPath.$, Number_$type, 0);
        }
        bu() {
            if (this.onFinished != null) {
                this.onFinished(this);
            }
        }
        bt(a) {
            if (this.onCanceled != null) {
                this.onCanceled(this, a);
            }
        }
        get t() {
            return this.s;
        }
        set t(a) {
            this.s = a;
        }
        am(a) {
            if (a == null) {
                return false;
            }
            if (a.s != this.s) {
                return false;
            }
            if (!this.af) {
                return true;
            }
            if (a.u != this.u) {
                return false;
            }
            if (a.br != this.br) {
                return false;
            }
            return true;
        }
        get v() {
            return this.u;
        }
        set v(a) {
            this.u = a;
        }
        get bs() {
            return this.br;
        }
        set bs(a) {
            this.br = a;
        }
        get as() {
            return this.af;
        }
        set as(a) {
            this.af = a;
        }
        get ap() {
            return this.ac;
        }
        set ap(a) {
            this.ac = a;
        }
        get ba() {
            return this.a3;
        }
        set ba(a) {
            this.a3 = a;
            this.a1 = a;
        }
        get i() {
            return this.h;
        }
        set i(a) {
            this.h = a;
        }
        get bi() {
            return this.a7;
        }
        set bi(a) {
            this.a7 = a;
        }
        get bj() {
            return this.a8;
        }
        set bj(a) {
            this.a8 = a;
        }
        get a9() {
            return this.a2;
        }
        set a9(a) {
            this.a2 = a;
        }
        get k() {
            return this.j;
        }
        set k(a) {
            this.j = a;
        }
        get bg() {
            return this.a4;
        }
        set bg(a) {
            this.a4 = a;
        }
        get g() {
            return this.c;
        }
        set g(a) {
            this.c = a;
        }
        get e() {
            return this.a;
        }
        set e(a) {
            this.a = a;
        }
        get bh() {
            return this.a6;
        }
        set bh(a) {
            this.a6 = a;
        }
        get aq() {
            return this.ad;
        }
        set aq(a) {
            this.ad = a;
        }
        get ao() {
            return this.ab;
        }
        set ao(a) {
            this.ab = a;
        }
        get bl() {
            return this.bk;
        }
        set bl(a) {
            this.bk = a;
        }
        get bo() {
            return this.bm;
        }
        set bo(a) {
            this.bm = a;
        }
        get bq() {
            return this.bn;
        }
        set bq(a) {
            this.bn = a;
        }
        get x() {
            return this.w;
        }
        set x(a) {
            this.w = a;
        }
        get q() {
            return this.p;
        }
        set q(a) {
            this.p = a;
        }
        get al() {
            return this.aa;
        }
        set al(a) {
            this.aa = a;
        }
        get o() {
            return this.n;
        }
        set o(a) {
            this.n = a;
        }
        get ar() {
            return this.ae;
        }
        set ar(a) {
            this.ae = a;
        }
        bx(a) {
            this.ba = a.l;
            this.bg = a.m;
            this.bi = a.n;
            this.bj = a.o;
            this.aq = a.e;
            this.q = this.r(a.c);
        }
        r(a) {
            switch (a) {
                case 0: return null;
                case 1: return EasingFunctions.cubicEase;
                case 3: return EasingFunctions.circleEase;
                case 2: return EasingFunctions.exponentialEase;
            }
            return null;
        }
        au(a, b, c, d) {
            if (this.ar && this.an(d)) {
                return false;
            }
            let e = this.a0(d);
            let f = 1;
            if (this.a3 > 0) {
                f = e / this.a3;
            }
            let g = false;
            if (this.w == null) {
                return true;
            }
            if (f >= 1) {
                f = 1;
                g = true;
            }
            if (this.p != null) {
                f = this.p(f);
            }
            let h = this.bp(this.bm, b, a, a.o);
            this.w(f, h, this.bn, a, b);
            return g;
        }
        av(a, b, c, d) {
            if (this.ar && this.an(d)) {
                return false;
            }
            let e = this.a0(d);
            let f = 1;
            if (this.a3 > 0) {
                f = e / this.a3;
            }
            let g = false;
            if (this.w == null) {
                return true;
            }
            if (f >= 1) {
                f = 1;
                g = true;
            }
            if (this.p != null) {
                f = this.p(f);
            }
            let h = this.bp(this.bm, b, a, a);
            this.w(f, h, this.bn, a, b);
            return g;
        }
        a0(a) {
            let b = (a - this.bk);
            if (this.a4 > 0) {
                if (b < this.a4) {
                    b = 0;
                }
                else {
                    b -= this.a4;
                }
            }
            return b;
        }
        an(a) {
            let b = (a - this.bk);
            if (this.a4 > 0) {
                if (b < this.a4) {
                    return true;
                }
            }
            return false;
        }
        bz(a, b, c, d) {
            let e = this.bb(b, a);
            if (this.f == null) {
                return;
            }
            let f = this.bb(b, this.f);
            let g = f / this.a6;
            if (g > 5) {
                g = 5;
            }
            if (g == this.az) {
                return;
            }
            let h = g / this.az;
            this.az = g;
            let i = truncate(Math.round(this.a1 * h));
            if (i <= 0) {
                let j = 0;
                j += 1;
            }
            {
                this.a1 = i;
            }
        }
        at(a, b, c, d) {
            let e = false;
            this.bz(a.k, b, c, d);
            if (this.ar && this.an(d)) {
                return false;
            }
            let f = this.a0(d);
            let g = this.bf(b, c, a.k, d);
            let h = this.bc(b, c, a.k, d);
            if (h < 300) {
                let i = 0;
                i += 1;
            }
            let j = f - g;
            if (j < 0) {
                j = 0;
            }
            let k = 1;
            if (h > 0) {
                k = j / h;
            }
            if (k >= 1) {
                k = 1;
                e = true;
            }
            if (this.p != null) {
                k = this.p(k);
            }
            let l = this.bp(this.bm, b, a, a.k);
            this.w(k, l, this.bn, a, b);
            return e;
        }
        by(a, b, c) {
            if (this.ay == null) {
                this.ay = new Dictionary$2(Base.$, Base.$, 0);
            }
            this.ay.item(c, a);
        }
        bp(a, b, c, d) {
            if (this.al) {
                if (this.ay == null) {
                    this.ay = new Dictionary$2(Base.$, Base.$, 0);
                }
                if (this.ay.containsKey(d)) {
                    return this.ay.item(d);
                }
                let e = this.o(c, b);
                this.ay.item(d, e);
                return e;
            }
            else {
                return this.bm;
            }
        }
        aw(a, b, c, d) {
            if (this.ar && this.an(d)) {
                return false;
            }
            let e = this.a0(d);
            let f = 1;
            if (this.a3 > 0) {
                f = e / this.a3;
            }
            let g = false;
            if (this.w == null) {
                return true;
            }
            if (f >= 1) {
                f = 1;
                g = true;
            }
            if (this.p != null) {
                f = this.p(f);
            }
            this.w(f, this.bm, this.bn, a, b);
            return g;
        }
        ag(a, b) {
            return false;
        }
        ah(a, b) {
            return false;
        }
        ai(a, b) {
            return false;
        }
        aj(a, b) {
            return false;
        }
        bv(a) {
        }
        bw(a) {
        }
        get f() {
            return this.b;
        }
        bf(a, b, c, d) {
            if (c == null) {
                return 0;
            }
            let e = this.bb(a, c);
            let f = this.bd(a, b, c, d);
            let g = this.a3;
            if (this.ad) {
                g = truncate(((f / this.a6) * g));
            }
            let h = this.a7;
            if (h == -1) {
                h = truncate((g / f));
                if ((g - truncate((f * h))) < this.a2) {
                    h = truncate(((g - this.a2) / f));
                }
                if (h < 0) {
                    h = 0;
                }
            }
            let i = h * e;
            if (this.h != null) {
                i = this.h(this.c, this.a6, c);
            }
            let j = this.a1;
            if (i < (j * -1)) {
                i = (j * -1);
            }
            if (i > (j)) {
                i = j - this.a2;
            }
            if (this.ad && this.a0(d) > i && c != null && !this.ax.containsKey(c)) {
                this.ax.addItem(c, f);
            }
            return i;
        }
        bd(a, b, c, d) {
            if (this.f == null || !this.ad) {
                return this.a6;
            }
            if (this.ax.containsKey(c)) {
                return this.ax.item(c);
            }
            let e = this.bb(a, this.f);
            return e;
        }
        bb(a, b) {
            if (b == null) {
                return 0;
            }
            let c = this.be(a, b);
            if (this.a6 == -1) {
                this.a6 = this.be(a, this.a) + 1;
            }
            if (this.ab) {
                c = ((this.a6 - 1) - c);
            }
            let d = c;
            if (d > this.a6 && d > this.a5) {
                this.a5 = d;
                this.b = b;
            }
            return d;
        }
        be(a, b) {
            return 0;
        }
        bc(a, b, c, d) {
            let e = this.a1;
            if (this.j != null) {
                if (this.a6 == -1) {
                    this.a6 = this.be(a, this.a) + 1;
                }
                e = this.j(this.c, this.a6, c);
            }
            else {
                if (this.a8 == -1) {
                    if (this.ad) {
                        let f = this.bd(a, b, c, d);
                        e = this.a3;
                        e = truncate(((f / this.a6) * e));
                        e = e - this.bf(a, b, c, d);
                    }
                    else {
                        if (this.ab) {
                            e = this.a3 - this.bf(a, b, this.d(a), d);
                        }
                        else {
                            e = this.a3 - this.bf(a, b, this.a, d);
                        }
                    }
                }
                else {
                    e = this.a8;
                }
            }
            return e;
        }
        d(a) {
            return this.c;
        }
        y(a, b) {
            if (b.x == a.x) {
                if (b.w <= a.w) {
                    a = a.aa();
                    a.w += 1;
                }
            }
            return a;
        }
        z(a, b) {
            if (b.x == a.x) {
                if (b.w < a.w) {
                    a = a.aa();
                    a.w -= 1;
                }
            }
            return a;
        }
        ak(a, b, c) {
            let d = this.a0(c);
            return d >= this.a1;
        }
    }
    GridEffect.$t = /*@__PURE__*/ markType(GridEffect, 'GridEffect');
    return GridEffect;
})();
/**
 * @hidden
 */
export let ColumnEffect = /*@__PURE__*/ (() => {
    class ColumnEffect extends GridEffect {
        constructor() {
            super(...arguments);
            this.b0 = 0;
        }
        ah(a, b) {
            if (this.b0 == a.o) {
                return true;
            }
            return false;
        }
    }
    ColumnEffect.$t = /*@__PURE__*/ markType(ColumnEffect, 'ColumnEffect', GridEffect.$);
    return ColumnEffect;
})();
/**
 * @hidden
 */
export let SpacerEffect = /*@__PURE__*/ (() => {
    class SpacerEffect extends GridEffect {
        constructor() {
            super(...arguments);
            this.b0 = 0;
        }
        aj(a, b) {
            return a.o == this.b0;
        }
    }
    SpacerEffect.$t = /*@__PURE__*/ markType(SpacerEffect, 'SpacerEffect', GridEffect.$);
    return SpacerEffect;
})();
/**
 * @hidden
 */
export let ColumnCellsEffect = /*@__PURE__*/ (() => {
    class ColumnCellsEffect extends GridEffect {
        constructor() {
            super(...arguments);
            this.b2 = 0;
            this.b1 = 0;
            this.b0 = 0;
        }
        ag(a, b) {
            if (this.b2 == -300) {
                if (a.as) {
                    return true;
                }
            }
            if (this.b2 == -400) {
                if (a.az == -400) {
                    return true;
                }
            }
            if (this.b1 >= 0) {
                if (this.b1 == a.az && this.b0 == a.b) {
                    return true;
                }
            }
            else {
                let c = b.g(this.b2);
                if (c == null) {
                    return false;
                }
                if (a.az == c.m && c.c == a.b) {
                    return true;
                }
            }
            return false;
        }
        d(a) {
            if (a.ci > 0) {
                let b = this.g;
                let c = new CellPath(0, b.b, b.az, -100, -100);
                return c;
            }
            else {
                return this.g;
            }
        }
        be(a, b) {
            let c = this.g;
            let d = this.e;
            let e = b;
            if (e == null) {
                return 0;
            }
            if (e.g) {
                return 0;
            }
            let f = 0;
            if (a.ci > 0) {
                f++;
            }
            if (c == null) {
                return 0;
            }
            if (e.av && e.i) {
                if (d == null) {
                    return 0;
                }
                return (d.w - c.w) + f - e.o;
            }
            if (e.x == c.x) {
                return (e.w - c.w) + f;
            }
            let g = f;
            let h = c.x;
            if (e.x > c.x) {
                while (h <= e.x) {
                    if (h == c.x) {
                        g += (a.bv._inner[h].m - 1) - c.w;
                        if (a.bv._inner[h].d > 0) {
                            g++;
                        }
                    }
                    else if (h == e.x) {
                        if (a.bv._inner[h].g > 0) {
                            g++;
                        }
                        g += (e.w + 1);
                    }
                    else {
                        if (a.bv._inner[h].g > 0) {
                            g++;
                        }
                        g += a.bv._inner[h].m;
                        if (a.bv._inner[h].d > 0) {
                            g++;
                        }
                    }
                    h++;
                }
            }
            else if (e.x < c.x) {
                while (h >= e.x) {
                    if (h == c.x) {
                        g -= c.w;
                        if (a.bv._inner[h].d > 0) {
                            g++;
                        }
                    }
                    else if (h == e.x) {
                        if (a.bv._inner[h].d > 0) {
                            g--;
                        }
                        g -= (a.bv._inner[h].m - e.w);
                    }
                    else {
                        if (a.bv._inner[h].g > 0) {
                            g--;
                        }
                        g -= a.bv._inner[h].m;
                        if (a.bv._inner[h].d > 0) {
                            g--;
                        }
                    }
                    h--;
                }
            }
            return g;
        }
    }
    ColumnCellsEffect.$t = /*@__PURE__*/ markType(ColumnCellsEffect, 'ColumnCellsEffect', GridEffect.$);
    return ColumnCellsEffect;
})();
/**
 * @hidden
 */
export let CellEffect = /*@__PURE__*/ (() => {
    class CellEffect extends GridEffect {
        constructor() {
            super(...arguments);
            this.b4 = 0;
            this.b3 = 0;
            this.b1 = 0;
            this.b0 = null;
            this.b2 = false;
        }
        ag(a, b) {
            if (this.b0.w == a.w) {
                if (this.b4 == -400) {
                    if (a.az == -400) {
                        return true;
                    }
                }
                if (this.b3 >= 0) {
                    if (this.b3 == a.az && this.b1 == a.b) {
                        return true;
                    }
                }
                else {
                    let c = b.g(this.b4);
                    if (c == null) {
                        return false;
                    }
                    if (a.az == c.m && c.c == a.b) {
                        return true;
                    }
                }
            }
            return false;
        }
        bv(a) {
            this.b0 = this.y(this.b0, a);
        }
        bw(a) {
            this.b0 = this.z(this.b0, a);
        }
    }
    CellEffect.$t = /*@__PURE__*/ markType(CellEffect, 'CellEffect', GridEffect.$);
    return CellEffect;
})();
/**
 * @hidden
 */
export let CellPositionEffect = /*@__PURE__*/ (() => {
    class CellPositionEffect extends CellEffect {
        ag(a, b) {
            return this.b0.equals(a);
        }
        bv(a) {
            this.b0 = this.y(this.b0, a);
        }
        bw(a) {
            this.b0 = this.z(this.b0, a);
        }
    }
    CellPositionEffect.$t = /*@__PURE__*/ markType(CellPositionEffect, 'CellPositionEffect', CellEffect.$);
    return CellPositionEffect;
})();
/**
 * @hidden
 */
export let RowEffect = /*@__PURE__*/ (() => {
    class RowEffect extends GridEffect {
        constructor() {
            super(...arguments);
            this.b0 = null;
        }
        ai(a, b) {
            if (this.b0.equals(a)) {
                return true;
            }
            return false;
        }
        bv(a) {
            this.b0 = this.y(this.b0, a);
        }
        bw(a) {
            this.b0 = this.z(this.b0, a);
        }
    }
    RowEffect.$t = /*@__PURE__*/ markType(RowEffect, 'RowEffect', GridEffect.$);
    return RowEffect;
})();
/**
 * @hidden
 */
export let RowCellsEffect = /*@__PURE__*/ (() => {
    class RowCellsEffect extends GridEffect {
        constructor() {
            super(...arguments);
            this.b0 = null;
        }
        ag(a, b) {
            if (this.b0.x == a.x && this.b0.w == a.w && this.b0.b == a.b) {
                return true;
            }
            return false;
        }
        bv(a) {
            this.b0 = this.y(this.b0, a);
        }
        bw(a) {
            this.b0 = this.z(this.b0, a);
        }
        be(a, b) {
            if (this.g == null || b.au) {
                return 0;
            }
            if (b.as) {
                return this.be(a, this.e);
            }
            let c = a.br._inner[this.g.az].n;
            let d = a.br._inner[b.az].n;
            if (b.d == 0) {
                d = a.br._inner[b.az].n - a.co;
            }
            else if (b.d == 2) {
                d = a.br._inner[b.az].n - (a.co + a.cr);
            }
            return d - c;
        }
    }
    RowCellsEffect.$t = /*@__PURE__*/ markType(RowCellsEffect, 'RowCellsEffect', GridEffect.$);
    return RowCellsEffect;
})();
/**
 * @hidden
 */
export let GridEffectManager = /*@__PURE__*/ (() => {
    class GridEffectManager extends Base {
        constructor(a, b) {
            super();
            this.b = null;
            this.k = new List$1(ColumnEffect.$, 0);
            this.j = new List$1(ColumnCellsEffect.$, 0);
            this.m = new List$1(RowEffect.$, 0);
            this.l = new List$1(RowCellsEffect.$, 0);
            this.i = new List$1(CellEffect.$, 0);
            this.n = new List$1(SpacerEffect.$, 0);
            this.q = -30;
            this.o = -1;
            this.a = null;
            this.b = a;
            this.a = b;
        }
        get c() {
            return this.b;
        }
        ae(a) {
            for (let b = 0; b < this.l.count; b++) {
                this.l._inner[b].bv(a);
            }
            for (let c = 0; c < this.m.count; c++) {
                this.m._inner[c].bv(a);
            }
            for (let d = 0; d < this.i.count; d++) {
                this.i._inner[d].bv(a);
            }
        }
        af(a) {
            for (let b = this.l.count - 1; b >= 0; b--) {
                if (a.equals(this.l._inner[b].b0)) {
                    this.aj(this.l._inner[b].b0, false, this.l._inner[b]);
                }
                else {
                    this.l._inner[b].bw(a);
                }
            }
            for (let c = this.m.count - 1; c >= 0; c--) {
                if (a.equals(this.m._inner[c].b0)) {
                    this.ak(this.m._inner[c].b0, false, this.m._inner[c]);
                }
                else {
                    this.m._inner[c].bw(a);
                }
            }
            for (let d = this.i.count - 1; d >= 0; d--) {
                if (a.equals(this.i._inner[d].b0)) {
                    this.ag(this.i._inner[d].b0, false, this.i._inner[d]);
                }
                else {
                    this.i._inner[d].bw(a);
                }
            }
        }
        ad() {
            let a = this.k.count > 0;
            this.a.ip = true;
            this.an(false);
            if (a) {
                let b = this.a.model.absoluteWidth;
                this.a.e6.q(this.a, this.a.model, truncate(this.a.jm));
                this.d();
                if (b != this.a.model.absoluteWidth) {
                    this.a.externalGrid.onContentSizeChanged();
                }
            }
            this.a.ip = false;
            this.a.renderingEngine.invalidateVisibility(() => this.a.fc.l(this.a));
            this.a.renderingEngine.refresh(this.a.model, true);
        }
        d() {
            let a = this.k.count > 0;
            let b = this.p();
            let c = this.a.model;
            let d = this.a.de;
            this.f(b, c, d);
            return a;
        }
        ac() {
            let a = this.p();
            let b = this.a.model;
            let c = this.a.de;
            this.g(a, b, c);
        }
        ab() {
            let a = this.p();
            let b = this.a.model;
            let c = this.a.de;
            this.e(a, b, c);
        }
        an(a) {
            let b = this.p();
            if ((b - this.q < 15) && !a) {
                this.b.requestFrame(this.o);
                return;
            }
            let c = this.a.model;
            let d = this.a.de;
            let e = true;
            if (!this.f(b, c, d)) {
                e = false;
            }
            if (!this.h(b, c, d)) {
                e = false;
            }
            if (!this.g(b, c, d)) {
                e = false;
            }
            if (!this.e(b, c, d)) {
                e = false;
            }
            if (e && this.k.count == 0 && this.j.count == 0 && this.i.count == 0 && this.m.count == 0 && this.l.count == 0 && this.n.count == 0) {
                this.am();
            }
            else {
                this.b.requestFrame(this.o);
            }
        }
        p() {
            let a = dateNow();
            return a.getTime();
        }
        am() {
            this.b.teardownTicking(this.o);
            this.o = -1;
        }
        aa() {
            if (this.o == -1) {
                this.o = this.b.setupTicking(runOn(this, this.ad));
                this.b.requestFrame(this.o);
            }
        }
        u(a, b) {
            b.b0 = a.o;
            b.bl = this.p();
            this.ai(a.o, true, b);
            this.k.add(b);
            this.aa();
        }
        ai(a, b, c) {
            for (let d = this.k.count - 1; d >= 0; d--) {
                if (this.k._inner[d].b0 == a && this.k._inner[d].am(c)) {
                    if (b) {
                        this.k._inner[d].bt(c);
                    }
                    this.k.removeAt(d);
                }
            }
        }
        z(a, b) {
            b.b0 = a.o;
            b.bl = this.p();
            this.al(a, true, b);
            this.n.add(b);
            this.aa();
        }
        al(a, b, c) {
            for (let d = this.n.count - 1; d >= 0; d--) {
                if (this.n._inner[d].b0 == a.o && this.n._inner[d].am(c)) {
                    if (b) {
                        this.n._inner[d].bt(c);
                    }
                    this.n.removeAt(d);
                }
            }
        }
        t(a, b) {
            b.b2 = a.o;
            b.bl = this.p();
            this.ah(a.o, true, b);
            this.j.add(b);
            this.aa();
        }
        x(a) {
            a.b2 = -300;
            a.bl = this.p();
            this.ah(-300, true, a);
            this.j.add(a);
            this.aa();
        }
        y(a) {
            a.b2 = -400;
            a.bl = this.p();
            this.ah(-400, true, a);
            this.j.add(a);
            this.aa();
        }
        ah(a, b, c) {
            for (let d = this.j.count - 1; d >= 0; d--) {
                if (this.j._inner[d].b2 == a && this.j._inner[d].am(c)) {
                    if (b) {
                        this.j._inner[d].bt(c);
                    }
                    this.j.removeAt(d);
                }
            }
        }
        w(a, b) {
            b.b0 = a;
            b.bl = this.p();
            this.ak(a, true, b);
            this.m.add(b);
            this.aa();
        }
        ak(a, b, c) {
            for (let d = this.m.count - 1; d >= 0; d--) {
                if (this.m._inner[d].b0.equals(a) && this.m._inner[d].am(c)) {
                    if (b) {
                        this.m._inner[d].bt(c);
                    }
                    this.m.removeAt(d);
                }
            }
        }
        v(a, b) {
            b.b0 = a;
            b.bl = this.p();
            this.aj(a, true, b);
            this.l.add(b);
            this.aa();
        }
        aj(a, b, c) {
            for (let d = this.l.count - 1; d >= 0; d--) {
                if (this.l._inner[d].b0.equals(a) && this.l._inner[d].am(c)) {
                    if (b) {
                        this.l._inner[d].bt(c);
                    }
                    this.l.removeAt(d);
                }
            }
        }
        r(a, b, c) {
            b.b4 = c;
            b.b0 = a;
            b.bl = this.p();
            b.b2 = true;
            this.ag(a, true, b);
            this.i.add(b);
            this.aa();
        }
        s(a, b) {
            b.b0 = a;
            b.bl = this.p();
            b.b2 = false;
            this.ag(a, true, b);
            this.i.add(b);
            this.aa();
        }
        ag(a, b, c) {
            for (let d = this.i.count - 1; d >= 0; d--) {
                if (this.i._inner[d].b0.equals(a) && this.i._inner[d].am(c)) {
                    if (b) {
                        this.i._inner[d].bt(c);
                    }
                    this.i.removeAt(d);
                }
            }
        }
        f(a, b, c) {
            let d = true;
            let e;
            let f;
            let g = new List$1(ColumnEffect.$, 0);
            for (let h = 0; h < this.k.count; h++) {
                if (b.g(this.k._inner[h].b0) == null) {
                    this.ai(this.k._inner[h].b0, false, this.k._inner[h]);
                }
            }
            for (let i = 0; i < b.br.count; i++) {
                e = b.br._inner[i];
                for (let j = 0; j < this.k.count; j++) {
                    f = this.k._inner[j];
                    if (f.ah(e, b)) {
                        if (!f.au(e, b, c, a)) {
                            d = false;
                        }
                        else {
                            g.add(f);
                        }
                    }
                }
            }
            for (let k = 0; k < g.count; k++) {
                this.ai(g._inner[k].b0, false, g._inner[k]);
                g._inner[k].bu();
            }
            return d;
        }
        h(a, b, c) {
            let d = true;
            let e = b.bw;
            let f = new List$1(GridColumnSpacer.$, 0);
            let g = new List$1(SpacerEffect.$, 0);
            for (let h = 0; h < e.count; h++) {
                let i = e._inner[h];
                for (let j = 0; j < i.count; j++) {
                    let k = i._inner[j];
                    for (let l = 0; l < this.n.count; l++) {
                        if (this.n._inner[l].aj(k, b)) {
                            if (!this.n._inner[l].av(k, b, c, a)) {
                                d = false;
                            }
                            else {
                                f.add(k);
                                g.add(this.n._inner[l]);
                            }
                        }
                    }
                }
            }
            for (let m = 0; m < f.count; m++) {
                this.al(f._inner[m], false, g._inner[m]);
                g._inner[m].bu();
            }
            return d;
        }
        g(a, b, c) {
            let d = true;
            let e = new CellPath(1, 0, 0, 0);
            let f;
            for (let g = 0; g < this.m.count; g++) {
                f = this.m._inner[g];
                e.b = f.b0.b;
                e.w = f.b0.w;
                e.x = f.b0.x;
                if (!f.aw(b.bv._inner[e.x], b, c, a)) {
                    d = false;
                }
            }
            return d;
        }
        e(a, b, c) {
            let d = true;
            if (this.j.count == 0 && this.l.count == 0 && this.i.count == 0) {
                return true;
            }
            for (let e = 0; e < this.j.count; e++) {
                this.j._inner[e].b1 = -1;
                let f = b.g(this.j._inner[e].b2);
                if (f != null) {
                    this.j._inner[e].b1 = f.m;
                    this.j._inner[e].b0 = f.c;
                }
                this.j._inner[e].ap = true;
            }
            for (let g = 0; g < this.l.count; g++) {
                this.l._inner[g].ap = true;
            }
            for (let h = 0; h < this.i.count; h++) {
                this.i._inner[h].b3 = -1;
                if (this.i._inner[h].b2) {
                    let i = b.g(this.i._inner[h].b4);
                    if (i != null) {
                        this.i._inner[h].b3 = i.m;
                        this.i._inner[h].b1 = i.c;
                    }
                }
                this.i._inner[h].ap = true;
            }
            for (let j = 0; j < b.bu.count; j++) {
                let k = b.bu._inner[j];
                for (let l = 0; l < k.o.count; l++) {
                    if (k.p._inner[l]) {
                        continue;
                    }
                    let m = k.o._inner[l];
                    for (let n = 0; n < this.j.count; n++) {
                        let o = this.j._inner[n];
                        if (o.ag(m, b)) {
                            if (!o.at(k.q._inner[l], b, c, a)) {
                                o.ap = false;
                            }
                        }
                    }
                    for (let p = 0; p < this.l.count; p++) {
                        let q = this.l._inner[p];
                        if (q.ag(m, b)) {
                            if (!q.at(k.q._inner[l], b, c, a)) {
                                q.ap = false;
                            }
                        }
                    }
                    for (let r = 0; r < this.i.count; r++) {
                        let s = this.i._inner[r];
                        if (s.ag(m, b)) {
                            if (!s.at(k.q._inner[l], b, c, a)) {
                                s.ap = false;
                            }
                        }
                    }
                }
            }
            let t = new List$1(ColumnCellsEffect.$, 0);
            for (let u = 0; u < this.j.count; u++) {
                if (this.j._inner[u].ak(b, c, a) && this.j._inner[u].ap) {
                    t.add(this.j._inner[u]);
                }
                else {
                    d = false;
                }
            }
            let v = new List$1(RowCellsEffect.$, 0);
            for (let w = 0; w < this.l.count; w++) {
                if (this.l._inner[w].ak(b, c, a) && this.l._inner[w].ap) {
                    v.add(this.l._inner[w]);
                }
                else {
                    d = false;
                }
            }
            let x = new List$1(CellEffect.$, 0);
            for (let y = 0; y < this.i.count; y++) {
                if (this.i._inner[y].ak(b, c, a) && this.i._inner[y].ap) {
                    x.add(this.i._inner[y]);
                }
                else {
                    d = false;
                }
            }
            for (let z = 0; z < t.count; z++) {
                this.ah(t._inner[z].b2, false, t._inner[z]);
                t._inner[z].bu();
            }
            for (let aa = 0; aa < v.count; aa++) {
                this.aj(v._inner[aa].b0, false, v._inner[aa]);
                v._inner[aa].bu();
            }
            for (let ab = 0; ab < x.count; ab++) {
                this.ag(x._inner[ab].b0, false, x._inner[ab]);
                x._inner[ab].bu();
            }
            return d;
        }
    }
    GridEffectManager.$t = /*@__PURE__*/ markType(GridEffectManager, 'GridEffectManager');
    return GridEffectManager;
})();
/**
 * @hidden
 */
export let GridLayerController = /*@__PURE__*/ (() => {
    class GridLayerController extends Base {
        constructor() {
            super(...arguments);
            this.e = new RecyclingManager();
        }
        a(a, b) {
            let c = b.bu;
            let d = c.count;
            for (let e = 0; e < d; e++) {
                let f = c._inner[e].b(a);
                if (f != undefined) {
                    return f;
                }
            }
            return null;
        }
        b(a, b, c, d, e, f, g, h) {
            let i = this.a(a, c);
            if (i == null) {
                let j = null;
                let k = null;
                let l = false;
                let m = -1;
                if (a.ag) {
                    m = b.d9.getDataRow(a);
                    k = b.d9.resolveValueForPath(b, a);
                    if (k == null && b.d9.isPlaceholderValue(a)) {
                        l = true;
                    }
                }
                let n = b.nc(a, b, k, m);
                j = this.e.a(n);
                if (j == null) {
                    j = b.ao(a, n);
                }
                else {
                    j.jr();
                }
                let o = a;
                if (j.k != null) {
                    o = j.k;
                }
                if (c.bh.d(o)) {
                    c.bh.item(o).remove(j);
                    if (c.bh.item(o).count == 0) {
                        c.bh.f(o);
                    }
                }
                d.s(a, j);
                j.q = d;
                j.k = a;
                j.v = e;
                j.ej = m;
                j.a6 = f;
                j.a7 = g;
                j.a2 = h;
                j.x = a.d;
                let p = false;
                let q = false;
                let r = 0;
                let s = j.k.az;
                let t = (s >= 0 && c.br._inner[s].n == 0) || a.au;
                if (t) {
                    r = b.d9.getRowIndent(j.k.w);
                    let u = b.d9.getRowType(j.k.w);
                    if (u == 1 && b.hs) {
                        if (b.iv) {
                            if (a.az == -401 || (a.az == -400 && c.cf == 0)) {
                                p = b.hs;
                                q = b.actualDataSource.getIsRowExpandedAtIndex(j.k.w);
                            }
                        }
                        else {
                            p = b.hs;
                            q = b.actualDataSource.getIsRowExpandedAtIndex(j.k.w);
                        }
                    }
                }
                j.ar = p;
                j.az = q;
                j.e5 = r;
                b.rx(j, k, b.d9.resolveRow(m));
                if (l) {
                    j.cb = 1;
                }
                return j;
            }
            else {
                this.g(a, c, d);
                i.v = e;
                let v = i.k.a5;
                i.k = a;
                i.a6 = f;
                i.a7 = g;
                i.a2 = h;
                i.x = a.d;
                if (a.a5 != v && a.w >= 0 && a.az >= 0) {
                    i.a9 = b.e0.o(i);
                    i.b8 = i.a9 ? 1 : 0;
                    i.b3 = b.d5.c(a.w) ? 1 : 0;
                }
                let w = false;
                let x = false;
                let y = 0;
                let z = i.k.az;
                let aa = (z >= 0 && c.br._inner[z].n == 0) || a.au;
                if (aa) {
                    y = b.d9.getRowIndent(i.k.w);
                    let ab = b.d9.getRowType(i.k.w);
                    if (ab == 1 && b.hs) {
                        if (b.iv) {
                            if (a.az == -401 || (a.az == -400 && c.cf == 0)) {
                                w = b.hs;
                                x = b.actualDataSource.getIsRowExpandedAtIndex(i.k.w);
                            }
                        }
                        else {
                            w = b.hs;
                            x = b.actualDataSource.getIsRowExpandedAtIndex(i.k.w);
                        }
                    }
                }
                i.ar = w;
                i.az = x;
                i.e5 = y;
                return i;
            }
        }
        d(a, b) {
            for (let c = 0; c < b.bu.count; c++) {
                if (b.bu._inner[c].d(a)) {
                    return b.bu._inner[c];
                }
            }
            return null;
        }
        g(a, b, c) {
            let d = this.d(a, b);
            if (d == null || d == c) {
                return;
            }
            let e = d.item(a);
            d.f(a);
            c.s(a, e);
            e.q = c;
        }
        f(a, b, c) {
            if (c == null) {
                c = this.d(a, b);
            }
            if (c == null) {
                return;
            }
            let d = c.item(a);
            c.f(a);
            let e = null;
            if (b.bh.d(a)) {
                e = b.bh.item(a);
                if (e.count == 1) {
                    let f = a.aa();
                    b.bh.f(a);
                    b.bh.s(f, e);
                }
            }
            else {
                e = new List$1(CellModel.$, 0);
                b.bh.s(a, e);
            }
            e.add(d);
        }
        i(a, b) {
            let c = this.d(a, b);
            if (c == null) {
                return;
            }
            let d = this.c(a, b);
            this.f(a, b, c);
            this.e.c(d);
        }
        j(a, b, c) {
            if (b == null) {
                return;
            }
            let d = b.item(a);
            this.f(a, c, b);
            this.e.c(d);
        }
        c(a, b) {
            for (let c = 0; c < b.bu.count; c++) {
                if (b.bu._inner[c].d(a)) {
                    return b.bu._inner[c].item(a);
                }
            }
            return null;
        }
        h(a, b, c, d, e, f) {
            if (a.k.h) {
                a.cc = c + a.b4 + (a.b5 * b.br._inner[a.k.az].k);
            }
            else {
                a.cc = c + a.b4 + (a.b5 * a.gf);
            }
            a.cd = d + a.b9 + (a.ca * a.e0);
            a.f2 = truncate(Math.round(a.cc));
            a.f4 = truncate(Math.round(a.cd));
            a.gf = truncate(e);
            a.e0 = truncate(f);
        }
    }
    GridLayerController.$t = /*@__PURE__*/ markType(GridLayerController, 'GridLayerController');
    return GridLayerController;
})();
/**
 * @hidden
 */
export let VisibilityEngine = /*@__PURE__*/ (() => {
    class VisibilityEngine extends Base {
        constructor() {
            super();
            this.d = null;
            this.c = null;
            this.f = false;
            this.j = 0;
            this.e = false;
        }
        get k() {
            return this.j;
        }
        set k(a) {
            this.j = a;
        }
        v() {
            this.e = true;
        }
        l(a) {
            let b = false;
            if (this.e) {
                this.e = false;
                b = true;
            }
            this.m(a, a.model, a.e6, b);
        }
        m(a, b, c, d) {
            a.p5();
            let e = b.actualVisibleRegion;
            if (e.isEmpty) {
                return;
            }
            if (e.width == 0 || e.height == 0) {
                return;
            }
            if (b.br.count == 0) {
                return;
            }
            if (a.d9 == null) {
                return;
            }
            let f = this.a(a, b, c, e);
            for (let g = 0; g < b.bx.count; g++) {
                let h = b.bx._inner[g];
                let i = c.k(h, a, b);
                b.br._inner[h].l = i;
            }
            b.cp = 0;
            b.cv = 0;
            b.b7 = 0;
            b.bf = f.b;
            b.be = f.a;
            b.cn = f.k;
            b.cq = f.m;
            b.co = f.l;
            b.cr = f.n;
            a.sb();
            this.d = f.b;
            this.c = f.a;
            let j = a.de;
            a.ip = true;
            this.u(a, b, f, j);
            if (b.bx.count == 0) {
                return;
            }
            this.n(a, b, f, j);
            f.j += b.ch;
            if (this.c.w == -1) {
                return;
            }
            this.h(a, b, b.actualVisibleRegion, f, false);
            this.o(a, b, f, j);
            a.c9.ab();
            a.ip = false;
        }
        a(a, b, c, d) {
            let e;
            e = new CalculationParameters();
            e.j = d.top;
            e.g = d.bottom;
            e.h = d.left;
            e.i = d.right;
            if (this.k > 0) {
                let f = this.k * a.kl;
                e.j = Math.max(e.j - f, 0);
                e.g = Math.min(e.g + f, b.absoluteHeight);
                e.h = Math.max(e.h - f, 0);
                e.i = Math.min(e.i + f, b.absoluteWidth);
            }
            e.o = a.inset;
            e.d = Math.max(e.h, a.inset.c);
            e.f = Math.min(e.i, b.absoluteWidth - a.inset.d);
            e.e = e.f - e.d;
            e.b = c.b(e.j + b.cl + b.cm, b);
            e.a = c.b(e.g, b);
            e.k = 0;
            e.m = 0;
            b.bx.clear();
            let g = b.cf + truncate(a.inset.c);
            let h = g;
            let i = 0;
            let j = 0;
            let k = b.cg;
            for (let l = 0; l < b.br.count; l++) {
                let m = b.br._inner[l];
                let n = b.bw._inner[l];
                let o = b.br._inner[l].d == 0;
                if (o) {
                    g += truncate(Math.round(n.ad(-1)));
                    if (m.a != 6) {
                        g += (m.k) + a.model.cc - truncate(Math.round(m.f(b)));
                    }
                }
                if (m.a == 3) {
                    continue;
                }
                if (b.br._inner[l].d == 1) {
                    b.bx.insert(i, l);
                    i++;
                }
                else if (b.br._inner[l].d == 2) {
                    b.bx.insert(b.bx.count, l);
                    j++;
                    if (m.a == 6) {
                        k -= m.k;
                    }
                }
                else {
                    if (g >= e.d + b.cf && h <= e.f - k) {
                        b.bx.insert(b.bx.count - j, l);
                    }
                    else if (b.br._inner[l].a == 2 || b.br._inner[l].a == 1 || b.br._inner[l].a == 6) {
                        b.bx.insert(b.bx.count - j, l);
                    }
                    else if (g < e.d + b.cf) {
                        e.l++;
                    }
                    else if (h > e.f - b.cg) {
                        e.n++;
                    }
                }
                if (o) {
                    h = g;
                    g += truncate(Math.round(n.af(-1)));
                }
            }
            if (b.bx.count > 0) {
                e.k = b.bx._inner[0];
                e.m = b.bx._inner[b.bx.count - 1];
            }
            return e;
        }
        u(a, b, c, d) {
            let e = this.d.x;
            let f = this.c.x;
            let g = this.d.w;
            let h = this.c.w;
            let i = 0;
            let j = 0;
            let k = 0;
            let l = false;
            let m = false;
            let n = false;
            let o = false;
            let p = false;
            let q = false;
            let r = a.kk == 0;
            let s = a.lg == 0;
            let t = null;
            let u = a.d9.getStickyRows();
            if (u != null) {
                for (let v = 0; v < u.length; v++) {
                    if (t == null) {
                        t = new HashSet$1(Number_$type, 0);
                    }
                    t.add_1(u[v]);
                }
            }
            for (let w = 0; w < b.bu.count; w++) {
                let x = b.bu._inner[w];
                x.g = true;
                for (let y = 0; y < x.o.count; y++) {
                    if (x.p._inner[y]) {
                        continue;
                    }
                    let z = x.o._inner[y];
                    m = false;
                    l = false;
                    i = z.x;
                    j = z.w;
                    k = z.az;
                    m = z.as || z.j || z.au || z.al || z.an || z.ak || z.am;
                    p = z.ap || z.al || z.an;
                    o = z.g;
                    n = t != null && t.contains(j);
                    q = z.d != 0;
                    if ((j == -1000 && k == -1000) || (j == -1001 && k == -1001)) {
                        continue;
                    }
                    if (b.bx.count == 0) {
                        l = true;
                    }
                    if (z.as && s) {
                        l = true;
                    }
                    if (z.g && r) {
                        l = true;
                    }
                    if (z.ap && (a.dragger == null || !a.dragger.isDragActive)) {
                        l = true;
                    }
                    if ((z.al || z.ak) && b.cf == 0) {
                        l = true;
                    }
                    if ((z.an || z.am) && b.cg == 0) {
                        l = true;
                    }
                    if (!m && !b.bx.contains(k)) {
                        l = true;
                    }
                    else if (!o && (i < e || i > f)) {
                        l = true;
                    }
                    else {
                        if (!n && !p && !z.al && !z.an && !z.ak && !z.am) {
                            if (i == e && j < g) {
                                l = true;
                            }
                            if (i == f && j > h) {
                                l = true;
                            }
                        }
                    }
                    if (!a.iv && (z.az == -401 || z.az == -402)) {
                        l = true;
                    }
                    if (!l) {
                        let aa = a.d9.getRowType(j);
                        let ab = a.d9.isRowSpanning(aa) && a.dy != 1;
                        if (!z.as && !z.ap && !z.al && !z.an && !z.ak && !z.am) {
                            if (b.bn && (aa == 1 || aa == 2)) {
                                l = true;
                            }
                            else if ((ab && !m) || (m && !ab)) {
                                l = true;
                            }
                            else if ((z.at && aa != 5) || (z.aq && aa != 4) || (!z.at && aa == 5) || (!z.aq && aa == 4)) {
                                l = true;
                            }
                        }
                        else if ((aa == 4 && !z.ar) || (aa != 4 && z.ar)) {
                            l = true;
                        }
                    }
                    if (l) {
                        a.de.j(z, x, b);
                    }
                }
                x.g = false;
            }
            b.bn = false;
        }
        t(a, b, c) {
            let d = c.b;
            let e = c.a;
            let f = e.x;
            let g = new CellPath(1, 0, 0, 0);
            for (let h = d.x; h <= f; h++) {
                this.q(h, a, b, c, g);
            }
        }
        q(a, b, c, d, e) {
            let f = d.b;
            let g = d.a;
            let h = c.bv;
            let i = b.de;
            let j = g.x;
            let k = d.d;
            let l = d.f;
            let m = d.e;
            let n = h._inner[a];
            let o = a == j ? g.w : n.m - 1;
            if (o == -201) {
                o = n.m - 1;
            }
            let p = 0;
            if (f.x == a) {
                p = f.w == -200 ? 0 : f.w;
            }
            if (p == -201) {
                let q = new CellPath(1, 0, a, -200);
                this.ab(q, c, k, n.i + n.l() - n.d, m, a, false, b);
                e.x = a;
                e.w = -201;
                e.az = 0;
                return;
            }
            if (n.g > 0) {
                this.s(a, b, c, d, e, f, n, p);
            }
            if (n.d > 0) {
                this.r(a, b, c, d, e, i, j, n);
            }
            e.x = a;
        }
        i(a, b, c) {
            let d = this.a(a, b, a.e6, c);
            return this.h(a, b, c, d, true);
        }
        h(a, b, c, d, e) {
            let f = d.a;
            let g = d.b;
            let h = d.a.x;
            let i = d.b.x;
            let j = new CellPath(1, 0, 0, 0);
            let k = b.bv._inner[0];
            let l = a.d9.getStickyRowsInRange(g.w, f.w);
            let m = -1;
            let n = -1;
            let o = -1;
            let p = -1;
            let q = false;
            let r = a.lg;
            let s = a.dy == 3;
            let t = new Dictionary$2(Number_$type, PinnedRowInfo.$, 0);
            let u = new List$1(PinnedRowInfo.$, 0);
            b.cu = 0;
            if (l != null && ((a.a7.i.count > 0 && a.hu) || a.a7.i.count == 0)) {
                let v = c.top + b.ci;
                let w = c.bottom;
                for (let x = 0; x < l.length; x++) {
                    let y = l[x];
                    let z = a.d9.getRowType(y);
                    let aa = y * k.k() + k.i;
                    let ab = new PinnedRowInfo();
                    ab.b = b;
                    ab.a = z;
                    ab.k = k.e(y);
                    ab.i = k.j(y);
                    ab.n = a.d9.getStickRowPriority(y);
                    ab.m = y;
                    ab.l = aa;
                    ab.e = (x == l.length - 1) || l[x + 1] != y + 1;
                    ab.f = z == 5 && (x == l.length - 1);
                    t.addItem(y, ab);
                    if (x == 0) {
                        if (ab.a != 4) {
                            if (ab.l <= v) {
                                ab.l += (v - ab.l);
                                p = x;
                            }
                            else if (ab.j > c.bottom) {
                                ab.l += (c.bottom - ab.j);
                                q = true;
                            }
                        }
                        else {
                            if (ab.j > c.bottom) {
                                ab.l += (c.bottom - ab.j);
                                ab.h = true;
                                q = true;
                            }
                        }
                        continue;
                    }
                    let ac = l[x - 1];
                    let ad = a.d9.getStickRowPriority(ac);
                    let ae = a.d9.getStickRowPriority(y);
                    let af = t.item(ac);
                    let ag = a.d9.isExclusivelySticky(y);
                    let ah = x - 1 == p;
                    af.f = (z != 5 && af.a == 5) || (z == 5 && x == l.length - 1);
                    let ai = ((() => {
                        let $ret = new PushRowSettings();
                        $ret.a = l;
                        $ret.d = t;
                        $ret.c = true;
                        $ret.b = ag;
                        return $ret;
                    })());
                    if (ab.a != 4) {
                        if (ab.l <= af.j && ah) {
                            p = x;
                            let aj = this.b(x - 1, x, x, ai);
                            if (!aj.b) {
                                ab.l = aj.a.j;
                            }
                        }
                        if (ab.a == 2) {
                            let ak = a.d9.getRootSummaryRowCount();
                            let al = c.bottom - ak * k.k();
                            if (ab.j > al) {
                                ab.l -= ab.j - al;
                                ab.h = true;
                                q = true;
                                ai.c = false;
                                let am = this.b(x - 1, x, x, ai);
                                if (!am.b) {
                                    ab.l = am.a.j;
                                }
                            }
                        }
                        else if (s && ab.a == 5) {
                            let an = a.d9.getRootSummaryRowCount();
                            let ao = c.bottom - an * k.k();
                            if (ab.j > ao) {
                                ab.l -= ab.j - ao;
                                ab.h = true;
                                q = true;
                                ai.c = false;
                                let ap = this.b(x - 1, x, x, ai);
                                if (!ap.b) {
                                    ab.l = ap.a.j;
                                }
                            }
                        }
                    }
                    if (z == 4) {
                        ab.l += (c.bottom - ab.j);
                        ab.h = true;
                        b.b7++;
                        q = true;
                        this.y(a, x - 1, x, 4, l, t);
                    }
                }
                for (let aq = 0; aq < l.length; aq++) {
                    for (let ar = aq + 1; ar < l.length; ar++) {
                        let as = t.item(l[aq]);
                        let at = t.item(l[ar]);
                        if (at.l < as.j) {
                            at.g = true;
                            at.d = Math.round(at.j) <= Math.round(as.j);
                        }
                        else {
                            break;
                        }
                    }
                }
                for (let au = 0; au <= p; au++) {
                    let av = l[au];
                    let aw = t.item(av).l;
                    let ax = t.item(av).j;
                    let ay = t.item(av).k;
                    let az = t.item(av).g;
                    let a0 = t.item(av).d;
                    m = av;
                    let a1 = false;
                    let a2 = false;
                    let a3 = false;
                    if (t.item(av).a == 3) {
                        a1 = true;
                        a2 = true;
                    }
                    if (t.item(av).a == 3 && t.item(av).e) {
                        a3 = true;
                    }
                    u.add(t.item(av));
                    if (!e) {
                        this.p(a, b, d, j, a.de, av, aw, ay, true, a1, a2, a3, az, a0);
                    }
                }
                if (q) {
                    let a4 = 0;
                    for (let a5 = 0; a5 < l.length; a5++) {
                        let a6 = l[a5];
                        if (!t.item(a6).h) {
                            continue;
                        }
                        if (o == -1) {
                            o = a6;
                        }
                        let a7 = t.item(a6).l;
                        let a8 = t.item(a6).j;
                        let a9 = t.item(a6).k;
                        let ba = t.item(a6).g;
                        let bb = t.item(a6).d;
                        n = a6;
                        let bc = t.item(a6).a == 3 && t.item(a6).e;
                        let bd = t.item(a6).a == 3;
                        if (!e) {
                            j.i = true;
                            j.o = (b.cp - 1) - a4;
                            this.p(a, b, d, j, a.de, a6, a7, a9, true, bd, bd, bc, ba, bb);
                            j.i = false;
                            j.o = -1;
                        }
                        a4++;
                    }
                }
            }
            for (let be = Math.max(m + 1, g.w); be <= f.w; be++) {
                if (o != -1 && n != -1) {
                    if (be >= o && be <= n) {
                        continue;
                    }
                }
                let bf = k.f(be);
                bf += k.i;
                let bg = k.e(be);
                let bh = false;
                let bi = false;
                let bj = false;
                let bk = a.d9.getRowType(be);
                if (bk == 3) {
                    bj = true;
                    bi = true;
                }
                if (bk == 0 && a.d9.isRowPinned(be)) {
                    bi = true;
                }
                if (bk == 3) {
                    if (t.containsKey(be) && t.item(be).e) {
                        bh = true;
                    }
                }
                if (!e) {
                    this.p(a, b, d, j, a.de, be, bf, bg, false, bi, bj, bh, false, false);
                }
            }
            return u;
        }
        y(a, b, c, d, e, f) {
            if (b < 0) {
                return;
            }
            let g = e[b];
            let h = e[c];
            if (f.item(g).a == d) {
                if (f.item(g).j > f.item(h).l) {
                    f.item(g).l -= f.item(g).j - f.item(h).l;
                    f.item(g).h = true;
                    this.y(a, b - 1, b, d, e, f);
                }
            }
        }
        b(a, b, c, d) {
            let e = d.a[a];
            let f = d.a[b];
            let g = d.a[c];
            let h = d.d;
            let i = h.item(e).n;
            let j = h.item(f).n;
            let k = h.item(g).n;
            let l = true;
            if (f == 12) {
                let m = 0;
            }
            d.e++;
            if (h.item(f).l < h.item(e).j) {
                if (j > i || (j == i && d.b)) {
                    let n = h.item(f).l - h.item(e).j;
                    let o = this.g(n, a, c, d);
                    let p = null;
                    while (o && a > 0) {
                        a = a - 1;
                        p = this.b(a, c, c, d);
                        o = p.b;
                    }
                    if (p == null) {
                        p = ((() => {
                            let $ret = new PushRowResult();
                            $ret.b = o;
                            $ret.a = h.item(d.a[a]);
                            return $ret;
                        })());
                    }
                    return p;
                }
                else if (j == i && !d.b) {
                    return ((() => {
                        let $ret = new PushRowResult();
                        $ret.b = false;
                        $ret.a = h.item(e);
                        return $ret;
                    })());
                }
                else if (j < i) {
                    if (k >= i) {
                        if (!l) {
                            let q = h.item(f).l - h.item(e).j;
                            return ((() => {
                                let $ret = new PushRowResult();
                                $ret.b = this.g(q, a, c, d);
                                $ret.a = h.item(e);
                                return $ret;
                            })());
                        }
                        else {
                            if (h.item(g).l < h.item(e).j) {
                                let r = h.item(g).l - h.item(e).j;
                                return ((() => {
                                    let $ret = new PushRowResult();
                                    $ret.b = this.g(r, a, c, d);
                                    $ret.a = h.item(e);
                                    return $ret;
                                })());
                            }
                        }
                        return ((() => {
                            let $ret = new PushRowResult();
                            $ret.b = true;
                            $ret.a = h.item(e);
                            return $ret;
                        })());
                    }
                    return ((() => {
                        let $ret = new PushRowResult();
                        $ret.b = false;
                        $ret.a = h.item(e);
                        return $ret;
                    })());
                }
            }
            return ((() => {
                let $ret = new PushRowResult();
                $ret.b = true;
                $ret.a = h.item(e);
                return $ret;
            })());
        }
        g(a, b, c, d) {
            let e = d.a[b];
            d.d.item(e).l += a;
            d.d.item(e).h = !d.c;
            if (b > 0) {
                let f = this.b(b - 1, b, c, d);
                if (!d.b || !d.c) {
                    if (!f.b) {
                        let g = d.a[b - 1];
                        d.d.item(e).l = d.d.item(g).j;
                        return false;
                    }
                }
            }
            return true;
        }
        p(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
            d.w = f;
            d.d = 0;
            d.ao = m;
            d.af = n;
            let o = b.br;
            let p = c.d;
            let q = c.f;
            let r = c.e;
            let s = a.lg;
            let t = a.d9.getRowType(f);
            d.aq = t == 4;
            d.at = t == 5;
            let u = false;
            if (t != 0) {
                u = a.d9.isRowSpanning(t) && a.dy != 1;
            }
            if (u) {
                let v = a.iv ? b.cf : 0;
                let w = a.iv ? b.cg : 0;
                let x = p;
                let y = r;
                if (v > 0) {
                    d.az = -401;
                    y = b.cf;
                    this.z(x, y, g, h, d.aa(), b, p, q, a, i, j, k, l, t);
                }
                d.az = -400;
                x = p + v;
                y = r - v - w;
                this.z(x, y, g, h, d.aa(), b, p, q, a, i, j, k, l, t);
                if (w > 0) {
                    d.az = -402;
                    x = q - b.cg;
                    y = b.cg;
                    this.z(x, y, g, h, d.aa(), b, p, q, a, i, j, k, l, t);
                }
            }
            else {
                for (let z = 0; z < b.bx.count; z++) {
                    let aa = b.bx._inner[z];
                    let ab = o._inner[aa];
                    d.az = ab.m;
                    d.a5 = ab.n;
                    d.d = ab.d;
                    let ac = d.aa();
                    this.z(c.o.c + ab.l, ab.k, g, h, ac, b, p, q, a, i, j, k, l, t);
                }
            }
            let ad = t != 4 && t != 2 && (t != 5 || a.dy != 3);
            if (ad && i) {
                b.cv = truncate(Math.round((g + h + a.lh) - c.j));
            }
            let ae = t == 4 || (t == 5 && a.dy == 3);
            if (ae && i && g < c.g) {
                b.cu += truncate(h) + a.lh;
            }
            if (s > 0) {
                if (ad && i) {
                    b.cv = truncate(Math.round((g + h + a.lh + s) - c.j));
                }
                if (ae && i && g < c.g) {
                    b.cu += s;
                }
                d.d = 0;
                d.az = -300;
                d.ar = t == 4;
                this.ad(c, d.aa(), b, p, r, g + h + a.lh, s, a, i, j, k, l, t);
            }
        }
        r(a, b, c, d, e, f, g, h) {
            let i = d.d;
            let j = d.f;
            let k = d.e;
            e.x = a;
            e.w = -201;
            e.az = 0;
            let l = new CellPath(1, e.az, e.x, e.w);
            let m = h.i + h.l() - h.d;
            let n = m;
            if (a == g) {
                n = d.g - h.d;
                if (n < (h.i + h.g)) {
                    n = (h.i + h.g);
                }
                this.ac(l, c, i, Math.min(m, n), k, a, false, true, b);
            }
            else {
                this.ab(l, c, i, Math.min(m, n), k, a, false, b);
            }
        }
        s(a, b, c, d, e, f, g, h) {
            let i = d.d;
            let j = d.f;
            let k = d.e;
            e.x = a;
            e.w = -200;
            e.az = 0;
            let l = new CellPath(1, e.az, e.x, e.w);
            if (a == f.x) {
                if (h == g.m - 1) {
                    let m = g.j(h);
                    let n = g.f(h) + g.i;
                    let o = (n + m) - g.g;
                    this.ac(l, c, i, Math.min(o, d.j), k, a, true, true, b);
                }
                else {
                    this.ac(l, c, i, Math.max(g.i, d.j - b.inset.e), k, a, true, true, b);
                }
            }
            else {
                this.ab(l, c, i, g.i, k, a, true, b);
            }
        }
        n(a, b, c, d) {
            let e = b.br;
            let f = a.inset;
            let g = f.e;
            if (b.ci > 0) {
                let h = Math.max(c.j, g);
                b.bj = this.f;
                if (this.f) {
                    h = g;
                }
                for (let i = 0; i < b.bx.count; i++) {
                    let j = b.bx._inner[i];
                    let k = e._inner[j];
                    let l = new CellPath(1, k.m, -100, -100);
                    l.d = k.d;
                    this.aa(l, b, h, c.d, c.f, a);
                    if (a.hv) {
                        let m = new CellPath(1, k.m, -100, -101);
                        m.d = k.d;
                        let n = a.km(a.la);
                        let o = a.la + n * 2;
                        let p = c.o.c + b.br._inner[l.az].l + b.br._inner[l.az].k - a.la - n;
                        this.ae(m, b, h, p, o, b.cl, c.d, c.f, a);
                    }
                }
                if (b.cm > 0) {
                    let q = new CellPath(1, -300, -100, -100);
                    this.ad(c, q, b, c.d, c.e, 0, b.cm, a, false, false, false, false, 0);
                }
            }
            if (a.bu == 0 && a.dragger != null && a.dragger.isDragActive && a.dragger.dragType == 1) {
                let r = new CellPath(1, -400, 0, -102);
                this.ae(r, b, Math.max(c.j, g), a.ld, a.kp, b.by, c.h, c.i, a);
            }
            if (a.bg != 1 && a.dragger != null && a.dragger.isDragActive && a.dragger.dragType == 2) {
                let s = new CellPath(1, -400, 0, -102);
                this.ae(s, b, c.j, a.ld, a.kn, b.by, c.h, c.i, a);
            }
        }
        o(a, b, c, d) {
            if (b.cd > -1) {
                b.b4 = c.d + a.e6.k(b.cd, a, b) - a.lc;
            }
            else {
                b.b4 = b.cf;
            }
            if (b.ce > -1) {
                let e = b.br._inner[b.ce].l - a.lc;
                if (c.i >= b.absoluteWidth) {
                    b.b5 = e + a.inset.c;
                }
                else {
                    b.b5 = e - (b.absoluteWidth - c.i - a.inset.c - a.inset.d);
                }
            }
            let f = Math.max(c.j - b.ci, a.inset.e);
            let g = c.j;
            let h = b.b7 * (a.kl + a.lg + a.lh);
            let i = c.g - h;
            let j = Math.min(b.absoluteHeight - h, c.g - h);
            let k = Math.max(0, j - g);
            let l = new CellPath(1, 0, 0, 0);
            if (b.cf > 0) {
                l.az = -500;
                if (b.ci > 0) {
                    l.w = -100;
                    this.ae(l.aa(), b, f, b.b4, a.lc, b.ci, c.d, c.i, a);
                }
                l.w = -103;
                this.ae(l.aa(), b, g, b.b4, a.lc, k, c.d, c.i, a);
                if (b.b7 > 0) {
                    l.w = -104;
                    this.ae(l.aa(), b, i, b.b4, a.lc, h, c.d, c.i, a);
                }
            }
            if (b.cg > 0) {
                l.az = -501;
                if (b.ci > 0) {
                    l.w = -100;
                    this.ae(l.aa(), b, f, b.b5, a.lc, b.ci, c.d, c.i, a);
                }
                l.w = -103;
                this.ae(l.aa(), b, g, b.b5, a.lc, k, c.d, c.i, a);
                if (b.b7 > 0) {
                    l.w = -104;
                    this.ae(l.aa(), b, i, b.b5, a.lc, h, c.d, c.i, a);
                }
            }
        }
        w(a, b, c, d, e, f, g, h, i) {
            this.x(a, b, c, d, e, f, g, h, i, false, false, false);
        }
        x(a, b, c, d, e, f, g, h, i, j, k, l) {
            let m = a.de.b(c, a, b, d, e, j, k, l);
            a.de.h(m, b, f, g, h, i);
            if (a.cb.j) {
                if (a.cb.a == null && a.cb.n == m.k.w && a.cb.m == m.k.az) {
                    a.cb.u(m);
                }
            }
            else {
                if (a.ar != null && a.ar.az == m.k.az && a.ar.w == m.k.w) {
                    a.ix(m);
                }
            }
        }
        z(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
            let o = f.al;
            let p = e.d;
            let q = e.d != 0;
            let r = i.e6;
            let s = 1;
            if (n == 1) {
                s = 2;
            }
            if (n == 2) {
                s = 3;
            }
            if (e.az == -400 || e.az == -401 || e.az == -402) {
                if (n == 1 || n == 2) {
                    if (!e.af) {
                        o = j && !e.ao ? f.a3 : f.a6;
                    }
                    else {
                        o = f.al;
                    }
                }
            }
            else {
                if (f.br._inner[e.az].a == 1 || f.br._inner[e.az].a == 2 || f.br._inner[e.az].a == 3) {
                    if (j) {
                        o = n != 4 ? f.a1 : f.a9;
                    }
                    else {
                        o = q ? f.as : f.a7;
                    }
                }
                else if (f.br._inner[e.az].a == 6) {
                    q = e.d != 0 || i.columns._inner[e.az].fj != 0;
                    if (j) {
                        o = n != 4 ? f.a2 : f.bc;
                    }
                    else {
                        o = q ? f.av : f.ba;
                    }
                }
                else {
                    if (j) {
                        o = n != 4 ? (q ? f.aq : f.a0) : (q ? f.ap : f.az);
                    }
                    else {
                        o = q ? f.an : f.al;
                    }
                }
            }
            if (p == 1) {
                let t = f.br._inner[e.az].l;
                a = g + t;
            }
            else if (p == 2) {
                let u = f.br._inner[e.az].l;
                if (h >= f.absoluteWidth) {
                    a = u + i.inset.c;
                }
                else {
                    a = u - (f.absoluteWidth - h - i.inset.c - i.inset.d);
                }
            }
            this.x(i, f, e, o, s, a, c, b, d, k, l, m);
        }
        aa(a, b, c, d, e, f) {
            let g = a.d == 0 ? b.az : b.ap;
            if (b.br._inner[a.az].a == 1 || b.br._inner[a.az].a == 2 || b.br._inner[a.az].a == 3) {
                g = a.d == 0 ? b.a9 : b.au;
            }
            if (b.br._inner[a.az].a == 6) {
                g = a.d == 0 && f.columns._inner[a.az].fj == 0 ? b.bc : b.ax;
            }
            let h = b.br._inner[a.az].l + f.inset.c;
            let i = b.br._inner[a.az].k;
            if (a.d == 1) {
                h = d + b.br._inner[a.az].l;
            }
            else if (a.d == 2) {
                let j = b.br._inner[a.az].l;
                if (e >= b.absoluteWidth) {
                    h = j + f.inset.c;
                }
                else {
                    h = j - (b.absoluteWidth - e - f.inset.c - f.inset.d);
                }
            }
            this.w(f, b, a, g, 0, h, c, i, b.cl);
        }
        ae(a, b, c, d, e, f, g, h, i) {
            let j = b.bd;
            if (a.h) {
                j = a.d == 0 ? b.ay : b.ao;
                if (b.br._inner[a.az].a == 1 || b.br._inner[a.az].a == 2 || b.br._inner[a.az].a == 3) {
                    j = a.d == 0 ? b.a8 : b.at;
                }
                if (b.br._inner[a.az].a == 6) {
                    j = a.d == 0 && i.columns._inner[a.az].fj == 0 ? b.bb : b.aw;
                }
                if (a.d == 1) {
                    d += g - i.inset.c;
                }
                else if (a.d == 2) {
                    if (h < b.absoluteWidth) {
                        d -= b.absoluteWidth - h - i.inset.d;
                    }
                }
            }
            if (!i.iv) {
                if ((a.al || a.an) && a.w != -104) {
                    j = b.ar;
                }
            }
            this.w(i, b, a, j, 5, d, c, e, f);
        }
        ab(a, b, c, d, e, f, g, h) {
            this.ac(a, b, c, d, e, f, g, false, h);
        }
        ac(a, b, c, d, e, f, g, h, i) {
            let j = g ? b.bv._inner[f].g : b.bv._inner[f].d;
            let k = 3;
            let l = b.a6;
            if (g) {
                k = 2;
            }
            if (h) {
                l = b.a6;
            }
            this.w(i, b, a, l, k, c, d, e, j);
        }
        ad(a, b, c, d, e, f, g, h, i, j, k, l, m) {
            let n = 0;
            let o = c.al;
            if (i) {
                if (m == 1 || m == 2) {
                    o = !b.ao ? c.a3 : c.a6;
                }
                else if (m == 4) {
                    o = c.a5;
                }
                else {
                    o = c.aq;
                }
            }
            else {
                if (m == 1 || m == 2) {
                    o = c.a6;
                }
            }
            if (b.g) {
                let p = h.inset;
                let q = p.e;
                let r = Math.max(a.j, q);
                n = r + c.cl;
                if (this.f) {
                    n = a.o.e + c.cl;
                }
                o = c.ay;
            }
            else {
                let s = c.bv._inner[b.x];
                n = f;
            }
            this.x(h, c, b, o, 4, d, n, e, g, j, k, l);
        }
    }
    VisibilityEngine.$t = /*@__PURE__*/ markType(VisibilityEngine, 'VisibilityEngine');
    return VisibilityEngine;
})();
/**
 * @hidden
 */
export let PinnedRowInfo = /*@__PURE__*/ (() => {
    class PinnedRowInfo extends Base {
        constructor() {
            super(...arguments);
            this.m = 0;
            this.o = null;
            this.l = 0;
            this.k = 0;
            this.i = 0;
            this.e = false;
            this.c = false;
            this.a = 0;
            this.f = false;
            this.n = 0;
            this.g = false;
            this.d = false;
            this.b = null;
        }
        get j() {
            return this.l + this.i;
        }
        get h() {
            return this.c;
        }
        set h(a) {
            let b = this.c;
            this.c = a;
            if (this.c != b) {
                if (this.b != null) {
                    this.b.cp = Math.min(0, this.c ? this.b.cp + 1 : this.b.cp - 1);
                }
            }
        }
        toString() {
            return EnumUtil.getName(DataSourceRowType_$type, this.a) + "(" + this.n + ") " + this.j;
        }
    }
    PinnedRowInfo.$t = /*@__PURE__*/ markType(PinnedRowInfo, 'PinnedRowInfo');
    return PinnedRowInfo;
})();
/**
 * @hidden
 */
export let PushRowSettings = /*@__PURE__*/ (() => {
    class PushRowSettings extends Base {
        constructor() {
            super(...arguments);
            this.a = null;
            this.d = null;
            this.b = false;
            this.c = false;
            this.e = 0;
        }
    }
    PushRowSettings.$t = /*@__PURE__*/ markType(PushRowSettings, 'PushRowSettings');
    return PushRowSettings;
})();
/**
 * @hidden
 */
export let PushRowResult = /*@__PURE__*/ (() => {
    class PushRowResult extends Base {
        constructor() {
            super(...arguments);
            this.b = false;
            this.a = null;
        }
    }
    PushRowResult.$t = /*@__PURE__*/ markType(PushRowResult, 'PushRowResult');
    return PushRowResult;
})();
/**
 * @hidden
 */
export let ICellRenderingEngine_$type = /*@__PURE__*/ new Type(null, 'ICellRenderingEngine');
/**
 * @hidden
 */
export let SpatialEngine = /*@__PURE__*/ (() => {
    class SpatialEngine extends Base {
        constructor() {
            super(...arguments);
            this.f = new List$1(ColumnInfo.$, 0);
            this.c = new Dictionary$2(Number_$type, ColumnInfo.$, 0);
            this.d = new List$1(Number_$type, 0);
            this.e = new List$1(Number_$type, 0);
            this.a = new GridColumnSpacerCollection();
        }
        r(a, b, c) {
            b.absoluteHeight = 0;
            b.absoluteWidth = 0;
            b.absoluteHeight = truncate(a.inset.e);
            b.ch = truncate(a.inset.e);
            b.bv.clear();
            this.c.clear();
            for (let d = 0; d < a.model.br.count; d++) {
                this.c.addItem(a.model.br._inner[d].o, a.model.br._inner[d]);
            }
            b.c1();
            b.cf = 0;
            b.cg = 0;
            b.cd = -1;
            b.ce = -1;
            a.model.cc = a.kq;
            if (a.d9 == null) {
                return;
            }
            let e = a.d9.getSectionCount();
            e = Math.max(1, e);
            a.model.cm = a.kk > 0 ? a.lg : 0;
            a.model.ci = a.kk + a.model.cm;
            a.model.cl = a.kk;
            a.model.absoluteHeight += a.model.ci;
            a.model.ch += a.model.ci;
            a.model.b0 = a.inset.c;
            a.model.b1 = a.inset.d;
            a.model.b2 = a.inset.e;
            a.model.bz = a.inset.b;
            for (let f = 0; f < e; f++) {
                let g = new SectionInfo();
                g.h = f;
                g.i = b.absoluteHeight;
                g.m = a.d9.getRowCount();
                g.g = a.lk;
                g.d = a.li;
                g.o = a.lg;
                g.p = a.lh;
                g.n = a.kl;
                g.q = g.m * g.n;
                a.model.absoluteHeight += g.l();
                a.model.bv.add(g);
            }
            let h = a.defaultColumnWidth;
            let i = 0;
            let j = a.defaultColumnWidth;
            let k = a.jn;
            this.f.clear();
            this.d.clear();
            this.e.clear();
            for (i = 0; i < a.actualColumns.count; i++) {
                let l = new ColumnInfo();
                if (this.c.containsKey(a.actualColumns._inner[i].g2)) {
                    l = this.c.item(a.actualColumns._inner[i].g2);
                }
                l.m = i;
                let m = a.actualColumns._inner[i];
                l.p = m.hy;
                l.o = m.g2;
                if (m.e8 == 3) {
                    l.h = -1;
                }
                if (m.e8 == 5) {
                    l.h = 0;
                }
                l.a = m.e8;
                let n = null;
                h = m.width;
                if (n == null) {
                    n = (h == null) ? j : h;
                }
                let o = 0;
                if (!isNaN_(k)) {
                    o = k;
                }
                if (!isNaN_(n.e) && n.e > 0) {
                    o = Math.max(o, n.e);
                }
                if (!isNaN_(m.gm)) {
                    o = m.gm;
                }
                l.b = n;
                l.i = o;
                l.d = m.fk;
                l.n = i;
                if (l.d == 1) {
                    this.d.add(i);
                }
                if (l.d == 2) {
                    this.e.add(i);
                }
                if (m.e8 != 2 && m.e8 != 3) {
                    if (m.fk == 0) {
                        if (b.cd == -1) {
                            b.cd = i;
                        }
                    }
                    if (b.ce == -1 && m.fk == 2) {
                        b.ce = i;
                    }
                }
                a.model.cy(l);
            }
            this.s(b);
            this.c.clear();
            a.model.cf = 0;
            a.model.cg = 0;
            this.q(a, b, c);
            a.c9.ac();
            a.model.absoluteHeight += truncate(a.inset.b);
        }
        s(a) {
            if (this.d.count > 0 || this.e.count > 0) {
                for (let b = 0; b < a.br.count; b++) {
                    a.br._inner[b].n = this.m(a.br._inner[b].d, b, a);
                }
            }
        }
        q(a, b, c) {
            b.absoluteWidth = 0;
            b.cj = 0;
            b.cf = 0;
            b.cg = 0;
            let d = a.model.cc;
            let e = a.model.cc;
            let f = 0;
            let g = new List$1(ColumnInfo.$, 0);
            let h = b.bw;
            for (let i of fromEnum(b.br)) {
                if (i.b.c) {
                    f += i.b.f * this.g(i);
                    g.add(i);
                }
                else {
                    i.k = truncate((Math.max(DeviceUtils.g(i.b.f), i.i)));
                    if (i.a != 3) {
                        if (i.a == 6) {
                            e += i.k + a.model.cc;
                        }
                        else {
                            e += i.k + a.model.cc - truncate(Math.round(i.f(b)));
                        }
                        b.cj += i.k + a.model.cc;
                        if (i.d == 1) {
                            b.cf += i.k + b.cc - truncate(Math.round(i.f(b)));
                        }
                        if (i.d == 2) {
                            b.cg += i.k + b.cc - truncate(Math.round(i.f(b)));
                        }
                    }
                    if (i.a == 6) {
                        d += i.k + a.model.cc;
                    }
                    else {
                        d += i.k + a.model.cc - truncate(Math.round(i.f(b)));
                    }
                }
            }
            b.cf = Math.max(0, b.cf - b.cc);
            if (f > 0) {
                let j = e;
                e = SpatialEngine.p(a, b, c, d, e, f, g);
            }
            a.model.absoluteWidth = e;
            a.model.absoluteWidth += truncate((a.inset.c + a.inset.d));
            a.model.cj += truncate((a.inset.c + a.inset.d));
        }
        g(a) {
            if (a.a == 6) {
                return 1;
            }
            if (a.a == 3) {
                return 0;
            }
            let b = 1 - Math.max(0, Math.min(1, Math.abs(a.h)));
            return b;
        }
        static p(a, b, c, d, e, f, g) {
            c -= d;
            c -= truncate((a.inset.c + a.inset.d));
            c -= (g.count * a.model.cc);
            c -= a.model.cs + a.model.ct;
            let h = 0;
            let i = (c) / f;
            if (i < 0) {
                i = 0;
            }
            if (c < 0) {
                c = 0;
            }
            let j = false;
            let k = new HashSet$1(ColumnInfo.$, 0);
            while (f > 0 && !j) {
                j = true;
                for (let l of fromEnum(g)) {
                    if (k.contains(l)) {
                        continue;
                    }
                    if (l.i > i * l.b.f) {
                        j = false;
                        if (l.a != 3) {
                            f--;
                        }
                        k.add_1(l);
                        l.k = truncate(l.i);
                        if (l.a != 6) {
                            if (l.a != 3) {
                                e += (l.k) + a.model.cc - truncate(Math.round(l.f(b)));
                                b.cj += l.k + a.model.cc;
                            }
                            if (l.a == 6) {
                                let m = (l.k) + a.model.cc;
                                d += m;
                                c -= m;
                            }
                            else {
                                let n = (l.k) + a.model.cc - truncate(Math.round(l.f(b)));
                                d += n;
                                c -= n;
                            }
                        }
                        else {
                            e += l.k;
                            b.cj += l.k + a.model.cc;
                        }
                    }
                }
                i = (c) / f;
            }
            if (c < 0) {
                c = 0;
            }
            let o = 0;
            for (let p of fromEnum(g)) {
                if (k.contains(p)) {
                    if (p.a != 3) {
                        if (p.d == 1) {
                            a.model.cf += p.k + a.model.cc;
                        }
                        if (p.d == 2) {
                            a.model.cg += p.k + a.model.cc;
                        }
                    }
                    continue;
                }
                let q = Math.max(p.i, i * p.b.f);
                let r = o + q;
                o += q;
                if (Math.round(r) >= r) {
                    p.k = truncate(Math.ceil(q));
                }
                else {
                    p.k = truncate(Math.floor(q));
                }
                e += a.model.cc;
                d += a.model.cc;
                h += a.model.cc;
                o += a.model.cc;
                b.cj += a.model.cc;
                if (p.a != 3) {
                    if (p.a == 6) {
                        e += p.k;
                    }
                    else {
                        e += p.k - truncate(Math.round(p.f(b)));
                    }
                    if (p.d == 1) {
                        a.model.cf += p.k + a.model.cc;
                    }
                    if (p.d == 2) {
                        a.model.cg += p.k + a.model.cc;
                    }
                    b.cj += p.k;
                }
                if (p.a == 6) {
                    d += p.k;
                    h += p.k;
                }
                else {
                    d += p.k - truncate(Math.round(p.f(b)));
                    h += p.k - truncate(Math.round(p.f(b)));
                }
            }
            a.model.cf = Math.max(0, a.model.cf - a.model.cc);
            if (h < c) {
                let s = (c - h - a.model.cc);
                g._inner[g.count - 1].k += s;
                e += s;
                d += s;
                b.cj += s;
            }
            if (h > c) {
                let t = (c - h - a.model.cc);
                g._inner[g.count - 1].k += t;
                e += t;
                d += t;
                b.cj += t;
            }
            return e;
        }
        k(a, b, c) {
            return this.l(a, c, false);
        }
        l(a, b, c) {
            let d = 0;
            if (b.br._inner[a].d == 1) {
                d += this.h(a, b.br._inner[a].o, 1, b);
            }
            if (b.br._inner[a].d == 0) {
                d += this.h(b.br.count, b.br._inner[a].o, 1, b);
                d += this.h(a, b.br._inner[a].o, 0, b);
            }
            if (b.br._inner[a].d == 2) {
                d += this.h(b.br.count, b.br._inner[a].o, 1, b);
                d += this.h(b.br.count, b.br._inner[a].o, 0, b);
                d += this.h(a, b.br._inner[a].o, 2, b);
            }
            d += truncate(Math.round(b.bw._inner[a].ad(b.br._inner[a].o)));
            if (!c) {
                d = truncate((d + Math.round(b.br._inner[a].e(b))));
            }
            return d;
        }
        h(a, b, c, d) {
            let e = 0;
            for (let f = 0; f < a; f++) {
                if (d.br._inner[f].d == c) {
                    e += truncate(Math.round(d.bw._inner[f].ad(b)));
                    if (d.br._inner[f].a != 6) {
                        e += (d.br._inner[f].k) + d.cc - truncate(Math.round(d.br._inner[f].f(d)));
                    }
                    e += truncate(Math.round(d.bw._inner[f].af(b)));
                }
            }
            return e;
        }
        m(a, b, c) {
            let d = b;
            if (a == 0) {
                let e = 0;
                for (let f = 0; f < b; f++) {
                    if (c.br._inner[f].d == 0) {
                        e++;
                    }
                }
                d = this.d.count + e;
            }
            if (a == 1) {
                let g = 0;
                for (let h = 0; h < this.d.count; h++) {
                    if (this.d._inner[h] < b) {
                        g++;
                    }
                }
                d = g;
            }
            if (a == 2) {
                let i = 0;
                for (let j = 0; j < this.e.count; j++) {
                    if (this.e._inner[j] > b) {
                        i++;
                    }
                }
                d = c.br.count - 1 - i;
            }
            return d;
        }
        j(a, b) {
            for (let c = 0; c < b.br.count; c++) {
                if (b.br._inner[c].n == a) {
                    return c;
                }
            }
            return -1;
        }
        n(a, b, c) {
            let d = c.br._inner[a].o;
            let e = truncate(b.inset.c) + c.cf + c.cc;
            let f = c.bw;
            let g = c.br;
            for (let h = 0; h < a; h++) {
                if (g._inner[h].d != 0) {
                    continue;
                }
                e += truncate(Math.round(f._inner[h].ad(d)));
                if (g._inner[h].a != 6) {
                    e += (g._inner[h].k) + b.model.cc - truncate(Math.round(g._inner[h].f(c)));
                }
                e += truncate(Math.round(f._inner[h].af(d)));
            }
            e += truncate(Math.round(f._inner[a].ad(d)));
            return (e);
        }
        o(a, b, c) {
            let d = 0;
            let e = 0;
            let f = truncate(b.inset.c);
            e += f;
            let g = c.bw;
            let h = c.br;
            let i = h.count;
            for (let j = 0; j < i; j++) {
                let k = h._inner[j];
                e += truncate(Math.round(g._inner[d].ad(-1)));
                if (k.a != 6) {
                    e += (k.k) + b.model.cc - truncate(Math.round(k.f(c)));
                }
                if (a <= e) {
                    return d;
                }
                e += truncate(Math.round(g._inner[d].af(-1)));
                d++;
            }
            let l = c.br.count - 1;
            if (d > l) {
                d = l;
            }
            return d;
        }
        b(a, b) {
            let c = b.bv.count;
            for (let d = 0; d < c; d++) {
                let e = b.bv._inner[d];
                let f = e.i;
                let g = f + e.l();
                if (a <= g) {
                    if (a < f) {
                        a = f;
                    }
                    return e.a(a);
                }
            }
            return new RowPath(b.bv.count - 1, b.bv._inner[b.bv.count - 1].m - 1);
        }
        v(a, b, c, d) {
            this.ab(a, b, d, false);
            for (let e = b + 1; e < d.br.count; e++) {
                this.aa(e, d, false, b);
            }
        }
        t(a, b, c) {
            for (let d = c.br.count - 1; d >= a; d--) {
                this.aa(d, c, true, a);
            }
        }
        x(a, b) {
            for (let c = 0; c < b.bu.count; c++) {
                let d = new List$1(CellModel.$, 0);
                let e = b.bu._inner[c];
                for (let f = 0; f < e.o.count; f++) {
                    if (e.p._inner[f]) {
                        continue;
                    }
                    let g = e.o._inner[f];
                    if (g.x > a.x || (g.x == a.x && g.w >= a.w)) {
                        d.add(e.q._inner[f]);
                    }
                }
                e.g = true;
                for (let h = 0; h < d.count; h++) {
                    let i = d._inner[h];
                    e.f(i.k);
                    i.k.w = i.k.w + 1;
                }
                for (let j = 0; j < d.count; j++) {
                    let k = d._inner[j];
                    e.s(k.k, k);
                }
                e.g = false;
            }
        }
        y(a, b, c) {
            for (let d = 0; d < c.bu.count; d++) {
                let e = new List$1(CellModel.$, 0);
                let f = c.bu._inner[d];
                let g = new List$1(CellPath.$, 0);
                for (let h = 0; h < f.o.count; h++) {
                    if (f.p._inner[h]) {
                        continue;
                    }
                    let i = f.o._inner[h];
                    if (i.x > b.x || (i.x == b.x && i.w > b.w)) {
                        e.add(f.q._inner[h]);
                    }
                    if (i.x == b.x && i.w == b.w) {
                        g.add(i);
                    }
                }
                f.g = true;
                for (let j = 0; j < g.count; j++) {
                    let k = g._inner[j];
                    a.j(k, f, c);
                }
                for (let l = 0; l < e.count; l++) {
                    let m = e._inner[l];
                    f.f(m.k);
                    m.k.w = m.k.w - 1;
                }
                for (let n = 0; n < e.count; n++) {
                    let o = e._inner[n];
                    f.s(o.k, o);
                }
                f.g = false;
            }
        }
        aa(a, b, c, d) {
            for (let e = 0; e < b.bu.count; e++) {
                let f = new List$1(CellModel.$, 0);
                let g = b.bu._inner[e];
                for (let h = 0; h < g.o.count; h++) {
                    if (g.p._inner[h]) {
                        continue;
                    }
                    let i = g.o._inner[h];
                    if (i.az == a && (i.ag || i.aj)) {
                        f.add(g.q._inner[h]);
                    }
                }
                g.g = true;
                for (let j = 0; j < f.count; j++) {
                    let k = f._inner[j];
                    g.f(k.k);
                    if (c) {
                        k.k.az = k.k.az + 1;
                    }
                    else {
                        k.k.az = k.k.az - 1;
                    }
                    g.s(k.k, k);
                }
                g.g = false;
            }
            let l = b.bw;
            if (c) {
                if (a == l.count - 1) {
                    l.add(new GridColumnSpacerCollection());
                }
                for (let m = l._inner[a].count - 1; m >= 0; m--) {
                    if (a != d || l._inner[a]._inner[m].d) {
                        l._inner[a + 1].add(l._inner[a]._inner[m]);
                        l._inner[a].removeAt(m);
                    }
                }
            }
            else {
                for (let n = l._inner[a].count - 1; n >= 0; n--) {
                    l._inner[a - 1].add(l._inner[a]._inner[n]);
                    l._inner[a].removeAt(n);
                }
            }
        }
        ab(a, b, c, d) {
            for (let e = 0; e < c.bu.count; e++) {
                let f = new List$1(CellModel.$, 0);
                let g = c.bu._inner[e];
                for (let h = 0; h < g.o.count; h++) {
                    if (g.p._inner[h]) {
                        continue;
                    }
                    let i = g.o._inner[h];
                    if (i.az == b && (i.ag || i.aj)) {
                        f.add(g.q._inner[h]);
                    }
                }
                g.g = true;
                for (let j = 0; j < f.count; j++) {
                    let k = f._inner[j];
                    if (d) {
                        g.f(k.k);
                        k.k.az = -800;
                        g.s(k.k, k);
                    }
                    else {
                        a.j(k.k, g, c);
                    }
                }
                g.g = false;
            }
            let l = c.bw;
            if (b < l.count) {
                for (let m = l._inner[b].count - 1; m >= 0; m--) {
                    this.a.add(l._inner[b]._inner[m]);
                    l._inner[b].removeAt(m);
                }
            }
        }
        z(a, b) {
            for (let c = 0; c < b.bu.count; c++) {
                let d = new List$1(CellModel.$, 0);
                let e = b.bu._inner[c];
                for (let f = 0; f < e.o.count; f++) {
                    if (e.p._inner[f]) {
                        continue;
                    }
                    let g = e.o._inner[f];
                    if (g.az == -800 && (g.ag || g.aj)) {
                        d.add(e.q._inner[f]);
                    }
                }
                e.g = true;
                for (let h = 0; h < d.count; h++) {
                    let i = d._inner[h];
                    e.f(i.k);
                    i.k.az = a;
                    e.s(i.k, i);
                }
                e.g = false;
            }
        }
        w(a, b) {
            for (let c = 0; c < b.br.count; c++) {
                this.ab(a, c, b, false);
            }
        }
        u(a, b, c, d, e) {
            this.ab(a, c, b, true);
            for (let f = c + 1; f < b.br.count; f++) {
                this.aa(f, b, false, c);
            }
            for (let g = b.br.count - 1; g >= d; g--) {
                this.aa(g, b, true, d);
            }
            this.z(d, b);
            let h = b.bw;
            for (let i = this.a.count - 1; i >= 0; i--) {
                h._inner[c].add(this.a._inner[i]);
                this.a.removeAt(i);
            }
        }
        i(a, b) {
            if (b == null) {
                return 0;
            }
            let c = 0;
            for (let d = 0; d < b.x; d++) {
                c += a.bv._inner[d].m;
            }
            c += b.w;
            return c;
        }
    }
    SpatialEngine.$t = /*@__PURE__*/ markType(SpatialEngine, 'SpatialEngine');
    return SpatialEngine;
})();
/**
 * @hidden
 */
export let ColumnExchanger = /*@__PURE__*/ (() => {
    class ColumnExchanger extends Base {
        constructor(a, ..._rest) {
            super();
            this.c = null;
            this.a = null;
            this.b = 0;
            a = (a == void 0) ? 0 : a;
            switch (a) {
                case 0: break;
                case 1:
                    {
                        let c = _rest[0];
                        let d = _rest[1];
                        this.a = c;
                        this.b = d;
                    }
                    break;
            }
        }
    }
    ColumnExchanger.$t = /*@__PURE__*/ markType(ColumnExchanger, 'ColumnExchanger');
    return ColumnExchanger;
})();
/**
 * @hidden
 */
export let ColumnExchangersCollection = /*@__PURE__*/ (() => {
    class ColumnExchangersCollection extends ObservableCollection$1 {
        constructor() {
            super(ColumnExchanger.$, 0);
        }
    }
    ColumnExchangersCollection.$t = /*@__PURE__*/ markType(ColumnExchangersCollection, 'ColumnExchangersCollection', /*@__PURE__*/ ObservableCollection$1.$.specialize(ColumnExchanger.$));
    return ColumnExchangersCollection;
})();
/**
 * @hidden
 */
export let ResponsiveEngine = /*@__PURE__*/ (() => {
    class ResponsiveEngine extends Base {
        constructor(a) {
            super();
            this.c = null;
            this.l = 500;
            this.m = 200;
            this.k = dateMinValue();
            this.h = false;
            this.i = false;
            this.j = null;
            this.a = null;
            this.f = null;
            this.b = null;
            this.d = null;
            this.a = a;
            this.g = new ResponsiveStatesCollection();
            this.j = new List$1(Number_$type, 0);
            this.h = true;
            this.d = null;
        }
        get g() {
            return this.f;
        }
        set g(a) {
            this.f = a;
        }
        x(a) {
            if (this.b == a) {
                return;
            }
            this.d = a;
            if (this.h) {
            }
            else {
                this.w();
            }
        }
        y(a, b) {
            this.k = dateNow();
            if (this.h) {
                this.q();
                this.h = false;
            }
            else {
                this.w();
            }
        }
        w() {
            if (this.i) {
                return;
            }
            let a = this.n();
            this.i = true;
            this.a.delayedExecutionManager.executeIn(() => {
                if (!this.i) {
                    return;
                }
                this.i = false;
                if (this.n() < 1) {
                    this.q();
                }
                else {
                    this.w();
                }
            }, a);
        }
        q() {
            if (this.b != null) {
                return;
            }
            let a = null;
            if (this.g.count > 0) {
                a = this.e(this.a.jm);
            }
            if (a == this.c) {
                return;
            }
            if (this.c != null && a != null) {
                this.c.q();
                this.c = null;
            }
            if (a != null) {
                if (this.d != null) {
                    this.d = null;
                }
                this.b = a;
                this.c = a;
                this.c.l = 0;
                this.c.p();
                this.t(this.c);
                this.c.o();
            }
        }
        t(a) {
            if (a.c.count == a.l) {
                this.b = null;
                let b = this.e(this.a.jm);
                {
                    if (b != this.c) {
                        this.w();
                    }
                }
                return;
            }
            if (this.h) {
                this.u(a);
                this.c.l = this.c.l + 1;
                this.t(a);
            }
            else {
                this.a.delayedExecutionManager.executeIn(() => {
                    let c = this.a.ck;
                    c.animationCompleted = delegateCombine(c.animationCompleted, runOn(this, this.p));
                    let d = this.a.ck;
                    d.animationCanceled = delegateCombine(d.animationCanceled, runOn(this, this.o));
                    this.a.ck.ar();
                    this.u(a);
                    this.j = this.a.ck.m();
                    if (this.j.count == 0) {
                        this.r(-1);
                    }
                }, a.c._inner[0].i);
            }
        }
        u(a) {
            let b = a.c._inner[a.l];
            this.v(b.e);
            this.s(b.b);
        }
        o(a, b) {
            this.r(b.a);
        }
        p(a, b) {
            this.r(b.a);
        }
        r(a) {
            if (this.j.contains(a)) {
                this.j.remove(a);
            }
            if (this.j.count == 0) {
                let b = this.a.ck;
                b.animationCompleted = delegateRemove(b.animationCompleted, runOn(this, this.p));
                let c = this.a.ck;
                c.animationCanceled = delegateRemove(c.animationCanceled, runOn(this, this.o));
                this.c.l = this.c.l + 1;
                this.t(this.c);
            }
        }
        v(a) {
            for (let b = 0; b < a.count; b++) {
                let c = a._inner[b];
                let d = null;
                for (let e = 0; e < this.a.actualColumns.count; e++) {
                    if (this.a.actualColumns._inner[e].id == c.c) {
                        d = this.a.actualColumns._inner[e];
                        break;
                    }
                }
                if (d == null) {
                    for (let f = 0; f < this.a.actualColumns.count; f++) {
                        if (this.a.actualColumns._inner[f].hy == c.c) {
                            d = this.a.actualColumns._inner[f];
                            break;
                        }
                    }
                }
                if (d == null) {
                    continue;
                }
                let g = d.externalObject;
                this.a.propertySetter.setProperty(g, c.d, c.b);
            }
        }
        s(a) {
            for (let b = 0; b < a.count; b++) {
                let c = a._inner[b];
                if (c.a == null) {
                    continue;
                }
                if (c.b >= this.a.actualColumns.count) {
                    continue;
                }
                let d = this.a.actualColumns._inner[c.b];
                this.a.p2(c.a, d);
            }
        }
        e(a) {
            if (this.d != null) {
                return this.d;
            }
            for (let b = 0; b < this.g.count; b++) {
                let c = this.g._inner[b];
                if (a >= c.k && a <= c.j && !c.i) {
                    return c;
                }
            }
            return null;
        }
        n() {
            let a = timeSpanFromMilliseconds(this.m);
            let b = timeSpanFromMilliseconds(this.l);
            if (+(this.k) != +(dateMinValue())) {
                a = +(dateNow()) - +(this.k);
            }
            let c = truncate(timeSpanTotalMilliseconds(a));
            let d = (this.m - c);
            if (d < 1) {
                d = 0;
            }
            return d;
        }
    }
    ResponsiveEngine.$t = /*@__PURE__*/ markType(ResponsiveEngine, 'ResponsiveEngine');
    return ResponsiveEngine;
})();
/**
 * @hidden
 */
export let ResponsivePhase = /*@__PURE__*/ (() => {
    class ResponsivePhase extends Base {
        constructor() {
            super(...arguments);
            this.j = null;
            this.k = null;
            this.i = 0;
            this.d = new ColumnPropertySettersCollection();
            this.a = new ColumnExchangersCollection();
        }
        get e() {
            return this.d;
        }
        get b() {
            return this.a;
        }
        g(a) {
            this.e.add(a);
            return this;
        }
        c() {
            let a = new ColumnPropertySetter(0);
            this.e.add(a);
            return a;
        }
        f(a) {
            this.b.add(a);
            return this;
        }
        h() {
            let a = new ColumnExchanger(0);
            this.b.add(a);
            return this;
        }
    }
    ResponsivePhase.$t = /*@__PURE__*/ markType(ResponsivePhase, 'ResponsivePhase');
    return ResponsivePhase;
})();
/**
 * @hidden
 */
export let ResponsivePhasesCollection = /*@__PURE__*/ (() => {
    class ResponsivePhasesCollection extends ObservableCollection$1 {
        constructor() {
            super(ResponsivePhase.$, 0);
        }
    }
    ResponsivePhasesCollection.$t = /*@__PURE__*/ markType(ResponsivePhasesCollection, 'ResponsivePhasesCollection', /*@__PURE__*/ ObservableCollection$1.$.specialize(ResponsivePhase.$));
    return ResponsivePhasesCollection;
})();
/**
 * @hidden
 */
export let ResponsiveState = /*@__PURE__*/ (() => {
    class ResponsiveState extends Base {
        constructor() {
            super(...arguments);
            this.m = null;
            this.n = null;
            this.k = 0;
            this.j = 0;
            this.stateEntering = null;
            this.stateEntered = null;
            this.stateExited = null;
            this.h = false;
            this.l = 0;
            this.b = new ResponsivePhasesCollection();
        }
        get i() {
            return this.h;
        }
        set i(a) {
            this.h = a;
        }
        get c() {
            return this.b;
        }
        d(a) {
            this.c.add(a);
            return this;
        }
        a() {
            let a = new ResponsivePhase();
            this.c.add(a);
            return a;
        }
        p() {
            if (this.stateEntering != null) {
                this.stateEntering(this, new ResponsiveStateEnteringEventArgs());
            }
        }
        o() {
            if (this.stateEntered != null) {
                this.stateEntered(this, new ResponsiveStateEnteredEventArgs());
            }
        }
        q() {
            if (this.stateExited != null) {
                this.stateExited(this, new ResponsiveStateExitedEventArgs());
            }
        }
    }
    ResponsiveState.$t = /*@__PURE__*/ markType(ResponsiveState, 'ResponsiveState');
    return ResponsiveState;
})();
/**
 * @hidden
 */
export let ResponsiveStatesCollection = /*@__PURE__*/ (() => {
    class ResponsiveStatesCollection extends ObservableCollection$1 {
        constructor() {
            super(ResponsiveState.$, 0);
        }
    }
    ResponsiveStatesCollection.$t = /*@__PURE__*/ markType(ResponsiveStatesCollection, 'ResponsiveStatesCollection', /*@__PURE__*/ ObservableCollection$1.$.specialize(ResponsiveState.$));
    return ResponsiveStatesCollection;
})();
/**
 * @hidden
 */
export let GridLayer = /*@__PURE__*/ (() => {
    class GridLayer extends FastIterationDictionary$2 {
        constructor(a) {
            super(CellPath.$, CellModel.$, 0);
            this.v = null;
            this.v = a;
        }
    }
    GridLayer.$t = /*@__PURE__*/ markType(GridLayer, 'GridLayer', /*@__PURE__*/ FastIterationDictionary$2.$.specialize(CellPath.$, CellModel.$));
    return GridLayer;
})();
/**
 * @hidden
 */
export let ColumnInfo = /*@__PURE__*/ (() => {
    class ColumnInfo extends Base {
        constructor() {
            super();
            this.m = 0;
            this.n = 0;
            this.b = null;
            this.i = 0;
            this.k = 0;
            this.l = 0;
            this.p = null;
            this.o = 0;
            this.c = 0;
            this.g = 0;
            this.j = 0;
            this.h = 0;
            this.a = 0;
            this.d = 0;
            this.g = 0;
            this.h = 0;
            this.j = 0;
            this.i = 0;
        }
        e(a) {
            let b = this.h;
            if (this.a != 6) {
                if (b > 0 && b < 1) {
                    b = 0;
                }
                if (b >= 1) {
                    b = b - 1;
                }
            }
            return this.g + b * (this.k + a.cc);
        }
        f(a) {
            let b = Math.abs(this.g + this.h * (this.k + a.cc));
            if (b < (-1 * (this.k + a.cc))) {
                b = (-1 * (this.k + a.cc));
            }
            if (b > (this.k + a.cc)) {
                b = (this.k + a.cc);
            }
            return b;
        }
    }
    ColumnInfo.$t = /*@__PURE__*/ markType(ColumnInfo, 'ColumnInfo');
    return ColumnInfo;
})();
/**
 * @hidden
 */
export let SectionInfo = /*@__PURE__*/ (() => {
    class SectionInfo extends Base {
        constructor() {
            super(...arguments);
            this.h = 0;
            this.m = 0;
            this.q = 0;
            this.o = 0;
            this.g = 0;
            this.d = 0;
            this.n = 0;
            this.p = 0;
            this.i = 0;
            this.b = null;
            this.c = null;
        }
        l() {
            return this.q + this.g + this.d + ((this.o + this.p) * this.m);
        }
        e(a) {
            if (a == -200) {
                return this.g;
            }
            if (a == -201) {
                return this.d;
            }
            if (this.b == null) {
                return this.n;
            }
            else {
                return this.b._inner[a];
            }
        }
        f(a) {
            if (this.c == null) {
                if (a == -200) {
                    return 0;
                }
                else if (a == -201) {
                    return this.l() - this.g;
                }
                return (a * this.k()) + this.g;
            }
            else {
                if (a == -200) {
                    return 0;
                }
                else if (a == -201) {
                    return this.l() - this.d;
                }
                return this.c._inner[a];
            }
        }
        k() {
            return this.n + this.p + this.o;
        }
        j(a) {
            if (this.c == null) {
                return this.n + this.p + this.o;
            }
            else {
                return this.b._inner[a] + this.o + this.p;
            }
        }
        a(a) {
            a -= this.i;
            if (a < this.g) {
                return new RowPath(this.h, -200);
            }
            else if (a > this.l() - this.d) {
                return new RowPath(this.h, -201);
            }
            a -= this.g;
            if (this.b == null) {
                let b = this.k();
                let c = truncate((a / b));
                if (c >= this.m) {
                    c = this.m - 1;
                }
                return new RowPath(this.h, c);
            }
            else {
                for (let d = 0; d < this.m; d++) {
                    let e = this.c._inner[d];
                    let f = this.j(d);
                    if (a >= e && a <= e + f) {
                        return new RowPath(this.h, d);
                    }
                }
            }
            return null;
        }
    }
    SectionInfo.$t = /*@__PURE__*/ markType(SectionInfo, 'SectionInfo');
    return SectionInfo;
})();
/**
 * @hidden
 */
export let VisualModel = /*@__PURE__*/ (() => {
    class VisualModel extends Base {
        constructor() {
            super();
            this._actualVisibleRegion = null;
            this._absoluteWidth = 0;
            this._absoluteHeight = 0;
            this.ci = 0;
            this.cl = 0;
            this.cm = 0;
            this.ch = 0;
            this.cf = 0;
            this.cg = 0;
            this.cc = 0;
            this.cs = 0;
            this.ct = 0;
            this.b4 = 0;
            this.b5 = 0;
            this.cd = 0;
            this.ce = 0;
            this.cj = 0;
            this.cp = 0;
            this.b7 = 0;
            this.b0 = 0;
            this.b1 = 0;
            this.b2 = 0;
            this.bz = 0;
            this.ae = null;
            this.p = null;
            this.i = null;
            this.k = null;
            this.ah = null;
            this.s = null;
            this.o = null;
            this.j = null;
            this.ag = null;
            this.r = null;
            this.q = null;
            this.af = null;
            this.w = null;
            this.v = null;
            this.l = null;
            this.aj = null;
            this.u = null;
            this.t = null;
            this.ai = null;
            this.m = null;
            this.x = null;
            this.n = null;
            this.y = null;
            this.z = null;
            this.aa = null;
            this.ab = null;
            this.ac = null;
            this.ad = null;
            this.ak = null;
            this.c = null;
            this.bg = null;
            this.bv = null;
            this.br = null;
            this.bl = false;
            this.bn = false;
            this.bk = false;
            this.bq = new List$1(GridColumnSpacerCollection.$, 0);
            this.bo = null;
            this.bf = null;
            this.be = null;
            this.cx = -1;
            this.f = null;
            this.bp = null;
            this.bx = null;
            this.cn = 0;
            this.cq = 0;
            this.co = 0;
            this.cr = 0;
            this.bj = false;
            this.cv = 0;
            this.cw = 0;
            this.cu = 0;
            this.actualVisibleRegion = Rect.empty;
            this.ae = new GridLayer("SubContentLayer");
            this.i = new GridLayer("ContentLayer");
            this.ah = new GridLayer("SuperContentLayer");
            this.j = new GridLayer("DecoratorLayer");
            this.x = new GridLayer("PinnedRowsLayer");
            this.y = new GridLayer("PinnedRowsSubLayer");
            this.z = new GridLayer("PinnedRowsSuperLayer");
            this.aa = new GridLayer("PinnedSectionLayer");
            this.ab = new GridLayer("PinnedSectionSubLayer");
            this.ac = new GridLayer("PinnedSectionSuperLayer");
            this.ad = new GridLayer("SectionLayer");
            this.ag = new GridLayer("SubHeaderLayer");
            this.w = new GridLayer("HeaderLayer");
            this.v = new GridLayer("HeaderDecoratorLayer");
            this.aj = new GridLayer("SuperHeaderLayer");
            this.ak = new GridLayer("VerticalSeparatorLayer");
            this.af = new GridLayer("SubHeaderDecoratorLayer");
            this.ai = new GridLayer("SuperHeaderDecoratorLayer");
            this.k = new GridLayer("FixedContentLayer");
            this.m = new GridLayer("FixedHeaderLayer");
            this.n = new GridLayer("FixedPinnedRowsLayer");
            this.o = new GridLayer("FixedSeparatorLayer");
            this.p = new GridLayer("FixedSubContentLayer");
            this.r = new GridLayer("FixedSubHeaderLayer");
            this.s = new GridLayer("FixedSuperContentLayer");
            this.u = new GridLayer("FixedSuperHeaderLayer");
            this.q = new GridLayer("FixedSubHeaderDecoratorLayer");
            this.u = new GridLayer("FixedSuperHeaderLayer");
            this.t = new GridLayer("FixedSuperHeaderDecoratorLayer");
            this.l = new GridLayer("FixedHeaderDecoratorLayer");
            this.bg = new FastIterationDictionary$2(CellPath.$, List$1.$.specialize(CellModel.$), 0);
            this.c2();
            this.bv = new List$1(SectionInfo.$, 0);
            this.br = new List$1(ColumnInfo.$, 0);
            this.bo = new Dictionary$2(Number_$type, Number_$type, 0);
            this.bx = new List$1(Number_$type, 0);
        }
        get actualVisibleRegion() {
            return this._actualVisibleRegion;
        }
        set actualVisibleRegion(a) {
            this._actualVisibleRegion = a;
        }
        get absoluteWidth() {
            return this._absoluteWidth;
        }
        set absoluteWidth(a) {
            this._absoluteWidth = a;
        }
        get absoluteHeight() {
            return this._absoluteHeight;
        }
        set absoluteHeight(a) {
            this._absoluteHeight = a;
        }
        get b8() {
            return truncate(this.actualVisibleRegion.top);
        }
        get b3() {
            return truncate(this.actualVisibleRegion.left);
        }
        get b6() {
            return truncate(this.actualVisibleRegion.right);
        }
        get by() {
            return truncate(this.actualVisibleRegion.height);
        }
        get b9() {
            return truncate(this.actualVisibleRegion.width);
        }
        get a7() {
            return this.ae;
        }
        set a7(a) {
            this.ae = a;
            this.c2();
        }
        get as() {
            return this.p;
        }
        set as(a) {
            this.p = a;
            this.c2();
        }
        get al() {
            return this.i;
        }
        set al(a) {
            this.i = a;
            this.c2();
        }
        get an() {
            return this.k;
        }
        set an(a) {
            this.k = a;
            this.c2();
        }
        get ba() {
            return this.ah;
        }
        set ba(a) {
            this.ah = a;
            this.c2();
        }
        get av() {
            return this.s;
        }
        set av(a) {
            this.s = a;
            this.c2();
        }
        get ar() {
            return this.o;
        }
        set ar(a) {
            this.o = a;
            this.c2();
        }
        get am() {
            return this.j;
        }
        set am(a) {
            this.j = a;
            this.c2();
        }
        get a9() {
            return this.ag;
        }
        set a9(a) {
            this.ag = a;
            this.c2();
        }
        get au() {
            return this.r;
        }
        set au(a) {
            this.r = a;
            this.c2();
        }
        get at() {
            return this.q;
        }
        set at(a) {
            this.q = a;
            this.c2();
        }
        get a8() {
            return this.af;
        }
        set a8(a) {
            this.af = a;
            this.c2();
        }
        get az() {
            return this.w;
        }
        set az(a) {
            this.w = a;
            this.c2();
        }
        get ay() {
            return this.v;
        }
        set ay(a) {
            this.v = a;
            this.c2();
        }
        get ao() {
            return this.l;
        }
        set ao(a) {
            this.l = a;
            this.c2();
        }
        get bc() {
            return this.aj;
        }
        set bc(a) {
            this.aj = a;
            this.c2();
        }
        get ax() {
            return this.u;
        }
        set ax(a) {
            this.u = a;
            this.c2();
        }
        get aw() {
            return this.t;
        }
        set aw(a) {
            this.t = a;
            this.c2();
        }
        get bb() {
            return this.ai;
        }
        set bb(a) {
            this.ai = a;
            this.c2();
        }
        get ap() {
            return this.m;
        }
        set ap(a) {
            this.m = a;
            this.c2();
        }
        get a0() {
            return this.x;
        }
        set a0(a) {
            this.x = a;
            this.c2();
        }
        get aq() {
            return this.n;
        }
        set aq(a) {
            this.n = a;
            this.c2();
        }
        get a1() {
            return this.y;
        }
        set a1(a) {
            this.y = a;
            this.c2();
        }
        get a2() {
            return this.z;
        }
        set a2(a) {
            this.z = a;
            this.c2();
        }
        get a3() {
            return this.aa;
        }
        set a3(a) {
            this.aa = a;
            this.c2();
        }
        get a4() {
            return this.ab;
        }
        set a4(a) {
            this.ab = a;
            this.c2();
        }
        get a5() {
            return this.ac;
        }
        set a5(a) {
            this.ac = a;
            this.c2();
        }
        get a6() {
            return this.ad;
        }
        set a6(a) {
            this.ad = a;
            this.c2();
        }
        get bd() {
            return this.ak;
        }
        set bd(a) {
            this.ak = a;
            this.c2();
        }
        e(a, b) {
            a += this.actualVisibleRegion.left;
            b += this.actualVisibleRegion.top;
            let c = this.bu;
            let d = c.count;
            for (let e = d - 1; e >= 0; e--) {
                if (c._inner[e] == this.al) {
                    break;
                }
                let f = c._inner[e].q;
                let g = c._inner[e].q.count;
                let h = c._inner[e].p;
                for (let i = 0; i < g; i++) {
                    if (h._inner[i]) {
                        continue;
                    }
                    let j = f._inner[i];
                    if (a >= j.cc && a <= j.cc + j.gf && b >= j.cd && b <= j.cd + j.e0) {
                        this.c = j;
                        return j;
                    }
                }
            }
            if (this.c != null) {
                let k = this.c;
                if (a >= k.cc && a <= k.cc + k.gf && b >= k.cd && b <= k.cd + k.e0) {
                    this.c = k;
                    return k;
                }
            }
            c = this.bu;
            d = c.count;
            for (let l = d - 1; l >= 0; l--) {
                let m = c._inner[l].q;
                let n = c._inner[l].q.count;
                let o = c._inner[l].p;
                for (let p = 0; p < n; p++) {
                    if (o._inner[p]) {
                        continue;
                    }
                    let q = m._inner[p];
                    if (a >= q.cc && a <= q.cc + q.gf && b >= q.cd && b <= q.cd + q.e0) {
                        this.c = q;
                        return q;
                    }
                }
            }
            return null;
        }
        get bh() {
            return this.bg;
        }
        set bh(a) {
            this.bg = a;
        }
        get bw() {
            while (this.bq.count < this.br.count) {
                this.bq.add(new GridColumnSpacerCollection());
            }
            return this.bq;
        }
        set bw(a) {
            this.bq = a;
        }
        bm() {
            if (this.bf != null && this.be != null && this.bf.w >= 0 && this.be.w >= 0) {
                return true;
            }
            return false;
        }
        g(a) {
            if (a == this.cx) {
                return this.f;
            }
            let b = null;
            if (this.bo.containsKey(a)) {
                b = this.br._inner[this.bo.item(a)];
            }
            this.cx = a;
            this.f = b;
            return b;
        }
        cy(a) {
            this.br.add(a);
            this.bo.addItem(a.o, this.br.count - 1);
        }
        c2() {
            this.bp = new List$1(GridLayer.$, 0);
            this.bp.add(this.a7);
            this.bp.add(this.al);
            this.bp.add(this.ba);
            this.bp.add(this.am);
            this.bp.add(this.a1);
            this.bp.add(this.a0);
            this.bp.add(this.a2);
            this.bp.add(this.as);
            this.bp.add(this.an);
            this.bp.add(this.av);
            this.bp.add(this.aq);
            this.bp.add(this.ar);
            this.bp.add(this.a6);
            this.bp.add(this.a4);
            this.bp.add(this.a3);
            this.bp.add(this.a5);
            this.bp.add(this.a9);
            this.bp.add(this.a8);
            this.bp.add(this.az);
            this.bp.add(this.ay);
            this.bp.add(this.bc);
            this.bp.add(this.bb);
            this.bp.add(this.au);
            this.bp.add(this.at);
            this.bp.add(this.ap);
            this.bp.add(this.ao);
            this.bp.add(this.ax);
            this.bp.add(this.aw);
            this.bp.add(this.bd);
        }
        get bu() {
            return this.bp;
        }
        bi() {
            for (let a = 0; a < this.bp.count; a++) {
                for (let b = 0; b < this.bp._inner[a].o.count; b++) {
                    if (this.bp._inner[a].p._inner[b]) {
                        continue;
                    }
                    let c = this.bp._inner[a].o._inner[b];
                    let d = this.bp._inner[a].q._inner[b];
                    if (c != d.k) {
                        return false;
                    }
                }
            }
            return true;
        }
        c1() {
            this.f = null;
            this.cx = -1;
            this.br.clear();
            this.bo.clear();
        }
        c0() {
            this.c1();
            this.bv.clear();
            this.a7.u();
            this.al.u();
            this.ba.u();
            this.am.u();
            this.a1.u();
            this.a0.u();
            this.a2.u();
            this.as.u();
            this.an.u();
            this.av.u();
            this.aq.u();
            this.ar.u();
            this.a6.u();
            this.a4.u();
            this.a3.u();
            this.a5.u();
            this.a9.u();
            this.a8.u();
            this.az.u();
            this.ay.u();
            this.bc.u();
            this.bb.u();
            this.au.u();
            this.at.u();
            this.ap.u();
            this.ao.u();
            this.ax.u();
            this.aw.u();
            this.bd.u();
        }
        b() {
            let a = new VisualModelExport();
            a.ae = new RectData(this.actualVisibleRegion.x, this.actualVisibleRegion.y, this.actualVisibleRegion.width, this.actualVisibleRegion.height);
            a.ah = this.absoluteWidth;
            a.ag = this.absoluteHeight;
            a.au = this.cl;
            a.an = this.ci;
            a.am = this.ch;
            a.ak = this.cf;
            a.al = this.cg;
            a.ai = this.cc;
            a.aq = this.cs;
            a.ar = this.ct;
            a.as = this.b8;
            a.ap = this.b3;
            a.ao = this.by;
            a.at = this.b9;
            a.x = this.a(this.a7);
            a.a = this.a(this.al);
            a.aa = this.a(this.ba);
            a.b = this.a(this.am);
            a.r = this.a(this.a1);
            a.q = this.a(this.a0);
            a.s = this.a(this.a2);
            a.h = this.a(this.as);
            a.c = this.a(this.an);
            a.k = this.a(this.av);
            a.f = this.a(this.aq);
            a.g = this.a(this.ar);
            a.w = this.a(this.a6);
            a.u = this.a(this.a4);
            a.t = this.a(this.a3);
            a.v = this.a(this.a5);
            a.z = this.a(this.a9);
            a.y = this.a(this.a8);
            a.o = this.a(this.az);
            a.n = this.a(this.ay);
            a.ac = this.a(this.bc);
            a.ab = this.a(this.bb);
            a.j = this.a(this.au);
            a.i = this.a(this.at);
            a.e = this.a(this.ap);
            a.d = this.a(this.ao);
            a.m = this.a(this.ax);
            a.l = this.a(this.aw);
            a.ad = this.a(this.bd);
            a.ax();
            return a;
        }
        a(a) {
            let b = new GridLayerExport(a.v);
            let c = a == this.az;
            for (let d of fromEnum(a.n)) {
                let e = d.b(null);
                if (this.bj && c) {
                    e.s += this.b8;
                }
                b.e(e);
            }
            return b;
        }
        h(a, b, c, d, e) {
            let f = new GridColumnSpacer();
            f.i = c;
            f.j = c;
            f.f = d;
            f.n = b.o;
            f.d = e;
            this.bw._inner[a].add(f);
            return f;
        }
        cz(a) {
            let b = this.bw;
            for (let c = 0; c < b.count; c++) {
                let d = b._inner[c];
                for (let e = d.count - 1; e >= 0; e--) {
                    if (d._inner[e].o == a.o) {
                        d.removeAt(e);
                    }
                }
            }
        }
        bt(a) {
            let b = new List$1(GridColumnSpacer.$, 0);
            let c = this.bw;
            for (let d = 0; d < c.count; d++) {
                let e = c._inner[d];
                for (let f = e.count - 1; f >= 0; f--) {
                    if (e._inner[f].n == a.o) {
                        b.add(e._inner[f]);
                    }
                }
            }
            return b;
        }
        bs(a) {
            let b = new List$1(CellModel.$, 0);
            for (let c = 0; c < this.bu.count; c++) {
                let d = new List$1(CellModel.$, 0);
                let e = this.bu._inner[c];
                for (let f = 0; f < e.o.count; f++) {
                    if (e.p._inner[f]) {
                        continue;
                    }
                    let g = e.q._inner[f];
                    if (g.k.az == a.m && g.k.b == a.c) {
                        b.add(g);
                    }
                }
            }
            return b;
        }
        d(a, b) {
            for (let c = 0; c < this.bu.count; c++) {
                let d = this.bu._inner[c];
                for (let e = 0; e < d.o.count; e++) {
                    if (d.p._inner[e]) {
                        continue;
                    }
                    let f = d.q._inner[e];
                    if (f.k.az == a && f.k.w == b) {
                        return f;
                    }
                }
            }
            return null;
        }
        ck() {
            let a = 0;
            for (let b = 0; b < this.bv.count; b++) {
                a += this.bv._inner[b].m;
            }
            return a;
        }
    }
    VisualModel.$t = /*@__PURE__*/ markType(VisualModel, 'VisualModel');
    return VisualModel;
})();
//# sourceMappingURL=IExternalGrid_combined.js.map
