import * as React from 'react';
import { ensureEnum, brushToString, stringToBrush, ensureBool, initializePropertiesFromCss, NamePatcher, isValidProp, toSpinal, getModifiedProps } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
import { ReactRenderer } from "igniteui-react-core";
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { SyncableObservableCollection$1 } from "igniteui-react-core";
import { CheckboxList } from './CheckboxList';
import { IgrDataGrid } from "./igr-data-grid";
import { IgrCheckedChangedEventArgs } from "./igr-checked-changed-event-args";
import { IgrSelectAllCheckboxChangedEventArgs } from "./igr-select-all-checkbox-changed-event-args";
import { PrimaryKeyValue } from "./PrimaryKeyValue";
import { IgrGridSelectedKeysCollection } from "./igr-grid-selected-keys-collection";
import { GridSelectedKeysCollection as GridSelectedKeysCollection_internal } from "./GridSelectedKeysCollection";
import { CheckboxListIndexType_$type } from "./CheckboxListIndexType";
import { InputGroupDisplayType_$type } from "igniteui-react-inputs";
import { BaseControlTheme_$type } from "igniteui-react-core";
import { ControlDisplayDensity_$type } from "igniteui-react-core";
export class IgrCheckboxList extends React.Component {
    constructor(props) {
        super(props);
        this._dataSource = null;
        this._wrapper = null;
        this._implementation = null;
        this._keys = null;
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        this._checkedChanged = null;
        this._checkedChanged_wrapped = null;
        this._selectAllCheckboxChanged = null;
        this._selectAllCheckboxChanged_wrapped = null;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._getMainRef = this._getMainRef.bind(this);
        this._getGridRef = this._getGridRef.bind(this);
        this._getSelectAllSection = this._getSelectAllSection.bind(this);
        this._getFilterHr = this._getFilterHr.bind(this);
        this._implementation = this.createImplementation();
        var checkboxList = this.i;
        this._checkboxList = checkboxList;
        checkboxList.notifySizeChanged();
        if (props) {
            this.initializeProperties();
        }
    }
    set height(value) {
        this._height = value;
        if (this._elRef) {
            this._elRef.style.height = value;
            this._checkboxList.notifySizeChanged();
        }
    }
    get height() {
        return this._height;
    }
    set width(value) {
        this._width = value;
        if (this._elRef) {
            this._elRef.style.height = value;
            this._checkboxList.notifySizeChanged();
        }
    }
    get width() {
        return this._width;
    }
    set dataSource(value) {
        this._dataSource = value;
        if (this._checkboxList != null) {
            this._checkboxList.itemsSource = this._dataSource;
        }
    }
    get dataSource() {
        return this._dataSource;
    }
    _getMainRef(ref) {
        this._elRef = ref;
        this.verifyReferences();
    }
    _getGridRef(ref) {
        this._gridRef = ref;
        this.verifyReferences();
    }
    _getSelectAllSection(ref) {
        this._selectAllSectionRef = ref;
        this.verifyReferences();
    }
    _getFilterHr(ref) {
        this._filterHrRef = ref;
        this.verifyReferences();
    }
    verifyReferences() {
        if (this._elRef != null &&
            this._gridRef != null &&
            this._filterHrRef != null &&
            this._selectAllSectionRef != null) {
            this._renderer = new ReactRenderer(this._elRef, document, false, null);
            var selectAllSectionWrapper = this._renderer.getWrapper(this._selectAllSectionRef);
            this._checkboxList.provideContainer(this._renderer, this._gridRef.i, selectAllSectionWrapper);
            var filterHr = this._renderer.getWrapper(this._filterHrRef);
            filterHr.setStyleProperty("margin", "3px 0px");
            filterHr.setStyleProperty("border-top", "1px solid #dde2eb");
            filterHr.setStyleProperty("border-left", "0px");
            filterHr.setStyleProperty("border-right", "0px");
            filterHr.setStyleProperty("border-bottom", "0px");
            this._checkboxList.provideHrElement(filterHr);
        }
    }
    render() {
        let children = [];
        //let filterContainerChildren: any[] = [];
        let filterContainer = React.createElement("div", {
            key: "filterContainer"
            //children: filterContainerChildren
        });
        children.push(filterContainer);
        let filterHr = React.createElement("hr", {
            ref: this._getFilterHr,
            key: "filterHr"
            //children: filterContainerChildren
        });
        children.push(filterHr);
        /*let filter = React.createElement("input", {
            ref: this._getFilterRef,
            type: "text",
            key: "checkboxListFilterInput"
        });
        filterContainerChildren.push(filter);*/
        let selectAllSection = React.createElement("div", {
            ref: this._getSelectAllSection,
            key: "selectAllSection"
        });
        children.push(selectAllSection);
        let grid = React.createElement(IgrDataGrid, {
            ref: this._getGridRef,
            key: "checkboxListGrid",
            scrollbarStyle: "Default",
            headerHeight: 0
        });
        children.push(grid);
        let div = React.createElement("div", {
            className: "ig-checkbox-list igr-checkbox-list",
            ref: this._getMainRef,
            children: children
        });
        return div;
    }
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    initializeProperties() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    // supports angular themes or custom properties set in CSS
    updateStyle() {
        this._styling(this._elRef, this);
    }
    componentWillUnmount() {
        if (this._checkboxList)
            this._checkboxList.destroy();
        if (this._renderer)
            this._renderer.destroy();
    }
    componentDidMount() {
        this._elRef.style.width = this._width ? this._width : "";
        this._elRef.style.height = this._height ? this._height : "";
        this._checkboxList.notifySizeChanged();
        this.initializeContent();
    }
    initializeContent() {
        this.updateStyle();
        this.i.notifySizeChanged();
    }
    createImplementation() {
        return new CheckboxList();
    }
    get i() {
        return this._implementation;
    }
    /**
     * Gets the collection responsible for selection in the CheckboxList. Selection is determined by two factors:
     * whether everything is selected or deselected and the values present in this collection. If everything is
     * selected then any items in this collection will be deselected. If everything is deselected then any items in
     * this collection will be selected. The CheckboxList defaults all items as deselected. This state can change
     * when you use the SelectAll and DeselectAll methods.
    */
    get keys() {
        if (this._keys === null) {
            let coll = new IgrGridSelectedKeysCollection();
            let innerColl = this.i.g;
            if (!innerColl) {
                innerColl = new GridSelectedKeysCollection_internal();
            }
            this._keys = coll._fromInner(innerColl);
        }
        return this._keys;
    }
    set keys(v) {
        if (this._keys !== null) {
            this._keys._setSyncTarget(null);
            this._keys = null;
        }
        let coll = new IgrGridSelectedKeysCollection();
        this._keys = coll._fromOuter(v);
        let syncColl = new SyncableObservableCollection$1(PrimaryKeyValue.$type);
        let innerColl = this.i.g;
        if (!innerColl) {
            innerColl = new GridSelectedKeysCollection_internal();
        }
        syncColl._inner = innerColl;
        syncColl.clear();
        this._keys._setSyncTarget(syncColl);
    }
    /**
     * Gets or sets the primary key to use for the CheckboxList.
    */
    get primaryKey() {
        return this.i.b;
    }
    set primaryKey(v) {
        this.i.b = v;
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get dataMemberPath() {
        return this.i.at;
    }
    set dataMemberPath(v) {
        this.i.at = v;
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get selectedMemberPath() {
        return this.i.a9;
    }
    set selectedMemberPath(v) {
        this.i.a9 = v;
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get filterPlaceholderText() {
        return this.i.ax;
    }
    set filterPlaceholderText(v) {
        this.i.ax = v;
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get searchInputType() {
        return this.i.v;
    }
    set searchInputType(v) {
        this.i.v = ensureEnum(InputGroupDisplayType_$type, v);
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get rowHeight() {
        return this.i.aj;
    }
    set rowHeight(v) {
        this.i.aj = +v;
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get cellTextStyle() {
        if (this.i.z == null) {
            return null;
        }
        return this.i.z.fontString;
    }
    set cellTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.z = fi;
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get indexType() {
        return this.i.p;
    }
    set indexType(v) {
        this.i.p = ensureEnum(CheckboxListIndexType_$type, v);
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get baseTheme() {
        return this.i.l;
    }
    set baseTheme(v) {
        this.i.l = ensureEnum(BaseControlTheme_$type, v);
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get density() {
        return this.i.n;
    }
    set density(v) {
        this.i.n = ensureEnum(ControlDisplayDensity_$type, v);
    }
    /**
     * Gets / sets the caption of the "Select All" checkbox.
    */
    get selectAllCaption() {
        return this.i.a6;
    }
    set selectAllCaption(v) {
        this.i.a6 = v;
    }
    /**
     * Gets or sets the color to use for the "Select All" label.
    */
    get selectAllCaptionTextColor() {
        return brushToString(this.i.cj);
    }
    set selectAllCaptionTextColor(v) {
        this.i.cj = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the actual header selectAllCaption text.
    */
    get actualSelectAllCaptionTextColor() {
        return brushToString(this.i.cf);
    }
    set actualSelectAllCaptionTextColor(v) {
        this.i.cf = stringToBrush(v);
    }
    /**
     * Gets / sets whether the "Select all" checkbox is visible.
    */
    get showSelectAll() {
        return this.i.ag;
    }
    set showSelectAll(v) {
        this.i.ag = ensureBool(v);
    }
    /**
     * Gets or sets the color to use for the background of the component.
    */
    get backgroundColor() {
        return brushToString(this.i.cg);
    }
    set backgroundColor(v) {
        this.i.cg = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the text of the component.
    */
    get textColor() {
        return brushToString(this.i.cl);
    }
    set textColor(v) {
        this.i.cl = stringToBrush(v);
    }
    findByName(name) {
        if (this.keys != null && this.keys.findByName && this.keys.findByName(name)) {
            return this.keys.findByName(name);
        }
        return null;
    }
    get hasUserValues() {
        return this._hasUserValues;
    }
    __m(propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    }
    _styling(container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        let genericPrefix = "";
        let typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("CheckboxList");
        let additionalPrefixes = [];
        let prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        let b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            let basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            let parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            let parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    }
    /**
 * selects all the items in the checkbox list.

*/
    selectAll() {
        this.i.b5();
    }
    /**
     * Deselects all the items in the checkbox list.
    
    */
    deselectAll() {
        this.i.bh();
    }
    notifySetItem(index, oldItem, newItem) {
        this.i.bo(index, oldItem, newItem);
    }
    /**
     * Manually notifies the checkboxlist's grid that the data it has bound to has been cleared and needs to be re-examined.
     * This should not be called if the data that the grid is bound to is already observable.
    
    */
    notifyClearItems() {
        this.i.bl();
    }
    notifyInsertItem(index, newItem) {
        this.i.bm(index, newItem);
    }
    notifyRemoveItem(index, oldItem) {
        this.i.bn(index, oldItem);
    }
    addKeyValue(value) {
        this.i.be(value);
    }
    removeKeyValue(value) {
        this.i.b4(value);
    }
    /**
     * Returns true if no items are selected / checked; otherwise false.
    
    */
    isNothingSelected() {
        let iv = this.i.ad();
        return (iv);
    }
    /**
     * Returns true if all of the items are selected / checked; otherwise false.
    
    */
    isEverythingSelected() {
        let iv = this.i.ac();
        return (iv);
    }
    /**
     * Called when a checkbox is checked or unchecked.
    */
    get checkedChanged() {
        return this._checkedChanged;
    }
    set checkedChanged(ev) {
        if (this._checkedChanged_wrapped !== null) {
            this.i.checkedChanged = delegateRemove(this.i.checkedChanged, this._checkedChanged_wrapped);
            this._checkedChanged_wrapped = null;
            this._checkedChanged = null;
        }
        this._checkedChanged = ev;
        this._checkedChanged_wrapped = (o, e) => {
            let outerArgs = new IgrCheckedChangedEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeCheckedChanged) {
                this.beforeCheckedChanged(this, outerArgs);
            }
            if (this._checkedChanged) {
                this._checkedChanged(this, outerArgs);
            }
        };
        this.i.checkedChanged = delegateCombine(this.i.checkedChanged, this._checkedChanged_wrapped);
    }
    /**
     * Called when the SelectAll checkbox is checked or unchecked.
    */
    get selectAllCheckboxChanged() {
        return this._selectAllCheckboxChanged;
    }
    set selectAllCheckboxChanged(ev) {
        if (this._selectAllCheckboxChanged_wrapped !== null) {
            this.i.selectAllCheckboxChanged = delegateRemove(this.i.selectAllCheckboxChanged, this._selectAllCheckboxChanged_wrapped);
            this._selectAllCheckboxChanged_wrapped = null;
            this._selectAllCheckboxChanged = null;
        }
        this._selectAllCheckboxChanged = ev;
        this._selectAllCheckboxChanged_wrapped = (o, e) => {
            let outerArgs = new IgrSelectAllCheckboxChangedEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeSelectAllCheckboxChanged) {
                this.beforeSelectAllCheckboxChanged(this, outerArgs);
            }
            if (this._selectAllCheckboxChanged) {
                this._selectAllCheckboxChanged(this, outerArgs);
            }
        };
        this.i.selectAllCheckboxChanged = delegateCombine(this.i.selectAllCheckboxChanged, this._selectAllCheckboxChanged_wrapped);
    }
}
//# sourceMappingURL=igr-checkbox-list.js.map
