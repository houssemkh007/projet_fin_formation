import { EditorType_$type } from "./EditorType";
import { IgrColumn } from "./igr-column";
import { NumericColumn } from "./NumericColumn";
import { ensureBool, ensureEnum, arrayFindByName } from "igniteui-react-core";
/**
 * Represents a Numeric grid column, used to allow the developer to display a formatted number in a cell.
*/
export class IgrNumericColumn extends IgrColumn {
    createImplementation() {
        return new NumericColumn();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
    }
    /**
     * Gets or sets the string to prefix a negative value. If FormatString is specificied this value is ignored.
    */
    get negativePrefix() {
        return this.i.kh;
    }
    set negativePrefix(v) {
        this.i.kh = v;
    }
    /**
     * Gets or sets the string to prefix a positive value. If FormatString is specificied this value is ignored.
    */
    get positivePrefix() {
        return this.i.kl;
    }
    set positivePrefix(v) {
        this.i.kl = v;
    }
    /**
     * Gets or sets the string to suffix a negative value. If FormatString is specificied this value is ignored.
    */
    get negativeSuffix() {
        return this.i.kj;
    }
    set negativeSuffix(v) {
        this.i.kj = v;
    }
    /**
     * Gets or sets the string to suffix a positive value. If FormatString is specificied this value is ignored.
    */
    get positiveSuffix() {
        return this.i.kn;
    }
    set positiveSuffix(v) {
        this.i.kn = v;
    }
    /**
     * Gets or sets the maximum fraction digits. If FormatString is specificied this value is ignored.
    */
    get maxFractionDigits() {
        return this.i.jy;
    }
    set maxFractionDigits(v) {
        this.i.jy = +v;
    }
    /**
     * Gets or sets the minimum fraction digits. If FormatString is specificied this value is ignored.
    */
    get minFractionDigits() {
        return this.i.jz;
    }
    set minFractionDigits(v) {
        this.i.jz = +v;
    }
    /**
     * Gets or sets the minimum integer digits. If FormatString is specificied this value is ignored.
    */
    get minIntegerDigits() {
        return this.i.j0;
    }
    set minIntegerDigits(v) {
        this.i.j0 = +v;
    }
    /**
     * Gets or sets whether to show a grouping separator. If FormatString is specificied this value is ignored.
    */
    get showGroupingSeparator() {
        return this.i.jt;
    }
    set showGroupingSeparator(v) {
        this.i.jt = ensureBool(v);
    }
    /**
     * Gets or sets the format string to apply to the value. If set, the other value formatting properties on this column are ignored.
    */
    get formatString() {
        return this.i.kc;
    }
    set formatString(v) {
        this.i.kc = v;
    }
    get formatSpecifiers() {
        return this.i.jq;
    }
    set formatSpecifiers(v) {
        this.i.jq = v;
    }
    /**
     * Gets or sets the INTL NumericFormat object to use for formatting the date values.
    */
    get formatOverride() {
        return this.i.j3;
    }
    set formatOverride(v) {
        this.i.j3 = v;
    }
    /**
     * Gets or sets the editor type used for editing cells in this column.
    */
    get editorType() {
        return this.i.jr;
    }
    set editorType(v) {
        this.i.jr = ensureEnum(EditorType_$type, v);
    }
    /**
     * Gets or sets the ComboBox data source.
    */
    get editorDataSource() {
        return this.i.j2;
    }
    set editorDataSource(v) {
        this.i.j2 = v;
    }
    /**
     * Gets or sets the ComboBox text field.
    */
    get editorTextField() {
        return this.i.j9;
    }
    set editorTextField(v) {
        this.i.j9 = v;
    }
    /**
     * Gets or sets the ComboBox value field.
    */
    get editorValueField() {
        return this.i.jp;
    }
    set editorValueField(v) {
        this.i.jp = v;
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.formatSpecifiers != null && arrayFindByName(this.formatSpecifiers, name)) {
            return arrayFindByName(this.formatSpecifiers, name);
        }
        return null;
    }
}
//# sourceMappingURL=igr-numeric-column.js.map
