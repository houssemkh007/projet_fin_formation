/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { GridCellBase } from "./GridCellBase";
import { DataSourceSchemaPropertyType_$type } from "igniteui-react-core";
import { enumGetBox, runOn, delegateCombine, delegateRemove, typeCast, markType } from "igniteui-react-core";
import { EditorType_$type } from "./EditorType";
import { Popup } from "igniteui-react-layouts";
import { InputGroup } from "igniteui-react-inputs";
import { Input } from "igniteui-react-inputs";
import { IDataSource_$type } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { BaseDOMEventProxy } from "igniteui-react-core";
import { dateGetMonth, dateFromValues } from "igniteui-react-core";
import { stringIsNullOrWhiteSpace } from "igniteui-react-core";
/**
 * @hidden
 */
export let EditorCell = /*@__PURE__*/ (() => {
    class EditorCell extends GridCellBase {
        constructor(a) {
            super(a);
            this.c1 = null;
            this.c0 = null;
            this.ct = null;
            this.cu = null;
            this.cf = null;
            this.ce = null;
            this.cv = null;
            this.cd = null;
            this.c5 = null;
            this.cw = null;
            this.cx = null;
            this.cy = null;
            this.cz = null;
            this.cg = null;
            this.cj = false;
            this.b9 = 0;
            this.c7 = null;
            this.ch = null;
            this.cb = 0;
            this.c6 = null;
            this.da = null;
            this.b7 = null;
            this.cl = true;
            this.cn = false;
            this.co = false;
            this.cm = false;
            this.ck = false;
            this.cs = false;
            this.z.setAttribute("tabindex", "-1");
            this.z.setStyleProperty("outline", "none");
            this.z.setStyleProperty("display", "flex");
            this.z.setStyleProperty("align-items", "center");
            this.z.listen("keydown", runOn(this, this.d1));
            this.z.listen("focusout", runOn(this, this.d0));
            this.z.listen("focusin", runOn(this, this.dz));
        }
        get ca() {
            return this.b9;
        }
        set ca(a) {
            let b = this.b9;
            this.b9 = a;
            if (b != this.b9) {
                this.bg("DataType", enumGetBox(DataSourceSchemaPropertyType_$type, b), enumGetBox(DataSourceSchemaPropertyType_$type, this.b9));
            }
        }
        get c9() {
            return this.c7;
        }
        set c9(a) {
            let b = this.c7;
            this.c7 = a;
            if (b != this.c7) {
                this.bg("Value", b, this.c7);
            }
        }
        get ci() {
            return this.ch;
        }
        set ci(a) {
            let b = this.ch;
            this.ch = a;
            if (b != this.ch) {
                this.bg("FontInfo", b, this.ch);
            }
        }
        get cc() {
            return this.cb;
        }
        set cc(a) {
            let b = this.cb;
            this.cb = a;
            if (b != this.cb) {
                this.bg("EditorType", enumGetBox(EditorType_$type, b), enumGetBox(EditorType_$type, this.cb));
            }
        }
        get c8() {
            return this.c6;
        }
        set c8(a) {
            let b = this.c6;
            this.c6 = a;
            if (b != this.c6) {
                this.bg("ComboItemsSource", b, this.c6);
            }
        }
        get dc() {
            return this.da;
        }
        set dc(a) {
            let b = this.da;
            this.da = a;
            if (b != this.da) {
                this.bg("ComboTextField", b, this.da);
            }
        }
        get b8() {
            return this.b7;
        }
        set b8(a) {
            let b = this.b7;
            this.b7 = a;
            if (b != this.b7) {
                this.bg("ComboValueField", b, this.b7);
            }
        }
        get cr() {
            return this.cl;
        }
        set cr(a) {
            let b = this.cl;
            this.cl = a;
            if (b != this.cl) {
                this.bg("IsHidden", b, this.cl);
            }
        }
        c4(a) {
            if (this.cx == null) {
                this.cx = this.w.createElement("div");
                let b = this.w.getSubRenderer(this.cx);
                this.cg = new Popup();
                this.cg.provideRenderer(b);
                this.cz = this.w.createElement("div");
                this.cz.setStyleProperty("background-color", "rgba(0,0,0,0.7)");
                this.cz.setStyleProperty("color", "#fff");
                this.cz.setStyleProperty("padding", "5px");
                this.cz.setStyleProperty("outline", "none");
                this.cz.setAttribute("tabindex", "-1");
                this.cy = this.w.createElement("div");
                this.cy.setStyleProperty("white-space", "pre");
                if (this.ci != null) {
                    this.cy.setStyleProperty("font", this.ci.fontString);
                }
                this.cz.append(this.cy);
                this.cg.appendPopupContent(this.cz);
            }
            let c = null;
            switch (a) {
                case 0:
                    c = this.c3();
                    break;
                case 1:
                    c = this.c2();
                    break;
            }
            return c;
        }
        c3() {
            if (this.c1 != null) {
                this.du();
                this.dw();
                return this.c1;
            }
            this.c1 = this.w.createElement("div");
            this.c1.setRawStyleProperty("display", "flex");
            this.c1.setRawStyleProperty("width", "100%");
            this.c1.setRawStyleProperty("margin-top", "-10px");
            this.c1.setRawStyleProperty("height", "38px");
            this.ct = this.w.getSubRenderer(this.c1);
            this.cf = new InputGroup();
            this.cf.provideContainer(this.ct);
            this.cf.k = 0;
            this.cf.d = this.d.getTheme();
            this.cf.h = 3;
            this.c0 = this.w.createElement("div");
            this.c0.setRawStyleProperty("width", "100%");
            this.cu = this.w.getSubRenderer(this.c0);
            this.ce = new Input();
            this.ce.provideContainer(this.cu);
            this.ce.b0 = "text";
            let a = this.ce;
            a.changing = delegateCombine(a.changing, runOn(this, this.dy));
            this.ck = true;
            this.cf.appendContentChild(this.c0);
            this.cf.inputs.add(this.ce);
            return this.c1;
        }
        c2() {
            if (this.cv != null) {
                this.dr();
                this.du();
                this.dw();
                return this.cv;
            }
            this.cv = this.w.createElement("div");
            this.cv.setRawStyleProperty("margin-top", "-10px");
            this.cv.setRawStyleProperty("height", "38px");
            this.cv.setRawStyleProperty("width", "100%");
            this.w.getPortal(this.cv, "MultiColumnComboBox", (a) => {
                this.cd = a.componentRef;
                this.cd.height = "100%";
                this.cd.density = 3;
                this.cd.baseTheme = this.d.getTheme();
                this.cd.labelVisible = false;
                this.cd.columnHeadersVisible = false;
                this.cd.rowSeparatorsVisible = false;
                this.dr();
                this.d3();
                this.du();
                this.dw();
                this.c5 = this.cd.i;
                this.c5.valueChanged = delegateCombine(this.c5.valueChanged, runOn(this, this.onComboValueChanged));
                this.c5.textChanged = delegateCombine(this.c5.textChanged, runOn(this, this.onComboTextChanged));
                this.c5.gotFocus = delegateCombine(this.c5.gotFocus, runOn(this, this.onComboGotFocus));
                this.c5.lostFocus = delegateCombine(this.c5.lostFocus, runOn(this, this.onComboLostFocus));
                this.ck = true;
            }, false);
            return this.cv;
        }
        dx(a, b) {
            if (b.g != b.d || b.h != b.e) {
                if (this.cd != null) {
                    this.cd.closeUp();
                }
                this.dm();
            }
        }
        dk() {
            if (!this.ck) {
                if (this.c5 != null) {
                    this.c5.valueChanged = delegateCombine(this.c5.valueChanged, runOn(this, this.onComboValueChanged));
                    this.c5.textChanged = delegateCombine(this.c5.textChanged, runOn(this, this.onComboTextChanged));
                    this.c5.gotFocus = delegateCombine(this.c5.gotFocus, runOn(this, this.onComboGotFocus));
                    this.c5.lostFocus = delegateCombine(this.c5.lostFocus, runOn(this, this.onComboLostFocus));
                }
                if (this.ce != null) {
                    let a = this.ce;
                    a.changing = delegateCombine(a.changing, runOn(this, this.dy));
                }
                this.ck = true;
            }
        }
        dl() {
            if (this.ck) {
                if (this.c5 != null) {
                    this.c5.valueChanged = delegateRemove(this.c5.valueChanged, runOn(this, this.onComboValueChanged));
                    this.c5.textChanged = delegateRemove(this.c5.textChanged, runOn(this, this.onComboTextChanged));
                    this.c5.gotFocus = delegateRemove(this.c5.gotFocus, runOn(this, this.onComboGotFocus));
                    this.c5.lostFocus = delegateRemove(this.c5.lostFocus, runOn(this, this.onComboLostFocus));
                }
                if (this.ce != null) {
                    let a = this.ce;
                    a.changing = delegateRemove(a.changing, runOn(this, this.dy));
                }
                this.ck = false;
            }
        }
        d2(a) {
            this.cn = false;
            this.co = false;
            this.cm = false;
            if (!a) {
                this.co = true;
                if (this.cc == 0) {
                    if (this.ce != null) {
                        this.ce.ck();
                        if (this.ce.b0 != "date") {
                            window.setTimeout(() => this.ce.db(), 0);
                        }
                    }
                }
                else if (this.cc == 1) {
                    if (this.cd != null) {
                        if (this.cd.value == null && this.cd.text != "") {
                            this.cd.text = "";
                        }
                        this.cd.focus();
                        this.cd.select();
                    }
                }
            }
        }
        d3() {
            if (this.cc == 0) {
                if (this.ce != null) {
                    if (this.c9 != null) {
                        if (this.ca == 8) {
                            let a = this.c9;
                            let b = dateGetMonth(a) < 10 ? "0" + dateGetMonth(a) : dateGetMonth(a).toString();
                            let c = a.getDate() < 10 ? "0" + a.getDate() : a.getDate().toString();
                            this.ce.cf = null;
                            this.ce.cf = a.getFullYear() + "-" + b + "-" + c;
                        }
                        else {
                            this.ce.cf = null;
                            this.ce.cf = this.c9.toString();
                        }
                        this.b.updateCellEditValue(this.ce.cf);
                    }
                    else {
                        this.ce.cf = null;
                    }
                }
            }
            else if (this.cc == 1) {
                if (this.cd != null) {
                    if (this.c9 == null) {
                        this.cd.text = " ";
                    }
                    this.cd.value = this.c9;
                }
            }
        }
        du() {
            if (this.cc == 0) {
                switch (this.ca) {
                    case 10:
                    case 6:
                    case 5:
                    case 1:
                    case 3:
                    case 4:
                    case 7:
                        this.ce.b0 = "number";
                        break;
                    case 8:
                        this.ce.b0 = "date";
                        break;
                    default:
                        this.ce.b0 = "text";
                        break;
                }
            }
        }
        dv() {
            this.cj = true;
            this.z.removeChildren();
            this.cw = this.c4(this.cc);
            this.z.append(this.cw);
            this.cj = false;
        }
        dr() {
            if (this.cd != null) {
                this.dl();
                this.cd.dataSource = this.c8;
                this.cd.textField = this.dc;
                this.cd.valueField = this.b8;
                if (this.dc != null) {
                    this.cd.fields = [this.dc];
                }
                else if (this.b8 != null && this.b8.length > 0) {
                    this.cd.fields = [this.b8[0]];
                }
                else {
                    let a = typeCast(IDataSource_$type, this.c8);
                    if (a != null && a.actualSchema != null) {
                        this.cd.fields = [a.actualSchema.propertyNames[0]];
                    }
                    else {
                        let b = (Array.isArray(this.c8));
                        if (b) {
                            let c = (Object.keys(this.c8[0]));
                            if (c.length > 0) {
                                this.cd.fields = [c[0]];
                            }
                        }
                    }
                }
                this.dk();
            }
        }
        dw() {
            if (this.ci != null) {
                if (this.cc == 0) {
                    if (this.ce != null) {
                        this.ce.ac = this.ci;
                    }
                }
                else if (this.cc == 1) {
                    if (this.cd != null) {
                        this.cd.textStyle = this.ci.fontString;
                    }
                }
                this.cy.setStyleProperty("font", this.ci.fontString);
            }
        }
        dn() {
            if (this.cr) {
                this.dl();
            }
            else {
                this.dk();
            }
        }
        d4(a, b, c, d, e) {
            if (!stringIsNullOrWhiteSpace(a)) {
                this.cy.setRawText(a);
                this.d5();
            }
        }
        d5() {
            let rect_ = this.z.getNativeElement().getBoundingClientRect();
            let a = new Rect(4);
            a.left = (rect_.left + window.pageXOffset);
            a.top = (rect_.top + window.pageYOffset);
            a.right = (rect_.right + window.pageXOffset);
            a.bottom = (rect_.bottom + window.pageYOffset);
            this.cg.showRelativeToExclusionRect(a, 1, 0);
        }
        dm() {
            if (this.cg.t) {
                this.cg.an();
            }
        }
        bf() {
            if (this.cw == null) {
                this.dv();
                this.d.setViewportChangedHandler(runOn(this, this.dx));
            }
        }
        bg(a, b, c) {
            super.bg(a, b, c);
            switch (a) {
                case "EditorType":
                    this.dv();
                    break;
                case "ComboItemsSource":
                case "ComboTextField":
                case "ComboValueField":
                    this.dr();
                    break;
                case "DataType":
                    this.du();
                    break;
                case "Value":
                    this.d3();
                    break;
                case "FontInfo":
                    this.dw();
                    break;
                case "IsHidden":
                    this.dn();
                    break;
            }
        }
        onComboValueChanged(a, b) {
            this.d6();
        }
        onComboTextChanged(a, b) {
            this.d6();
        }
        d6() {
            if (this.co && this.cc == 1) {
                if (this.cd.value != null) {
                    this.b.updateCellEditValue(this.cd.value);
                }
                else if (this.cd.value == null && stringIsNullOrWhiteSpace(this.cd.text)) {
                    this.b.updateCellEditValue(null);
                }
                else {
                    this.b.updateCellEditValue(this.c9);
                }
            }
        }
        dy(a, b) {
            let c = b.value;
            if (this.ca == 8) {
                let d = b.value.split('-');
                let e = parseInt(d[0]);
                let f = parseInt(d[1]);
                let g = parseInt(d[2]);
                c = dateFromValues(e, f, g, 0, 0, 0, 0);
            }
            this.b.updateCellEditValue(c);
        }
        d1(a) {
            switch (BaseDOMEventProxy.cu(a)) {
                case 14:
                case 16:
                case 15:
                case 17:
                    a.stopPropagation();
                    break;
            }
        }
        cq(a) {
            if (a != null && this.cg != null && this.cg.t) {
                let b = this.cz.getNativeElement();
                return b.contains(a);
            }
            return false;
        }
        cp(a) {
            if (a != null) {
                let b = this.z.getNativeElement();
                return b.contains(a);
            }
            return false;
        }
        d0(a) {
            if (!this.cj) {
                let b = (a.originalEvent.relatedTarget);
                if (this.cm && !this.cp(b) && !this.cq(b)) {
                    this.b.editorCellLostFocus();
                    this.dm();
                }
            }
        }
        dz(a) {
            if (this.cn && !this.cg.t) {
                this.d5();
            }
        }
        onComboLostFocus(a) {
            this.cm = true;
        }
        onComboGotFocus(a) {
            this.cm = false;
        }
        onContactStarted(a, b) {
            a.stopPropagation();
        }
        onContactCompleted(a, b) {
            a.stopPropagation();
        }
        onDoubleClick(a) {
            a.stopPropagation();
        }
    }
    EditorCell.$t = /*@__PURE__*/ markType(EditorCell, 'EditorCell', GridCellBase.$);
    return EditorCell;
})();
//# sourceMappingURL=EditorCell.js.map
