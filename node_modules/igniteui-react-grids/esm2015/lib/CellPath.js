/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { RowPath } from "./RowPath";
import { markType } from "igniteui-react-core";
/**
 * @hidden
 */
export let CellPath = /*@__PURE__*/ (() => {
    class CellPath extends RowPath {
        constructor(a, ..._rest) {
            a = (a == void 0) ? 0 : a;
            switch (a) {
                case 0:
                    {
                        let c = _rest[0];
                        let d = _rest[1];
                        let e = _rest[2];
                        let f = _rest[3];
                        let g = [d, e, f];
                        {
                            let i = g[0];
                            let j = g[1];
                            let k = g[2];
                            super(j, k);
                            this.ax = 0;
                            this.ay = 0;
                            this.aw = -1;
                            this.ar = false;
                            this.ae = false;
                            this.ad = false;
                            this.ao = false;
                            this.af = false;
                            this.ax = i;
                            this.ac();
                        }
                        this.b = c;
                        this.ac();
                    }
                    break;
                case 1:
                    {
                        let c = _rest[0];
                        let d = _rest[1];
                        let e = _rest[2];
                        super(d, e);
                        this.ax = 0;
                        this.ay = 0;
                        this.aw = -1;
                        this.ar = false;
                        this.ae = false;
                        this.ad = false;
                        this.ao = false;
                        this.af = false;
                        this.ax = c;
                        this.ac();
                    }
                    break;
            }
        }
        get az() {
            return this.ax;
        }
        set az(a) {
            this.ax = a;
            this.ac();
        }
        get a5() {
            return this.ay;
        }
        set a5(a) {
            this.ay = a;
        }
        ac() {
            super.ac();
            this.aw = (this.az * 100000000) + super.getHashCode();
        }
        getHashCode() {
            return this.aw;
        }
        equals(a) {
            if (!super.equals(a)) {
                return false;
            }
            let b = a;
            if (a == null) {
                return false;
            }
            if (this.ax != b.ax) {
                return false;
            }
            if (this.at != b.at) {
                return false;
            }
            if (this.aq != b.aq) {
                return false;
            }
            return true;
        }
        toString() {
            return this.ax + "." + super.toString();
        }
        aa() {
            let a = new CellPath(0, this.b, this.ax, this.x, this.w);
            a.a5 = this.a5;
            a.at = this.at;
            a.aq = this.aq;
            a.i = this.i;
            a.o = this.o;
            a.d = this.d;
            a.ao = this.ao;
            a.af = this.af;
            a.ar = this.ar;
            return a;
        }
        get as() {
            return (this.ax == -300);
        }
        get ag() {
            return ((this.ax >= 0 || this.ax == -800 || this.ax == -400) && this.w >= 0 && this.w >= 0);
        }
        get au() {
            return this.ax == -400 || this.ax == -401 || this.ax == -402;
        }
        get aj() {
            return this.g && !this.as;
        }
        get ap() {
            return this.w == -102 && this.ax == -400;
        }
        get al() {
            return (this.w == -103 || this.w == -104) && this.az == -500;
        }
        get an() {
            return (this.w == -103 || this.w == -104) && this.az == -501;
        }
        get ak() {
            return this.w == -100 && this.az == -500;
        }
        get am() {
            return this.w == -100 && this.az == -501;
        }
        get at() {
            return this.ae;
        }
        set at(a) {
            this.ae = a;
        }
        get aq() {
            return this.ad;
        }
        set aq(a) {
            this.ad = a;
        }
        get av() {
            return this.at || this.aq;
        }
        get ah() {
            return this.az == -1000 && this.w == -1000;
        }
        get ai() {
            return this.az == -1001 && this.w == -1001;
        }
    }
    CellPath.$t = /*@__PURE__*/ markType(CellPath, 'CellPath', RowPath.$);
    return CellPath;
})();
//# sourceMappingURL=CellPath.js.map
