/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, Delegate_$type, runOn, delegateCombine, fromEnum, typeCast, Array_$type, delegateRemove, markType, INotifyPropertyChanged_$type, PropertyChangedEventArgs, enumGetBox, String_$type } from "igniteui-react-core";
import { Popup } from "igniteui-react-layouts";
import { Suffix } from "igniteui-react-inputs";
import { InputGroup } from "igniteui-react-inputs";
import { Label } from "igniteui-react-inputs";
import { Input } from "igniteui-react-inputs";
import { List$1 } from "igniteui-react-core";
import { Icon } from "igniteui-react-inputs";
import { GridCellPosition } from "./GridCellPosition";
import { Rect } from "igniteui-react-core";
import { GotFocusEventArgs } from "./GotFocusEventArgs";
import { LostFocusEventArgs } from "./LostFocusEventArgs";
import { FilterFactory } from "igniteui-react-core";
import { ColumnComparisonFilterCondition } from "./ColumnComparisonFilterCondition";
import { NativeUI } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
import { MultiColumnComboBoxUtilities } from "./MultiColumnComboBoxUtilities";
import { ColumnWidth } from "./ColumnWidth";
import { SortMode_$type } from "./SortMode";
import { IDataSourceUpdateNotifier_$type } from "igniteui-react-core";
import { MultipleDataSourceNotifier } from "./MultipleDataSourceNotifier";
import { TextHeaderCellModel } from "./TextHeaderCellModel";
import { CornerRadius } from "igniteui-react-core";
import { stringEmpty, stringIsNullOrEmpty } from "igniteui-react-core";
import { stringFormat } from "igniteui-react-core";
import { BaseControlTheme_$type } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { ControlDisplayDensity_$type } from "igniteui-react-core";
import { StringComparer } from "igniteui-react-core";
import { ThemeResolver } from "igniteui-react-inputs";
import { MultiColumnComboBoxTextChangedEventArgs } from "./MultiColumnComboBoxTextChangedEventArgs";
import { MultiColumnComboBoxValueChangedEventArgs } from "./MultiColumnComboBoxValueChangedEventArgs";
import { FastReflectionHelper } from "igniteui-react-core";
import { MultiColumnComboVisualModelExport } from "./MultiColumnComboVisualModelExport";
import { AppearanceHelper } from "igniteui-react-core";
import { FontUtil } from "igniteui-react-core";
import { BrushUtil } from "igniteui-react-core";
import { isNaN_ } from "igniteui-react-core";
/**
 * @hidden
 */
export let MultiColumnComboBoxView = /*@__PURE__*/ (() => {
    class MultiColumnComboBoxView extends Base {
        constructor() {
            super(...arguments);
            this.ac = null;
            this.ak = null;
            this.f = null;
            this.ai = null;
            this.k = null;
            this.ah = null;
            this.j = null;
            this.aj = null;
            this.l = null;
            this.h = null;
            this.ae = null;
            this.i = null;
            this.af = null;
            this.m = null;
            this.ag = null;
            this.d = null;
            this.aq = null;
            this.ab = new List$1(Delegate_$type, 0);
            this.au = null;
            this.aa = true;
            this.ap = 0;
            this.x = false;
            this.a = null;
            this.c = 0;
            this.w = false;
            this.s = false;
            this.r = false;
            this.p = false;
            this.an = null;
            this.am = null;
            this.v = false;
            this.ao = -1;
            this.z = false;
            this.t = false;
        }
        get e() {
            return this.d;
        }
        get y() {
            return this.ap == 46;
        }
        get n() {
            return this.m;
        }
        bf(a) {
            this.ak = a;
            this.b1();
        }
        bg(a) {
            this.f = a;
        }
        bp() {
        }
        b1() {
            this.ag = this.ac.createElement("div");
            this.cr();
            this.a1();
            this.a0();
            this.ak.append(this.ai);
            this.ck();
            this.cl();
            document.addEventListener("click", runOn(this, this.a2), false);
            window.addEventListener("resize", runOn(this, this.cx), false);
        }
        aw(a) {
            let b = this.g.n();
            if (null == b) {
                return;
            }
            this.p = false;
            if (b.eo != a) {
                b.eo = a;
                this.p = true;
            }
            else {
                this.a3();
            }
        }
        ay() {
            let a = this.e;
            a.cw = null;
        }
        az() {
            let a = this.n;
            if (null != a) {
                a.an();
            }
            this.cl();
            let b = this.g.n();
            if (null != b) {
                let c = b.eo;
                if (null != c) {
                    b.eo = null;
                }
            }
        }
        u(a) {
            if (null == a) {
                return false;
            }
            let b = this.ai.getNativeElement();
            let c = this.ag.getNativeElement();
            let d = this.am.getNativeElement();
            return b.contains(a) || c.contains(a) || d.contains(a);
        }
        a0() {
            let a = this.ad;
            let b = this.g;
            this.ai = a.createElement("div");
            this.ai.setStyleProperty("display", "flex");
            this.ai.setStyleProperty("height", "100%");
            this.ai.setAttribute("tabIndex", "0");
            this.ai.setAttribute("outline", "none !important");
            this.ai.listen("focusin", runOn(this, this.bm));
            this.ai.listen("focusout", runOn(this, this.bn));
            let c = a.getSubRenderer(this.ai);
            this.k = new InputGroup();
            this.k.provideContainer(c);
            this.k.k = 2;
            this.aj = a.createElement("div");
            let d = a.getSubRenderer(this.aj);
            this.l = new Label();
            this.l.provideContainer(d);
            if (this.f.actualLabelVisible) {
                this.cu();
            }
            this.ah = a.createElement("div");
            this.ah.addClass("ig-input");
            this.ah.setRawStyleProperty("flex-grow", "1");
            let e = a.getSubRenderer(this.ah);
            this.j = new Input();
            this.j.provideContainer(e);
            a.getExternal(this.j, a.rootWrapper, a.getExternal(b, null, null));
            this.j.b0 = "text";
            this.j.cf = b.e5;
            let f = this.j;
            f.changing = delegateCombine(f.changing, runOn(this, this.bh));
            let g = this.j;
            g.compositionEnd = delegateCombine(g.compositionEnd, runOn(this, this.bi));
            let h = this.j;
            h.keyDown = delegateCombine(h.keyDown, runOn(this, this.bk));
            let i = this.j;
            i.gotFocus = delegateCombine(i.gotFocus, runOn(this, this.bj));
            let j = this.j;
            j.mouseDown = delegateCombine(j.mouseDown, runOn(this, this.bl));
            this.k.appendContentChild(this.ah);
            this.k.inputs.add(this.j);
            this.a5(this.g.a2);
            let k = a.createElement("div");
            let l = a.getSubRenderer(k);
            let m = new Suffix();
            m.provideContainer(l);
            this.ae = a.createElement("div");
            this.h = new Icon();
            let n = a.getSubRenderer(this.ae);
            this.h.provideContainer(n);
            this.h.svgPath = MultiColumnComboBoxView.ar;
            this.ae.setStyleProperty("height", "16px");
            this.ae.setStyleProperty("width", "16px");
            m.appendContentChild(this.ae);
            this.k.appendContentChild(k);
            this.k.inputs.add(m);
            this.ch();
            let o = a.createElement("div");
            let p = a.getSubRenderer(o);
            let q = new Suffix();
            q.provideContainer(p);
            this.af = a.createElement("div");
            this.i = new Icon();
            let r = a.getSubRenderer(this.af);
            this.i.provideContainer(r);
            this.i.svgPath = MultiColumnComboBoxView.at;
            q.appendContentChild(this.af);
            this.k.appendContentChild(o);
            this.k.inputs.add(q);
            this.ae.listen("click", runOn(this, this.ax));
            this.af.listen("click", runOn(this, this.a4));
        }
        a1() {
            let a = this.ac.createElement("div");
            let b = this.ac.getSubRenderer(a);
            this.m = new Popup();
            this.m.provideRenderer(b);
            this.am = this.ac.createElement("div");
            this.am.setStyleProperty("padding", "4px");
            this.am.setStyleProperty("white-space", "nowrap");
            this.an = this.ac.createElement("div");
            this.an.append(this.am);
            this.an.append(this.ag);
            this.m.appendPopupContent(this.an);
        }
        bt(a, b) {
        }
        bw(a, b, c) {
        }
        bs() {
            switch (this.c) {
                case 2:
                case 1:
                    if (null == this.a) {
                        this.c = 0;
                    }
                    break;
            }
            let a = null;
            switch (this.c) {
                case 2:
                    {
                        let b = this.a.actualCount;
                        if (b == 0) {
                            this.g.cv = null;
                        }
                        else {
                            if (b > 1) {
                            }
                            a = this.a.getItemAtIndex(0);
                            let c = this.g.i();
                            let d = new List$1(Base.$, 0);
                            for (let f = 0; f < c.length; f++) {
                                let e = c[f];
                                let g = this.a.getItemProperty(a, e);
                                d.add1(g);
                            }
                            this.g.cv = d.count == 1 ? d._inner[0] : d.toArray();
                        }
                    }
                    break;
                case 1:
                    {
                        let h = this.a.actualCount;
                        if (h == 0) {
                            this.g.e5 = stringEmpty();
                        }
                        else {
                            if (h > 1) {
                            }
                            let i = this.g.ej();
                            a = this.a.getItemAtIndex(0);
                            let j = this.a.getItemProperty(a, i).toString();
                            this.g.e5 = j;
                        }
                        let k = this.b();
                        let l = k.indexOfItem(a);
                        this.cg(l);
                    }
                    break;
                case 0:
                default: return;
            }
            if (null != a) {
                let m = this.b();
                let n = m.indexOfItem(a);
                this.cg(n);
            }
            else {
                this.cg(-1);
            }
            if (this.a != null) {
                this.a.updateNotifier = null;
                this.a = null;
            }
            this.c = 0;
        }
        bu(a, b) {
        }
        bv(a, b) {
        }
        bz(a, b) {
            let c = this.e;
            if (null != c) {
                let d = c.cw;
                if (null != d) {
                    if (d.b >= a && d.b <= b) {
                        this.ce(d.b);
                        this.cs();
                    }
                }
            }
        }
        b4(a, b, c) {
        }
        br() {
            this.b7();
            if (this.w) {
                let a = this.b();
                let b = a.actualCount;
                if (this.aa && b > 0) {
                    this.b9();
                }
                else {
                    this.ca();
                }
            }
            else {
                this.cq();
            }
        }
        b0(a, b) {
        }
        b2(a, b) {
        }
        o() {
            let a = document.activeElement;
            return this.u(a);
        }
        a3() {
            this.cv();
            this.bo();
            let a = this.n;
            if (a.t) {
                return;
            }
            let b = this.cy();
            a.q = !this.w;
            a.showRelativeToExclusionRect(b, 1, 1);
            this.cl();
        }
        cy() {
            let a = this.ac.rootWrapper.getNativeElement();
            let b = (a.getBoundingClientRect());
            return new Rect(0, b.left + window.pageXOffset, b.top + window.pageYOffset, b.width, b.height);
        }
        b() {
            let a = this.e;
            if (null != a) {
                return a.actualDataSource;
            }
            return null;
        }
        q(a) {
            let b = this.d.ad;
            let c = b.count;
            if (0 == c) {
                a = null;
                return {
                    ret: true,
                    p0: a
                };
            }
            else if (1 == c) {
                a = b._inner[0];
            }
            else {
                a = b._inner[0];
            }
            return {
                ret: null != a,
                p0: a
            };
        }
        a8(a) {
            let b = null != a ? a.b : -1;
            this.ce(b);
        }
        bc() {
            if (this.v) {
                return;
            }
            let a = this.g;
            let b;
            let c = ((() => { let d = this.q(b); b = d.p0; return d.ret; })());
            if (!c) {
                return;
            }
            if (b == null) {
                return;
            }
            a.fr(b);
        }
        bo() {
            this.n.aq();
        }
        bq() {
            let a = this.n;
            if (a.t) {
                this.az();
                let b = this.j;
                b.ck();
                let c = b.cf;
                let d = null != c ? b.cf.length : 0;
                b.dd(d, d);
            }
        }
        bx() {
            this.k.ah = true;
            this.j.db();
            let a = new GotFocusEventArgs();
            this.g.fo(a);
        }
        by() {
            this.az();
            this.k.mj();
            let a = new LostFocusEventArgs();
            this.g.fp(a);
        }
        b3(a) {
            if (a == null) {
                this.ac = null;
                for (let b of fromEnum(this.ab)) {
                    b();
                }
                this.ab.clear();
                return;
            }
            this.ac = a;
            let c = a.rootWrapper;
            this.bf(c);
        }
        b5(a, b) {
            let c = this.b();
            if (null == c) {
                return;
            }
            if (null != this.a) {
                if (a != this.c) {
                }
                this.a.updateNotifier = null;
                this.a = null;
            }
            this.c = a;
            let d = new FilterFactory();
            let e = null;
            let f = null;
            switch (a) {
                case 2:
                    {
                        let g = this.g.ej();
                        if (stringIsNullOrEmpty(g)) {
                            return;
                        }
                        e = b.toString();
                        let h = d.property(g);
                        f = h.isEqualTo(e);
                    }
                    break;
                case 1:
                    {
                        let i = this.g.i();
                        if (i == null || i.length < 1) {
                            return;
                        }
                        let j = typeCast(Array_$type, b) !== null ? b : [b];
                        if (i.length != j.length) {
                            return;
                        }
                        for (let k = 0; k < i.length; k++) {
                            let l = i[k];
                            e = j[k];
                            let m = d.property(l);
                            let n = m.isEqualTo(e);
                            if (null == f) {
                                f = n;
                            }
                            else {
                                f.and(n);
                            }
                        }
                    }
                    break;
                case 0:
                default: return;
            }
            this.a = c.clone();
            this.a.filterExpressions.clear();
            this.a.updateNotifier = new MultiColumnComboBoxDataSourceNotificationHandler(this, true);
            this.a.filterExpressions.add(f);
            if (!this.a.isVirtual) {
                this.a.flushAutoRefresh();
            }
        }
        b6() {
            this.co();
            let a = this.f.e5;
            let b = this.au.length;
            let c = !stringIsNullOrEmpty(a) ? a.length : 0;
            if (this.x && !stringIsNullOrEmpty(this.au) && b > 0) {
                b--;
            }
            this.j.dd(b, c);
        }
        b7() {
            if (this.p) {
                this.p = false;
                this.a3();
            }
        }
        b8(a) {
            this.au = a;
            this.aa = !this.y;
            this.cb();
            this.ch();
        }
        b9() {
            if (stringIsNullOrEmpty(this.au)) {
                this.ay();
            }
            else {
                this.cg(0);
            }
            this.b6();
            this.w = false;
        }
        ch() {
            if (this.ae != null && this.j != null) {
                if (this.g.a9 == false) {
                    this.ae.setStyleProperty("display", "none");
                }
                else if ((this.g.cv != null && this.g.cv != "") || (this.j.cf != null && this.j.cf != "")) {
                    this.ae.show();
                }
                else {
                    this.ae.setStyleProperty("display", "none");
                }
            }
        }
        a5(a) {
            if (this.j != null) {
                this.j.disabled = !a;
            }
        }
        ca() {
            let a = this.d;
            a.selectedItemsChanged = delegateRemove(a.selectedItemsChanged, runOn(this, this.bd));
            this.v = true;
            try {
                this.g.fy(this.au);
            }
            finally {
                this.v = false;
                let b = this.d;
                b.selectedItemsChanged = delegateCombine(b.selectedItemsChanged, runOn(this, this.bd));
            }
            this.w = false;
        }
        cb() {
            let a = this.g.n();
            if (null == a) {
                return;
            }
            this.w = true;
            if (stringIsNullOrEmpty(this.au)) {
                if (null != a.eo) {
                    this.aw(null);
                }
                else {
                    this.ca();
                }
            }
            else {
                let b = new ColumnComparisonFilterCondition();
                b.e = 11;
                b.j = this.au;
                b.g = false;
                this.aw(b);
            }
        }
        cc() {
            this.ap = 0;
            this.x = false;
        }
        ce(a) {
            let b = this.b();
            let c = b.isPlaceholderItem(a);
            if (c) {
            }
            else {
                let d = this.e;
                if (a < 0) {
                    this.s = false;
                    d.ad.clear();
                    if (!this.s) {
                        this.bc();
                    }
                    return;
                }
                d.selectedItemsChanged = delegateRemove(d.selectedItemsChanged, runOn(this, this.bd));
                try {
                    d.ad.clear();
                }
                finally {
                    d.selectedItemsChanged = delegateCombine(d.selectedItemsChanged, runOn(this, this.bd));
                }
                if (a >= 0) {
                    let e = b.getItemAtIndex(a);
                    this.s = false;
                    d.ad.add1(e);
                    if (!this.s) {
                        this.bc();
                    }
                }
            }
        }
        cg(a) {
            let b = this.e;
            if (-1 == a) {
                b.cw = null;
                return;
            }
            let c = b.cw;
            let d = new GridCellPosition();
            let e;
            if (null != c) {
                e = c.d;
            }
            else {
                if (b.actualColumns.count == 0) {
                    this.ao = a;
                    return;
                }
                let f = this.g;
                let g = this.g.n();
                e = g.h0();
            }
            d.d = e;
            d.b = a;
            this.r = false;
            b.cw = d;
            if (!this.r) {
                this.a8(b.cw);
            }
            this.cs();
        }
        cj(a) {
            this.b5(2, a);
        }
        ci(a) {
            this.b5(1, a);
        }
        ck() {
            let a = this.g;
            if (null != this.k) {
                this.k.h = a.density;
                this.k.d = a.z;
                this.k.oy = a.gt;
                this.k.oz = a.gu;
                this.k.cu = a.bu;
                this.k.tj = a.hs;
                this.k.m3 = a.f4;
                this.k.h = a.ae;
                this.k.sq = a.gv;
                this.k.hc = a.bv;
                this.k.sr = a.gw;
                this.k.hd = a.bw;
                this.k.he = a.bx;
                this.k.ss = a.gx;
                this.k.hf = a.by;
                this.k.hg = a.bz;
                this.k.s7 = a.g2;
                this.k.h1 = a.b0;
                this.k.s8 = a.g3;
                this.k.h2 = a.b1;
                this.k.h3 = a.b2;
                this.k.h4 = a.b3;
            }
            if (null != this.j) {
                this.j.dt = a.g1;
                this.j.ac = a.ap;
                this.j.b7 = a.ez;
            }
            if (null != this.l) {
                this.l.text = a.eo;
                this.l.dc = a.gy;
                this.l.y = a.an;
            }
            if (null != this.am) {
                NativeUI.n(this.am, a.g0);
                NativeUI.j(this.am, a.gz);
                if (null != a.ao) {
                    this.am.setStyleProperty("font", a.ao.fontString);
                }
                this.am.setRawText(a.actualNoMatchesFoundLabel);
                this.bo();
            }
            if (null != this.d) {
                this.d.fg = a.density;
                let b = a.columnHeadersVisible;
                this.d.k6 = b ? -1 : 0;
                this.d.lg = a.rowSeparatorsVisible ? 1 : 0;
            }
            if (null != this.af) {
                let c = a.dropDownButtonVisible;
                MultiColumnComboBoxUtilities.c(this.af, c);
            }
        }
        co() {
            if (!this.v) {
                if (null != this.j) {
                    let a = this.f.e5;
                    this.j.cf = a;
                }
            }
        }
        cl() {
            let a = this.n;
            let b = null != a ? a.t : false;
            this.i.svgPath = b ? MultiColumnComboBoxView.as : MultiColumnComboBoxView.at;
        }
        cn() {
            let a = this.d.kk + 3;
            let b = this.d.kl + this.d.lg;
            let c = this.d.actualDataSource;
            let d = null != c ? c.actualCount : 0;
            if (d > 8) {
                d = 8;
            }
            let e = d * b;
            e += a;
            let f = stringFormat("{0}px", e);
            this.ag.setStyleProperty("height", f);
            let g = 0;
            for (let h of fromEnum(this.d.actualColumns)) {
                let i = h.width;
                g += null != i ? i.f : 100;
            }
            g += 2;
            let j = stringFormat("{0}px", g);
            this.ag.setStyleProperty("width", j);
            if (null != this.am) {
                let k = this.g;
                let l = MultiColumnComboBoxUtilities.e(this.ad, k.actualNoMatchesFoundLabel, k.an);
                let m = l.width;
                let n = l.height;
                let o = stringFormat("{0}px", m);
                let p = stringFormat("{0}px", n);
                this.am.setStyleProperty("width", o);
                this.am.setStyleProperty("height", p);
            }
        }
        cp() {
            if (this.w) {
                return;
            }
            this.au = null;
            let a = this.g.n();
            if (null != a) {
                let b = a.eo;
                if (null != b) {
                    a.eo = null;
                }
                else {
                    this.cq();
                }
            }
        }
        cq() {
            let a = this.g;
            if (null != a.cv) {
                let b = this.g.cv;
                let c = typeCast(Array_$type, b) !== null ? b : [b];
                let d = this.b();
                let e = d.indexOfKey(c);
                if (-1 != e) {
                    this.cg(e);
                }
            }
        }
        cr() {
            if (null == this.d) {
                this.ac.getPortal(this.ag, "DataGrid", (a) => {
                    this.aq = a.componentRef;
                    this.aq.height = '100%';
                    this.aq.width = '100%';
                    this.d = (this.aq.i);
                    this.ct();
                    this.d.dt = 1;
                    this.d.dr = 0;
                    this.d.ch = 1;
                    this.cm();
                    this.d.cf = 0;
                    this.d.hn = false;
                    this.d.he = false;
                    this.d.ts = new CornerRadius(0, 0);
                    this.d.g1 = false;
                    let b = this.d;
                    b.activeCellChanged = delegateCombine(b.activeCellChanged, runOn(this, this.a7));
                    let c = this.d;
                    c.selectedItemsChanged = delegateCombine(c.selectedItemsChanged, runOn(this, this.bd));
                    let d = this.d;
                    d.cellClicked = delegateCombine(d.cellClicked, runOn(this, this.ba));
                    let e = this.d;
                    e.sizeChanged = delegateCombine(e.sizeChanged, runOn(this, this.be));
                    let f = this.d;
                    f.actualColumnsChanged = delegateCombine(f.actualColumnsChanged, runOn(this, this.a9));
                    let g = this.d;
                    g.columnWidthChanged = delegateCombine(g.columnWidthChanged, runOn(this, this.bb));
                    this.ck();
                }, false);
            }
        }
        cm() {
            if (this.d != null) {
                let a = 0;
                switch (this.f.v) {
                    case 0:
                        a = 0;
                        break;
                    case 1:
                        a = 1;
                        break;
                    case 2:
                        a = 2;
                        break;
                    case 3:
                        a = 3;
                        break;
                    case 4:
                        a = 4;
                        break;
                }
                this.d.d0 = a;
            }
        }
        cs() {
            if (!this.t) {
                return;
            }
            let a = this.d;
            let b = a.cw;
            if (null != b) {
                let c = this.b();
                if (null != c) {
                    let d = c.getItemAtIndex(b.b);
                    if (null == d) {
                        return;
                    }
                    a.it(d);
                }
            }
            else {
                a.s2(0);
            }
        }
        ct() {
            if (null != this.aq) {
                let a = this.g;
                let b = a.itemsSource;
                this.d.ad.clear();
                if (this.d.actualDataSource != null) {
                    let c = this.d.actualDataSource;
                    c.schemaChanged = delegateRemove(c.schemaChanged, runOn(this, this.av));
                }
                this.aq.dataSource = b;
                this.aq.autoGenerateDesiredProperties = a.g;
                this.d.l = a.i();
                this.ao = -1;
                let d = this.b();
                if (null != d) {
                    let e = d.updateNotifier;
                    let f = new MultiColumnComboBoxDataSourceNotificationHandler(this, false);
                    let g = new MultipleDataSourceNotifier(1, [e, f]);
                    d.updateNotifier = g;
                    d.propertiesRequested = a.f;
                    d.schemaChanged = delegateCombine(d.schemaChanged, runOn(this, this.av));
                    if (this.g.cv != null) {
                        this.b5(1, this.g.cv);
                    }
                }
                this.a = null;
            }
        }
        av(a, b) {
            if (this.ao != -1) {
                this.cg(this.ao);
                this.ao = -1;
            }
        }
        cu() {
            if (null != this.aj) {
                let a = this.f.actualLabelVisible;
                if (a) {
                    this.k.appendContentChild(this.aj);
                    this.k.inputs.add(this.l);
                }
                else {
                    this.k.mi(this.aj);
                    this.k.inputs.remove(this.l);
                }
            }
        }
        cf(a) {
            if (this.j != null) {
                this.j.disabled = !a;
            }
            if (this.k != null) {
                this.k.disabled = !a;
            }
        }
        cv() {
            this.cn();
            if (!this.w) {
                this.z = false;
            }
            else {
                let a = this.b();
                this.z = a.actualCount == 0;
            }
            MultiColumnComboBoxUtilities.c(this.am, this.z);
            MultiColumnComboBoxUtilities.c(this.ag, !this.z);
        }
        a6() {
            if (this.j != null) {
                this.j.ck();
            }
        }
        cd() {
            if (this.j != null) {
                this.j.db();
            }
        }
        get al() {
            return this.ak;
        }
        get g() {
            return this.f;
        }
        get ad() {
            return this.ac;
        }
        cw() {
            if (null != this.al) {
                this.al.setStyleProperty("box-sizing", "border-box");
            }
        }
        a2(a) {
            let b = a.target;
            if (!this.u(b)) {
                this.by();
            }
        }
        ax(a) {
            this.d.ad.clear();
            this.j.cf = "";
            this.g.cv = "";
            this.g.e5 = "";
            this.b8("");
        }
        a4(a) {
            let b = this.n;
            if (b.t) {
                this.az();
            }
            else {
                this.aw(null);
            }
            if (null != this.j) {
                this.j.ck();
                this.j.db();
            }
        }
        a7(a, b) {
            let c = b.newActiveCell;
            this.a8(c);
            this.r = true;
        }
        a9(a, b) {
            for (let c of fromEnum(b.columns)) {
                if (null == c.width || c.width.c) {
                    c.width = ((() => {
                        let $ret = new ColumnWidth();
                        $ret.f = 100;
                        return $ret;
                    })());
                }
            }
            this.cp();
        }
        ba(a, b) {
            if (typeCast(TextHeaderCellModel.$, b.cellInfo) !== null) {
                return;
            }
            this.bq();
        }
        bb(a, b) {
            this.cn();
            this.bo();
        }
        bd(a, b) {
            this.bc();
            this.s = true;
            this.ch();
        }
        be(a, b) {
            this.t = b.b != 0 && b.a != 0;
            this.cs();
        }
        bh(a, b) {
            if (b.isCompositionInProgress) {
                return;
            }
            let c = b.value;
            this.b8(c);
        }
        bi(a, b) {
            let c = this.j.cf;
            this.b8(c);
        }
        bj(a, b) {
            this.cc();
        }
        bk(a, b) {
            let c = b.keyCode;
            this.ap = c;
            this.x = false;
            let d = b.modifiers;
            switch (c) {
                case 8:
                    let e = this.j.selectionStart;
                    if (0 == e) {
                        break;
                    }
                    let f = this.j.cf;
                    if (stringIsNullOrEmpty(f)) {
                        break;
                    }
                    let g = f.length;
                    let h = this.j.selectionEnd;
                    let i = h - e;
                    if (i > 0 && i < g && h == g) {
                        this.x = true;
                    }
                    break;
                case 40:
                    if (d == 1) {
                        this.a3();
                        this.cp();
                        b.preventDefault();
                    }
                    else {
                        let j = this.e;
                        if (null == j) {
                            return;
                        }
                        let k = this.e.cw;
                        if (null != j.cw) {
                            this.d.h8(false, false);
                            b.preventDefault();
                        }
                        else {
                            let l = this.b();
                            if (null != l) {
                                let m = l.actualCount;
                                if (m > 0) {
                                    this.cg(0);
                                    b.preventDefault();
                                }
                            }
                        }
                    }
                    break;
                case 38:
                    if (d == 1) {
                        this.az();
                        b.preventDefault();
                    }
                    else {
                        let n = this.e;
                        if (null == n) {
                            return;
                        }
                        let o = this.e.cw;
                        if (null != n.cw) {
                            this.d.ik(false, false);
                            b.preventDefault();
                        }
                        else {
                            let p = this.b();
                            if (null != p) {
                                let q = p.actualCount;
                                if (q > 0) {
                                    this.cg(q - 1);
                                    b.preventDefault();
                                }
                            }
                        }
                    }
                    break;
                case 13:
                    if (this.n.t) {
                        b.stopPropagation();
                    }
                    this.bq();
                    break;
                case 27:
                    this.az();
                    break;
            }
        }
        bl(a, b) {
            if (false == this.o()) {
                this.j.db();
                b.handled = true;
            }
        }
        bm(a) {
            this.j.ck();
            let b = (a.originalEvent.relatedTarget);
            if (!this.u(b)) {
                this.bx();
            }
        }
        bn(a) {
            let b = (a.originalEvent.relatedTarget);
            if (!this.u(b)) {
                this.by();
            }
        }
        cx(a) {
            let b = this.n;
            if (null == b || false == b.t) {
                return;
            }
            let c = this.cy();
            this.m.ar(c);
        }
    }
    MultiColumnComboBoxView.$t = /*@__PURE__*/ markType(MultiColumnComboBoxView, 'MultiColumnComboBoxView');
    MultiColumnComboBoxView.ar = "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z";
    MultiColumnComboBoxView.at = "M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z";
    MultiColumnComboBoxView.as = "M12 8l-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z";
    return MultiColumnComboBoxView;
})();
/**
 * @hidden
 */
export let MultiColumnComboBoxDataSourceNotificationHandler = /*@__PURE__*/ (() => {
    class MultiColumnComboBoxDataSourceNotificationHandler extends Base {
        constructor(a, b) {
            super();
            this.a = null;
            this.b = false;
            this.a = a;
            this.b = b;
        }
        rangeActualized(a, b) {
            if (!this.b) {
                this.a.bz(a, b);
            }
            else {
                this.a.bt(a, b);
            }
        }
        notifySetItem(a, b, c) {
            if (!this.b) {
                this.a.b4(a, b, c);
            }
            else {
                this.a.bw(a, b, c);
            }
        }
        notifyClearItems() {
            if (!this.b) {
                this.a.br();
            }
            else {
                this.a.bs();
            }
        }
        notifyInsertItem(a, b) {
            if (!this.b) {
                this.a.b0(a, b);
            }
            else {
                this.a.bu(a, b);
            }
        }
        notifyRemoveItem(a, b) {
            if (!this.b) {
                this.a.b2(a, b);
            }
            else {
                this.a.bv(a, b);
            }
        }
    }
    MultiColumnComboBoxDataSourceNotificationHandler.$t = /*@__PURE__*/ markType(MultiColumnComboBoxDataSourceNotificationHandler, 'MultiColumnComboBoxDataSourceNotificationHandler', Base.$, [IDataSourceUpdateNotifier_$type]);
    return MultiColumnComboBoxDataSourceNotificationHandler;
})();
/**
 * @hidden
 */
export let MultiColumnComboBox = /*@__PURE__*/ (() => {
    class MultiColumnComboBox extends Base {
        constructor() {
            super();
            this.g9 = ThemeResolver.e(MultiColumnComboBox.y, InputGroup.r6, InputGroup.qq);
            this.ha = ThemeResolver.e(MultiColumnComboBox.y, InputGroup.r7, InputGroup.qr);
            this.b6 = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.gk, InputGroup.er);
            this.hu = ThemeResolver.f(MultiColumnComboBox.y, InputGroup.tx, InputGroup.tr);
            this.f6 = ThemeResolver.d(MultiColumnComboBox.y, InputGroup.nh, InputGroup.nb);
            this.hb = ThemeResolver.e(MultiColumnComboBox.y, InputGroup.r8, InputGroup.qs);
            this.b7 = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.gl, InputGroup.es);
            this.hc = ThemeResolver.e(MultiColumnComboBox.y, InputGroup.sa, InputGroup.qu);
            this.b8 = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.gm, InputGroup.et);
            this.b9 = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.gn, InputGroup.eu);
            this.hd = ThemeResolver.e(MultiColumnComboBox.y, InputGroup.sb, InputGroup.qv);
            this.ca = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.go, InputGroup.ev);
            this.cb = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.gp, InputGroup.ew);
            this.he = ThemeResolver.e(MultiColumnComboBox.y, InputGroup.sc, InputGroup.qw);
            this.cc = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.gq, InputGroup.ex);
            this.hf = ThemeResolver.e(MultiColumnComboBox.y, InputGroup.sd, InputGroup.qx);
            this.cd = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.gr, InputGroup.ey);
            this.ce = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.gs, InputGroup.ez);
            this.cf = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.gt, InputGroup.e0);
            this.as = null;
            this.t = null;
            this.az = true;
            this.c = null;
            this.gi = null;
            this.f7 = ThemeResolver.e(MultiColumnComboBox.y, InputGroup.rc, InputGroup.pw);
            this.x = 0;
            this.w = 1;
            this.gj = null;
            this.f8 = ThemeResolver.e(MultiColumnComboBox.y, InputGroup.rd, InputGroup.px);
            this.bk = NaN;
            this.ba = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.fu, InputGroup.d1);
            this.a3 = true;
            this.hr = new Thickness(1, NaN, NaN, NaN, NaN);
            this.hq = ThemeResolver.f(MultiColumnComboBox.y, InputGroup.tv, InputGroup.tp);
            this.f3 = new CornerRadius(1, NaN, NaN, NaN, NaN);
            this.f2 = ThemeResolver.d(MultiColumnComboBox.y, InputGroup.nf, InputGroup.m9);
            this.b = null;
            this.ad = 0;
            this.ac = 0;
            this.a5 = true;
            this.gk = null;
            this.f9 = ThemeResolver.e(MultiColumnComboBox.y, InputGroup.ru, InputGroup.qe);
            this.bl = NaN;
            this.bb = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.f5, InputGroup.ec);
            this.gl = null;
            this.ga = ThemeResolver.e(MultiColumnComboBox.y, InputGroup.rw, InputGroup.qg);
            this.bm = NaN;
            this.bc = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.f6, InputGroup.ed);
            this.bn = NaN;
            this.bd = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.f7, InputGroup.ee);
            this.gm = null;
            this.gb = ThemeResolver.e(MultiColumnComboBox.y, InputGroup.rx, InputGroup.qh);
            this.bo = NaN;
            this.be = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.f8, InputGroup.ef);
            this.bp = NaN;
            this.bf = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.f9, InputGroup.eg);
            this.cp = null;
            this.eq = null;
            this.gn = null;
            this.gc = MultiColumnComboBox.g6;
            this.ak = null;
            this.ah = null;
            this.a0 = false;
            this.et = null;
            this.dh = "No Matches Found";
            this.go = null;
            this.gd = MultiColumnComboBox.g7;
            this.gp = null;
            this.ge = MultiColumnComboBox.g8;
            this.al = null;
            this.ai = null;
            this.e0 = "";
            this.ay = true;
            this.gq = MultiColumnComboBox.hg;
            this.gf = MultiColumnComboBox.hg;
            this.am = null;
            this.aj = null;
            this.gr = null;
            this.gg = ThemeResolver.e(MultiColumnComboBox.y, InputGroup.se, InputGroup.qy);
            this.bq = NaN;
            this.bg = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.gu, InputGroup.e1);
            this.gs = null;
            this.gh = ThemeResolver.e(MultiColumnComboBox.y, InputGroup.sf, InputGroup.qz);
            this.br = NaN;
            this.bh = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.gv, InputGroup.e2);
            this.bs = NaN;
            this.bi = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.gw, InputGroup.e3);
            this.bt = NaN;
            this.bj = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.gx, InputGroup.e4);
            this.ax = true;
            this.u = 0;
            this.cx = null;
            this.cw = null;
            this.d = null;
            this.a = null;
            this.cq = null;
            this.a7 = false;
            this.gotFocus = null;
            this.lostFocus = null;
            this.textChanged = null;
            this.valueChanged = null;
            this.propertyChanged = null;
            let a = this.s();
            this.t = a;
            a.bg(this);
        }
        s() {
            return new MultiColumnComboBoxView();
        }
        fv(a, b, c) {
            switch (a) {
                case "BackgroundColor":
                    this.gt = this.g4 != null ? this.g4 : this.g9;
                    break;
                case "BorderColor":
                    this.gu = this.g5 != null ? this.g5 : this.ha;
                    break;
                case "BorderWidth":
                    this.bu = !isNaN_(this.b4) ? this.b4 : this.b6;
                    break;
                case "ContentPadding":
                    this.hs = InputGroup.ti(this.ht, this.hu);
                    break;
                case "CornerRadius":
                    this.f4 = InputGroup.m2(this.f5, this.f6);
                    break;
                case "FocusBorderColor":
                    this.gv = this.hh != null ? this.hh : this.hb;
                    break;
                case "FocusBorderWidth":
                    this.bv = !isNaN_(this.cg) ? this.cg : this.b7;
                    break;
                case "FocusUnderlineColor":
                    this.gw = this.hi != null ? this.hi : this.hc;
                    break;
                case "FocusUnderlineOpacity":
                    this.bw = !isNaN_(this.ch) ? this.ch : this.b8;
                    break;
                case "FocusUnderlineRippleOpacity":
                    this.bx = !isNaN_(this.ci) ? this.ci : this.b9;
                    break;
                case "HoverUnderlineColor":
                    this.gx = this.hj != null ? this.hj : this.hd;
                    break;
                case "HoverUnderlineOpacity":
                    this.by = !isNaN_(this.cj) ? this.cj : this.ca;
                    break;
                case "HoverUnderlineWidth":
                    this.bz = !isNaN_(this.ck) ? this.ck : this.cb;
                    break;
                case "ItemsSource":
                case "ValueField":
                case "DataSourceDesiredProperties":
                case "Fields":
                    this.t.ct();
                    break;
                case "LabelTextColor":
                    this.gy = this.hk != null ? this.hk : MultiColumnComboBox.g6;
                    break;
                case "LabelTextStyle":
                    this.an = this.au != null ? this.au : MultiColumnComboBox.aq;
                    break;
                case "NoMatchesFoundLabelTextColor":
                    this.g0 = this.hm != null ? this.hm : MultiColumnComboBox.g8;
                    break;
                case "NoMatchesFoundLabelBackgroundColor":
                    this.gz = this.hl != null ? this.hl : MultiColumnComboBox.g7;
                    break;
                case "NoMatchesFoundLabelTextStyle":
                    this.ao = this.av != null ? this.av : MultiColumnComboBox.ar;
                    break;
                case "UnderlineColor":
                    this.g2 = this.ho != null ? this.ho : this.he;
                    break;
                case "UnderlineOpacity":
                    this.b0 = !isNaN_(this.cl) ? this.cl : this.cc;
                    break;
                case "UnderlineRippleColor":
                    this.g3 = this.hp != null ? this.hp : this.hf;
                    break;
                case "UnderlineRippleOpacity":
                    this.b1 = !isNaN_(this.cm) ? this.cm : this.cd;
                    break;
                case "UnderlineRippleWidth":
                    this.b2 = !isNaN_(this.cn) ? this.cn : this.ce;
                    break;
                case "UnderlineWidth":
                    this.b3 = !isNaN_(this.co) ? this.co : this.cf;
                    break;
                case "BaseTheme":
                    this.z = this.aa == 0 ? 1 : this.aa;
                    break;
                case "Density":
                    this.ae = this.density == 0 ? 0 : this.density;
                    break;
                case "TextColor":
                    this.g1 = this.hn != null ? this.hn : MultiColumnComboBox.hg;
                    break;
                case "TextStyle":
                    this.ap = this.aw != null ? this.aw : null;
                    break;
                case "ActualDensity":
                case "ActualBaseTheme":
                case "ActualTextColor":
                case "ActualTextStyle":
                case "ActualBackgroundColor":
                case "ActualBorderColor":
                case "ActualBorderWidth":
                case "ActualContentPadding":
                case "ActualCornerRadius":
                case "ActualFocusBorderColor":
                case "ActualFocusBorderWidth":
                case "ActualFocusUnderlineColor":
                case "ActualFocusUnderlineOpacity":
                case "ActualFocusUnderlineRippleOpacity":
                case "ActualHoverUnderlineColor":
                case "ActualHoverUnderlineOpacity":
                case "ActualHoverUnderlineWidth":
                case "ActualLabelTextColor":
                case "ActualLabelTextStyle":
                case "ActualUnderlineColor":
                case "ActualUnderlineOpacity":
                case "ActualUnderlineRippleColor":
                case "ActualUnderlineRippleOpacity":
                case "ActualUnderlineRippleWidth":
                case "ActualUnderlineWidth":
                case "DropDownButtonVisible":
                case "ColumnHeadersVisible":
                case "RowSeparatorsVisible":
                case "ActualNoMatchesFoundLabel":
                case "ActualNoMatchesFoundLabelTextColor":
                case "ActualNoMatchesFoundLabelTextStyle":
                case MultiColumnComboBox.dj:
                    this.t.ck();
                    break;
                case "NoMatchesFoundLabel":
                    this.actualNoMatchesFoundLabel = stringIsNullOrEmpty(this.eu) ? "No Matches Found" : this.eu;
                    break;
                case "ActualLabelVisible":
                    this.t.cu();
                    break;
                case "Label":
                case "PlaceholderText":
                    this.t.ck();
                    this.actualLabelVisible = !stringIsNullOrEmpty(this.eq);
                    break;
                case "Text":
                    this.t.co();
                    let d = b != null ? b.toString() : null;
                    let e = c != null ? c.toString() : null;
                    this.fs(new MultiColumnComboBoxTextChangedEventArgs(d, e));
                    this.fu(1, e);
                    break;
                case "Value":
                    this.ft(new MultiColumnComboBoxValueChangedEventArgs(b, c));
                    this.fu(0, c);
                    break;
                case "ShowClearButton":
                    this.t.ch();
                    break;
                case "AllowFilter":
                    this.t.a5(this.a2);
                    break;
                case "SortMode":
                    this.t.cm();
                    break;
            }
        }
        f1() {
            this.t.cw();
        }
        get at() {
            if (null == this.as) {
                this.as = new FontInfo();
                this.as.n = "'Segoe UI', Verdana";
                this.as.d = 16;
            }
            return this.as;
        }
        get a9() {
            return this.az;
        }
        set a9(a) {
            let b = this.az;
            this.az = a;
            if (b != this.az) {
                this.fq("ShowClearButton", b, this.az);
            }
        }
        get g() {
            return this.c;
        }
        set g(a) {
            let b = this.c;
            this.c = a;
            if (b != this.c) {
                this.fq("Fields", b, this.c);
            }
        }
        get g4() {
            return this.gi;
        }
        set g4(a) {
            let b = this.gi;
            this.gi = a;
            if (b != this.gi) {
                this.fq("BackgroundColor", b, a);
            }
        }
        get gt() {
            return this.f7;
        }
        set gt(a) {
            let b = this.f7;
            this.f7 = a;
            if (b != this.f7) {
                this.fq("ActualBackgroundColor", b, a);
            }
        }
        get aa() {
            return this.x;
        }
        set aa(a) {
            let b = this.x;
            this.x = a;
            if (b != this.x) {
                this.fq("BaseTheme", enumGetBox(BaseControlTheme_$type, b), enumGetBox(BaseControlTheme_$type, a));
            }
        }
        get z() {
            return this.w;
        }
        set z(a) {
            let b = this.w;
            this.w = a;
            if (b != this.w) {
                this.fq("ActualBaseTheme", enumGetBox(BaseControlTheme_$type, b), enumGetBox(BaseControlTheme_$type, a));
            }
        }
        get g5() {
            return this.gj;
        }
        set g5(a) {
            let b = this.gj;
            this.gj = a;
            if (b != this.gj) {
                this.fq("BorderColor", b, a);
            }
        }
        get gu() {
            return this.f8;
        }
        set gu(a) {
            let b = this.f8;
            this.f8 = a;
            if (b != this.f8) {
                this.fq("ActualBorderColor", b, a);
            }
        }
        get b4() {
            return this.bk;
        }
        set b4(a) {
            let b = this.bk;
            this.bk = a;
            if (b != this.bk) {
                this.fq("BorderWidth", b, a);
            }
        }
        get bu() {
            return this.ba;
        }
        set bu(a) {
            let b = this.ba;
            this.ba = a;
            if (b != this.ba) {
                this.fq("ActualBorderWidth", b, a);
            }
        }
        get columnHeadersVisible() {
            return this.a3;
        }
        set columnHeadersVisible(a) {
            let b = this.a3;
            this.a3 = a;
            if (b != this.a3) {
                this.fq("ColumnHeadersVisible", b, a);
            }
        }
        get ht() {
            return this.hr;
        }
        set ht(a) {
            let b = this.hr;
            this.hr = a;
            if (b != this.hr) {
                this.fq("ContentPadding", b, a);
            }
        }
        get hs() {
            return this.hq;
        }
        set hs(a) {
            let b = this.hq;
            this.hq = a;
            if (b != this.hq) {
                this.fq("ActualContentPadding", b, a);
            }
        }
        get f5() {
            return this.f3;
        }
        set f5(a) {
            let b = this.f3;
            this.f3 = a;
            if (b != this.f3) {
                this.fq("CornerRadius", b, a);
            }
        }
        get f4() {
            return this.f2;
        }
        set f4(a) {
            let b = this.f2;
            this.f2 = a;
            if (b != this.f2) {
                this.fq("ActualCornerRadius", b, a);
            }
        }
        get f() {
            return this.b;
        }
        set f(a) {
            let b = this.b;
            this.b = a;
            if (b != this.b) {
                this.fq("DataSourceDesiredProperties", b, this.b);
            }
        }
        get density() {
            return this.ad;
        }
        set density(a) {
            let b = this.ad;
            this.ad = a;
            if (b != this.ad) {
                this.fq("Density", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, a));
            }
        }
        get ae() {
            return this.ac;
        }
        set ae(a) {
            let b = this.ac;
            this.ac = a;
            if (b != this.ac) {
                this.fq("ActualDensity", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, a));
            }
        }
        get dropDownButtonVisible() {
            return this.a5;
        }
        set dropDownButtonVisible(a) {
            let b = this.a5;
            this.a5 = a;
            if (b != this.a5) {
                this.fq("DropDownButtonVisible", b, a);
            }
        }
        get hh() {
            return this.gk;
        }
        set hh(a) {
            let b = this.gk;
            this.gk = a;
            if (b != this.gk) {
                this.fq("FocusBorderColor", b, a);
            }
        }
        get gv() {
            return this.f9;
        }
        set gv(a) {
            let b = this.f9;
            this.f9 = a;
            if (b != this.f9) {
                this.fq("ActualFocusBorderColor", b, a);
            }
        }
        get cg() {
            return this.bl;
        }
        set cg(a) {
            let b = this.bl;
            this.bl = a;
            if (b != this.bl) {
                this.fq("FocusBorderWidth", b, a);
            }
        }
        get bv() {
            return this.bb;
        }
        set bv(a) {
            let b = this.bb;
            this.bb = a;
            if (b != this.bb) {
                this.fq("ActualFocusBorderWidth", b, a);
            }
        }
        get hi() {
            return this.gl;
        }
        set hi(a) {
            let b = this.gl;
            this.gl = a;
            if (b != this.gl) {
                this.fq("FocusUnderlineColor", b, a);
            }
        }
        get gw() {
            return this.ga;
        }
        set gw(a) {
            let b = this.ga;
            this.gl = a;
            if (b != this.ga) {
                this.fq("ActualFocusUnderlineColor", b, a);
            }
        }
        get ch() {
            return this.bm;
        }
        set ch(a) {
            let b = this.bm;
            this.bm = a;
            if (b != this.bm) {
                this.fq("FocusUnderlineOpacity", b, a);
            }
        }
        get bw() {
            return this.bc;
        }
        set bw(a) {
            let b = this.bc;
            this.bc = a;
            if (b != this.bc) {
                this.fq("ActualFocusUnderlineOpacity", b, a);
            }
        }
        get ci() {
            return this.bn;
        }
        set ci(a) {
            let b = this.bn;
            this.bn = a;
            if (b != this.bn) {
                this.fq("FocusUnderlineRippleOpacity", b, a);
            }
        }
        get bx() {
            return this.bd;
        }
        set bx(a) {
            let b = this.bd;
            this.bd = a;
            if (b != this.bd) {
                this.fq("ActualFocusUnderlineRippleOpacity", b, a);
            }
        }
        get hj() {
            return this.gm;
        }
        set hj(a) {
            let b = this.gm;
            this.gm = a;
            if (b != this.gm) {
                this.fq("HoverUnderlineColor", b, a);
            }
        }
        get gx() {
            return this.gb;
        }
        set gx(a) {
            let b = this.gb;
            this.gb = a;
            if (b != this.gb) {
                this.fq("ActualHoverUnderlineColor", b, a);
            }
        }
        get cj() {
            return this.bo;
        }
        set cj(a) {
            let b = this.bo;
            this.bo = a;
            if (b != this.bo) {
                this.fq("HoverUnderlineOpacity", b, a);
            }
        }
        get by() {
            return this.be;
        }
        set by(a) {
            let b = this.be;
            this.be = a;
            if (b != this.be) {
                this.fq("ActualHoverUnderlineOpacity", b, a);
            }
        }
        get ck() {
            return this.bp;
        }
        set ck(a) {
            let b = this.bp;
            this.bp = a;
            if (b != this.bp) {
                this.fq("HoverUnderlineWidth", b, a);
            }
        }
        get bz() {
            return this.bf;
        }
        set bz(a) {
            let b = this.bf;
            this.bf = a;
            if (b != this.bf) {
                this.fq("ActualHoverUnderlineWidth", b, a);
            }
        }
        get itemsSource() {
            return this.cp;
        }
        set itemsSource(a) {
            let b = this.cp;
            this.cp = a;
            if (b != this.cp) {
                this.fq("ItemsSource", b, this.cp);
            }
        }
        get actualDataSource() {
            return this.t.b();
        }
        get eo() {
            return this.eq;
        }
        set eo(a) {
            let b = this.eo;
            if (0 == StringComparer.b.compare(a, b)) {
                return;
            }
            this.eq = a;
            this.fq("Label", b, this.eq);
        }
        get hk() {
            return this.gn;
        }
        set hk(a) {
            let b = this.gn;
            this.gn = a;
            if (b != this.gn) {
                this.fq("LabelTextColor", b, a);
            }
        }
        get gy() {
            return this.gc;
        }
        set gy(a) {
            let b = this.gc;
            this.gc = a;
            if (b != this.gc) {
                this.fq("ActualLabelTextColor", b, a);
            }
        }
        get au() {
            return this.ak;
        }
        set au(a) {
            let b = this.ak;
            this.ak = a;
            if (b != this.ak) {
                this.fq("LabelTextStyle", b, this.ak);
            }
        }
        get an() {
            return this.ah;
        }
        set an(a) {
            let b = this.ah;
            this.ah = a;
            if (this.ah != b) {
                this.fq("ActualLabelTextStyle", b, this.ah);
            }
        }
        get actualLabelVisible() {
            return this.a0;
        }
        set actualLabelVisible(a) {
            let b = this.a0;
            this.a0 = a;
            if (b != this.a0) {
                this.fq("ActualLabelVisible", b, a);
            }
        }
        get eu() {
            return this.et;
        }
        set eu(a) {
            let b = this.et;
            if (0 == StringComparer.b.compare(a, b)) {
                return;
            }
            this.et = a;
            this.fq("NoMatchesFoundLabel", b, this.et);
        }
        get actualNoMatchesFoundLabel() {
            return this.dh;
        }
        set actualNoMatchesFoundLabel(a) {
            let b = this.dh;
            this.dh = a;
            if (b != this.dh) {
                this.fq("ActualNoMatchesFoundLabel", b, a);
            }
        }
        get hl() {
            return this.go;
        }
        set hl(a) {
            let b = this.go;
            this.go = a;
            if (b != this.go) {
                this.fq("NoMatchesFoundLabelBackgroundColor", b, a);
            }
        }
        get gz() {
            return this.gd;
        }
        set gz(a) {
            let b = this.gd;
            this.gd = a;
            if (b != this.gd) {
                this.fq(MultiColumnComboBox.dj, b, a);
            }
        }
        get hm() {
            return this.gp;
        }
        set hm(a) {
            let b = this.gp;
            this.gp = a;
            if (b != this.gp) {
                this.fq("NoMatchesFoundLabelTextColor", b, a);
            }
        }
        get g0() {
            return this.ge;
        }
        set g0(a) {
            let b = this.ge;
            this.ge = a;
            if (b != this.ge) {
                this.fq("ActualNoMatchesFoundLabelTextColor", b, a);
            }
        }
        get av() {
            return this.al;
        }
        set av(a) {
            let b = this.al;
            this.al = a;
            if (b != this.al) {
                this.fq("NoMatchesFoundLabelTextStyle", b, this.al);
            }
        }
        get ao() {
            return this.ai;
        }
        set ao(a) {
            let b = this.ai;
            this.ai = a;
            if (this.ai != b) {
                this.fq("ActualNoMatchesFoundLabelTextStyle", b, this.ai);
            }
        }
        get ez() {
            return this.e0;
        }
        set ez(a) {
            let b = this.ez;
            if (0 == StringComparer.b.compare(a, b)) {
                return;
            }
            this.e0 = a;
            this.fq("PlaceholderText", b, this.e0);
        }
        get rowSeparatorsVisible() {
            return this.ay;
        }
        set rowSeparatorsVisible(a) {
            let b = this.ay;
            this.ay = a;
            if (b != this.ay) {
                this.fq("RowSeparatorsVisible", b, a);
            }
        }
        get hn() {
            return this.gq;
        }
        set hn(a) {
            let b = this.gq;
            this.gq = a;
            if (b != this.gq) {
                this.fq("TextColor", b, a);
            }
        }
        get g1() {
            return this.gf;
        }
        set g1(a) {
            let b = this.gf;
            this.gf = a;
            if (b != this.gf) {
                this.fq("ActualTextColor", b, a);
            }
        }
        get aw() {
            return this.am;
        }
        set aw(a) {
            let b = this.am;
            this.am = a;
            if (b != this.am) {
                this.fq("TextStyle", b, this.am);
            }
        }
        get ap() {
            return this.aj;
        }
        set ap(a) {
            let b = this.aj;
            this.aj = a;
            if (this.aj != b) {
                this.fq("ActualTextStyle", b, this.aj);
            }
        }
        get ho() {
            return this.gr;
        }
        set ho(a) {
            let b = this.gr;
            this.gr = a;
            if (b != this.gr) {
                this.fq("UnderlineColor", b, a);
            }
        }
        get g2() {
            return this.gg;
        }
        set g2(a) {
            let b = this.gg;
            this.gg = a;
            if (b != this.gg) {
                this.fq("ActualUnderlineColor", b, a);
            }
        }
        get cl() {
            return this.bq;
        }
        set cl(a) {
            let b = this.bq;
            this.bq = a;
            if (b != this.bq) {
                this.fq("UnderlineOpacity", b, a);
            }
        }
        get b0() {
            return this.bg;
        }
        set b0(a) {
            let b = this.bg;
            this.bg = a;
            if (b != this.bg) {
                this.fq("ActualUnderlineOpacity", b, a);
            }
        }
        get hp() {
            return this.gs;
        }
        set hp(a) {
            let b = this.gs;
            this.gs = a;
            if (b != this.gs) {
                this.fq("UnderlineRippleColor", b, a);
            }
        }
        get g3() {
            return this.gh;
        }
        set g3(a) {
            let b = this.gh;
            this.gh = a;
            if (b != this.gh) {
                this.fq("ActualUnderlineRippleColor", b, a);
            }
        }
        get cm() {
            return this.br;
        }
        set cm(a) {
            let b = this.br;
            this.br = a;
            if (b != this.br) {
                this.fq("UnderlineRippleOpacity", b, a);
            }
        }
        get b1() {
            return this.bh;
        }
        set b1(a) {
            let b = this.bh;
            this.bh = a;
            if (b != this.bh) {
                this.fq("ActualUnderlineRippleOpacity", b, a);
            }
        }
        get cn() {
            return this.bs;
        }
        set cn(a) {
            let b = this.bs;
            this.bs = a;
            if (b != this.bs) {
                this.fq("UnderlineRippleWidth", b, a);
            }
        }
        get b2() {
            return this.bi;
        }
        set b2(a) {
            let b = this.bi;
            this.bi = a;
            if (b != this.bi) {
                this.fq("ActualUnderlineRippleWidth", b, a);
            }
        }
        get co() {
            return this.bt;
        }
        set co(a) {
            let b = this.bt;
            this.bt = a;
            if (b != this.bt) {
                this.fq("UnderlineWidth", b, a);
            }
        }
        get b3() {
            return this.bj;
        }
        set b3(a) {
            let b = this.bj;
            this.bj = a;
            if (b != this.bj) {
                this.fq("ActualUnderlineWidth", b, a);
            }
        }
        get a2() {
            return this.ax;
        }
        set a2(a) {
            let b = this.ax;
            this.ax = a;
            if (b != this.ax) {
                this.fq("AllowFilter", b, a);
            }
        }
        get v() {
            return this.u;
        }
        set v(a) {
            let b = this.u;
            this.u = a;
            if (b != this.u) {
                this.fq("SortMode", enumGetBox(SortMode_$type, b), enumGetBox(SortMode_$type, this.u));
            }
        }
        get e7() {
            return this.cx;
        }
        set e7(a) {
            let b = this.cx;
            this.cx = a;
            if (b != this.cx) {
                this.fq("TextField", b, a);
            }
        }
        get e5() {
            return this.cw;
        }
        set e5(a) {
            let b = this.cw;
            this.cw = a;
            if (b != this.cw) {
                this.fq("Text", b, a);
            }
        }
        get j() {
            return this.d;
        }
        set j(a) {
            let b = this.d;
            this.d = a;
            if (b != this.d) {
                this.fq("ValueField", b, a);
            }
        }
        get e() {
            return this.a;
        }
        set e(a) {
            let b = this.a;
            this.a = a;
            if (b != this.a) {
                this.fq("ActualValueField", b, a);
            }
        }
        get cv() {
            return this.cq;
        }
        set cv(a) {
            let b = this.cq;
            this.cq = a;
            if (b != this.cq) {
                this.fq("Value", b, a);
            }
        }
        cs(a, b) {
            let c = new FastReflectionHelper(false, b);
            return c.getPropertyValue(a);
        }
        n() {
            let a = this.ej();
            return this.m(a);
        }
        ej() {
            return this.ei(this.e7);
        }
        ct(a) {
            let b = this.i();
            if (null == b || b.length == 0) {
                return null;
            }
            let c = new List$1(Base.$, 0);
            for (let e = 0; e < b.length; e++) {
                let d = b[e];
                let f = this.cs(a, d);
                c.add1(f);
            }
            if (c.count == 1) {
                return c._inner[0];
            }
            return c.toArray();
        }
        eh(a) {
            let b = this.ej();
            let c;
            if (null != b) {
                let d = this.cs(a, b);
                c = null != d ? d.toString() : null;
            }
            else {
                c = null;
            }
            return c;
        }
        m(a) {
            let b = this.t.e;
            if (null == b) {
                return null;
            }
            let c = b.actualColumns;
            if (null == c || 0 == c.count) {
                return null;
            }
            if (stringIsNullOrEmpty(a)) {
                return c._inner[0];
            }
            for (let d of fromEnum(c)) {
                if (0 == StringComparer.b.compare(d.hy, a)) {
                    return d;
                }
            }
            return null;
        }
        ei(a) {
            if (stringIsNullOrEmpty(a)) {
                let b = this.actualDataSource;
                if (null == b) {
                    return null;
                }
                let c = b.actualSchema;
                if (null == c) {
                    return null;
                }
                let d = c.propertyNames;
                if (0 == d.length) {
                    return null;
                }
                return d[0];
            }
            return a;
        }
        h(a) {
            let b = new List$1(String_$type, 0);
            if (null == a || a.length == 0) {
                let c = this.ei(null);
                if (stringIsNullOrEmpty(c)) {
                    return null;
                }
                b.add(c);
                return b.toArray();
            }
            for (let e = 0; e < a.length; e++) {
                let d = a[e];
                let f = this.ei(d);
                if (null != f) {
                    b.add(f);
                }
            }
            if (b.count > 0) {
                return b.toArray();
            }
            return null;
        }
        i() {
            let a = this.j;
            return this.h(a);
        }
        fr(a) {
            this.fu(2, a);
        }
        fu(a, b) {
            if (this.a7) {
                return;
            }
            this.a7 = true;
            try {
                switch (a) {
                    case 2:
                        {
                            let c = b;
                            let d;
                            let e;
                            if (null != c) {
                                d = this.eh(c);
                                e = this.ct(c);
                            }
                            else {
                                d = stringEmpty();
                                e = null;
                            }
                            if (this.e5 != d) {
                                this.e5 = d;
                            }
                            if (this.cv != e) {
                                this.cv = e;
                            }
                        }
                        break;
                    case 1:
                        this.t.cj(b.toString());
                        break;
                    case 0:
                        this.t.ci(b);
                        break;
                }
            }
            finally {
                this.a7 = false;
            }
            this.t.ch();
        }
        fy(a) {
            this.e5 = a;
        }
        f0() {
            this.ap = (null == this.aw) ? this.at : this.aw;
        }
        fz() {
        }
        closeUp() {
            this.t.az();
        }
        destroy() {
            this.provideRenderer(null);
        }
        dropDown() {
            this.t.a3();
        }
        focus() {
            this.t.a6();
        }
        select() {
            this.t.cd();
        }
        notifySizeChanged() {
            this.t.bp();
        }
        provideRenderer(a) {
            this.t.b3(a);
        }
        cr() {
            return this.l();
        }
        ea() {
            let a = this.l();
            return a.am();
        }
        l() {
            let a = new MultiColumnComboVisualModelExport();
            a.a = AppearanceHelper.a(this.gt);
            a.j = this.z;
            a.b = AppearanceHelper.a(this.gu);
            a.p = this.bu;
            a.columnHeadersVisible = this.columnHeadersVisible;
            a.au = this.hs;
            a.at = this.f4;
            a.k = this.ae;
            a.dropDownButtonVisible = this.dropDownButtonVisible;
            a.q = this.bw;
            a.aa = this.eo;
            a.c = AppearanceHelper.a(this.gy);
            a.actualLabelVisible = this.actualLabelVisible;
            a.actualNoMatchesFoundLabel = this.actualNoMatchesFoundLabel;
            a.d = AppearanceHelper.a(this.gz);
            a.e = AppearanceHelper.a(this.g0);
            a.al = this.ez;
            a.rowSeparatorsVisible = this.rowSeparatorsVisible;
            a.f = AppearanceHelper.a(this.g1);
            a.g = AppearanceHelper.a(this.g2);
            a.r = this.b0;
            a.h = AppearanceHelper.a(this.g3);
            a.s = this.b1;
            a.t = this.b2;
            a.u = this.b3;
            a.an = this.e5;
            a.y = this.cv;
            a.i = this.t.e.lp();
            if (this.an != null) {
                let b = this.an;
                if (this.t != null && b.n == null) {
                    let c = this.t.ad;
                    let d = FontUtil.getFontInfoFromString(c, b.fontString);
                    b.n = d.n;
                    b.d = d.d;
                    b.o = d.o;
                    b.q = d.q;
                    b.r = d.r;
                    b.s = d.s;
                }
                if (b.n != null) {
                    a.ab = b.n;
                }
                if (!isNaN_(b.d)) {
                    a.v = b.d;
                }
                if (b.s != null) {
                    a.af = b.s;
                }
                if (b.q != null) {
                    a.ad = b.q;
                }
                if (b.o != null) {
                    a.ac = b.q;
                }
            }
            if (this.ao != null) {
                let e = this.ao;
                if (this.t != null && e.n == null) {
                    let f = this.t.ad;
                    let g = FontUtil.getFontInfoFromString(f, e.fontString);
                    e.n = g.n;
                    e.d = g.d;
                    e.o = g.o;
                    e.q = g.q;
                    e.r = g.r;
                    e.s = g.s;
                }
                if (e.n != null) {
                    a.ag = e.n;
                }
                if (!isNaN_(e.d)) {
                    a.w = e.d;
                }
                if (e.s != null) {
                    a.ak = e.s;
                }
                if (e.q != null) {
                    a.ai = e.q;
                }
                if (e.o != null) {
                    a.ah = e.q;
                }
            }
            if (this.ap != null) {
                let h = this.ap;
                if (this.t != null && h.n == null) {
                    let i = this.t.ad;
                    let j = FontUtil.getFontInfoFromString(i, h.fontString);
                    h.n = j.n;
                    h.d = j.d;
                    h.o = j.o;
                    h.q = j.q;
                    h.r = j.r;
                    h.s = j.s;
                }
                if (h.n != null) {
                    a.ao = h.n;
                }
                if (!isNaN_(h.d)) {
                    a.x = h.d;
                }
                if (h.s != null) {
                    a.as = h.s;
                }
                if (h.q != null) {
                    a.aq = h.q;
                }
                if (h.o != null) {
                    a.ap = h.q;
                }
            }
            return a;
        }
        fo(a) {
            if (null != this.gotFocus) {
                this.gotFocus(this, a);
            }
        }
        fp(a) {
            if (null != this.lostFocus) {
                this.lostFocus(this, a);
            }
        }
        fs(a) {
            if (null != this.textChanged) {
                this.textChanged(this, a);
            }
        }
        ft(a) {
            if (null != this.valueChanged) {
                this.valueChanged(this, a);
            }
        }
        fq(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            this.fv(a, b, c);
        }
    }
    MultiColumnComboBox.$t = /*@__PURE__*/ markType(MultiColumnComboBox, 'MultiColumnComboBox', Base.$, [INotifyPropertyChanged_$type]);
    MultiColumnComboBox.y = 1;
    MultiColumnComboBox.g6 = /*@__PURE__*/ ThemeResolver.e(MultiColumnComboBox.y, Label.c7, Label.c0);
    MultiColumnComboBox.g8 = /*@__PURE__*/ ThemeResolver.e(MultiColumnComboBox.y, Label.c7, Label.c0);
    MultiColumnComboBox.g7 = /*@__PURE__*/ BrushUtil.g(255, 255, 255, 255);
    MultiColumnComboBox.aq = null;
    MultiColumnComboBox.dj = "ActualNoMatchesFoundLabelBackgroundColor";
    MultiColumnComboBox.ar = null;
    MultiColumnComboBox.hg = /*@__PURE__*/ BrushUtil.g(221, 0, 0, 0);
    return MultiColumnComboBox;
})();
//# sourceMappingURL=MultiColumnComboBoxView_combined.js.map
