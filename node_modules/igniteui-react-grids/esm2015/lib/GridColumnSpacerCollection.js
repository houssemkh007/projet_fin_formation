/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { List$1 } from "igniteui-react-core";
import { GridColumnSpacer } from "./GridColumnSpacer";
import { markType } from "igniteui-react-core";
/**
 * @hidden
 */
export let GridColumnSpacerCollection = /*@__PURE__*/ (() => {
    class GridColumnSpacerCollection extends List$1 {
        constructor() {
            super(GridColumnSpacer.$, 0);
        }
        ac() {
            let a = this.count;
            let b = 0;
            for (let c = 0; c < a; c++) {
                b = b + this._inner[c].i;
            }
            return b;
        }
        ag() {
            let a = this.count;
            let b = 0;
            for (let c = 0; c < a; c++) {
                if (this._inner[c].f) {
                    b = b + this._inner[c].i;
                }
            }
            return b;
        }
        ae() {
            let a = this.count;
            let b = 0;
            for (let c = 0; c < a; c++) {
                if (!this._inner[c].f) {
                    b = b + this._inner[c].i;
                }
            }
            return b;
        }
        ah() {
            let a = this.count;
            let b = 0;
            for (let c = 0; c < a; c++) {
                if (this._inner[c].i > 0) {
                    b = b + this._inner[c].j;
                }
            }
            return b;
        }
        ad(a) {
            let b = this.count;
            let c = 0;
            for (let d = 0; d < b; d++) {
                if (!this._inner[d].d && !(this._inner[d].n == a)) {
                    c = c + this._inner[d].i;
                }
            }
            return c;
        }
        af(a) {
            let b = this.count;
            let c = 0;
            for (let d = 0; d < b; d++) {
                if (this._inner[d].d && !(this._inner[d].n == a)) {
                    c = c + this._inner[d].i;
                }
            }
            return c;
        }
    }
    GridColumnSpacerCollection.$t = /*@__PURE__*/ markType(GridColumnSpacerCollection, 'GridColumnSpacerCollection', /*@__PURE__*/ List$1.$.specialize(GridColumnSpacer.$));
    return GridColumnSpacerCollection;
})();
//# sourceMappingURL=GridColumnSpacerCollection.js.map
