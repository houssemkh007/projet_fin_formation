/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { CellPresenterBase } from "./CellPresenterBase";
import { CellModel } from "./CellModel";
import { TextCellModel } from "./TextCellModel";
import { ContentCellModelHelper } from "./ContentCellModelHelper";
import { TypeRegistrar, markType } from "igniteui-react-core";
/**
 * @hidden
 */
export let TextHeaderCellPresenter = /*@__PURE__*/ (() => {
    class TextHeaderCellPresenter extends CellPresenterBase {
        constructor(a) {
            super(a);
        }
        get d() {
            return this.a;
        }
        b(a) {
            super.b(a);
            let b = a;
            if (a.as) {
                if (a.ax(TextCellModel.kq)) {
                    b.ip = b.ks;
                    this.d.cl.setRawText(b.ip);
                }
                if (a.ax(CellModel.f6)) {
                    let c = this.d.cf.l;
                    if (a.bb) {
                        this.d.cf.l = false;
                    }
                    this.d.cf.b = a.m;
                    if (a.bb) {
                        this.d.cf.l = c;
                    }
                }
                if (a.ax(CellModel.f7)) {
                    let d = this.d.cf.l;
                    if (a.bb) {
                        this.d.cf.l = false;
                    }
                    this.d.cf.a0 = a.kn;
                    if (a.bb) {
                        this.d.cf.l = d;
                    }
                }
                if (a.aw("IsColumnOptionsEnabled")) {
                    let e = b.k1;
                    if (e) {
                        e = this.e();
                    }
                    this.d.ch = e;
                    this.d.cj.setRawStyleProperty("display", e ? "inline-block" : "none");
                    this.a.bw(a.gf, (a.fo + a.fq + a.eb + a.ee));
                }
                if (a.aw("SortIndicatorStyle")) {
                    this.d.cf.f = b.kz;
                }
                if (a.aw("ColumnOptionsIconAlignment")) {
                    this.d.b9 = b.kv;
                }
                if (a.aw("ColumnOptionsIconBehavior")) {
                    this.d.cb = b.kx;
                }
                if (a.aw("ColumnOptionsIconColor")) {
                    this.d.cd.bp = b.ld;
                }
                ContentCellModelHelper.a(this.a.w, b, this.a.z, this.d.cl, this.a);
            }
        }
        e() {
            return TypeRegistrar.isRegistered("IgxGridColumnOptionsComponent");
        }
    }
    TextHeaderCellPresenter.$t = /*@__PURE__*/ markType(TextHeaderCellPresenter, 'TextHeaderCellPresenter', CellPresenterBase.$);
    return TextHeaderCellPresenter;
})();
//# sourceMappingURL=TextHeaderCellPresenter.js.map
