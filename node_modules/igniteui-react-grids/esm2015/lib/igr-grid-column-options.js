import * as React from 'react';
import { ensureEnum, ensureBool, NamePatcher, isValidProp, getModifiedProps } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
import { ReactRenderer } from "igniteui-react-core";
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { GridColumnOptions } from './GridColumnOptions';
import { IgrGridColumnOptionsBase } from "./igr-grid-column-options-base";
import { IgrGridColumnSortOptions } from "./igr-grid-column-sort-options";
import { IgrGridColumnMoveOptions } from "./igr-grid-column-move-options";
import { IgrGridColumnPinOptions } from "./igr-grid-column-pin-options";
import { IgrGridColumnHideOptions } from "./igr-grid-column-hide-options";
import { IgrGridColumnGroupOptions } from "./igr-grid-column-group-options";
import { IgrGridColumnFilterOptions } from "./igr-grid-column-filter-options";
import { IgrFilterApplyButtonClickEventArgs } from './igr-filter-apply-button-click-event-args';
import { IgrFilterCancelButtonClickEventArgs } from './igr-filter-cancel-button-click-event-args';
import { ControlDisplayDensity_$type } from "igniteui-react-core";
export class IgrGridColumnOptions extends IgrGridColumnOptionsBase {
    constructor(props) {
        super(props);
        this._reactRenderer = null;
        this._filterApplyButtonClick = null;
        this._filterApplyButtonClick_wrapped = null;
        this._filterCancelButtonClick = null;
        this._filterCancelButtonClick_wrapped = null;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._getMainRef = this._getMainRef.bind(this);
        this._getSortSectionRef = this._getSortSectionRef.bind(this);
        this._getMoveSectionRef = this._getMoveSectionRef.bind(this);
        this._getPinSectionRef = this._getPinSectionRef.bind(this);
        this._getFilterSectionRef = this._getFilterSectionRef.bind(this);
        this._getHeaderColumnNameSectionRef = this._getHeaderColumnNameSectionRef.bind(this);
        this._getHeaderButtonsSectionRef = this._getHeaderButtonsSectionRef.bind(this);
        this._getHideSectionRef = this._getHideSectionRef.bind(this);
        this._getGroupSectionRef = this._getGroupSectionRef.bind(this);
        this._getHeaderSectionRef = this._getHeaderSectionRef.bind(this);
        this._getSortOptionsRef = this._getSortOptionsRef.bind(this);
        this._getMoveOptionsRef = this._getMoveOptionsRef.bind(this);
        this._getPinOptionsRef = this._getPinOptionsRef.bind(this);
        this._getHideOptionsRef = this._getHideOptionsRef.bind(this);
        this._getGroupOptionsRef = this._getGroupOptionsRef.bind(this);
        this._getFilterOptionsRef = this._getFilterOptionsRef.bind(this);
        var columnOptions = this.i;
        columnOptions.notifySizeChanged();
        if (props) {
            this.initializeProperties();
        }
    }
    set height(value) {
        this._height = value;
        if (this._elRef) {
            this._elRef.style.height = value;
            this.i.notifySizeChanged();
        }
    }
    get height() {
        return this._height;
    }
    set width(value) {
        this._width = value;
        if (this._elRef) {
            this._elRef.style.height = value;
            this.i.notifySizeChanged();
        }
    }
    get width() {
        return this._width;
    }
    _getMainRef(ref) {
        this._elRef = ref;
        this.verifyReferences();
    }
    // These are the  main sections at the root level. 
    _getHeaderSectionRef(ref) {
        this._headerSectionRef = ref;
        this.verifyReferences();
    }
    _getSortSectionRef(ref) {
        this._sortSectionRef = ref;
        this.verifyReferences();
    }
    _getMoveSectionRef(ref) {
        this._moveSectionRef = ref;
        this.verifyReferences();
    }
    _getPinSectionRef(ref) {
        this._pinSectionRef = ref;
        this.verifyReferences();
    }
    _getFilterSectionRef(ref) {
        this._filterSectionRef = ref;
        this.verifyReferences();
    }
    // Sub-sections
    _getHeaderColumnNameSectionRef(ref) {
        this._headerColumnNameSectionRef = ref;
        this.verifyReferences();
    }
    _getHeaderButtonsSectionRef(ref) {
        this._headerButtonsSectionRef = ref;
        this.verifyReferences();
    }
    _getHideSectionRef(ref) {
        this._hideSectionRef = ref;
        this.verifyReferences();
    }
    _getGroupSectionRef(ref) {
        this._groupSectionRef = ref;
        this.verifyReferences();
    }
    // The actual components
    _getSortOptionsRef(ref) {
        this._sortOptionsRef = ref;
        this.verifyReferences();
    }
    _getMoveOptionsRef(ref) {
        this._moveOptionsRef = ref;
        this.verifyReferences();
    }
    _getPinOptionsRef(ref) {
        this._pinOptionsRef = ref;
        this.verifyReferences();
    }
    _getHideOptionsRef(ref) {
        this._hideOptionsRef = ref;
        this.verifyReferences();
    }
    _getGroupOptionsRef(ref) {
        this._groupOptionsRef = ref;
        this.verifyReferences();
    }
    _getFilterOptionsRef(ref) {
        this._filterOptionsRef = ref;
        this.verifyReferences();
    }
    render() {
        return (React.createElement("div", { className: "ig-grid-column-options igr-grid-column-options", ref: this._getMainRef }, React.createElement("div", { ref: this._getHeaderSectionRef, key: "headerSection" }, React.createElement("div", { ref: this._getHeaderColumnNameSectionRef, key: "headerColumnNameSection" }), React.createElement("div", { ref: this._getHeaderButtonsSectionRef, key: "headerButtonsSection" }, React.createElement("div", { ref: this._getGroupSectionRef, key: "groupSection" }, React.createElement(IgrGridColumnGroupOptions, { ref: this._getGroupOptionsRef, key: "groupOptions" })), React.createElement("div", { ref: this._getHideSectionRef, key: "hideSection" }, React.createElement(IgrGridColumnHideOptions, { ref: this._getHideOptionsRef, key: "hideOptions" })))), React.createElement("div", { ref: this._getSortSectionRef, key: "sortSection" }, React.createElement(IgrGridColumnSortOptions, { ref: this._getSortOptionsRef, key: "sortOptions" })), React.createElement("div", { ref: this._getMoveSectionRef, key: "moveSection" }, React.createElement(IgrGridColumnMoveOptions, { ref: this._getMoveOptionsRef, key: "moveOptions" })), React.createElement("div", { ref: this._getPinSectionRef, key: "pinSection" }, React.createElement(IgrGridColumnPinOptions, { ref: this._getPinOptionsRef, key: "pinOptions" })), React.createElement("div", { ref: this._getFilterSectionRef, key: "filterSection" }, React.createElement(IgrGridColumnFilterOptions, { ref: this._getFilterOptionsRef, key: "filterOptions" }))));
    }
    verifyReferences() {
        if (this._elRef &&
            this._headerSectionRef &&
            this._sortSectionRef &&
            this._moveSectionRef &&
            this._pinSectionRef &&
            this._filterSectionRef &&
            this._headerColumnNameSectionRef &&
            this._headerButtonsSectionRef &&
            this._hideSectionRef &&
            this._groupSectionRef &&
            this._sortOptionsRef &&
            this._moveOptionsRef &&
            this._pinOptionsRef &&
            this._hideOptionsRef &&
            this._groupOptionsRef &&
            this._filterOptionsRef) {
            this._reactRenderer = new ReactRenderer(this._elRef, document, false, null);
            if (document) {
                this._elRef.style.display = "block";
                this._elRef.style.width = "100%";
                this._elRef.style.height = "100%";
            }
            this.i.provideRenderer(this._reactRenderer);
            var headerSectionWrapper = this._reactRenderer.getWrapper(this._headerSectionRef);
            var sortSectionWrapper = this._reactRenderer.getWrapper(this._sortSectionRef);
            var moveSectionWrapper = this._reactRenderer.getWrapper(this._moveSectionRef);
            var pinSectionWrapper = this._reactRenderer.getWrapper(this._pinSectionRef);
            var filterSectionWrapper = this._reactRenderer.getWrapper(this._filterSectionRef);
            var headerColumnNameSectionWrapper = this._reactRenderer.getWrapper(this._headerColumnNameSectionRef);
            var headerButtonsSectionWrapper = this._reactRenderer.getWrapper(this._headerButtonsSectionRef);
            var hideSectionWrapper = this._reactRenderer.getWrapper(this._hideSectionRef);
            var groupSectionWrapper = this._reactRenderer.getWrapper(this._groupSectionRef);
            this.i.provideContent(headerSectionWrapper, sortSectionWrapper, moveSectionWrapper, pinSectionWrapper, filterSectionWrapper, headerColumnNameSectionWrapper, headerButtonsSectionWrapper, hideSectionWrapper, groupSectionWrapper, this._sortOptionsRef.i, this._moveOptionsRef.i, this._pinOptionsRef.i, this._hideOptionsRef.i, this._groupOptionsRef.i, this._filterOptionsRef.i);
            this._reactRenderer.addSizeWatcher(() => {
                this.i.notifySizeChanged();
            });
        }
    }
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    initializeProperties() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    // supports angular themes or custom properties set in CSS
    updateStyle() {
        this._styling(this._elRef, this);
    }
    componentWillUnmount() {
        this.i.destroy();
        if (this._reactRenderer)
            this._reactRenderer.destroy();
    }
    componentDidMount() {
        this._elRef.style.width = this._width ? this._width : "";
        this._elRef.style.height = this._height ? this._height : "";
        this.i.notifySizeChanged();
        this.initializeContent();
    }
    initializeContent() {
        this._styling(this._elRef, this);
        this.updateStyle();
        this.i.notifySizeChanged();
    }
    createImplementation() {
        return new GridColumnOptions();
    }
    get i() {
        return this._implementation;
    }
    get headerOptionsVisibleResolved() {
        return this.i.ce;
    }
    get sortOptionsVisibleResolved() {
        return this.i.cs;
    }
    get moveOptionsVisibleResolved() {
        return this.i.cm;
    }
    get pinOptionsVisibleResolved() {
        return this.i.cp;
    }
    get hideOptionsVisibleResolved() {
        return this.i.cj;
    }
    get groupOptionsVisibleResolved() {
        return this.i.cd;
    }
    get filterOptionsVisibleResolved() {
        return this.i.ca;
    }
    /**
     * Gets or sets the font to use for columnNames.
    */
    get columnNameTextStyle() {
        if (this.i.b5 == null) {
            return null;
        }
        return this.i.b5.fontString;
    }
    set columnNameTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.b5 = fi;
    }
    /**
     * Gets or sets the amount of left padding to use for the left edge of the component.
    */
    get paddingLeft() {
        return this.i.c3;
    }
    set paddingLeft(v) {
        this.i.c3 = +v;
    }
    /**
     * Gets or sets the amount of left padding to use for the top edge of the component.
    */
    get paddingTop() {
        return this.i.c5;
    }
    set paddingTop(v) {
        this.i.c5 = +v;
    }
    /**
     * Gets or sets the amount of left padding to use for the right edge of the component.
    */
    get paddingRight() {
        return this.i.c4;
    }
    set paddingRight(v) {
        this.i.c4 = +v;
    }
    /**
     * Gets or sets the amount of left padding to use for the bottom edge of the component.
    */
    get paddingBottom() {
        return this.i.c2;
    }
    set paddingBottom(v) {
        this.i.c2 = +v;
    }
    get headerVisible() {
        return this.i.cg;
    }
    set headerVisible(v) {
        this.i.cg = ensureBool(v);
    }
    get sortOptionsVisible() {
        return this.i.cr;
    }
    set sortOptionsVisible(v) {
        this.i.cr = ensureBool(v);
    }
    get moveOptionsVisible() {
        return this.i.cl;
    }
    set moveOptionsVisible(v) {
        this.i.cl = ensureBool(v);
    }
    get pinOptionsVisible() {
        return this.i.co;
    }
    set pinOptionsVisible(v) {
        this.i.co = ensureBool(v);
    }
    get hideOptionsVisible() {
        return this.i.ci;
    }
    set hideOptionsVisible(v) {
        this.i.ci = ensureBool(v);
    }
    get groupOptionsVisible() {
        return this.i.cc;
    }
    set groupOptionsVisible(v) {
        this.i.cc = ensureBool(v);
    }
    get filterOptionsVisible() {
        return this.i.b9;
    }
    set filterOptionsVisible(v) {
        this.i.b9 = ensureBool(v);
    }
    get sortHeaderCaption() {
        return this.i.ep;
    }
    set sortHeaderCaption(v) {
        this.i.ep = v;
    }
    get sortAscendingCaption() {
        return this.i.ej;
    }
    set sortAscendingCaption(v) {
        this.i.ej = v;
    }
    get sortDescendingCaption() {
        return this.i.em;
    }
    set sortDescendingCaption(v) {
        this.i.em = v;
    }
    get moveHeaderCaption() {
        return this.i.dv;
    }
    set moveHeaderCaption(v) {
        this.i.dv = v;
    }
    get moveLeftCaption() {
        return this.i.dy;
    }
    set moveLeftCaption(v) {
        this.i.dy = v;
    }
    get moveRightCaption() {
        return this.i.d2;
    }
    set moveRightCaption(v) {
        this.i.d2 = v;
    }
    get pinHeaderCaption() {
        return this.i.d9;
    }
    set pinHeaderCaption(v) {
        this.i.d9 = v;
    }
    get pinLeftCaption() {
        return this.i.ec;
    }
    set pinLeftCaption(v) {
        this.i.ec = v;
    }
    get pinRightCaption() {
        return this.i.eg;
    }
    set pinRightCaption(v) {
        this.i.eg = v;
    }
    get applyFiltersButtonCaption() {
        return this.i.c9;
    }
    set applyFiltersButtonCaption(v) {
        this.i.c9 = v;
    }
    get cancelFiltersButtonCaption() {
        return this.i.dc;
    }
    set cancelFiltersButtonCaption(v) {
        this.i.dc = v;
    }
    get clearColumnFiltersCaption() {
        return this.i.df;
    }
    set clearColumnFiltersCaption(v) {
        this.i.df = v;
    }
    /**
     * Gets or sets the display Density to use for the buttons in the component.
    */
    get filterListDensity() {
        return this.i.filterListDensity;
    }
    set filterListDensity(v) {
        this.i.filterListDensity = ensureEnum(ControlDisplayDensity_$type, v);
    }
    /**
     * Gets the actual display filterListDensity to use for the component.
    */
    get actualFilterListDensity() {
        return this.i.bz;
    }
    set actualFilterListDensity(v) {
        this.i.bz = ensureEnum(ControlDisplayDensity_$type, v);
    }
    get filterListPlaceholderText() {
        return this.i.dl;
    }
    set filterListPlaceholderText(v) {
        this.i.dl = v;
    }
    get filterApplyButtonClick() {
        return this._filterApplyButtonClick;
    }
    set filterApplyButtonClick(ev) {
        if (this._filterApplyButtonClick_wrapped !== null) {
            this.i.filterApplyButtonClick = delegateRemove(this.i.filterApplyButtonClick, this._filterApplyButtonClick_wrapped);
            this._filterApplyButtonClick_wrapped = null;
            this._filterApplyButtonClick = null;
        }
        this._filterApplyButtonClick = ev;
        this._filterApplyButtonClick_wrapped = (o, e) => {
            let outerArgs = new IgrFilterApplyButtonClickEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeFilterApplyButtonClick) {
                this.beforeFilterApplyButtonClick(this, outerArgs);
            }
            if (this._filterApplyButtonClick) {
                this._filterApplyButtonClick(this, outerArgs);
            }
        };
        this.i.filterApplyButtonClick = delegateCombine(this.i.filterApplyButtonClick, this._filterApplyButtonClick_wrapped);
    }
    get filterCancelButtonClick() {
        return this._filterCancelButtonClick;
    }
    set filterCancelButtonClick(ev) {
        if (this._filterCancelButtonClick_wrapped !== null) {
            this.i.filterCancelButtonClick = delegateRemove(this.i.filterCancelButtonClick, this._filterCancelButtonClick_wrapped);
            this._filterCancelButtonClick_wrapped = null;
            this._filterCancelButtonClick = null;
        }
        this._filterCancelButtonClick = ev;
        this._filterCancelButtonClick_wrapped = (o, e) => {
            let outerArgs = new IgrFilterCancelButtonClickEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeFilterCancelButtonClick) {
                this.beforeFilterCancelButtonClick(this, outerArgs);
            }
            if (this._filterCancelButtonClick) {
                this._filterCancelButtonClick(this, outerArgs);
            }
        };
        this.i.filterCancelButtonClick = delegateCombine(this.i.filterCancelButtonClick, this._filterCancelButtonClick_wrapped);
    }
}
//# sourceMappingURL=igr-grid-column-options.js.map
