/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { GridColumnOptionsViewBase } from "./GridColumnOptionsViewBase";
import { FontInfo } from "igniteui-react-core";
import { GridColumnOptionsUtilities } from "./GridColumnOptionsUtilities";
import { markType, enumGetBox, runOn, delegateCombine, typeCast } from "igniteui-react-core";
import { GridColumnOptionsBase } from "./GridColumnOptionsBase";
import { GridColumnOptionsSimpleSectionBase } from "./GridColumnOptionsSimpleSectionBase";
import { StringComparer } from "igniteui-react-core";
import { ControlDisplayDensity_$type } from "igniteui-react-core";
import { DeviceUtils } from "igniteui-react-core";
import { truncate } from "igniteui-react-core";
import { stringFormat1 } from "igniteui-react-core";
/**
 * @hidden
 */
export let GridColumnOptionsView = /*@__PURE__*/ (() => {
    class GridColumnOptionsView extends GridColumnOptionsViewBase {
        constructor() {
            super(...arguments);
            this.u = null;
            this.y = null;
            this.w = null;
            this.x = null;
            this.p = null;
            this.s = null;
            this.r = null;
            this.v = null;
            this.q = null;
            this.t = null;
        }
        get n() {
            return this.b;
        }
        o() {
            let a = this.e;
            let b = a.createElement("div");
            let c = a.createElement("header");
            b.append(c);
            let d = a.createElement("h4");
            c.append(d);
            c.setRawText(this.n.dh);
            return b;
        }
        ab() {
            if (null != this.t) {
                let a = this.n;
                let b = a.dh;
                this.t.setRawText(b);
                if (null != a.b4) {
                    this.t.setStyleProperty("font", a.b4.fontString);
                }
            }
        }
        j() {
            super.j();
            this.m();
        }
        m() {
            super.m();
            if (null != this.g) {
                this.g.setStyleProperty("padding", this.n.dq());
                this.g.setStyleProperty("box-sizing", "border-box");
            }
            this.ab();
            let a;
            let b;
            if (null != this.u) {
                a = this.u;
                b = this.n.ce;
                GridColumnOptionsUtilities.j(a, b, "flex");
            }
            if (null != this.y) {
                a = this.y;
                b = this.n.cs;
                GridColumnOptionsUtilities.j(a, b);
            }
            if (null != this.w) {
                a = this.w;
                b = this.n.cm;
                GridColumnOptionsUtilities.j(a, b);
            }
            if (null != this.x) {
                a = this.x;
                b = this.n.cp;
                GridColumnOptionsUtilities.j(a, b);
            }
            if (null != this.v) {
                a = this.v;
                b = this.n.cj;
                GridColumnOptionsUtilities.j(a, b);
            }
            if (null != this.q) {
                a = this.q;
                b = this.n.cd;
                GridColumnOptionsUtilities.j(a, b);
            }
            if (null != this.p) {
                a = this.p;
                b = this.n.ca;
                GridColumnOptionsUtilities.j(a, b);
            }
        }
        z() {
            let a = this.e;
            let b = a.createElement("header");
            this.u.append(b);
            let c = a.createElement("h4");
            c.setStyleProperty("margin-top", "0");
            c.setStyleProperty("margin-bottom", "0");
            b.append(c);
            this.t = c;
            this.s.append(b);
            this.ab();
        }
        aa(a, b, c, d, e, f, g, h, i) {
            this.u = a;
            this.y = b;
            this.w = c;
            this.x = d;
            this.p = e;
            this.s = f;
            this.r = g;
            this.v = h;
            this.q = i;
            this.r.setStyleProperty("display", "flex");
            this.r.setStyleProperty("flex-direction", "row");
            this.r.setStyleProperty("flex-wrap", "no-wrap");
            this.r.setStyleProperty("align-items", "center");
            this.r.setStyleProperty("justify-content", "space-between");
            this.u.setStyleProperty("display", "flex");
            this.u.setStyleProperty("flex-direction", "row");
            this.u.setStyleProperty("flex-wrap", "no-wrap");
            this.u.setStyleProperty("align-items", "center");
            this.u.setStyleProperty("justify-content", "space-between");
            this.u.setStyleProperty("margin-bottom", "5px");
            this.z();
            this.y.setStyleProperty("margin-bottom", "8px");
            this.w.setStyleProperty("margin-bottom", "8px");
            this.x.setStyleProperty("margin-bottom", "8px");
        }
    }
    GridColumnOptionsView.$t = /*@__PURE__*/ markType(GridColumnOptionsView, 'GridColumnOptionsView', GridColumnOptionsViewBase.$);
    return GridColumnOptionsView;
})();
/**
 * @hidden
 */
export let GridColumnOptions = /*@__PURE__*/ (() => {
    class GridColumnOptions extends GridColumnOptionsBase {
        constructor() {
            super();
            this.bw = null;
            this.bt = null;
            this.bv = null;
            this.bs = null;
            this.br = null;
            this.bo = null;
            this.b6 = null;
            this.b3 = null;
            this.b2 = null;
            this.cv = truncate(DeviceUtils.g(8));
            this.cx = truncate(DeviceUtils.g(4));
            this.cw = truncate(DeviceUtils.g(8));
            this.cu = truncate(DeviceUtils.g(8));
            this.cf = true;
            this.cq = true;
            this.ck = true;
            this.cn = true;
            this.ch = true;
            this.cb = true;
            this.b8 = true;
            this.eo = "Sort";
            this.ei = "Asc";
            this.el = "Desc";
            this.du = "Move";
            this.dx = "Left";
            this.d1 = "Right";
            this.d8 = "Pin";
            this.eb = "Left";
            this.ef = "Right";
            this.c8 = "Apply";
            this.db = "Cancel";
            this.de = "Clear column filters";
            this.by = 0;
            this.bx = 0;
            this.dk = "Search";
            this.filterApplyButtonClick = null;
            this.filterCancelButtonClick = null;
        }
        f() {
            return new GridColumnOptionsView();
        }
        a3() {
            super.a3();
            let a = this.column;
            if (null != this.bw) {
                this.bw.column = a;
            }
            if (null != this.bt) {
                this.bt.column = a;
            }
            if (null != this.bv) {
                this.bv.column = a;
            }
            if (null != this.bs) {
                this.bs.column = a;
            }
            if (null != this.br) {
                this.br.column = a;
            }
            if (null != this.bo) {
                this.bo.column = a;
            }
            this.e1();
        }
        a7(a, b) {
            super.a7(a, b);
            switch (b.propertyName) {
                case "HeaderClickAction":
                case "ColumnMovingMode":
                    this.e1();
                    break;
            }
        }
        ba(a, b, c) {
            super.ba(a, b, c);
            switch (a) {
                case "HeaderVisible":
                case "SortOptionsVisible":
                case "MoveOptionsVisible":
                case "PinOptionsVisible":
                case "HideOptionsVisible":
                case "FilterOptionsVisible":
                case "PaddingTop":
                case "PaddingRight":
                case "PaddingBottom":
                case "PaddingLeft":
                    this.e1();
                    break;
                case "ActualLabelTextStyle":
                case "ActualBaseTheme":
                case "ActualButtonDensity":
                case "ActualButtonTextStyle":
                case "ActualDensity":
                case "ActualFilterListDensity":
                case "BackgroundColor":
                case "TextColor":
                    this.ez();
                    break;
                case "ColumnNameTextStyle":
                    this.e0();
                    break;
                case "ActualColumnNameTextStyle":
                    this.e1();
                    break;
                case "FilterListDensity":
                    this.bz = this.filterListDensity == 0 ? this.q : this.filterListDensity;
                    break;
            }
        }
        e1() {
            this.bu.m();
        }
        get dh() {
            let a = this.column;
            return (null != a) ? a.hh : "(No column selected)";
        }
        get b7() {
            if (null == this.b6) {
                this.b6 = new FontInfo();
                this.b6.n = "'Segoe UI', Verdana";
                this.b6.d = 16;
            }
            return this.b6;
        }
        get ce() {
            return this.cg;
        }
        get cs() {
            return this.cr && this.bw.bo();
        }
        get cm() {
            return this.cl && this.bt.bo();
        }
        get cp() {
            return this.co && this.bv.bo();
        }
        get cj() {
            return this.ci && this.bs.bo();
        }
        get cd() {
            return this.cc && this.br.bo();
        }
        get ca() {
            return this.b9 && this.bo.bo();
        }
        get bu() {
            return this.e;
        }
        get b5() {
            return this.b3;
        }
        set b5(a) {
            let b = this.b3;
            this.b3 = a;
            if (b != this.b3) {
                this.a8("ColumnNameTextStyle", b, this.b3);
            }
        }
        get b4() {
            return this.b2;
        }
        set b4(a) {
            let b = this.b2;
            this.b2 = a;
            if (this.b2 != b) {
                this.a8("ActualColumnNameTextStyle", b, this.b2);
            }
        }
        get c3() {
            return this.cv;
        }
        set c3(a) {
            let b = this.cv;
            this.cv = a;
            if (this.cv != b) {
                this.a8("PaddingLeft", b, this.cv);
            }
        }
        get c5() {
            return this.cx;
        }
        set c5(a) {
            let b = this.cx;
            this.cx = a;
            if (this.cx != b) {
                this.a8("PaddingTop", b, this.cx);
            }
        }
        get c4() {
            return this.cw;
        }
        set c4(a) {
            let b = this.cw;
            this.cw = a;
            if (this.cw != b) {
                this.a8("PaddingRight", b, this.cw);
            }
        }
        get c2() {
            return this.cu;
        }
        set c2(a) {
            let b = this.cu;
            this.cu = a;
            if (this.cu != b) {
                this.a8("PaddingBottom", b, this.cu);
            }
        }
        get cg() {
            return this.cf;
        }
        set cg(a) {
            if (a == this.cf) {
                return;
            }
            let b = this.cf;
            this.cf = a;
            this.a8("HeaderVisible", b, this.cf);
        }
        get cr() {
            return this.cq;
        }
        set cr(a) {
            if (a == this.cq) {
                return;
            }
            let b = this.cq;
            this.cq = a;
            this.a8("SortOptionsVisible", b, this.cq);
        }
        get cl() {
            return this.ck;
        }
        set cl(a) {
            if (a == this.ck) {
                return;
            }
            let b = this.ck;
            this.ck = a;
            this.a8("MoveOptionsVisible", b, this.ck);
        }
        get co() {
            return this.cn;
        }
        set co(a) {
            if (a == this.cn) {
                return;
            }
            let b = this.cn;
            this.cn = a;
            this.a8("PinOptionsVisible", b, this.cn);
        }
        get ci() {
            return this.ch;
        }
        set ci(a) {
            if (a == this.ch) {
                return;
            }
            let b = this.ch;
            this.ch = a;
            this.a8("HideOptionsVisible", b, this.ch);
        }
        get cc() {
            return this.cb;
        }
        set cc(a) {
            if (a == this.cb) {
                return;
            }
            let b = this.cb;
            this.cb = a;
            this.a8("GroupOptionsVisible", b, this.cb);
        }
        get b9() {
            return this.b8;
        }
        set b9(a) {
            if (a == this.b8) {
                return;
            }
            let b = this.b8;
            this.b8 = a;
            this.a8("FilterOptionsVisible", b, this.b8);
        }
        get ep() {
            return null != this.bw ? this.bw.bs : this.eo;
        }
        set ep(a) {
            let b = this.ep;
            if (0 == StringComparer.b.compare(a, b)) {
                return;
            }
            this.eo = a;
            if (null != this.bw) {
                this.bw.bs = a;
            }
            this.a8("SortHeaderCaption", b, this.eo);
        }
        get ej() {
            return null != this.bw ? this.bw.bz : this.ei;
        }
        set ej(a) {
            let b = this.ej;
            if (0 == StringComparer.b.compare(a, b)) {
                return;
            }
            this.ei = a;
            if (null != this.bw) {
                this.bw.bz = a;
            }
            this.a8("SortAscendingCaption", b, this.ei);
        }
        get em() {
            return null != this.bw ? this.bw.b3 : this.el;
        }
        set em(a) {
            let b = this.em;
            if (0 == StringComparer.b.compare(a, b)) {
                return;
            }
            this.el = a;
            if (null != this.bw) {
                this.bw.b3 = a;
            }
            this.a8("SortDescendingCaption", b, this.el);
        }
        get dv() {
            return null != this.bt ? this.bt.bs : this.du;
        }
        set dv(a) {
            let b = this.dv;
            if (0 == StringComparer.b.compare(a, b)) {
                return;
            }
            this.du = a;
            if (null != this.bt) {
                this.bt.bs = a;
            }
            this.a8("MoveHeaderCaption", b, this.du);
        }
        get dy() {
            return null != this.bt ? this.bt.b1 : this.dx;
        }
        set dy(a) {
            let b = this.dy;
            if (0 == StringComparer.b.compare(a, b)) {
                return;
            }
            this.dx = a;
            if (null != this.bt) {
                this.bt.b1 = a;
            }
            this.a8("MoveLeftCaption", b, this.dx);
        }
        get d2() {
            return null != this.bt ? this.bt.b5 : this.d1;
        }
        set d2(a) {
            let b = this.d2;
            if (0 == StringComparer.b.compare(a, b)) {
                return;
            }
            this.d1 = a;
            if (null != this.bt) {
                this.bt.b5 = a;
            }
            this.a8("MoveRightCaption", b, this.d1);
        }
        get d9() {
            return null != this.bv ? this.bv.bs : this.d8;
        }
        set d9(a) {
            let b = this.d9;
            if (0 == StringComparer.b.compare(a, b)) {
                return;
            }
            this.d8 = a;
            if (null != this.bv) {
                this.bv.bs = a;
            }
            this.a8("PinHeaderCaption", b, this.d8);
        }
        get ec() {
            return null != this.bv ? this.bv.b0 : this.eb;
        }
        set ec(a) {
            let b = this.ec;
            if (0 == StringComparer.b.compare(a, b)) {
                return;
            }
            this.eb = a;
            if (null != this.bv) {
                this.bv.b0 = a;
            }
            this.a8("PinLeftCaption", b, this.eb);
        }
        get eg() {
            return null != this.bv ? this.bv.b4 : this.ef;
        }
        set eg(a) {
            let b = this.eg;
            if (0 == StringComparer.b.compare(a, b)) {
                return;
            }
            this.ef = a;
            if (null != this.bv) {
                this.bv.b4 = a;
            }
            this.a8("PinRightCaption", b, this.ef);
        }
        get c9() {
            return null != this.bo ? this.bo.b3 : this.c8;
        }
        set c9(a) {
            let b = this.c9;
            if (0 == StringComparer.b.compare(a, b)) {
                return;
            }
            this.c8 = a;
            if (null != this.bo) {
                this.bo.b3 = a;
            }
            this.a8("ApplyFiltersButtonCaption", b, this.c8);
        }
        get dc() {
            return null != this.bo ? this.bo.b7 : this.db;
        }
        set dc(a) {
            let b = this.dc;
            if (0 == StringComparer.b.compare(a, b)) {
                return;
            }
            this.db = a;
            if (null != this.bo) {
                this.bo.b7 = a;
            }
            this.a8("CancelFiltersButtonCaption", b, this.db);
        }
        get df() {
            return null != this.bo ? this.bo.cb : this.de;
        }
        set df(a) {
            let b = this.df;
            if (0 == StringComparer.b.compare(a, b)) {
                return;
            }
            this.de = a;
            if (null != this.bo) {
                this.bo.cb = a;
            }
            this.a8("ClearColumnFiltersCaption", b, this.de);
        }
        get filterListDensity() {
            return this.by;
        }
        set filterListDensity(a) {
            let b = this.by;
            this.by = a;
            if (b != this.by) {
                this.a8("FilterListDensity", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, a));
            }
        }
        get bz() {
            return this.bx;
        }
        set bz(a) {
            let b = this.bx;
            this.bx = a;
            if (b != this.bx) {
                this.a8("ActualFilterListDensity", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, a));
            }
        }
        get dl() {
            return this.dk;
        }
        set dl(a) {
            if (0 == StringComparer.b.compare(a, this.dk)) {
                return;
            }
            let b = this.dk;
            this.dk = a;
            if (null != this.bo) {
                this.bo.cg = a;
            }
            this.a8("FilterListPlaceholderText", b, this.dk);
        }
        notifySizeChanged() {
            this.e.j();
        }
        provideContent(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
            this.bu.aa(a, b, c, d, e, f, g, h, i);
            this.bw = j;
            this.bw.bz = this.ei;
            this.bw.b3 = this.el;
            this.bt = k;
            this.bt.b1 = this.dx;
            this.bt.b5 = this.d1;
            this.bv = l;
            this.bv.b0 = this.eb;
            this.bv.b4 = this.ef;
            this.bs = m;
            this.bs.bq = false;
            this.br = n;
            this.br.bq = false;
            this.bo = o;
            this.bo.b3 = this.c9;
            this.bo.cb = this.de;
            this.bo.cg = this.dl;
            let p = this.bw;
            p.propertyChanged = delegateCombine(p.propertyChanged, runOn(this, this.eu));
            let q = this.bt;
            q.propertyChanged = delegateCombine(q.propertyChanged, runOn(this, this.eu));
            let r = this.bv;
            r.propertyChanged = delegateCombine(r.propertyChanged, runOn(this, this.eu));
            let s = this.bs;
            s.propertyChanged = delegateCombine(s.propertyChanged, runOn(this, this.eu));
            let t = this.br;
            t.propertyChanged = delegateCombine(t.propertyChanged, runOn(this, this.eu));
            let u = this.bo;
            u.propertyChanged = delegateCombine(u.propertyChanged, runOn(this, this.eu));
            let v = this.bo;
            v.applyButtonClick = delegateCombine(v.applyButtonClick, runOn(this, this.es));
            let w = this.bo;
            w.cancelButtonClick = delegateCombine(w.cancelButtonClick, runOn(this, this.et));
            this.e0();
            this.bh();
            this.be();
            this.ez();
        }
        dq() {
            return stringFormat1("{0}px {1}px {2}px {3}px", this.c5.toString(), this.c4.toString(), this.c2.toString(), this.c3.toString());
        }
        e0() {
            this.b4 = (null == this.b5) ? this.b7 : this.b5;
        }
        ez() {
            let a = [this.bw, this.bt, this.bv, this.bs, this.br, this.bo];
            for (let c = 0; c < a.length; c++) {
                let b = a[c];
                if (null != b) {
                    b.bk = this.bk;
                    b.bn = this.bn;
                    b.density = this.q;
                    b.buttonDensity = this.p;
                    b.j = this.i;
                }
                let d = typeCast(GridColumnOptionsSimpleSectionBase.$, b);
                if (null != d) {
                    d.ag = this.aa;
                    d.ab = this.z;
                }
            }
            if (null != this.bo) {
                this.bo.bx = this.bz;
            }
        }
        ew(a) {
            if (null != this.filterApplyButtonClick) {
                this.filterApplyButtonClick(this, a);
            }
        }
        ex(a) {
            if (null != this.filterCancelButtonClick) {
                this.filterCancelButtonClick(this, a);
            }
        }
        es(a, b) {
            this.ew(b);
        }
        et(a, b) {
            this.ex(b);
        }
        eu(a, b) {
            switch (b.propertyName) {
            }
        }
    }
    GridColumnOptions.$t = /*@__PURE__*/ markType(GridColumnOptions, 'GridColumnOptions', GridColumnOptionsBase.$);
    return GridColumnOptions;
})();
//# sourceMappingURL=GridColumnOptionsView_combined.js.map
