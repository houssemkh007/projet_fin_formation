/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, runOn, delegateCombine, fromEnum, markType, INotifyPropertyChanged_$type, PropertyChangedEventArgs, delegateRemove, enumGetBox } from "igniteui-react-core";
import { DomWrapper_$type } from "igniteui-react-core";
import { Dictionary$2 } from "igniteui-react-core";
import { Checkbox } from "igniteui-react-inputs";
import { ControlDisplayDensity_$type } from "igniteui-react-core";
import { NativeUI } from "igniteui-react-core";
import { PrimaryKeyValue } from "./PrimaryKeyValue";
import { Thickness } from "igniteui-react-core";
import { CheckboxListIndexType_$type } from "./CheckboxListIndexType";
import { GridSelectedKeysCollection } from "./GridSelectedKeysCollection";
import { InputGroupDisplayType_$type } from "igniteui-react-inputs";
import { BaseControlTheme_$type } from "igniteui-react-core";
import { FilterFactory } from "igniteui-react-core";
import { CheckedChangedEventArgs } from "./CheckedChangedEventArgs";
import { Input } from "igniteui-react-inputs";
import { TemplateColumn } from "./TemplateColumn";
import { DataSourceSchemaPropertyType_$type } from "igniteui-react-core";
import { InputGroup } from "igniteui-react-inputs";
import { FastReflectionHelper } from "igniteui-react-core";
import { ColumnWidth } from "./ColumnWidth";
import { DateTimeColumn } from "./DateTimeColumn";
import { NumericColumn } from "./NumericColumn";
import { TextColumn } from "./TextColumn";
import { Prefix } from "igniteui-react-inputs";
import { Icon } from "igniteui-react-inputs";
import { ArgumentException } from "igniteui-react-core";
import { SelectAllCheckboxChangedEventArgs } from "./SelectAllCheckboxChangedEventArgs";
import { BrushUtil } from "igniteui-react-core";
/**
 * @hidden
 */
export let CheckboxListView = /*@__PURE__*/ (() => {
    class CheckboxListView extends Base {
        constructor() {
            super();
            this.d = new Dictionary$2(DomWrapper_$type, Checkbox.$, 0);
            this.h = null;
            this.a = null;
            this.g = null;
            this.b = null;
            this.e = null;
            this.c = false;
            this.f = null;
        }
        l() {
        }
        k(a) {
            if (a == null) {
                this.e = null;
                this.d.clear();
                return;
            }
            this.e = a;
            this.t();
            this.aa();
            this.q();
            let b = Math.round(a.rootWrapper.width());
            let c = Math.round(a.rootWrapper.height());
            this.e.rootWrapper.setStyleProperty("position", "relative");
        }
        t() {
            if (this.e != null) {
                this.b.b9(this.e);
            }
        }
        q() {
            if (this.e != null) {
                let a = this.e.rootWrapper.getChildAt(3);
                a.setStyleProperty("width", "100%");
                a.setStyleProperty("margin", "4px 0px 4px 0px");
                if (this.b.ag == false) {
                    a.setStyleProperty("height", "calc(100% - 50px");
                }
                else {
                    a.setStyleProperty("height", "calc(100% - 75px");
                }
            }
        }
        m(a, b, c) {
            let d = null;
            if (a.getChildCount() == 0) {
                d = new Checkbox();
                let e = this.e.getSubRenderer(a);
                d.provideContainer(e);
                this.d.addItem(a, d);
                d.d = this.b.l;
                d.t = true;
                d.change = delegateCombine(d.change, runOn(this, this.i));
                let f = this.e.createElement("div");
                a.setStyleProperty("display", "flex");
                a.setStyleProperty("height", "100%");
                a.setStyleProperty("align-items", "center");
                switch (this.b.n) {
                    case 1:
                        a.setStyleProperty("margin-top", "-4px");
                        break;
                    case 2:
                        a.setStyleProperty("margin-top", "-1px");
                        break;
                    case 3:
                        a.setStyleProperty("margin-top", "1px");
                        break;
                }
                a.append(f);
            }
            else {
                d = this.d.item(a);
            }
            if (d != null) {
                let g = d.u;
                try {
                    d.u = true;
                    d.a5 = b;
                    if (c) {
                        if (this.b.p == 0) {
                            d.checked = false;
                        }
                        else {
                            d.checked = true;
                        }
                    }
                    else {
                        if (this.b.p == 0) {
                            d.checked = true;
                        }
                        else {
                            d.checked = false;
                        }
                    }
                }
                finally {
                    d.u = g;
                }
            }
        }
        v() {
            if (this.d != null) {
                for (let a of fromEnum(this.d)) {
                    let b = a.value;
                    b.d = this.b.l;
                }
            }
            if (this.a != null) {
                this.a.d = this.b.l;
            }
        }
        u() {
        }
        i(a, b) {
            let c = a;
            let d = parseInt(c.a5.toString());
            let e = c.checked;
            if (e == true) {
                if (this.b.p == 0) {
                    this.b.b3(d);
                }
                else {
                    this.b.bd(d);
                }
            }
            else {
                if (this.b.p == 0) {
                    this.b.bd(d);
                }
                else {
                    this.b.b3(d);
                }
            }
            this.b.bq(d, e);
            this.z(false);
        }
        j() {
        }
        r(a, b) {
            for (let c of fromEnum(this.d)) {
                let d = c.value;
                let e = parseInt(d.a5.toString());
                if (e == a) {
                    d.checked = b;
                    this.b.bq(e, b);
                }
            }
            this.z();
        }
        s(a) {
            for (let b of fromEnum(this.d)) {
                let c = b.value;
                c.checked = a;
            }
        }
        o(a) {
            this.h = a;
            if (null != this.h) {
                this.h.setStyleProperty("margin", "5px 0px 4px 0px");
            }
        }
        aa() {
            let a = this.e;
            if (null == a || null == this.h) {
                return;
            }
            let b = a.createElement("div");
            let c = a.getSubRenderer(b);
            this.a = new Checkbox();
            this.a.provideContainer(c);
            this.a.d = this.b.l;
            this.g = a.createElement("label");
            this.g.setRawText(this.b.a6);
            this.g.setStyleProperty("font-size", "13px");
            this.h.setStyleProperty("display", "flex");
            this.h.setStyleProperty("flex-direction", "row");
            this.h.setStyleProperty("font-family", "'Segoe UI', Verdana");
            this.h.setStyleProperty("align-items", "center");
            this.h.append(b);
            this.h.append(this.g);
            this.ab();
            this.y();
            let d = this.a;
            d.change = delegateCombine(d.change, runOn(this, this.p));
            this.a.t = true;
        }
        y() {
            if (null != this.g) {
                this.g.setRawText(this.b.a6);
                NativeUI.n(this.g, this.b.cf);
            }
        }
        ab() {
            if (null != this.g) {
                let a = this.b.ag ? "flex" : "none";
                this.h.setStyleProperty("display", a);
            }
        }
        z(a = true) {
            let b = this.c;
            this.c = true;
            let c = this.a.u;
            this.a.u = a;
            try {
                if (this.b.ae) {
                    this.a.indeterminate = true;
                    return;
                }
                this.a.indeterminate = false;
                if (this.b.p == 0) {
                    this.a.checked = this.b.g.count == 0;
                }
                else {
                    this.a.checked = this.b.g.count != 0;
                }
            }
            finally {
                this.a.u = c;
                this.c = b;
            }
        }
        p(a, b) {
            if (this.c || b.isIndeterminate) {
                return;
            }
            if (b.isChecked) {
                this.b.b5();
                this.b.bw(b.isChecked);
            }
            else {
                this.b.bh();
                this.b.bw(b.isChecked);
            }
        }
        x() {
            let a = this.e;
            if (null == a) {
                return;
            }
            let b = a.rootWrapper;
            if (null != b) {
                NativeUI.n(b, this.b.cl);
                NativeUI.j(b, this.b.cg);
            }
        }
        w(a) {
            if (this.f != null) {
                NativeUI.s(this.f, a);
            }
        }
        n(a) {
            this.f = a;
        }
    }
    CheckboxListView.$t = /*@__PURE__*/ markType(CheckboxListView, 'CheckboxListView');
    return CheckboxListView;
})();
/**
 * @hidden
 */
export let CheckboxList = /*@__PURE__*/ (() => {
    class CheckboxList extends Base {
        constructor() {
            super();
            this.q = null;
            this.h = null;
            this.i = null;
            this.x = null;
            this.d = null;
            this.aa = false;
            this.c = null;
            this.s = null;
            this.t = null;
            this.ab = false;
            this.f = new GridSelectedKeysCollection();
            this.a = null;
            this.propertyChanged = null;
            this.checkedChanged = null;
            this.ak = null;
            this.am = null;
            this.ao = null;
            this.an = null;
            this.u = 3;
            this.ah = -1;
            this.y = null;
            this.o = 1;
            this.k = 1;
            this.m = 2;
            this.a5 = "(Select All)";
            this.cd = null;
            this.cb = CheckboxList.ci;
            this.af = true;
            this.cc = CheckboxList.ch;
            this.ce = CheckboxList.ci;
            this.selectAllCheckboxChanged = null;
            this.ai = -1;
            let a = this.f;
            a.collectionChanged = delegateCombine(a.collectionChanged, runOn(this, this.by));
            this.d = new FilterFactory();
            let b = new CheckboxListView();
            b.b = this;
            this.q = b;
            this.q.l();
        }
        get e() {
            if (this.h == null) {
                return null;
            }
            return this.h.actualDataSource;
        }
        get g() {
            return this.f;
        }
        get b() {
            return this.a;
        }
        set b(a) {
            let b = this.a;
            this.a = a;
            if (b != this.a) {
                this.bu("PrimaryKey", b, this.a);
            }
        }
        by(a, b) {
            if (this.e == null || this.e.actualSchema == null || this.aa) {
                return;
            }
            switch (b.action) {
                case 0:
                    for (let c = 0; c < b.newItems.count; c++) {
                        this.bs(b.newItems.item(c));
                    }
                    break;
                case 1:
                    for (let d = 0; d < b.oldItems.count; d++) {
                        this.bt(b.oldItems.item(d));
                    }
                    break;
                case 2:
                    for (let e = 0; e < b.oldItems.count; e++) {
                        this.bt(b.oldItems.item(e));
                    }
                    for (let f = 0; f < b.newItems.count; f++) {
                        this.bs(b.newItems.item(f));
                    }
                    break;
                case 4:
                    this.q.s(this.p == 0);
                    for (let g = 0; g < this.g.ae.count; g++) {
                        this.bs(this.g.ae._inner[g]);
                    }
                    break;
            }
        }
        bs(a) {
            let b = this.e.indexOfKey(a.value);
            if (b >= 0) {
                this.q.r(b, this.p == 1);
            }
        }
        bt(a) {
            let b = this.e.indexOfKey(a.value);
            if (b >= 0) {
                this.q.r(b, this.p == 0);
            }
        }
        bq(a, b) {
            if (this.checkedChanged != null && this.ab == false) {
                this.checkedChanged(this, ((() => {
                    let $ret = new CheckedChangedEventArgs();
                    $ret.b = a;
                    $ret.a = b;
                    return $ret;
                })()));
            }
        }
        notifySizeChanged() {
            this.q.j();
        }
        destroy() {
            if (this.h != null) {
                let a = this.h;
                a.cellClicked = delegateRemove(a.cellClicked, runOn(this, this.bj));
            }
            if (this.s != null) {
                let b = this.s;
                b.change = delegateRemove(b.change, runOn(this, this.bk));
            }
            this.provideContainer(null, null, null);
            if (this.i != null) {
                let c = this.i;
                c.cellUpdating = delegateRemove(c.cellUpdating, runOn(this, this.bg));
            }
        }
        provideContainer(a, b, c) {
            this.h = b;
            if (null != this.h) {
                this.h.k6 = 0;
                this.h.lg = 0;
                this.h.g3 = false;
                this.h.ch = 0;
                this.h.cf = 0;
                let d = this.h;
                d.cellClicked = delegateCombine(d.cellClicked, runOn(this, this.bj));
                if (this.ak != null) {
                    this.h.itemsSource = this.ak;
                    this.bf();
                    this.bx();
                }
                if (this.am != null) {
                    this.bx();
                    this.b8();
                }
            }
            this.q.o(c);
            this.q.k(a);
        }
        provideSelectAllSection(a) {
            this.q.o(a);
        }
        bj(a, b) {
            if (b.cellInfo.k.az == 0) {
                return;
            }
            let c = b.cellInfo.k.w;
            if (-1 == c) {
                return;
            }
            let d = this.j(b.cellInfo.gp);
            if (this.g.contains(d)) {
                this.g.remove(d);
            }
            else {
                this.g.add(d);
            }
        }
        bg(a, b) {
            let c = b.cellInfo.k.w;
            if (-1 == c) {
                return;
            }
            let d = false;
            if (b.cellInfo.gp != null) {
                let e = this.j(b.cellInfo.gp);
                if (this.g.contains(e)) {
                    d = true;
                }
            }
            this.q.m(b.content.element, c, d);
        }
        br(a) {
            if (this.am != null) {
                let b = this.d.property(this.am).cast(enumGetBox(DataSourceSchemaPropertyType_$type, 0)).toLower();
                let c = b.contains(a);
                if (!this.h.v.j.contains(this.c)) {
                    this.c = c;
                    this.h.v.add(this.c);
                }
                else {
                    let d = this.h.v.j.indexOf(this.c);
                    this.h.v.j.item(d, this.c = c);
                }
            }
        }
        get itemsSource() {
            return this.ak;
        }
        set itemsSource(a) {
            let b = this.ak;
            this.ak = a;
            if (b != this.ak) {
                this.bu("ItemsSource", b, this.ak);
            }
        }
        get at() {
            return this.am;
        }
        set at(a) {
            let b = this.am;
            this.am = a;
            if (b != this.am) {
                this.bu("DataMemberPath", b, this.am);
            }
        }
        get a9() {
            return this.ao;
        }
        set a9(a) {
            let b = this.ao;
            this.ao = a;
            if (b != this.ao) {
                this.bu("SelectedMemberPath", b, this.ao);
            }
        }
        get ax() {
            return this.an;
        }
        set ax(a) {
            let b = this.an;
            this.an = a;
            if (b != this.an) {
                this.bu("FilterPlaceholderText", b, this.an);
            }
        }
        get v() {
            return this.u;
        }
        set v(a) {
            let b = this.u;
            this.u = a;
            if (b != this.u) {
                this.bu("SearchInputType", enumGetBox(InputGroupDisplayType_$type, b), enumGetBox(InputGroupDisplayType_$type, this.u));
            }
        }
        get aj() {
            return this.ah;
        }
        set aj(a) {
            let b = this.ah;
            this.ah = a;
            if (b != this.ah) {
                this.bu("RowHeight", b, this.ah);
            }
        }
        get z() {
            return this.y;
        }
        set z(a) {
            let b = this.y;
            this.y = a;
            if (b != this.y) {
                this.bu("CellTextStyle", b, this.y);
            }
        }
        get p() {
            return this.o;
        }
        set p(a) {
            let b = this.o;
            this.o = a;
            if (b != this.o) {
                this.bu("IndexType", enumGetBox(CheckboxListIndexType_$type, b), enumGetBox(CheckboxListIndexType_$type, this.o));
            }
        }
        get l() {
            return this.k;
        }
        set l(a) {
            let b = this.k;
            this.k = a;
            if (b != this.k) {
                this.bu("BaseTheme", enumGetBox(BaseControlTheme_$type, b), enumGetBox(BaseControlTheme_$type, this.k));
            }
        }
        get n() {
            return this.m;
        }
        set n(a) {
            let b = this.m;
            this.m = a;
            if (b != this.m) {
                this.bu("Density", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, this.m));
            }
        }
        bu(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            this.bz(a, b, c);
        }
        bz(a, b, c) {
            switch (a) {
                case "ItemsSource":
                    if (this.h != null) {
                        this.p = 1;
                        if (c != null) {
                            this.h.a7.m();
                            this.h.b4.m();
                            this.h.v.clear();
                            this.h.b7.m();
                        }
                        if (this.h.actualDataSource != null) {
                            let d = this.h.actualDataSource;
                            d.schemaChanged = delegateRemove(d.schemaChanged, runOn(this, this.bv));
                        }
                        this.h.itemsSource = this.ak;
                        this.bf();
                        if (this.h.actualDataSource != null) {
                            let e = this.h.actualDataSource;
                            e.schemaChanged = delegateCombine(e.schemaChanged, runOn(this, this.bv));
                        }
                        this.ab = true;
                        this.bx();
                        this.ab = false;
                        this.q.z();
                    }
                    break;
                case "DataMemberPath":
                case "SelectedMemberPath":
                    if (this.h != null) {
                        if (this.am != null) {
                            this.bx();
                            this.b8();
                        }
                    }
                    break;
                case "PrimaryKey":
                    if (this.h != null) {
                        this.h.l = this.b;
                    }
                    break;
                case "SelectAllCaptionTextColor":
                    this.cf = null != this.cj ? this.cj : CheckboxList.ci;
                    break;
                case "SelectAllCaption":
                case "ActualSelectAllCaptionTextColor":
                    this.q.y();
                    break;
                case "showSelectAll":
                    this.q.ab();
                    this.q.q();
                    break;
                case "FilterPlaceholderText":
                    if (this.s != null) {
                        this.s.b7 = this.ax;
                    }
                    break;
                case "SearchInputType":
                    if (this.t != null) {
                        this.t.k = this.v;
                    }
                    break;
                case "RowHeight":
                    if (this.h != null) {
                        this.h.le = this.aj;
                    }
                    break;
                case "CellTextStyle":
                    if (this.h != null) {
                        this.h.fp = this.z;
                    }
                    break;
                case "BackgroundColor":
                case "TextColor":
                    let f = this.h;
                    if (null != f) {
                        f.uu = this.cl;
                        f.us = this.cg;
                    }
                    this.q.x();
                    break;
                case "BaseTheme":
                    this.b7();
                    break;
                case "Density":
                    this.b6();
                    break;
            }
        }
        b6() {
            if (this.h != null) {
                this.h.fg = this.n;
            }
            if (this.t != null) {
                this.t.h = this.n;
            }
            this.q.u();
        }
        b7() {
            if (this.t != null) {
                this.t.d = this.l;
            }
            this.q.v();
        }
        bv(a, b) {
            this.ab = true;
            this.bf();
            if (b.schema != null) {
                this.bx();
                for (let c = 0; c < this.g.count; c++) {
                    this.bs(this.g._inner[c]);
                }
                this.q.z();
            }
            this.ab = false;
        }
        bx() {
            if (this.x == null && this.ao != null && this.ao != "") {
                this.x = new FastReflectionHelper(false, this.ao);
            }
            if (this.ak != null && this.x != null && this.h.actualDataSource.actualSchema != null) {
                this.x.propertyName = this.ao;
                let a = this.h.actualDataSource.actualCount;
                for (let b = 0; b < a; b++) {
                    let c = this.h.actualDataSource.getItemAtIndex(b);
                    let d = this.x.getPropertyValue(c);
                    if (d == true) {
                        let e = this.j(c);
                        if (!this.g.contains(e)) {
                            this.g.add(e);
                        }
                    }
                }
            }
        }
        b8() {
            this.h.actualColumns.clear();
            this.h.l = this.b;
            this.h.hu = false;
            this.h.le = this.aj;
            this.h.us = this.cg;
            this.h.ut = this.cg;
            this.h.fg = this.n;
            this.h.vx = new Thickness(0, 0);
            if (this.z != null) {
                this.h.fp = this.z;
            }
            let a = new TemplateColumn();
            if (this.ao == null) {
                this.ao = "";
            }
            a.hy = this.ao;
            a.id = "CheckboxColumn";
            let b = new ColumnWidth();
            b.f = 28;
            a.width = b;
            a.gy = 0;
            a.gz = 0;
            a.cellUpdating = delegateCombine(a.cellUpdating, runOn(this, this.bg));
            this.h.columns.add(a);
            this.i = a;
            let c = this.h.actualDataSource.resolveSchemaPropertyType(this.am);
            let d;
            switch (c) {
                case 8:
                case 9:
                    d = new DateTimeColumn();
                    break;
                case 1:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 10:
                    d = new NumericColumn();
                    break;
                case 2:
                case 11:
                case 0:
                default:
                    d = new TextColumn();
                    break;
            }
            d.hy = this.am;
            d.id = "DataColumn";
            d.gy = 0;
            d.e = 0;
            this.h.columns.add(d);
        }
        updateHrMargin(a) {
            this.q.w(a);
        }
        provideHrElement(a) {
            this.q.n(a);
        }
        b9(a) {
            let b = a.rootWrapper.getChildAt(0);
            b.setStyleProperty("display", "flex");
            this.t = new InputGroup();
            let c = a.getSubRenderer(b);
            this.t.provideContainer(c);
            this.t.k = this.v;
            this.t.d = this.l;
            this.t.h = this.n;
            let d = a.createElement("div");
            let e = a.getSubRenderer(d);
            let f = new Prefix();
            f.provideContainer(e);
            let g = a.createElement("div");
            let h = a.getSubRenderer(g);
            let i = new Icon();
            i.provideContainer(h);
            i.fill = CheckboxList.ck;
            i.svgPath = CheckboxList.a4;
            f.appendContentChild(g);
            this.t.appendContentChild(d);
            this.t.inputs.add(f);
            let j = a.createElement("div");
            let k = a.getSubRenderer(j);
            this.s = new Input();
            this.s.provideContainer(k);
            this.s.b0 = "text";
            if (this.ax != null) {
                this.s.b7 = this.ax;
            }
            let l = this.s;
            l.changing = delegateCombine(l.changing, runOn(this, this.bk));
            this.t.appendContentChild(j);
            this.t.inputs.add(this.s);
        }
        bk(a, b) {
            let c = b.value.toLowerCase();
            this.br(c);
        }
        j(a) {
            if (this.b == null) {
                return PrimaryKeyValue.createIdentityKey(a);
            }
            let b = new Array(this.b.length);
            let c = new Array(this.b.length);
            for (let d = 0; d < b.length; d++) {
                b[d] = this.b[d];
                c[d] = this.e.getItemProperty(a, b[d]);
            }
            return new PrimaryKeyValue(b, c);
        }
        b3(a) {
            this.aa = true;
            let b = this.e.getItemAtIndex(a);
            let c = this.j(b);
            this.g.remove(c);
            this.aa = false;
        }
        bd(a) {
            this.aa = true;
            let b = this.e.getItemAtIndex(a);
            let c = this.j(b);
            this.g.add(c);
            this.aa = false;
        }
        b5() {
            this.p = 0;
            this.g.clear();
            this.bl();
            this.q.z();
        }
        bh() {
            this.p = 1;
            this.g.clear();
            this.bl();
            this.q.z();
        }
        bo(a, b, c) {
            if (this.h != null) {
                this.h.qp(a, b, c);
            }
        }
        bl() {
            if (this.h != null) {
                this.h.qj();
            }
        }
        bm(a, b) {
            if (this.h != null) {
                this.h.ql(a, b);
            }
            ;
        }
        bn(a, b) {
            if (this.h != null) {
                this.h.qm(a, b);
            }
            ;
        }
        be(a) {
            let b = null;
            if (this.b == null || this.b.length == 0) {
                b = new PrimaryKeyValue(null, a);
            }
            else if (this.b.length == a.length) {
                b = new PrimaryKeyValue(this.b, a);
            }
            else {
                throw new ArgumentException(1, "value length must match PrimaryKey length");
            }
            if (b != null) {
                this.g.add(b);
            }
        }
        b4(a) {
            let b = null;
            if (this.b == null || this.b.length == 0) {
                b = new PrimaryKeyValue(null, a);
            }
            else if (this.b.length == a.length) {
                b = new PrimaryKeyValue(this.b, a);
            }
            else {
                throw new ArgumentException(1, "value length must match PrimaryKey length");
            }
            if (this.g.contains(b)) {
                this.g.remove(b);
            }
        }
        get a6() {
            return this.a5;
        }
        set a6(a) {
            if (a == this.a5) {
                return;
            }
            let b = this.a5;
            this.a5 = a;
            this.bu("SelectAllCaption", b, this.a5);
        }
        get cj() {
            return this.cd;
        }
        set cj(a) {
            let b = this.cd;
            this.cd = a;
            if (b != this.cd) {
                this.bu("SelectAllCaptionTextColor", b, a);
            }
        }
        get cf() {
            return this.cb;
        }
        set cf(a) {
            let b = this.cb;
            this.cb = a;
            if (b != this.cb) {
                this.bu("ActualSelectAllCaptionTextColor", b, a);
            }
        }
        get ae() {
            if (-1 == this.ai) {
                return false;
            }
            let a = this.g.count;
            if (0 == a) {
                return false;
            }
            if (a == this.ai) {
                return false;
            }
            return true;
        }
        get ag() {
            return this.af;
        }
        set ag(a) {
            if (a == this.af) {
                return;
            }
            let b = this.af;
            this.af = a;
            this.bu("showSelectAll", b, this.af);
        }
        get cg() {
            return this.cc;
        }
        set cg(a) {
            let b = this.cc;
            this.cc = a;
            if (b != this.cc) {
                this.bu("BackgroundColor", b, a);
            }
        }
        get cl() {
            return this.ce;
        }
        set cl(a) {
            let b = this.ce;
            this.ce = a;
            if (b != this.ce) {
                this.bu("TextColor", b, a);
            }
        }
        bw(a) {
            if (this.selectAllCheckboxChanged != null) {
                this.selectAllCheckboxChanged(this, ((() => {
                    let $ret = new SelectAllCheckboxChangedEventArgs();
                    $ret.a = a;
                    return $ret;
                })()));
            }
        }
        ad() {
            if (-1 == this.ai) {
                return true;
            }
            let a = this.g.count;
            switch (this.p) {
                case 0: return this.ai == a;
                case 1: return 0 == a;
                default: return false;
            }
        }
        ac() {
            if (-1 == this.ai) {
                return false;
            }
            let a = this.g.count;
            switch (this.p) {
                case 0: return 0 == a;
                case 1: return this.ai == a;
                default: return false;
            }
        }
        bf() {
            let a = this.h.actualDataSource;
            if (null != a) {
                if (null == a.actualSchema) {
                    this.ai = -1;
                    return;
                }
                let b = a.actualCount;
                this.ai = b;
            }
            else {
                this.ai = -1;
            }
        }
    }
    CheckboxList.$t = /*@__PURE__*/ markType(CheckboxList, 'CheckboxList', Base.$, [INotifyPropertyChanged_$type]);
    CheckboxList.ck = /*@__PURE__*/ BrushUtil.g(255, 24, 29, 31);
    CheckboxList.a4 = "M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z";
    CheckboxList.ch = /*@__PURE__*/ BrushUtil.g(255, 248, 248, 248);
    CheckboxList.ci = /*@__PURE__*/ BrushUtil.g(255, 24, 29, 31);
    return CheckboxList;
})();
//# sourceMappingURL=CheckboxListView_combined.js.map
