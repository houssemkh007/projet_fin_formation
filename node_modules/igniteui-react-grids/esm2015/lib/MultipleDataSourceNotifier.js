/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, markType } from "igniteui-react-core";
import { IDataSourceUpdateNotifier_$type } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
/**
 * @hidden
 */
export let MultipleDataSourceNotifier = /*@__PURE__*/ (() => {
    class MultipleDataSourceNotifier extends Base {
        constructor(a, ..._rest) {
            super();
            this.a = null;
            a = (a == void 0) ? 0 : a;
            switch (a) {
                case 0: break;
                case 1:
                    {
                        let c = _rest[0];
                        this.b.o(c);
                    }
                    break;
            }
        }
        get b() {
            if (null == this.a) {
                this.a = new List$1(IDataSourceUpdateNotifier_$type, 0);
            }
            return this.a;
        }
        c(a) {
            this.b.add(a);
        }
        d(a) {
            for (let b = 0; b < this.b.count; b++) {
                a(this.b._inner[b]);
            }
        }
        notifyClearItems() {
            this.d((a) => a.notifyClearItems());
        }
        notifyInsertItem(a, b) {
            this.d((c) => c.notifyInsertItem(a, b));
        }
        notifyRemoveItem(a, b) {
            this.d((c) => c.notifyRemoveItem(a, b));
        }
        notifySetItem(a, b, c) {
            this.d((d) => d.notifySetItem(a, b, c));
        }
        rangeActualized(a, b) {
            this.d((c) => c.rangeActualized(a, b));
        }
    }
    MultipleDataSourceNotifier.$t = /*@__PURE__*/ markType(MultipleDataSourceNotifier, 'MultipleDataSourceNotifier', Base.$, [IDataSourceUpdateNotifier_$type]);
    return MultipleDataSourceNotifier;
})();
//# sourceMappingURL=MultipleDataSourceNotifier.js.map
