/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, markType } from "igniteui-react-core";
import { StringBuilder } from "igniteui-react-core";
import { stringIsNullOrEmpty } from "igniteui-react-core";
import { isNaN_ } from "igniteui-react-core";
/**
 * @hidden
 */
export let MultiColumnComboVisualModelExport = /*@__PURE__*/ (() => {
    class MultiColumnComboVisualModelExport extends Base {
        constructor() {
            super(...arguments);
            this.a = null;
            this.j = 0;
            this.b = null;
            this.p = 0;
            this._columnHeadersVisible = false;
            this.au = null;
            this.at = null;
            this.k = 0;
            this._dropDownButtonVisible = false;
            this.q = 0;
            this.aa = null;
            this.c = null;
            this.ad = null;
            this.ae = null;
            this.af = null;
            this.v = 0;
            this.ab = null;
            this.ac = null;
            this._actualLabelVisible = false;
            this._actualNoMatchesFoundLabel = null;
            this.d = null;
            this.e = null;
            this.ai = null;
            this.aj = null;
            this.ak = null;
            this.w = 0;
            this.ag = null;
            this.ah = null;
            this.al = null;
            this._rowSeparatorsVisible = false;
            this.f = null;
            this.aq = null;
            this.ar = null;
            this.as = null;
            this.x = 0;
            this.ao = null;
            this.ap = null;
            this.g = null;
            this.r = 0;
            this.h = null;
            this.s = 0;
            this.t = 0;
            this.u = 0;
            this.an = null;
            this.i = null;
            this.y = null;
        }
        get columnHeadersVisible() {
            return this._columnHeadersVisible;
        }
        set columnHeadersVisible(a) {
            this._columnHeadersVisible = a;
        }
        get dropDownButtonVisible() {
            return this._dropDownButtonVisible;
        }
        set dropDownButtonVisible(a) {
            this._dropDownButtonVisible = a;
        }
        get actualLabelVisible() {
            return this._actualLabelVisible;
        }
        set actualLabelVisible(a) {
            this._actualLabelVisible = a;
        }
        get actualNoMatchesFoundLabel() {
            return this._actualNoMatchesFoundLabel;
        }
        set actualNoMatchesFoundLabel(a) {
            this._actualNoMatchesFoundLabel = a;
        }
        get rowSeparatorsVisible() {
            return this._rowSeparatorsVisible;
        }
        set rowSeparatorsVisible(a) {
            this._rowSeparatorsVisible = a;
        }
        am() {
            let a = new StringBuilder(0);
            a.l("{");
            a.l("actualBackgroundColor : " + this.a.serialize() + ", ");
            a.l("actualBaseTheme : " + this.j + ", ");
            a.l("actualBorderColor : " + this.b.serialize() + ", ");
            a.l("actualBorderWidth : " + this.p + ", ");
            a.l("columnHeadersVisible : " + this.columnHeadersVisible + ", ");
            a.l("actualContentPadding : { left: " + this.au.c + ",top: " + this.au.e + ",right: " + this.au.d + ",bottom: " + this.au.b + "},");
            a.l("actualDensity : " + this.k + ", ");
            a.l("dropDownButtonVisible : " + this.dropDownButtonVisible + ", ");
            a.l("actualFocusUnderlineOpacity : " + this.q + ", ");
            a.l("label : \"" + this.aa + "\", ");
            a.l("actualLabelTextColor : " + this.c.serialize() + ", ");
            if (!stringIsNullOrEmpty(this.ad)) {
                a.l("labelFontStyle : \"" + this.ad + "\", ");
            }
            if (!stringIsNullOrEmpty(this.ae)) {
                a.l("labelFontVariant : \"" + this.ae + "\", ");
            }
            if (!stringIsNullOrEmpty(this.af)) {
                a.l("labelFontWeight : \"" + this.af + "\", ");
            }
            if (!stringIsNullOrEmpty(this.ab)) {
                a.l("labelFontFamily : \"" + this.ab + "\", ");
            }
            if (!stringIsNullOrEmpty(this.ac)) {
                a.l("labelFontStretch : \"" + this.ac + "\", ");
            }
            if (!isNaN_(this.v)) {
                a.l("labelFontSize : " + this.v + ", ");
            }
            a.l("actualLabelVisible : " + this.actualLabelVisible + ", ");
            a.l("actualNoMatchesFoundLabel :\"" + this.actualNoMatchesFoundLabel + "\", ");
            a.l("actualNoMatchesFoundLabelBackgroundColor : " + this.d.serialize() + ", ");
            a.l("actualNoMatchesFoundLabelTextColor : " + this.e.serialize() + ", ");
            if (!stringIsNullOrEmpty(this.ai)) {
                a.l("noMatchesFoundLabelFontStyle : \"" + this.ai + "\", ");
            }
            if (!stringIsNullOrEmpty(this.aj)) {
                a.l("noMatchesFoundLabelFontVariant : \"" + this.aj + "\", ");
            }
            if (!stringIsNullOrEmpty(this.ak)) {
                a.l("noMatchesFoundLabelFontWeight : \"" + this.ak + "\", ");
            }
            if (!stringIsNullOrEmpty(this.ag)) {
                a.l("noMatchesFoundLabelFontFamily : \"" + this.ag + "\", ");
            }
            if (!stringIsNullOrEmpty(this.ah)) {
                a.l("noMatchesFoundLabelFontStretch : \"" + this.ah + "\", ");
            }
            if (!isNaN_(this.w)) {
                a.l("noMatchesFoundLabelFontSize : " + this.w + ", ");
            }
            a.l("placeholder : \"" + this.al + "\", ");
            a.l("rowSeparatorsVisible : " + this.rowSeparatorsVisible + ", ");
            a.l("actualTextColor : " + this.f.serialize() + ", ");
            if (!stringIsNullOrEmpty(this.aq)) {
                a.l("textStyleFontStyle : \"" + this.aq + "\", ");
            }
            if (!stringIsNullOrEmpty(this.ar)) {
                a.l("textStyleFontVariant : \"" + this.ar + "\", ");
            }
            if (!stringIsNullOrEmpty(this.as)) {
                a.l("textStyleFontWeight : \"" + this.as + "\", ");
            }
            if (!stringIsNullOrEmpty(this.ao)) {
                a.l("textStyleFontFamily : \"" + this.ao + "\", ");
            }
            if (!stringIsNullOrEmpty(this.ap)) {
                a.l("textStyleFontStretch : \"" + this.ap + "\", ");
            }
            if (!isNaN_(this.x)) {
                a.l("textStyleFontSize : " + this.x + ", ");
            }
            a.l("actualUnderlineColor : " + this.g.serialize() + ", ");
            a.l("actualUnderlineOpacity : " + this.r + ", ");
            a.l("actualUnderlineRippleColor : " + this.h.serialize() + ", ");
            a.l("actualUnderlineRippleOpacity : " + this.s + ", ");
            a.l("actualUnderlineRippleWidth : " + this.t + ", ");
            a.l("actualUnderlineWidth : " + this.u + ", ");
            a.l("text : \"" + this.an + "\", ");
            if (this.y != null) {
                a.l("value : \"" + this.y.toString() + "\", ");
            }
            a.l("Grid : " + this.i.av());
            a.l("}");
            return a.toString();
        }
    }
    MultiColumnComboVisualModelExport.$t = /*@__PURE__*/ markType(MultiColumnComboVisualModelExport, 'MultiColumnComboVisualModelExport');
    return MultiColumnComboVisualModelExport;
})();
//# sourceMappingURL=MultiColumnComboVisualModelExport.js.map
