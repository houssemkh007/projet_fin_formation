/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, markType, INotifyPropertyChanged_$type, PropertyChangedEventArgs, runOn, delegateRemove, delegateCombine, enumGetBox, fromEnum } from "igniteui-react-core";
import { BaseControlTheme_$type } from "igniteui-react-core";
import { ControlDisplayDensity_$type } from "igniteui-react-core";
import { BrushUtil } from "igniteui-react-core";
import { ObservableCollection$1 } from "igniteui-react-core";
import { ColumnChooserInfo } from "./ColumnChooserInfo";
/**
 * @hidden
 */
export let ColumnChooserView = /*@__PURE__*/ (() => {
    class ColumnChooserView extends Base {
        constructor() {
            super();
            this.d = null;
            this.c = null;
            this.e = null;
            this.a = null;
            this.b = null;
        }
        h() {
        }
        g(a) {
            if (a == null) {
                this.b = null;
                return;
            }
            this.b = a;
            this.e = this.b.rootWrapper.getChildAt(0);
            this.e.setStyleProperty("margin", "4px 0px 4px 0px");
            this.k();
            this.j();
            let b = Math.round(a.rootWrapper.width());
            let c = Math.round(a.rootWrapper.height());
            this.b.rootWrapper.setStyleProperty("position", "relative");
            this.i();
        }
        i() {
            if (this.b != null) {
                this.b.rootWrapper.setStyleProperty("background-color", this.a.ao._fill);
            }
        }
        j() {
            if (this.b != null) {
                let a = this.b.rootWrapper.getChildAt(1);
                a.setStyleProperty("width", "100%");
                if (this.a.t != null) {
                    a.setStyleProperty("height", "calc(100% - 25px");
                }
                else {
                    a.setStyleProperty("height", "calc(100% - 5px");
                }
            }
        }
        k() {
            if (this.e != null && this.a.t != null) {
                this.e.setText(this.a.t);
                this.e.setStyleProperty("font", "16px \"Segoe UI\", Verdana");
            }
            this.l();
            this.m();
            this.j();
        }
        l() {
            if (this.e != null && this.a.ap != null) {
                this.e.setStyleProperty("color", this.a.ap._fill);
            }
        }
        m() {
            if (this.e != null && this.a.j != null) {
                this.e.setStyleProperty("font", this.a.j.fontString);
            }
        }
        f() {
        }
    }
    ColumnChooserView.$t = /*@__PURE__*/ markType(ColumnChooserView, 'ColumnChooserView');
    return ColumnChooserView;
})();
/**
 * @hidden
 */
export let ColumnChooser = /*@__PURE__*/ (() => {
    class ColumnChooser extends Base {
        constructor() {
            super();
            this.c = null;
            this.h = null;
            this.propertyChanged = null;
            this.k = false;
            this.a = null;
            this.m = null;
            this.i = null;
            this.an = BrushUtil.g(255, 0, 153, 255);
            this.l = "Filter columns list ...";
            this.d = 1;
            this.f = 2;
            this.am = BrushUtil.g(255, 248, 248, 248);
            this.k = false;
            let a = new ColumnChooserView();
            a.a = this;
            this.c = a;
            this.c.h();
        }
        notifySizeChanged() {
            this.c.f();
        }
        destroy() {
            if (this.h != null) {
                let a = this.h;
                a.checkedChanged = delegateRemove(a.checkedChanged, runOn(this, this.aa));
                let b = this.h;
                b.selectAllCheckboxChanged = delegateRemove(b.selectAllCheckboxChanged, runOn(this, this.ab));
            }
            this.provideContainer(null, null);
            if (this.a != null) {
                let c = this.a.actualColumns;
                c.collectionChanged = delegateRemove(c.collectionChanged, runOn(this, this.x));
                let d = this.a;
                d.columnHiddenChanged = delegateRemove(d.columnHiddenChanged, runOn(this, this.ak));
            }
        }
        provideContainer(a, b) {
            this.h = b;
            if (this.h != null) {
                let c = this.h;
                c.checkedChanged = delegateCombine(c.checkedChanged, runOn(this, this.aa));
                let d = this.h;
                d.selectAllCheckboxChanged = delegateCombine(d.selectAllCheckboxChanged, runOn(this, this.ab));
            }
            this.y();
            this.c.g(a);
        }
        get b() {
            return this.a;
        }
        set b(a) {
            let b = this.a;
            this.a = a;
            if (b != this.a) {
                this.ae("TargetGrid", b, this.a);
            }
        }
        get t() {
            return this.m;
        }
        set t(a) {
            let b = this.m;
            this.m = a;
            if (b != this.m) {
                this.ae("Title", b, this.m);
            }
        }
        get j() {
            return this.i;
        }
        set j(a) {
            let b = this.i;
            this.i = a;
            if (b != this.i) {
                this.ae("TitleStyle", b, this.i);
            }
        }
        get ap() {
            return this.an;
        }
        set ap(a) {
            let b = this.an;
            this.an = a;
            if (b != this.an) {
                this.ae("TitleColor", b, this.an);
            }
        }
        get q() {
            return this.l;
        }
        set q(a) {
            let b = this.l;
            this.l = a;
            if (b != this.l) {
                this.ae("FilterPlaceholderText", b, this.l);
            }
        }
        get e() {
            return this.d;
        }
        set e(a) {
            let b = this.d;
            this.d = a;
            if (b != this.d) {
                this.ae("BaseTheme", enumGetBox(BaseControlTheme_$type, b), enumGetBox(BaseControlTheme_$type, this.d));
            }
        }
        get g() {
            return this.f;
        }
        set g(a) {
            let b = this.f;
            this.f = a;
            if (b != this.f) {
                this.ae("Density", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, this.f));
            }
        }
        get ao() {
            return this.am;
        }
        set ao(a) {
            let b = this.am;
            this.am = a;
            if (b != this.am) {
                this.ae("BackgroundColor", b, this.am);
            }
        }
        ae(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            this.af(a, b, c);
        }
        af(a, b, c) {
            switch (a) {
                case "TargetGrid":
                    if (b != null) {
                        let d = b.actualColumns;
                        d.collectionChanged = delegateRemove(d.collectionChanged, runOn(this, this.x));
                        let e = b;
                        e.columnHiddenChanged = delegateRemove(e.columnHiddenChanged, runOn(this, this.ak));
                    }
                    if (this.a != null) {
                        let f = this.a.actualColumns;
                        f.collectionChanged = delegateCombine(f.collectionChanged, runOn(this, this.x));
                        let g = this.a;
                        g.columnHiddenChanged = delegateCombine(g.columnHiddenChanged, runOn(this, this.ak));
                    }
                    this.y();
                    break;
                case "Title":
                    this.c.k();
                    break;
                case "TitleStyle":
                    this.c.m();
                    break;
                case "TitleColor":
                    this.c.l();
                    break;
                case "FilterPlaceholderText":
                    if (this.h != null) {
                        this.h.ax = this.q;
                    }
                    break;
                case "BaseTheme":
                    this.ai();
                    break;
                case "Density":
                    this.ah();
                    break;
                case "BackgroundColor":
                    if (this.h != null) {
                        this.h.cg = this.ao;
                    }
                    this.c.i();
                    break;
            }
        }
        ai() {
            if (this.h != null) {
                this.h.l = this.e;
            }
        }
        ah() {
            if (this.h != null) {
                this.h.n = this.g;
            }
        }
        ak(a, b) {
            if (this.k == false) {
                this.y();
            }
            this.k = false;
        }
        x(a, b) {
            this.y();
        }
        y() {
            if (this.a != null && this.h != null) {
                this.h.l = this.e;
                this.h.n = this.g;
                this.h.cg = this.ao;
                let a;
                let b = new ObservableCollection$1(ColumnChooserInfo.$, 0);
                for (let c of fromEnum(this.a.actualColumns)) {
                    a = new ColumnChooserInfo();
                    let d = c.hy;
                    if (c.h2 != null) {
                        d = c.h2;
                    }
                    a.columnName = d;
                    a.isNotHidden = !c.gd;
                    b.add(a);
                }
                if (this.q != null) {
                    this.h.ax = this.q;
                }
                this.h.itemsSource = b;
                let e = "";
                let f = "";
                e = "columnName";
                f = "isNotHidden";
                this.h.a9 = f;
                this.h.at = e;
                this.h.ag = true;
            }
        }
        al(a) {
            if (this.h != null) {
                this.h.updateHrMargin(a);
            }
        }
        aj() {
            this.h.b5();
            if (this.a != null) {
                for (let a of fromEnum(this.a.actualColumns)) {
                    this.k = true;
                    a.gd = false;
                }
            }
        }
        ac() {
            this.h.bh();
            if (this.a != null) {
                for (let a of fromEnum(this.a.actualColumns)) {
                    this.k = true;
                    a.gd = true;
                }
            }
        }
        ab(a, b) {
            this.k = true;
            if (b.a) {
                this.aj();
            }
            else {
                this.ac();
            }
        }
        aa(a, b) {
            this.k = true;
            let c = this.h.h.actualDataSource.getItemAtIndex(b.b);
            let d = this.a.actualColumns.count;
            for (let e = 0; e < d; e++) {
                if (this.a.actualColumns._inner[e].hy == c.columnName || this.a.actualColumns._inner[e].id == c.columnName || this.a.actualColumns._inner[e].h2 == c.columnName) {
                    this.a.actualColumns._inner[e].gd = !b.a;
                }
            }
        }
    }
    ColumnChooser.$t = /*@__PURE__*/ markType(ColumnChooser, 'ColumnChooser', Base.$, [INotifyPropertyChanged_$type]);
    return ColumnChooser;
})();
//# sourceMappingURL=ColumnChooserView_combined.js.map
