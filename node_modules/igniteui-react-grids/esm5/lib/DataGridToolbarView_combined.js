/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { Base, runOn, Delegate_$type, markType, INotifyPropertyChanged_$type, PropertyChangedEventArgs, delegateRemove, enumGetBox, delegateCombine } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { ControlDisplayDensity_$type } from "igniteui-react-core";
import { Button } from "igniteui-react-inputs";
import { BrushUtil } from "igniteui-react-core";
import { ElevationHelper } from "igniteui-react-inputs";
import { BaseDOMEventProxy } from "igniteui-react-core";
import { BaseControlTheme_$type } from "igniteui-react-core";
import { Icon } from "igniteui-react-inputs";
import { Thickness } from "igniteui-react-core";
/**
 * @hidden
 */
var DataGridToolbarView = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(DataGridToolbarView, _super);
    function DataGridToolbarView() {
        var _this = _super.call(this) || this;
        _this.k = null;
        _this.f = null;
        _this.d = null;
        _this.e = null;
        _this.h = null;
        _this.i = null;
        _this.j = null;
        _this.g = null;
        _this.a = null;
        _this.c = null;
        _this.b = new List$1(Delegate_$type, 0);
        return _this;
    }
    DataGridToolbarView.prototype.s = function () {
    };
    DataGridToolbarView.prototype.p = function (a) {
        if (a == null) {
            this.c = null;
            return;
        }
        this.c = a;
        var b = Math.round(a.rootWrapper.width());
        var c = Math.round(a.rootWrapper.height());
        this.c.rootWrapper.setStyleProperty("position", "relative");
        this.c.rootWrapper.setStyleProperty("display", "flex");
        this.c.rootWrapper.setStyleProperty("justify-content", "space-between");
        this.c.rootWrapper.setStyleProperty("align-items", "center");
        this.c.rootWrapper.setStyleProperty("padding", "4px 16px 4px 16px");
        if (this.a.bb != null) {
            this.c.rootWrapper.setStyleProperty("background-color", this.a.bb._fill);
        }
        this.c.rootWrapper.setStyleProperty("border-width", "1px 1px 0px 1px");
        this.c.rootWrapper.setStyleProperty("border-style", "solid");
        this.c.rootWrapper.setStyleProperty("box-sizing", "border-box");
        this.c.rootWrapper.setStyleProperty("border-color", "rgba(0, 0, 0, 0.2)");
        this.c.rootWrapper.setStyleProperty("border-radius", "3px 3px 0px 0px");
        this.ac();
        this.k = this.c.rootWrapper.getChildAt(0);
        this.y();
        var d = this.c.rootWrapper.getChildAt(1);
        d.setStyleProperty("justify-content", "space-around");
        this.v();
        this.x();
    };
    DataGridToolbarView.prototype.ac = function () {
        if (this.c != null) {
            switch (this.a.i) {
                case 1:
                    this.c.rootWrapper.setStyleProperty("height", "52px");
                    break;
                case 2:
                    this.c.rootWrapper.setStyleProperty("height", "46px");
                    break;
                case 3:
                    this.c.rootWrapper.setStyleProperty("height", "44px");
                    break;
                case 0:
                    this.c.rootWrapper.setStyleProperty("height", "46px");
                    break;
            }
        }
    };
    DataGridToolbarView.prototype.z = function () {
        if (this.c != null) {
            if (this.a.bb != null) {
                this.c.rootWrapper.setStyleProperty("background-color", this.a.bb._fill);
            }
        }
    };
    DataGridToolbarView.prototype.y = function () {
        if (this.k != null && this.a.ap != null) {
            this.k.setText(this.a.ap);
            this.k.setStyleProperty("font", "16px \"Segoe UI\", Verdana");
        }
        this.ag();
        this.ah();
    };
    DataGridToolbarView.prototype.ag = function () {
        if (this.k != null && this.a.bd != null) {
            this.k.setStyleProperty("color", this.a.bd._fill);
        }
    };
    DataGridToolbarView.prototype.ah = function () {
        if (this.k != null && this.a.m != null) {
            this.k.setStyleProperty("font", this.a.m.fontString);
        }
    };
    DataGridToolbarView.prototype.v = function () {
        if (this.c != null) {
            var a = this.c.rootWrapper.getChildAt(1);
            this.f = a.getChildAt(0);
            this.f.setProperty("id", "hideBtn");
            this.e = this.c.rootWrapper.getChildAt(2);
            this.w(this.e);
            this.e.setStyleProperty("height", "400px");
            this.e.setStyleProperty("width", "250px");
            var b = this.e.getChildAt(0);
            b.setStyleProperty("height", "calc(100% - 16px)");
            b.setStyleProperty("padding", "4px 16px 4px 16px");
            b.setStyleProperty("box-sizing", "border-box");
            if (this.a.p == true) {
                if (this.a.j == null) {
                    this.d = this.c.createElement("div");
                    this.a.a2(this.c, this.f, this.d, "Hiding");
                    this.f.listen("click", runOn(this, this.n));
                }
                else {
                    this.f.show();
                }
            }
            else {
                this.f.hide();
            }
        }
    };
    DataGridToolbarView.prototype.ad = function () {
        if (this.d != null) {
            var a = this.d.getChildAt(1);
            a.setText(this.a.r.toString());
        }
    };
    DataGridToolbarView.prototype.aa = function () {
        if (this.d != null) {
            if (this.d.getChildCount() > 2) {
                var a = this.d.getChildAt(2);
                a.setText(this.a.ab.toString());
            }
            else {
                var b = this.c.createElement("span");
                b.setStyleProperty("display", "inline-block");
                b.setStyleProperty("font-size", "14px");
                b.setStyleProperty("font-weight", "600");
                b.setText(this.a.ab);
                this.d.append(b);
            }
        }
    };
    DataGridToolbarView.prototype.n = function (a) {
        if (this.e != null) {
            if (this.g == null || this.g != this.e) {
                this.l();
                var b = this.f.getOffset();
                this.e.setOffset(b.left - this.e.width() + this.f.width(), b.top + this.f.height());
                this.g = this.e;
                this.t();
            }
            else {
                this.l();
            }
        }
        a.stopPropagation();
    };
    DataGridToolbarView.prototype.x = function () {
        if (this.c != null) {
            var a = this.c.rootWrapper.getChildAt(1);
            this.h = a.getChildAt(1);
            this.h.setProperty("id", "pinBtn");
            this.j = this.c.rootWrapper.getChildAt(3);
            this.w(this.j);
            this.j.setStyleProperty("height", "400px");
            this.j.setStyleProperty("width", "250px");
            var b = this.j.getChildAt(0);
            b.setStyleProperty("height", "calc(100% - 16px)");
            b.setStyleProperty("padding", "8px 16px 8px 16px");
            b.setStyleProperty("box-sizing", "border-box");
            if (this.a.q == true) {
                if (this.a.k == null) {
                    this.i = this.c.createElement("div");
                    this.a.a2(this.c, this.h, this.i, "Pinning");
                    this.h.listen("click", runOn(this, this.u));
                }
                else {
                    this.h.show();
                }
            }
            else {
                this.h.hide();
            }
        }
    };
    DataGridToolbarView.prototype.ae = function () {
        if (this.i != null) {
            var a = this.i.getChildAt(1);
            a.setText(this.a.s.toString());
        }
    };
    DataGridToolbarView.prototype.af = function () {
        if (this.i != null) {
            if (this.i.getChildCount() > 2) {
                var a = this.i.getChildAt(2);
                a.setText(this.a.ag);
            }
            else {
                var b = this.c.createElement("span");
                b.setStyleProperty("display", "inline-block");
                b.setStyleProperty("font-size", "14px");
                b.setStyleProperty("font-weight", "600");
                b.setText(this.a.ag);
                this.i.append(b);
            }
        }
    };
    DataGridToolbarView.prototype.u = function (a) {
        if (this.j != null) {
            if (this.g == null || this.g != this.j) {
                this.l();
                var b = this.h.getOffset();
                this.j.setOffset(b.left - this.j.width() + this.h.width(), b.top + this.h.height());
                this.g = this.j;
                this.t();
            }
            else {
                this.l();
            }
        }
        a.stopPropagation();
    };
    DataGridToolbarView.prototype.w = function (a) {
        var b = ElevationHelper.e(12, BrushUtil.g(66, 0, 0, 0), BrushUtil.g(30, 0, 0, 0), BrushUtil.g(20, 0, 0, 0), 1);
        a.setStyleProperty("boxShadow", b);
        a.setStyleProperty("background-color", this.a.bc._fill);
        a.setStyleProperty("position", "absolute");
        a.setStyleProperty("z-index", "12000");
        a.setStyleProperty("display", "none");
    };
    DataGridToolbarView.prototype.ab = function () {
        if (this.j != null) {
            this.j.setStyleProperty("background-color", this.a.bc._fill);
        }
        if (this.e != null) {
            this.e.setStyleProperty("background-color", this.a.bc._fill);
        }
    };
    DataGridToolbarView.prototype.t = function () {
        if (this.g != null) {
            this.b.add(this.c.globalListen("document", "keydown", runOn(this, this.q)));
            this.b.add(this.c.globalListen("document", "click", runOn(this, this.r)));
            this.g.show();
            this.g.listen("click", runOn(this, this.m));
        }
    };
    DataGridToolbarView.prototype.l = function () {
        if (this.g != null) {
            for (var a = 0; a < this.b.count; a++) {
                this.b._inner[a]();
            }
            this.b.clear();
            this.g.unlistenAll();
            this.g.hide();
            this.g = null;
        }
    };
    DataGridToolbarView.prototype.m = function (a) {
        a.stopPropagation();
    };
    DataGridToolbarView.prototype.q = function (a) {
        if (BaseDOMEventProxy.cu(a) == 8) {
            this.a.at();
        }
    };
    DataGridToolbarView.prototype.r = function (a) {
        this.a.at();
    };
    DataGridToolbarView.prototype.o = function () {
    };
    DataGridToolbarView.$t = markType(DataGridToolbarView, 'DataGridToolbarView');
    return DataGridToolbarView;
}(Base));
export { DataGridToolbarView };
/**
 * @hidden
 */
var DataGridToolbar = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(DataGridToolbar, _super);
    function DataGridToolbar() {
        var _this = _super.call(this) || this;
        _this.e = null;
        _this.c = null;
        _this.d = null;
        _this.r = 0;
        _this.s = 0;
        _this.j = null;
        _this.k = null;
        _this.propertyChanged = null;
        _this.a = null;
        _this.x = null;
        _this.l = null;
        _this.ba = BrushUtil.g(255, 24, 29, 31);
        _this.a8 = BrushUtil.g(255, 248, 248, 248);
        _this.a9 = BrushUtil.g(255, 248, 248, 248);
        _this.n = false;
        _this.t = null;
        _this.u = null;
        _this.o = false;
        _this.v = null;
        _this.w = null;
        _this.h = 2;
        _this.f = 1;
        _this.r = 0;
        _this.s = 0;
        var a = new DataGridToolbarView();
        a.a = _this;
        _this.e = a;
        _this.e.s();
        return _this;
    }
    DataGridToolbar.prototype.notifySizeChanged = function () {
        this.e.o();
    };
    DataGridToolbar.prototype.destroy = function () {
        this.provideContainer(null, null, null);
        if (this.b != null) {
            var a = this.b;
            a.columnHiddenChanged = delegateRemove(a.columnHiddenChanged, runOn(this, this.a6));
            var b = this.b;
            b.columnPinnedChanged = delegateRemove(b.columnPinnedChanged, runOn(this, this.a7));
        }
    };
    DataGridToolbar.prototype.provideContainer = function (a, b, c) {
        this.c = b;
        this.d = c;
        this.a3();
        this.a4();
        this.e.p(a);
    };
    Object.defineProperty(DataGridToolbar.prototype, "b", {
        get: function () {
            return this.a;
        },
        set: function (a) {
            var b = this.a;
            this.a = a;
            if (b != this.a) {
                this.ax("TargetGrid", b, this.a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataGridToolbar.prototype, "ap", {
        get: function () {
            return this.x;
        },
        set: function (a) {
            var b = this.x;
            this.x = a;
            if (b != this.x) {
                this.ax("ToolbarTitle", b, this.x);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataGridToolbar.prototype, "m", {
        get: function () {
            return this.l;
        },
        set: function (a) {
            var b = this.l;
            this.l = a;
            if (b != this.l) {
                this.ax("ToolbarTitleStyle", b, this.l);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataGridToolbar.prototype, "bd", {
        get: function () {
            return this.ba;
        },
        set: function (a) {
            var b = this.ba;
            this.ba = a;
            if (b != this.ba) {
                this.ax("ToolbarTitleColor", b, this.ba);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataGridToolbar.prototype, "bb", {
        get: function () {
            return this.a8;
        },
        set: function (a) {
            var b = this.a8;
            this.a8 = a;
            if (b != this.a8) {
                this.ax("BackgroundColor", b, this.a8);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataGridToolbar.prototype, "bc", {
        get: function () {
            return this.a9;
        },
        set: function (a) {
            var b = this.a9;
            this.a9 = a;
            if (b != this.a9) {
                this.ax("DialogBackgroundColor", b, this.a9);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataGridToolbar.prototype, "p", {
        get: function () {
            return this.n;
        },
        set: function (a) {
            var b = this.n;
            this.n = a;
            if (b != this.n) {
                this.ax("ColumnChooser", b, this.n);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataGridToolbar.prototype, "ab", {
        get: function () {
            return this.t;
        },
        set: function (a) {
            var b = this.t;
            this.t = a;
            if (b != this.t) {
                this.ax("ColumnChooserText", b, this.t);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataGridToolbar.prototype, "ad", {
        get: function () {
            return this.u;
        },
        set: function (a) {
            var b = this.u;
            this.u = a;
            if (b != this.u) {
                this.ax("ColumnChooserTitle", b, this.u);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataGridToolbar.prototype, "q", {
        get: function () {
            return this.o;
        },
        set: function (a) {
            var b = this.o;
            this.o = a;
            if (b != this.o) {
                this.ax("ColumnPinning", b, this.o);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataGridToolbar.prototype, "ag", {
        get: function () {
            return this.v;
        },
        set: function (a) {
            var b = this.v;
            this.v = a;
            if (b != this.v) {
                this.ax("ColumnPinningText", b, this.v);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataGridToolbar.prototype, "ai", {
        get: function () {
            return this.w;
        },
        set: function (a) {
            var b = this.w;
            this.w = a;
            if (b != this.w) {
                this.ax("ColumnPinningTitle", b, this.w);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataGridToolbar.prototype, "i", {
        get: function () {
            return this.h;
        },
        set: function (a) {
            var b = this.h;
            this.h = a;
            if (b != this.h) {
                this.ax("Density", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, this.h));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataGridToolbar.prototype, "g", {
        get: function () {
            return this.f;
        },
        set: function (a) {
            var b = this.f;
            this.f = a;
            if (b != this.f) {
                this.ax("BaseTheme", enumGetBox(BaseControlTheme_$type, b), enumGetBox(BaseControlTheme_$type, this.f));
            }
        },
        enumerable: true,
        configurable: true
    });
    DataGridToolbar.prototype.ax = function (a, b, c) {
        if (this.propertyChanged != null) {
            this.propertyChanged(this, new PropertyChangedEventArgs(a));
        }
        this.ay(a, b, c);
    };
    DataGridToolbar.prototype.ay = function (a, b, c) {
        switch (a) {
            case "TargetGrid":
                this.a3();
                this.a4();
                this.a5();
                this.e.ac();
                break;
            case "ToolbarTitle":
                this.e.y();
                break;
            case "ToolbarTitleStyle":
                this.e.ah();
                break;
            case "ToolbarTitleColor":
                this.e.ag();
                break;
            case "BackgroundColor":
                this.e.z();
                break;
            case "DialogBackgroundColor":
                this.e.ab();
                if (this.c != null) {
                    this.c.ao = this.bc;
                }
                if (this.d != null) {
                    this.d.al = this.bc;
                }
                break;
            case "ColumnChooser":
                this.a3();
                this.e.v();
                break;
            case "ColumnChooserText":
                this.e.aa();
                break;
            case "ColumnChooserTitle":
                if (this.c != null) {
                    this.c.t = this.ad;
                }
                break;
            case "ColumnPinning":
                this.a4();
                this.e.x();
                break;
            case "ColumnPinningText":
                this.e.af();
                break;
            case "ColumnPinningTitle":
                if (this.d != null) {
                    this.d.t = this.ai;
                }
                break;
            case "Density":
                this.a0();
                break;
            case "BaseTheme":
                this.a1();
                break;
        }
    };
    DataGridToolbar.prototype.a1 = function () {
        if (this.c != null) {
            this.c.e = this.g;
        }
        if (this.d != null) {
            this.d.e = this.g;
        }
        if (this.j != null) {
            this.j.d = this.g;
        }
        if (this.k != null) {
            this.k.d = this.g;
        }
    };
    DataGridToolbar.prototype.a0 = function () {
        if (this.i == 0) {
            if (this.b != null) {
                this.i = this.b.fg;
            }
        }
        if (this.j != null) {
            this.j.h = this.i;
        }
        if (this.k != null) {
            this.k.h = this.i;
        }
        if (this.c != null) {
            this.c.g = this.i;
        }
        if (this.d != null) {
            this.d.g = this.i;
        }
        this.e.ac();
    };
    DataGridToolbar.prototype.a2 = function (a, b, c, d) {
        var e = new Button();
        var f = a.getSubRenderer(b);
        e.provideContainer(f);
        e.d = this.g;
        e.h = this.i;
        var g = null;
        var h = null;
        var i = null;
        switch (d) {
            case "Hiding":
                this.j = e;
                g = DataGridToolbar.am;
                h = this.r.toString();
                if (this.ab != null) {
                    i = this.ab;
                }
                break;
            case "Pinning":
                this.k = e;
                g = DataGridToolbar.an;
                h = this.s.toString();
                if (this.ag != null) {
                    i = this.ag;
                }
                break;
        }
        e.s = 2;
        b.setStyleProperty("display", "inline-block");
        b.setStyleProperty("margin-left", "10px");
        c.setStyleProperty("display", "flex");
        c.setStyleProperty("flexDirection", "row");
        c.setStyleProperty("flexWrap", "no-wrap");
        c.setStyleProperty("align-items", "center");
        var j = a.createElement("div");
        j.setStyleProperty("display", "inline-block");
        j.setStyleProperty("margin-right", "5px");
        var k = a.getSubRenderer(j);
        var l = new Icon();
        l.provideContainer(k);
        l.svgPath = g;
        c.append(j);
        var m = a.createElement("span");
        m.setStyleProperty("display", "inline-block");
        m.setStyleProperty("font-size", "12px");
        m.setStyleProperty("font-weight", "600");
        m.setStyleProperty("margin-right", "5px");
        m.setText(h);
        c.append(m);
        if (i != null) {
            var n = a.createElement("span");
            n.setStyleProperty("display", "inline-block");
            n.setStyleProperty("font-size", "12px");
            n.setStyleProperty("font-weight", "600");
            n.setText(i);
            c.append(n);
        }
        e.appendButtonContent(c);
    };
    DataGridToolbar.prototype.at = function () {
        this.e.l();
    };
    DataGridToolbar.prototype.a3 = function () {
        if (this.p && this.c != null && this.b != null) {
            if (this.ad != null) {
                this.c.t = this.ad;
            }
            this.c.b = this.b;
            this.c.e = this.g;
            this.c.ao = this.bc;
            this.c.al(new Thickness(1, -16, 3, -16, 3));
        }
    };
    DataGridToolbar.prototype.a4 = function () {
        if (this.q && this.d != null && this.b != null) {
            if (this.ai != null) {
                this.d.t = this.ai;
            }
            this.d.b = this.b;
            this.d.e = this.g;
            this.d.al = this.bc;
            this.d.ai(new Thickness(1, -16, 3, -16, 3));
        }
    };
    DataGridToolbar.prototype.a5 = function () {
        if (this.b != null) {
            var a = this.b;
            a.columnHiddenChanged = delegateCombine(a.columnHiddenChanged, runOn(this, this.a6));
            var b = this.b;
            b.columnPinnedChanged = delegateCombine(b.columnPinnedChanged, runOn(this, this.a7));
            this.av();
        }
    };
    DataGridToolbar.prototype.av = function () {
        if (this.b != null) {
            var a = this.b.actualColumns.count;
            this.r = 0;
            this.s = 0;
            for (var b = 0; b < a; b++) {
                if (this.b.actualColumns._inner[b].gd == true) {
                    this.r++;
                }
                if (this.b.actualColumns._inner[b].fk == 1) {
                    this.s++;
                }
            }
        }
        this.e.ad();
        this.e.ae();
    };
    DataGridToolbar.prototype.a6 = function (a, b) {
        this.av();
    };
    DataGridToolbar.prototype.a7 = function (a, b) {
        this.av();
    };
    DataGridToolbar.$t = markType(DataGridToolbar, 'DataGridToolbar', Base.$, [INotifyPropertyChanged_$type]);
    DataGridToolbar.am = "M12 7c2.76 0 5 2.24 5 5 0 .65-.13 1.26-.36 1.83l2.92 2.92c1.51-1.26 2.7-2.89 3.43-4.75-1.73-4.39-6-7.5-11-7.5-1.4 0-2.74.25-3.98.7l2.16 2.16C10.74 7.13 11.35 7 12 7zM2 4.27l2.28 2.28.46.46C3.08 8.3 1.78 10.02 1 12c1.73 4.39 6 7.5 11 7.5 1.55 0 3.03-.3 4.38-.84l.42.42L19.73 22 21 20.73 3.27 3 2 4.27zM7.53 9.8l1.55 1.55c-.05.21-.08.43-.08.65 0 1.66 1.34 3 3 3 .22 0 .44-.03.65-.08l1.55 1.55c-.67.33-1.41.53-2.2.53-2.76 0-5-2.24-5-5 0-.79.2-1.53.53-2.2zm4.31-.78l3.15 3.15.02-.16c0-1.66-1.34-3-3-3l-.17.01z";
    DataGridToolbar.an = "M13.2,3.8l7.1,7.1l-2.8-0.1l-3.4,3.4l0.1,4.2l-3.5-3.5l-5.4,5.4l-1.4,0l0-1.4l5.4-5.4L5.7,9.8l4.2,0.1l3.4-3.4L13.2,3.8z";
    return DataGridToolbar;
}(Base));
export { DataGridToolbar };
//# sourceMappingURL=DataGridToolbarView_combined.js.map
