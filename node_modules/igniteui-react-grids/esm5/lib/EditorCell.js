/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { GridCellBase } from "./GridCellBase";
import { DataSourceSchemaPropertyType_$type } from "igniteui-react-core";
import { enumGetBox, runOn, delegateCombine, delegateRemove, typeCast, markType } from "igniteui-react-core";
import { EditorType_$type } from "./EditorType";
import { Popup } from "igniteui-react-layouts";
import { InputGroup } from "igniteui-react-inputs";
import { Input } from "igniteui-react-inputs";
import { IDataSource_$type } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { BaseDOMEventProxy } from "igniteui-react-core";
import { dateGetMonth, dateFromValues } from "igniteui-react-core";
import { stringIsNullOrWhiteSpace } from "igniteui-react-core";
/**
 * @hidden
 */
var EditorCell = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(EditorCell, _super);
    function EditorCell(a) {
        var _this = _super.call(this, a) || this;
        _this.c1 = null;
        _this.c0 = null;
        _this.ct = null;
        _this.cu = null;
        _this.cf = null;
        _this.ce = null;
        _this.cv = null;
        _this.cd = null;
        _this.c5 = null;
        _this.cw = null;
        _this.cx = null;
        _this.cy = null;
        _this.cz = null;
        _this.cg = null;
        _this.cj = false;
        _this.b9 = 0;
        _this.c7 = null;
        _this.ch = null;
        _this.cb = 0;
        _this.c6 = null;
        _this.da = null;
        _this.b7 = null;
        _this.cl = true;
        _this.cn = false;
        _this.co = false;
        _this.cm = false;
        _this.ck = false;
        _this.cs = false;
        _this.z.setAttribute("tabindex", "-1");
        _this.z.setStyleProperty("outline", "none");
        _this.z.setStyleProperty("display", "flex");
        _this.z.setStyleProperty("align-items", "center");
        _this.z.listen("keydown", runOn(_this, _this.d1));
        _this.z.listen("focusout", runOn(_this, _this.d0));
        _this.z.listen("focusin", runOn(_this, _this.dz));
        return _this;
    }
    Object.defineProperty(EditorCell.prototype, "ca", {
        get: function () {
            return this.b9;
        },
        set: function (a) {
            var b = this.b9;
            this.b9 = a;
            if (b != this.b9) {
                this.bg("DataType", enumGetBox(DataSourceSchemaPropertyType_$type, b), enumGetBox(DataSourceSchemaPropertyType_$type, this.b9));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EditorCell.prototype, "c9", {
        get: function () {
            return this.c7;
        },
        set: function (a) {
            var b = this.c7;
            this.c7 = a;
            if (b != this.c7) {
                this.bg("Value", b, this.c7);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EditorCell.prototype, "ci", {
        get: function () {
            return this.ch;
        },
        set: function (a) {
            var b = this.ch;
            this.ch = a;
            if (b != this.ch) {
                this.bg("FontInfo", b, this.ch);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EditorCell.prototype, "cc", {
        get: function () {
            return this.cb;
        },
        set: function (a) {
            var b = this.cb;
            this.cb = a;
            if (b != this.cb) {
                this.bg("EditorType", enumGetBox(EditorType_$type, b), enumGetBox(EditorType_$type, this.cb));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EditorCell.prototype, "c8", {
        get: function () {
            return this.c6;
        },
        set: function (a) {
            var b = this.c6;
            this.c6 = a;
            if (b != this.c6) {
                this.bg("ComboItemsSource", b, this.c6);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EditorCell.prototype, "dc", {
        get: function () {
            return this.da;
        },
        set: function (a) {
            var b = this.da;
            this.da = a;
            if (b != this.da) {
                this.bg("ComboTextField", b, this.da);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EditorCell.prototype, "b8", {
        get: function () {
            return this.b7;
        },
        set: function (a) {
            var b = this.b7;
            this.b7 = a;
            if (b != this.b7) {
                this.bg("ComboValueField", b, this.b7);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EditorCell.prototype, "cr", {
        get: function () {
            return this.cl;
        },
        set: function (a) {
            var b = this.cl;
            this.cl = a;
            if (b != this.cl) {
                this.bg("IsHidden", b, this.cl);
            }
        },
        enumerable: true,
        configurable: true
    });
    EditorCell.prototype.c4 = function (a) {
        if (this.cx == null) {
            this.cx = this.w.createElement("div");
            var b = this.w.getSubRenderer(this.cx);
            this.cg = new Popup();
            this.cg.provideRenderer(b);
            this.cz = this.w.createElement("div");
            this.cz.setStyleProperty("background-color", "rgba(0,0,0,0.7)");
            this.cz.setStyleProperty("color", "#fff");
            this.cz.setStyleProperty("padding", "5px");
            this.cz.setStyleProperty("outline", "none");
            this.cz.setAttribute("tabindex", "-1");
            this.cy = this.w.createElement("div");
            this.cy.setStyleProperty("white-space", "pre");
            if (this.ci != null) {
                this.cy.setStyleProperty("font", this.ci.fontString);
            }
            this.cz.append(this.cy);
            this.cg.appendPopupContent(this.cz);
        }
        var c = null;
        switch (a) {
            case 0:
                c = this.c3();
                break;
            case 1:
                c = this.c2();
                break;
        }
        return c;
    };
    EditorCell.prototype.c3 = function () {
        if (this.c1 != null) {
            this.du();
            this.dw();
            return this.c1;
        }
        this.c1 = this.w.createElement("div");
        this.c1.setRawStyleProperty("display", "flex");
        this.c1.setRawStyleProperty("width", "100%");
        this.c1.setRawStyleProperty("margin-top", "-10px");
        this.c1.setRawStyleProperty("height", "38px");
        this.ct = this.w.getSubRenderer(this.c1);
        this.cf = new InputGroup();
        this.cf.provideContainer(this.ct);
        this.cf.k = 0;
        this.cf.d = this.d.getTheme();
        this.cf.h = 3;
        this.c0 = this.w.createElement("div");
        this.c0.setRawStyleProperty("width", "100%");
        this.cu = this.w.getSubRenderer(this.c0);
        this.ce = new Input();
        this.ce.provideContainer(this.cu);
        this.ce.b0 = "text";
        var a = this.ce;
        a.changing = delegateCombine(a.changing, runOn(this, this.dy));
        this.ck = true;
        this.cf.appendContentChild(this.c0);
        this.cf.inputs.add(this.ce);
        return this.c1;
    };
    EditorCell.prototype.c2 = function () {
        var _this = this;
        if (this.cv != null) {
            this.dr();
            this.du();
            this.dw();
            return this.cv;
        }
        this.cv = this.w.createElement("div");
        this.cv.setRawStyleProperty("margin-top", "-10px");
        this.cv.setRawStyleProperty("height", "38px");
        this.cv.setRawStyleProperty("width", "100%");
        this.w.getPortal(this.cv, "MultiColumnComboBox", function (a) {
            _this.cd = a.componentRef;
            _this.cd.height = "100%";
            _this.cd.density = 3;
            _this.cd.baseTheme = _this.d.getTheme();
            _this.cd.labelVisible = false;
            _this.cd.columnHeadersVisible = false;
            _this.cd.rowSeparatorsVisible = false;
            _this.dr();
            _this.d3();
            _this.du();
            _this.dw();
            _this.c5 = _this.cd.i;
            _this.c5.valueChanged = delegateCombine(_this.c5.valueChanged, runOn(_this, _this.onComboValueChanged));
            _this.c5.textChanged = delegateCombine(_this.c5.textChanged, runOn(_this, _this.onComboTextChanged));
            _this.c5.gotFocus = delegateCombine(_this.c5.gotFocus, runOn(_this, _this.onComboGotFocus));
            _this.c5.lostFocus = delegateCombine(_this.c5.lostFocus, runOn(_this, _this.onComboLostFocus));
            _this.ck = true;
        }, false);
        return this.cv;
    };
    EditorCell.prototype.dx = function (a, b) {
        if (b.g != b.d || b.h != b.e) {
            if (this.cd != null) {
                this.cd.closeUp();
            }
            this.dm();
        }
    };
    EditorCell.prototype.dk = function () {
        if (!this.ck) {
            if (this.c5 != null) {
                this.c5.valueChanged = delegateCombine(this.c5.valueChanged, runOn(this, this.onComboValueChanged));
                this.c5.textChanged = delegateCombine(this.c5.textChanged, runOn(this, this.onComboTextChanged));
                this.c5.gotFocus = delegateCombine(this.c5.gotFocus, runOn(this, this.onComboGotFocus));
                this.c5.lostFocus = delegateCombine(this.c5.lostFocus, runOn(this, this.onComboLostFocus));
            }
            if (this.ce != null) {
                var a = this.ce;
                a.changing = delegateCombine(a.changing, runOn(this, this.dy));
            }
            this.ck = true;
        }
    };
    EditorCell.prototype.dl = function () {
        if (this.ck) {
            if (this.c5 != null) {
                this.c5.valueChanged = delegateRemove(this.c5.valueChanged, runOn(this, this.onComboValueChanged));
                this.c5.textChanged = delegateRemove(this.c5.textChanged, runOn(this, this.onComboTextChanged));
                this.c5.gotFocus = delegateRemove(this.c5.gotFocus, runOn(this, this.onComboGotFocus));
                this.c5.lostFocus = delegateRemove(this.c5.lostFocus, runOn(this, this.onComboLostFocus));
            }
            if (this.ce != null) {
                var a = this.ce;
                a.changing = delegateRemove(a.changing, runOn(this, this.dy));
            }
            this.ck = false;
        }
    };
    EditorCell.prototype.d2 = function (a) {
        var _this = this;
        this.cn = false;
        this.co = false;
        this.cm = false;
        if (!a) {
            this.co = true;
            if (this.cc == 0) {
                if (this.ce != null) {
                    this.ce.ck();
                    if (this.ce.b0 != "date") {
                        window.setTimeout(function () { return _this.ce.db(); }, 0);
                    }
                }
            }
            else if (this.cc == 1) {
                if (this.cd != null) {
                    if (this.cd.value == null && this.cd.text != "") {
                        this.cd.text = "";
                    }
                    this.cd.focus();
                    this.cd.select();
                }
            }
        }
    };
    EditorCell.prototype.d3 = function () {
        if (this.cc == 0) {
            if (this.ce != null) {
                if (this.c9 != null) {
                    if (this.ca == 8) {
                        var a = this.c9;
                        var b = dateGetMonth(a) < 10 ? "0" + dateGetMonth(a) : dateGetMonth(a).toString();
                        var c = a.getDate() < 10 ? "0" + a.getDate() : a.getDate().toString();
                        this.ce.cf = null;
                        this.ce.cf = a.getFullYear() + "-" + b + "-" + c;
                    }
                    else {
                        this.ce.cf = null;
                        this.ce.cf = this.c9.toString();
                    }
                    this.b.updateCellEditValue(this.ce.cf);
                }
                else {
                    this.ce.cf = null;
                }
            }
        }
        else if (this.cc == 1) {
            if (this.cd != null) {
                if (this.c9 == null) {
                    this.cd.text = " ";
                }
                this.cd.value = this.c9;
            }
        }
    };
    EditorCell.prototype.du = function () {
        if (this.cc == 0) {
            switch (this.ca) {
                case 10:
                case 6:
                case 5:
                case 1:
                case 3:
                case 4:
                case 7:
                    this.ce.b0 = "number";
                    break;
                case 8:
                    this.ce.b0 = "date";
                    break;
                default:
                    this.ce.b0 = "text";
                    break;
            }
        }
    };
    EditorCell.prototype.dv = function () {
        this.cj = true;
        this.z.removeChildren();
        this.cw = this.c4(this.cc);
        this.z.append(this.cw);
        this.cj = false;
    };
    EditorCell.prototype.dr = function () {
        if (this.cd != null) {
            this.dl();
            this.cd.dataSource = this.c8;
            this.cd.textField = this.dc;
            this.cd.valueField = this.b8;
            if (this.dc != null) {
                this.cd.fields = [this.dc];
            }
            else if (this.b8 != null && this.b8.length > 0) {
                this.cd.fields = [this.b8[0]];
            }
            else {
                var a = typeCast(IDataSource_$type, this.c8);
                if (a != null && a.actualSchema != null) {
                    this.cd.fields = [a.actualSchema.propertyNames[0]];
                }
                else {
                    var b = (Array.isArray(this.c8));
                    if (b) {
                        var c = (Object.keys(this.c8[0]));
                        if (c.length > 0) {
                            this.cd.fields = [c[0]];
                        }
                    }
                }
            }
            this.dk();
        }
    };
    EditorCell.prototype.dw = function () {
        if (this.ci != null) {
            if (this.cc == 0) {
                if (this.ce != null) {
                    this.ce.ac = this.ci;
                }
            }
            else if (this.cc == 1) {
                if (this.cd != null) {
                    this.cd.textStyle = this.ci.fontString;
                }
            }
            this.cy.setStyleProperty("font", this.ci.fontString);
        }
    };
    EditorCell.prototype.dn = function () {
        if (this.cr) {
            this.dl();
        }
        else {
            this.dk();
        }
    };
    EditorCell.prototype.d4 = function (a, b, c, d, e) {
        if (!stringIsNullOrWhiteSpace(a)) {
            this.cy.setRawText(a);
            this.d5();
        }
    };
    EditorCell.prototype.d5 = function () {
        var rect_ = this.z.getNativeElement().getBoundingClientRect();
        var a = new Rect(4);
        a.left = (rect_.left + window.pageXOffset);
        a.top = (rect_.top + window.pageYOffset);
        a.right = (rect_.right + window.pageXOffset);
        a.bottom = (rect_.bottom + window.pageYOffset);
        this.cg.showRelativeToExclusionRect(a, 1, 0);
    };
    EditorCell.prototype.dm = function () {
        if (this.cg.t) {
            this.cg.an();
        }
    };
    EditorCell.prototype.bf = function () {
        if (this.cw == null) {
            this.dv();
            this.d.setViewportChangedHandler(runOn(this, this.dx));
        }
    };
    EditorCell.prototype.bg = function (a, b, c) {
        _super.prototype.bg.call(this, a, b, c);
        switch (a) {
            case "EditorType":
                this.dv();
                break;
            case "ComboItemsSource":
            case "ComboTextField":
            case "ComboValueField":
                this.dr();
                break;
            case "DataType":
                this.du();
                break;
            case "Value":
                this.d3();
                break;
            case "FontInfo":
                this.dw();
                break;
            case "IsHidden":
                this.dn();
                break;
        }
    };
    EditorCell.prototype.onComboValueChanged = function (a, b) {
        this.d6();
    };
    EditorCell.prototype.onComboTextChanged = function (a, b) {
        this.d6();
    };
    EditorCell.prototype.d6 = function () {
        if (this.co && this.cc == 1) {
            if (this.cd.value != null) {
                this.b.updateCellEditValue(this.cd.value);
            }
            else if (this.cd.value == null && stringIsNullOrWhiteSpace(this.cd.text)) {
                this.b.updateCellEditValue(null);
            }
            else {
                this.b.updateCellEditValue(this.c9);
            }
        }
    };
    EditorCell.prototype.dy = function (a, b) {
        var c = b.value;
        if (this.ca == 8) {
            var d = b.value.split('-');
            var e = parseInt(d[0]);
            var f = parseInt(d[1]);
            var g = parseInt(d[2]);
            c = dateFromValues(e, f, g, 0, 0, 0, 0);
        }
        this.b.updateCellEditValue(c);
    };
    EditorCell.prototype.d1 = function (a) {
        switch (BaseDOMEventProxy.cu(a)) {
            case 14:
            case 16:
            case 15:
            case 17:
                a.stopPropagation();
                break;
        }
    };
    EditorCell.prototype.cq = function (a) {
        if (a != null && this.cg != null && this.cg.t) {
            var b = this.cz.getNativeElement();
            return b.contains(a);
        }
        return false;
    };
    EditorCell.prototype.cp = function (a) {
        if (a != null) {
            var b = this.z.getNativeElement();
            return b.contains(a);
        }
        return false;
    };
    EditorCell.prototype.d0 = function (a) {
        if (!this.cj) {
            var b = (a.originalEvent.relatedTarget);
            if (this.cm && !this.cp(b) && !this.cq(b)) {
                this.b.editorCellLostFocus();
                this.dm();
            }
        }
    };
    EditorCell.prototype.dz = function (a) {
        if (this.cn && !this.cg.t) {
            this.d5();
        }
    };
    EditorCell.prototype.onComboLostFocus = function (a) {
        this.cm = true;
    };
    EditorCell.prototype.onComboGotFocus = function (a) {
        this.cm = false;
    };
    EditorCell.prototype.onContactStarted = function (a, b) {
        a.stopPropagation();
    };
    EditorCell.prototype.onContactCompleted = function (a, b) {
        a.stopPropagation();
    };
    EditorCell.prototype.onDoubleClick = function (a) {
        a.stopPropagation();
    };
    EditorCell.$t = markType(EditorCell, 'EditorCell', GridCellBase.$);
    return EditorCell;
}(GridCellBase));
export { EditorCell };
//# sourceMappingURL=EditorCell.js.map
