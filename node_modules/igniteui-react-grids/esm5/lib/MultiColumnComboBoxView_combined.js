/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { Base, Delegate_$type, runOn, delegateCombine, fromEnum, typeCast, Array_$type, delegateRemove, markType, INotifyPropertyChanged_$type, PropertyChangedEventArgs, enumGetBox, String_$type } from "igniteui-react-core";
import { Popup } from "igniteui-react-layouts";
import { Suffix } from "igniteui-react-inputs";
import { InputGroup } from "igniteui-react-inputs";
import { Label } from "igniteui-react-inputs";
import { Input } from "igniteui-react-inputs";
import { List$1 } from "igniteui-react-core";
import { Icon } from "igniteui-react-inputs";
import { GridCellPosition } from "./GridCellPosition";
import { Rect } from "igniteui-react-core";
import { GotFocusEventArgs } from "./GotFocusEventArgs";
import { LostFocusEventArgs } from "./LostFocusEventArgs";
import { FilterFactory } from "igniteui-react-core";
import { ColumnComparisonFilterCondition } from "./ColumnComparisonFilterCondition";
import { NativeUI } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
import { MultiColumnComboBoxUtilities } from "./MultiColumnComboBoxUtilities";
import { ColumnWidth } from "./ColumnWidth";
import { SortMode_$type } from "./SortMode";
import { IDataSourceUpdateNotifier_$type } from "igniteui-react-core";
import { MultipleDataSourceNotifier } from "./MultipleDataSourceNotifier";
import { TextHeaderCellModel } from "./TextHeaderCellModel";
import { CornerRadius } from "igniteui-react-core";
import { stringEmpty, stringIsNullOrEmpty } from "igniteui-react-core";
import { stringFormat } from "igniteui-react-core";
import { BaseControlTheme_$type } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { ControlDisplayDensity_$type } from "igniteui-react-core";
import { StringComparer } from "igniteui-react-core";
import { ThemeResolver } from "igniteui-react-inputs";
import { MultiColumnComboBoxTextChangedEventArgs } from "./MultiColumnComboBoxTextChangedEventArgs";
import { MultiColumnComboBoxValueChangedEventArgs } from "./MultiColumnComboBoxValueChangedEventArgs";
import { FastReflectionHelper } from "igniteui-react-core";
import { MultiColumnComboVisualModelExport } from "./MultiColumnComboVisualModelExport";
import { AppearanceHelper } from "igniteui-react-core";
import { FontUtil } from "igniteui-react-core";
import { BrushUtil } from "igniteui-react-core";
import { isNaN_ } from "igniteui-react-core";
/**
 * @hidden
 */
var MultiColumnComboBoxView = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(MultiColumnComboBoxView, _super);
    function MultiColumnComboBoxView() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.ac = null;
        _this.ak = null;
        _this.f = null;
        _this.ai = null;
        _this.k = null;
        _this.ah = null;
        _this.j = null;
        _this.aj = null;
        _this.l = null;
        _this.h = null;
        _this.ae = null;
        _this.i = null;
        _this.af = null;
        _this.m = null;
        _this.ag = null;
        _this.d = null;
        _this.aq = null;
        _this.ab = new List$1(Delegate_$type, 0);
        _this.au = null;
        _this.aa = true;
        _this.ap = 0;
        _this.x = false;
        _this.a = null;
        _this.c = 0;
        _this.w = false;
        _this.s = false;
        _this.r = false;
        _this.p = false;
        _this.an = null;
        _this.am = null;
        _this.v = false;
        _this.ao = -1;
        _this.z = false;
        _this.t = false;
        return _this;
    }
    Object.defineProperty(MultiColumnComboBoxView.prototype, "e", {
        get: function () {
            return this.d;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBoxView.prototype, "y", {
        get: function () {
            return this.ap == 46;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBoxView.prototype, "n", {
        get: function () {
            return this.m;
        },
        enumerable: true,
        configurable: true
    });
    MultiColumnComboBoxView.prototype.bf = function (a) {
        this.ak = a;
        this.b1();
    };
    MultiColumnComboBoxView.prototype.bg = function (a) {
        this.f = a;
    };
    MultiColumnComboBoxView.prototype.bp = function () {
    };
    MultiColumnComboBoxView.prototype.b1 = function () {
        this.ag = this.ac.createElement("div");
        this.cr();
        this.a1();
        this.a0();
        this.ak.append(this.ai);
        this.ck();
        this.cl();
        document.addEventListener("click", runOn(this, this.a2), false);
        window.addEventListener("resize", runOn(this, this.cx), false);
    };
    MultiColumnComboBoxView.prototype.aw = function (a) {
        var b = this.g.n();
        if (null == b) {
            return;
        }
        this.p = false;
        if (b.eo != a) {
            b.eo = a;
            this.p = true;
        }
        else {
            this.a3();
        }
    };
    MultiColumnComboBoxView.prototype.ay = function () {
        var a = this.e;
        a.cw = null;
    };
    MultiColumnComboBoxView.prototype.az = function () {
        var a = this.n;
        if (null != a) {
            a.an();
        }
        this.cl();
        var b = this.g.n();
        if (null != b) {
            var c = b.eo;
            if (null != c) {
                b.eo = null;
            }
        }
    };
    MultiColumnComboBoxView.prototype.u = function (a) {
        if (null == a) {
            return false;
        }
        var b = this.ai.getNativeElement();
        var c = this.ag.getNativeElement();
        var d = this.am.getNativeElement();
        return b.contains(a) || c.contains(a) || d.contains(a);
    };
    MultiColumnComboBoxView.prototype.a0 = function () {
        var a = this.ad;
        var b = this.g;
        this.ai = a.createElement("div");
        this.ai.setStyleProperty("display", "flex");
        this.ai.setStyleProperty("height", "100%");
        this.ai.setAttribute("tabIndex", "0");
        this.ai.setAttribute("outline", "none !important");
        this.ai.listen("focusin", runOn(this, this.bm));
        this.ai.listen("focusout", runOn(this, this.bn));
        var c = a.getSubRenderer(this.ai);
        this.k = new InputGroup();
        this.k.provideContainer(c);
        this.k.k = 2;
        this.aj = a.createElement("div");
        var d = a.getSubRenderer(this.aj);
        this.l = new Label();
        this.l.provideContainer(d);
        if (this.f.actualLabelVisible) {
            this.cu();
        }
        this.ah = a.createElement("div");
        this.ah.addClass("ig-input");
        this.ah.setRawStyleProperty("flex-grow", "1");
        var e = a.getSubRenderer(this.ah);
        this.j = new Input();
        this.j.provideContainer(e);
        a.getExternal(this.j, a.rootWrapper, a.getExternal(b, null, null));
        this.j.b0 = "text";
        this.j.cf = b.e5;
        var f = this.j;
        f.changing = delegateCombine(f.changing, runOn(this, this.bh));
        var g = this.j;
        g.compositionEnd = delegateCombine(g.compositionEnd, runOn(this, this.bi));
        var h = this.j;
        h.keyDown = delegateCombine(h.keyDown, runOn(this, this.bk));
        var i = this.j;
        i.gotFocus = delegateCombine(i.gotFocus, runOn(this, this.bj));
        var j = this.j;
        j.mouseDown = delegateCombine(j.mouseDown, runOn(this, this.bl));
        this.k.appendContentChild(this.ah);
        this.k.inputs.add(this.j);
        this.a5(this.g.a2);
        var k = a.createElement("div");
        var l = a.getSubRenderer(k);
        var m = new Suffix();
        m.provideContainer(l);
        this.ae = a.createElement("div");
        this.h = new Icon();
        var n = a.getSubRenderer(this.ae);
        this.h.provideContainer(n);
        this.h.svgPath = MultiColumnComboBoxView.ar;
        this.ae.setStyleProperty("height", "16px");
        this.ae.setStyleProperty("width", "16px");
        m.appendContentChild(this.ae);
        this.k.appendContentChild(k);
        this.k.inputs.add(m);
        this.ch();
        var o = a.createElement("div");
        var p = a.getSubRenderer(o);
        var q = new Suffix();
        q.provideContainer(p);
        this.af = a.createElement("div");
        this.i = new Icon();
        var r = a.getSubRenderer(this.af);
        this.i.provideContainer(r);
        this.i.svgPath = MultiColumnComboBoxView.at;
        q.appendContentChild(this.af);
        this.k.appendContentChild(o);
        this.k.inputs.add(q);
        this.ae.listen("click", runOn(this, this.ax));
        this.af.listen("click", runOn(this, this.a4));
    };
    MultiColumnComboBoxView.prototype.a1 = function () {
        var a = this.ac.createElement("div");
        var b = this.ac.getSubRenderer(a);
        this.m = new Popup();
        this.m.provideRenderer(b);
        this.am = this.ac.createElement("div");
        this.am.setStyleProperty("padding", "4px");
        this.am.setStyleProperty("white-space", "nowrap");
        this.an = this.ac.createElement("div");
        this.an.append(this.am);
        this.an.append(this.ag);
        this.m.appendPopupContent(this.an);
    };
    MultiColumnComboBoxView.prototype.bt = function (a, b) {
    };
    MultiColumnComboBoxView.prototype.bw = function (a, b, c) {
    };
    MultiColumnComboBoxView.prototype.bs = function () {
        switch (this.c) {
            case 2:
            case 1:
                if (null == this.a) {
                    this.c = 0;
                }
                break;
        }
        var a = null;
        switch (this.c) {
            case 2:
                {
                    var b = this.a.actualCount;
                    if (b == 0) {
                        this.g.cv = null;
                    }
                    else {
                        if (b > 1) {
                        }
                        a = this.a.getItemAtIndex(0);
                        var c = this.g.i();
                        var d = new List$1(Base.$, 0);
                        for (var f = 0; f < c.length; f++) {
                            var e = c[f];
                            var g = this.a.getItemProperty(a, e);
                            d.add1(g);
                        }
                        this.g.cv = d.count == 1 ? d._inner[0] : d.toArray();
                    }
                }
                break;
            case 1:
                {
                    var h = this.a.actualCount;
                    if (h == 0) {
                        this.g.e5 = stringEmpty();
                    }
                    else {
                        if (h > 1) {
                        }
                        var i = this.g.ej();
                        a = this.a.getItemAtIndex(0);
                        var j = this.a.getItemProperty(a, i).toString();
                        this.g.e5 = j;
                    }
                    var k = this.b();
                    var l = k.indexOfItem(a);
                    this.cg(l);
                }
                break;
            case 0:
            default: return;
        }
        if (null != a) {
            var m = this.b();
            var n = m.indexOfItem(a);
            this.cg(n);
        }
        else {
            this.cg(-1);
        }
        if (this.a != null) {
            this.a.updateNotifier = null;
            this.a = null;
        }
        this.c = 0;
    };
    MultiColumnComboBoxView.prototype.bu = function (a, b) {
    };
    MultiColumnComboBoxView.prototype.bv = function (a, b) {
    };
    MultiColumnComboBoxView.prototype.bz = function (a, b) {
        var c = this.e;
        if (null != c) {
            var d = c.cw;
            if (null != d) {
                if (d.b >= a && d.b <= b) {
                    this.ce(d.b);
                    this.cs();
                }
            }
        }
    };
    MultiColumnComboBoxView.prototype.b4 = function (a, b, c) {
    };
    MultiColumnComboBoxView.prototype.br = function () {
        this.b7();
        if (this.w) {
            var a = this.b();
            var b = a.actualCount;
            if (this.aa && b > 0) {
                this.b9();
            }
            else {
                this.ca();
            }
        }
        else {
            this.cq();
        }
    };
    MultiColumnComboBoxView.prototype.b0 = function (a, b) {
    };
    MultiColumnComboBoxView.prototype.b2 = function (a, b) {
    };
    MultiColumnComboBoxView.prototype.o = function () {
        var a = document.activeElement;
        return this.u(a);
    };
    MultiColumnComboBoxView.prototype.a3 = function () {
        this.cv();
        this.bo();
        var a = this.n;
        if (a.t) {
            return;
        }
        var b = this.cy();
        a.q = !this.w;
        a.showRelativeToExclusionRect(b, 1, 1);
        this.cl();
    };
    MultiColumnComboBoxView.prototype.cy = function () {
        var a = this.ac.rootWrapper.getNativeElement();
        var b = (a.getBoundingClientRect());
        return new Rect(0, b.left + window.pageXOffset, b.top + window.pageYOffset, b.width, b.height);
    };
    MultiColumnComboBoxView.prototype.b = function () {
        var a = this.e;
        if (null != a) {
            return a.actualDataSource;
        }
        return null;
    };
    MultiColumnComboBoxView.prototype.q = function (a) {
        var b = this.d.ad;
        var c = b.count;
        if (0 == c) {
            a = null;
            return {
                ret: true,
                p0: a
            };
        }
        else if (1 == c) {
            a = b._inner[0];
        }
        else {
            a = b._inner[0];
        }
        return {
            ret: null != a,
            p0: a
        };
    };
    MultiColumnComboBoxView.prototype.a8 = function (a) {
        var b = null != a ? a.b : -1;
        this.ce(b);
    };
    MultiColumnComboBoxView.prototype.bc = function () {
        var _this = this;
        if (this.v) {
            return;
        }
        var a = this.g;
        var b;
        var c = ((function () { var d = _this.q(b); b = d.p0; return d.ret; })());
        if (!c) {
            return;
        }
        if (b == null) {
            return;
        }
        a.fr(b);
    };
    MultiColumnComboBoxView.prototype.bo = function () {
        this.n.aq();
    };
    MultiColumnComboBoxView.prototype.bq = function () {
        var a = this.n;
        if (a.t) {
            this.az();
            var b = this.j;
            b.ck();
            var c = b.cf;
            var d = null != c ? b.cf.length : 0;
            b.dd(d, d);
        }
    };
    MultiColumnComboBoxView.prototype.bx = function () {
        this.k.ah = true;
        this.j.db();
        var a = new GotFocusEventArgs();
        this.g.fo(a);
    };
    MultiColumnComboBoxView.prototype.by = function () {
        this.az();
        this.k.mj();
        var a = new LostFocusEventArgs();
        this.g.fp(a);
    };
    MultiColumnComboBoxView.prototype.b3 = function (a) {
        var e_1, _a;
        if (a == null) {
            this.ac = null;
            try {
                for (var _b = tslib_1.__values(fromEnum(this.ab)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var b = _c.value;
                    b();
                }
            }
            catch (e_1_1) {
                e_1 = { error: e_1_1 };
            }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return))
                        _a.call(_b);
                }
                finally {
                    if (e_1)
                        throw e_1.error;
                }
            }
            this.ab.clear();
            return;
        }
        this.ac = a;
        var c = a.rootWrapper;
        this.bf(c);
    };
    MultiColumnComboBoxView.prototype.b5 = function (a, b) {
        var c = this.b();
        if (null == c) {
            return;
        }
        if (null != this.a) {
            if (a != this.c) {
            }
            this.a.updateNotifier = null;
            this.a = null;
        }
        this.c = a;
        var d = new FilterFactory();
        var e = null;
        var f = null;
        switch (a) {
            case 2:
                {
                    var g = this.g.ej();
                    if (stringIsNullOrEmpty(g)) {
                        return;
                    }
                    e = b.toString();
                    var h = d.property(g);
                    f = h.isEqualTo(e);
                }
                break;
            case 1:
                {
                    var i = this.g.i();
                    if (i == null || i.length < 1) {
                        return;
                    }
                    var j = typeCast(Array_$type, b) !== null ? b : [b];
                    if (i.length != j.length) {
                        return;
                    }
                    for (var k = 0; k < i.length; k++) {
                        var l = i[k];
                        e = j[k];
                        var m = d.property(l);
                        var n = m.isEqualTo(e);
                        if (null == f) {
                            f = n;
                        }
                        else {
                            f.and(n);
                        }
                    }
                }
                break;
            case 0:
            default: return;
        }
        this.a = c.clone();
        this.a.filterExpressions.clear();
        this.a.updateNotifier = new MultiColumnComboBoxDataSourceNotificationHandler(this, true);
        this.a.filterExpressions.add(f);
        if (!this.a.isVirtual) {
            this.a.flushAutoRefresh();
        }
    };
    MultiColumnComboBoxView.prototype.b6 = function () {
        this.co();
        var a = this.f.e5;
        var b = this.au.length;
        var c = !stringIsNullOrEmpty(a) ? a.length : 0;
        if (this.x && !stringIsNullOrEmpty(this.au) && b > 0) {
            b--;
        }
        this.j.dd(b, c);
    };
    MultiColumnComboBoxView.prototype.b7 = function () {
        if (this.p) {
            this.p = false;
            this.a3();
        }
    };
    MultiColumnComboBoxView.prototype.b8 = function (a) {
        this.au = a;
        this.aa = !this.y;
        this.cb();
        this.ch();
    };
    MultiColumnComboBoxView.prototype.b9 = function () {
        if (stringIsNullOrEmpty(this.au)) {
            this.ay();
        }
        else {
            this.cg(0);
        }
        this.b6();
        this.w = false;
    };
    MultiColumnComboBoxView.prototype.ch = function () {
        if (this.ae != null && this.j != null) {
            if (this.g.a9 == false) {
                this.ae.setStyleProperty("display", "none");
            }
            else if ((this.g.cv != null && this.g.cv != "") || (this.j.cf != null && this.j.cf != "")) {
                this.ae.show();
            }
            else {
                this.ae.setStyleProperty("display", "none");
            }
        }
    };
    MultiColumnComboBoxView.prototype.a5 = function (a) {
        if (this.j != null) {
            this.j.disabled = !a;
        }
    };
    MultiColumnComboBoxView.prototype.ca = function () {
        var a = this.d;
        a.selectedItemsChanged = delegateRemove(a.selectedItemsChanged, runOn(this, this.bd));
        this.v = true;
        try {
            this.g.fy(this.au);
        }
        finally {
            this.v = false;
            var b = this.d;
            b.selectedItemsChanged = delegateCombine(b.selectedItemsChanged, runOn(this, this.bd));
        }
        this.w = false;
    };
    MultiColumnComboBoxView.prototype.cb = function () {
        var a = this.g.n();
        if (null == a) {
            return;
        }
        this.w = true;
        if (stringIsNullOrEmpty(this.au)) {
            if (null != a.eo) {
                this.aw(null);
            }
            else {
                this.ca();
            }
        }
        else {
            var b = new ColumnComparisonFilterCondition();
            b.e = 11;
            b.j = this.au;
            b.g = false;
            this.aw(b);
        }
    };
    MultiColumnComboBoxView.prototype.cc = function () {
        this.ap = 0;
        this.x = false;
    };
    MultiColumnComboBoxView.prototype.ce = function (a) {
        var b = this.b();
        var c = b.isPlaceholderItem(a);
        if (c) {
        }
        else {
            var d = this.e;
            if (a < 0) {
                this.s = false;
                d.ad.clear();
                if (!this.s) {
                    this.bc();
                }
                return;
            }
            d.selectedItemsChanged = delegateRemove(d.selectedItemsChanged, runOn(this, this.bd));
            try {
                d.ad.clear();
            }
            finally {
                d.selectedItemsChanged = delegateCombine(d.selectedItemsChanged, runOn(this, this.bd));
            }
            if (a >= 0) {
                var e = b.getItemAtIndex(a);
                this.s = false;
                d.ad.add1(e);
                if (!this.s) {
                    this.bc();
                }
            }
        }
    };
    MultiColumnComboBoxView.prototype.cg = function (a) {
        var b = this.e;
        if (-1 == a) {
            b.cw = null;
            return;
        }
        var c = b.cw;
        var d = new GridCellPosition();
        var e;
        if (null != c) {
            e = c.d;
        }
        else {
            if (b.actualColumns.count == 0) {
                this.ao = a;
                return;
            }
            var f = this.g;
            var g = this.g.n();
            e = g.h0();
        }
        d.d = e;
        d.b = a;
        this.r = false;
        b.cw = d;
        if (!this.r) {
            this.a8(b.cw);
        }
        this.cs();
    };
    MultiColumnComboBoxView.prototype.cj = function (a) {
        this.b5(2, a);
    };
    MultiColumnComboBoxView.prototype.ci = function (a) {
        this.b5(1, a);
    };
    MultiColumnComboBoxView.prototype.ck = function () {
        var a = this.g;
        if (null != this.k) {
            this.k.h = a.density;
            this.k.d = a.z;
            this.k.oy = a.gt;
            this.k.oz = a.gu;
            this.k.cu = a.bu;
            this.k.tj = a.hs;
            this.k.m3 = a.f4;
            this.k.h = a.ae;
            this.k.sq = a.gv;
            this.k.hc = a.bv;
            this.k.sr = a.gw;
            this.k.hd = a.bw;
            this.k.he = a.bx;
            this.k.ss = a.gx;
            this.k.hf = a.by;
            this.k.hg = a.bz;
            this.k.s7 = a.g2;
            this.k.h1 = a.b0;
            this.k.s8 = a.g3;
            this.k.h2 = a.b1;
            this.k.h3 = a.b2;
            this.k.h4 = a.b3;
        }
        if (null != this.j) {
            this.j.dt = a.g1;
            this.j.ac = a.ap;
            this.j.b7 = a.ez;
        }
        if (null != this.l) {
            this.l.text = a.eo;
            this.l.dc = a.gy;
            this.l.y = a.an;
        }
        if (null != this.am) {
            NativeUI.n(this.am, a.g0);
            NativeUI.j(this.am, a.gz);
            if (null != a.ao) {
                this.am.setStyleProperty("font", a.ao.fontString);
            }
            this.am.setRawText(a.actualNoMatchesFoundLabel);
            this.bo();
        }
        if (null != this.d) {
            this.d.fg = a.density;
            var b = a.columnHeadersVisible;
            this.d.k6 = b ? -1 : 0;
            this.d.lg = a.rowSeparatorsVisible ? 1 : 0;
        }
        if (null != this.af) {
            var c = a.dropDownButtonVisible;
            MultiColumnComboBoxUtilities.c(this.af, c);
        }
    };
    MultiColumnComboBoxView.prototype.co = function () {
        if (!this.v) {
            if (null != this.j) {
                var a = this.f.e5;
                this.j.cf = a;
            }
        }
    };
    MultiColumnComboBoxView.prototype.cl = function () {
        var a = this.n;
        var b = null != a ? a.t : false;
        this.i.svgPath = b ? MultiColumnComboBoxView.as : MultiColumnComboBoxView.at;
    };
    MultiColumnComboBoxView.prototype.cn = function () {
        var e_2, _a;
        var a = this.d.kk + 3;
        var b = this.d.kl + this.d.lg;
        var c = this.d.actualDataSource;
        var d = null != c ? c.actualCount : 0;
        if (d > 8) {
            d = 8;
        }
        var e = d * b;
        e += a;
        var f = stringFormat("{0}px", e);
        this.ag.setStyleProperty("height", f);
        var g = 0;
        try {
            for (var _b = tslib_1.__values(fromEnum(this.d.actualColumns)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var h = _c.value;
                var i = h.width;
                g += null != i ? i.f : 100;
            }
        }
        catch (e_2_1) {
            e_2 = { error: e_2_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_2)
                    throw e_2.error;
            }
        }
        g += 2;
        var j = stringFormat("{0}px", g);
        this.ag.setStyleProperty("width", j);
        if (null != this.am) {
            var k = this.g;
            var l = MultiColumnComboBoxUtilities.e(this.ad, k.actualNoMatchesFoundLabel, k.an);
            var m = l.width;
            var n = l.height;
            var o = stringFormat("{0}px", m);
            var p = stringFormat("{0}px", n);
            this.am.setStyleProperty("width", o);
            this.am.setStyleProperty("height", p);
        }
    };
    MultiColumnComboBoxView.prototype.cp = function () {
        if (this.w) {
            return;
        }
        this.au = null;
        var a = this.g.n();
        if (null != a) {
            var b = a.eo;
            if (null != b) {
                a.eo = null;
            }
            else {
                this.cq();
            }
        }
    };
    MultiColumnComboBoxView.prototype.cq = function () {
        var a = this.g;
        if (null != a.cv) {
            var b = this.g.cv;
            var c = typeCast(Array_$type, b) !== null ? b : [b];
            var d = this.b();
            var e = d.indexOfKey(c);
            if (-1 != e) {
                this.cg(e);
            }
        }
    };
    MultiColumnComboBoxView.prototype.cr = function () {
        var _this = this;
        if (null == this.d) {
            this.ac.getPortal(this.ag, "DataGrid", function (a) {
                _this.aq = a.componentRef;
                _this.aq.height = '100%';
                _this.aq.width = '100%';
                _this.d = (_this.aq.i);
                _this.ct();
                _this.d.dt = 1;
                _this.d.dr = 0;
                _this.d.ch = 1;
                _this.cm();
                _this.d.cf = 0;
                _this.d.hn = false;
                _this.d.he = false;
                _this.d.ts = new CornerRadius(0, 0);
                _this.d.g1 = false;
                var b = _this.d;
                b.activeCellChanged = delegateCombine(b.activeCellChanged, runOn(_this, _this.a7));
                var c = _this.d;
                c.selectedItemsChanged = delegateCombine(c.selectedItemsChanged, runOn(_this, _this.bd));
                var d = _this.d;
                d.cellClicked = delegateCombine(d.cellClicked, runOn(_this, _this.ba));
                var e = _this.d;
                e.sizeChanged = delegateCombine(e.sizeChanged, runOn(_this, _this.be));
                var f = _this.d;
                f.actualColumnsChanged = delegateCombine(f.actualColumnsChanged, runOn(_this, _this.a9));
                var g = _this.d;
                g.columnWidthChanged = delegateCombine(g.columnWidthChanged, runOn(_this, _this.bb));
                _this.ck();
            }, false);
        }
    };
    MultiColumnComboBoxView.prototype.cm = function () {
        if (this.d != null) {
            var a = 0;
            switch (this.f.v) {
                case 0:
                    a = 0;
                    break;
                case 1:
                    a = 1;
                    break;
                case 2:
                    a = 2;
                    break;
                case 3:
                    a = 3;
                    break;
                case 4:
                    a = 4;
                    break;
            }
            this.d.d0 = a;
        }
    };
    MultiColumnComboBoxView.prototype.cs = function () {
        if (!this.t) {
            return;
        }
        var a = this.d;
        var b = a.cw;
        if (null != b) {
            var c = this.b();
            if (null != c) {
                var d = c.getItemAtIndex(b.b);
                if (null == d) {
                    return;
                }
                a.it(d);
            }
        }
        else {
            a.s2(0);
        }
    };
    MultiColumnComboBoxView.prototype.ct = function () {
        if (null != this.aq) {
            var a = this.g;
            var b = a.itemsSource;
            this.d.ad.clear();
            if (this.d.actualDataSource != null) {
                var c = this.d.actualDataSource;
                c.schemaChanged = delegateRemove(c.schemaChanged, runOn(this, this.av));
            }
            this.aq.dataSource = b;
            this.aq.autoGenerateDesiredProperties = a.g;
            this.d.l = a.i();
            this.ao = -1;
            var d = this.b();
            if (null != d) {
                var e = d.updateNotifier;
                var f = new MultiColumnComboBoxDataSourceNotificationHandler(this, false);
                var g = new MultipleDataSourceNotifier(1, [e, f]);
                d.updateNotifier = g;
                d.propertiesRequested = a.f;
                d.schemaChanged = delegateCombine(d.schemaChanged, runOn(this, this.av));
                if (this.g.cv != null) {
                    this.b5(1, this.g.cv);
                }
            }
            this.a = null;
        }
    };
    MultiColumnComboBoxView.prototype.av = function (a, b) {
        if (this.ao != -1) {
            this.cg(this.ao);
            this.ao = -1;
        }
    };
    MultiColumnComboBoxView.prototype.cu = function () {
        if (null != this.aj) {
            var a = this.f.actualLabelVisible;
            if (a) {
                this.k.appendContentChild(this.aj);
                this.k.inputs.add(this.l);
            }
            else {
                this.k.mi(this.aj);
                this.k.inputs.remove(this.l);
            }
        }
    };
    MultiColumnComboBoxView.prototype.cf = function (a) {
        if (this.j != null) {
            this.j.disabled = !a;
        }
        if (this.k != null) {
            this.k.disabled = !a;
        }
    };
    MultiColumnComboBoxView.prototype.cv = function () {
        this.cn();
        if (!this.w) {
            this.z = false;
        }
        else {
            var a = this.b();
            this.z = a.actualCount == 0;
        }
        MultiColumnComboBoxUtilities.c(this.am, this.z);
        MultiColumnComboBoxUtilities.c(this.ag, !this.z);
    };
    MultiColumnComboBoxView.prototype.a6 = function () {
        if (this.j != null) {
            this.j.ck();
        }
    };
    MultiColumnComboBoxView.prototype.cd = function () {
        if (this.j != null) {
            this.j.db();
        }
    };
    Object.defineProperty(MultiColumnComboBoxView.prototype, "al", {
        get: function () {
            return this.ak;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBoxView.prototype, "g", {
        get: function () {
            return this.f;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBoxView.prototype, "ad", {
        get: function () {
            return this.ac;
        },
        enumerable: true,
        configurable: true
    });
    MultiColumnComboBoxView.prototype.cw = function () {
        if (null != this.al) {
            this.al.setStyleProperty("box-sizing", "border-box");
        }
    };
    MultiColumnComboBoxView.prototype.a2 = function (a) {
        var b = a.target;
        if (!this.u(b)) {
            this.by();
        }
    };
    MultiColumnComboBoxView.prototype.ax = function (a) {
        this.d.ad.clear();
        this.j.cf = "";
        this.g.cv = "";
        this.g.e5 = "";
        this.b8("");
    };
    MultiColumnComboBoxView.prototype.a4 = function (a) {
        var b = this.n;
        if (b.t) {
            this.az();
        }
        else {
            this.aw(null);
        }
        if (null != this.j) {
            this.j.ck();
            this.j.db();
        }
    };
    MultiColumnComboBoxView.prototype.a7 = function (a, b) {
        var c = b.newActiveCell;
        this.a8(c);
        this.r = true;
    };
    MultiColumnComboBoxView.prototype.a9 = function (a, b) {
        var e_3, _a;
        try {
            for (var _b = tslib_1.__values(fromEnum(b.columns)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var c = _c.value;
                if (null == c.width || c.width.c) {
                    c.width = ((function () {
                        var $ret = new ColumnWidth();
                        $ret.f = 100;
                        return $ret;
                    })());
                }
            }
        }
        catch (e_3_1) {
            e_3 = { error: e_3_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_3)
                    throw e_3.error;
            }
        }
        this.cp();
    };
    MultiColumnComboBoxView.prototype.ba = function (a, b) {
        if (typeCast(TextHeaderCellModel.$, b.cellInfo) !== null) {
            return;
        }
        this.bq();
    };
    MultiColumnComboBoxView.prototype.bb = function (a, b) {
        this.cn();
        this.bo();
    };
    MultiColumnComboBoxView.prototype.bd = function (a, b) {
        this.bc();
        this.s = true;
        this.ch();
    };
    MultiColumnComboBoxView.prototype.be = function (a, b) {
        this.t = b.b != 0 && b.a != 0;
        this.cs();
    };
    MultiColumnComboBoxView.prototype.bh = function (a, b) {
        if (b.isCompositionInProgress) {
            return;
        }
        var c = b.value;
        this.b8(c);
    };
    MultiColumnComboBoxView.prototype.bi = function (a, b) {
        var c = this.j.cf;
        this.b8(c);
    };
    MultiColumnComboBoxView.prototype.bj = function (a, b) {
        this.cc();
    };
    MultiColumnComboBoxView.prototype.bk = function (a, b) {
        var c = b.keyCode;
        this.ap = c;
        this.x = false;
        var d = b.modifiers;
        switch (c) {
            case 8:
                var e = this.j.selectionStart;
                if (0 == e) {
                    break;
                }
                var f = this.j.cf;
                if (stringIsNullOrEmpty(f)) {
                    break;
                }
                var g = f.length;
                var h = this.j.selectionEnd;
                var i = h - e;
                if (i > 0 && i < g && h == g) {
                    this.x = true;
                }
                break;
            case 40:
                if (d == 1) {
                    this.a3();
                    this.cp();
                    b.preventDefault();
                }
                else {
                    var j = this.e;
                    if (null == j) {
                        return;
                    }
                    var k = this.e.cw;
                    if (null != j.cw) {
                        this.d.h8(false, false);
                        b.preventDefault();
                    }
                    else {
                        var l = this.b();
                        if (null != l) {
                            var m = l.actualCount;
                            if (m > 0) {
                                this.cg(0);
                                b.preventDefault();
                            }
                        }
                    }
                }
                break;
            case 38:
                if (d == 1) {
                    this.az();
                    b.preventDefault();
                }
                else {
                    var n = this.e;
                    if (null == n) {
                        return;
                    }
                    var o = this.e.cw;
                    if (null != n.cw) {
                        this.d.ik(false, false);
                        b.preventDefault();
                    }
                    else {
                        var p = this.b();
                        if (null != p) {
                            var q = p.actualCount;
                            if (q > 0) {
                                this.cg(q - 1);
                                b.preventDefault();
                            }
                        }
                    }
                }
                break;
            case 13:
                if (this.n.t) {
                    b.stopPropagation();
                }
                this.bq();
                break;
            case 27:
                this.az();
                break;
        }
    };
    MultiColumnComboBoxView.prototype.bl = function (a, b) {
        if (false == this.o()) {
            this.j.db();
            b.handled = true;
        }
    };
    MultiColumnComboBoxView.prototype.bm = function (a) {
        this.j.ck();
        var b = (a.originalEvent.relatedTarget);
        if (!this.u(b)) {
            this.bx();
        }
    };
    MultiColumnComboBoxView.prototype.bn = function (a) {
        var b = (a.originalEvent.relatedTarget);
        if (!this.u(b)) {
            this.by();
        }
    };
    MultiColumnComboBoxView.prototype.cx = function (a) {
        var b = this.n;
        if (null == b || false == b.t) {
            return;
        }
        var c = this.cy();
        this.m.ar(c);
    };
    MultiColumnComboBoxView.$t = markType(MultiColumnComboBoxView, 'MultiColumnComboBoxView');
    MultiColumnComboBoxView.ar = "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z";
    MultiColumnComboBoxView.at = "M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z";
    MultiColumnComboBoxView.as = "M12 8l-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z";
    return MultiColumnComboBoxView;
}(Base));
export { MultiColumnComboBoxView };
/**
 * @hidden
 */
var MultiColumnComboBoxDataSourceNotificationHandler = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(MultiColumnComboBoxDataSourceNotificationHandler, _super);
    function MultiColumnComboBoxDataSourceNotificationHandler(a, b) {
        var _this = _super.call(this) || this;
        _this.a = null;
        _this.b = false;
        _this.a = a;
        _this.b = b;
        return _this;
    }
    MultiColumnComboBoxDataSourceNotificationHandler.prototype.rangeActualized = function (a, b) {
        if (!this.b) {
            this.a.bz(a, b);
        }
        else {
            this.a.bt(a, b);
        }
    };
    MultiColumnComboBoxDataSourceNotificationHandler.prototype.notifySetItem = function (a, b, c) {
        if (!this.b) {
            this.a.b4(a, b, c);
        }
        else {
            this.a.bw(a, b, c);
        }
    };
    MultiColumnComboBoxDataSourceNotificationHandler.prototype.notifyClearItems = function () {
        if (!this.b) {
            this.a.br();
        }
        else {
            this.a.bs();
        }
    };
    MultiColumnComboBoxDataSourceNotificationHandler.prototype.notifyInsertItem = function (a, b) {
        if (!this.b) {
            this.a.b0(a, b);
        }
        else {
            this.a.bu(a, b);
        }
    };
    MultiColumnComboBoxDataSourceNotificationHandler.prototype.notifyRemoveItem = function (a, b) {
        if (!this.b) {
            this.a.b2(a, b);
        }
        else {
            this.a.bv(a, b);
        }
    };
    MultiColumnComboBoxDataSourceNotificationHandler.$t = markType(MultiColumnComboBoxDataSourceNotificationHandler, 'MultiColumnComboBoxDataSourceNotificationHandler', Base.$, [IDataSourceUpdateNotifier_$type]);
    return MultiColumnComboBoxDataSourceNotificationHandler;
}(Base));
export { MultiColumnComboBoxDataSourceNotificationHandler };
/**
 * @hidden
 */
var MultiColumnComboBox = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(MultiColumnComboBox, _super);
    function MultiColumnComboBox() {
        var _this = _super.call(this) || this;
        _this.g9 = ThemeResolver.e(MultiColumnComboBox.y, InputGroup.r6, InputGroup.qq);
        _this.ha = ThemeResolver.e(MultiColumnComboBox.y, InputGroup.r7, InputGroup.qr);
        _this.b6 = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.gk, InputGroup.er);
        _this.hu = ThemeResolver.f(MultiColumnComboBox.y, InputGroup.tx, InputGroup.tr);
        _this.f6 = ThemeResolver.d(MultiColumnComboBox.y, InputGroup.nh, InputGroup.nb);
        _this.hb = ThemeResolver.e(MultiColumnComboBox.y, InputGroup.r8, InputGroup.qs);
        _this.b7 = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.gl, InputGroup.es);
        _this.hc = ThemeResolver.e(MultiColumnComboBox.y, InputGroup.sa, InputGroup.qu);
        _this.b8 = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.gm, InputGroup.et);
        _this.b9 = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.gn, InputGroup.eu);
        _this.hd = ThemeResolver.e(MultiColumnComboBox.y, InputGroup.sb, InputGroup.qv);
        _this.ca = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.go, InputGroup.ev);
        _this.cb = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.gp, InputGroup.ew);
        _this.he = ThemeResolver.e(MultiColumnComboBox.y, InputGroup.sc, InputGroup.qw);
        _this.cc = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.gq, InputGroup.ex);
        _this.hf = ThemeResolver.e(MultiColumnComboBox.y, InputGroup.sd, InputGroup.qx);
        _this.cd = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.gr, InputGroup.ey);
        _this.ce = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.gs, InputGroup.ez);
        _this.cf = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.gt, InputGroup.e0);
        _this.as = null;
        _this.t = null;
        _this.az = true;
        _this.c = null;
        _this.gi = null;
        _this.f7 = ThemeResolver.e(MultiColumnComboBox.y, InputGroup.rc, InputGroup.pw);
        _this.x = 0;
        _this.w = 1;
        _this.gj = null;
        _this.f8 = ThemeResolver.e(MultiColumnComboBox.y, InputGroup.rd, InputGroup.px);
        _this.bk = NaN;
        _this.ba = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.fu, InputGroup.d1);
        _this.a3 = true;
        _this.hr = new Thickness(1, NaN, NaN, NaN, NaN);
        _this.hq = ThemeResolver.f(MultiColumnComboBox.y, InputGroup.tv, InputGroup.tp);
        _this.f3 = new CornerRadius(1, NaN, NaN, NaN, NaN);
        _this.f2 = ThemeResolver.d(MultiColumnComboBox.y, InputGroup.nf, InputGroup.m9);
        _this.b = null;
        _this.ad = 0;
        _this.ac = 0;
        _this.a5 = true;
        _this.gk = null;
        _this.f9 = ThemeResolver.e(MultiColumnComboBox.y, InputGroup.ru, InputGroup.qe);
        _this.bl = NaN;
        _this.bb = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.f5, InputGroup.ec);
        _this.gl = null;
        _this.ga = ThemeResolver.e(MultiColumnComboBox.y, InputGroup.rw, InputGroup.qg);
        _this.bm = NaN;
        _this.bc = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.f6, InputGroup.ed);
        _this.bn = NaN;
        _this.bd = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.f7, InputGroup.ee);
        _this.gm = null;
        _this.gb = ThemeResolver.e(MultiColumnComboBox.y, InputGroup.rx, InputGroup.qh);
        _this.bo = NaN;
        _this.be = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.f8, InputGroup.ef);
        _this.bp = NaN;
        _this.bf = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.f9, InputGroup.eg);
        _this.cp = null;
        _this.eq = null;
        _this.gn = null;
        _this.gc = MultiColumnComboBox.g6;
        _this.ak = null;
        _this.ah = null;
        _this.a0 = false;
        _this.et = null;
        _this.dh = "No Matches Found";
        _this.go = null;
        _this.gd = MultiColumnComboBox.g7;
        _this.gp = null;
        _this.ge = MultiColumnComboBox.g8;
        _this.al = null;
        _this.ai = null;
        _this.e0 = "";
        _this.ay = true;
        _this.gq = MultiColumnComboBox.hg;
        _this.gf = MultiColumnComboBox.hg;
        _this.am = null;
        _this.aj = null;
        _this.gr = null;
        _this.gg = ThemeResolver.e(MultiColumnComboBox.y, InputGroup.se, InputGroup.qy);
        _this.bq = NaN;
        _this.bg = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.gu, InputGroup.e1);
        _this.gs = null;
        _this.gh = ThemeResolver.e(MultiColumnComboBox.y, InputGroup.sf, InputGroup.qz);
        _this.br = NaN;
        _this.bh = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.gv, InputGroup.e2);
        _this.bs = NaN;
        _this.bi = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.gw, InputGroup.e3);
        _this.bt = NaN;
        _this.bj = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.gx, InputGroup.e4);
        _this.ax = true;
        _this.u = 0;
        _this.cx = null;
        _this.cw = null;
        _this.d = null;
        _this.a = null;
        _this.cq = null;
        _this.a7 = false;
        _this.gotFocus = null;
        _this.lostFocus = null;
        _this.textChanged = null;
        _this.valueChanged = null;
        _this.propertyChanged = null;
        var a = _this.s();
        _this.t = a;
        a.bg(_this);
        return _this;
    }
    MultiColumnComboBox.prototype.s = function () {
        return new MultiColumnComboBoxView();
    };
    MultiColumnComboBox.prototype.fv = function (a, b, c) {
        switch (a) {
            case "BackgroundColor":
                this.gt = this.g4 != null ? this.g4 : this.g9;
                break;
            case "BorderColor":
                this.gu = this.g5 != null ? this.g5 : this.ha;
                break;
            case "BorderWidth":
                this.bu = !isNaN_(this.b4) ? this.b4 : this.b6;
                break;
            case "ContentPadding":
                this.hs = InputGroup.ti(this.ht, this.hu);
                break;
            case "CornerRadius":
                this.f4 = InputGroup.m2(this.f5, this.f6);
                break;
            case "FocusBorderColor":
                this.gv = this.hh != null ? this.hh : this.hb;
                break;
            case "FocusBorderWidth":
                this.bv = !isNaN_(this.cg) ? this.cg : this.b7;
                break;
            case "FocusUnderlineColor":
                this.gw = this.hi != null ? this.hi : this.hc;
                break;
            case "FocusUnderlineOpacity":
                this.bw = !isNaN_(this.ch) ? this.ch : this.b8;
                break;
            case "FocusUnderlineRippleOpacity":
                this.bx = !isNaN_(this.ci) ? this.ci : this.b9;
                break;
            case "HoverUnderlineColor":
                this.gx = this.hj != null ? this.hj : this.hd;
                break;
            case "HoverUnderlineOpacity":
                this.by = !isNaN_(this.cj) ? this.cj : this.ca;
                break;
            case "HoverUnderlineWidth":
                this.bz = !isNaN_(this.ck) ? this.ck : this.cb;
                break;
            case "ItemsSource":
            case "ValueField":
            case "DataSourceDesiredProperties":
            case "Fields":
                this.t.ct();
                break;
            case "LabelTextColor":
                this.gy = this.hk != null ? this.hk : MultiColumnComboBox.g6;
                break;
            case "LabelTextStyle":
                this.an = this.au != null ? this.au : MultiColumnComboBox.aq;
                break;
            case "NoMatchesFoundLabelTextColor":
                this.g0 = this.hm != null ? this.hm : MultiColumnComboBox.g8;
                break;
            case "NoMatchesFoundLabelBackgroundColor":
                this.gz = this.hl != null ? this.hl : MultiColumnComboBox.g7;
                break;
            case "NoMatchesFoundLabelTextStyle":
                this.ao = this.av != null ? this.av : MultiColumnComboBox.ar;
                break;
            case "UnderlineColor":
                this.g2 = this.ho != null ? this.ho : this.he;
                break;
            case "UnderlineOpacity":
                this.b0 = !isNaN_(this.cl) ? this.cl : this.cc;
                break;
            case "UnderlineRippleColor":
                this.g3 = this.hp != null ? this.hp : this.hf;
                break;
            case "UnderlineRippleOpacity":
                this.b1 = !isNaN_(this.cm) ? this.cm : this.cd;
                break;
            case "UnderlineRippleWidth":
                this.b2 = !isNaN_(this.cn) ? this.cn : this.ce;
                break;
            case "UnderlineWidth":
                this.b3 = !isNaN_(this.co) ? this.co : this.cf;
                break;
            case "BaseTheme":
                this.z = this.aa == 0 ? 1 : this.aa;
                break;
            case "Density":
                this.ae = this.density == 0 ? 0 : this.density;
                break;
            case "TextColor":
                this.g1 = this.hn != null ? this.hn : MultiColumnComboBox.hg;
                break;
            case "TextStyle":
                this.ap = this.aw != null ? this.aw : null;
                break;
            case "ActualDensity":
            case "ActualBaseTheme":
            case "ActualTextColor":
            case "ActualTextStyle":
            case "ActualBackgroundColor":
            case "ActualBorderColor":
            case "ActualBorderWidth":
            case "ActualContentPadding":
            case "ActualCornerRadius":
            case "ActualFocusBorderColor":
            case "ActualFocusBorderWidth":
            case "ActualFocusUnderlineColor":
            case "ActualFocusUnderlineOpacity":
            case "ActualFocusUnderlineRippleOpacity":
            case "ActualHoverUnderlineColor":
            case "ActualHoverUnderlineOpacity":
            case "ActualHoverUnderlineWidth":
            case "ActualLabelTextColor":
            case "ActualLabelTextStyle":
            case "ActualUnderlineColor":
            case "ActualUnderlineOpacity":
            case "ActualUnderlineRippleColor":
            case "ActualUnderlineRippleOpacity":
            case "ActualUnderlineRippleWidth":
            case "ActualUnderlineWidth":
            case "DropDownButtonVisible":
            case "ColumnHeadersVisible":
            case "RowSeparatorsVisible":
            case "ActualNoMatchesFoundLabel":
            case "ActualNoMatchesFoundLabelTextColor":
            case "ActualNoMatchesFoundLabelTextStyle":
            case MultiColumnComboBox.dj:
                this.t.ck();
                break;
            case "NoMatchesFoundLabel":
                this.actualNoMatchesFoundLabel = stringIsNullOrEmpty(this.eu) ? "No Matches Found" : this.eu;
                break;
            case "ActualLabelVisible":
                this.t.cu();
                break;
            case "Label":
            case "PlaceholderText":
                this.t.ck();
                this.actualLabelVisible = !stringIsNullOrEmpty(this.eq);
                break;
            case "Text":
                this.t.co();
                var d = b != null ? b.toString() : null;
                var e = c != null ? c.toString() : null;
                this.fs(new MultiColumnComboBoxTextChangedEventArgs(d, e));
                this.fu(1, e);
                break;
            case "Value":
                this.ft(new MultiColumnComboBoxValueChangedEventArgs(b, c));
                this.fu(0, c);
                break;
            case "ShowClearButton":
                this.t.ch();
                break;
            case "AllowFilter":
                this.t.a5(this.a2);
                break;
            case "SortMode":
                this.t.cm();
                break;
        }
    };
    MultiColumnComboBox.prototype.f1 = function () {
        this.t.cw();
    };
    Object.defineProperty(MultiColumnComboBox.prototype, "at", {
        get: function () {
            if (null == this.as) {
                this.as = new FontInfo();
                this.as.n = "'Segoe UI', Verdana";
                this.as.d = 16;
            }
            return this.as;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "a9", {
        get: function () {
            return this.az;
        },
        set: function (a) {
            var b = this.az;
            this.az = a;
            if (b != this.az) {
                this.fq("ShowClearButton", b, this.az);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "g", {
        get: function () {
            return this.c;
        },
        set: function (a) {
            var b = this.c;
            this.c = a;
            if (b != this.c) {
                this.fq("Fields", b, this.c);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "g4", {
        get: function () {
            return this.gi;
        },
        set: function (a) {
            var b = this.gi;
            this.gi = a;
            if (b != this.gi) {
                this.fq("BackgroundColor", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "gt", {
        get: function () {
            return this.f7;
        },
        set: function (a) {
            var b = this.f7;
            this.f7 = a;
            if (b != this.f7) {
                this.fq("ActualBackgroundColor", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "aa", {
        get: function () {
            return this.x;
        },
        set: function (a) {
            var b = this.x;
            this.x = a;
            if (b != this.x) {
                this.fq("BaseTheme", enumGetBox(BaseControlTheme_$type, b), enumGetBox(BaseControlTheme_$type, a));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "z", {
        get: function () {
            return this.w;
        },
        set: function (a) {
            var b = this.w;
            this.w = a;
            if (b != this.w) {
                this.fq("ActualBaseTheme", enumGetBox(BaseControlTheme_$type, b), enumGetBox(BaseControlTheme_$type, a));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "g5", {
        get: function () {
            return this.gj;
        },
        set: function (a) {
            var b = this.gj;
            this.gj = a;
            if (b != this.gj) {
                this.fq("BorderColor", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "gu", {
        get: function () {
            return this.f8;
        },
        set: function (a) {
            var b = this.f8;
            this.f8 = a;
            if (b != this.f8) {
                this.fq("ActualBorderColor", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "b4", {
        get: function () {
            return this.bk;
        },
        set: function (a) {
            var b = this.bk;
            this.bk = a;
            if (b != this.bk) {
                this.fq("BorderWidth", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "bu", {
        get: function () {
            return this.ba;
        },
        set: function (a) {
            var b = this.ba;
            this.ba = a;
            if (b != this.ba) {
                this.fq("ActualBorderWidth", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "columnHeadersVisible", {
        get: function () {
            return this.a3;
        },
        set: function (a) {
            var b = this.a3;
            this.a3 = a;
            if (b != this.a3) {
                this.fq("ColumnHeadersVisible", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "ht", {
        get: function () {
            return this.hr;
        },
        set: function (a) {
            var b = this.hr;
            this.hr = a;
            if (b != this.hr) {
                this.fq("ContentPadding", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "hs", {
        get: function () {
            return this.hq;
        },
        set: function (a) {
            var b = this.hq;
            this.hq = a;
            if (b != this.hq) {
                this.fq("ActualContentPadding", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "f5", {
        get: function () {
            return this.f3;
        },
        set: function (a) {
            var b = this.f3;
            this.f3 = a;
            if (b != this.f3) {
                this.fq("CornerRadius", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "f4", {
        get: function () {
            return this.f2;
        },
        set: function (a) {
            var b = this.f2;
            this.f2 = a;
            if (b != this.f2) {
                this.fq("ActualCornerRadius", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "f", {
        get: function () {
            return this.b;
        },
        set: function (a) {
            var b = this.b;
            this.b = a;
            if (b != this.b) {
                this.fq("DataSourceDesiredProperties", b, this.b);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "density", {
        get: function () {
            return this.ad;
        },
        set: function (a) {
            var b = this.ad;
            this.ad = a;
            if (b != this.ad) {
                this.fq("Density", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, a));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "ae", {
        get: function () {
            return this.ac;
        },
        set: function (a) {
            var b = this.ac;
            this.ac = a;
            if (b != this.ac) {
                this.fq("ActualDensity", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, a));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "dropDownButtonVisible", {
        get: function () {
            return this.a5;
        },
        set: function (a) {
            var b = this.a5;
            this.a5 = a;
            if (b != this.a5) {
                this.fq("DropDownButtonVisible", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "hh", {
        get: function () {
            return this.gk;
        },
        set: function (a) {
            var b = this.gk;
            this.gk = a;
            if (b != this.gk) {
                this.fq("FocusBorderColor", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "gv", {
        get: function () {
            return this.f9;
        },
        set: function (a) {
            var b = this.f9;
            this.f9 = a;
            if (b != this.f9) {
                this.fq("ActualFocusBorderColor", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "cg", {
        get: function () {
            return this.bl;
        },
        set: function (a) {
            var b = this.bl;
            this.bl = a;
            if (b != this.bl) {
                this.fq("FocusBorderWidth", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "bv", {
        get: function () {
            return this.bb;
        },
        set: function (a) {
            var b = this.bb;
            this.bb = a;
            if (b != this.bb) {
                this.fq("ActualFocusBorderWidth", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "hi", {
        get: function () {
            return this.gl;
        },
        set: function (a) {
            var b = this.gl;
            this.gl = a;
            if (b != this.gl) {
                this.fq("FocusUnderlineColor", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "gw", {
        get: function () {
            return this.ga;
        },
        set: function (a) {
            var b = this.ga;
            this.gl = a;
            if (b != this.ga) {
                this.fq("ActualFocusUnderlineColor", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "ch", {
        get: function () {
            return this.bm;
        },
        set: function (a) {
            var b = this.bm;
            this.bm = a;
            if (b != this.bm) {
                this.fq("FocusUnderlineOpacity", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "bw", {
        get: function () {
            return this.bc;
        },
        set: function (a) {
            var b = this.bc;
            this.bc = a;
            if (b != this.bc) {
                this.fq("ActualFocusUnderlineOpacity", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "ci", {
        get: function () {
            return this.bn;
        },
        set: function (a) {
            var b = this.bn;
            this.bn = a;
            if (b != this.bn) {
                this.fq("FocusUnderlineRippleOpacity", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "bx", {
        get: function () {
            return this.bd;
        },
        set: function (a) {
            var b = this.bd;
            this.bd = a;
            if (b != this.bd) {
                this.fq("ActualFocusUnderlineRippleOpacity", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "hj", {
        get: function () {
            return this.gm;
        },
        set: function (a) {
            var b = this.gm;
            this.gm = a;
            if (b != this.gm) {
                this.fq("HoverUnderlineColor", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "gx", {
        get: function () {
            return this.gb;
        },
        set: function (a) {
            var b = this.gb;
            this.gb = a;
            if (b != this.gb) {
                this.fq("ActualHoverUnderlineColor", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "cj", {
        get: function () {
            return this.bo;
        },
        set: function (a) {
            var b = this.bo;
            this.bo = a;
            if (b != this.bo) {
                this.fq("HoverUnderlineOpacity", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "by", {
        get: function () {
            return this.be;
        },
        set: function (a) {
            var b = this.be;
            this.be = a;
            if (b != this.be) {
                this.fq("ActualHoverUnderlineOpacity", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "ck", {
        get: function () {
            return this.bp;
        },
        set: function (a) {
            var b = this.bp;
            this.bp = a;
            if (b != this.bp) {
                this.fq("HoverUnderlineWidth", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "bz", {
        get: function () {
            return this.bf;
        },
        set: function (a) {
            var b = this.bf;
            this.bf = a;
            if (b != this.bf) {
                this.fq("ActualHoverUnderlineWidth", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "itemsSource", {
        get: function () {
            return this.cp;
        },
        set: function (a) {
            var b = this.cp;
            this.cp = a;
            if (b != this.cp) {
                this.fq("ItemsSource", b, this.cp);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "actualDataSource", {
        get: function () {
            return this.t.b();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "eo", {
        get: function () {
            return this.eq;
        },
        set: function (a) {
            var b = this.eo;
            if (0 == StringComparer.b.compare(a, b)) {
                return;
            }
            this.eq = a;
            this.fq("Label", b, this.eq);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "hk", {
        get: function () {
            return this.gn;
        },
        set: function (a) {
            var b = this.gn;
            this.gn = a;
            if (b != this.gn) {
                this.fq("LabelTextColor", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "gy", {
        get: function () {
            return this.gc;
        },
        set: function (a) {
            var b = this.gc;
            this.gc = a;
            if (b != this.gc) {
                this.fq("ActualLabelTextColor", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "au", {
        get: function () {
            return this.ak;
        },
        set: function (a) {
            var b = this.ak;
            this.ak = a;
            if (b != this.ak) {
                this.fq("LabelTextStyle", b, this.ak);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "an", {
        get: function () {
            return this.ah;
        },
        set: function (a) {
            var b = this.ah;
            this.ah = a;
            if (this.ah != b) {
                this.fq("ActualLabelTextStyle", b, this.ah);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "actualLabelVisible", {
        get: function () {
            return this.a0;
        },
        set: function (a) {
            var b = this.a0;
            this.a0 = a;
            if (b != this.a0) {
                this.fq("ActualLabelVisible", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "eu", {
        get: function () {
            return this.et;
        },
        set: function (a) {
            var b = this.et;
            if (0 == StringComparer.b.compare(a, b)) {
                return;
            }
            this.et = a;
            this.fq("NoMatchesFoundLabel", b, this.et);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "actualNoMatchesFoundLabel", {
        get: function () {
            return this.dh;
        },
        set: function (a) {
            var b = this.dh;
            this.dh = a;
            if (b != this.dh) {
                this.fq("ActualNoMatchesFoundLabel", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "hl", {
        get: function () {
            return this.go;
        },
        set: function (a) {
            var b = this.go;
            this.go = a;
            if (b != this.go) {
                this.fq("NoMatchesFoundLabelBackgroundColor", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "gz", {
        get: function () {
            return this.gd;
        },
        set: function (a) {
            var b = this.gd;
            this.gd = a;
            if (b != this.gd) {
                this.fq(MultiColumnComboBox.dj, b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "hm", {
        get: function () {
            return this.gp;
        },
        set: function (a) {
            var b = this.gp;
            this.gp = a;
            if (b != this.gp) {
                this.fq("NoMatchesFoundLabelTextColor", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "g0", {
        get: function () {
            return this.ge;
        },
        set: function (a) {
            var b = this.ge;
            this.ge = a;
            if (b != this.ge) {
                this.fq("ActualNoMatchesFoundLabelTextColor", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "av", {
        get: function () {
            return this.al;
        },
        set: function (a) {
            var b = this.al;
            this.al = a;
            if (b != this.al) {
                this.fq("NoMatchesFoundLabelTextStyle", b, this.al);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "ao", {
        get: function () {
            return this.ai;
        },
        set: function (a) {
            var b = this.ai;
            this.ai = a;
            if (this.ai != b) {
                this.fq("ActualNoMatchesFoundLabelTextStyle", b, this.ai);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "ez", {
        get: function () {
            return this.e0;
        },
        set: function (a) {
            var b = this.ez;
            if (0 == StringComparer.b.compare(a, b)) {
                return;
            }
            this.e0 = a;
            this.fq("PlaceholderText", b, this.e0);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "rowSeparatorsVisible", {
        get: function () {
            return this.ay;
        },
        set: function (a) {
            var b = this.ay;
            this.ay = a;
            if (b != this.ay) {
                this.fq("RowSeparatorsVisible", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "hn", {
        get: function () {
            return this.gq;
        },
        set: function (a) {
            var b = this.gq;
            this.gq = a;
            if (b != this.gq) {
                this.fq("TextColor", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "g1", {
        get: function () {
            return this.gf;
        },
        set: function (a) {
            var b = this.gf;
            this.gf = a;
            if (b != this.gf) {
                this.fq("ActualTextColor", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "aw", {
        get: function () {
            return this.am;
        },
        set: function (a) {
            var b = this.am;
            this.am = a;
            if (b != this.am) {
                this.fq("TextStyle", b, this.am);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "ap", {
        get: function () {
            return this.aj;
        },
        set: function (a) {
            var b = this.aj;
            this.aj = a;
            if (this.aj != b) {
                this.fq("ActualTextStyle", b, this.aj);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "ho", {
        get: function () {
            return this.gr;
        },
        set: function (a) {
            var b = this.gr;
            this.gr = a;
            if (b != this.gr) {
                this.fq("UnderlineColor", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "g2", {
        get: function () {
            return this.gg;
        },
        set: function (a) {
            var b = this.gg;
            this.gg = a;
            if (b != this.gg) {
                this.fq("ActualUnderlineColor", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "cl", {
        get: function () {
            return this.bq;
        },
        set: function (a) {
            var b = this.bq;
            this.bq = a;
            if (b != this.bq) {
                this.fq("UnderlineOpacity", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "b0", {
        get: function () {
            return this.bg;
        },
        set: function (a) {
            var b = this.bg;
            this.bg = a;
            if (b != this.bg) {
                this.fq("ActualUnderlineOpacity", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "hp", {
        get: function () {
            return this.gs;
        },
        set: function (a) {
            var b = this.gs;
            this.gs = a;
            if (b != this.gs) {
                this.fq("UnderlineRippleColor", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "g3", {
        get: function () {
            return this.gh;
        },
        set: function (a) {
            var b = this.gh;
            this.gh = a;
            if (b != this.gh) {
                this.fq("ActualUnderlineRippleColor", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "cm", {
        get: function () {
            return this.br;
        },
        set: function (a) {
            var b = this.br;
            this.br = a;
            if (b != this.br) {
                this.fq("UnderlineRippleOpacity", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "b1", {
        get: function () {
            return this.bh;
        },
        set: function (a) {
            var b = this.bh;
            this.bh = a;
            if (b != this.bh) {
                this.fq("ActualUnderlineRippleOpacity", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "cn", {
        get: function () {
            return this.bs;
        },
        set: function (a) {
            var b = this.bs;
            this.bs = a;
            if (b != this.bs) {
                this.fq("UnderlineRippleWidth", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "b2", {
        get: function () {
            return this.bi;
        },
        set: function (a) {
            var b = this.bi;
            this.bi = a;
            if (b != this.bi) {
                this.fq("ActualUnderlineRippleWidth", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "co", {
        get: function () {
            return this.bt;
        },
        set: function (a) {
            var b = this.bt;
            this.bt = a;
            if (b != this.bt) {
                this.fq("UnderlineWidth", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "b3", {
        get: function () {
            return this.bj;
        },
        set: function (a) {
            var b = this.bj;
            this.bj = a;
            if (b != this.bj) {
                this.fq("ActualUnderlineWidth", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "a2", {
        get: function () {
            return this.ax;
        },
        set: function (a) {
            var b = this.ax;
            this.ax = a;
            if (b != this.ax) {
                this.fq("AllowFilter", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "v", {
        get: function () {
            return this.u;
        },
        set: function (a) {
            var b = this.u;
            this.u = a;
            if (b != this.u) {
                this.fq("SortMode", enumGetBox(SortMode_$type, b), enumGetBox(SortMode_$type, this.u));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "e7", {
        get: function () {
            return this.cx;
        },
        set: function (a) {
            var b = this.cx;
            this.cx = a;
            if (b != this.cx) {
                this.fq("TextField", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "e5", {
        get: function () {
            return this.cw;
        },
        set: function (a) {
            var b = this.cw;
            this.cw = a;
            if (b != this.cw) {
                this.fq("Text", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "j", {
        get: function () {
            return this.d;
        },
        set: function (a) {
            var b = this.d;
            this.d = a;
            if (b != this.d) {
                this.fq("ValueField", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "e", {
        get: function () {
            return this.a;
        },
        set: function (a) {
            var b = this.a;
            this.a = a;
            if (b != this.a) {
                this.fq("ActualValueField", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiColumnComboBox.prototype, "cv", {
        get: function () {
            return this.cq;
        },
        set: function (a) {
            var b = this.cq;
            this.cq = a;
            if (b != this.cq) {
                this.fq("Value", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    MultiColumnComboBox.prototype.cs = function (a, b) {
        var c = new FastReflectionHelper(false, b);
        return c.getPropertyValue(a);
    };
    MultiColumnComboBox.prototype.n = function () {
        var a = this.ej();
        return this.m(a);
    };
    MultiColumnComboBox.prototype.ej = function () {
        return this.ei(this.e7);
    };
    MultiColumnComboBox.prototype.ct = function (a) {
        var b = this.i();
        if (null == b || b.length == 0) {
            return null;
        }
        var c = new List$1(Base.$, 0);
        for (var e = 0; e < b.length; e++) {
            var d = b[e];
            var f = this.cs(a, d);
            c.add1(f);
        }
        if (c.count == 1) {
            return c._inner[0];
        }
        return c.toArray();
    };
    MultiColumnComboBox.prototype.eh = function (a) {
        var b = this.ej();
        var c;
        if (null != b) {
            var d = this.cs(a, b);
            c = null != d ? d.toString() : null;
        }
        else {
            c = null;
        }
        return c;
    };
    MultiColumnComboBox.prototype.m = function (a) {
        var e_4, _a;
        var b = this.t.e;
        if (null == b) {
            return null;
        }
        var c = b.actualColumns;
        if (null == c || 0 == c.count) {
            return null;
        }
        if (stringIsNullOrEmpty(a)) {
            return c._inner[0];
        }
        try {
            for (var _b = tslib_1.__values(fromEnum(c)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var d = _c.value;
                if (0 == StringComparer.b.compare(d.hy, a)) {
                    return d;
                }
            }
        }
        catch (e_4_1) {
            e_4 = { error: e_4_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_4)
                    throw e_4.error;
            }
        }
        return null;
    };
    MultiColumnComboBox.prototype.ei = function (a) {
        if (stringIsNullOrEmpty(a)) {
            var b = this.actualDataSource;
            if (null == b) {
                return null;
            }
            var c = b.actualSchema;
            if (null == c) {
                return null;
            }
            var d = c.propertyNames;
            if (0 == d.length) {
                return null;
            }
            return d[0];
        }
        return a;
    };
    MultiColumnComboBox.prototype.h = function (a) {
        var b = new List$1(String_$type, 0);
        if (null == a || a.length == 0) {
            var c = this.ei(null);
            if (stringIsNullOrEmpty(c)) {
                return null;
            }
            b.add(c);
            return b.toArray();
        }
        for (var e = 0; e < a.length; e++) {
            var d = a[e];
            var f = this.ei(d);
            if (null != f) {
                b.add(f);
            }
        }
        if (b.count > 0) {
            return b.toArray();
        }
        return null;
    };
    MultiColumnComboBox.prototype.i = function () {
        var a = this.j;
        return this.h(a);
    };
    MultiColumnComboBox.prototype.fr = function (a) {
        this.fu(2, a);
    };
    MultiColumnComboBox.prototype.fu = function (a, b) {
        if (this.a7) {
            return;
        }
        this.a7 = true;
        try {
            switch (a) {
                case 2:
                    {
                        var c = b;
                        var d = void 0;
                        var e = void 0;
                        if (null != c) {
                            d = this.eh(c);
                            e = this.ct(c);
                        }
                        else {
                            d = stringEmpty();
                            e = null;
                        }
                        if (this.e5 != d) {
                            this.e5 = d;
                        }
                        if (this.cv != e) {
                            this.cv = e;
                        }
                    }
                    break;
                case 1:
                    this.t.cj(b.toString());
                    break;
                case 0:
                    this.t.ci(b);
                    break;
            }
        }
        finally {
            this.a7 = false;
        }
        this.t.ch();
    };
    MultiColumnComboBox.prototype.fy = function (a) {
        this.e5 = a;
    };
    MultiColumnComboBox.prototype.f0 = function () {
        this.ap = (null == this.aw) ? this.at : this.aw;
    };
    MultiColumnComboBox.prototype.fz = function () {
    };
    MultiColumnComboBox.prototype.closeUp = function () {
        this.t.az();
    };
    MultiColumnComboBox.prototype.destroy = function () {
        this.provideRenderer(null);
    };
    MultiColumnComboBox.prototype.dropDown = function () {
        this.t.a3();
    };
    MultiColumnComboBox.prototype.focus = function () {
        this.t.a6();
    };
    MultiColumnComboBox.prototype.select = function () {
        this.t.cd();
    };
    MultiColumnComboBox.prototype.notifySizeChanged = function () {
        this.t.bp();
    };
    MultiColumnComboBox.prototype.provideRenderer = function (a) {
        this.t.b3(a);
    };
    MultiColumnComboBox.prototype.cr = function () {
        return this.l();
    };
    MultiColumnComboBox.prototype.ea = function () {
        var a = this.l();
        return a.am();
    };
    MultiColumnComboBox.prototype.l = function () {
        var a = new MultiColumnComboVisualModelExport();
        a.a = AppearanceHelper.a(this.gt);
        a.j = this.z;
        a.b = AppearanceHelper.a(this.gu);
        a.p = this.bu;
        a.columnHeadersVisible = this.columnHeadersVisible;
        a.au = this.hs;
        a.at = this.f4;
        a.k = this.ae;
        a.dropDownButtonVisible = this.dropDownButtonVisible;
        a.q = this.bw;
        a.aa = this.eo;
        a.c = AppearanceHelper.a(this.gy);
        a.actualLabelVisible = this.actualLabelVisible;
        a.actualNoMatchesFoundLabel = this.actualNoMatchesFoundLabel;
        a.d = AppearanceHelper.a(this.gz);
        a.e = AppearanceHelper.a(this.g0);
        a.al = this.ez;
        a.rowSeparatorsVisible = this.rowSeparatorsVisible;
        a.f = AppearanceHelper.a(this.g1);
        a.g = AppearanceHelper.a(this.g2);
        a.r = this.b0;
        a.h = AppearanceHelper.a(this.g3);
        a.s = this.b1;
        a.t = this.b2;
        a.u = this.b3;
        a.an = this.e5;
        a.y = this.cv;
        a.i = this.t.e.lp();
        if (this.an != null) {
            var b = this.an;
            if (this.t != null && b.n == null) {
                var c = this.t.ad;
                var d = FontUtil.getFontInfoFromString(c, b.fontString);
                b.n = d.n;
                b.d = d.d;
                b.o = d.o;
                b.q = d.q;
                b.r = d.r;
                b.s = d.s;
            }
            if (b.n != null) {
                a.ab = b.n;
            }
            if (!isNaN_(b.d)) {
                a.v = b.d;
            }
            if (b.s != null) {
                a.af = b.s;
            }
            if (b.q != null) {
                a.ad = b.q;
            }
            if (b.o != null) {
                a.ac = b.q;
            }
        }
        if (this.ao != null) {
            var e = this.ao;
            if (this.t != null && e.n == null) {
                var f = this.t.ad;
                var g = FontUtil.getFontInfoFromString(f, e.fontString);
                e.n = g.n;
                e.d = g.d;
                e.o = g.o;
                e.q = g.q;
                e.r = g.r;
                e.s = g.s;
            }
            if (e.n != null) {
                a.ag = e.n;
            }
            if (!isNaN_(e.d)) {
                a.w = e.d;
            }
            if (e.s != null) {
                a.ak = e.s;
            }
            if (e.q != null) {
                a.ai = e.q;
            }
            if (e.o != null) {
                a.ah = e.q;
            }
        }
        if (this.ap != null) {
            var h = this.ap;
            if (this.t != null && h.n == null) {
                var i = this.t.ad;
                var j = FontUtil.getFontInfoFromString(i, h.fontString);
                h.n = j.n;
                h.d = j.d;
                h.o = j.o;
                h.q = j.q;
                h.r = j.r;
                h.s = j.s;
            }
            if (h.n != null) {
                a.ao = h.n;
            }
            if (!isNaN_(h.d)) {
                a.x = h.d;
            }
            if (h.s != null) {
                a.as = h.s;
            }
            if (h.q != null) {
                a.aq = h.q;
            }
            if (h.o != null) {
                a.ap = h.q;
            }
        }
        return a;
    };
    MultiColumnComboBox.prototype.fo = function (a) {
        if (null != this.gotFocus) {
            this.gotFocus(this, a);
        }
    };
    MultiColumnComboBox.prototype.fp = function (a) {
        if (null != this.lostFocus) {
            this.lostFocus(this, a);
        }
    };
    MultiColumnComboBox.prototype.fs = function (a) {
        if (null != this.textChanged) {
            this.textChanged(this, a);
        }
    };
    MultiColumnComboBox.prototype.ft = function (a) {
        if (null != this.valueChanged) {
            this.valueChanged(this, a);
        }
    };
    MultiColumnComboBox.prototype.fq = function (a, b, c) {
        if (this.propertyChanged != null) {
            this.propertyChanged(this, new PropertyChangedEventArgs(a));
        }
        this.fv(a, b, c);
    };
    MultiColumnComboBox.$t = markType(MultiColumnComboBox, 'MultiColumnComboBox', Base.$, [INotifyPropertyChanged_$type]);
    MultiColumnComboBox.y = 1;
    MultiColumnComboBox.g6 = ThemeResolver.e(MultiColumnComboBox.y, Label.c7, Label.c0);
    MultiColumnComboBox.g8 = ThemeResolver.e(MultiColumnComboBox.y, Label.c7, Label.c0);
    MultiColumnComboBox.g7 = BrushUtil.g(255, 255, 255, 255);
    MultiColumnComboBox.aq = null;
    MultiColumnComboBox.dj = "ActualNoMatchesFoundLabelBackgroundColor";
    MultiColumnComboBox.ar = null;
    MultiColumnComboBox.hg = BrushUtil.g(221, 0, 0, 0);
    return MultiColumnComboBox;
}(Base));
export { MultiColumnComboBox };
//# sourceMappingURL=MultiColumnComboBoxView_combined.js.map
