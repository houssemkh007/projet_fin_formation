import * as tslib_1 from "tslib";
import { IgrCellInfo } from "./igr-cell-info";
import { NumericCellModel as NumericCellModel_internal } from "./NumericCellModel";
import { ensureBool, arrayFindByName } from "igniteui-react-core";
/**
 * Backing information for a numeric cell in the grid.
*/
var IgrNumericCellInfo = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(IgrNumericCellInfo, _super);
    function IgrNumericCellInfo() {
        return _super.call(this) || this;
    }
    IgrNumericCellInfo.prototype.createImplementation = function () {
        return new NumericCellModel_internal();
    };
    Object.defineProperty(IgrNumericCellInfo.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrNumericCellInfo.prototype, "numericValue", {
        /**
         * Sets or gets the numeric value to use for the cell.
        */
        get: function () {
            return this.i.kz;
        },
        set: function (v) {
            this.i.kz = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrNumericCellInfo.prototype, "hasDecimalValue", {
        /**
         * Sets or gets whether there is a decimal numeric value to use for the cell.
        */
        get: function () {
            return this.i.kv;
        },
        set: function (v) {
            this.i.kv = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrNumericCellInfo.prototype, "formatStringOverride", {
        /**
         * The format string to apply to the value
        */
        get: function () {
            return this.i.lt;
        },
        set: function (v) {
            this.i.lt = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrNumericCellInfo.prototype, "formatSpecifiers", {
        get: function () {
            return this.i.kr;
        },
        set: function (v) {
            this.i.kr = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrNumericCellInfo.prototype, "formatOverride", {
        /**
         * The format options to apply to the value
        */
        get: function () {
            return this.i.ll;
        },
        set: function (v) {
            this.i.ll = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrNumericCellInfo.prototype, "negativePrefix", {
        /**
         * Sets or gets the text prepended to a negative numeric value
        */
        get: function () {
            return this.i.lz;
        },
        set: function (v) {
            this.i.lz = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrNumericCellInfo.prototype, "positivePrefix", {
        /**
         * Sets or gets the text prepended to a positive numeric value
        */
        get: function () {
            return this.i.l4;
        },
        set: function (v) {
            this.i.l4 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrNumericCellInfo.prototype, "negativeSuffix", {
        /**
         * Sets or gets the text appended to a negative numeric value
        */
        get: function () {
            return this.i.l1;
        },
        set: function (v) {
            this.i.l1 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrNumericCellInfo.prototype, "positiveSuffix", {
        /**
         * Sets or gets the text appended to a positive numeric value
        */
        get: function () {
            return this.i.l6;
        },
        set: function (v) {
            this.i.l6 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrNumericCellInfo.prototype, "maxFractionDigits", {
        /**
         * The maximum number of decimal places to display when formatting
        */
        get: function () {
            return this.i.k7;
        },
        set: function (v) {
            this.i.k7 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrNumericCellInfo.prototype, "minFractionDigits", {
        /**
         * The minimum number of decimal places to display when formatting
        */
        get: function () {
            return this.i.k9;
        },
        set: function (v) {
            this.i.k9 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrNumericCellInfo.prototype, "minIntegerDigits", {
        /**
         * The minimum number of integer digits to display when formatting
        */
        get: function () {
            return this.i.lb;
        },
        set: function (v) {
            this.i.lb = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrNumericCellInfo.prototype, "showGroupingSeparator", {
        /**
         * Sets or gets if the grouping separator is shown
        */
        get: function () {
            return this.i.kx;
        },
        set: function (v) {
            this.i.kx = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    IgrNumericCellInfo.prototype.findByName = function (name) {
        var baseResult = _super.prototype.findByName.call(this, name);
        if (baseResult) {
            return baseResult;
        }
        if (this.formatSpecifiers != null && arrayFindByName(this.formatSpecifiers, name)) {
            return arrayFindByName(this.formatSpecifiers, name);
        }
        return null;
    };
    return IgrNumericCellInfo;
}(IgrCellInfo));
export { IgrNumericCellInfo };
//# sourceMappingURL=igr-numeric-cell-info.js.map
