/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { CanvasGridCellBase } from "./CanvasGridCellBase";
import { Base, markType } from "igniteui-react-core";
/**
 * @hidden
 */
var CanvasImageCell = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(CanvasImageCell, _super);
    function CanvasImageCell(a) {
        var _this = _super.call(this, a) || this;
        _this.c3 = 1;
        _this.c4 = 3;
        _this.c8 = null;
        _this.c5 = 1;
        _this.c7 = null;
        _this.c7 = a.createElement("img");
        return _this;
    }
    Object.defineProperty(CanvasImageCell.prototype, "c6", {
        get: function () {
            return this.c5;
        },
        set: function (a) {
            this.c5 = a;
        },
        enumerable: true,
        configurable: true
    });
    CanvasImageCell.prototype.db = function (a, b) {
        this.c9();
        this.c7.setRawStyleProperty("opacity", "0");
        if (a == null || a.length == 0) {
            this.da(this.c7);
            return;
        }
        if (Base.equalsStatic(a, this.c8)) {
            return;
        }
        this.de(a, b);
    };
    CanvasImageCell.prototype.da = function (a) {
        a.setAttribute("src", "");
    };
    CanvasImageCell.prototype.de = function (a, b) {
        this.c8 = a;
        this.c7.setAttribute("src", a);
    };
    CanvasImageCell.prototype.c9 = function () {
        this.da(this.c7);
        this.c8 = "";
    };
    CanvasImageCell.prototype.dc = function (a) {
        this.y = true;
        this.c3 = a;
    };
    CanvasImageCell.prototype.dd = function (a) {
        this.y = true;
        this.c4 = a;
    };
    CanvasImageCell.prototype.get_aa = function () {
        return true;
    };
    CanvasImageCell.$t = markType(CanvasImageCell, 'CanvasImageCell', CanvasGridCellBase.$);
    return CanvasImageCell;
}(CanvasGridCellBase));
export { CanvasImageCell };
//# sourceMappingURL=CanvasImageCell.js.map
