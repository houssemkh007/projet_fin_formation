/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { Base, enumGetBox, markType } from "igniteui-react-core";
import { FixedCellPositions_$type } from "./FixedCellPositions";
/**
 * @hidden
 */
var RowPath = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(RowPath, _super);
    function RowPath(a, b) {
        var _this = _super.call(this) || this;
        _this.n = 0;
        _this.m = 0;
        _this.a = 0;
        _this.c = 0;
        _this.l = -1;
        _this.e = false;
        _this.k = -1;
        _this.b = 0;
        _this.d = 0;
        _this.n = a;
        _this.m = b;
        _this.ac();
        return _this;
    }
    Object.defineProperty(RowPath.prototype, "x", {
        get: function () {
            return this.n;
        },
        set: function (a) {
            this.n = a;
            this.ac();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RowPath.prototype, "w", {
        get: function () {
            return this.m;
        },
        set: function (a) {
            this.m = a;
            this.ac();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RowPath.prototype, "b", {
        get: function () {
            return this.a;
        },
        set: function (a) {
            this.a = a;
            this.ac();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RowPath.prototype, "d", {
        get: function () {
            return this.c;
        },
        set: function (a) {
            this.c = a;
            this.ac();
        },
        enumerable: true,
        configurable: true
    });
    RowPath.prototype.ac = function () {
        this.l = (this.n * 1000000) + this.m;
    };
    RowPath.prototype.getHashCode = function () {
        return this.l;
    };
    RowPath.prototype.equals = function (a) {
        var b = a;
        if (this.a != b.a) {
            return false;
        }
        if (this.n != b.n) {
            return false;
        }
        if (this.m != b.m) {
            return false;
        }
        return true;
    };
    RowPath.prototype.toString = function () {
        return "F" + enumGetBox(FixedCellPositions_$type, this.a) + "." + this.n + "." + this.m;
    };
    Object.defineProperty(RowPath.prototype, "g", {
        get: function () {
            return ((this.m == -100 || this.m == -101) && this.n == -100);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RowPath.prototype, "h", {
        get: function () {
            return this.m == -101;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RowPath.prototype, "j", {
        get: function () {
            return (this.m == -200 || this.m == -201);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RowPath.prototype, "i", {
        get: function () {
            return this.e;
        },
        set: function (a) {
            this.e = a;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RowPath.prototype, "o", {
        get: function () {
            return this.k;
        },
        set: function (a) {
            this.k = a;
        },
        enumerable: true,
        configurable: true
    });
    RowPath.prototype.aa = function () {
        var a = new RowPath(this.x, this.w);
        a.b = this.b;
        a.i = this.i;
        a.o = this.o;
        return a;
    };
    RowPath.$t = markType(RowPath, 'RowPath');
    return RowPath;
}(Base));
export { RowPath };
//# sourceMappingURL=RowPath.js.map
