import * as tslib_1 from "tslib";
import * as React from 'react';
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { CellContentHorizontalAlignment_$type } from "./CellContentHorizontalAlignment";
import { CellContentVerticalAlignment_$type } from "./CellContentVerticalAlignment";
import { TextCellLineBreakMode_$type } from "./TextCellLineBreakMode";
import { IgrDataBindingEventArgs } from "./igr-data-binding-event-args";
import { IgrCellStyleRequestedEventArgs } from "./igr-cell-style-requested-event-args";
import { getModifiedProps, isValidProp, brushToString, stringToBrush, ensureEnum, initializePropertiesFromCss, NamePatcher, toSpinal } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
import { ColumnPropertyUpdatingAnimationMode } from './ColumnPropertyUpdatingAnimationMode';
import { TypeRegistrar } from "igniteui-react-core";
/**
 * Base class for various definition types for the grid.
*/
var IgrDefinitionBase = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(IgrDefinitionBase, _super);
    function IgrDefinitionBase(props) {
        var _this = _super.call(this, props) || this;
        _this.__p = null;
        _this._hasUserValues = new Set();
        _this._stylingContainer = null;
        _this._stylingParent = null;
        _this._inStyling = false;
        _this._renderer = null;
        _this._dataBinding = null;
        _this._dataBinding_wrapped = null;
        _this._dataBound = null;
        _this._dataBound_wrapped = null;
        _this._cellStyleKeyRequested = null;
        _this._cellStyleKeyRequested_wrapped = null;
        if (_this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));
        }
        _this._implementation = _this.createImplementation();
        _this._implementation.externalObject = _this;
        _this.onImplementationCreated();
        return _this;
    }
    IgrDefinitionBase.prototype.createImplementation = function () {
        return null;
    };
    Object.defineProperty(IgrDefinitionBase.prototype, "i", {
        /**
         * @hidden
         */
        get: function () {
            return this._implementation;
        } /**
                                     * @hidden
                                     */,
        enumerable: true,
        configurable: true
    });
    IgrDefinitionBase._createFromInternal = function (internal) {
        if (!internal) {
            return null;
        }
        if (!internal.$type) {
            return null;
        }
        var name = internal.$type.name;
        var externalName = "Igr" + name;
        if (!TypeRegistrar.isRegistered(externalName)) {
            return null;
        }
        return TypeRegistrar.create(externalName);
    };
    IgrDefinitionBase.prototype.componentDidMount = function () {
        var e_1, _a;
        try {
            for (var _b = tslib_1.__values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                if (isValidProp(this, p)) {
                    this[p] = this.props[p];
                }
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
    };
    IgrDefinitionBase.prototype.onImplementationCreated = function () {
    };
    Object.defineProperty(IgrDefinitionBase.prototype, "hasUserValues", {
        get: function () {
            return this._hasUserValues;
        },
        enumerable: true,
        configurable: true
    });
    IgrDefinitionBase.prototype.__m = function (propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    };
    IgrDefinitionBase.prototype._styling = function (container, component, parent) {
        this._stylingContainer = container;
        this._stylingParent = component;
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        var grid = component._grid;
        var prev;
        if (grid) {
            prev = grid.columnPropertyUpdatingAnimationMode;
            grid.columnPropertyUpdatingAnimationMode = ColumnPropertyUpdatingAnimationMode.None;
        }
        var genericPrefix = "";
        var typeName = this.i.$type.name;
        var lowerTypeName = typeName.toLowerCase();
        if (lowerTypeName.indexOf("column") >= 0) {
            genericPrefix = "column";
        }
        else if (lowerTypeName.indexOf("sectionheader") >= 0) {
            genericPrefix = "section-header";
        }
        else if (lowerTypeName.indexOf("sectionfooter") >= 0) {
            genericPrefix = "section-footer";
        }
        else if (lowerTypeName.indexOf("rowseparator") >= 0) {
            genericPrefix = "row-separator";
        }
        else if (lowerTypeName.indexOf("summaryrowroot") >= 0) {
            genericPrefix = "summary-row-root";
        }
        else if (lowerTypeName.indexOf("summaryrowsection") >= 0) {
            genericPrefix = "summary-row-section";
        }
        else if (lowerTypeName.indexOf("headerseparator") >= 0) {
            genericPrefix = "header-separator";
        }
        else {
            genericPrefix = "header";
        }
        var additionalPrefixes = [];
        var prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        if (parent) {
            var parentTypeName = parent.i.$type.name;
            if (parentTypeName == "Grid") {
                parentTypeName = "DataGrid";
            }
            var parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (grid) {
            grid.columnPropertyUpdatingAnimationMode = prev;
        }
        this._inStyling = false;
    };
    IgrDefinitionBase.prototype._provideRenderer = function (renderer) {
        this._renderer = renderer;
    };
    IgrDefinitionBase.prototype.shouldComponentUpdate = function (nextProps, nextState) {
        var e_2, _a;
        var mod = getModifiedProps(this.props, nextProps);
        try {
            for (var _b = tslib_1.__values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                if (isValidProp(this, p)) {
                    this[p] = mod[p];
                }
            }
        }
        catch (e_2_1) {
            e_2 = { error: e_2_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_2)
                    throw e_2.error;
            }
        }
        return true;
    };
    IgrDefinitionBase.prototype.render = function () {
        return null;
    };
    Object.defineProperty(IgrDefinitionBase.prototype, "background", {
        /**
     * Gets or sets the background color to use.
    */
        get: function () {
            return brushToString(this.i.d7);
        },
        set: function (v) {
            this.i.d7 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrDefinitionBase.prototype, "border", {
        /**
         * Gets or sets the background color to use.
        */
        get: function () {
            return brushToString(this.i.d8);
        },
        set: function (v) {
            this.i.d8 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrDefinitionBase.prototype, "activationBorder", {
        /**
         * Gets or sets the background color to use.
        */
        get: function () {
            return brushToString(this.i.dy);
        },
        set: function (v) {
            this.i.dy = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrDefinitionBase.prototype, "errorBorder", {
        /**
         * Gets or sets the error border color to use.
        */
        get: function () {
            return brushToString(this.i.d9);
        },
        set: function (v) {
            this.i.d9 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrDefinitionBase.prototype, "actualBorder", {
        /**
         * Gets the actual border color that will be used.
        */
        get: function () {
            return brushToString(this.i.d1);
        },
        set: function (v) {
            this.i.d1 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrDefinitionBase.prototype, "borderLeftWidth", {
        /**
         * Gets or sets the amount of left border to use for the cell content for this column.
        */
        get: function () {
            return this.i.be;
        },
        set: function (v) {
            this.i.be = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrDefinitionBase.prototype, "borderTopWidth", {
        /**
         * Gets or sets the amount of top border to use for the cell content for this column.
        */
        get: function () {
            return this.i.bg;
        },
        set: function (v) {
            this.i.bg = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrDefinitionBase.prototype, "borderRightWidth", {
        /**
         * Gets or sets the amount of right border to use for the cell content of this column.
        */
        get: function () {
            return this.i.bf;
        },
        set: function (v) {
            this.i.bf = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrDefinitionBase.prototype, "borderBottomWidth", {
        /**
         * Gets or sets the amount of bottom border to use for the cell content of this column.
        */
        get: function () {
            return this.i.bd;
        },
        set: function (v) {
            this.i.bd = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrDefinitionBase.prototype, "activationBorderLeftWidth", {
        /**
         * Gets or sets the amount of left activation border to use for the cell content for this column.
        */
        get: function () {
            return this.i.ba;
        },
        set: function (v) {
            this.i.ba = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrDefinitionBase.prototype, "activationBorderTopWidth", {
        /**
         * Gets or sets the amount of top activation border to use for the cell content for this column.
        */
        get: function () {
            return this.i.bc;
        },
        set: function (v) {
            this.i.bc = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrDefinitionBase.prototype, "activationBorderRightWidth", {
        /**
         * Gets or sets the amount of right activation border to use for the cell content of this column.
        */
        get: function () {
            return this.i.bb;
        },
        set: function (v) {
            this.i.bb = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrDefinitionBase.prototype, "activationBorderBottomWidth", {
        /**
         * Gets or sets the amount of bottom activation border to use for the cell content of this column.
        */
        get: function () {
            return this.i.a9;
        },
        set: function (v) {
            this.i.a9 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrDefinitionBase.prototype, "errorBorderLeftWidth", {
        get: function () {
            return this.i.bi;
        },
        set: function (v) {
            this.i.bi = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrDefinitionBase.prototype, "errorBorderTopWidth", {
        get: function () {
            return this.i.bk;
        },
        set: function (v) {
            this.i.bk = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrDefinitionBase.prototype, "errorBorderRightWidth", {
        get: function () {
            return this.i.bj;
        },
        set: function (v) {
            this.i.bj = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrDefinitionBase.prototype, "errorBorderBottomWidth", {
        get: function () {
            return this.i.bh;
        },
        set: function (v) {
            this.i.bh = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrDefinitionBase.prototype, "actualBackground", {
        /**
         * Gets the actual background color that will be used.
        */
        get: function () {
            return brushToString(this.i.d0);
        },
        set: function (v) {
            this.i.d0 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrDefinitionBase.prototype, "actualActivationBorder", {
        /**
         * Gets the actual background color that will be used.
        */
        get: function () {
            return brushToString(this.i.dz);
        },
        set: function (v) {
            this.i.dz = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrDefinitionBase.prototype, "actualErrorBorder", {
        /**
         * Gets the actual error border color that will be used.
        */
        get: function () {
            return brushToString(this.i.d2);
        },
        set: function (v) {
            this.i.d2 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrDefinitionBase.prototype, "stickyRowBackground", {
        /**
         * Gets or sets the background color for content that sticks to the top of the grid.
        */
        get: function () {
            return brushToString(this.i.ej);
        },
        set: function (v) {
            this.i.ej = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrDefinitionBase.prototype, "actualStickyRowBackground", {
        /**
         * Gets the actual background color for content that sticks to the top of the grid.
        */
        get: function () {
            return brushToString(this.i.d5);
        },
        set: function (v) {
            this.i.d5 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrDefinitionBase.prototype, "pinnedRowBackground", {
        /**
         * Gets or sets the background color for cells belonging to rows marked as pinned.
        */
        get: function () {
            return brushToString(this.i.ei);
        },
        set: function (v) {
            this.i.ei = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrDefinitionBase.prototype, "actualPinnedRowBackground", {
        /**
         * Gets the actual background color for cells belonging to rows marked as pinned.
        */
        get: function () {
            return brushToString(this.i.d4);
        },
        set: function (v) {
            this.i.d4 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrDefinitionBase.prototype, "lastStickyRowBackground", {
        /**
         * Gets or sets the color for the last row in the sticky row area.
        */
        get: function () {
            return brushToString(this.i.eh);
        },
        set: function (v) {
            this.i.eh = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrDefinitionBase.prototype, "actualLastStickyRowBackground", {
        /**
         * Gets the actual color for the last row in the sticky row area.
        */
        get: function () {
            return brushToString(this.i.d3);
        },
        set: function (v) {
            this.i.d3 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrDefinitionBase.prototype, "contentOpacity", {
        /**
         * Gets or sets the opacity of the content.
        */
        get: function () {
            return this.i.au;
        },
        set: function (v) {
            this.i.au = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrDefinitionBase.prototype, "horizontalAlignment", {
        /**
         * Gets or sets the horizontal alignment to use for the cell content.
        */
        get: function () {
            return this.i.e;
        },
        set: function (v) {
            this.i.e = ensureEnum(CellContentHorizontalAlignment_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrDefinitionBase.prototype, "verticalAlignment", {
        /**
         * Gets or sets the vertical alignment to use for the cell content.
        */
        get: function () {
            return this.i.j;
        },
        set: function (v) {
            this.i.j = ensureEnum(CellContentVerticalAlignment_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrDefinitionBase.prototype, "lineBreakMode", {
        /**
         * Gets or sets the line breaking mode to use if text is present in the cell.
        */
        get: function () {
            return this.i.y;
        },
        set: function (v) {
            this.i.y = ensureEnum(TextCellLineBreakMode_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrDefinitionBase.prototype, "actualLineBreakMode", {
        /**
         * Gets the actual line break mode which will be used if text is present in the cell.
        */
        get: function () {
            return this.i.x;
        },
        set: function (v) {
            this.i.x = ensureEnum(TextCellLineBreakMode_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrDefinitionBase.prototype, "textColor", {
        /**
         * Gets or sets the color to use for displaying text.
        */
        get: function () {
            return brushToString(this.i.ek);
        },
        set: function (v) {
            this.i.ek = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrDefinitionBase.prototype, "actualTextColor", {
        /**
         * Gets the actual color used for displaying text.
        */
        get: function () {
            return brushToString(this.i.d6);
        },
        set: function (v) {
            this.i.d6 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrDefinitionBase.prototype, "pinnedRowOpacity", {
        /**
         * Gets or sets the color to use for displaying text.
        */
        get: function () {
            return this.i.aw;
        },
        set: function (v) {
            this.i.aw = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrDefinitionBase.prototype, "actualPinnedRowOpacity", {
        /**
         * Gets or sets the color to use for displaying text.
        */
        get: function () {
            return this.i.at;
        },
        set: function (v) {
            this.i.at = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrDefinitionBase.prototype, "textStyle", {
        get: function () {
            if (this.i.textStyle == null) {
                return null;
            }
            return this.i.textStyle.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.textStyle = fi;
        },
        enumerable: true,
        configurable: true
    });
    IgrDefinitionBase.prototype.findByName = function (name) {
        return null;
    };
    IgrDefinitionBase.prototype.setNamedValue = function (valueName, animationType, value) {
        this.i.c6(valueName, (animationType == null ? null : animationType), value);
    };
    /**
     * Returns if this definition has named value.
    
    */
    IgrDefinitionBase.prototype.hasNamedValues = function () {
        var iv = this.i.ai();
        return (iv);
    };
    /**
     * Returns if this definition has a named value with a given name.
    
    * @param valueName  * The named value name to check for.
    */
    IgrDefinitionBase.prototype.hasNamedValue = function (valueName) {
        var iv = this.i.ah(valueName);
        return (iv);
    };
    /**
     * Removes the named value from this definition by name.
    
    * @param valueName  * The named value name to remove.
    */
    IgrDefinitionBase.prototype.removeNamedValue = function (valueName) {
        this.i.c4(valueName);
    };
    /**
     * Gets the value for a named value from this definition.
    
    * @param valueName  * The named value name to check for.
    */
    IgrDefinitionBase.prototype.getNamedValue = function (valueName) {
        var iv = this.i.bn(valueName);
        return (iv);
    };
    Object.defineProperty(IgrDefinitionBase.prototype, "dataBinding", {
        /**
         * Called when a cell is data binding.
        */
        get: function () {
            return this._dataBinding;
        },
        set: function (ev) {
            var _this = this;
            if (this._dataBinding_wrapped !== null) {
                this.i.dataBinding = delegateRemove(this.i.dataBinding, this._dataBinding_wrapped);
                this._dataBinding_wrapped = null;
                this._dataBinding = null;
            }
            this._dataBinding = ev;
            this._dataBinding_wrapped = function (o, e) {
                var outerArgs = new IgrDataBindingEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeDataBinding) {
                    _this.beforeDataBinding(_this, outerArgs);
                }
                if (_this._dataBinding) {
                    _this._dataBinding(_this, outerArgs);
                }
            };
            this.i.dataBinding = delegateCombine(this.i.dataBinding, this._dataBinding_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrDefinitionBase.prototype, "dataBound", {
        /**
         * Called when a cell has been data bound.
        */
        get: function () {
            return this._dataBound;
        },
        set: function (ev) {
            var _this = this;
            if (this._dataBound_wrapped !== null) {
                this.i.dataBound = delegateRemove(this.i.dataBound, this._dataBound_wrapped);
                this._dataBound_wrapped = null;
                this._dataBound = null;
            }
            this._dataBound = ev;
            this._dataBound_wrapped = function (o, e) {
                var outerArgs = new IgrDataBindingEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeDataBound) {
                    _this.beforeDataBound(_this, outerArgs);
                }
                if (_this._dataBound) {
                    _this._dataBound(_this, outerArgs);
                }
            };
            this.i.dataBound = delegateCombine(this.i.dataBound, this._dataBound_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrDefinitionBase.prototype, "cellStyleKeyRequested", {
        /**
         * Called when the style key for a cell is needed. Used for recycling the cell.
        */
        get: function () {
            return this._cellStyleKeyRequested;
        },
        set: function (ev) {
            var _this = this;
            if (this._cellStyleKeyRequested_wrapped !== null) {
                this.i.cellStyleKeyRequested = delegateRemove(this.i.cellStyleKeyRequested, this._cellStyleKeyRequested_wrapped);
                this._cellStyleKeyRequested_wrapped = null;
                this._cellStyleKeyRequested = null;
            }
            this._cellStyleKeyRequested = ev;
            this._cellStyleKeyRequested_wrapped = function (o, e) {
                var outerArgs = new IgrCellStyleRequestedEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeCellStyleKeyRequested) {
                    _this.beforeCellStyleKeyRequested(_this, outerArgs);
                }
                if (_this._cellStyleKeyRequested) {
                    _this._cellStyleKeyRequested(_this, outerArgs);
                }
            };
            this.i.cellStyleKeyRequested = delegateCombine(this.i.cellStyleKeyRequested, this._cellStyleKeyRequested_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    return IgrDefinitionBase;
}(React.Component));
export { IgrDefinitionBase };
//# sourceMappingURL=igr-definition-base.js.map
