import * as tslib_1 from "tslib";
import * as React from 'react';
import { ensureEnum, ensureBool, NamePatcher, isValidProp, getModifiedProps } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
import { ReactRenderer } from "igniteui-react-core";
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { GridColumnOptions } from './GridColumnOptions';
import { IgrGridColumnOptionsBase } from "./igr-grid-column-options-base";
import { IgrGridColumnSortOptions } from "./igr-grid-column-sort-options";
import { IgrGridColumnMoveOptions } from "./igr-grid-column-move-options";
import { IgrGridColumnPinOptions } from "./igr-grid-column-pin-options";
import { IgrGridColumnHideOptions } from "./igr-grid-column-hide-options";
import { IgrGridColumnGroupOptions } from "./igr-grid-column-group-options";
import { IgrGridColumnFilterOptions } from "./igr-grid-column-filter-options";
import { IgrFilterApplyButtonClickEventArgs } from './igr-filter-apply-button-click-event-args';
import { IgrFilterCancelButtonClickEventArgs } from './igr-filter-cancel-button-click-event-args';
import { ControlDisplayDensity_$type } from "igniteui-react-core";
var IgrGridColumnOptions = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(IgrGridColumnOptions, _super);
    function IgrGridColumnOptions(props) {
        var _this = _super.call(this, props) || this;
        _this._reactRenderer = null;
        _this._filterApplyButtonClick = null;
        _this._filterApplyButtonClick_wrapped = null;
        _this._filterCancelButtonClick = null;
        _this._filterCancelButtonClick_wrapped = null;
        if (_this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));
        }
        _this._getMainRef = _this._getMainRef.bind(_this);
        _this._getSortSectionRef = _this._getSortSectionRef.bind(_this);
        _this._getMoveSectionRef = _this._getMoveSectionRef.bind(_this);
        _this._getPinSectionRef = _this._getPinSectionRef.bind(_this);
        _this._getFilterSectionRef = _this._getFilterSectionRef.bind(_this);
        _this._getHeaderColumnNameSectionRef = _this._getHeaderColumnNameSectionRef.bind(_this);
        _this._getHeaderButtonsSectionRef = _this._getHeaderButtonsSectionRef.bind(_this);
        _this._getHideSectionRef = _this._getHideSectionRef.bind(_this);
        _this._getGroupSectionRef = _this._getGroupSectionRef.bind(_this);
        _this._getHeaderSectionRef = _this._getHeaderSectionRef.bind(_this);
        _this._getSortOptionsRef = _this._getSortOptionsRef.bind(_this);
        _this._getMoveOptionsRef = _this._getMoveOptionsRef.bind(_this);
        _this._getPinOptionsRef = _this._getPinOptionsRef.bind(_this);
        _this._getHideOptionsRef = _this._getHideOptionsRef.bind(_this);
        _this._getGroupOptionsRef = _this._getGroupOptionsRef.bind(_this);
        _this._getFilterOptionsRef = _this._getFilterOptionsRef.bind(_this);
        var columnOptions = _this.i;
        columnOptions.notifySizeChanged();
        if (props) {
            _this.initializeProperties();
        }
        return _this;
    }
    Object.defineProperty(IgrGridColumnOptions.prototype, "height", {
        get: function () {
            return this._height;
        },
        set: function (value) {
            this._height = value;
            if (this._elRef) {
                this._elRef.style.height = value;
                this.i.notifySizeChanged();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGridColumnOptions.prototype, "width", {
        get: function () {
            return this._width;
        },
        set: function (value) {
            this._width = value;
            if (this._elRef) {
                this._elRef.style.height = value;
                this.i.notifySizeChanged();
            }
        },
        enumerable: true,
        configurable: true
    });
    IgrGridColumnOptions.prototype._getMainRef = function (ref) {
        this._elRef = ref;
        this.verifyReferences();
    };
    // These are the  main sections at the root level. 
    IgrGridColumnOptions.prototype._getHeaderSectionRef = function (ref) {
        this._headerSectionRef = ref;
        this.verifyReferences();
    };
    IgrGridColumnOptions.prototype._getSortSectionRef = function (ref) {
        this._sortSectionRef = ref;
        this.verifyReferences();
    };
    IgrGridColumnOptions.prototype._getMoveSectionRef = function (ref) {
        this._moveSectionRef = ref;
        this.verifyReferences();
    };
    IgrGridColumnOptions.prototype._getPinSectionRef = function (ref) {
        this._pinSectionRef = ref;
        this.verifyReferences();
    };
    IgrGridColumnOptions.prototype._getFilterSectionRef = function (ref) {
        this._filterSectionRef = ref;
        this.verifyReferences();
    };
    // Sub-sections
    IgrGridColumnOptions.prototype._getHeaderColumnNameSectionRef = function (ref) {
        this._headerColumnNameSectionRef = ref;
        this.verifyReferences();
    };
    IgrGridColumnOptions.prototype._getHeaderButtonsSectionRef = function (ref) {
        this._headerButtonsSectionRef = ref;
        this.verifyReferences();
    };
    IgrGridColumnOptions.prototype._getHideSectionRef = function (ref) {
        this._hideSectionRef = ref;
        this.verifyReferences();
    };
    IgrGridColumnOptions.prototype._getGroupSectionRef = function (ref) {
        this._groupSectionRef = ref;
        this.verifyReferences();
    };
    // The actual components
    IgrGridColumnOptions.prototype._getSortOptionsRef = function (ref) {
        this._sortOptionsRef = ref;
        this.verifyReferences();
    };
    IgrGridColumnOptions.prototype._getMoveOptionsRef = function (ref) {
        this._moveOptionsRef = ref;
        this.verifyReferences();
    };
    IgrGridColumnOptions.prototype._getPinOptionsRef = function (ref) {
        this._pinOptionsRef = ref;
        this.verifyReferences();
    };
    IgrGridColumnOptions.prototype._getHideOptionsRef = function (ref) {
        this._hideOptionsRef = ref;
        this.verifyReferences();
    };
    IgrGridColumnOptions.prototype._getGroupOptionsRef = function (ref) {
        this._groupOptionsRef = ref;
        this.verifyReferences();
    };
    IgrGridColumnOptions.prototype._getFilterOptionsRef = function (ref) {
        this._filterOptionsRef = ref;
        this.verifyReferences();
    };
    IgrGridColumnOptions.prototype.render = function () {
        return (React.createElement("div", { className: "ig-grid-column-options igr-grid-column-options", ref: this._getMainRef }, React.createElement("div", { ref: this._getHeaderSectionRef, key: "headerSection" }, React.createElement("div", { ref: this._getHeaderColumnNameSectionRef, key: "headerColumnNameSection" }), React.createElement("div", { ref: this._getHeaderButtonsSectionRef, key: "headerButtonsSection" }, React.createElement("div", { ref: this._getGroupSectionRef, key: "groupSection" }, React.createElement(IgrGridColumnGroupOptions, { ref: this._getGroupOptionsRef, key: "groupOptions" })), React.createElement("div", { ref: this._getHideSectionRef, key: "hideSection" }, React.createElement(IgrGridColumnHideOptions, { ref: this._getHideOptionsRef, key: "hideOptions" })))), React.createElement("div", { ref: this._getSortSectionRef, key: "sortSection" }, React.createElement(IgrGridColumnSortOptions, { ref: this._getSortOptionsRef, key: "sortOptions" })), React.createElement("div", { ref: this._getMoveSectionRef, key: "moveSection" }, React.createElement(IgrGridColumnMoveOptions, { ref: this._getMoveOptionsRef, key: "moveOptions" })), React.createElement("div", { ref: this._getPinSectionRef, key: "pinSection" }, React.createElement(IgrGridColumnPinOptions, { ref: this._getPinOptionsRef, key: "pinOptions" })), React.createElement("div", { ref: this._getFilterSectionRef, key: "filterSection" }, React.createElement(IgrGridColumnFilterOptions, { ref: this._getFilterOptionsRef, key: "filterOptions" }))));
    };
    IgrGridColumnOptions.prototype.verifyReferences = function () {
        var _this = this;
        if (this._elRef &&
            this._headerSectionRef &&
            this._sortSectionRef &&
            this._moveSectionRef &&
            this._pinSectionRef &&
            this._filterSectionRef &&
            this._headerColumnNameSectionRef &&
            this._headerButtonsSectionRef &&
            this._hideSectionRef &&
            this._groupSectionRef &&
            this._sortOptionsRef &&
            this._moveOptionsRef &&
            this._pinOptionsRef &&
            this._hideOptionsRef &&
            this._groupOptionsRef &&
            this._filterOptionsRef) {
            this._reactRenderer = new ReactRenderer(this._elRef, document, false, null);
            if (document) {
                this._elRef.style.display = "block";
                this._elRef.style.width = "100%";
                this._elRef.style.height = "100%";
            }
            this.i.provideRenderer(this._reactRenderer);
            var headerSectionWrapper = this._reactRenderer.getWrapper(this._headerSectionRef);
            var sortSectionWrapper = this._reactRenderer.getWrapper(this._sortSectionRef);
            var moveSectionWrapper = this._reactRenderer.getWrapper(this._moveSectionRef);
            var pinSectionWrapper = this._reactRenderer.getWrapper(this._pinSectionRef);
            var filterSectionWrapper = this._reactRenderer.getWrapper(this._filterSectionRef);
            var headerColumnNameSectionWrapper = this._reactRenderer.getWrapper(this._headerColumnNameSectionRef);
            var headerButtonsSectionWrapper = this._reactRenderer.getWrapper(this._headerButtonsSectionRef);
            var hideSectionWrapper = this._reactRenderer.getWrapper(this._hideSectionRef);
            var groupSectionWrapper = this._reactRenderer.getWrapper(this._groupSectionRef);
            this.i.provideContent(headerSectionWrapper, sortSectionWrapper, moveSectionWrapper, pinSectionWrapper, filterSectionWrapper, headerColumnNameSectionWrapper, headerButtonsSectionWrapper, hideSectionWrapper, groupSectionWrapper, this._sortOptionsRef.i, this._moveOptionsRef.i, this._pinOptionsRef.i, this._hideOptionsRef.i, this._groupOptionsRef.i, this._filterOptionsRef.i);
            this._reactRenderer.addSizeWatcher(function () {
                _this.i.notifySizeChanged();
            });
        }
    };
    IgrGridColumnOptions.prototype.shouldComponentUpdate = function (nextProps, nextState) {
        var e_1, _a;
        var mod = getModifiedProps(this.props, nextProps);
        try {
            for (var _b = tslib_1.__values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                if (isValidProp(this, p)) {
                    this[p] = mod[p];
                }
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
        return true;
    };
    IgrGridColumnOptions.prototype.initializeProperties = function () {
        var e_2, _a;
        try {
            for (var _b = tslib_1.__values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                if (isValidProp(this, p)) {
                    this[p] = this.props[p];
                }
            }
        }
        catch (e_2_1) {
            e_2 = { error: e_2_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_2)
                    throw e_2.error;
            }
        }
    };
    // supports angular themes or custom properties set in CSS
    IgrGridColumnOptions.prototype.updateStyle = function () {
        this._styling(this._elRef, this);
    };
    IgrGridColumnOptions.prototype.componentWillUnmount = function () {
        this.i.destroy();
        if (this._reactRenderer)
            this._reactRenderer.destroy();
    };
    IgrGridColumnOptions.prototype.componentDidMount = function () {
        this._elRef.style.width = this._width ? this._width : "";
        this._elRef.style.height = this._height ? this._height : "";
        this.i.notifySizeChanged();
        this.initializeContent();
    };
    IgrGridColumnOptions.prototype.initializeContent = function () {
        this._styling(this._elRef, this);
        this.updateStyle();
        this.i.notifySizeChanged();
    };
    IgrGridColumnOptions.prototype.createImplementation = function () {
        return new GridColumnOptions();
    };
    Object.defineProperty(IgrGridColumnOptions.prototype, "i", {
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGridColumnOptions.prototype, "headerOptionsVisibleResolved", {
        get: function () {
            return this.i.ce;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGridColumnOptions.prototype, "sortOptionsVisibleResolved", {
        get: function () {
            return this.i.cs;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGridColumnOptions.prototype, "moveOptionsVisibleResolved", {
        get: function () {
            return this.i.cm;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGridColumnOptions.prototype, "pinOptionsVisibleResolved", {
        get: function () {
            return this.i.cp;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGridColumnOptions.prototype, "hideOptionsVisibleResolved", {
        get: function () {
            return this.i.cj;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGridColumnOptions.prototype, "groupOptionsVisibleResolved", {
        get: function () {
            return this.i.cd;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGridColumnOptions.prototype, "filterOptionsVisibleResolved", {
        get: function () {
            return this.i.ca;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGridColumnOptions.prototype, "columnNameTextStyle", {
        /**
         * Gets or sets the font to use for columnNames.
        */
        get: function () {
            if (this.i.b5 == null) {
                return null;
            }
            return this.i.b5.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.b5 = fi;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGridColumnOptions.prototype, "paddingLeft", {
        /**
         * Gets or sets the amount of left padding to use for the left edge of the component.
        */
        get: function () {
            return this.i.c3;
        },
        set: function (v) {
            this.i.c3 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGridColumnOptions.prototype, "paddingTop", {
        /**
         * Gets or sets the amount of left padding to use for the top edge of the component.
        */
        get: function () {
            return this.i.c5;
        },
        set: function (v) {
            this.i.c5 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGridColumnOptions.prototype, "paddingRight", {
        /**
         * Gets or sets the amount of left padding to use for the right edge of the component.
        */
        get: function () {
            return this.i.c4;
        },
        set: function (v) {
            this.i.c4 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGridColumnOptions.prototype, "paddingBottom", {
        /**
         * Gets or sets the amount of left padding to use for the bottom edge of the component.
        */
        get: function () {
            return this.i.c2;
        },
        set: function (v) {
            this.i.c2 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGridColumnOptions.prototype, "headerVisible", {
        get: function () {
            return this.i.cg;
        },
        set: function (v) {
            this.i.cg = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGridColumnOptions.prototype, "sortOptionsVisible", {
        get: function () {
            return this.i.cr;
        },
        set: function (v) {
            this.i.cr = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGridColumnOptions.prototype, "moveOptionsVisible", {
        get: function () {
            return this.i.cl;
        },
        set: function (v) {
            this.i.cl = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGridColumnOptions.prototype, "pinOptionsVisible", {
        get: function () {
            return this.i.co;
        },
        set: function (v) {
            this.i.co = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGridColumnOptions.prototype, "hideOptionsVisible", {
        get: function () {
            return this.i.ci;
        },
        set: function (v) {
            this.i.ci = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGridColumnOptions.prototype, "groupOptionsVisible", {
        get: function () {
            return this.i.cc;
        },
        set: function (v) {
            this.i.cc = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGridColumnOptions.prototype, "filterOptionsVisible", {
        get: function () {
            return this.i.b9;
        },
        set: function (v) {
            this.i.b9 = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGridColumnOptions.prototype, "sortHeaderCaption", {
        get: function () {
            return this.i.ep;
        },
        set: function (v) {
            this.i.ep = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGridColumnOptions.prototype, "sortAscendingCaption", {
        get: function () {
            return this.i.ej;
        },
        set: function (v) {
            this.i.ej = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGridColumnOptions.prototype, "sortDescendingCaption", {
        get: function () {
            return this.i.em;
        },
        set: function (v) {
            this.i.em = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGridColumnOptions.prototype, "moveHeaderCaption", {
        get: function () {
            return this.i.dv;
        },
        set: function (v) {
            this.i.dv = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGridColumnOptions.prototype, "moveLeftCaption", {
        get: function () {
            return this.i.dy;
        },
        set: function (v) {
            this.i.dy = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGridColumnOptions.prototype, "moveRightCaption", {
        get: function () {
            return this.i.d2;
        },
        set: function (v) {
            this.i.d2 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGridColumnOptions.prototype, "pinHeaderCaption", {
        get: function () {
            return this.i.d9;
        },
        set: function (v) {
            this.i.d9 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGridColumnOptions.prototype, "pinLeftCaption", {
        get: function () {
            return this.i.ec;
        },
        set: function (v) {
            this.i.ec = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGridColumnOptions.prototype, "pinRightCaption", {
        get: function () {
            return this.i.eg;
        },
        set: function (v) {
            this.i.eg = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGridColumnOptions.prototype, "applyFiltersButtonCaption", {
        get: function () {
            return this.i.c9;
        },
        set: function (v) {
            this.i.c9 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGridColumnOptions.prototype, "cancelFiltersButtonCaption", {
        get: function () {
            return this.i.dc;
        },
        set: function (v) {
            this.i.dc = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGridColumnOptions.prototype, "clearColumnFiltersCaption", {
        get: function () {
            return this.i.df;
        },
        set: function (v) {
            this.i.df = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGridColumnOptions.prototype, "filterListDensity", {
        /**
         * Gets or sets the display Density to use for the buttons in the component.
        */
        get: function () {
            return this.i.filterListDensity;
        },
        set: function (v) {
            this.i.filterListDensity = ensureEnum(ControlDisplayDensity_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGridColumnOptions.prototype, "actualFilterListDensity", {
        /**
         * Gets the actual display filterListDensity to use for the component.
        */
        get: function () {
            return this.i.bz;
        },
        set: function (v) {
            this.i.bz = ensureEnum(ControlDisplayDensity_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGridColumnOptions.prototype, "filterListPlaceholderText", {
        get: function () {
            return this.i.dl;
        },
        set: function (v) {
            this.i.dl = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGridColumnOptions.prototype, "filterApplyButtonClick", {
        get: function () {
            return this._filterApplyButtonClick;
        },
        set: function (ev) {
            var _this = this;
            if (this._filterApplyButtonClick_wrapped !== null) {
                this.i.filterApplyButtonClick = delegateRemove(this.i.filterApplyButtonClick, this._filterApplyButtonClick_wrapped);
                this._filterApplyButtonClick_wrapped = null;
                this._filterApplyButtonClick = null;
            }
            this._filterApplyButtonClick = ev;
            this._filterApplyButtonClick_wrapped = function (o, e) {
                var outerArgs = new IgrFilterApplyButtonClickEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeFilterApplyButtonClick) {
                    _this.beforeFilterApplyButtonClick(_this, outerArgs);
                }
                if (_this._filterApplyButtonClick) {
                    _this._filterApplyButtonClick(_this, outerArgs);
                }
            };
            this.i.filterApplyButtonClick = delegateCombine(this.i.filterApplyButtonClick, this._filterApplyButtonClick_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrGridColumnOptions.prototype, "filterCancelButtonClick", {
        get: function () {
            return this._filterCancelButtonClick;
        },
        set: function (ev) {
            var _this = this;
            if (this._filterCancelButtonClick_wrapped !== null) {
                this.i.filterCancelButtonClick = delegateRemove(this.i.filterCancelButtonClick, this._filterCancelButtonClick_wrapped);
                this._filterCancelButtonClick_wrapped = null;
                this._filterCancelButtonClick = null;
            }
            this._filterCancelButtonClick = ev;
            this._filterCancelButtonClick_wrapped = function (o, e) {
                var outerArgs = new IgrFilterCancelButtonClickEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeFilterCancelButtonClick) {
                    _this.beforeFilterCancelButtonClick(_this, outerArgs);
                }
                if (_this._filterCancelButtonClick) {
                    _this._filterCancelButtonClick(_this, outerArgs);
                }
            };
            this.i.filterCancelButtonClick = delegateCombine(this.i.filterCancelButtonClick, this._filterCancelButtonClick_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    return IgrGridColumnOptions;
}(IgrGridColumnOptionsBase));
export { IgrGridColumnOptions };
//# sourceMappingURL=igr-grid-column-options.js.map
