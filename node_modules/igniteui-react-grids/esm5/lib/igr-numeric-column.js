import * as tslib_1 from "tslib";
import { EditorType_$type } from "./EditorType";
import { IgrColumn } from "./igr-column";
import { NumericColumn } from "./NumericColumn";
import { ensureBool, ensureEnum, arrayFindByName } from "igniteui-react-core";
/**
 * Represents a Numeric grid column, used to allow the developer to display a formatted number in a cell.
*/
var IgrNumericColumn = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(IgrNumericColumn, _super);
    function IgrNumericColumn(props) {
        return _super.call(this, props) || this;
    }
    IgrNumericColumn.prototype.createImplementation = function () {
        return new NumericColumn();
    };
    Object.defineProperty(IgrNumericColumn.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrNumericColumn.prototype, "negativePrefix", {
        /**
         * Gets or sets the string to prefix a negative value. If FormatString is specificied this value is ignored.
        */
        get: function () {
            return this.i.kh;
        },
        set: function (v) {
            this.i.kh = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrNumericColumn.prototype, "positivePrefix", {
        /**
         * Gets or sets the string to prefix a positive value. If FormatString is specificied this value is ignored.
        */
        get: function () {
            return this.i.kl;
        },
        set: function (v) {
            this.i.kl = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrNumericColumn.prototype, "negativeSuffix", {
        /**
         * Gets or sets the string to suffix a negative value. If FormatString is specificied this value is ignored.
        */
        get: function () {
            return this.i.kj;
        },
        set: function (v) {
            this.i.kj = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrNumericColumn.prototype, "positiveSuffix", {
        /**
         * Gets or sets the string to suffix a positive value. If FormatString is specificied this value is ignored.
        */
        get: function () {
            return this.i.kn;
        },
        set: function (v) {
            this.i.kn = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrNumericColumn.prototype, "maxFractionDigits", {
        /**
         * Gets or sets the maximum fraction digits. If FormatString is specificied this value is ignored.
        */
        get: function () {
            return this.i.jy;
        },
        set: function (v) {
            this.i.jy = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrNumericColumn.prototype, "minFractionDigits", {
        /**
         * Gets or sets the minimum fraction digits. If FormatString is specificied this value is ignored.
        */
        get: function () {
            return this.i.jz;
        },
        set: function (v) {
            this.i.jz = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrNumericColumn.prototype, "minIntegerDigits", {
        /**
         * Gets or sets the minimum integer digits. If FormatString is specificied this value is ignored.
        */
        get: function () {
            return this.i.j0;
        },
        set: function (v) {
            this.i.j0 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrNumericColumn.prototype, "showGroupingSeparator", {
        /**
         * Gets or sets whether to show a grouping separator. If FormatString is specificied this value is ignored.
        */
        get: function () {
            return this.i.jt;
        },
        set: function (v) {
            this.i.jt = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrNumericColumn.prototype, "formatString", {
        /**
         * Gets or sets the format string to apply to the value. If set, the other value formatting properties on this column are ignored.
        */
        get: function () {
            return this.i.kc;
        },
        set: function (v) {
            this.i.kc = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrNumericColumn.prototype, "formatSpecifiers", {
        get: function () {
            return this.i.jq;
        },
        set: function (v) {
            this.i.jq = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrNumericColumn.prototype, "formatOverride", {
        /**
         * Gets or sets the INTL NumericFormat object to use for formatting the date values.
        */
        get: function () {
            return this.i.j3;
        },
        set: function (v) {
            this.i.j3 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrNumericColumn.prototype, "editorType", {
        /**
         * Gets or sets the editor type used for editing cells in this column.
        */
        get: function () {
            return this.i.jr;
        },
        set: function (v) {
            this.i.jr = ensureEnum(EditorType_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrNumericColumn.prototype, "editorDataSource", {
        /**
         * Gets or sets the ComboBox data source.
        */
        get: function () {
            return this.i.j2;
        },
        set: function (v) {
            this.i.j2 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrNumericColumn.prototype, "editorTextField", {
        /**
         * Gets or sets the ComboBox text field.
        */
        get: function () {
            return this.i.j9;
        },
        set: function (v) {
            this.i.j9 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrNumericColumn.prototype, "editorValueField", {
        /**
         * Gets or sets the ComboBox value field.
        */
        get: function () {
            return this.i.jp;
        },
        set: function (v) {
            this.i.jp = v;
        },
        enumerable: true,
        configurable: true
    });
    IgrNumericColumn.prototype.findByName = function (name) {
        var baseResult = _super.prototype.findByName.call(this, name);
        if (baseResult) {
            return baseResult;
        }
        if (this.formatSpecifiers != null && arrayFindByName(this.formatSpecifiers, name)) {
            return arrayFindByName(this.formatSpecifiers, name);
        }
        return null;
    };
    return IgrNumericColumn;
}(IgrColumn));
export { IgrNumericColumn };
//# sourceMappingURL=igr-numeric-column.js.map
