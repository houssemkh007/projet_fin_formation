import * as tslib_1 from "tslib";
import { IgCollection } from "igniteui-react-core";
import { markType } from "igniteui-react-core";
import { SyncableObservableCollection$2 } from "igniteui-react-core";
import { Column as Column_internal } from './Column';
import { IgrColumn as IgrColumn } from './igr-column';
var IgrGridColumnCollection = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(IgrGridColumnCollection, _super);
    function IgrGridColumnCollection(list) {
        var _this = _super.call(this) || this;
        if (!IgrColumn.$type) {
            IgrColumn.$type = markType(IgrColumn, "IgrColumn");
        }
        if (list) {
            for (var i = 0; i < list.length; i++) {
                _this.add(list[i]);
            }
        }
        return _this;
    }
    IgrGridColumnCollection.prototype._createInnerColl = function () {
        if (!IgrColumn.$type) {
            IgrColumn.$type = markType(IgrColumn, "IgrColumn");
        }
        var coll = new SyncableObservableCollection$2(IgrColumn.$type, Column_internal.$type, 0);
        coll.compare = function (ext, int) {
            var comp = ext;
            if (comp._implementation) {
                comp = comp._implementation;
            }
            if (comp.equals) {
                return comp.equals(int);
            }
            return comp === int;
        };
        coll.createTo = function (ext) {
            return ext._implementation;
        };
        coll.createFrom = function (int) {
            var ext = int.externalObject;
            if (!ext) {
                ext = IgrColumn._createFromInternal(int);
                if (ext) {
                    ext._implementation = int;
                }
            }
            return ext;
        };
        return coll;
    };
    return IgrGridColumnCollection;
}(IgCollection));
export { IgrGridColumnCollection };
//# sourceMappingURL=igr-grid-column-collection.js.map
