import { CellContentHorizontalAlignment, CellContentHorizontalAlignment_$type } from "./CellContentHorizontalAlignment";
import { CellContentVerticalAlignment_$type } from "./CellContentVerticalAlignment";
import { TextCellLineBreakMode_$type } from "./TextCellLineBreakMode";
import { ColumnSortDirection_$type } from "./ColumnSortDirection";
import { ensureBool, ensureEnum, brushToString, stringToBrush } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
import { delegateCombine, delegateRemove, runOn } from "igniteui-react-core";
import { PinnedPositions_$type } from './PinnedPositions';
/**
 * Represents info about the current cell.
*/
var IgrCellInfo = /** @class */ /*@__PURE__*/ (function () {
    function IgrCellInfo() {
        this._onChanged = [];
        this._changed = false;
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    IgrCellInfo.prototype.createImplementation = function () {
        return null;
    };
    Object.defineProperty(IgrCellInfo.prototype, "i", {
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    IgrCellInfo.prototype._provideImplementation = function (i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    };
    IgrCellInfo.prototype.onImplementationCreated = function () {
    };
    IgrCellInfo.prototype.addOnChangedListener = function (listener) {
        if (this._onChanged.length == 0) {
            this.i.propertyChanged = delegateCombine(this.i.propertyChanged, runOn(this, this._implementation_propertyChanged));
            this.i.cellReconciling = delegateCombine(this.i.cellReconciling, runOn(this, this._implementation_cellReconciling));
        }
        this._onChanged.push(listener);
    };
    IgrCellInfo.prototype.removeOnChangedListener = function (listener) {
        var ind = this._onChanged.indexOf(listener);
        if (ind < 0) {
            return;
        }
        this._onChanged.splice(ind, 1);
        if (this._onChanged.length == 0) {
            this.i.propertyChanged = delegateRemove(this.i.propertyChanged, runOn(this, this._implementation_propertyChanged));
            this.i.cellReconciling = delegateRemove(this.i.cellReconciling, runOn(this, this._implementation_cellReconciling));
        }
    };
    IgrCellInfo.prototype._implementation_propertyChanged = function (sender, args) {
        this._changed = true;
    };
    IgrCellInfo.prototype._implementation_cellReconciling = function (model) {
        if (this._changed && this._onChanged !== null && this._onChanged.length > 0) {
            this._changed = false;
            for (var i = 0; i < this._onChanged.length; i++) {
                this._onChanged[i]();
            }
        }
        this._changed = false;
    };
    Object.defineProperty(IgrCellInfo.prototype, "resolvedTextAlign", {
        get: function () {
            switch (this.horizontalAlignment) {
                case CellContentHorizontalAlignment.Center:
                    return "center";
                case CellContentHorizontalAlignment.Left:
                    return "left";
                case CellContentHorizontalAlignment.Right:
                    return "right";
                case CellContentHorizontalAlignment.Stretch:
                    return "center";
            }
            return "left";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "resolvedContentOpacity", {
        get: function () {
            var virtualPercent = Math.min(1.0, Math.max(0.0, this.virtualizationPercentage));
            var opacity = this.contentOpacity * (1.0 - virtualPercent);
            return opacity;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "styleKey", {
        /**
     * Gets the style key of the current cell, used for recycling.
    */
        get: function () {
            return this.i.i0;
        },
        set: function (v) {
            this.i.i0 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "dataRow", {
        /**
         * Gets the absolute data row for the current cell.
        */
        get: function () {
            return this.i.ej;
        },
        set: function (v) {
            this.i.ej = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "isPositionDirty", {
        /**
         * Gets if the position of the cell is dirty.
        */
        get: function () {
            return this.i.a5;
        },
        set: function (v) {
            this.i.a5 = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "isSizeDirty", {
        /**
         * Gets if the size of the cell is dirty.
        */
        get: function () {
            return this.i.ba;
        },
        set: function (v) {
            this.i.ba = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "isContentDirty", {
        /**
         * Gets if the content of the cell is dirty.
        */
        get: function () {
            return this.i.as;
        },
        set: function (v) {
            this.i.as = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "isBorderDirty", {
        /**
         * Gets if the content of the cell is dirty.
        */
        get: function () {
            return this.i.aq;
        },
        set: function (v) {
            this.i.aq = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "isLayerDirty", {
        /**
         * Gets if the layer of the cell is dirty.
        */
        get: function () {
            return this.i.a3;
        },
        set: function (v) {
            this.i.a3 = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "isStateDirty", {
        /**
         * Gets if the layer of the cell is dirty.
        */
        get: function () {
            return this.i.bb;
        },
        set: function (v) {
            this.i.bb = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "isDataDirty", {
        /**
         * Gets if the data of the cell is dirty.
        */
        get: function () {
            return this.i.au;
        },
        set: function (v) {
            this.i.au = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "isPlaceholdContentNeeded", {
        /**
         * Gets if placeholder content is needed when virtualized.
        */
        get: function () {
            return this.i.a4;
        },
        set: function (v) {
            this.i.a4 = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "actionManager", {
        /**
         * Gets the action manager to propagate actions back to the grid.
        */
        get: function () {
            return this.i.c;
        },
        set: function (v) {
            this.i.c = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "isRowPinned", {
        /**
         * Gets if this cell belongs to a row that has been marked as pinned.
        */
        get: function () {
            return this.i.a6;
        },
        set: function (v) {
            this.i.a6 = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "isRowSticky", {
        /**
         * Gets if this cell belongs to a row that will stick to the top of the grid.
        */
        get: function () {
            return this.i.a7;
        },
        set: function (v) {
            this.i.a7 = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "isLastStickyRow", {
        /**
         * Gets if this cell is the last row that can stick to the top of the grid.
        */
        get: function () {
            return this.i.a2;
        },
        set: function (v) {
            this.i.a2 = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "indent", {
        /**
         * Gets the indent level of the cell.
        */
        get: function () {
            return this.i.e5;
        },
        set: function (v) {
            this.i.e5 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "rowItem", {
        get: function () {
            return this.i.gp;
        },
        set: function (v) {
            this.i.gp = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "x", {
        /**
         * Gets the X position of the cell within the content.
        */
        get: function () {
            return this.i.cc;
        },
        set: function (v) {
            this.i.cc = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "y", {
        /**
         * Gets the Y position of the cell within the content.
        */
        get: function () {
            return this.i.cd;
        },
        set: function (v) {
            this.i.cd = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "snappedX", {
        /**
         * Gets the pixel snapped X position of the cell within the content.
        */
        get: function () {
            return this.i.f2;
        },
        set: function (v) {
            this.i.f2 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "snappedY", {
        /**
         * Gets the snapped Y position of the cell within the content.
        */
        get: function () {
            return this.i.f4;
        },
        set: function (v) {
            this.i.f4 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "editOpacity", {
        /**
         * Gets or sets the opacity for cells that have unsaved edits.
        */
        get: function () {
            return this.i.b2;
        },
        set: function (v) {
            this.i.b2 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "contentOpacity", {
        /**
         * Gets or sets the opacity of the content of the cell.
        */
        get: function () {
            return this.i.b1;
        },
        set: function (v) {
            this.i.b1 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "actualContentOpacity", {
        /**
         * Gets the actual content opacity of the cell.
        */
        get: function () {
            return this.i.bz;
        },
        set: function (v) {
            this.i.bz = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "opacity", {
        /**
         * Gets or sets the opacity of the cell.
        */
        get: function () {
            return this.i.b6;
        },
        set: function (v) {
            this.i.b6 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "actualOpacity", {
        /**
         * Gets the actual opacity of the cell.
        */
        get: function () {
            return this.i.b0;
        },
        set: function (v) {
            this.i.b0 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "height", {
        /**
         * Gets the height of the cell.
        */
        get: function () {
            return this.i.e0;
        },
        set: function (v) {
            this.i.e0 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "width", {
        /**
         * Gets the width of the cell.
        */
        get: function () {
            return this.i.gf;
        },
        set: function (v) {
            this.i.gf = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "isSelected", {
        /**
         * Gets if the cell is selected.
        */
        get: function () {
            return this.i.a9;
        },
        set: function (v) {
            this.i.a9 = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "selectedStatus", {
        /**
         * Gets the amount that the cell is selected. This is a value between 0 and 1.
        */
        get: function () {
            return this.i.b8;
        },
        set: function (v) {
            this.i.b8 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "activationStatus", {
        /**
         * Gets the amount that the cell is activated. This is a value between 0 and 1.
        */
        get: function () {
            return this.i.by;
        },
        set: function (v) {
            this.i.by = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "hoverStatus", {
        /**
         * Gets the amount that the cell is hovered. This is a value between 0 and 1.
        */
        get: function () {
            return this.i.b3;
        },
        set: function (v) {
            this.i.b3 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "horizontalAlignment", {
        /**
         * Gets or sets the horiztonal alignment of the cell content.
        */
        get: function () {
            return this.i.f;
        },
        set: function (v) {
            this.i.f = ensureEnum(CellContentHorizontalAlignment_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "verticalAlignment", {
        /**
         * Gets or sets the vertical alignment of the cell content.
        */
        get: function () {
            return this.i.h;
        },
        set: function (v) {
            this.i.h = ensureEnum(CellContentVerticalAlignment_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "background", {
        /**
         * Gets or sets the background color of the cell.
        */
        get: function () {
            return brushToString(this.i.ke);
        },
        set: function (v) {
            this.i.ke = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "border", {
        /**
         * Gets or sets the border color of the cell.
        */
        get: function () {
            return brushToString(this.i.kf);
        },
        set: function (v) {
            this.i.kf = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "actualBackground", {
        /**
         * Gets the actual background color of the cell
        */
        get: function () {
            return brushToString(this.i.kb);
        },
        set: function (v) {
            this.i.kb = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "actualBorder", {
        /**
         * Gets the actual background color of the cell
        */
        get: function () {
            return brushToString(this.i.kc);
        },
        set: function (v) {
            this.i.kc = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "activationBorder", {
        /**
         * Gets the actual background color of the cell
        */
        get: function () {
            return brushToString(this.i.ka);
        },
        set: function (v) {
            this.i.ka = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "errorBorder", {
        /**
         * Gets or sets the error border color of the cell.
        */
        get: function () {
            return brushToString(this.i.kh);
        },
        set: function (v) {
            this.i.kh = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "selectedBackground", {
        /**
         * Gets or sets the selected background color of the cell.
        */
        get: function () {
            return brushToString(this.i.km);
        },
        set: function (v) {
            this.i.km = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "hoverBackground", {
        /**
         * Gets or sets the hover background color of the cell.
        */
        get: function () {
            return brushToString(this.i.kj);
        },
        set: function (v) {
            this.i.kj = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "sortIndicatorColor", {
        /**
         * Gets or sets the color for the sort indicator icon.
        */
        get: function () {
            return brushToString(this.i.kn);
        },
        set: function (v) {
            this.i.kn = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "stickyRowBackground", {
        /**
         * Gets or sets the background color for the cell when it is stuck to the top of the grid as a pinned row.
        */
        get: function () {
            return brushToString(this.i.ko);
        },
        set: function (v) {
            this.i.ko = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "pinnedRowBackground", {
        /**
         * Gets or sets the background color for the cell that has been marked as pinned.
        */
        get: function () {
            return brushToString(this.i.kl);
        },
        set: function (v) {
            this.i.kl = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "lastStickyRowBackground", {
        /**
         * Gets or sets the color for the last row in the sticky row area.
        */
        get: function () {
            return brushToString(this.i.kk);
        },
        set: function (v) {
            this.i.kk = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "pinnedRowOpacity", {
        /**
         * Gets or sets the color to use for displaying text.
        */
        get: function () {
            return this.i.b7;
        },
        set: function (v) {
            this.i.b7 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "originalValue", {
        /**
         * Gets or sets the original value for the cell, before processing.
        */
        get: function () {
            return this.i.go;
        },
        set: function (v) {
            this.i.go = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "renderValue", {
        /**
         * Gets or sets the text value, if any, which was rendered by a text cell.
        */
        get: function () {
            return this.i.ip;
        },
        set: function (v) {
            this.i.ip = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "textColor", {
        /**
         * Gets or sets the color of the text for the cell, if any.
        */
        get: function () {
            return brushToString(this.i.kp);
        },
        set: function (v) {
            this.i.kp = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "actualTextColor", {
        /**
         * Gets the actual color of the text for the cell, if any.
        */
        get: function () {
            return brushToString(this.i.kd);
        },
        set: function (v) {
            this.i.kd = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "deletedTextColor", {
        /**
         * Gets or sets the text color for cells in deleted rows.
        */
        get: function () {
            return brushToString(this.i.kg);
        },
        set: function (v) {
            this.i.kg = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "font", {
        get: function () {
            if (this.i.af == null) {
                return null;
            }
            return this.i.af.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.af = fi;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "actualFont", {
        get: function () {
            if (this.i.ad == null) {
                return null;
            }
            return this.i.ad.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.ad = fi;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "lineBreakMode", {
        /**
         * Gets or sets the line break mode to use if text is present in the cell.
        */
        get: function () {
            return this.i.z;
        },
        set: function (v) {
            this.i.z = ensureEnum(TextCellLineBreakMode_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "virtualizationPercentage", {
        /**
         * Gets or sets the virtualization percentage value. This is between 0 an 1, and indicates how virtual the content is at present.
        */
        get: function () {
            return this.i.cb;
        },
        set: function (v) {
            this.i.cb = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "paddingLeft", {
        /**
         * Gets or sets the left padding to use for the content.
        */
        get: function () {
            return this.i.fo;
        },
        set: function (v) {
            this.i.fo = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "paddingTop", {
        /**
         * Gets or sets the top padding to use for the content.
        */
        get: function () {
            return this.i.fs;
        },
        set: function (v) {
            this.i.fs = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "paddingRight", {
        /**
         * Gets or sets the right padding to use for the content.
        */
        get: function () {
            return this.i.fq;
        },
        set: function (v) {
            this.i.fq = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "paddingBottom", {
        /**
         * Gets or sets the bottom padding to use for the content.
        */
        get: function () {
            return this.i.fm;
        },
        set: function (v) {
            this.i.fm = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "actualPaddingLeft", {
        /**
         * Gets or sets the left padding to use for the content.
        */
        get: function () {
            return this.i.d1;
        },
        set: function (v) {
            this.i.d1 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "actualPaddingTop", {
        /**
         * Gets or sets the top padding to use for the content.
        */
        get: function () {
            return this.i.d5;
        },
        set: function (v) {
            this.i.d5 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "actualPaddingRight", {
        /**
         * Gets or sets the right padding to use for the content.
        */
        get: function () {
            return this.i.d3;
        },
        set: function (v) {
            this.i.d3 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "actualPaddingBottom", {
        /**
         * Gets or sets the bottom padding to use for the content.
        */
        get: function () {
            return this.i.dz;
        },
        set: function (v) {
            this.i.dz = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "borderLeftWidth", {
        /**
         * Gets or sets the left border to use for the content.
        */
        get: function () {
            return this.i.eb;
        },
        set: function (v) {
            this.i.eb = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "borderTopWidth", {
        /**
         * Gets or sets the top border to use for the content.
        */
        get: function () {
            return this.i.eg;
        },
        set: function (v) {
            this.i.eg = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "borderRightWidth", {
        /**
         * Gets or sets the right border to use for the content.
        */
        get: function () {
            return this.i.ee;
        },
        set: function (v) {
            this.i.ee = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "borderBottomWidth", {
        /**
         * Gets or sets the bottom border to use for the content.
        */
        get: function () {
            return this.i.d9;
        },
        set: function (v) {
            this.i.d9 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "activationBorderLeftWidth", {
        /**
         * Gets or sets the left activation border to use for the content.
        */
        get: function () {
            return this.i.dd;
        },
        set: function (v) {
            this.i.dd = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "activationBorderTopWidth", {
        /**
         * Gets or sets the top activation border to use for the content.
        */
        get: function () {
            return this.i.di;
        },
        set: function (v) {
            this.i.di = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "activationBorderRightWidth", {
        /**
         * Gets or sets the right activation border to use for the content.
        */
        get: function () {
            return this.i.dg;
        },
        set: function (v) {
            this.i.dg = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "activationBorderBottomWidth", {
        /**
         * Gets or sets the bottom activation border to use for the content.
        */
        get: function () {
            return this.i.db;
        },
        set: function (v) {
            this.i.db = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "errorBorderLeftWidth", {
        /**
         * Gets or sets the left error border to use for the content.
        */
        get: function () {
            return this.i.er;
        },
        set: function (v) {
            this.i.er = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "errorBorderTopWidth", {
        /**
         * Gets or sets the top error border to use for the content.
        */
        get: function () {
            return this.i.ew;
        },
        set: function (v) {
            this.i.ew = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "errorBorderRightWidth", {
        /**
         * Gets or sets the right error border to use for the content.
        */
        get: function () {
            return this.i.eu;
        },
        set: function (v) {
            this.i.eu = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "errorBorderBottomWidth", {
        /**
         * Gets or sets the bottom error border to use for the content.
        */
        get: function () {
            return this.i.ep;
        },
        set: function (v) {
            this.i.ep = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "actualBorderLeftWidth", {
        /**
         * Gets or sets the actual left border to use for the content.
        */
        get: function () {
            return this.i.dp;
        },
        set: function (v) {
            this.i.dp = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "actualBorderTopWidth", {
        /**
         * Gets or sets the actual top border to use for the content.
        */
        get: function () {
            return this.i.du;
        },
        set: function (v) {
            this.i.du = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "actualBorderRightWidth", {
        /**
         * Gets or sets the actual right border to use for the content.
        */
        get: function () {
            return this.i.ds;
        },
        set: function (v) {
            this.i.ds = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "actualBorderBottomWidth", {
        /**
         * Gets or sets the actual bottom border to use for the content.
        */
        get: function () {
            return this.i.dm;
        },
        set: function (v) {
            this.i.dm = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "sortDirection", {
        /**
         * Gets the current sort direction for the column containing the cell.
        */
        get: function () {
            return this.i.m;
        },
        set: function (v) {
            this.i.m = ensureEnum(ColumnSortDirection_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "isExpanded", {
        /**
         * Gets the expansion state of the cell.
        */
        get: function () {
            return this.i.az;
        },
        set: function (v) {
            this.i.az = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "isCollapsable", {
        /**
         * Gets if the cell needs to display an expansion indicator.
        */
        get: function () {
            return this.i.ar;
        },
        set: function (v) {
            this.i.ar = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "pinned", {
        /**
         * Gets the fixed column position of this cell.
        */
        get: function () {
            return this.i.x;
        },
        set: function (v) {
            this.i.x = ensureEnum(PinnedPositions_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "editFont", {
        get: function () {
            if (this.i.ae == null) {
                return null;
            }
            return this.i.ae.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.ae = fi;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "isEdited", {
        /**
         * Gets whether the cell has been edited.
        */
        get: function () {
            return this.i.ay;
        },
        set: function (v) {
            this.i.ay = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "isDeleted", {
        /**
         * Gets whether the cell is part of a deleted row.
        */
        get: function () {
            return this.i.av;
        },
        set: function (v) {
            this.i.av = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "editError", {
        /**
         * Gets or sets the error message for the cell.
        */
        get: function () {
            return this.i.hl;
        },
        set: function (v) {
            this.i.hl = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "isInEditMode", {
        /**
         * Gets whether the cell is in edit mode.
        */
        get: function () {
            return this.i.a1;
        },
        set: function (v) {
            this.i.a1 = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCellInfo.prototype, "editID", {
        get: function () {
            return this.i.en;
        },
        set: function (v) {
            this.i.en = +v;
        },
        enumerable: true,
        configurable: true
    });
    IgrCellInfo.prototype.findByName = function (name) {
        return null;
    };
    IgrCellInfo.prototype.isCustomFieldDirty = function (propertyName) {
        var iv = this.i.at(propertyName);
        return (iv);
    };
    /**
     * Gets if a named property is dirty.
    
    * @param propertyId  * The property id to check.
    */
    IgrCellInfo.prototype.isDirtyById = function (propertyId_) {
        var iv = this.i.ax(propertyId_);
        return (iv);
    };
    /**
     * Gets if a named property is dirty.
    
    * @param propertyName  * The property name to check.
    */
    IgrCellInfo.prototype.isDirty = function (propertyName) {
        var iv = this.i.aw(propertyName);
        return (iv);
    };
    IgrCellInfo.prototype.setNamedValue = function (valueName, value) {
        this.i.jt(valueName, value);
    };
    /**
     * Returns if there is a named value stored for the cell.
    
    * @param valueName  * The name of the value to check.
    */
    IgrCellInfo.prototype.hasNamedValue = function (valueName) {
        var iv = this.i.ap(valueName);
        return (iv);
    };
    /**
     * Removes a named value from the cell.
    
    * @param valueName  * The name of the value to remove.
    */
    IgrCellInfo.prototype.removeNamedValue = function (valueName) {
        this.i.jq(valueName);
    };
    /**
     * Gets a named value from the cell.
    
    * @param valueName  * The name of the value to get.
    */
    IgrCellInfo.prototype.getNamedValue = function (valueName) {
        var iv = this.i.gm(valueName);
        return (iv);
    };
    return IgrCellInfo;
}());
export { IgrCellInfo };
//# sourceMappingURL=igr-cell-info.js.map
