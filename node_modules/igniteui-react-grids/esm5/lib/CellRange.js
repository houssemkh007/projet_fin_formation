/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { Base, markType } from "igniteui-react-core";
/**
 * @hidden
 */
var CellRange = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(CellRange, _super);
    function CellRange() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.g = -2147483648;
        _this.e = -2147483648;
        _this.h = -2147483648;
        _this.f = -2147483648;
        return _this;
    }
    Object.defineProperty(CellRange.prototype, "k", {
        get: function () {
            return this.g;
        },
        set: function (a) {
            this.g = a;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CellRange.prototype, "i", {
        get: function () {
            return this.e;
        },
        set: function (a) {
            this.e = a;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CellRange.prototype, "l", {
        get: function () {
            return this.h;
        },
        set: function (a) {
            this.h = a;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CellRange.prototype, "j", {
        get: function () {
            return this.f;
        },
        set: function (a) {
            this.f = a;
        },
        enumerable: true,
        configurable: true
    });
    CellRange.prototype.b = function (a, b) {
        return this.d(a) && this.c(b);
    };
    CellRange.prototype.d = function (a) {
        return a >= this.l && a <= this.j;
    };
    CellRange.prototype.c = function (a) {
        return a >= this.k && a <= this.i;
    };
    CellRange.prototype.a = function () {
        var a = new CellRange();
        a.k = this.k;
        a.i = this.i;
        a.l = this.l;
        a.j = this.j;
        return a;
    };
    CellRange.$t = markType(CellRange, 'CellRange');
    return CellRange;
}(Base));
export { CellRange };
//# sourceMappingURL=CellRange.js.map
