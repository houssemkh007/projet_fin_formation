/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { Base, INotifyPropertyChanged_$type, PropertyChangedEventArgs, runOn, delegateRemove, delegateCombine, markType } from "igniteui-react-core";
import { GridAnimationPhaseSettings } from "./GridAnimationPhaseSettings";
/**
 * @hidden
 */
var GridAnimationSettings = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(GridAnimationSettings, _super);
    function GridAnimationSettings() {
        var _this = _super.call(this) || this;
        _this.i = null;
        _this.b = null;
        _this.d = null;
        _this.a = null;
        _this.c = null;
        _this.propertyChanged = null;
        _this.b = new GridAnimationPhaseSettings();
        _this.b.l = 500;
        _this.b.c = 1;
        _this.b.e = false;
        _this.d = new GridAnimationPhaseSettings();
        _this.d.l = 300;
        _this.d.c = 1;
        _this.d.n = 0;
        _this.d.e = true;
        _this.a = new GridAnimationPhaseSettings();
        _this.a.l = 0;
        _this.a.c = 1;
        _this.a.n = 0;
        _this.a.e = true;
        _this.c = new GridAnimationPhaseSettings();
        _this.c.l = 100;
        _this.c.c = 1;
        _this.c.n = 0;
        _this.c.e = true;
        return _this;
    }
    Object.defineProperty(GridAnimationSettings.prototype, "f", {
        get: function () {
            return this.b;
        },
        set: function (a) {
            var b = this.b;
            this.b = a;
            this.p("CellDataLoadedMainPhase", b, this.b);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GridAnimationSettings.prototype, "h", {
        get: function () {
            return this.d;
        },
        set: function (a) {
            var b = this.d;
            this.d = a;
            this.p("RowSelectionMainPhase", b, this.d);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GridAnimationSettings.prototype, "e", {
        get: function () {
            return this.a;
        },
        set: function (a) {
            var b = this.a;
            this.a = a;
            this.p("CellActivationMainPhase", b, this.a);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GridAnimationSettings.prototype, "g", {
        get: function () {
            return this.c;
        },
        set: function (a) {
            var b = this.c;
            this.c = a;
            this.p("RowHoverMainPhase", b, this.c);
        },
        enumerable: true,
        configurable: true
    });
    GridAnimationSettings.prototype.p = function (a, b, c) {
        if (this.propertyChanged != null) {
            this.propertyChanged(this, new PropertyChangedEventArgs(a));
        }
        this.q(a, b, c);
    };
    GridAnimationSettings.prototype.q = function (a, b, c) {
        switch (a) {
            case "CellDataLoadedMainPhase":
                if (b != null) {
                    var d = b;
                    d.propertyChanged = delegateRemove(d.propertyChanged, runOn(this, this.o));
                }
                if (c != null) {
                    var e = c;
                    e.propertyChanged = delegateCombine(e.propertyChanged, runOn(this, this.o));
                }
                break;
            case "RowSelectionMainPhase":
                if (b != null) {
                    var f = b;
                    f.propertyChanged = delegateRemove(f.propertyChanged, runOn(this, this.r));
                }
                if (c != null) {
                    var g = c;
                    g.propertyChanged = delegateCombine(g.propertyChanged, runOn(this, this.r));
                }
                break;
            case "CellActivationMainPhase":
                if (b != null) {
                    var h = b;
                    h.propertyChanged = delegateRemove(h.propertyChanged, runOn(this, this.n));
                }
                if (c != null) {
                    var i = c;
                    i.propertyChanged = delegateCombine(i.propertyChanged, runOn(this, this.n));
                }
                break;
        }
    };
    GridAnimationSettings.prototype.o = function (a, b) {
        this.p("CellDataLoadedMainPhase", this.f, this.f);
    };
    GridAnimationSettings.prototype.r = function (a, b) {
        this.p("RowSelectionMainPhase", this.h, this.h);
    };
    GridAnimationSettings.prototype.n = function (a, b) {
        this.p("CellActivationMainPhase", this.e, this.e);
    };
    GridAnimationSettings.$t = markType(GridAnimationSettings, 'GridAnimationSettings', Base.$, [INotifyPropertyChanged_$type]);
    return GridAnimationSettings;
}(Base));
export { GridAnimationSettings };
//# sourceMappingURL=GridAnimationSettings.js.map
