import * as tslib_1 from "tslib";
import * as React from 'react';
import { ensureEnum, brushToString, stringToBrush, ensureBool, initializePropertiesFromCss, NamePatcher, isValidProp, toSpinal, getModifiedProps } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { MultiColumnComboBox } from './MultiColumnComboBox';
import { BaseControlTheme_$type } from "igniteui-react-core";
import { ControlDisplayDensity_$type } from "igniteui-react-core";
import { SortMode_$type } from './SortMode';
import { CornerRadius } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { IgrMultiColumnComboBoxTextChangedEventArgs } from './igr-multi-column-combo-box-text-changed-event-args';
import { IgrMultiColumnComboBoxValueChangedEventArgs } from './igr-multi-column-combo-box-value-changed-event-args';
import { IgrGotFocusEventArgs } from './igr-got-focus-event-args';
import { IgrLostFocusEventArgs } from './igr-lost-focus-event-args';
var IgrMultiColumnComboBox = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(IgrMultiColumnComboBox, _super);
    function IgrMultiColumnComboBox(props) {
        var _this = _super.call(this, props) || this;
        _this._implementation = null;
        _this._reactRenderer = null;
        _this.__p = null;
        _this._hasUserValues = new Set();
        _this._stylingContainer = null;
        _this._stylingParent = null;
        _this._inStyling = false;
        _this._gotFocus = null;
        _this._gotFocus_wrapped = null;
        _this._lostFocus = null;
        _this._lostFocus_wrapped = null;
        _this._textChanged = null;
        _this._textChanged_wrapped = null;
        _this._valueChanged = null;
        _this._valueChanged_wrapped = null;
        if (_this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));
        }
        _this._implementation = _this.createImplementation();
        _this._getMainRef = _this._getMainRef.bind(_this);
        var multiColumnComboBox = _this.i;
        multiColumnComboBox.notifySizeChanged();
        if (props) {
            _this.initializeProperties();
        }
        _this._initialized = true;
        return _this;
    }
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "height", {
        get: function () {
            return this._height;
        },
        set: function (value) {
            this._height = value;
            if (this._elRef) {
                this._elRef.style.height = value;
                this.i.notifySizeChanged();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "width", {
        get: function () {
            return this._width;
        },
        set: function (value) {
            this._width = value;
            if (this._elRef) {
                this._elRef.style.height = value;
                this.i.notifySizeChanged();
            }
        },
        enumerable: true,
        configurable: true
    });
    IgrMultiColumnComboBox.prototype._getMainRef = function (ref) {
        this._elRef = ref;
        this.verifyReferences();
    };
    IgrMultiColumnComboBox.prototype.render = function () {
        var children = [];
        // We don't actually want to support child content. 
        //let propChildren = this.props.children;        
        //React.Children.forEach(
        //    propChildren, (ch: any) => {
        //        children.push(React.cloneElement(ch));
        //    });
        if (this._portalManager)
            this._portalManager.onRender(children);
        var div = React.createElement("div", {
            ref: this._getMainRef,
            className: "ig-multi-column-combo-box igr-multi-column-combo-box",
            children: children
        });
        return div;
    };
    IgrMultiColumnComboBox.prototype.verifyReferences = function () {
        var _this = this;
        if (this._elRef) {
            this.requestRender = this.requestRender.bind(this);
            this._portalManager = new PortalManager("popupContent", this.requestRender);
            this._reactRenderer = new ReactRenderer(this._elRef, document, true, {}, this._portalManager);
            if (document) {
                this._elRef.style.display = "block";
                this._elRef.style.width = "100%";
                this._elRef.style.height = "100%";
            }
            // render needs to fire again after the portalManager is created. 
            this.requestRender();
            this.i.provideRenderer(this._reactRenderer);
            this._reactRenderer.addSizeWatcher(function () {
                _this.i.notifySizeChanged();
            });
        }
    };
    IgrMultiColumnComboBox.prototype.requestRender = function () {
        if (this._initialized)
            this.setState({});
    };
    IgrMultiColumnComboBox.prototype.shouldComponentUpdate = function (nextProps, nextState) {
        var e_1, _a;
        var mod = getModifiedProps(this.props, nextProps);
        try {
            for (var _b = tslib_1.__values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                if (isValidProp(this, p)) {
                    this[p] = mod[p];
                }
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
        return true;
    };
    IgrMultiColumnComboBox.prototype.initializeProperties = function () {
        var e_2, _a;
        try {
            for (var _b = tslib_1.__values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                if (isValidProp(this, p)) {
                    this[p] = this.props[p];
                }
            }
        }
        catch (e_2_1) {
            e_2 = { error: e_2_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_2)
                    throw e_2.error;
            }
        }
    };
    // supports angular themes or custom properties set in CSS
    IgrMultiColumnComboBox.prototype.updateStyle = function () {
        this._styling(this._elRef, this);
    };
    IgrMultiColumnComboBox.prototype.componentWillUnmount = function () {
        this.i.destroy();
        if (this._reactRenderer)
            this._reactRenderer.destroy();
    };
    IgrMultiColumnComboBox.prototype.componentDidMount = function () {
        this._elRef.style.width = this._width ? this._width : "";
        this._elRef.style.height = this._height ? this._height : "";
        this.i.notifySizeChanged();
        this.initializeContent();
    };
    IgrMultiColumnComboBox.prototype.initializeContent = function () {
        this._styling(this._elRef, this);
        this.updateStyle();
        this.i.notifySizeChanged();
    };
    IgrMultiColumnComboBox.prototype.createImplementation = function () {
        return new MultiColumnComboBox();
    };
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "i", {
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "showClearButton", {
        /**
     * Gets or sets the ShowClearButton property to detirmine if the clear button is shown
    */
        get: function () {
            return this.i.a9;
        },
        set: function (v) {
            this.i.a9 = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "fields", {
        /**
         * Gets or sets the desired properties for the data source to load. If specified the data source may decide to constrain the properties it fetches to these properties and must make sure that at least those properties are loaded, rather than the default behavior for that data source.
        */
        get: function () {
            return this.i.g;
        },
        set: function (v) {
            this.i.g = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "backgroundColor", {
        /**
         * Gets or sets the background color to use for the input group.
        */
        get: function () {
            return brushToString(this.i.g4);
        },
        set: function (v) {
            this.i.g4 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "actualBackgroundColor", {
        /**
         * Gets the actual opacity to use for the underline ripple element.
        */
        get: function () {
            return brushToString(this.i.gt);
        },
        set: function (v) {
            this.i.gt = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "baseTheme", {
        /**
         * Gets or sets the base built in theme to use for the component.
        */
        get: function () {
            return this.i.aa;
        },
        set: function (v) {
            this.i.aa = ensureEnum(BaseControlTheme_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "actualBaseTheme", {
        /**
         * Gets the actual display baseTheme to use for the component.
        */
        get: function () {
            return this.i.z;
        },
        set: function (v) {
            this.i.z = ensureEnum(BaseControlTheme_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "borderColor", {
        /**
         * Gets or sets the color to use the border of the input group.
        */
        get: function () {
            return brushToString(this.i.g5);
        },
        set: function (v) {
            this.i.g5 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "actualBorderColor", {
        /**
         * Gets the actual item background color.
        */
        get: function () {
            return brushToString(this.i.gu);
        },
        set: function (v) {
            this.i.gu = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "borderWidth", {
        /**
         * Gets or sets the border width to use for the border of the item group.
        */
        get: function () {
            return this.i.b4;
        },
        set: function (v) {
            this.i.b4 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "actualBorderWidth", {
        /**
         * Gets the actual item border width.
        */
        get: function () {
            return this.i.bu;
        },
        set: function (v) {
            this.i.bu = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "columnHeadersVisible", {
        /**
         * Gets or sets the visibility of the drop down button.
        */
        get: function () {
            return this.i.columnHeadersVisible;
        },
        set: function (v) {
            this.i.columnHeadersVisible = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "contentPaddingBottom", {
        get: function () {
            return this.i.ht ? this.i.ht.b : NaN;
        },
        set: function (v) {
            this.ensureContentPadding();
            this.i.ht.b = +v;
            this.i.ht = this.i.ht;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "contentPaddingLeft", {
        get: function () {
            return this.i.ht ? this.i.ht.c : NaN;
        },
        set: function (v) {
            this.ensureContentPadding();
            this.i.ht.c = +v;
            this.i.ht = this.i.ht;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "contentPaddingRight", {
        get: function () {
            return this.i.ht ? this.i.ht.d : NaN;
        },
        set: function (v) {
            this.ensureContentPadding();
            this.i.ht.d = +v;
            this.i.ht = this.i.ht;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "contentPaddingTop", {
        get: function () {
            return this.i.ht ? this.i.ht.e : NaN;
        },
        set: function (v) {
            this.ensureContentPadding();
            this.i.ht.e = +v;
            this.i.ht = this.i.ht;
        },
        enumerable: true,
        configurable: true
    });
    IgrMultiColumnComboBox.prototype.ensureContentPadding = function () {
        if (this.i.ht) {
            return;
        }
        this.i.ht = new Thickness(2);
    };
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "actualContentPaddingBottom", {
        get: function () {
            return this.i.hs ? this.i.hs.b : NaN;
        },
        set: function (v) {
            this.ensureActualContentPadding();
            this.i.hs.b = +v;
            this.i.hs = this.i.hs;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "actualContentPaddingLeft", {
        get: function () {
            return this.i.hs ? this.i.hs.c : NaN;
        },
        set: function (v) {
            this.ensureActualContentPadding();
            this.i.hs.c = +v;
            this.i.hs = this.i.hs;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "actualContentPaddingRight", {
        get: function () {
            return this.i.hs ? this.i.hs.d : NaN;
        },
        set: function (v) {
            this.ensureActualContentPadding();
            this.i.hs.d = +v;
            this.i.hs = this.i.hs;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "actualContentPaddingTop", {
        get: function () {
            return this.i.hs ? this.i.hs.e : NaN;
        },
        set: function (v) {
            this.ensureActualContentPadding();
            this.i.hs.e = +v;
            this.i.hs = this.i.hs;
        },
        enumerable: true,
        configurable: true
    });
    IgrMultiColumnComboBox.prototype.ensureActualContentPadding = function () {
        if (this.i.hs) {
            return;
        }
        this.i.hs = new Thickness(2);
    };
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "cornerRadiusBottomRight", {
        get: function () {
            return this.i.f5 ? this.i.f5.b : NaN;
        },
        set: function (v) {
            this.ensureCornerRadius();
            this.i.f5.b = +v;
            this.i.f5 = this.i.f5;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "cornerRadiusBottomLeft", {
        get: function () {
            return this.i.f5 ? this.i.f5.a : NaN;
        },
        set: function (v) {
            this.ensureCornerRadius();
            this.i.f5.a = +v;
            this.i.f5 = this.i.f5;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "cornerRadiusTopLeft", {
        get: function () {
            return this.i.f5 ? this.i.f5.c : NaN;
        },
        set: function (v) {
            this.ensureCornerRadius();
            this.i.f5.c = +v;
            this.i.f5 = this.i.f5;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "cornerRadiusTopRight", {
        get: function () {
            return this.i.f5 ? this.i.f5.d : NaN;
        },
        set: function (v) {
            this.ensureCornerRadius();
            this.i.f5.d = +v;
            this.i.f5 = this.i.f5;
        },
        enumerable: true,
        configurable: true
    });
    IgrMultiColumnComboBox.prototype.ensureCornerRadius = function () {
        if (this.i.f5) {
            return;
        }
        this.i.f5 = new CornerRadius(2);
    };
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "actualCornerRadiusBottomRight", {
        get: function () {
            return this.i.f4 ? this.i.f4.b : NaN;
        },
        set: function (v) {
            this.ensureActualCornerRadius();
            this.i.f4.b = +v;
            this.i.f4 = this.i.f4;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "actualCornerRadiusBottomLeft", {
        get: function () {
            return this.i.f4 ? this.i.f4.a : NaN;
        },
        set: function (v) {
            this.ensureActualCornerRadius();
            this.i.f4.a = +v;
            this.i.f4 = this.i.f4;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "actualCornerRadiusTopLeft", {
        get: function () {
            return this.i.f4 ? this.i.f4.c : NaN;
        },
        set: function (v) {
            this.ensureActualCornerRadius();
            this.i.f4.c = +v;
            this.i.f4 = this.i.f4;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "actualCornerRadiusTopRight", {
        get: function () {
            return this.i.f4 ? this.i.f4.d : NaN;
        },
        set: function (v) {
            this.ensureActualCornerRadius();
            this.i.f4.d = +v;
            this.i.f4 = this.i.f4;
        },
        enumerable: true,
        configurable: true
    });
    IgrMultiColumnComboBox.prototype.ensureActualCornerRadius = function () {
        if (this.i.f4) {
            return;
        }
        this.i.f4 = new CornerRadius(2);
    };
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "dataSourceDesiredProperties", {
        /**
         * Gets or sets the desired properties for the data source to load. If specified the data source may decide to constrain the properties it fetches to these properties and must make sure that at least those properties are loaded, rather than the default behavior for that data source.
        */
        get: function () {
            return this.i.f;
        },
        set: function (v) {
            this.i.f = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "density", {
        /**
         * Gets or sets the display Density to use for the buttons and dropdown grid.
        */
        get: function () {
            return this.i.density;
        },
        set: function (v) {
            this.i.density = ensureEnum(ControlDisplayDensity_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "actualDensity", {
        /**
         * Gets the actual display Density to use for the component.
        */
        get: function () {
            return this.i.ae;
        },
        set: function (v) {
            this.i.ae = ensureEnum(ControlDisplayDensity_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "dropDownButtonVisible", {
        /**
         * Gets or sets the visibility of the drop down button.
        */
        get: function () {
            return this.i.dropDownButtonVisible;
        },
        set: function (v) {
            this.i.dropDownButtonVisible = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "focusBorderColor", {
        /**
         * Gets or sets the color to use the hovered background of the inputs in the group.
        */
        get: function () {
            return brushToString(this.i.hh);
        },
        set: function (v) {
            this.i.hh = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "actualFocusBorderColor", {
        /**
         * Gets the actual item border color.
        */
        get: function () {
            return brushToString(this.i.gv);
        },
        set: function (v) {
            this.i.gv = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "focusBorderWidth", {
        /**
         * Gets or sets the border width to use for the border of the item group when focused.
        */
        get: function () {
            return this.i.cg;
        },
        set: function (v) {
            this.i.cg = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "actualFocusBorderWidth", {
        /**
         * Gets the actual item border width.
        */
        get: function () {
            return this.i.bv;
        },
        set: function (v) {
            this.i.bv = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "focusUnderlineColor", {
        /**
         * Gets or sets the color to use for the underline element.
        */
        get: function () {
            return brushToString(this.i.hi);
        },
        set: function (v) {
            this.i.hi = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "actualFocusUnderlineColor", {
        /**
         * Gets the actual color to use for the underline element when focused.
        */
        get: function () {
            return brushToString(this.i.gw);
        },
        set: function (v) {
            this.i.gw = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "focusUnderlineOpacity", {
        /**
         * Gets or sets the color to use for the underline element.
        */
        get: function () {
            return this.i.ch;
        },
        set: function (v) {
            this.i.ch = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "actualFocusUnderlineOpacity", {
        /**
         * Gets the actual opacity to use for the underline element when focused.
        */
        get: function () {
            return this.i.bw;
        },
        set: function (v) {
            this.i.bw = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "focusUnderlineRippleOpacity", {
        /**
         * Gets or sets the opacity to use for the underline ripple element when focused.
        */
        get: function () {
            return this.i.ci;
        },
        set: function (v) {
            this.i.ci = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "actualFocusUnderlineRippleOpacity", {
        /**
         * Gets the actual opacity to use for the underline ripple element when focused.
        */
        get: function () {
            return this.i.bx;
        },
        set: function (v) {
            this.i.bx = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "hoverUnderlineColor", {
        /**
         * Gets or sets the color to use for the underline element.
        */
        get: function () {
            return brushToString(this.i.hj);
        },
        set: function (v) {
            this.i.hj = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "actualHoverUnderlineColor", {
        /**
         * Gets the actual color to use for the underline element.
        */
        get: function () {
            return brushToString(this.i.gx);
        },
        set: function (v) {
            this.i.gx = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "hoverUnderlineOpacity", {
        /**
         * Gets or sets the color to use for the underline element.
        */
        get: function () {
            return this.i.cj;
        },
        set: function (v) {
            this.i.cj = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "actualHoverUnderlineOpacity", {
        /**
         * Gets the actual opacity to use for the underline element when hovered.
        */
        get: function () {
            return this.i.by;
        },
        set: function (v) {
            this.i.by = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "hoverUnderlineWidth", {
        /**
         * Gets or sets the width to use for the underline element when hovered.
        */
        get: function () {
            return this.i.ck;
        },
        set: function (v) {
            this.i.ck = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "actualHoverUnderlineWidth", {
        /**
         * Gets the width to use for the underline element when hovered.
        */
        get: function () {
            return this.i.bz;
        },
        set: function (v) {
            this.i.bz = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "dataSource", {
        /**
         * Gets or sets the data to which to bind the combo box list. This can be some type of array or list, or it can
         * be an IDataSource instance.
        */
        get: function () {
            return this.i.itemsSource;
        },
        set: function (v) {
            this.i.itemsSource = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "actualDataSource", {
        /**
         * Gets the actual data source that is being used by the combo box list. If a collection was provided for the combo box data, an implicit LocalDataSource has been created, and this is available via this property.
        */
        get: function () {
            return this.i.actualDataSource;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "label", {
        /**
         * The text displayed in the label portion of the control.
        */
        get: function () {
            return this.i.eo;
        },
        set: function (v) {
            this.i.eo = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "labelTextColor", {
        /**
         * Gets or sets the color to use for the text.
        */
        get: function () {
            return brushToString(this.i.hk);
        },
        set: function (v) {
            this.i.hk = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "actualLabelTextColor", {
        /**
         * Gets the actual color to use for the text color.
        */
        get: function () {
            return brushToString(this.i.gy);
        },
        set: function (v) {
            this.i.gy = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "labelTextStyle", {
        /**
         * Gets or sets the font to use for the combobox.
        */
        get: function () {
            if (this.i.au == null) {
                return null;
            }
            return this.i.au.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.au = fi;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "actualLabelVisible", {
        /**
         * Gets or sets the visibility of the label.
        */
        get: function () {
            return this.i.actualLabelVisible;
        },
        set: function (v) {
            this.i.actualLabelVisible = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "noMatchesFoundLabel", {
        /**
         * Gets or sets the text to display on the list when no suggested matches are found.
        */
        get: function () {
            return this.i.eu;
        },
        set: function (v) {
            this.i.eu = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "actualNoMatchesFoundLabel", {
        /**
         * Gets the actual text to display on the list when no suggested matches are found.
        */
        get: function () {
            return this.i.actualNoMatchesFoundLabel;
        },
        set: function (v) {
            this.i.actualNoMatchesFoundLabel = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "noMatchesFoundLabelBackgroundColor", {
        /**
         * Gets or sets the color to use for the "no matches found" label.
        */
        get: function () {
            return brushToString(this.i.hl);
        },
        set: function (v) {
            this.i.hl = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "actualNoMatchesFoundLabelBackgroundColor", {
        /**
         * Gets the actual color to use for the "no matches found" label.
        */
        get: function () {
            return brushToString(this.i.gz);
        },
        set: function (v) {
            this.i.gz = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "noMatchesFoundLabelTextColor", {
        /**
         * Gets or sets the color to use for the "no matches found" label.
        */
        get: function () {
            return brushToString(this.i.hm);
        },
        set: function (v) {
            this.i.hm = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "actualNoMatchesFoundLabelTextColor", {
        /**
         * Gets the actual color to use for the "no matches found" label.
        */
        get: function () {
            return brushToString(this.i.g0);
        },
        set: function (v) {
            this.i.g0 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "noMatchesFoundLabelTextStyle", {
        /**
         * Gets or sets the font to use for the combobox.
        */
        get: function () {
            if (this.i.av == null) {
                return null;
            }
            return this.i.av.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.av = fi;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "placeholder", {
        /**
         * Placeholder text which gives the user a hint about what kind of text is expected.
        */
        get: function () {
            return this.i.ez;
        },
        set: function (v) {
            this.i.ez = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "rowSeparatorsVisible", {
        /**
         * Gets or sets the visibility of the row separators in the drop down.
        */
        get: function () {
            return this.i.rowSeparatorsVisible;
        },
        set: function (v) {
            this.i.rowSeparatorsVisible = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "textColor", {
        /**
         * Gets or sets the color to use for the text.
        */
        get: function () {
            return brushToString(this.i.hn);
        },
        set: function (v) {
            this.i.hn = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "actualTextColor", {
        /**
         * Gets the actual color to use for the text color.
        */
        get: function () {
            return brushToString(this.i.g1);
        },
        set: function (v) {
            this.i.g1 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "textStyle", {
        /**
         * Gets or sets the font to use for the combobox.
        */
        get: function () {
            if (this.i.aw == null) {
                return null;
            }
            return this.i.aw.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.aw = fi;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "underlineColor", {
        /**
         * Gets or sets the color to use for the underline element.
        */
        get: function () {
            return brushToString(this.i.ho);
        },
        set: function (v) {
            this.i.ho = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "actualUnderlineColor", {
        /**
         * Gets the actual color to use for the underline element.
        */
        get: function () {
            return brushToString(this.i.g2);
        },
        set: function (v) {
            this.i.g2 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "underlineOpacity", {
        /**
         * Gets or sets the color to use for the underline element.
        */
        get: function () {
            return this.i.cl;
        },
        set: function (v) {
            this.i.cl = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "actualUnderlineOpacity", {
        /**
         * Gets the actual opacity to use for the underline element.
        */
        get: function () {
            return this.i.b0;
        },
        set: function (v) {
            this.i.b0 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "underlineRippleColor", {
        /**
         * Gets or sets the color to use for the underline ripple element.
        */
        get: function () {
            return brushToString(this.i.hp);
        },
        set: function (v) {
            this.i.hp = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "actualUnderlineRippleColor", {
        /**
         * Gets the actual color to use for the underline ripple element.
        */
        get: function () {
            return brushToString(this.i.g3);
        },
        set: function (v) {
            this.i.g3 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "underlineRippleOpacity", {
        /**
         * Gets or sets the opacity to use for the underline ripple element.
        */
        get: function () {
            return this.i.cm;
        },
        set: function (v) {
            this.i.cm = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "actualUnderlineRippleOpacity", {
        /**
         * Gets the actual opacity to use for the underline ripple element.
        */
        get: function () {
            return this.i.b1;
        },
        set: function (v) {
            this.i.b1 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "underlineRippleWidth", {
        /**
         * Gets or sets the width to use for the underline element.
        */
        get: function () {
            return this.i.cn;
        },
        set: function (v) {
            this.i.cn = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "actualUnderlineRippleWidth", {
        /**
         * Gets the actual width to use for the underline element.
        */
        get: function () {
            return this.i.b2;
        },
        set: function (v) {
            this.i.b2 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "underlineWidth", {
        /**
         * Gets or sets the width to use for the underline element.
        */
        get: function () {
            return this.i.co;
        },
        set: function (v) {
            this.i.co = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "actualUnderlineWidth", {
        /**
         * Gets the actual width to use for the underline element.
        */
        get: function () {
            return this.i.b3;
        },
        set: function (v) {
            this.i.b3 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "allowFilter", {
        /**
         * Whether to allow filtering of the combo
        */
        get: function () {
            return this.i.a2;
        },
        set: function (v) {
            this.i.a2 = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "sortMode", {
        /**
         * Returns/sets the action to take when a column header is clicked.
        */
        get: function () {
            return this.i.v;
        },
        set: function (v) {
            this.i.v = ensureEnum(SortMode_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "textField", {
        /**
         * Determines the name of the field in the data source will be used as the Text of the MultiColumnComboBox.
        */
        get: function () {
            return this.i.e7;
        },
        set: function (v) {
            this.i.e7 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "text", {
        /**
         * The text displayed in the edit portion of the control.
        */
        get: function () {
            return this.i.e5;
        },
        set: function (v) {
            this.i.e5 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "valueField", {
        /**
         * Sets or gets the user provided primary key to assume for the data. Certain functionality of the combo (such as the the current Value) requires
         * a way to uniquely identify items in order to work correctly.
         * If a primary key cannot be inferred from the data source, you may need to provide one here.
        */
        get: function () {
            return this.i.j;
        },
        set: function (v) {
            this.i.j = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "actualValueField", {
        /**
         * Gets the actual name of the field in the data source will be used as the Value of the MultiColumnComboBox.
        */
        get: function () {
            return this.i.e;
        },
        set: function (v) {
            this.i.e = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "value", {
        /**
         * Gets or sets the Value of the combo.
         * When the user selects an item from, the value is set based on the specified ValueField field. If not ValueField is specified, then the first field in the data source is used.
         * When the user enters text into the combo, the list is searched based on the TextField field. If a matching string is found, the Value of the combo is the value of the ValueField field in the same row.
         * If the text entered in the combo does not match any item on the list, then the value will return null.
        */
        get: function () {
            return this.i.cv;
        },
        set: function (v) {
            this.i.cv = v;
        },
        enumerable: true,
        configurable: true
    });
    IgrMultiColumnComboBox.prototype.findByName = function (name) {
        return null;
    };
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "hasUserValues", {
        get: function () {
            return this._hasUserValues;
        },
        enumerable: true,
        configurable: true
    });
    IgrMultiColumnComboBox.prototype.__m = function (propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    };
    IgrMultiColumnComboBox.prototype._styling = function (container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        var genericPrefix = "";
        var typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("MultiColumnComboBox");
        var additionalPrefixes = [];
        var prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        var b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            var basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            var parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            var parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    };
    /**
 * Programmatically closes the list.

*/
    IgrMultiColumnComboBox.prototype.closeUp = function () {
        this.i.closeUp();
    };
    /**
     * Programmatically drops down the list.
    
    */
    IgrMultiColumnComboBox.prototype.dropDown = function () {
        this.i.dropDown();
    };
    /**
     * Programmatically focus the combo input area.
    
    */
    IgrMultiColumnComboBox.prototype.focus = function () {
        this.i.focus();
    };
    /**
     * Selects all the text in the combo input area.
    
    */
    IgrMultiColumnComboBox.prototype.select = function () {
        this.i.select();
    };
    /**
     * Exports visual information about the current state of the grid.
    
    */
    IgrMultiColumnComboBox.prototype.exportVisualModel = function () {
        var iv = this.i.cr();
        return (iv);
    };
    /**
     * Returns a serialized copy of the exported visual model
    
    */
    IgrMultiColumnComboBox.prototype.exportSerializedVisualModel = function () {
        var iv = this.i.ea();
        return (iv);
    };
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "gotFocus", {
        get: function () {
            return this._gotFocus;
        },
        set: function (ev) {
            var _this = this;
            if (this._gotFocus_wrapped !== null) {
                this.i.gotFocus = delegateRemove(this.i.gotFocus, this._gotFocus_wrapped);
                this._gotFocus_wrapped = null;
                this._gotFocus = null;
            }
            this._gotFocus = ev;
            this._gotFocus_wrapped = function (o, e) {
                var outerArgs = new IgrGotFocusEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeGotFocus) {
                    _this.beforeGotFocus(_this, outerArgs);
                }
                if (_this._gotFocus) {
                    _this._gotFocus(_this, outerArgs);
                }
            };
            this.i.gotFocus = delegateCombine(this.i.gotFocus, this._gotFocus_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "lostFocus", {
        get: function () {
            return this._lostFocus;
        },
        set: function (ev) {
            var _this = this;
            if (this._lostFocus_wrapped !== null) {
                this.i.lostFocus = delegateRemove(this.i.lostFocus, this._lostFocus_wrapped);
                this._lostFocus_wrapped = null;
                this._lostFocus = null;
            }
            this._lostFocus = ev;
            this._lostFocus_wrapped = function (o, e) {
                var outerArgs = new IgrLostFocusEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeLostFocus) {
                    _this.beforeLostFocus(_this, outerArgs);
                }
                if (_this._lostFocus) {
                    _this._lostFocus(_this, outerArgs);
                }
            };
            this.i.lostFocus = delegateCombine(this.i.lostFocus, this._lostFocus_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "textChanged", {
        get: function () {
            return this._textChanged;
        },
        set: function (ev) {
            var _this = this;
            if (this._textChanged_wrapped !== null) {
                this.i.textChanged = delegateRemove(this.i.textChanged, this._textChanged_wrapped);
                this._textChanged_wrapped = null;
                this._textChanged = null;
            }
            this._textChanged = ev;
            this._textChanged_wrapped = function (o, e) {
                var outerArgs = new IgrMultiColumnComboBoxTextChangedEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeTextChanged) {
                    _this.beforeTextChanged(_this, outerArgs);
                }
                if (_this._textChanged) {
                    _this._textChanged(_this, outerArgs);
                }
            };
            this.i.textChanged = delegateCombine(this.i.textChanged, this._textChanged_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrMultiColumnComboBox.prototype, "valueChanged", {
        get: function () {
            return this._valueChanged;
        },
        set: function (ev) {
            var _this = this;
            if (this._valueChanged_wrapped !== null) {
                this.i.valueChanged = delegateRemove(this.i.valueChanged, this._valueChanged_wrapped);
                this._valueChanged_wrapped = null;
                this._valueChanged = null;
            }
            this._valueChanged = ev;
            this._valueChanged_wrapped = function (o, e) {
                var outerArgs = new IgrMultiColumnComboBoxValueChangedEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeValueChanged) {
                    _this.beforeValueChanged(_this, outerArgs);
                }
                if (_this._valueChanged) {
                    _this._valueChanged(_this, outerArgs);
                }
            };
            this.i.valueChanged = delegateCombine(this.i.valueChanged, this._valueChanged_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    return IgrMultiColumnComboBox;
}(React.Component));
export { IgrMultiColumnComboBox };
//# sourceMappingURL=igr-multi-column-combo-box.js.map
