/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { CellPresenterBase } from "./CellPresenterBase";
import { CellModel } from "./CellModel";
import { ImageCellModel } from "./ImageCellModel";
import { markType } from "igniteui-react-core";
import { stringStartsWith } from "igniteui-react-core";
/**
 * @hidden
 */
var ImageCellPresenter = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(ImageCellPresenter, _super);
    function ImageCellPresenter(a) {
        return _super.call(this, a) || this;
    }
    Object.defineProperty(ImageCellPresenter.prototype, "d", {
        get: function () {
            return this.a;
        },
        enumerable: true,
        configurable: true
    });
    ImageCellPresenter.prototype.b = function (a) {
        _super.prototype.b.call(this, a);
        var b = a;
        if (a.as) {
            if (a.ax(CellModel.ei) || a.ax(CellModel.ge)) {
                var c = Math.min(1, Math.max(0, a.cb));
                var d = a.b1 * (1 - c);
                this.d.cb = d;
            }
            if (b.ax(ImageCellModel.ku) || b.ax(ImageCellModel.kv)) {
                this.e(b.ky, b.kr);
            }
            if (b.ax(ImageCellModel.kw) || b.ax(ImageCellModel.e2) || b.ax(ImageCellModel.gd)) {
                this.f(b.kt, b.f, b.h);
            }
            if (b.ax(ImageCellModel.f8)) {
                if (a.t == 1) {
                    this.d.cg();
                }
                else if (a.t == 2) {
                    this.e(b.ky, b.kr);
                }
            }
        }
    };
    ImageCellPresenter.prototype.f = function (a, b, c) {
        this.d.cm(a);
    };
    ImageCellPresenter.prototype.e = function (a, b) {
        var c = a.toLowerCase();
        if (b == 0) {
            b = 4;
        }
        if (stringStartsWith(c, "http") || b == 4) {
            this.d.cj(a, 4);
        }
        if (stringStartsWith(c, "asset") || b == 2) {
            var d = a;
            if (stringStartsWith(c, "asset")) {
                d = a.substr(8);
            }
            this.d.cj(d, 2);
        }
        if (stringStartsWith(c, "drawable") || b == 1) {
            var e = a;
            if (stringStartsWith(c, "drawable")) {
                e = a.substr(11);
            }
            this.d.cj(e, 1);
        }
        if (stringStartsWith(c, "nativeresource") || b == 1) {
            var f = a;
            if (stringStartsWith(c, "nativeresource")) {
                f = a.substr(17);
            }
            this.d.cj(f, 1);
        }
        if (stringStartsWith(c, "embeddedresource") || b == 3) {
            var g = a;
            if (stringStartsWith(c, "embeddedresource")) {
                g = a.substr(19);
            }
            this.d.cj(g, 3);
        }
    };
    ImageCellPresenter.$t = markType(ImageCellPresenter, 'ImageCellPresenter', CellPresenterBase.$);
    return ImageCellPresenter;
}(CellPresenterBase));
export { ImageCellPresenter };
//# sourceMappingURL=ImageCellPresenter.js.map
