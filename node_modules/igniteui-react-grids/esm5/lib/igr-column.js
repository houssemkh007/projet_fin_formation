import * as tslib_1 from "tslib";
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { IgrGridColumnAnimationSettings } from "./igr-grid-column-animation-settings";
import { IgrColumnWidth } from "./igr-column-width";
import { IgrHeader } from "./igr-header";
import { ColumnSortDirection_$type } from "./ColumnSortDirection";
import { PinnedPositions_$type } from "./PinnedPositions";
import { ColumnOptionsIconAlignment_$type } from "./ColumnOptionsIconAlignment";
import { ColumnOptionsIconBehavior_$type } from "./ColumnOptionsIconBehavior";
import { IgrDefinitionBase } from "./igr-definition-base";
import { brushToString, stringToBrush, ensureBool, ensureEnum } from "igniteui-react-core";
import { ColumnWidth as ColumnWidth_internal } from "./ColumnWidth";
import { FontInfo } from "igniteui-react-core";
/**
 * A column in the data grid.
*/
var IgrColumn = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(IgrColumn, _super);
    function IgrColumn(props) {
        var _this = _super.call(this, props) || this;
        _this._actualHeaderTextChange = null;
        _this._actualHeaderTextChange_wrapped = null;
        return _this;
    }
    Object.defineProperty(IgrColumn.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrColumn.prototype, "paddingLeft", {
        /**
         * Gets or sets the amount of left padding to use for the cell content for this column.
        */
        get: function () {
            return this.i.gy;
        },
        set: function (v) {
            this.i.gy = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrColumn.prototype, "paddingTop", {
        /**
         * Gets or sets the amount of top padding to use for the cell content for this column.
        */
        get: function () {
            return this.i.g0;
        },
        set: function (v) {
            this.i.g0 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrColumn.prototype, "paddingRight", {
        /**
         * Gets or sets the amount of right padding to use for the cell content of this column.
        */
        get: function () {
            return this.i.gz;
        },
        set: function (v) {
            this.i.gz = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrColumn.prototype, "paddingBottom", {
        /**
         * Gets or sets the amount of bottom padding to use for the cell content of this column.
        */
        get: function () {
            return this.i.gx;
        },
        set: function (v) {
            this.i.gx = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrColumn.prototype, "name", {
        /**
         * Gets or sets an unique name of the Column
        */
        get: function () {
            return this.i.id;
        },
        set: function (v) {
            this.i.id = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrColumn.prototype, "field", {
        /**
         * Gets or sets the key used for the column binding
        */
        get: function () {
            return this.i.hy;
        },
        set: function (v) {
            this.i.hy = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrColumn.prototype, "headerText", {
        /**
         * Gets or sets the text displayed in the header of the column
        */
        get: function () {
            return this.i.h2;
        },
        set: function (v) {
            this.i.h2 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrColumn.prototype, "actualHeaderText", {
        /**
         * Gets the actual text displayed in the header of the column
        */
        get: function () {
            return this.i.hh;
        },
        set: function (v) {
            this.i.hh = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrColumn.prototype, "selectedBackground", {
        /**
         * Gets or sets the background color to use for the cells when they are selected
        */
        get: function () {
            return brushToString(this.i.jn);
        },
        set: function (v) {
            this.i.jn = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrColumn.prototype, "actualSelectedBackground", {
        /**
         * Gets the actual background color that is used for the cells when they are selected
        */
        get: function () {
            return brushToString(this.i.jh);
        },
        set: function (v) {
            this.i.jh = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrColumn.prototype, "rowHoverBackground", {
        /**
         * Gets or sets the background color to use for the cells when the row is hovered.
        */
        get: function () {
            return brushToString(this.i.jm);
        },
        set: function (v) {
            this.i.jm = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrColumn.prototype, "actualHoverBackground", {
        /**
         * Gets the actual background color that is used for the cells when they are hovered.
        */
        get: function () {
            return brushToString(this.i.jg);
        },
        set: function (v) {
            this.i.jg = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrColumn.prototype, "animationSettings", {
        /**
         * Gets or sets the animation settings to use for this column.
        */
        get: function () {
            if (this.i.fe == null) {
                return null;
            }
            if (!this.i.fe.externalObject) {
                var e = new IgrGridColumnAnimationSettings();
                e._implementation = this.i.fe;
                this.i.fe.externalObject = e;
            }
            return this.i.fe.externalObject;
        },
        set: function (v) {
            v == null ? this.i.fe = null : this.i.fe = v.i;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrColumn.prototype, "width", {
        /**
         * Gets or sets the width to use for this column.
        */
        get: function () {
            if (this.i.width == null) {
                return null;
            }
            if (!this.i.width.externalObject) {
                var e = new IgrColumnWidth();
                e._implementation = this.i.width;
                this.i.width.externalObject = e;
            }
            return this.i.width.externalObject;
        },
        set: function (v) {
            if (typeof v == "string") {
                var int = ColumnWidth_internal.parse(v);
                var ext = new IgrColumnWidth();
                ext._implementation = int;
                v = ext;
            }
            v == null ? this.i.width = null : this.i.width = v.i;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrColumn.prototype, "minWidth", {
        /**
         * Gets or sets the minimum width to use for this column. Overrides the DefaultColumnMinWidth from the grid, if set.
        */
        get: function () {
            return this.i.gm;
        },
        set: function (v) {
            this.i.gm = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrColumn.prototype, "isFromMarkup", {
        /**
         * Gets whether this column was projected from markup/templates and is constrained.
        */
        get: function () {
            return this.i.gc;
        },
        set: function (v) {
            this.i.gc = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrColumn.prototype, "isAutoGenerated", {
        /**
         * Gets whether this column was auto generated.
        */
        get: function () {
            return this.i.f8;
        },
        set: function (v) {
            this.i.f8 = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrColumn.prototype, "filter", {
        /**
         * Gets or sets a filter to apply on the values of this column
        */
        get: function () {
            return this.i.eo;
        },
        set: function (v) {
            this.i.eo = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrColumn.prototype, "header", {
        /**
         * Gets or sets the header definition for this column.
        */
        get: function () {
            if (this.i.header == null) {
                return null;
            }
            if (!this.i.header.externalObject) {
                var e = IgrHeader._createFromInternal(this.i.header);
                if (e) {
                    e._implementation = this.i.header;
                }
                this.i.header.externalObject = e;
            }
            return this.i.header.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.header = null : this.i.header = v.i;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrColumn.prototype, "isFilteringEnabled", {
        /**
         * Gets or sets whether filtering is enabled for this column.
        */
        get: function () {
            return this.i.gb;
        },
        set: function (v) {
            this.i.gb = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrColumn.prototype, "isResizingEnabled", {
        /**
         * Gets or sets whether resizing is enabled for this column.
        */
        get: function () {
            return this.i.ge;
        },
        set: function (v) {
            this.i.ge = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrColumn.prototype, "isHidden", {
        /**
         * Gets or sets whether or not a column is hidden from the grid
        */
        get: function () {
            return this.i.gd;
        },
        set: function (v) {
            this.i.gd = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrColumn.prototype, "shouldRemoveWhenHidden", {
        /**
         * Gets or sets if a column should be removed from the grid when it is fully hidden
        */
        get: function () {
            return this.i.gg;
        },
        set: function (v) {
            this.i.gg = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrColumn.prototype, "sortDirection", {
        /**
         * Gets the current sort direction (None, Ascending, Descending) for this column.
        */
        get: function () {
            return this.i.e6;
        },
        set: function (v) {
            this.i.e6 = ensureEnum(ColumnSortDirection_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrColumn.prototype, "pinned", {
        /**
         * Gets or sets the current fixed position for this column.
        */
        get: function () {
            return this.i.fk;
        },
        set: function (v) {
            this.i.fk = ensureEnum(PinnedPositions_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrColumn.prototype, "actualColumnOptionsIconAlignment", {
        /**
         * Gets the actual column options icon alignment for this column.
        */
        get: function () {
            return this.i.ex;
        },
        set: function (v) {
            this.i.ex = ensureEnum(ColumnOptionsIconAlignment_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrColumn.prototype, "columnOptionsIconAlignment", {
        /**
         * Gets or sets whether the column options icon is aligned opposite the header text or not.
        */
        get: function () {
            return this.i.ey;
        },
        set: function (v) {
            this.i.ey = ensureEnum(ColumnOptionsIconAlignment_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrColumn.prototype, "actualColumnOptionsIconColor", {
        /**
         * Gets the actual column options icon color for this column.
        */
        get: function () {
            return brushToString(this.i.je);
        },
        set: function (v) {
            this.i.je = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrColumn.prototype, "columnOptionsIconColor", {
        /**
         * Gets or sets the column options icon color for this column.
        */
        get: function () {
            return brushToString(this.i.ji);
        },
        set: function (v) {
            this.i.ji = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrColumn.prototype, "columnOptionsIconBehavior", {
        /**
         * Gets or sets how the column option icon will behave in the column header.
        */
        get: function () {
            return this.i.e2;
        },
        set: function (v) {
            this.i.e2 = ensureEnum(ColumnOptionsIconBehavior_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrColumn.prototype, "actualColumnOptionsIconBehavior", {
        /**
         * Gets or sets how the column option icon will behave in the column header.
        */
        get: function () {
            return this.i.e1;
        },
        set: function (v) {
            this.i.e1 = ensureEnum(ColumnOptionsIconBehavior_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrColumn.prototype, "actualIsColumnOptionsEnabled", {
        /**
         * Gets the actual state of the column options for this column.
        */
        get: function () {
            return this.i.f3;
        },
        set: function (v) {
            this.i.f3 = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrColumn.prototype, "isColumnOptionsEnabled", {
        /**
         * Gets or sets the preferred state of the column options for this column. If the feature is disabled at the grid level
         * then it will be disabled for the column regardless of what this is set to.
        */
        get: function () {
            return this.i.f9;
        },
        set: function (v) {
            this.i.f9 = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrColumn.prototype, "isEditable", {
        /**
         * Gets or sets if the column is editable.
        */
        get: function () {
            return this.i.ga;
        },
        set: function (v) {
            this.i.ga = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrColumn.prototype, "deletedTextColor", {
        /**
         * Gets or sets the text color used for deleted rows.
        */
        get: function () {
            return brushToString(this.i.jj);
        },
        set: function (v) {
            this.i.jj = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrColumn.prototype, "actualDeletedTextColor", {
        /**
         * Gets the actual text color used for deleted rows.
        */
        get: function () {
            return brushToString(this.i.jf);
        },
        set: function (v) {
            this.i.jf = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrColumn.prototype, "editOpacity", {
        /**
         * Gets or sets the opacity to use for unsaved edited cell values.
        */
        get: function () {
            return this.i.gl;
        },
        set: function (v) {
            this.i.gl = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrColumn.prototype, "actualEditOpacity", {
        /**
         * Gets the actual opacity for unsaved edited cell values.
        */
        get: function () {
            return this.i.gk;
        },
        set: function (v) {
            this.i.gk = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrColumn.prototype, "textEditStyle", {
        /**
         * Gets or sets the font style to use for unsaved cell edits.
        */
        get: function () {
            if (this.i.textEditStyle == null) {
                return null;
            }
            return this.i.textEditStyle.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.textEditStyle = fi;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrColumn.prototype, "actualEditFontInfo", {
        /**
         * Gets the actual font style used for unsaved cell edits.
        */
        get: function () {
            if (this.i.fp == null) {
                return null;
            }
            return this.i.fp.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.fp = fi;
        },
        enumerable: true,
        configurable: true
    });
    IgrColumn.prototype.findByName = function (name) {
        var baseResult = _super.prototype.findByName.call(this, name);
        if (baseResult) {
            return baseResult;
        }
        if (this.animationSettings && this.animationSettings.name && this.animationSettings.name == name) {
            return this.animationSettings;
        }
        if (this.width && this.width.name && this.width.name == name) {
            return this.width;
        }
        if (this.header && this.header.name && this.header.name == name) {
            return this.header;
        }
        return null;
    };
    IgrColumn.prototype._styling = function (container, component, parent) {
        _super.prototype._styling.call(this, container, component, parent);
        this._inStyling = true;
        if (this.header && this.header._styling) {
            this.header._styling(container, component, this);
        }
        this._inStyling = false;
    };
    /**
     * Get the unique key used to identify this column.
    
    */
    IgrColumn.prototype.getUniqueKey = function () {
        var iv = this.i.h0();
        return (iv);
    };
    IgrColumn.prototype.setNamedHeaderValue = function (valueName, animationType, value) {
        this.i.iu(valueName, (animationType == null ? null : animationType), value);
    };
    /**
     * Returns if the column has named header values.
    
    */
    IgrColumn.prototype.hasNamedHeaderValues = function () {
        var iv = this.i.f6();
        return (iv);
    };
    /**
     * Returns if there is a named header value with a given name.
    
    * @param valueName  * The named value to check for.
    */
    IgrColumn.prototype.hasNamedHeaderValue = function (valueName) {
        var iv = this.i.f5(valueName);
        return (iv);
    };
    /**
     * Removes a named header value with the given name from the named header values for this column.
    
    * @param valueName  * The named header value to remove.
    */
    IgrColumn.prototype.removeNamedHeaderValue = function (valueName) {
        this.i.it(valueName);
    };
    /**
     * Gets the value of a named header value for this column by name.
    
    * @param valueName  * Name of the named header value to retrieve.
    */
    IgrColumn.prototype.getNamedHeaderValue = function (valueName) {
        var iv = this.i.g5(valueName);
        return (iv);
    };
    Object.defineProperty(IgrColumn.prototype, "actualHeaderTextChange", {
        get: function () {
            return this._actualHeaderTextChange;
        },
        set: function (ev) {
            var _this = this;
            if (this._actualHeaderTextChange_wrapped !== null) {
                this.i.propertyChanged = delegateRemove(this.i.propertyChanged, this._actualHeaderTextChange_wrapped);
                this._actualHeaderTextChange_wrapped = null;
                this._actualHeaderTextChange = null;
            }
            this._actualHeaderTextChange = ev;
            this._actualHeaderTextChange_wrapped = function (o, e) {
                var ext = _this.actualHeaderText;
                if (_this.beforeActualHeaderTextChange) {
                    _this.beforeActualHeaderTextChange(_this, ext);
                }
                if (_this._actualHeaderTextChange) {
                    _this._actualHeaderTextChange(_this, ext);
                }
            };
            this.i.propertyChanged = delegateCombine(this.i.propertyChanged, this._actualHeaderTextChange_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    return IgrColumn;
}(IgrDefinitionBase));
export { IgrColumn };
//# sourceMappingURL=igr-column.js.map
