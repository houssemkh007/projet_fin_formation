/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { Base, markType } from "igniteui-react-core";
import { IDataSourceUpdateNotifier_$type } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
/**
 * @hidden
 */
var MultipleDataSourceNotifier = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(MultipleDataSourceNotifier, _super);
    function MultipleDataSourceNotifier(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = _super.call(this) || this;
        _this.a = null;
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0: break;
            case 1:
                {
                    var c = _rest[0];
                    _this.b.o(c);
                }
                break;
        }
        return _this;
    }
    Object.defineProperty(MultipleDataSourceNotifier.prototype, "b", {
        get: function () {
            if (null == this.a) {
                this.a = new List$1(IDataSourceUpdateNotifier_$type, 0);
            }
            return this.a;
        },
        enumerable: true,
        configurable: true
    });
    MultipleDataSourceNotifier.prototype.c = function (a) {
        this.b.add(a);
    };
    MultipleDataSourceNotifier.prototype.d = function (a) {
        for (var b = 0; b < this.b.count; b++) {
            a(this.b._inner[b]);
        }
    };
    MultipleDataSourceNotifier.prototype.notifyClearItems = function () {
        this.d(function (a) { return a.notifyClearItems(); });
    };
    MultipleDataSourceNotifier.prototype.notifyInsertItem = function (a, b) {
        this.d(function (c) { return c.notifyInsertItem(a, b); });
    };
    MultipleDataSourceNotifier.prototype.notifyRemoveItem = function (a, b) {
        this.d(function (c) { return c.notifyRemoveItem(a, b); });
    };
    MultipleDataSourceNotifier.prototype.notifySetItem = function (a, b, c) {
        this.d(function (d) { return d.notifySetItem(a, b, c); });
    };
    MultipleDataSourceNotifier.prototype.rangeActualized = function (a, b) {
        this.d(function (c) { return c.rangeActualized(a, b); });
    };
    MultipleDataSourceNotifier.$t = markType(MultipleDataSourceNotifier, 'MultipleDataSourceNotifier', Base.$, [IDataSourceUpdateNotifier_$type]);
    return MultipleDataSourceNotifier;
}(Base));
export { MultipleDataSourceNotifier };
//# sourceMappingURL=MultipleDataSourceNotifier.js.map
