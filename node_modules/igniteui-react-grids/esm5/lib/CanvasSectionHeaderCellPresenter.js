/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { CanvasCellPresenterBase } from "./CanvasCellPresenterBase";
import { SectionHeaderCellModel } from "./SectionHeaderCellModel";
import { markType } from "igniteui-react-core";
import { CanvasContentCellModelHelper } from "./CanvasContentCellModelHelper";
/**
 * @hidden
 */
var CanvasSectionHeaderCellPresenter = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(CanvasSectionHeaderCellPresenter, _super);
    function CanvasSectionHeaderCellPresenter(a) {
        return _super.call(this, a) || this;
    }
    Object.defineProperty(CanvasSectionHeaderCellPresenter.prototype, "d", {
        get: function () {
            return this.a;
        },
        enumerable: true,
        configurable: true
    });
    CanvasSectionHeaderCellPresenter.prototype.b = function (a) {
        _super.prototype.b.call(this, a);
        var b = a;
        if (a.as) {
            if (a.ax(SectionHeaderCellModel.kw) || a.ax(SectionHeaderCellModel.ky)) {
                if (b.ks == null || (b.ks.length == 0 && b.k6 == null)) {
                    if (b.go == null) {
                        b.ip = "";
                    }
                    else {
                        b.ip = b.go.toString();
                    }
                }
                else {
                    if (b.k4 != null && b.kv == 0) {
                        b.ip = b.k6 + "    " + b.k4;
                    }
                    else {
                        b.ip = b.k6;
                    }
                }
                this.d.ck(b.ip);
            }
            CanvasContentCellModelHelper.a(this.a.bl, b, this.a);
        }
    };
    CanvasSectionHeaderCellPresenter.$t = markType(CanvasSectionHeaderCellPresenter, 'CanvasSectionHeaderCellPresenter', CanvasCellPresenterBase.$);
    return CanvasSectionHeaderCellPresenter;
}(CanvasCellPresenterBase));
export { CanvasSectionHeaderCellPresenter };
//# sourceMappingURL=CanvasSectionHeaderCellPresenter.js.map
