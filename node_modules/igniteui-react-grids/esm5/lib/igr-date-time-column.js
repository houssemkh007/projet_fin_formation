import * as tslib_1 from "tslib";
import { DateTimeFormats_$type } from "./DateTimeFormats";
import { EditorType_$type } from "./EditorType";
import { IgrColumn } from "./igr-column";
import { DateTimeColumn } from "./DateTimeColumn";
import { ensureEnum, arrayFindByName } from "igniteui-react-core";
/**
 * A column for displaying date/time values.
*/
var IgrDateTimeColumn = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(IgrDateTimeColumn, _super);
    function IgrDateTimeColumn(props) {
        return _super.call(this, props) || this;
    }
    IgrDateTimeColumn.prototype.createImplementation = function () {
        return new DateTimeColumn();
    };
    Object.defineProperty(IgrDateTimeColumn.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrDateTimeColumn.prototype, "dateTimeFormat", {
        /**
         * Gets or sets the date time format to use for this column. If FormatString is specificied this value is ignored.
        */
        get: function () {
            return this.i.jt;
        },
        set: function (v) {
            this.i.jt = ensureEnum(DateTimeFormats_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrDateTimeColumn.prototype, "formatString", {
        /**
         * Gets or sets the format string to apply to the value. If set, the other value formatting properties on this column are ignored.
        */
        get: function () {
            return this.i.j4;
        },
        set: function (v) {
            this.i.j4 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrDateTimeColumn.prototype, "formatSpecifiers", {
        get: function () {
            return this.i.jq;
        },
        set: function (v) {
            this.i.jq = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrDateTimeColumn.prototype, "formatOverride", {
        /**
         * Gets or sets the INTL DateTimeFormat object to use for formatting the date values.
        */
        get: function () {
            return this.i.jy;
        },
        set: function (v) {
            this.i.jy = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrDateTimeColumn.prototype, "editorType", {
        /**
         * Gets or sets the editor type used for editing cells in this column.
        */
        get: function () {
            return this.i.ju;
        },
        set: function (v) {
            this.i.ju = ensureEnum(EditorType_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrDateTimeColumn.prototype, "editorDataSource", {
        /**
         * Gets or sets the ComboBox data source.
        */
        get: function () {
            return this.i.jx;
        },
        set: function (v) {
            this.i.jx = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrDateTimeColumn.prototype, "editorTextField", {
        /**
         * Gets or sets the ComboBox text field.
        */
        get: function () {
            return this.i.j1;
        },
        set: function (v) {
            this.i.j1 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrDateTimeColumn.prototype, "editorValueField", {
        /**
         * Gets or sets the ComboBox value field.
        */
        get: function () {
            return this.i.jp;
        },
        set: function (v) {
            this.i.jp = v;
        },
        enumerable: true,
        configurable: true
    });
    IgrDateTimeColumn.prototype.findByName = function (name) {
        var baseResult = _super.prototype.findByName.call(this, name);
        if (baseResult) {
            return baseResult;
        }
        if (this.formatSpecifiers != null && arrayFindByName(this.formatSpecifiers, name)) {
            return arrayFindByName(this.formatSpecifiers, name);
        }
        return null;
    };
    return IgrDateTimeColumn;
}(IgrColumn));
export { IgrDateTimeColumn };
//# sourceMappingURL=igr-date-time-column.js.map
