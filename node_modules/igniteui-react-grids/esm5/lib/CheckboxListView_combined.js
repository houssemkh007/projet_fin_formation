/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { Base, runOn, delegateCombine, fromEnum, markType, INotifyPropertyChanged_$type, PropertyChangedEventArgs, delegateRemove, enumGetBox } from "igniteui-react-core";
import { DomWrapper_$type } from "igniteui-react-core";
import { Dictionary$2 } from "igniteui-react-core";
import { Checkbox } from "igniteui-react-inputs";
import { ControlDisplayDensity_$type } from "igniteui-react-core";
import { NativeUI } from "igniteui-react-core";
import { PrimaryKeyValue } from "./PrimaryKeyValue";
import { Thickness } from "igniteui-react-core";
import { CheckboxListIndexType_$type } from "./CheckboxListIndexType";
import { GridSelectedKeysCollection } from "./GridSelectedKeysCollection";
import { InputGroupDisplayType_$type } from "igniteui-react-inputs";
import { BaseControlTheme_$type } from "igniteui-react-core";
import { FilterFactory } from "igniteui-react-core";
import { CheckedChangedEventArgs } from "./CheckedChangedEventArgs";
import { Input } from "igniteui-react-inputs";
import { TemplateColumn } from "./TemplateColumn";
import { DataSourceSchemaPropertyType_$type } from "igniteui-react-core";
import { InputGroup } from "igniteui-react-inputs";
import { FastReflectionHelper } from "igniteui-react-core";
import { ColumnWidth } from "./ColumnWidth";
import { DateTimeColumn } from "./DateTimeColumn";
import { NumericColumn } from "./NumericColumn";
import { TextColumn } from "./TextColumn";
import { Prefix } from "igniteui-react-inputs";
import { Icon } from "igniteui-react-inputs";
import { ArgumentException } from "igniteui-react-core";
import { SelectAllCheckboxChangedEventArgs } from "./SelectAllCheckboxChangedEventArgs";
import { BrushUtil } from "igniteui-react-core";
/**
 * @hidden
 */
var CheckboxListView = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(CheckboxListView, _super);
    function CheckboxListView() {
        var _this = _super.call(this) || this;
        _this.d = new Dictionary$2(DomWrapper_$type, Checkbox.$, 0);
        _this.h = null;
        _this.a = null;
        _this.g = null;
        _this.b = null;
        _this.e = null;
        _this.c = false;
        _this.f = null;
        return _this;
    }
    CheckboxListView.prototype.l = function () {
    };
    CheckboxListView.prototype.k = function (a) {
        if (a == null) {
            this.e = null;
            this.d.clear();
            return;
        }
        this.e = a;
        this.t();
        this.aa();
        this.q();
        var b = Math.round(a.rootWrapper.width());
        var c = Math.round(a.rootWrapper.height());
        this.e.rootWrapper.setStyleProperty("position", "relative");
    };
    CheckboxListView.prototype.t = function () {
        if (this.e != null) {
            this.b.b9(this.e);
        }
    };
    CheckboxListView.prototype.q = function () {
        if (this.e != null) {
            var a = this.e.rootWrapper.getChildAt(3);
            a.setStyleProperty("width", "100%");
            a.setStyleProperty("margin", "4px 0px 4px 0px");
            if (this.b.ag == false) {
                a.setStyleProperty("height", "calc(100% - 50px");
            }
            else {
                a.setStyleProperty("height", "calc(100% - 75px");
            }
        }
    };
    CheckboxListView.prototype.m = function (a, b, c) {
        var d = null;
        if (a.getChildCount() == 0) {
            d = new Checkbox();
            var e = this.e.getSubRenderer(a);
            d.provideContainer(e);
            this.d.addItem(a, d);
            d.d = this.b.l;
            d.t = true;
            d.change = delegateCombine(d.change, runOn(this, this.i));
            var f = this.e.createElement("div");
            a.setStyleProperty("display", "flex");
            a.setStyleProperty("height", "100%");
            a.setStyleProperty("align-items", "center");
            switch (this.b.n) {
                case 1:
                    a.setStyleProperty("margin-top", "-4px");
                    break;
                case 2:
                    a.setStyleProperty("margin-top", "-1px");
                    break;
                case 3:
                    a.setStyleProperty("margin-top", "1px");
                    break;
            }
            a.append(f);
        }
        else {
            d = this.d.item(a);
        }
        if (d != null) {
            var g = d.u;
            try {
                d.u = true;
                d.a5 = b;
                if (c) {
                    if (this.b.p == 0) {
                        d.checked = false;
                    }
                    else {
                        d.checked = true;
                    }
                }
                else {
                    if (this.b.p == 0) {
                        d.checked = true;
                    }
                    else {
                        d.checked = false;
                    }
                }
            }
            finally {
                d.u = g;
            }
        }
    };
    CheckboxListView.prototype.v = function () {
        var e_1, _a;
        if (this.d != null) {
            try {
                for (var _b = tslib_1.__values(fromEnum(this.d)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var a = _c.value;
                    var b = a.value;
                    b.d = this.b.l;
                }
            }
            catch (e_1_1) {
                e_1 = { error: e_1_1 };
            }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return))
                        _a.call(_b);
                }
                finally {
                    if (e_1)
                        throw e_1.error;
                }
            }
        }
        if (this.a != null) {
            this.a.d = this.b.l;
        }
    };
    CheckboxListView.prototype.u = function () {
    };
    CheckboxListView.prototype.i = function (a, b) {
        var c = a;
        var d = parseInt(c.a5.toString());
        var e = c.checked;
        if (e == true) {
            if (this.b.p == 0) {
                this.b.b3(d);
            }
            else {
                this.b.bd(d);
            }
        }
        else {
            if (this.b.p == 0) {
                this.b.bd(d);
            }
            else {
                this.b.b3(d);
            }
        }
        this.b.bq(d, e);
        this.z(false);
    };
    CheckboxListView.prototype.j = function () {
    };
    CheckboxListView.prototype.r = function (a, b) {
        var e_2, _a;
        try {
            for (var _b = tslib_1.__values(fromEnum(this.d)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var c = _c.value;
                var d = c.value;
                var e = parseInt(d.a5.toString());
                if (e == a) {
                    d.checked = b;
                    this.b.bq(e, b);
                }
            }
        }
        catch (e_2_1) {
            e_2 = { error: e_2_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_2)
                    throw e_2.error;
            }
        }
        this.z();
    };
    CheckboxListView.prototype.s = function (a) {
        var e_3, _a;
        try {
            for (var _b = tslib_1.__values(fromEnum(this.d)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var b = _c.value;
                var c = b.value;
                c.checked = a;
            }
        }
        catch (e_3_1) {
            e_3 = { error: e_3_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_3)
                    throw e_3.error;
            }
        }
    };
    CheckboxListView.prototype.o = function (a) {
        this.h = a;
        if (null != this.h) {
            this.h.setStyleProperty("margin", "5px 0px 4px 0px");
        }
    };
    CheckboxListView.prototype.aa = function () {
        var a = this.e;
        if (null == a || null == this.h) {
            return;
        }
        var b = a.createElement("div");
        var c = a.getSubRenderer(b);
        this.a = new Checkbox();
        this.a.provideContainer(c);
        this.a.d = this.b.l;
        this.g = a.createElement("label");
        this.g.setRawText(this.b.a6);
        this.g.setStyleProperty("font-size", "13px");
        this.h.setStyleProperty("display", "flex");
        this.h.setStyleProperty("flex-direction", "row");
        this.h.setStyleProperty("font-family", "'Segoe UI', Verdana");
        this.h.setStyleProperty("align-items", "center");
        this.h.append(b);
        this.h.append(this.g);
        this.ab();
        this.y();
        var d = this.a;
        d.change = delegateCombine(d.change, runOn(this, this.p));
        this.a.t = true;
    };
    CheckboxListView.prototype.y = function () {
        if (null != this.g) {
            this.g.setRawText(this.b.a6);
            NativeUI.n(this.g, this.b.cf);
        }
    };
    CheckboxListView.prototype.ab = function () {
        if (null != this.g) {
            var a = this.b.ag ? "flex" : "none";
            this.h.setStyleProperty("display", a);
        }
    };
    CheckboxListView.prototype.z = function (a) {
        if (a === void 0) {
            a = true;
        }
        var b = this.c;
        this.c = true;
        var c = this.a.u;
        this.a.u = a;
        try {
            if (this.b.ae) {
                this.a.indeterminate = true;
                return;
            }
            this.a.indeterminate = false;
            if (this.b.p == 0) {
                this.a.checked = this.b.g.count == 0;
            }
            else {
                this.a.checked = this.b.g.count != 0;
            }
        }
        finally {
            this.a.u = c;
            this.c = b;
        }
    };
    CheckboxListView.prototype.p = function (a, b) {
        if (this.c || b.isIndeterminate) {
            return;
        }
        if (b.isChecked) {
            this.b.b5();
            this.b.bw(b.isChecked);
        }
        else {
            this.b.bh();
            this.b.bw(b.isChecked);
        }
    };
    CheckboxListView.prototype.x = function () {
        var a = this.e;
        if (null == a) {
            return;
        }
        var b = a.rootWrapper;
        if (null != b) {
            NativeUI.n(b, this.b.cl);
            NativeUI.j(b, this.b.cg);
        }
    };
    CheckboxListView.prototype.w = function (a) {
        if (this.f != null) {
            NativeUI.s(this.f, a);
        }
    };
    CheckboxListView.prototype.n = function (a) {
        this.f = a;
    };
    CheckboxListView.$t = markType(CheckboxListView, 'CheckboxListView');
    return CheckboxListView;
}(Base));
export { CheckboxListView };
/**
 * @hidden
 */
var CheckboxList = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(CheckboxList, _super);
    function CheckboxList() {
        var _this = _super.call(this) || this;
        _this.q = null;
        _this.h = null;
        _this.i = null;
        _this.x = null;
        _this.d = null;
        _this.aa = false;
        _this.c = null;
        _this.s = null;
        _this.t = null;
        _this.ab = false;
        _this.f = new GridSelectedKeysCollection();
        _this.a = null;
        _this.propertyChanged = null;
        _this.checkedChanged = null;
        _this.ak = null;
        _this.am = null;
        _this.ao = null;
        _this.an = null;
        _this.u = 3;
        _this.ah = -1;
        _this.y = null;
        _this.o = 1;
        _this.k = 1;
        _this.m = 2;
        _this.a5 = "(Select All)";
        _this.cd = null;
        _this.cb = CheckboxList.ci;
        _this.af = true;
        _this.cc = CheckboxList.ch;
        _this.ce = CheckboxList.ci;
        _this.selectAllCheckboxChanged = null;
        _this.ai = -1;
        var a = _this.f;
        a.collectionChanged = delegateCombine(a.collectionChanged, runOn(_this, _this.by));
        _this.d = new FilterFactory();
        var b = new CheckboxListView();
        b.b = _this;
        _this.q = b;
        _this.q.l();
        return _this;
    }
    Object.defineProperty(CheckboxList.prototype, "e", {
        get: function () {
            if (this.h == null) {
                return null;
            }
            return this.h.actualDataSource;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxList.prototype, "g", {
        get: function () {
            return this.f;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxList.prototype, "b", {
        get: function () {
            return this.a;
        },
        set: function (a) {
            var b = this.a;
            this.a = a;
            if (b != this.a) {
                this.bu("PrimaryKey", b, this.a);
            }
        },
        enumerable: true,
        configurable: true
    });
    CheckboxList.prototype.by = function (a, b) {
        if (this.e == null || this.e.actualSchema == null || this.aa) {
            return;
        }
        switch (b.action) {
            case 0:
                for (var c = 0; c < b.newItems.count; c++) {
                    this.bs(b.newItems.item(c));
                }
                break;
            case 1:
                for (var d = 0; d < b.oldItems.count; d++) {
                    this.bt(b.oldItems.item(d));
                }
                break;
            case 2:
                for (var e = 0; e < b.oldItems.count; e++) {
                    this.bt(b.oldItems.item(e));
                }
                for (var f = 0; f < b.newItems.count; f++) {
                    this.bs(b.newItems.item(f));
                }
                break;
            case 4:
                this.q.s(this.p == 0);
                for (var g = 0; g < this.g.ae.count; g++) {
                    this.bs(this.g.ae._inner[g]);
                }
                break;
        }
    };
    CheckboxList.prototype.bs = function (a) {
        var b = this.e.indexOfKey(a.value);
        if (b >= 0) {
            this.q.r(b, this.p == 1);
        }
    };
    CheckboxList.prototype.bt = function (a) {
        var b = this.e.indexOfKey(a.value);
        if (b >= 0) {
            this.q.r(b, this.p == 0);
        }
    };
    CheckboxList.prototype.bq = function (a, b) {
        if (this.checkedChanged != null && this.ab == false) {
            this.checkedChanged(this, ((function () {
                var $ret = new CheckedChangedEventArgs();
                $ret.b = a;
                $ret.a = b;
                return $ret;
            })()));
        }
    };
    CheckboxList.prototype.notifySizeChanged = function () {
        this.q.j();
    };
    CheckboxList.prototype.destroy = function () {
        if (this.h != null) {
            var a = this.h;
            a.cellClicked = delegateRemove(a.cellClicked, runOn(this, this.bj));
        }
        if (this.s != null) {
            var b = this.s;
            b.change = delegateRemove(b.change, runOn(this, this.bk));
        }
        this.provideContainer(null, null, null);
        if (this.i != null) {
            var c = this.i;
            c.cellUpdating = delegateRemove(c.cellUpdating, runOn(this, this.bg));
        }
    };
    CheckboxList.prototype.provideContainer = function (a, b, c) {
        this.h = b;
        if (null != this.h) {
            this.h.k6 = 0;
            this.h.lg = 0;
            this.h.g3 = false;
            this.h.ch = 0;
            this.h.cf = 0;
            var d = this.h;
            d.cellClicked = delegateCombine(d.cellClicked, runOn(this, this.bj));
            if (this.ak != null) {
                this.h.itemsSource = this.ak;
                this.bf();
                this.bx();
            }
            if (this.am != null) {
                this.bx();
                this.b8();
            }
        }
        this.q.o(c);
        this.q.k(a);
    };
    CheckboxList.prototype.provideSelectAllSection = function (a) {
        this.q.o(a);
    };
    CheckboxList.prototype.bj = function (a, b) {
        if (b.cellInfo.k.az == 0) {
            return;
        }
        var c = b.cellInfo.k.w;
        if (-1 == c) {
            return;
        }
        var d = this.j(b.cellInfo.gp);
        if (this.g.contains(d)) {
            this.g.remove(d);
        }
        else {
            this.g.add(d);
        }
    };
    CheckboxList.prototype.bg = function (a, b) {
        var c = b.cellInfo.k.w;
        if (-1 == c) {
            return;
        }
        var d = false;
        if (b.cellInfo.gp != null) {
            var e = this.j(b.cellInfo.gp);
            if (this.g.contains(e)) {
                d = true;
            }
        }
        this.q.m(b.content.element, c, d);
    };
    CheckboxList.prototype.br = function (a) {
        if (this.am != null) {
            var b = this.d.property(this.am).cast(enumGetBox(DataSourceSchemaPropertyType_$type, 0)).toLower();
            var c = b.contains(a);
            if (!this.h.v.j.contains(this.c)) {
                this.c = c;
                this.h.v.add(this.c);
            }
            else {
                var d = this.h.v.j.indexOf(this.c);
                this.h.v.j.item(d, this.c = c);
            }
        }
    };
    Object.defineProperty(CheckboxList.prototype, "itemsSource", {
        get: function () {
            return this.ak;
        },
        set: function (a) {
            var b = this.ak;
            this.ak = a;
            if (b != this.ak) {
                this.bu("ItemsSource", b, this.ak);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxList.prototype, "at", {
        get: function () {
            return this.am;
        },
        set: function (a) {
            var b = this.am;
            this.am = a;
            if (b != this.am) {
                this.bu("DataMemberPath", b, this.am);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxList.prototype, "a9", {
        get: function () {
            return this.ao;
        },
        set: function (a) {
            var b = this.ao;
            this.ao = a;
            if (b != this.ao) {
                this.bu("SelectedMemberPath", b, this.ao);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxList.prototype, "ax", {
        get: function () {
            return this.an;
        },
        set: function (a) {
            var b = this.an;
            this.an = a;
            if (b != this.an) {
                this.bu("FilterPlaceholderText", b, this.an);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxList.prototype, "v", {
        get: function () {
            return this.u;
        },
        set: function (a) {
            var b = this.u;
            this.u = a;
            if (b != this.u) {
                this.bu("SearchInputType", enumGetBox(InputGroupDisplayType_$type, b), enumGetBox(InputGroupDisplayType_$type, this.u));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxList.prototype, "aj", {
        get: function () {
            return this.ah;
        },
        set: function (a) {
            var b = this.ah;
            this.ah = a;
            if (b != this.ah) {
                this.bu("RowHeight", b, this.ah);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxList.prototype, "z", {
        get: function () {
            return this.y;
        },
        set: function (a) {
            var b = this.y;
            this.y = a;
            if (b != this.y) {
                this.bu("CellTextStyle", b, this.y);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxList.prototype, "p", {
        get: function () {
            return this.o;
        },
        set: function (a) {
            var b = this.o;
            this.o = a;
            if (b != this.o) {
                this.bu("IndexType", enumGetBox(CheckboxListIndexType_$type, b), enumGetBox(CheckboxListIndexType_$type, this.o));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxList.prototype, "l", {
        get: function () {
            return this.k;
        },
        set: function (a) {
            var b = this.k;
            this.k = a;
            if (b != this.k) {
                this.bu("BaseTheme", enumGetBox(BaseControlTheme_$type, b), enumGetBox(BaseControlTheme_$type, this.k));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxList.prototype, "n", {
        get: function () {
            return this.m;
        },
        set: function (a) {
            var b = this.m;
            this.m = a;
            if (b != this.m) {
                this.bu("Density", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, this.m));
            }
        },
        enumerable: true,
        configurable: true
    });
    CheckboxList.prototype.bu = function (a, b, c) {
        if (this.propertyChanged != null) {
            this.propertyChanged(this, new PropertyChangedEventArgs(a));
        }
        this.bz(a, b, c);
    };
    CheckboxList.prototype.bz = function (a, b, c) {
        switch (a) {
            case "ItemsSource":
                if (this.h != null) {
                    this.p = 1;
                    if (c != null) {
                        this.h.a7.m();
                        this.h.b4.m();
                        this.h.v.clear();
                        this.h.b7.m();
                    }
                    if (this.h.actualDataSource != null) {
                        var d = this.h.actualDataSource;
                        d.schemaChanged = delegateRemove(d.schemaChanged, runOn(this, this.bv));
                    }
                    this.h.itemsSource = this.ak;
                    this.bf();
                    if (this.h.actualDataSource != null) {
                        var e = this.h.actualDataSource;
                        e.schemaChanged = delegateCombine(e.schemaChanged, runOn(this, this.bv));
                    }
                    this.ab = true;
                    this.bx();
                    this.ab = false;
                    this.q.z();
                }
                break;
            case "DataMemberPath":
            case "SelectedMemberPath":
                if (this.h != null) {
                    if (this.am != null) {
                        this.bx();
                        this.b8();
                    }
                }
                break;
            case "PrimaryKey":
                if (this.h != null) {
                    this.h.l = this.b;
                }
                break;
            case "SelectAllCaptionTextColor":
                this.cf = null != this.cj ? this.cj : CheckboxList.ci;
                break;
            case "SelectAllCaption":
            case "ActualSelectAllCaptionTextColor":
                this.q.y();
                break;
            case "showSelectAll":
                this.q.ab();
                this.q.q();
                break;
            case "FilterPlaceholderText":
                if (this.s != null) {
                    this.s.b7 = this.ax;
                }
                break;
            case "SearchInputType":
                if (this.t != null) {
                    this.t.k = this.v;
                }
                break;
            case "RowHeight":
                if (this.h != null) {
                    this.h.le = this.aj;
                }
                break;
            case "CellTextStyle":
                if (this.h != null) {
                    this.h.fp = this.z;
                }
                break;
            case "BackgroundColor":
            case "TextColor":
                var f = this.h;
                if (null != f) {
                    f.uu = this.cl;
                    f.us = this.cg;
                }
                this.q.x();
                break;
            case "BaseTheme":
                this.b7();
                break;
            case "Density":
                this.b6();
                break;
        }
    };
    CheckboxList.prototype.b6 = function () {
        if (this.h != null) {
            this.h.fg = this.n;
        }
        if (this.t != null) {
            this.t.h = this.n;
        }
        this.q.u();
    };
    CheckboxList.prototype.b7 = function () {
        if (this.t != null) {
            this.t.d = this.l;
        }
        this.q.v();
    };
    CheckboxList.prototype.bv = function (a, b) {
        this.ab = true;
        this.bf();
        if (b.schema != null) {
            this.bx();
            for (var c = 0; c < this.g.count; c++) {
                this.bs(this.g._inner[c]);
            }
            this.q.z();
        }
        this.ab = false;
    };
    CheckboxList.prototype.bx = function () {
        if (this.x == null && this.ao != null && this.ao != "") {
            this.x = new FastReflectionHelper(false, this.ao);
        }
        if (this.ak != null && this.x != null && this.h.actualDataSource.actualSchema != null) {
            this.x.propertyName = this.ao;
            var a = this.h.actualDataSource.actualCount;
            for (var b = 0; b < a; b++) {
                var c = this.h.actualDataSource.getItemAtIndex(b);
                var d = this.x.getPropertyValue(c);
                if (d == true) {
                    var e = this.j(c);
                    if (!this.g.contains(e)) {
                        this.g.add(e);
                    }
                }
            }
        }
    };
    CheckboxList.prototype.b8 = function () {
        this.h.actualColumns.clear();
        this.h.l = this.b;
        this.h.hu = false;
        this.h.le = this.aj;
        this.h.us = this.cg;
        this.h.ut = this.cg;
        this.h.fg = this.n;
        this.h.vx = new Thickness(0, 0);
        if (this.z != null) {
            this.h.fp = this.z;
        }
        var a = new TemplateColumn();
        if (this.ao == null) {
            this.ao = "";
        }
        a.hy = this.ao;
        a.id = "CheckboxColumn";
        var b = new ColumnWidth();
        b.f = 28;
        a.width = b;
        a.gy = 0;
        a.gz = 0;
        a.cellUpdating = delegateCombine(a.cellUpdating, runOn(this, this.bg));
        this.h.columns.add(a);
        this.i = a;
        var c = this.h.actualDataSource.resolveSchemaPropertyType(this.am);
        var d;
        switch (c) {
            case 8:
            case 9:
                d = new DateTimeColumn();
                break;
            case 1:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 10:
                d = new NumericColumn();
                break;
            case 2:
            case 11:
            case 0:
            default:
                d = new TextColumn();
                break;
        }
        d.hy = this.am;
        d.id = "DataColumn";
        d.gy = 0;
        d.e = 0;
        this.h.columns.add(d);
    };
    CheckboxList.prototype.updateHrMargin = function (a) {
        this.q.w(a);
    };
    CheckboxList.prototype.provideHrElement = function (a) {
        this.q.n(a);
    };
    CheckboxList.prototype.b9 = function (a) {
        var b = a.rootWrapper.getChildAt(0);
        b.setStyleProperty("display", "flex");
        this.t = new InputGroup();
        var c = a.getSubRenderer(b);
        this.t.provideContainer(c);
        this.t.k = this.v;
        this.t.d = this.l;
        this.t.h = this.n;
        var d = a.createElement("div");
        var e = a.getSubRenderer(d);
        var f = new Prefix();
        f.provideContainer(e);
        var g = a.createElement("div");
        var h = a.getSubRenderer(g);
        var i = new Icon();
        i.provideContainer(h);
        i.fill = CheckboxList.ck;
        i.svgPath = CheckboxList.a4;
        f.appendContentChild(g);
        this.t.appendContentChild(d);
        this.t.inputs.add(f);
        var j = a.createElement("div");
        var k = a.getSubRenderer(j);
        this.s = new Input();
        this.s.provideContainer(k);
        this.s.b0 = "text";
        if (this.ax != null) {
            this.s.b7 = this.ax;
        }
        var l = this.s;
        l.changing = delegateCombine(l.changing, runOn(this, this.bk));
        this.t.appendContentChild(j);
        this.t.inputs.add(this.s);
    };
    CheckboxList.prototype.bk = function (a, b) {
        var c = b.value.toLowerCase();
        this.br(c);
    };
    CheckboxList.prototype.j = function (a) {
        if (this.b == null) {
            return PrimaryKeyValue.createIdentityKey(a);
        }
        var b = new Array(this.b.length);
        var c = new Array(this.b.length);
        for (var d = 0; d < b.length; d++) {
            b[d] = this.b[d];
            c[d] = this.e.getItemProperty(a, b[d]);
        }
        return new PrimaryKeyValue(b, c);
    };
    CheckboxList.prototype.b3 = function (a) {
        this.aa = true;
        var b = this.e.getItemAtIndex(a);
        var c = this.j(b);
        this.g.remove(c);
        this.aa = false;
    };
    CheckboxList.prototype.bd = function (a) {
        this.aa = true;
        var b = this.e.getItemAtIndex(a);
        var c = this.j(b);
        this.g.add(c);
        this.aa = false;
    };
    CheckboxList.prototype.b5 = function () {
        this.p = 0;
        this.g.clear();
        this.bl();
        this.q.z();
    };
    CheckboxList.prototype.bh = function () {
        this.p = 1;
        this.g.clear();
        this.bl();
        this.q.z();
    };
    CheckboxList.prototype.bo = function (a, b, c) {
        if (this.h != null) {
            this.h.qp(a, b, c);
        }
    };
    CheckboxList.prototype.bl = function () {
        if (this.h != null) {
            this.h.qj();
        }
    };
    CheckboxList.prototype.bm = function (a, b) {
        if (this.h != null) {
            this.h.ql(a, b);
        }
        ;
    };
    CheckboxList.prototype.bn = function (a, b) {
        if (this.h != null) {
            this.h.qm(a, b);
        }
        ;
    };
    CheckboxList.prototype.be = function (a) {
        var b = null;
        if (this.b == null || this.b.length == 0) {
            b = new PrimaryKeyValue(null, a);
        }
        else if (this.b.length == a.length) {
            b = new PrimaryKeyValue(this.b, a);
        }
        else {
            throw new ArgumentException(1, "value length must match PrimaryKey length");
        }
        if (b != null) {
            this.g.add(b);
        }
    };
    CheckboxList.prototype.b4 = function (a) {
        var b = null;
        if (this.b == null || this.b.length == 0) {
            b = new PrimaryKeyValue(null, a);
        }
        else if (this.b.length == a.length) {
            b = new PrimaryKeyValue(this.b, a);
        }
        else {
            throw new ArgumentException(1, "value length must match PrimaryKey length");
        }
        if (this.g.contains(b)) {
            this.g.remove(b);
        }
    };
    Object.defineProperty(CheckboxList.prototype, "a6", {
        get: function () {
            return this.a5;
        },
        set: function (a) {
            if (a == this.a5) {
                return;
            }
            var b = this.a5;
            this.a5 = a;
            this.bu("SelectAllCaption", b, this.a5);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxList.prototype, "cj", {
        get: function () {
            return this.cd;
        },
        set: function (a) {
            var b = this.cd;
            this.cd = a;
            if (b != this.cd) {
                this.bu("SelectAllCaptionTextColor", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxList.prototype, "cf", {
        get: function () {
            return this.cb;
        },
        set: function (a) {
            var b = this.cb;
            this.cb = a;
            if (b != this.cb) {
                this.bu("ActualSelectAllCaptionTextColor", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxList.prototype, "ae", {
        get: function () {
            if (-1 == this.ai) {
                return false;
            }
            var a = this.g.count;
            if (0 == a) {
                return false;
            }
            if (a == this.ai) {
                return false;
            }
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxList.prototype, "ag", {
        get: function () {
            return this.af;
        },
        set: function (a) {
            if (a == this.af) {
                return;
            }
            var b = this.af;
            this.af = a;
            this.bu("showSelectAll", b, this.af);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxList.prototype, "cg", {
        get: function () {
            return this.cc;
        },
        set: function (a) {
            var b = this.cc;
            this.cc = a;
            if (b != this.cc) {
                this.bu("BackgroundColor", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxList.prototype, "cl", {
        get: function () {
            return this.ce;
        },
        set: function (a) {
            var b = this.ce;
            this.ce = a;
            if (b != this.ce) {
                this.bu("TextColor", b, a);
            }
        },
        enumerable: true,
        configurable: true
    });
    CheckboxList.prototype.bw = function (a) {
        if (this.selectAllCheckboxChanged != null) {
            this.selectAllCheckboxChanged(this, ((function () {
                var $ret = new SelectAllCheckboxChangedEventArgs();
                $ret.a = a;
                return $ret;
            })()));
        }
    };
    CheckboxList.prototype.ad = function () {
        if (-1 == this.ai) {
            return true;
        }
        var a = this.g.count;
        switch (this.p) {
            case 0: return this.ai == a;
            case 1: return 0 == a;
            default: return false;
        }
    };
    CheckboxList.prototype.ac = function () {
        if (-1 == this.ai) {
            return false;
        }
        var a = this.g.count;
        switch (this.p) {
            case 0: return 0 == a;
            case 1: return this.ai == a;
            default: return false;
        }
    };
    CheckboxList.prototype.bf = function () {
        var a = this.h.actualDataSource;
        if (null != a) {
            if (null == a.actualSchema) {
                this.ai = -1;
                return;
            }
            var b = a.actualCount;
            this.ai = b;
        }
        else {
            this.ai = -1;
        }
    };
    CheckboxList.$t = markType(CheckboxList, 'CheckboxList', Base.$, [INotifyPropertyChanged_$type]);
    CheckboxList.ck = BrushUtil.g(255, 24, 29, 31);
    CheckboxList.a4 = "M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z";
    CheckboxList.ch = BrushUtil.g(255, 248, 248, 248);
    CheckboxList.ci = BrushUtil.g(255, 24, 29, 31);
    return CheckboxList;
}(Base));
export { CheckboxList };
//# sourceMappingURL=CheckboxListView_combined.js.map
