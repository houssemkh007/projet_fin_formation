import { TemplateHeaderCellUpdatingEventArgs as TemplateHeaderCellUpdatingEventArgs_internal } from "./TemplateHeaderCellUpdatingEventArgs";
import { IgrDateTimeCellInfo } from "./igr-date-time-cell-info";
import { IgrImageCellInfo } from "./igr-image-cell-info";
import { IgrNumericCellInfo } from "./igr-numeric-cell-info";
import { IgrRowSeparatorInfo } from "./igr-row-separator-info";
import { IgrSectionHeaderCellInfo } from "./igr-section-header-cell-info";
import { IgrTemplateCellInfo } from "./igr-template-cell-info";
import { IgrTemplateHeaderCellInfo } from "./igr-template-header-cell-info";
import { IgrTemplateSectionHeaderCellInfo } from "./igr-template-section-header-cell-info";
import { IgrTextCellInfo } from "./igr-text-cell-info";
import { IgrTextHeaderCellInfo } from "./igr-text-header-cell-info";
/**
 * Information about the header cell that has content which is being created or updated.
*/
var IgrTemplateHeaderCellUpdatingEventArgs = /** @class */ /*@__PURE__*/ (function () {
    function IgrTemplateHeaderCellUpdatingEventArgs() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    IgrTemplateHeaderCellUpdatingEventArgs.prototype.createImplementation = function () {
        return new TemplateHeaderCellUpdatingEventArgs_internal();
    };
    Object.defineProperty(IgrTemplateHeaderCellUpdatingEventArgs.prototype, "i", {
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    IgrTemplateHeaderCellUpdatingEventArgs.prototype.onImplementationCreated = function () {
    };
    IgrTemplateHeaderCellUpdatingEventArgs.prototype._provideImplementation = function (i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    };
    Object.defineProperty(IgrTemplateHeaderCellUpdatingEventArgs.prototype, "isCanvasBased", {
        get: function () {
            return this.i.content.isCanvasBased;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrTemplateHeaderCellUpdatingEventArgs.prototype, "content", {
        /**
         * The host in which to add or update content if this is a DOM based cell.
        */
        get: function () {
            if (this.isCanvasBased) {
                return null;
            }
            else {
                return this.i.content.element.getNativeElement();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrTemplateHeaderCellUpdatingEventArgs.prototype, "context", {
        get: function () {
            if (this.isCanvasBased) {
                return this.i.content.templateContext;
            }
            else {
                return null;
            }
        },
        enumerable: true,
        configurable: true
    });
    IgrTemplateHeaderCellUpdatingEventArgs.prototype.ensureCorrectSize = function () {
        return this.i.content.ensureCorrectSize();
    };
    IgrTemplateHeaderCellUpdatingEventArgs.prototype.renderStandardBackground = function () {
        this.i.content.renderStandardBackground();
    };
    IgrTemplateHeaderCellUpdatingEventArgs.prototype.renderStandardContent = function () {
        this.i.content.renderStandardContent();
    };
    Object.defineProperty(IgrTemplateHeaderCellUpdatingEventArgs.prototype, "cellInfo", {
        /**
         * The backing information for the current cell.
        */
        get: function () {
            if (this.i.cellInfo == null) {
                return null;
            }
            if (!this.i.cellInfo.externalObject) {
                var ext = null;
                switch (this.i.cellInfo.$type.name) {
                    case "DateTimeCellModel":
                        ext = new IgrDateTimeCellInfo();
                        break;
                    case "ImageCellModel":
                        ext = new IgrImageCellInfo();
                        break;
                    case "NumericCellModel":
                        ext = new IgrNumericCellInfo();
                        break;
                    case "RowSeparatorModel":
                        ext = new IgrRowSeparatorInfo();
                        break;
                    case "SectionHeaderCellModel":
                        ext = new IgrSectionHeaderCellInfo();
                        break;
                    case "TemplateCellModel":
                        ext = new IgrTemplateCellInfo();
                        break;
                    case "TemplateHeaderCellModel":
                        ext = new IgrTemplateHeaderCellInfo();
                        break;
                    case "TemplateSectionHeaderCellModel":
                        ext = new IgrTemplateSectionHeaderCellInfo();
                        break;
                    case "TextCellModel":
                        ext = new IgrTextCellInfo();
                        break;
                    case "TextHeaderCellModel":
                        ext = new IgrTextHeaderCellInfo();
                        break;
                }
                ext._implementation = this.i.cellInfo;
                this.i.cellInfo.externalObject = ext;
            }
            return this.i.cellInfo.externalObject;
        },
        enumerable: true,
        configurable: true
    });
    return IgrTemplateHeaderCellUpdatingEventArgs;
}());
export { IgrTemplateHeaderCellUpdatingEventArgs };
//# sourceMappingURL=igr-template-header-cell-updating-event-args.js.map
