/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { Base, markType, INotifyPropertyChanged_$type, PropertyChangedEventArgs, runOn, delegateRemove, delegateCombine, enumGetBox, fromEnum } from "igniteui-react-core";
import { BaseControlTheme_$type } from "igniteui-react-core";
import { ControlDisplayDensity_$type } from "igniteui-react-core";
import { BrushUtil } from "igniteui-react-core";
import { ObservableCollection$1 } from "igniteui-react-core";
import { ColumnChooserInfo } from "./ColumnChooserInfo";
/**
 * @hidden
 */
var ColumnChooserView = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(ColumnChooserView, _super);
    function ColumnChooserView() {
        var _this = _super.call(this) || this;
        _this.d = null;
        _this.c = null;
        _this.e = null;
        _this.a = null;
        _this.b = null;
        return _this;
    }
    ColumnChooserView.prototype.h = function () {
    };
    ColumnChooserView.prototype.g = function (a) {
        if (a == null) {
            this.b = null;
            return;
        }
        this.b = a;
        this.e = this.b.rootWrapper.getChildAt(0);
        this.e.setStyleProperty("margin", "4px 0px 4px 0px");
        this.k();
        this.j();
        var b = Math.round(a.rootWrapper.width());
        var c = Math.round(a.rootWrapper.height());
        this.b.rootWrapper.setStyleProperty("position", "relative");
        this.i();
    };
    ColumnChooserView.prototype.i = function () {
        if (this.b != null) {
            this.b.rootWrapper.setStyleProperty("background-color", this.a.ao._fill);
        }
    };
    ColumnChooserView.prototype.j = function () {
        if (this.b != null) {
            var a = this.b.rootWrapper.getChildAt(1);
            a.setStyleProperty("width", "100%");
            if (this.a.t != null) {
                a.setStyleProperty("height", "calc(100% - 25px");
            }
            else {
                a.setStyleProperty("height", "calc(100% - 5px");
            }
        }
    };
    ColumnChooserView.prototype.k = function () {
        if (this.e != null && this.a.t != null) {
            this.e.setText(this.a.t);
            this.e.setStyleProperty("font", "16px \"Segoe UI\", Verdana");
        }
        this.l();
        this.m();
        this.j();
    };
    ColumnChooserView.prototype.l = function () {
        if (this.e != null && this.a.ap != null) {
            this.e.setStyleProperty("color", this.a.ap._fill);
        }
    };
    ColumnChooserView.prototype.m = function () {
        if (this.e != null && this.a.j != null) {
            this.e.setStyleProperty("font", this.a.j.fontString);
        }
    };
    ColumnChooserView.prototype.f = function () {
    };
    ColumnChooserView.$t = markType(ColumnChooserView, 'ColumnChooserView');
    return ColumnChooserView;
}(Base));
export { ColumnChooserView };
/**
 * @hidden
 */
var ColumnChooser = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(ColumnChooser, _super);
    function ColumnChooser() {
        var _this = _super.call(this) || this;
        _this.c = null;
        _this.h = null;
        _this.propertyChanged = null;
        _this.k = false;
        _this.a = null;
        _this.m = null;
        _this.i = null;
        _this.an = BrushUtil.g(255, 0, 153, 255);
        _this.l = "Filter columns list ...";
        _this.d = 1;
        _this.f = 2;
        _this.am = BrushUtil.g(255, 248, 248, 248);
        _this.k = false;
        var a = new ColumnChooserView();
        a.a = _this;
        _this.c = a;
        _this.c.h();
        return _this;
    }
    ColumnChooser.prototype.notifySizeChanged = function () {
        this.c.f();
    };
    ColumnChooser.prototype.destroy = function () {
        if (this.h != null) {
            var a = this.h;
            a.checkedChanged = delegateRemove(a.checkedChanged, runOn(this, this.aa));
            var b = this.h;
            b.selectAllCheckboxChanged = delegateRemove(b.selectAllCheckboxChanged, runOn(this, this.ab));
        }
        this.provideContainer(null, null);
        if (this.a != null) {
            var c = this.a.actualColumns;
            c.collectionChanged = delegateRemove(c.collectionChanged, runOn(this, this.x));
            var d = this.a;
            d.columnHiddenChanged = delegateRemove(d.columnHiddenChanged, runOn(this, this.ak));
        }
    };
    ColumnChooser.prototype.provideContainer = function (a, b) {
        this.h = b;
        if (this.h != null) {
            var c = this.h;
            c.checkedChanged = delegateCombine(c.checkedChanged, runOn(this, this.aa));
            var d = this.h;
            d.selectAllCheckboxChanged = delegateCombine(d.selectAllCheckboxChanged, runOn(this, this.ab));
        }
        this.y();
        this.c.g(a);
    };
    Object.defineProperty(ColumnChooser.prototype, "b", {
        get: function () {
            return this.a;
        },
        set: function (a) {
            var b = this.a;
            this.a = a;
            if (b != this.a) {
                this.ae("TargetGrid", b, this.a);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColumnChooser.prototype, "t", {
        get: function () {
            return this.m;
        },
        set: function (a) {
            var b = this.m;
            this.m = a;
            if (b != this.m) {
                this.ae("Title", b, this.m);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColumnChooser.prototype, "j", {
        get: function () {
            return this.i;
        },
        set: function (a) {
            var b = this.i;
            this.i = a;
            if (b != this.i) {
                this.ae("TitleStyle", b, this.i);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColumnChooser.prototype, "ap", {
        get: function () {
            return this.an;
        },
        set: function (a) {
            var b = this.an;
            this.an = a;
            if (b != this.an) {
                this.ae("TitleColor", b, this.an);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColumnChooser.prototype, "q", {
        get: function () {
            return this.l;
        },
        set: function (a) {
            var b = this.l;
            this.l = a;
            if (b != this.l) {
                this.ae("FilterPlaceholderText", b, this.l);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColumnChooser.prototype, "e", {
        get: function () {
            return this.d;
        },
        set: function (a) {
            var b = this.d;
            this.d = a;
            if (b != this.d) {
                this.ae("BaseTheme", enumGetBox(BaseControlTheme_$type, b), enumGetBox(BaseControlTheme_$type, this.d));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColumnChooser.prototype, "g", {
        get: function () {
            return this.f;
        },
        set: function (a) {
            var b = this.f;
            this.f = a;
            if (b != this.f) {
                this.ae("Density", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, this.f));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColumnChooser.prototype, "ao", {
        get: function () {
            return this.am;
        },
        set: function (a) {
            var b = this.am;
            this.am = a;
            if (b != this.am) {
                this.ae("BackgroundColor", b, this.am);
            }
        },
        enumerable: true,
        configurable: true
    });
    ColumnChooser.prototype.ae = function (a, b, c) {
        if (this.propertyChanged != null) {
            this.propertyChanged(this, new PropertyChangedEventArgs(a));
        }
        this.af(a, b, c);
    };
    ColumnChooser.prototype.af = function (a, b, c) {
        switch (a) {
            case "TargetGrid":
                if (b != null) {
                    var d = b.actualColumns;
                    d.collectionChanged = delegateRemove(d.collectionChanged, runOn(this, this.x));
                    var e = b;
                    e.columnHiddenChanged = delegateRemove(e.columnHiddenChanged, runOn(this, this.ak));
                }
                if (this.a != null) {
                    var f = this.a.actualColumns;
                    f.collectionChanged = delegateCombine(f.collectionChanged, runOn(this, this.x));
                    var g = this.a;
                    g.columnHiddenChanged = delegateCombine(g.columnHiddenChanged, runOn(this, this.ak));
                }
                this.y();
                break;
            case "Title":
                this.c.k();
                break;
            case "TitleStyle":
                this.c.m();
                break;
            case "TitleColor":
                this.c.l();
                break;
            case "FilterPlaceholderText":
                if (this.h != null) {
                    this.h.ax = this.q;
                }
                break;
            case "BaseTheme":
                this.ai();
                break;
            case "Density":
                this.ah();
                break;
            case "BackgroundColor":
                if (this.h != null) {
                    this.h.cg = this.ao;
                }
                this.c.i();
                break;
        }
    };
    ColumnChooser.prototype.ai = function () {
        if (this.h != null) {
            this.h.l = this.e;
        }
    };
    ColumnChooser.prototype.ah = function () {
        if (this.h != null) {
            this.h.n = this.g;
        }
    };
    ColumnChooser.prototype.ak = function (a, b) {
        if (this.k == false) {
            this.y();
        }
        this.k = false;
    };
    ColumnChooser.prototype.x = function (a, b) {
        this.y();
    };
    ColumnChooser.prototype.y = function () {
        var e_1, _a;
        if (this.a != null && this.h != null) {
            this.h.l = this.e;
            this.h.n = this.g;
            this.h.cg = this.ao;
            var a = void 0;
            var b = new ObservableCollection$1(ColumnChooserInfo.$, 0);
            try {
                for (var _b = tslib_1.__values(fromEnum(this.a.actualColumns)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var c = _c.value;
                    a = new ColumnChooserInfo();
                    var d = c.hy;
                    if (c.h2 != null) {
                        d = c.h2;
                    }
                    a.columnName = d;
                    a.isNotHidden = !c.gd;
                    b.add(a);
                }
            }
            catch (e_1_1) {
                e_1 = { error: e_1_1 };
            }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return))
                        _a.call(_b);
                }
                finally {
                    if (e_1)
                        throw e_1.error;
                }
            }
            if (this.q != null) {
                this.h.ax = this.q;
            }
            this.h.itemsSource = b;
            var e = "";
            var f = "";
            e = "columnName";
            f = "isNotHidden";
            this.h.a9 = f;
            this.h.at = e;
            this.h.ag = true;
        }
    };
    ColumnChooser.prototype.al = function (a) {
        if (this.h != null) {
            this.h.updateHrMargin(a);
        }
    };
    ColumnChooser.prototype.aj = function () {
        var e_2, _a;
        this.h.b5();
        if (this.a != null) {
            try {
                for (var _b = tslib_1.__values(fromEnum(this.a.actualColumns)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var a = _c.value;
                    this.k = true;
                    a.gd = false;
                }
            }
            catch (e_2_1) {
                e_2 = { error: e_2_1 };
            }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return))
                        _a.call(_b);
                }
                finally {
                    if (e_2)
                        throw e_2.error;
                }
            }
        }
    };
    ColumnChooser.prototype.ac = function () {
        var e_3, _a;
        this.h.bh();
        if (this.a != null) {
            try {
                for (var _b = tslib_1.__values(fromEnum(this.a.actualColumns)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var a = _c.value;
                    this.k = true;
                    a.gd = true;
                }
            }
            catch (e_3_1) {
                e_3 = { error: e_3_1 };
            }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return))
                        _a.call(_b);
                }
                finally {
                    if (e_3)
                        throw e_3.error;
                }
            }
        }
    };
    ColumnChooser.prototype.ab = function (a, b) {
        this.k = true;
        if (b.a) {
            this.aj();
        }
        else {
            this.ac();
        }
    };
    ColumnChooser.prototype.aa = function (a, b) {
        this.k = true;
        var c = this.h.h.actualDataSource.getItemAtIndex(b.b);
        var d = this.a.actualColumns.count;
        for (var e = 0; e < d; e++) {
            if (this.a.actualColumns._inner[e].hy == c.columnName || this.a.actualColumns._inner[e].id == c.columnName || this.a.actualColumns._inner[e].h2 == c.columnName) {
                this.a.actualColumns._inner[e].gd = !b.a;
            }
        }
    };
    ColumnChooser.$t = markType(ColumnChooser, 'ColumnChooser', Base.$, [INotifyPropertyChanged_$type]);
    return ColumnChooser;
}(Base));
export { ColumnChooser };
//# sourceMappingURL=ColumnChooserView_combined.js.map
