import * as tslib_1 from "tslib";
import * as React from 'react';
import { ensureEnum, brushToString, stringToBrush, ensureBool, initializePropertiesFromCss, NamePatcher, isValidProp, toSpinal, getModifiedProps } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
import { ReactRenderer } from "igniteui-react-core";
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { SyncableObservableCollection$1 } from "igniteui-react-core";
import { CheckboxList } from './CheckboxList';
import { IgrDataGrid } from "./igr-data-grid";
import { IgrCheckedChangedEventArgs } from "./igr-checked-changed-event-args";
import { IgrSelectAllCheckboxChangedEventArgs } from "./igr-select-all-checkbox-changed-event-args";
import { PrimaryKeyValue } from "./PrimaryKeyValue";
import { IgrGridSelectedKeysCollection } from "./igr-grid-selected-keys-collection";
import { GridSelectedKeysCollection as GridSelectedKeysCollection_internal } from "./GridSelectedKeysCollection";
import { CheckboxListIndexType_$type } from "./CheckboxListIndexType";
import { InputGroupDisplayType_$type } from "igniteui-react-inputs";
import { BaseControlTheme_$type } from "igniteui-react-core";
import { ControlDisplayDensity_$type } from "igniteui-react-core";
var IgrCheckboxList = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(IgrCheckboxList, _super);
    function IgrCheckboxList(props) {
        var _this = _super.call(this, props) || this;
        _this._dataSource = null;
        _this._wrapper = null;
        _this._implementation = null;
        _this._keys = null;
        _this.__p = null;
        _this._hasUserValues = new Set();
        _this._stylingContainer = null;
        _this._stylingParent = null;
        _this._inStyling = false;
        _this._checkedChanged = null;
        _this._checkedChanged_wrapped = null;
        _this._selectAllCheckboxChanged = null;
        _this._selectAllCheckboxChanged_wrapped = null;
        if (_this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));
        }
        _this._getMainRef = _this._getMainRef.bind(_this);
        _this._getGridRef = _this._getGridRef.bind(_this);
        _this._getSelectAllSection = _this._getSelectAllSection.bind(_this);
        _this._getFilterHr = _this._getFilterHr.bind(_this);
        _this._implementation = _this.createImplementation();
        var checkboxList = _this.i;
        _this._checkboxList = checkboxList;
        checkboxList.notifySizeChanged();
        if (props) {
            _this.initializeProperties();
        }
        return _this;
    }
    Object.defineProperty(IgrCheckboxList.prototype, "height", {
        get: function () {
            return this._height;
        },
        set: function (value) {
            this._height = value;
            if (this._elRef) {
                this._elRef.style.height = value;
                this._checkboxList.notifySizeChanged();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckboxList.prototype, "width", {
        get: function () {
            return this._width;
        },
        set: function (value) {
            this._width = value;
            if (this._elRef) {
                this._elRef.style.height = value;
                this._checkboxList.notifySizeChanged();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckboxList.prototype, "dataSource", {
        get: function () {
            return this._dataSource;
        },
        set: function (value) {
            this._dataSource = value;
            if (this._checkboxList != null) {
                this._checkboxList.itemsSource = this._dataSource;
            }
        },
        enumerable: true,
        configurable: true
    });
    IgrCheckboxList.prototype._getMainRef = function (ref) {
        this._elRef = ref;
        this.verifyReferences();
    };
    IgrCheckboxList.prototype._getGridRef = function (ref) {
        this._gridRef = ref;
        this.verifyReferences();
    };
    IgrCheckboxList.prototype._getSelectAllSection = function (ref) {
        this._selectAllSectionRef = ref;
        this.verifyReferences();
    };
    IgrCheckboxList.prototype._getFilterHr = function (ref) {
        this._filterHrRef = ref;
        this.verifyReferences();
    };
    IgrCheckboxList.prototype.verifyReferences = function () {
        if (this._elRef != null &&
            this._gridRef != null &&
            this._filterHrRef != null &&
            this._selectAllSectionRef != null) {
            this._renderer = new ReactRenderer(this._elRef, document, false, null);
            var selectAllSectionWrapper = this._renderer.getWrapper(this._selectAllSectionRef);
            this._checkboxList.provideContainer(this._renderer, this._gridRef.i, selectAllSectionWrapper);
            var filterHr = this._renderer.getWrapper(this._filterHrRef);
            filterHr.setStyleProperty("margin", "3px 0px");
            filterHr.setStyleProperty("border-top", "1px solid #dde2eb");
            filterHr.setStyleProperty("border-left", "0px");
            filterHr.setStyleProperty("border-right", "0px");
            filterHr.setStyleProperty("border-bottom", "0px");
            this._checkboxList.provideHrElement(filterHr);
        }
    };
    IgrCheckboxList.prototype.render = function () {
        var children = [];
        //let filterContainerChildren: any[] = [];
        var filterContainer = React.createElement("div", {
            key: "filterContainer"
            //children: filterContainerChildren
        });
        children.push(filterContainer);
        var filterHr = React.createElement("hr", {
            ref: this._getFilterHr,
            key: "filterHr"
            //children: filterContainerChildren
        });
        children.push(filterHr);
        /*let filter = React.createElement("input", {
            ref: this._getFilterRef,
            type: "text",
            key: "checkboxListFilterInput"
        });
        filterContainerChildren.push(filter);*/
        var selectAllSection = React.createElement("div", {
            ref: this._getSelectAllSection,
            key: "selectAllSection"
        });
        children.push(selectAllSection);
        var grid = React.createElement(IgrDataGrid, {
            ref: this._getGridRef,
            key: "checkboxListGrid",
            scrollbarStyle: "Default",
            headerHeight: 0
        });
        children.push(grid);
        var div = React.createElement("div", {
            className: "ig-checkbox-list igr-checkbox-list",
            ref: this._getMainRef,
            children: children
        });
        return div;
    };
    IgrCheckboxList.prototype.shouldComponentUpdate = function (nextProps, nextState) {
        var e_1, _a;
        var mod = getModifiedProps(this.props, nextProps);
        try {
            for (var _b = tslib_1.__values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                if (isValidProp(this, p)) {
                    this[p] = mod[p];
                }
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
        return true;
    };
    IgrCheckboxList.prototype.initializeProperties = function () {
        var e_2, _a;
        try {
            for (var _b = tslib_1.__values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                if (isValidProp(this, p)) {
                    this[p] = this.props[p];
                }
            }
        }
        catch (e_2_1) {
            e_2 = { error: e_2_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_2)
                    throw e_2.error;
            }
        }
    };
    // supports angular themes or custom properties set in CSS
    IgrCheckboxList.prototype.updateStyle = function () {
        this._styling(this._elRef, this);
    };
    IgrCheckboxList.prototype.componentWillUnmount = function () {
        if (this._checkboxList)
            this._checkboxList.destroy();
        if (this._renderer)
            this._renderer.destroy();
    };
    IgrCheckboxList.prototype.componentDidMount = function () {
        this._elRef.style.width = this._width ? this._width : "";
        this._elRef.style.height = this._height ? this._height : "";
        this._checkboxList.notifySizeChanged();
        this.initializeContent();
    };
    IgrCheckboxList.prototype.initializeContent = function () {
        this.updateStyle();
        this.i.notifySizeChanged();
    };
    IgrCheckboxList.prototype.createImplementation = function () {
        return new CheckboxList();
    };
    Object.defineProperty(IgrCheckboxList.prototype, "i", {
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckboxList.prototype, "keys", {
        /**
         * Gets the collection responsible for selection in the CheckboxList. Selection is determined by two factors:
         * whether everything is selected or deselected and the values present in this collection. If everything is
         * selected then any items in this collection will be deselected. If everything is deselected then any items in
         * this collection will be selected. The CheckboxList defaults all items as deselected. This state can change
         * when you use the SelectAll and DeselectAll methods.
        */
        get: function () {
            if (this._keys === null) {
                var coll = new IgrGridSelectedKeysCollection();
                var innerColl = this.i.g;
                if (!innerColl) {
                    innerColl = new GridSelectedKeysCollection_internal();
                }
                this._keys = coll._fromInner(innerColl);
            }
            return this._keys;
        },
        set: function (v) {
            if (this._keys !== null) {
                this._keys._setSyncTarget(null);
                this._keys = null;
            }
            var coll = new IgrGridSelectedKeysCollection();
            this._keys = coll._fromOuter(v);
            var syncColl = new SyncableObservableCollection$1(PrimaryKeyValue.$type);
            var innerColl = this.i.g;
            if (!innerColl) {
                innerColl = new GridSelectedKeysCollection_internal();
            }
            syncColl._inner = innerColl;
            syncColl.clear();
            this._keys._setSyncTarget(syncColl);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckboxList.prototype, "primaryKey", {
        /**
         * Gets or sets the primary key to use for the CheckboxList.
        */
        get: function () {
            return this.i.b;
        },
        set: function (v) {
            this.i.b = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckboxList.prototype, "dataMemberPath", {
        /**
         * Gets or Sets the property name that contains the values.
        */
        get: function () {
            return this.i.at;
        },
        set: function (v) {
            this.i.at = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckboxList.prototype, "selectedMemberPath", {
        /**
         * Gets or Sets the property name that contains the values.
        */
        get: function () {
            return this.i.a9;
        },
        set: function (v) {
            this.i.a9 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckboxList.prototype, "filterPlaceholderText", {
        /**
         * Gets or Sets the property name that contains the values.
        */
        get: function () {
            return this.i.ax;
        },
        set: function (v) {
            this.i.ax = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckboxList.prototype, "searchInputType", {
        /**
         * Gets or Sets the property name that contains the values.
        */
        get: function () {
            return this.i.v;
        },
        set: function (v) {
            this.i.v = ensureEnum(InputGroupDisplayType_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckboxList.prototype, "rowHeight", {
        /**
         * Gets or Sets the property name that contains the values.
        */
        get: function () {
            return this.i.aj;
        },
        set: function (v) {
            this.i.aj = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckboxList.prototype, "cellTextStyle", {
        /**
         * Gets or Sets the property name that contains the values.
        */
        get: function () {
            if (this.i.z == null) {
                return null;
            }
            return this.i.z.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.z = fi;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckboxList.prototype, "indexType", {
        /**
         * Gets or Sets the property name that contains the values.
        */
        get: function () {
            return this.i.p;
        },
        set: function (v) {
            this.i.p = ensureEnum(CheckboxListIndexType_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckboxList.prototype, "baseTheme", {
        /**
         * Gets or Sets the property name that contains the values.
        */
        get: function () {
            return this.i.l;
        },
        set: function (v) {
            this.i.l = ensureEnum(BaseControlTheme_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckboxList.prototype, "density", {
        /**
         * Gets or Sets the property name that contains the values.
        */
        get: function () {
            return this.i.n;
        },
        set: function (v) {
            this.i.n = ensureEnum(ControlDisplayDensity_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckboxList.prototype, "selectAllCaption", {
        /**
         * Gets / sets the caption of the "Select All" checkbox.
        */
        get: function () {
            return this.i.a6;
        },
        set: function (v) {
            this.i.a6 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckboxList.prototype, "selectAllCaptionTextColor", {
        /**
         * Gets or sets the color to use for the "Select All" label.
        */
        get: function () {
            return brushToString(this.i.cj);
        },
        set: function (v) {
            this.i.cj = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckboxList.prototype, "actualSelectAllCaptionTextColor", {
        /**
         * Gets or sets the color to use for the actual header selectAllCaption text.
        */
        get: function () {
            return brushToString(this.i.cf);
        },
        set: function (v) {
            this.i.cf = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckboxList.prototype, "showSelectAll", {
        /**
         * Gets / sets whether the "Select all" checkbox is visible.
        */
        get: function () {
            return this.i.ag;
        },
        set: function (v) {
            this.i.ag = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckboxList.prototype, "backgroundColor", {
        /**
         * Gets or sets the color to use for the background of the component.
        */
        get: function () {
            return brushToString(this.i.cg);
        },
        set: function (v) {
            this.i.cg = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckboxList.prototype, "textColor", {
        /**
         * Gets or sets the color to use for the text of the component.
        */
        get: function () {
            return brushToString(this.i.cl);
        },
        set: function (v) {
            this.i.cl = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    IgrCheckboxList.prototype.findByName = function (name) {
        if (this.keys != null && this.keys.findByName && this.keys.findByName(name)) {
            return this.keys.findByName(name);
        }
        return null;
    };
    Object.defineProperty(IgrCheckboxList.prototype, "hasUserValues", {
        get: function () {
            return this._hasUserValues;
        },
        enumerable: true,
        configurable: true
    });
    IgrCheckboxList.prototype.__m = function (propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    };
    IgrCheckboxList.prototype._styling = function (container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        var genericPrefix = "";
        var typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("CheckboxList");
        var additionalPrefixes = [];
        var prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        var b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            var basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            var parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            var parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    };
    /**
 * selects all the items in the checkbox list.

*/
    IgrCheckboxList.prototype.selectAll = function () {
        this.i.b5();
    };
    /**
     * Deselects all the items in the checkbox list.
    
    */
    IgrCheckboxList.prototype.deselectAll = function () {
        this.i.bh();
    };
    IgrCheckboxList.prototype.notifySetItem = function (index, oldItem, newItem) {
        this.i.bo(index, oldItem, newItem);
    };
    /**
     * Manually notifies the checkboxlist's grid that the data it has bound to has been cleared and needs to be re-examined.
     * This should not be called if the data that the grid is bound to is already observable.
    
    */
    IgrCheckboxList.prototype.notifyClearItems = function () {
        this.i.bl();
    };
    IgrCheckboxList.prototype.notifyInsertItem = function (index, newItem) {
        this.i.bm(index, newItem);
    };
    IgrCheckboxList.prototype.notifyRemoveItem = function (index, oldItem) {
        this.i.bn(index, oldItem);
    };
    IgrCheckboxList.prototype.addKeyValue = function (value) {
        this.i.be(value);
    };
    IgrCheckboxList.prototype.removeKeyValue = function (value) {
        this.i.b4(value);
    };
    /**
     * Returns true if no items are selected / checked; otherwise false.
    
    */
    IgrCheckboxList.prototype.isNothingSelected = function () {
        var iv = this.i.ad();
        return (iv);
    };
    /**
     * Returns true if all of the items are selected / checked; otherwise false.
    
    */
    IgrCheckboxList.prototype.isEverythingSelected = function () {
        var iv = this.i.ac();
        return (iv);
    };
    Object.defineProperty(IgrCheckboxList.prototype, "checkedChanged", {
        /**
         * Called when a checkbox is checked or unchecked.
        */
        get: function () {
            return this._checkedChanged;
        },
        set: function (ev) {
            var _this = this;
            if (this._checkedChanged_wrapped !== null) {
                this.i.checkedChanged = delegateRemove(this.i.checkedChanged, this._checkedChanged_wrapped);
                this._checkedChanged_wrapped = null;
                this._checkedChanged = null;
            }
            this._checkedChanged = ev;
            this._checkedChanged_wrapped = function (o, e) {
                var outerArgs = new IgrCheckedChangedEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeCheckedChanged) {
                    _this.beforeCheckedChanged(_this, outerArgs);
                }
                if (_this._checkedChanged) {
                    _this._checkedChanged(_this, outerArgs);
                }
            };
            this.i.checkedChanged = delegateCombine(this.i.checkedChanged, this._checkedChanged_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCheckboxList.prototype, "selectAllCheckboxChanged", {
        /**
         * Called when the SelectAll checkbox is checked or unchecked.
        */
        get: function () {
            return this._selectAllCheckboxChanged;
        },
        set: function (ev) {
            var _this = this;
            if (this._selectAllCheckboxChanged_wrapped !== null) {
                this.i.selectAllCheckboxChanged = delegateRemove(this.i.selectAllCheckboxChanged, this._selectAllCheckboxChanged_wrapped);
                this._selectAllCheckboxChanged_wrapped = null;
                this._selectAllCheckboxChanged = null;
            }
            this._selectAllCheckboxChanged = ev;
            this._selectAllCheckboxChanged_wrapped = function (o, e) {
                var outerArgs = new IgrSelectAllCheckboxChangedEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeSelectAllCheckboxChanged) {
                    _this.beforeSelectAllCheckboxChanged(_this, outerArgs);
                }
                if (_this._selectAllCheckboxChanged) {
                    _this._selectAllCheckboxChanged(_this, outerArgs);
                }
            };
            this.i.selectAllCheckboxChanged = delegateCombine(this.i.selectAllCheckboxChanged, this._selectAllCheckboxChanged_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    return IgrCheckboxList;
}(React.Component));
export { IgrCheckboxList };
//# sourceMappingURL=igr-checkbox-list.js.map
