/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { CanvasCellPresenterBase } from "./CanvasCellPresenterBase";
import { NumericCellModel } from "./NumericCellModel";
import { CanvasContentCellModelHelper } from "./CanvasContentCellModelHelper";
import { markType } from "igniteui-react-core";
import { NumericCellFormatter } from "./NumericCellFormatter";
/**
 * @hidden
 */
var CanvasNumericCellPresenter = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(CanvasNumericCellPresenter, _super);
    function CanvasNumericCellPresenter(a) {
        return _super.call(this, a) || this;
    }
    Object.defineProperty(CanvasNumericCellPresenter.prototype, "d", {
        get: function () {
            return this.a;
        },
        enumerable: true,
        configurable: true
    });
    CanvasNumericCellPresenter.prototype.b = function (a) {
        _super.prototype.b.call(this, a);
        var b = a;
        if (a.as) {
            if (a.ax(NumericCellModel.lf) || b.kw()) {
                b.ip = this.e(b);
                this.d.ck(b.ip);
            }
            CanvasContentCellModelHelper.a(this.a.bl, b, this.a);
        }
    };
    CanvasNumericCellPresenter.prototype.e = function (a) {
        if (a.ll != null) {
            var val_ = a.kz;
            var override_ = a.ll;
            return (override_.format(val_));
        }
        return NumericCellFormatter.b(a);
    };
    CanvasNumericCellPresenter.$t = markType(CanvasNumericCellPresenter, 'CanvasNumericCellPresenter', CanvasCellPresenterBase.$);
    return CanvasNumericCellPresenter;
}(CanvasCellPresenterBase));
export { CanvasNumericCellPresenter };
//# sourceMappingURL=CanvasNumericCellPresenter.js.map
