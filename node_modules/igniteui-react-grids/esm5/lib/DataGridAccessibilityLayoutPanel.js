/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { DataGridCellLayoutPanel } from "./DataGridCellLayoutPanel";
import { DomWrapper_$type } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { Stack$1 } from "igniteui-react-core";
import { FastIterationDictionary$2 } from "igniteui-react-core";
import { AccessibilityRow } from "./AccessibilityRow";
import { Number_$type, markType } from "igniteui-react-core";
/**
 * @hidden
 */
var DataGridAccessibilityLayoutPanel = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(DataGridAccessibilityLayoutPanel, _super);
    function DataGridAccessibilityLayoutPanel(a, b, c) {
        var _this = _super.call(this, a, b, c) || this;
        _this.a0 = new List$1(DomWrapper_$type, 0);
        _this.a1 = new Stack$1(DomWrapper_$type);
        _this.ay = new FastIterationDictionary$2(Number_$type, AccessibilityRow.$, 0);
        _this.aw = null;
        _this.a5 = null;
        _this.a5 = DataGridAccessibilityLayoutPanel.a4.toString();
        DataGridAccessibilityLayoutPanel.a4++;
        return _this;
    }
    DataGridAccessibilityLayoutPanel.prototype.refresh = function (a, b) {
        _super.prototype.refresh.call(this, a, b);
        if (this.rootElement != null) {
            var c = a.ck();
            var d = a.br.count;
            if (a.cl > 0) {
                c++;
            }
            this.rootElement.setAttribute("role", "grid");
            this.rootElement.setAttribute("aria-rowcount", c.toString());
            this.rootElement.setAttribute("aria-colcount", d.toString());
            this.rootElement.setAttribute("aria-multiselectable", "true");
        }
    };
    DataGridAccessibilityLayoutPanel.prototype.af = function (a, b) {
        if (this.az(a)) {
            if (a.k.g) {
                if (this.aw == null) {
                    this.aw = new AccessibilityRow();
                    this.aw.i = this.a5;
                    this.aw.e = -1;
                    this.aw.d = this.f.br.count;
                    this.aw.f = "columnheader";
                }
                this.aw.j(a, b);
            }
            else {
                var c = a.k.g ? -1 : a.k.w;
                var d = this.ax(c);
                if (d == null) {
                    d = new AccessibilityRow();
                    d.i = this.a5;
                    d.e = c;
                    d.d = this.f.br.count;
                    d.f = "gridcell";
                    this.ay.s(c, d);
                }
                d.j(a, b);
            }
        }
    };
    DataGridAccessibilityLayoutPanel.prototype.ah = function (a, b) {
        if (this.az(a)) {
            this.a9(b, "id");
            this.a9(b, "role");
            this.a9(b, "aria-colindex");
            this.a9(b, "aria-selected");
            if (a.k.g) {
                this.a9(b, "aria-sort");
            }
        }
    };
    DataGridAccessibilityLayoutPanel.prototype.ag = function (a, b) {
        if (this.az(a)) {
            this.af(a, b);
        }
    };
    DataGridAccessibilityLayoutPanel.prototype.al = function () {
        this.a6();
        if (this.aw != null) {
            this.a8(this.aw);
            this.aw.k();
        }
        var a = this.ay.q;
        for (var b = 0; b < a.count; b++) {
            var c = a._inner[b];
            this.a8(c);
            c.k();
        }
        this.aw = null;
        this.ay.u();
    };
    DataGridAccessibilityLayoutPanel.prototype.ax = function (a) {
        var b = this.ay.o;
        for (var c = 0; c < b.count; c++) {
            var d = b._inner[c];
            var e = this.ay.item(d);
            if (e != null && e.e == a) {
                return e;
            }
        }
        return null;
    };
    DataGridAccessibilityLayoutPanel.prototype.a2 = function () {
        if (this.a1.f > 0) {
            return this.a1.e();
        }
        return null;
    };
    DataGridAccessibilityLayoutPanel.prototype.a3 = function (a) {
        for (var b = 0; b < this.a0.count; b++) {
            var c = parseInt(this.a0._inner[b].getAttribute("aria-rowindex"));
            if (c == a.c) {
                return this.a0._inner[b];
            }
        }
        return null;
    };
    DataGridAccessibilityLayoutPanel.prototype.a8 = function (a) {
        var b = this.a3(a);
        if (b != null) {
            b.setAttribute("aria-owns", a.h());
            return;
        }
        b = this.a2();
        if (b != null) {
            b.setAttribute("aria-rowindex", a.c.toString());
            b.setAttribute("aria-owns", a.h());
            this.a7(a, b);
            return;
        }
        b = this.s.createElement("div");
        b.setAttribute("role", "row");
        b.setAttribute("aria-rowindex", a.c.toString());
        b.setAttribute("aria-owns", a.h());
        this.a7(a, b);
    };
    DataGridAccessibilityLayoutPanel.prototype.a6 = function () {
        for (var a = 0; a < this.a0.count; a++) {
            var b = this.a0._inner[a];
            var c = parseInt(b.getAttribute("aria-rowindex")) - 2;
            if (c != -1 && !this.ay.d(c)) {
                b.remove();
                this.a1.h(b);
                this.a0.removeAt(a);
                a--;
            }
        }
    };
    DataGridAccessibilityLayoutPanel.prototype.a7 = function (a, b) {
        var c = -1;
        for (var d = 0; d < this.a0.count; d++) {
            var e = parseInt(this.a0._inner[d].getAttribute("aria-rowindex"));
            if (a.c < e) {
                c = d;
                break;
            }
        }
        if (c != -1) {
            var native_ = this.element.getNativeElement();
            native_.insertBefore(b.getNativeElement(), this.a0._inner[c].getNativeElement());
            this.a0.insert(c, b);
        }
        else {
            this.element.append(b);
            this.a0.add(b);
        }
    };
    DataGridAccessibilityLayoutPanel.prototype.az = function (a) {
        return a.k.ag || (a.k.aj && !a.k.h);
    };
    DataGridAccessibilityLayoutPanel.prototype.a9 = function (a, b) {
        a.getNativeElement().removeAttribute(b);
    };
    DataGridAccessibilityLayoutPanel.$t = markType(DataGridAccessibilityLayoutPanel, 'DataGridAccessibilityLayoutPanel', DataGridCellLayoutPanel.$);
    DataGridAccessibilityLayoutPanel.a4 = 0;
    return DataGridAccessibilityLayoutPanel;
}(DataGridCellLayoutPanel));
export { DataGridAccessibilityLayoutPanel };
//# sourceMappingURL=DataGridAccessibilityLayoutPanel.js.map
