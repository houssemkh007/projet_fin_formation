/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { GridCellBase } from "./GridCellBase";
import { GridSortIndicator } from "./GridSortIndicator";
import { GridFilterDialog } from "./GridFilterDialog";
import { ColumnOptionsIconBehavior_$type } from "./ColumnOptionsIconBehavior";
import { ColumnOptionsIconAlignment_$type } from "./ColumnOptionsIconAlignment";
import { enumGetBox, runOn, delegateCombine, markType } from "igniteui-react-core";
/**
 * @hidden
 */
var TextHeaderCell = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(TextHeaderCell, _super);
    function TextHeaderCell(a) {
        var _this = _super.call(this, a) || this;
        _this.ci = null;
        _this.ce = null;
        _this.cc = null;
        _this.b8 = 0;
        _this.b7 = 0;
        _this.ca = 3;
        _this.ck = null;
        _this.cn = -1;
        _this.cm = -1;
        _this.cg = false;
        _this.cj = null;
        _this.ch = false;
        _this.ci = a.createElement("span");
        _this.z.setRawStyleProperty("text-align", "left");
        _this.z.setRawStyleProperty("vertical-align", "middle");
        _this.ci.setRawStyleProperty("display", "inline-block");
        _this.ci.setRawStyleProperty("line-height", "normal");
        _this.ci.setRawStyleProperty("vertical-align", "middle");
        _this.ci.setRawStyleProperty("overflow", "hidden");
        _this.ci.setRawStyleProperty("white-space", "nowrap");
        _this.ci.setRawStyleProperty("text-overflow", "ellipsis");
        _this.z.append(_this.ci);
        var b = 18;
        var c = 18;
        var d = a.createElement("div");
        d.setAttribute("aria-hidden", "true");
        d.setRawStyleProperty("display", "none");
        d.setRawStyleProperty("vertical-align", "middle");
        d.setRawStyleProperty("width", b + "px");
        d.setRawStyleProperty("height", c + "px");
        _this.cj = d;
        var e = a.getSubRenderer(d);
        _this.cc = new GridFilterDialog();
        _this.cc.bf(e, _this.z, a);
        _this.z.append(d);
        _this.cc.a8(b, c);
        _this.cc.af = 24;
        var f = _this.cc.x;
        _this.cc.x = false;
        _this.cc.a5();
        _this.cc.x = f;
        var g = 18;
        var h = 18;
        d = a.createElement("div");
        d.setAttribute("aria-hidden", "true");
        d.setRawStyleProperty("display", "inline-block");
        d.setRawStyleProperty("vertical-align", "middle");
        d.setRawStyleProperty("width", "0px");
        d.setRawStyleProperty("height", h + "px");
        d.setRawStyleProperty("margin", "0 0 0 5px");
        _this.ck = d;
        e = a.getSubRenderer(d);
        _this.ce = new GridSortIndicator();
        _this.ce.l = false;
        _this.ce.ax(e);
        _this.z.append(d);
        _this.ce.ar(g, h);
        var i = _this.ce;
        i.propertyChanged = delegateCombine(i.propertyChanged, runOn(_this, _this.cq));
        var j = _this.cc;
        j.dialogOpening = delegateCombine(j.dialogOpening, runOn(_this, _this.cr));
        var k = _this.cc;
        k.filterChanging = delegateCombine(k.filterChanging, runOn(_this, _this.ct));
        var l = _this.cc;
        l.filterChanged = delegateCombine(l.filterChanged, runOn(_this, _this.cs));
        _this.z.listen("mouseenter", runOn(_this, _this.cx));
        _this.z.listen("mouseleave", runOn(_this, _this.cw));
        return _this;
    }
    Object.defineProperty(TextHeaderCell.prototype, "cl", {
        get: function () {
            return this.ci;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextHeaderCell.prototype, "cf", {
        get: function () {
            return this.ce;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextHeaderCell.prototype, "cd", {
        get: function () {
            return this.cc;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextHeaderCell.prototype, "cb", {
        get: function () {
            return this.ca;
        },
        set: function (a) {
            var b = this.ca;
            this.ca = a;
            this.bg("ColumnOptionsIconBehavior", enumGetBox(ColumnOptionsIconBehavior_$type, b), enumGetBox(ColumnOptionsIconBehavior_$type, this.ca));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextHeaderCell.prototype, "b9", {
        get: function () {
            return this.b8;
        },
        set: function (a) {
            var b = this.b8;
            this.b8 = a;
            this.bg("ColumnOptionsIconAlignment", enumGetBox(ColumnOptionsIconAlignment_$type, b), enumGetBox(ColumnOptionsIconAlignment_$type, this.b8));
        },
        enumerable: true,
        configurable: true
    });
    TextHeaderCell.prototype.s = function (a) {
        return true;
    };
    TextHeaderCell.prototype.bw = function (a, b) {
        _super.prototype.bw.call(this, a, b);
        a -= 21;
        if (this.ch) {
            a -= 15;
        }
        var c = Math.max(0, a - b);
        if (c != this.cn) {
            this.cn = c;
            this.ci.setRawStyleProperty("max-width", c.toString() + "px");
        }
    };
    TextHeaderCell.prototype.bq = function (a, b) {
        _super.prototype.bq.call(this, a, b);
        var c = Math.max(0, a - b);
        if (this.cm != c) {
            this.cm = c;
            this.ci.setRawStyleProperty("max-height", c.toString() + "px");
        }
    };
    TextHeaderCell.prototype.bx = function (a, b, c, d) {
        this.cc.a7();
    };
    TextHeaderCell.prototype.cq = function (a, b) {
        switch (b.propertyName) {
            case "CurrentOpacity":
                if (this.cf.r > 0) {
                    this.ck.setRawStyleProperty("width", "18px");
                    if (this.b7 == 2) {
                        this.ck.setRawStyleProperty("margin", "0 5px 0 0");
                    }
                    else {
                        this.ck.setRawStyleProperty("margin", "0 0 0 5px");
                    }
                }
                else {
                    this.ck.setRawStyleProperty("width", "0px");
                    this.ck.setRawStyleProperty("margin", "0");
                }
                break;
        }
    };
    TextHeaderCell.prototype.cx = function (a) {
        if (this.b.isGridDragging) {
            return;
        }
        switch (this.cb) {
            case 2:
            case 3:
                this.cc.bk();
                break;
        }
    };
    TextHeaderCell.prototype.cw = function (a) {
        switch (this.cb) {
            case 2:
            case 3:
                this.cc.a5();
                break;
        }
    };
    TextHeaderCell.prototype.cs = function (a, b) {
        this.b.columnFilterChanged(b.a);
    };
    TextHeaderCell.prototype.ct = function (a, b) {
        this.b.columnFilterChanging(b.a);
    };
    TextHeaderCell.prototype.cr = function (a, b) {
        if (this.b != null) {
            b.a = this.d.getColumn();
            this.b.cancelEditMode(false);
        }
    };
    TextHeaderCell.prototype.be = function (a, b, c) {
        _super.prototype.be.call(this, a, b, c);
        this.b7 = c;
        this.cc.k = c;
        if (c == 2) {
            this.z.removeChild(this.ck);
            this.z.removeChild(this.cj);
            this.ci.before(this.cj);
            this.cj.before(this.ck);
            if (this.b9 == 1) {
                this.cj.setRawStyleProperty("margin", "0 5px 0 0");
                this.cc.l = this.b7;
            }
            else {
                this.cj.setRawStyleProperty("margin", "0");
                this.cc.l = 0;
            }
        }
        else {
            this.z.removeChild(this.ck);
            this.z.removeChild(this.ci);
            this.cj.before(this.ci);
            this.cj.before(this.ck);
            if (this.b9 == 1) {
                this.cj.setRawStyleProperty("margin", "0 0 0 5px");
                this.cc.l = this.b7;
            }
            else {
                this.cj.setRawStyleProperty("margin", "0");
                this.cc.l = 2;
            }
        }
    };
    TextHeaderCell.prototype.bu = function (a, b, c, d) {
        _super.prototype.bu.call(this, a, b, c, d);
        this.cc.ai = a;
        this.cc.aj = c;
    };
    TextHeaderCell.prototype.cv = function () {
        if (this.b9 == 2 || this.b9 == 0) {
            if (this.b7 == 2) {
                this.cc.l = 0;
            }
            else {
                this.cc.l = 2;
            }
        }
        else {
            this.cc.l = this.b7;
            if (this.b7 == 2) {
                this.cj.setRawStyleProperty("margin", "0 5px 0 0");
            }
            else {
                this.cj.setRawStyleProperty("margin", "0 0 0 5px");
            }
        }
    };
    TextHeaderCell.prototype.cu = function () {
        switch (this.cb) {
            case 1:
                this.cc.x = false;
                this.cc.bk();
                break;
            case 2:
                this.cc.x = false;
                break;
            case 3:
                this.cc.x = true;
                break;
        }
    };
    TextHeaderCell.prototype.bg = function (a, b, c) {
        _super.prototype.bg.call(this, a, b, c);
        switch (a) {
            case "ColumnOptionsIconAlignment":
                this.cv();
                break;
            case "ColumnOptionsIconBehavior":
                this.cu();
                break;
        }
    };
    TextHeaderCell.prototype.onContactStarted = function (e_, a) {
        if (e_.button == 2) {
            return;
        }
        var filterIconCanvas_ = this.cc.aq();
        var b = (e_.originalEvent.srcElement === filterIconCanvas_ || e_.originalEvent.target === filterIconCanvas_);
        if (b) {
            this.cg = true;
            return;
        }
        if (this.cc.y) {
            this.cc.a2();
        }
        _super.prototype.onContactStarted.call(this, e_, a);
    };
    TextHeaderCell.prototype.onContactCompleted = function (e_, a) {
        if (!this.cg) {
            _super.prototype.onContactCompleted.call(this, e_, a);
        }
        this.cg = false;
    };
    TextHeaderCell.prototype.get_q = function () {
        return true;
    };
    TextHeaderCell.$t = markType(TextHeaderCell, 'TextHeaderCell', GridCellBase.$);
    return TextHeaderCell;
}(GridCellBase));
export { TextHeaderCell };
//# sourceMappingURL=TextHeaderCell.js.map
