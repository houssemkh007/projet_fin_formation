import { Base, Type, INotifyPropertyChanged, PropertyChangedEventArgs } from "igniteui-react-core";
import { DomRenderer, DomWrapper } from "igniteui-react-core";
import { ControlDisplayDensity } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { CheckboxListIndexType } from "./CheckboxListIndexType";
import { Grid } from "./Grid";
import { GridSelectedKeysCollection } from "./GridSelectedKeysCollection";
import { InputGroupDisplayType } from "igniteui-react-inputs";
import { FontInfo } from "igniteui-react-core";
import { BaseControlTheme } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { CheckedChangedEventArgs } from "./CheckedChangedEventArgs";
import { SelectAllCheckboxChangedEventArgs } from "./SelectAllCheckboxChangedEventArgs";
/**
 * @hidden
 */
export declare class CheckboxListView extends Base {
    static $t: Type;
    private d;
    private h;
    private a;
    private g;
    constructor();
    b: CheckboxList;
    l(): void;
    private e;
    k(a: DomRenderer): void;
    t(): void;
    q(): void;
    m(a: DomWrapper, b: any, c: boolean): void;
    v(): void;
    u(): void;
    private i;
    j(): void;
    r(a: number, b: boolean): void;
    s(a: boolean): void;
    o(a: any): void;
    private aa;
    y(): void;
    ab(): void;
    private c;
    private f;
    z(a?: boolean): void;
    private p;
    x(): void;
    w(a: Thickness): void;
    n(a: DomWrapper): void;
}
/**
 * @hidden
 */
export declare class CheckboxList extends Base implements INotifyPropertyChanged {
    static $t: Type;
    private q;
    h: Grid;
    private i;
    private x;
    private d;
    private aa;
    private c;
    private s;
    private t;
    private ab;
    private static readonly ck;
    private static readonly a4;
    private readonly e;
    private f;
    readonly g: GridSelectedKeysCollection;
    private a;
    b: string[];
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    constructor();
    private by;
    private bs;
    private bt;
    checkedChanged: (sender: any, args: CheckedChangedEventArgs) => void;
    bq(a: number, b: boolean): void;
    notifySizeChanged(): void;
    destroy(): void;
    provideContainer(a: DomRenderer, b: Grid, c: any): void;
    provideSelectAllSection(a: any): void;
    private bj;
    private bg;
    br(a: string): void;
    private ak;
    itemsSource: any;
    private am;
    at: string;
    private ao;
    a9: string;
    private an;
    ax: string;
    private u;
    v: InputGroupDisplayType;
    private ah;
    aj: number;
    private y;
    z: FontInfo;
    private o;
    p: CheckboxListIndexType;
    private k;
    l: BaseControlTheme;
    private m;
    n: ControlDisplayDensity;
    protected bu(a: string, b: any, c: any): void;
    protected bz(a: string, b: any, c: any): void;
    private b6;
    private b7;
    private bv;
    private bx;
    private b8;
    updateHrMargin(a: Thickness): void;
    provideHrElement(a: DomWrapper): void;
    b9(a: DomRenderer): void;
    private bk;
    private j;
    b3(a: number): void;
    bd(a: number): void;
    b5(): void;
    bh(): void;
    bo(a: number, b: any, c: any): void;
    bl(): void;
    bm(a: number, b: any): void;
    bn(a: number, b: any): void;
    be(a: any[]): void;
    b4(a: any[]): void;
    private a5;
    a6: string;
    private cd;
    cj: Brush;
    private cb;
    cf: Brush;
    readonly ae: boolean;
    private af;
    ag: boolean;
    private static ch;
    private cc;
    cg: Brush;
    private static ci;
    private ce;
    cl: Brush;
    selectAllCheckboxChanged: (sender: any, args: SelectAllCheckboxChangedEventArgs) => void;
    bw(a: boolean): void;
    ad(): boolean;
    ac(): boolean;
    private ai;
    private bf;
}
