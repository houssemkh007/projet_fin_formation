import * as React from 'react';
import { BaseControlTheme } from "igniteui-react-core";
import { ControlDisplayDensity } from "igniteui-react-core";
import { IgrColumn } from "./igr-column";
import { GridColumnOptionsBase } from "./GridColumnOptionsBase";
export declare abstract class IgrGridColumnOptionsBase<P extends IIgrGridColumnOptionsBaseProps = IIgrGridColumnOptionsBaseProps> extends React.Component<P, {}> {
    protected createImplementation(): GridColumnOptionsBase;
    protected _implementation: any;
    /**
     * @hidden
     */
    readonly i: GridColumnOptionsBase; /**
                                 * @hidden
                                 */
    static _createFromInternal(internal: any): IgrGridColumnOptionsBase;
    private onImplementationCreated;
    constructor(props: P);
    componentDidMount(): void;
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    render(): any;
    /**
     * Gets or sets the autoSize for which this AutoSizeOptions will apply.
    */
    autoSize: boolean;
    /**
     * Gets or sets the color to use for the background of the component.
    */
    backgroundColor: string;
    /**
     * Gets or sets the base built in theme to use for the component.
    */
    baseTheme: BaseControlTheme;
    /**
     * Gets the actual display baseTheme to use for the component.
    */
    actualBaseTheme: BaseControlTheme;
    /**
     * Gets or sets the display Density to use for the buttons in the component.
    */
    buttonDensity: ControlDisplayDensity;
    /**
     * Gets the actual display buttonDensity to use for the component.
    */
    actualButtonDensity: ControlDisplayDensity;
    /**
     * Gets or sets the font to use for buttons.
    */
    buttonTextStyle: string;
    /**
     * Gets or sets the column for which this ColumnOptions will apply.
    */
    column: IgrColumn;
    /**
     * Gets or sets the display density to use for the component.
    */
    density: ControlDisplayDensity;
    /**
     * Gets the actual display density to use for the component.
    */
    actualDensity: ControlDisplayDensity;
    /**
     * Gets or sets the font to use for labels.
    */
    labelTextStyle: string;
    /**
     * Gets or sets the color to use for the text of the component.
    */
    textColor: string;
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected readonly hasUserValues: Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
}
export interface IIgrGridColumnOptionsBaseProps {
    /**
     * Gets or sets the autoSize for which this AutoSizeOptions will apply.
    */
    autoSize?: boolean | string;
    /**
     * Gets or sets the color to use for the background of the component.
    */
    backgroundColor?: string;
    /**
     * Gets or sets the base built in theme to use for the component.
    */
    baseTheme?: BaseControlTheme | string;
    /**
     * Gets the actual display baseTheme to use for the component.
    */
    actualBaseTheme?: BaseControlTheme | string;
    /**
     * Gets or sets the display Density to use for the buttons in the component.
    */
    buttonDensity?: ControlDisplayDensity | string;
    /**
     * Gets the actual display buttonDensity to use for the component.
    */
    actualButtonDensity?: ControlDisplayDensity | string;
    /**
     * Gets or sets the font to use for buttons.
    */
    buttonTextStyle?: string;
    /**
     * Gets or sets the column for which this ColumnOptions will apply.
    */
    column?: IgrColumn;
    /**
     * Gets or sets the display density to use for the component.
    */
    density?: ControlDisplayDensity | string;
    /**
     * Gets the actual display density to use for the component.
    */
    actualDensity?: ControlDisplayDensity | string;
    /**
     * Gets or sets the font to use for labels.
    */
    labelTextStyle?: string;
    /**
     * Gets or sets the color to use for the text of the component.
    */
    textColor?: string;
}
