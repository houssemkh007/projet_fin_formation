import { Base, Type } from "igniteui-react-core";
import { INativeCell } from "./INativeCell";
import { ICellActionManager } from "./ICellActionManager";
import { IGridInfoRequestor } from "./IGridInfoRequestor";
import { DomRenderer, DomWrapper, NormalizedEvent } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { CellContentHorizontalAlignment } from "./CellContentHorizontalAlignment";
import { CellContentVerticalAlignment } from "./CellContentVerticalAlignment";
import { Color } from "igniteui-react-core";
import { CellModel } from "./CellModel";
/**
 * @hidden
 */
export declare class GridCellBase extends Base implements INativeCell {
    static $t: Type;
    private a;
    protected readonly b: ICellActionManager;
    private c;
    protected readonly d: IGridInfoRequestor;
    private v;
    readonly w: DomRenderer;
    private x;
    readonly z: DomWrapper;
    private y;
    private g;
    private ak;
    private ah;
    private aj;
    private ai;
    protected readonly aw: number;
    protected readonly au: number;
    protected readonly av: number;
    private an;
    ax: number;
    private k;
    o: boolean;
    private l;
    p: boolean;
    constructor(a: DomRenderer);
    private a6;
    bm(): void;
    private i;
    n: boolean;
    protected get_r(): boolean;
    readonly r: boolean;
    private ap;
    private ar;
    private aq;
    private ao;
    bu(a: number, b: number, c: number, d: number): void;
    private ac;
    private ae;
    private ad;
    private ab;
    private b6;
    bp(a: Brush, b: number, c: number, d: number, e: number): void;
    protected get_q(): boolean;
    readonly q: boolean;
    private al;
    private at;
    private am;
    bq(a: number, b: number): void;
    bw(a: number, b: number): void;
    protected bx(a: number, b: number, c: number, d: number): void;
    a4(): void;
    bo(a: Color): void;
    private h;
    private e;
    private f;
    bt(a: number): void;
    private u;
    private t;
    private static ay;
    b5(a: number): void;
    b3(a: number, b: number, c: number, d: number): void;
    be(a: DomWrapper, b: DomWrapper, c: CellContentHorizontalAlignment): void;
    b4(a: CellModel): void;
    private m;
    b1(a: CellContentHorizontalAlignment, b: CellContentVerticalAlignment): void;
    b2(a: Brush): void;
    bn(a: ICellActionManager): void;
    bs(a: IGridInfoRequestor): void;
    private az;
    private a0;
    private aa;
    private static as;
    private static ag;
    protected br(a: DomWrapper, b: CellContentHorizontalAlignment): void;
    protected bv(a: DomWrapper, b: CellContentVerticalAlignment): void;
    protected s(a: ICellActionManager): boolean;
    private a7;
    private bb;
    private ba;
    private a9;
    private a8;
    private bh;
    private bk;
    private bl;
    private bj;
    private bi;
    private by;
    private bz;
    private b0;
    onContactStarted(e_: NormalizedEvent, a: boolean): void;
    onContactMoved(a: NormalizedEvent, b: boolean): void;
    private af;
    onContactCompleted(e_: NormalizedEvent, a: boolean): void;
    bd(a: NormalizedEvent, b: boolean): void;
    bc(a: NormalizedEvent, b: boolean): void;
    onDoubleClick(a: NormalizedEvent): void;
    private j;
    protected bg(a: string, b: any, c: any): void;
    bf(): void;
    a5(): void;
}
