import { IgrResponsiveStateEnteringEventArgs } from "./igr-responsive-state-entering-event-args";
import { IgrResponsiveStateEnteredEventArgs } from "./igr-responsive-state-entered-event-args";
import { IgrResponsiveStateExitedEventArgs } from "./igr-responsive-state-exited-event-args";
import { IgrResponsivePhase } from "./igr-responsive-phase";
import { ResponsiveState as ResponsiveState_internal } from "./ResponsiveState";
/**
 * Describes a state that the grid can enter based on a set of responsive conditions.
*/
export declare class IgrResponsiveState {
    protected createImplementation(): ResponsiveState_internal;
    protected _implementation: any;
    /**
     * @hidden
     */
    readonly i: ResponsiveState_internal;
    private onImplementationCreated;
    constructor();
    protected _provideImplementation(i: any): void;
    /**
     * The name of the responsive state
    */
    name: string;
    /**
     * Gets or sets the minimum width for which this state is active.
    */
    minimumWidth: number;
    /**
     * Gets or sets the maximum width for which this state is active.
    */
    maximumWidth: number;
    /**
     * Configures this responsive state to only be manually actived
    */
    isManualState: boolean;
    findByName(name: string): any;
    /**
     * Adds a responsive phase to the state.
    
    * @param phase  * The phase to add.
    */
    addResponsivePhase(phase: IgrResponsivePhase): IgrResponsiveState;
    /**
     * Adds a responsive phase to the state and returns it.
    
    */
    responsivePhase(): IgrResponsivePhase;
    private _stateEntering;
    private _stateEntering_wrapped;
    /**
     * Called when a state is being entered.
    */
    stateEntering: (s: IgrResponsiveState, e: IgrResponsiveStateEnteringEventArgs) => void;
    private _stateEntered;
    private _stateEntered_wrapped;
    /**
     * Called when a state is entered.
    */
    stateEntered: (s: IgrResponsiveState, e: IgrResponsiveStateEnteredEventArgs) => void;
    private _stateExited;
    private _stateExited_wrapped;
    /**
     * Called when a state is exited.
    */
    stateExited: (s: IgrResponsiveState, e: IgrResponsiveStateExitedEventArgs) => void;
}
