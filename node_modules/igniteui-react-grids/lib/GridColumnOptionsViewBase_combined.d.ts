import { Base, Type, IEnumerable$1, INotifyPropertyChanged, PropertyChangedEventArgs } from "igniteui-react-core";
import { DomWrapper, DomRenderer } from "igniteui-react-core";
import { SizeData } from "igniteui-react-core";
import { ControlDisplayDensity } from "igniteui-react-core";
import { BaseControlTheme } from "igniteui-react-core";
import { Size } from "igniteui-react-core";
import { Button } from "igniteui-react-inputs";
import { Icon } from "igniteui-react-inputs";
import { ButtonDisplayStyle } from "igniteui-react-inputs";
import { ButtonGroup } from "igniteui-react-inputs";
import { ColumnSortDirection } from "./ColumnSortDirection";
import { ListSortDirection } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { Column } from "./Column";
import { Grid } from "./Grid";
import { NotifyCollectionChangedEventArgs } from "igniteui-react-core";
/**
 * @hidden
 */
export declare abstract class GridColumnOptionsViewBase extends Base {
    static $t: Type;
    private d;
    private f;
    private a;
    protected readonly g: DomWrapper;
    protected readonly b: GridColumnOptionsBase;
    protected readonly e: DomRenderer;
    c(): SizeData;
    protected k(): void;
    m(): void;
    l(a: DomRenderer): void;
    protected h(a: DomWrapper): void;
    i(a: GridColumnOptionsBase): void;
    j(): void;
}
/**
 * @hidden
 */
export declare class GridColumnOptionsUtilities extends Base {
    static $t: Type;
    static d(a: DomRenderer, b: string, c: string, d: string, e: DomWrapper, f: DomWrapper, g?: boolean): {
        ret: DomWrapper;
        p4: DomWrapper;
        p5: DomWrapper;
    };
    static e(a: DomRenderer, b: string, c: string, d: string, e: string, f: DomWrapper): {
        ret: DomWrapper;
        p5: DomWrapper;
    };
    static f(a: DomRenderer, b: string, c: ControlDisplayDensity, d: BaseControlTheme, e: Size, f: Button, g: Icon, h: DomWrapper, i?: boolean, j?: boolean): {
        ret: DomWrapper;
        p5: Button;
        p6: Icon;
        p7: DomWrapper;
    };
    static g(a: DomRenderer, b: string, c: ButtonDisplayStyle, d: ControlDisplayDensity, e: BaseControlTheme, f: Size, g: Button, h: Icon, i: DomWrapper, j: DomWrapper, k?: boolean, l?: boolean, m?: boolean): {
        ret: DomWrapper;
        p6: Button;
        p7: Icon;
        p8: DomWrapper;
        p9: DomWrapper;
    };
    static h(a: DomRenderer, b: IEnumerable$1<Button>, c: IEnumerable$1<DomWrapper>, d: ControlDisplayDensity, e: BaseControlTheme, f: ButtonGroup): {
        ret: DomWrapper;
        p5: ButtonGroup;
    };
    static b(a: DomWrapper): boolean;
    static i(a: DomWrapper, b: boolean): void;
    static a(a: ListSortDirection): ColumnSortDirection;
    static c(a: ColumnSortDirection): ListSortDirection;
    static j(a: DomWrapper, b: boolean, c?: string): void;
    static l(a: Button, b: GridColumnOptionsBase): void;
    static k(a: ButtonGroup, b: GridColumnOptionsBase): void;
}
/**
 * @hidden
 */
export declare abstract class GridColumnOptionsBase extends Base implements INotifyPropertyChanged {
    static $t: Type;
    private d;
    constructor();
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    protected a8(a: string, b: any, c: any): void;
    private ac;
    private readonly ad;
    private ae;
    private readonly af;
    e: GridColumnOptionsViewBase;
    private ah;
    ai: boolean;
    private static bl;
    private bi;
    bk: Brush;
    private h;
    j: BaseControlTheme;
    private g;
    i: BaseControlTheme;
    private n;
    buttonDensity: ControlDisplayDensity;
    private l;
    p: ControlDisplayDensity;
    private x;
    ab: FontInfo;
    private v;
    z: FontInfo;
    private a;
    column: Column;
    private o;
    density: ControlDisplayDensity;
    private m;
    q: ControlDisplayDensity;
    private y;
    ag: FontInfo;
    private w;
    aa: FontInfo;
    readonly c: Grid;
    private static bm;
    private bj;
    bn: Brush;
    protected abstract f(): GridColumnOptionsViewBase;
    protected a3(): void;
    protected a4(a: any, b: PropertyChangedEventArgs): void;
    protected a5(a: any, b: NotifyCollectionChangedEventArgs): void;
    protected a6(a: any, b: NotifyCollectionChangedEventArgs): void;
    protected a7(a: any, b: PropertyChangedEventArgs): void;
    protected onViewInitialized(): void;
    protected ba(a: string, b: any, c: any): void;
    be(): void;
    private bg;
    bf(a: Grid, b: Grid): void;
    bh(): void;
    private a1;
    private a2;
    bd(a: Button): void;
    bc(a: ButtonGroup): void;
    destroy(): void;
    provideRenderer(a: DomRenderer): void;
}
