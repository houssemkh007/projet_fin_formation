import { Base, Type } from "igniteui-react-core";
import { INativeCell } from "./INativeCell";
import { DomRenderer, NormalizedEvent } from "igniteui-react-core";
import { RenderingContext } from "igniteui-react-core";
import { CellContentHorizontalAlignment } from "./CellContentHorizontalAlignment";
import { TextBlock } from "igniteui-react-core";
import { Color } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
import { CellContentVerticalAlignment } from "./CellContentVerticalAlignment";
import { Brush } from "igniteui-react-core";
import { CellModel } from "./CellModel";
import { ICellActionManager } from "./ICellActionManager";
/**
 * @hidden
 */
export declare class CanvasGridCellBase extends Base implements INativeCell {
    static $t: Type;
    private a;
    private r;
    private o;
    protected y: boolean;
    ci(a: () => void): void;
    private k;
    protected b3(): void;
    readonly isCanvasBased: boolean;
    private bk;
    readonly bl: DomRenderer;
    private bx;
    ck(a: string): void;
    constructor(a: DomRenderer);
    readonly templateContext: any;
    private l;
    u: boolean;
    protected get_aa(): boolean;
    readonly aa: boolean;
    ca(a: Brush, b: number, c: number, d: number, e: number): void;
    private ao;
    cb(a: number): void;
    private as;
    readonly ba: number;
    private au;
    readonly bc: number;
    private at;
    readonly bb: number;
    private ar;
    readonly a9: number;
    private cu;
    private ag;
    readonly a5: number;
    private ai;
    readonly a7: number;
    private ah;
    readonly a6: number;
    private af;
    readonly a4: number;
    private c2;
    private cy;
    private c1;
    private cz;
    private cx;
    private c0;
    private ay;
    protected readonly be: number;
    private a0;
    protected readonly bg: number;
    private a1;
    private a2;
    protected readonly bh: number;
    private bm;
    private j;
    private ak;
    private aj;
    private am;
    private al;
    protected get_ab(): boolean;
    protected readonly ab: boolean;
    bz(a: RenderingContext, b: number, c: number, d: number, e: number, f: number): void;
    readonly resized: boolean;
    private t;
    ensureCorrectSize(): boolean;
    protected b0(a: RenderingContext, b: number, c: number, d: number, e: number, f: number, g: boolean, h: boolean, i: boolean): void;
    b4(): void;
    ch(a: number): void;
    renderStandardContent(): void;
    renderStandardBackground(): void;
    protected b5(a: RenderingContext): void;
    protected b1(): void;
    private v;
    private bd;
    cg(a: number, b: number, c: number, d: number): void;
    private az;
    bf: number;
    private ct;
    private cw;
    cl(a: Color): void;
    protected get_z(): boolean;
    readonly z: boolean;
    private s;
    ac: boolean;
    private aq;
    readonly a8: number;
    private a3;
    readonly bj: number;
    cd(a: number): void;
    cn(a: number): void;
    by(): void;
    private cv;
    private m;
    b9(a: Color): void;
    private g;
    private c;
    private e;
    private bw;
    cf(a: number): void;
    private q;
    cj(a: boolean): void;
    private ax;
    private aw;
    private static bt;
    cr(a: number): void;
    b2(a: number, b: number, c: number, d: number): void;
    private i;
    private p;
    private bp;
    cc(a: FontInfo): void;
    cq(a: CellModel): void;
    co(a: CellContentHorizontalAlignment, b: CellContentVerticalAlignment): void;
    cp(a: Brush): void;
    b8(a: ICellActionManager): void;
    private bu;
    private bv;
    private n;
    private bn;
    private static bq;
    private b;
    protected readonly d: CellContentHorizontalAlignment;
    ce(a: CellContentHorizontalAlignment): void;
    private ap;
    private h;
    private br;
    private cs;
    private an;
    protected bi(a: TextBlock, b: string, c: number, d: RenderingContext): number;
    private f;
    cm(a: CellContentVerticalAlignment): void;
    protected ae(a: ICellActionManager): boolean;
    private static bo;
    private av;
    onContactStarted(a: NormalizedEvent, b: boolean): void;
    onContactMoved(a: NormalizedEvent, b: boolean): void;
    onContactCompleted(a: NormalizedEvent, b: boolean): void;
    onDoubleClick(a: NormalizedEvent): void;
}
