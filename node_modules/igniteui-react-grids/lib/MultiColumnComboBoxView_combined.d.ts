import { Base, Type, INotifyPropertyChanged, PropertyChangedEventArgs } from "igniteui-react-core";
import { Grid } from "./Grid";
import { DomWrapper, DomRenderer } from "igniteui-react-core";
import { Column } from "./Column";
import { IDataSource } from "igniteui-react-core";
import { GotFocusEventArgs } from "./GotFocusEventArgs";
import { LostFocusEventArgs } from "./LostFocusEventArgs";
import { FontInfo } from "igniteui-react-core";
import { SortMode } from "./SortMode";
import { IDataSourceUpdateNotifier } from "igniteui-react-core";
import { CornerRadius } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { BaseControlTheme } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { ControlDisplayDensity } from "igniteui-react-core";
import { MultiColumnComboBoxTextChangedEventArgs } from "./MultiColumnComboBoxTextChangedEventArgs";
import { MultiColumnComboBoxValueChangedEventArgs } from "./MultiColumnComboBoxValueChangedEventArgs";
import { MultiColumnComboVisualModelExport } from "./MultiColumnComboVisualModelExport";
/**
 * @hidden
 */
export declare class MultiColumnComboBoxView extends Base {
    static $t: Type;
    private ac;
    private ak;
    private f;
    private ai;
    private k;
    private ah;
    private j;
    private aj;
    private l;
    private h;
    private ae;
    private i;
    private af;
    private m;
    private ag;
    private d;
    private aq;
    private static readonly ar;
    private static readonly at;
    private static readonly as;
    private ab;
    private au;
    private aa;
    private ap;
    private x;
    private a;
    private c;
    private w;
    private s;
    private r;
    private p;
    private an;
    private am;
    readonly e: Grid;
    private readonly y;
    private readonly n;
    protected bf(a: DomWrapper): void;
    bg(a: MultiColumnComboBox): void;
    bp(): void;
    protected b1(): void;
    private aw;
    ay(): void;
    az(): void;
    private u;
    private a0;
    private a1;
    bt(a: number, b: number): void;
    bw(a: number, b: any, c: any): void;
    bs(): void;
    bu(a: number, b: any): void;
    bv(a: number, b: any): void;
    bz(a: number, b: number): void;
    b4(a: number, b: any, c: any): void;
    br(): void;
    b0(a: number, b: any): void;
    b2(a: number, b: any): void;
    private o;
    a3(): void;
    private cy;
    b(): IDataSource;
    private q;
    private a8;
    private bc;
    private bo;
    private bq;
    private bx;
    private by;
    b3(a: DomRenderer): void;
    private b5;
    private b6;
    private b7;
    private b8;
    private b9;
    ch(): void;
    a5(a: boolean): void;
    v: boolean;
    private ca;
    private cb;
    private cc;
    ce(a: number): void;
    private ao;
    private cg;
    cj(a: string): void;
    ci(a: any): void;
    ck(): void;
    co(): void;
    private cl;
    private cn;
    private cp;
    private cq;
    private cr;
    cm(): void;
    private cs;
    ct(): void;
    private av;
    cu(): void;
    cf(a: boolean): void;
    private z;
    private cv;
    a6(): void;
    cd(): void;
    protected readonly al: DomWrapper;
    protected readonly g: MultiColumnComboBox;
    readonly ad: DomRenderer;
    cw(): void;
    private a2;
    private ax;
    private a4;
    private a7;
    private a9;
    private ba;
    private bb;
    private bd;
    private t;
    private be;
    private bh;
    private bi;
    private bj;
    private bk;
    private bl;
    private bm;
    private bn;
    private cx;
}
/**
 * @hidden
 */
export declare class MultiColumnComboBoxDataSourceNotificationHandler extends Base implements IDataSourceUpdateNotifier {
    static $t: Type;
    private a;
    private b;
    constructor(a: MultiColumnComboBoxView, b: boolean);
    rangeActualized(a: number, b: number): void;
    notifySetItem(a: number, b: any, c: any): void;
    notifyClearItems(): void;
    notifyInsertItem(a: number, b: any): void;
    notifyRemoveItem(a: number, b: any): void;
}
/**
 * @hidden
 */
export declare class MultiColumnComboBox extends Base implements INotifyPropertyChanged {
    static $t: Type;
    static y: BaseControlTheme;
    private g9;
    private ha;
    private b6;
    private hu;
    private f6;
    private hb;
    private b7;
    private hc;
    private b8;
    private b9;
    private hd;
    private ca;
    private cb;
    private he;
    private cc;
    private hf;
    private cd;
    private ce;
    private cf;
    private static g6;
    private static g8;
    private static g7;
    constructor();
    protected s(): MultiColumnComboBoxView;
    protected fv(a: string, b: any, c: any): void;
    private f1;
    private as;
    private readonly at;
    t: MultiColumnComboBoxView;
    private az;
    a9: boolean;
    private c;
    g: string[];
    private gi;
    g4: Brush;
    private f7;
    gt: Brush;
    private x;
    aa: BaseControlTheme;
    private w;
    z: BaseControlTheme;
    private gj;
    g5: Brush;
    private f8;
    gu: Brush;
    private bk;
    b4: number;
    private ba;
    bu: number;
    private a3;
    columnHeadersVisible: boolean;
    private hr;
    ht: Thickness;
    private hq;
    hs: Thickness;
    private f3;
    f5: CornerRadius;
    private f2;
    f4: CornerRadius;
    private b;
    f: string[];
    private ad;
    density: ControlDisplayDensity;
    private ac;
    ae: ControlDisplayDensity;
    private a5;
    dropDownButtonVisible: boolean;
    private gk;
    hh: Brush;
    private f9;
    gv: Brush;
    private bl;
    cg: number;
    private bb;
    bv: number;
    private gl;
    hi: Brush;
    private ga;
    gw: Brush;
    private bm;
    ch: number;
    private bc;
    bw: number;
    private bn;
    ci: number;
    private bd;
    bx: number;
    private gm;
    hj: Brush;
    private gb;
    gx: Brush;
    private bo;
    cj: number;
    private be;
    by: number;
    private bp;
    ck: number;
    private bf;
    bz: number;
    private cp;
    itemsSource: any;
    readonly actualDataSource: IDataSource;
    private eq;
    eo: string;
    private gn;
    hk: Brush;
    private gc;
    gy: Brush;
    private static aq;
    private ak;
    au: FontInfo;
    private ah;
    an: FontInfo;
    private a0;
    actualLabelVisible: boolean;
    private et;
    eu: string;
    private dh;
    actualNoMatchesFoundLabel: string;
    private go;
    hl: Brush;
    static readonly dj: string;
    private gd;
    gz: Brush;
    private gp;
    hm: Brush;
    private ge;
    g0: Brush;
    private static ar;
    private al;
    av: FontInfo;
    private ai;
    ao: FontInfo;
    private e0;
    ez: string;
    private ay;
    rowSeparatorsVisible: boolean;
    private static hg;
    private gq;
    hn: Brush;
    private gf;
    g1: Brush;
    private am;
    aw: FontInfo;
    private aj;
    ap: FontInfo;
    private gr;
    ho: Brush;
    private gg;
    g2: Brush;
    private bq;
    cl: number;
    private bg;
    b0: number;
    private gs;
    hp: Brush;
    private gh;
    g3: Brush;
    private br;
    cm: number;
    private bh;
    b1: number;
    private bs;
    cn: number;
    private bi;
    b2: number;
    private bt;
    co: number;
    private bj;
    b3: number;
    private ax;
    a2: boolean;
    private u;
    v: SortMode;
    private cx;
    e7: string;
    private cw;
    e5: string;
    private d;
    j: string[];
    private a;
    e: string[];
    private cq;
    cv: any;
    private cs;
    n(): Column;
    ej(): string;
    private ct;
    private eh;
    private m;
    private ei;
    private h;
    i(): string[];
    fr(a: any): void;
    private a7;
    private fu;
    fy(a: string): void;
    f0(): void;
    private fz;
    closeUp(): void;
    destroy(): void;
    dropDown(): void;
    focus(): void;
    select(): void;
    notifySizeChanged(): void;
    provideRenderer(a: DomRenderer): void;
    cr(): any;
    ea(): string;
    l(): MultiColumnComboVisualModelExport;
    gotFocus: (sender: any, args: GotFocusEventArgs) => void;
    lostFocus: (sender: any, args: LostFocusEventArgs) => void;
    textChanged: (sender: any, args: MultiColumnComboBoxTextChangedEventArgs) => void;
    valueChanged: (sender: any, args: MultiColumnComboBoxValueChangedEventArgs) => void;
    fo(a: GotFocusEventArgs): void;
    fp(a: LostFocusEventArgs): void;
    fs(a: MultiColumnComboBoxTextChangedEventArgs): void;
    private ft;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    protected fq(a: string, b: any, c: any): void;
}
