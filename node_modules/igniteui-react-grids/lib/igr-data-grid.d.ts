import * as React from 'react';
import { IgRect } from "igniteui-react-core";
import { IgrSectionHeader } from './igr-section-header';
import { IgrSummaryRowRoot } from './igr-summary-row-root';
import { IgrSummaryRowSection } from './igr-summary-row-section';
import { IgrColumnWidth } from './igr-column-width';
import { HeaderClickAction } from './HeaderClickAction';
import { ColumnShowingAnimationMode } from './ColumnShowingAnimationMode';
import { ColumnPropertyUpdatingAnimationMode } from './ColumnPropertyUpdatingAnimationMode';
import { CellDataLoadedAnimationMode } from './CellDataLoadedAnimationMode';
import { RowSelectionAnimationMode } from './RowSelectionAnimationMode';
import { ColumnMovingAnimationMode } from './ColumnMovingAnimationMode';
import { ColumnHidingAnimationMode } from './ColumnHidingAnimationMode';
import { CellSelectionAnimationMode } from './CellSelectionAnimationMode';
import { ColumnExchangingAnimationMode } from './ColumnExchangingAnimationMode';
import { RowHoverAnimationMode } from './RowHoverAnimationMode';
import { GridSelectionMode } from './GridSelectionMode';
import { GridActivationMode } from './GridActivationMode';
import { GridSelectionBehavior } from './GridSelectionBehavior';
import { IgrGridCellEventArgs } from './igr-grid-cell-event-args';
import { IgrGridColumnsAutoGeneratedEventArgs } from './igr-grid-columns-auto-generated-event-args';
import { IgrGridColumnsChangedEventArgs } from './igr-grid-columns-changed-event-args';
import { IgrGridSelectedItemsChangedEventArgs } from './igr-grid-selected-items-changed-event-args';
import { IgrGridSelectedKeysChangedEventArgs } from './igr-grid-selected-keys-changed-event-args';
import { IgrGridSelectedCellsChangedEventArgs } from './igr-grid-selected-cells-changed-event-args';
import { IgrGridSelectedCellRangesChangedEventArgs } from './igr-grid-selected-cell-ranges-changed-event-args';
import { IgrGridSortDescriptionsChangedEventArgs } from './igr-grid-sort-descriptions-changed-event-args';
import { IgrGridGroupDescriptionsChangedEventArgs } from './igr-grid-group-descriptions-changed-event-args';
import { Grid } from "./Grid";
import { Thickness } from "igniteui-react-core";
import { IgrColumn } from './igr-column';
import { IgrGridColumnCollection } from './igr-grid-column-collection';
import { ScrollbarStyle } from "igniteui-react-core";
import { IgrColumnSortDescriptionCollection } from './igr-column-sort-description-collection';
import { IgrColumnGroupDescriptionCollection } from './igr-column-group-description-collection';
import { IgrColumnSummaryDescriptionCollection } from './igr-column-summary-description-collection';
import { IgrFilterExpressionCollection } from "igniteui-react-core";
import { IgrGridSelectedItemsCollection } from "./igr-grid-selected-items-collection";
import { IgrGridSelectedKeysCollection } from "./igr-grid-selected-keys-collection";
import { IgrGridSelectedCellsCollection } from "./igr-grid-selected-cells-collection";
import { IgrGridSelectedCellRangesCollection } from "./igr-grid-selected-cell-ranges-collection";
import { IgrColumnHiddenChangedEventArgs } from "./igr-column-hidden-changed-event-args";
import { IgrCellKey } from "./igr-cell-key";
import { IDataSource } from "igniteui-react-core";
import { IgrGridFilterExpressionsEventArgs } from './igr-grid-filter-expressions-event-args';
import { IgrResponsiveStatesCollection } from './igr-responsive-states-collection';
import { IgrGridAnimationSettings } from './igr-grid-animation-settings';
import { IgrRowSeparator } from './igr-row-separator';
import { IgrHeaderRowSeparator } from './igr-header-row-separator';
import { IgrGridCellPosition } from "./igr-grid-cell-position";
import { IgrGridActiveCellChangedEventArgs } from "./igr-grid-active-cell-changed-event-args";
import { IgrCellInfo } from "./igr-cell-info";
import { IgrHeaderSeparator } from "./igr-header-separator";
import { IgrColumnResizingSeparator } from "./igr-column-resizing-separator";
import { ColumnResizingMode } from "./ColumnResizingMode";
import { ColumnResizingAnimationMode } from "./ColumnResizingAnimationMode";
import { ColumnMovingMode } from "./ColumnMovingMode";
import { IgrColumnMovingSeparator } from "./igr-column-moving-separator";
import { SortIndicatorStyle } from "./SortIndicatorStyle";
import { DataSourceSectionHeaderDisplayMode } from "igniteui-react-core";
import { DataSourceSummaryScope } from "igniteui-react-core";
import { GroupSummaryDisplayMode } from "./GroupSummaryDisplayMode";
import { ISummaryResult } from "igniteui-react-core";
import { IgrPinnedAreaSeparator } from "./igr-pinned-area-separator";
import { PinnedPositions } from "./PinnedPositions";
import { ColumnOptionsIconAlignment } from "./ColumnOptionsIconAlignment";
import { ColumnOptionsIconBehavior } from "./ColumnOptionsIconBehavior";
import { IgrColumnPinnedChangedEventArgs } from "./igr-column-pinned-changed-event-args";
import { ControlDisplayDensity } from "igniteui-react-core";
import { EditModeType } from "./EditModeType";
import { EditModeClickAction } from "./EditModeClickAction";
import { IgrGridCellValueChangingEventArgs } from "./igr-grid-cell-value-changing-event-args";
import { IgrGridDataCommittingEventArgs } from "./igr-grid-data-committing-event-args";
import { IgrGridDataCommittedEventArgs } from "./igr-grid-data-committed-event-args";
import { IgrGridSizeChangedEventArgs } from "./igr-grid-size-changed-event-args";
import { IgrGridColumnWidthChangedEventArgs } from "./igr-grid-column-width-changed-event-args";
import { IgrGridCellEditStartedEventArgs } from "./igr-grid-cell-edit-started-event-args";
import { IgrGridCellEditEndedEventArgs } from "./igr-grid-cell-edit-ended-event-args";
import { IgrGridRowEditStartedEventArgs } from "./igr-grid-row-edit-started-event-args";
import { IgrGridRowEditEndedEventArgs } from "./igr-grid-row-edit-ended-event-args";
export declare class IgrDataGrid extends React.Component<IIgrDataGridProps> {
    private _portalManager;
    contentColumns: IgrColumn[];
    /**
     * The columns actually present in the grid. Do not directly modify this array.
     * This array's contents can be modified by causing React to reproject the child content.
     * Or adding and removing columns from the manual columns collection on the columns property.
     */
    combinedColumns: IgrColumn[];
    private _container;
    private _columns;
    private _insertExternalColumnAtIndex;
    private _removeExternalColumn;
    private _contentChildrenManager;
    private _updateContentChildren;
    readonly actualDataSource: IDataSource;
    private _getMainRef;
    private _getFilterDialog;
    private _disableManualColumnSync;
    private _ensureColumnsAreManual;
    /**
     * A collection or manually added columns for the grid.
    */
    readonly columns: IgrGridColumnCollection;
    private _height;
    private _width;
    height: string;
    width: string;
    private _useCanvas;
    useCanvas: boolean;
    private _useAccessibility;
    useAccessibility: boolean;
    private _scrollerStyle;
    scrollbarStyle: ScrollbarStyle;
    private _filterDialogRef;
    private _elRef;
    render(): React.DetailedReactHTMLElement<{
        className: string;
        ref: (ref: any) => void;
        style: {
            boxSizing: "border-box";
            overflow: string;
        };
        children: any[];
    }, any>;
    componentDidMount(): void;
    private _columnsAdapter;
    protected createImplementation(): Grid;
    ngOnInit(): void;
    protected _implementation: any;
    readonly i: Grid;
    private onImplementationCreated;
    private _renderer;
    constructor(props: IIgrDataGridProps);
    private requestRender;
    private _focusScroller;
    private _setDefaultCursor;
    private _setResizeCursor;
    private _setHandCursor;
    private _setBorder;
    private _setScrollerVerticalTrackInset;
    initializeContent(): void;
    componentWillUnmount(): void;
    protected initializeProperties(): void;
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    private _scroller;
    private _dragger;
    private _wrapper;
    private _grid;
    private containerResized;
    private _contentLayout;
    private _contentDiv;
    private _useNativeScroll;
    private _content;
    private refreshContentSize;
    onScroll(): void;
    onScrollStart(): void;
    onScrollStop(): void;
    scrollTo(x: number, y: number): void;
    private _dataSource;
    dataSource: any;
    forColumnsWithPropertyPath(propertyPath: string, callback: (column: IgrColumn) => void): void;
    /**
     * Gets or sets the default column width to use if a column as no local width.
     * */
    defaultColumnWidth: IgrColumnWidth;
    private _insetLeft;
    /**
     * Gets or sets the amount of left inset space to use around the grid content.
    */
    insetLeft: number;
    private _insetTop;
    /**
     * Gets or sets the amount of top inset space to use around the grid content.
    */
    insetTop: number;
    private _insetRight;
    /**
     * Gets or sets the amount of right inset space to use around the grid content.
    */
    insetRight: number;
    private _insetBottom;
    /**
     * Gets or sets the amount of bottom inset space to use around the grid content.
    */
    insetBottom: number;
    /**
 * Gets or sets the type of column resizing to use.
*/
    columnResizingMode: ColumnResizingMode;
    /**
     * Gets or sets the type column moving to use.
    */
    columnMovingMode: ColumnMovingMode;
    /**
     * Gets or sets whether the row will highlight when hovered.
    */
    isRowHoverEnabled: boolean;
    /**
     * Gets or sets the background color for rows when hovered.
    */
    rowHoverBackground: string;
    /**
     * Gets or sets the border color for rows being edited.
    */
    editRowBorder: string;
    editRowBorderWidthBottom: number;
    editRowBorderWidthLeft: number;
    editRowBorderWidthRight: number;
    editRowBorderWidthTop: number;
    ensureEditRowBorderWidth(): void;
    /**
     * Gets or sets the header type used for sectioning off groups of rows.
    */
    sectionHeader: IgrSectionHeader;
    /**
     * Gets or sets the cell definition used for summary rows at the root level.
    */
    summaryRowRoot: IgrSummaryRowRoot;
    /**
     * Gets or sets the cell definition used for summary rows at the section level.
    */
    summaryRowSection: IgrSummaryRowSection;
    /**
     * Gets or sets the row seperator settings.
    */
    rowSeparator: IgrRowSeparator;
    /**
     * Gets or sets the header row seperator settings.
    */
    headerRowSeparator: IgrHeaderRowSeparator;
    /**
     * Gets or sets the header seperator settings.
    */
    headerSeparator: IgrHeaderSeparator;
    /**
     * Gets or sets the column resizing seperator settings.
    */
    columnResizingSeparator: IgrColumnResizingSeparator;
    /**
     * Gets or sets the column resizing seperator settings.
    */
    columnMovingSeparator: IgrColumnMovingSeparator;
    /**
     * Gets or sets the pinned area separator settings.
    */
    pinnedAreaSeparator: IgrPinnedAreaSeparator;
    /**
     * Gets or sets the desired properties the grid will automatically generate columns for.
    */
    autoGenerateDesiredProperties: string[];
    /**
     * Gets or sets the desired properties for the data source to load. If specified the data source may decide to constrain the properties it fetches to these properties and must make sure that at least those properties are loaded, rather than the default behavior for that data source.
    */
    dataSourceDesiredProperties: string[];
    /**
     * Gets or sets the display density to use for the grid.
    */
    density: ControlDisplayDensity;
    /**
     * Gets the actual height for the rows in the grid.
    */
    actualRowHeight: number;
    /**
     * Gets or sets the height to use for the rows in the grid. If not set the grid will
     * use the default value for the set display density.
    */
    rowHeight: number;
    /**
     * Gets or sets the default minimum width to use on all columns. Ignored if NaN.
    */
    defaultColumnMinWidth: number;
    /**
     * Gets the height used for the header row.
    */
    actualHeaderHeight: number;
    /**
     * Gets or sets the height to use for the header row.
    */
    headerHeight: number;
    /**
     * Returns/sets the action to take when a column header is clicked.
    */
    headerClickAction: HeaderClickAction;
    /**
     * Gets or sets the type of edit mode
    */
    editMode: EditModeType;
    /**
     * Gets or sets the type of click action required to enter edit mode.
    */
    editModeClickAction: EditModeClickAction;
    /**
     * Configures whether or not the grid will autogenerate columns when the data source is set.
    */
    autoGenerateColumns: boolean;
    /**
     * Sets or gets the height to use for the row separators.
    */
    rowSeparatorHeight: number;
    /**
     * Configures whether or not place holders are used for cells who do not have their data yet.
    */
    isPlaceholderRenderingEnabled: boolean;
    /**
     * Sets or gets the Column Adding Animation mode to use.
    */
    columnAddingAnimationMode: ColumnShowingAnimationMode;
    /**
     * Sets or gets the Column Property Updating Animation mode to use.
    */
    columnPropertyUpdatingAnimationMode: ColumnPropertyUpdatingAnimationMode;
    /**
     * Sets or gets the cell data loaded animation mode to use.
    */
    cellDataLoadedAnimationMode: CellDataLoadedAnimationMode;
    /**
     * Sets or gets the row selection animation mode to use.
    */
    rowSelectionAnimationMode: RowSelectionAnimationMode;
    /**
     * Sets or gets the row hover animation mode to use.
    */
    rowHoverAnimationMode: RowHoverAnimationMode;
    /**
     * Sets or gets the cell selection animation mode to use.
    */
    cellSelectionAnimationMode: CellSelectionAnimationMode;
    /**
     * Sets or gets the default animation settings for the grid.
    */
    animationSettings: IgrGridAnimationSettings;
    /**
     * Sets or gets the column resizing animation mode to use. Only applies when resizing in Deferred mode.
    */
    columnResizingAnimationMode: ColumnResizingAnimationMode;
    /**
     * Sets or gets the column showing animation mode to use.
    */
    columnShowingAnimationMode: ColumnShowingAnimationMode;
    /**
     * Sets or gets the column moving animation mode to use.
    */
    columnMovingAnimationMode: ColumnMovingAnimationMode;
    /**
     * Sets or gets the column hiding animation mode to use.
    */
    columnHidingAnimationMode: ColumnHidingAnimationMode;
    /**
     * Sets or gets the column exchanging animation mode to use.
    */
    columnExchangingAnimationMode: ColumnExchangingAnimationMode;
    /**
     * Sets or gets the grid selection mode.
    */
    selectionMode: GridSelectionMode;
    /**
     * Sets or gets the grid selection mode.
    */
    activationMode: GridActivationMode;
    /**
     * Sets or gets how selection behaves in the grid.
    */
    selectionBehavior: GridSelectionBehavior;
    private _selectedItems;
    /**
     * Gets which items are currently selected in the grid. Collection can be updated to programatically select items.
    */
    selectedItems: IgrGridSelectedItemsCollection;
    private _selectedKeys;
    /**
     * Gets which primary key values are currently selected in the grid. Collection can be updated to programatically select items.
    */
    selectedKeys: IgrGridSelectedKeysCollection;
    private _selectedCells;
    /**
     * Gets which cells are currently selected in the grid. Collection can be updated to programatically select cells.
    */
    selectedCells: IgrGridSelectedCellsCollection;
    private _selectedCellRanges;
    /**
     * Gets which cell ranges are currently selected in the grid. Collection can be updated to programatically select cells.
    */
    selectedCellRanges: IgrGridSelectedCellRangesCollection;
    private _pinnedItems;
    /**
     * Gets which items are currently pinned in the grid. Collection can be updated to programatically pin items.
    */
    pinnedItems: IgrGridSelectedItemsCollection;
    private _pinnedKeys;
    /**
     * Gets which primary keys are currently pinned in the grid. Collection can be updated to programatically pin items.
    */
    pinnedKeys: IgrGridSelectedKeysCollection;
    /**
     * Gets or sets whether to show the column options UI in the headers for columns.
    */
    isColumnOptionsEnabled: boolean;
    /**
     * Gets or sets if group rows will stick to the top of the grid.
    */
    isGroupRowSticky: boolean;
    /**
     * Gets or sets if header separators are rendered.
    */
    isHeaderSeparatorVisible: boolean;
    /**
     * Gets or sets the default background color to use for content cells when a row is in a selected state
    */
    cellSelectedBackground: string;
    /**
     * Gets or sets the default background color to use for section header cells when a row is in a selected state
    */
    sectionHeaderSelectedBackground: string;
    /**
     * Gets or sets the default background color to use for summary cells at the root level.
    */
    summaryRootBackground: string;
    /**
     * Gets or sets the default background color to use for summary cells at the section level.
    */
    summarySectionBackground: string;
    /**
     * Gets or sets the default opacity to use for pinned rows
    */
    pinnedRowOpacity: number;
    /**
     * Gets or sets the font to use for cells that have been edited.
    */
    editTextStyle: string;
    /**
     * Gets or sets the default opacity for unsaved cell edits.
    */
    editOpacity: number;
    /**
     * Gets or sets the text color for unsaved deleted rows.
    */
    deletedTextColor: string;
    /**
     * Gets or sets the default color to use for sticky rows
    */
    stickyRowBackground: string;
    /**
     * Gets or sets the default color to use for pinned rows
    */
    pinnedRowBackground: string;
    /**
     * Gets or sets the default color to use for the last sticky row
    */
    lastStickyRowBackground: string;
    /**
     * Gets or sets the position of the active cell.
    */
    activeCell: IgrGridCellPosition;
    /**
     * Gets or sets the default background color to use for content cells
    */
    cellBackground: string;
    /**
     * Gets or sets the default text color to use for content cells
    */
    cellTextColor: string;
    /**
     * Gets or sets the default text color to use for content cells
    */
    headerSortIndicatorColor: string;
    /**
     * Gets or sets the default render style for sort indicators in header cells.
    */
    headerSortIndicatorStyle: SortIndicatorStyle;
    /**
     * Gets or sets the font to use for content cells
    */
    cellTextStyle: string;
    /**
     * Gets or sets the default background color to use for section header cells
    */
    sectionHeaderBackground: string;
    /**
     * Gets or sets the default text color to use for section header cells
    */
    sectionHeaderTextColor: string;
    /**
     * Gets or sets the font to use for section header cells
    */
    sectionHeaderTextStyle: string;
    /**
     * Gets or sets the font to use for summary labels at the root level.
    */
    summaryRootLabelTextStyle: string;
    /**
     * Gets or sets the font to use for summary labels at the section level.
    */
    summarySectionLabelTextStyle: string;
    /**
     * Gets or sets the default text color to use for summary cells at the root level.
    */
    summaryRootValueTextColor: string;
    /**
     * Gets or sets the font to use for summary values at the root level.
    */
    summaryRootValueTextStyle: string;
    /**
     * Gets or sets the font to use for summary values at the section level.
    */
    summarySectionValueTextStyle: string;
    /**
     * Gets or sets the default text color to use for summary cells at the section level.
    */
    summarySectionValueTextColor: string;
    /**
     * Gets or sets the default text color to use for summary labels in summary cells at the root level.
    */
    summaryRootLabelTextColor: string;
    /**
     * Gets or sets the default text color to use for summary labels in summary cells at the section level.
    */
    summarySectionLabelTextColor: string;
    /**
     * Gets or sets the default background color to use for summary cells at the root level.
    */
    summaryRootSelectedBackground: string;
    /**
     * Gets or sets the default background color to use for summary cells at the section level.
    */
    summarySectionSelectedBackground: string;
    /**
     * Gets or sets the width of the pinned area separators.
    */
    pinnedAreaSeparatorWidth: number;
    /**
     * Gets or sets the width of the header separators.
    */
    headerSeparatorWidth: number;
    /**
     * Gets or sets the default background color to use for header separators.
    */
    headerSeparatorBackground: string;
    /**
     * Gets or sets the default background color to use for header cells
    */
    headerBackground: string;
    /**
     * Gets or sets the default text color to use for header cells
    */
    headerTextColor: string;
    /**
     * Gets or sets the font to use for header cells
    */
    headerTextStyle: string;
    /**
     * Gets or sets the default background color to use for row separators
    */
    rowSeparatorBackground: string;
    headerRowSeparatorBackground: string;
    /**
     * Gets or sets the default sticky row background color to use for row separators
    */
    rowSeparatorStickyRowBackground: string;
    /**
     * Gets or sets the default last sticky row background color to use for row separators
    */
    rowSeparatorLastStickyRowBackground: string;
    /**
     * Gets or sets the pinned row background color to use for row separators
    */
    rowSeparatorPinnedRowBackground: string;
    /**
     * Sets or gets the width to use for the column resizing separator.
    */
    columnResizingSeparatorWidth: number;
    /**
     * Sets or gets the width to use for the column resizing separator.
    */
    columnMovingSeparatorWidth: number;
    /**
     * Gets or sets the default background color to use for column resizing separator.
    */
    columnResizingSeparatorBackground: string;
    /**
     * Gets or sets the default background color to use for column moving separator.
    */
    columnMovingSeparatorBackground: string;
    /**
     * Gets or sets if the section header content should be shifted into the normal column scrollable area when there are pinned columns
    */
    shiftSectionContent: boolean;
    /**
     * Gets or sets the column options icon alignment in header cells.
    */
    columnOptionsIconAlignment: ColumnOptionsIconAlignment;
    /**
     * Gets or sets the column options icon color in header cells.
    */
    columnOptionsIconColor: string;
    /**
     * Gets or sets how the column options icon will behave inside header cells.
    */
    columnOptionsIconBehavior: ColumnOptionsIconBehavior;
    /**
     * Gets or sets the border color around the grid.
    */
    border: string;
    /**
     * Gets the actual border width.
    */
    actualBorderWidth: Thickness;
    borderWidthBottom: number;
    borderWidthLeft: number;
    borderWidthRight: number;
    borderWidthTop: number;
    ensureBorderWidth(): void;
    /**
     * Gets or sets if the grid should notify on programmatic selection changes as well as changes from the UI.
    */
    notifyOnAllSelectionChanges: boolean;
    cornerRadiusBottomRight: number;
    cornerRadiusBottomLeft: number;
    cornerRadiusTopLeft: number;
    cornerRadiusTopRight: number;
    ensureCornerRadius(): void;
    actualCornerRadiusBottomRight: number;
    actualCornerRadiusBottomLeft: number;
    actualCornerRadiusTopLeft: number;
    actualCornerRadiusTopRight: number;
    ensureActualCornerRadius(): void;
    /**
     * Gets or sets whether the active cell style will be applied to cells when made active.
    */
    isActiveCellStyleEnabled: boolean;
    private _responsiveStates;
    /**
     * A set of states that can be applied to the columns of the grid based on available space.
    */
    responsiveStates: IgrResponsiveStatesCollection;
    /**
     * Gets the region of the grid that is visible.
    */
    readonly actualVisibleRegion: IgRect;
    /**
     * Gets the current sort that is applied to the grid. Collection can be updated to modify the sort for the grid. Once sort descriptions are in this collection, the grid will no longer listen for changes on their properties.
    */
    readonly sortDescriptions: IgrColumnSortDescriptionCollection;
    /**
     * Gets the current grouping that is applied to the grid. Collection can be updated to modify the grouping for the grid. Once grouping descriptions are in this collection, the grid will no longer listen for changes on their properties.
    */
    readonly groupDescriptions: IgrColumnGroupDescriptionCollection;
    /**
     * Gets the current filter that is applied to the grid. Collection can be updated to modify the filter for the grid. Once filter expresisons are in this collection, the grid will no longer listen for changes on their properties.
    */
    readonly filterExpressions: IgrFilterExpressionCollection;
    /**
     * Gets the current summaries that are applied to the grid.
    */
    readonly summaryDescriptions: IgrColumnSummaryDescriptionCollection;
    /**
     * Gets or sets the scope which summaries are calculated for.
    */
    summaryScope: DataSourceSummaryScope;
    /**
     * Gets or sets whether group headers are collapsable.
    */
    isGroupCollapsable: boolean;
    /**
     * Gets or sets how group headers are displayed when there are multiple groups defined in the grid.
    */
    groupHeaderDisplayMode: DataSourceSectionHeaderDisplayMode;
    /**
     * Gets or sets whether groups are expanded or collapsed by default.
    */
    isGroupExpandedDefault: boolean;
    /**
     * Gets or sets the display mode summaries will use inside groups.
    */
    groupSummaryDisplayMode: GroupSummaryDisplayMode;
    /**
     * Gets or sets whether to automatically accept edits or require explicit acceptance or rejections of edits
     * when handling the CellValueChanging or DataCommitting events.
     * When True, nothing is required on the part of the developer in order for edits to be accepted. In
     * order to validate and reject a user cell edit you must explicitly handle the CellValueChanging event
     * and call the RejectEdit method using the edit ID provided by the event. In order to reject a whole
     * commit you need to handle the DataComitting event and explicitly call the RejectCommit method using
     * the commit ID provided by the event.
     * When False, cell edits are not immediately accepted until you explicitly call the AcceptEdit method
     * using the edit ID provided by the CellValueChanging event. If you do not handle this event then edits
     * will be auto accepted.
    */
    autoAcceptEdits: boolean;
    /**
     * Sets or gets the user provided primary key to assume for the data. Certain functionality of the grid requires a way to uniquely identify items in order to work correctly.
     * If a primary key cannot be inferred from the data source, you may need to provide one here.
    */
    primaryKey: string[];
    /**
     * Gets either the inferred primary key from the data source, or the user provided primary key, if present. Represents the actual primary key that the grid will use in operations that require it.
    */
    actualPrimaryKey: string[];
    private _actualColumns;
    actualColumns: IgrGridColumnCollection;
    /**
     * Sets or gets whether the grid will react to sort changes.
    */
    reactsToSortChanges: boolean;
    /**
     * Sets or gets whether the grid will react to group changes.
    */
    reactsToGroupChanges: boolean;
    /**
     * Sets or gets whether the grid will react to filter changes.
    */
    reactsToFilterChanges: boolean;
    /**
     * Gets whether an undo can be performed.
    */
    readonly canUndo: boolean;
    /**
     * Gets whether a redo can be performed.
    */
    readonly canRedo: boolean;
    /**
     * Gets whether a commit can be performed. False if there are any errors present
     * on any pending transactions.
    */
    readonly canCommit: boolean;
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected readonly hasUserValues: Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    getHitCell(x: number, y: number): IgrCellInfo;
    /**
     * Forces a refresh of the grid content.
    
    */
    refresh(): void;
    /**
     * Makes sure pending work has completed if the grid need to be synchronously examined.
    
    */
    flush(): void;
    notifyScrollStart(): void;
    notifyScrollStop(): void;
    exchangeColumn(newColumn: IgrColumn, oldColumn: IgrColumn): void;
    pinColumn(column: IgrColumn, position: PinnedPositions): void;
    moveColumn(oldIndex: number, newIndex: number): void;
    /**
     * Moves a column to the left, if possible.
    
    * @param columnIndex  * The index of the column to move.
    */
    moveColumnLeft(columnIndex: number): void;
    /**
     * Moves a column to the right, if possible.
    
    * @param columnIndex  * The index of the column to move.
    */
    moveColumnRight(columnIndex: number): void;
    /**
     * Returns true if a column can be moved to the left of it's current position; otherwise false.
    
    * @param columnIndex  * The index of the column.
    */
    canMoveColumnLeft(columnIndex: number): boolean;
    /**
     * Returns true if a column can be moved to the right of it's current position; otherwise false.
    
    * @param columnIndex  * The index of the column.
    */
    canMoveColumnRight(columnIndex: number): boolean;
    /**
     * Exports visual information about the current state of the grid.
    
    */
    exportVisualModel(): any;
    /**
     * Returns a serialized copy of the exported visual model
    
    */
    exportSerializedVisualModel(): string;
    /**
     * Scrolls the grid to given row, by index
    
    * @param rowNumber  * The row index to scroll to.
    */
    scrollToRowByIndex(rowNumber: number): void;
    /**
     * Scrolls the grid so that a row is the last visible, by index.
    
    * @param rowNumber  * The row index to scroll to.
    */
    scrollToLastRowByIndex(rowNumber: number): void;
    /**
     * Scrolls to an item, if found.
    
    * @param item  * The item to scroll to.
    */
    scrollToItem(item: any): boolean;
    scrollToPrimaryKey(key: any[]): boolean;
    /**
     * Scrolls the grid to given column, by index
    
    * @param columnNumber  * The column number to scroll to.
    */
    scrollToColumnByIndex(columnNumber: number): void;
    /**
     * Gets the last visible index in the grid.
    
    */
    getLastVisibleIndex(): number;
    /**
     * Gets the first visible index in the grid.
    
    */
    getFirstVisibleIndex(): number;
    /**
     * Invalidates the bound data for the rows currently visible.
    
    */
    invalidateVisibleRows(): void;
    /**
     * Manually set the active responsive state of the grid.
    
    * @param name
    */
    setActiveResponsiveState(name: string): void;
    notifySetItem(index: number, oldItem: any, newItem: any): void;
    /**
     * Manually notifies the grid's data source that the data it has bound to has been cleared and needs to be re-examined.
     * This should not be called if the data that the grid is bound to is already observable.
    
    */
    notifyClearItems(): void;
    notifyInsertItem(index: number, newItem: any): void;
    notifyRemoveItem(index: number, oldItem: any): void;
    /**
     * Returns the data index of an item within the bound data source.
    
    * @param item  * The item from which to get the index.
    */
    dataIndexOfItem(item: any): number;
    dataIndexOfPrimaryKey(key: any[]): number;
    /**
     * Resolves the value of a specific cell.
    
    * @param cellKey  * The cell to resolve.
    */
    resolveCellValue(cellKey: IgrCellKey): any;
    resolveCellValueFromPosition(row: number, column: number): any;
    /**
     * Gets the column that appears at the index specified. This is not the columns actual index in the
     * column's collection but the index for how it appears visually in the grid.
    
    * @param index  * The rendered index of the column.
    */
    getColumnAtRenderedIndex(index: number): IgrColumn;
    /**
     * Gets the summary results for root level.
    
    */
    getRootSummaryResults(): ISummaryResult[];
    /**
     * Gets the summary results for a specific section.
    
    */
    getSectionSummaryResults(sectionIndex: number): ISummaryResult[][];
    /**
     * Commits any edits that may exist in the datasource.
    
    */
    commitEdits(): void;
    /**
     * Cancels any edits that may exist in the datasource.
    
    */
    cancelEdits(): void;
    /**
     * Accepts a specific commit to the datasource.
    
    * @param commitID  * The ID of the commit provided by the Committing event.
    */
    acceptCommit(commitID: number): void;
    /**
     * Rejects a specific commit.
    
    * @param commitID  * The ID of the commit provided by the Committing event.
    */
    rejectCommit(commitID: number): void;
    /**
     * Undo the last edit.
    
    */
    undo(): void;
    /**
     * Redo the last edit.
    
    */
    redo(): void;
    updatePropertyAtKey(key: any[], propertyPath: string, value: any): void;
    removeItemByKey(key: any[]): void;
    /**
     * Removes an item by its instance.
    
    * @param item  * The item instance to remove.
    */
    removeItem(item: any): void;
    /**
     * Accept a pending edit turning it into a real edit.
    
    * @param editID  * The ID of the edit. Provided by the CellValueChanging event.
    */
    acceptEdit(editID: number): void;
    /**
     * Reject a pending edit.
    
    * @param editID  * The ID of the edit. Provided by the CellValueChanging event.
    */
    rejectEdit(editID: number): void;
    setEditError(editID: number, errorMessage: string): void;
    private _filterExpressionsChanging;
    private _filterExpressionsChanging_wrapped;
    filterExpressionsChanging: (s: IgrDataGrid, e: IgrGridFilterExpressionsEventArgs) => void;
    private _filterExpressionsChanged;
    private _filterExpressionsChanged_wrapped;
    filterExpressionsChanged: (s: IgrDataGrid, e: IgrGridFilterExpressionsEventArgs) => void;
    private _cellPreviewPointerDown;
    private _cellPreviewPointerDown_wrapped;
    /**
     * Previews that a pointer is down on a cell.
    */
    cellPreviewPointerDown: (s: IgrDataGrid, e: IgrGridCellEventArgs) => void;
    private _cellPreviewPointerUp;
    private _cellPreviewPointerUp_wrapped;
    /**
     * Previews that a pointer is up on a cell.
    */
    cellPreviewPointerUp: (s: IgrDataGrid, e: IgrGridCellEventArgs) => void;
    private _cellPointerDown;
    private _cellPointerDown_wrapped;
    /**
     * Indicates a pointer is down on a cell.
    */
    cellPointerDown: (s: IgrDataGrid, e: IgrGridCellEventArgs) => void;
    private _cellPointerUp;
    private _cellPointerUp_wrapped;
    /**
     * Indicates a pointer is up on a cell.
    */
    cellPointerUp: (s: IgrDataGrid, e: IgrGridCellEventArgs) => void;
    private _cellClicked;
    private _cellClicked_wrapped;
    /**
     * Called when a cell is clicked.
    */
    cellClicked: (s: IgrDataGrid, e: IgrGridCellEventArgs) => void;
    private _sortDescriptionsChanged;
    private _sortDescriptionsChanged_wrapped;
    /**
     * Called when sorting has changed.
    */
    sortDescriptionsChanged: (s: IgrDataGrid, e: IgrGridSortDescriptionsChangedEventArgs) => void;
    private _groupDescriptionsChanged;
    private _groupDescriptionsChanged_wrapped;
    /**
     * Called when grouping has changed.
    */
    groupDescriptionsChanged: (s: IgrDataGrid, e: IgrGridGroupDescriptionsChangedEventArgs) => void;
    private _columnHiddenChanged;
    private _columnHiddenChanged_wrapped;
    /**
     * Called when a column is hidden or unhidden.
    */
    columnHiddenChanged: (s: IgrDataGrid, e: IgrColumnHiddenChangedEventArgs) => void;
    private _columnPinnedChanged;
    private _columnPinnedChanged_wrapped;
    /**
     * Called when a column is pinned or unpinned.
    */
    columnPinnedChanged: (s: IgrDataGrid, e: IgrColumnPinnedChangedEventArgs) => void;
    private _cellValueChanging;
    private _cellValueChanging_wrapped;
    /**
     * Called when a cell has been edited.
    */
    cellValueChanging: (s: IgrDataGrid, e: IgrGridCellValueChangingEventArgs) => void;
    private _dataCommitted;
    private _dataCommitted_wrapped;
    /**
     * Called when edits have been committed to the datasource.
    */
    dataCommitted: (s: IgrDataGrid, e: IgrGridDataCommittedEventArgs) => void;
    private _dataCommitting;
    private _dataCommitting_wrapped;
    /**
     * Called when edits are about to be committed to the datasource.
    */
    dataCommitting: (s: IgrDataGrid, e: IgrGridDataCommittingEventArgs) => void;
    private _sizeChanged;
    private _sizeChanged_wrapped;
    /**
     * Called when the grids size has changed.
    */
    sizeChanged: (s: IgrDataGrid, e: IgrGridSizeChangedEventArgs) => void;
    private _actualColumnsChanged;
    private _actualColumnsChanged_wrapped;
    actualColumnsChanged: (s: IgrDataGrid, e: IgrGridColumnsChangedEventArgs) => void;
    private _columnsAutoGenerated;
    private _columnsAutoGenerated_wrapped;
    /**
     * Called when the columns are autogenerated.
    */
    columnsAutoGenerated: (s: IgrDataGrid, e: IgrGridColumnsAutoGeneratedEventArgs) => void;
    private _selectedItemsChanged;
    private _selectedItemsChanged_wrapped;
    /**
     * Called when the selected items change.
    */
    selectedItemsChanged: (s: IgrDataGrid, e: IgrGridSelectedItemsChangedEventArgs) => void;
    private _selectedKeysChanged;
    private _selectedKeysChanged_wrapped;
    /**
     * Called when the selected keys change.
    */
    selectedKeysChanged: (s: IgrDataGrid, e: IgrGridSelectedKeysChangedEventArgs) => void;
    private _selectedCellsChanged;
    private _selectedCellsChanged_wrapped;
    /**
     * Called when the selected cells change.
    */
    selectedCellsChanged: (s: IgrDataGrid, e: IgrGridSelectedCellsChangedEventArgs) => void;
    private _activeCellChanged;
    private _activeCellChanged_wrapped;
    /**
     * Called when the active cell changes.
    */
    activeCellChanged: (s: IgrDataGrid, e: IgrGridActiveCellChangedEventArgs) => void;
    private _selectedCellRangesChanged;
    private _selectedCellRangesChanged_wrapped;
    /**
     * Called when the selected cell ranges changed.
    */
    selectedCellRangesChanged: (s: IgrDataGrid, e: IgrGridSelectedCellRangesChangedEventArgs) => void;
    private _columnWidthChanged;
    private _columnWidthChanged_wrapped;
    /**
     * Called when a column's Width property has changed.
    */
    columnWidthChanged: (s: IgrDataGrid, e: IgrGridColumnWidthChangedEventArgs) => void;
    private _cellEditStarted;
    private _cellEditStarted_wrapped;
    cellEditStarted: (s: IgrDataGrid, e: IgrGridCellEditStartedEventArgs) => void;
    private _cellEditEnded;
    private _cellEditEnded_wrapped;
    cellEditEnded: (s: IgrDataGrid, e: IgrGridCellEditEndedEventArgs) => void;
    private _rowEditStarted;
    private _rowEditStarted_wrapped;
    rowEditStarted: (s: IgrDataGrid, e: IgrGridRowEditStartedEventArgs) => void;
    private _rowEditEnded;
    private _rowEditEnded_wrapped;
    rowEditEnded: (s: IgrDataGrid, e: IgrGridRowEditEndedEventArgs) => void;
    private _actualPrimaryKeyChange;
    private _actualPrimaryKeyChange_wrapped;
    actualPrimaryKeyChange: (s: IgrDataGrid, e: string[]) => void;
}
export interface IIgrDataGridProps {
    width?: string;
    height?: string;
    useCanvas?: boolean | string;
    useAccessibility?: boolean | string;
    /**
     * Gets or sets the style of scrollbar used.
     * */
    scrollbarStyle?: ScrollbarStyle | string;
    /**
     * Gets or sets the default column width to use if a column as no local width.
     * */
    defaultColumnWidth?: IgrColumnWidth | string;
    /**
  * Gets or sets the data for the grid to use.
  */
    dataSource?: any;
    /**
     * Gets or sets the amount of left inset space to use around the grid content.
    */
    insetLeft?: number;
    /**
     * Gets or sets the amount of top inset space to use around the grid content.
    */
    insetTop?: number;
    /**
     * Gets or sets the amount of right inset space to use around the grid content.
    */
    insetRight?: number;
    /**
     * Gets or sets the amount of bottom inset space to use around the grid content.
    */
    insetBottom?: number;
    /**
 * Gets or sets the type of column resizing to use.
*/
    columnResizingMode?: ColumnResizingMode | string;
    /**
     * Gets or sets the type column moving to use.
    */
    columnMovingMode?: ColumnMovingMode | string;
    /**
     * Gets or sets whether the row will highlight when hovered.
    */
    isRowHoverEnabled?: boolean | string;
    /**
     * Gets or sets the background color for rows when hovered.
    */
    rowHoverBackground?: string;
    /**
     * Gets or sets the border color for rows being edited.
    */
    editRowBorder?: string;
    editRowBorderWidthBottom?: number | string;
    editRowBorderWidthLeft?: number | string;
    editRowBorderWidthRight?: number | string;
    editRowBorderWidthTop?: number | string;
    /**
     * Gets or sets the header type used for sectioning off groups of rows.
    */
    sectionHeader?: IgrSectionHeader;
    /**
     * Gets or sets the cell definition used for summary rows at the root level.
    */
    summaryRowRoot?: IgrSummaryRowRoot;
    /**
     * Gets or sets the cell definition used for summary rows at the section level.
    */
    summaryRowSection?: IgrSummaryRowSection;
    /**
     * Gets or sets the row seperator settings.
    */
    rowSeparator?: IgrRowSeparator;
    /**
     * Gets or sets the header row seperator settings.
    */
    headerRowSeparator?: IgrHeaderRowSeparator;
    /**
     * Gets or sets the header seperator settings.
    */
    headerSeparator?: IgrHeaderSeparator;
    /**
     * Gets or sets the column resizing seperator settings.
    */
    columnResizingSeparator?: IgrColumnResizingSeparator;
    /**
     * Gets or sets the column resizing seperator settings.
    */
    columnMovingSeparator?: IgrColumnMovingSeparator;
    /**
     * Gets or sets the pinned area separator settings.
    */
    pinnedAreaSeparator?: IgrPinnedAreaSeparator;
    /**
     * Gets or sets the desired properties the grid will automatically generate columns for.
    */
    autoGenerateDesiredProperties?: string[];
    /**
     * Gets or sets the desired properties for the data source to load. If specified the data source may decide to constrain the properties it fetches to these properties and must make sure that at least those properties are loaded, rather than the default behavior for that data source.
    */
    dataSourceDesiredProperties?: string[];
    /**
     * Gets or sets the display density to use for the grid.
    */
    density?: ControlDisplayDensity | string;
    /**
     * Gets the actual height for the rows in the grid.
    */
    actualRowHeight?: number | string;
    /**
     * Gets or sets the height to use for the rows in the grid. If not set the grid will
     * use the default value for the set display density.
    */
    rowHeight?: number | string;
    /**
     * Gets or sets the default minimum width to use on all columns. Ignored if NaN.
    */
    defaultColumnMinWidth?: number | string;
    /**
     * Gets the height used for the header row.
    */
    actualHeaderHeight?: number | string;
    /**
     * Gets or sets the height to use for the header row.
    */
    headerHeight?: number | string;
    /**
     * Returns/sets the action to take when a column header is clicked.
    */
    headerClickAction?: HeaderClickAction | string;
    /**
     * Gets or sets the type of edit mode
    */
    editMode?: EditModeType | string;
    /**
     * Gets or sets the type of click action required to enter edit mode.
    */
    editModeClickAction?: EditModeClickAction | string;
    /**
     * Configures whether or not the grid will autogenerate columns when the data source is set.
    */
    autoGenerateColumns?: boolean | string;
    /**
     * Sets or gets the height to use for the row separators.
    */
    rowSeparatorHeight?: number | string;
    /**
     * Configures whether or not place holders are used for cells who do not have their data yet.
    */
    isPlaceholderRenderingEnabled?: boolean | string;
    /**
     * Sets or gets the Column Adding Animation mode to use.
    */
    columnAddingAnimationMode?: ColumnShowingAnimationMode | string;
    /**
     * Sets or gets the Column Property Updating Animation mode to use.
    */
    columnPropertyUpdatingAnimationMode?: ColumnPropertyUpdatingAnimationMode | string;
    /**
     * Sets or gets the cell data loaded animation mode to use.
    */
    cellDataLoadedAnimationMode?: CellDataLoadedAnimationMode | string;
    /**
     * Sets or gets the row selection animation mode to use.
    */
    rowSelectionAnimationMode?: RowSelectionAnimationMode | string;
    /**
     * Sets or gets the row hover animation mode to use.
    */
    rowHoverAnimationMode?: RowHoverAnimationMode | string;
    /**
     * Sets or gets the cell selection animation mode to use.
    */
    cellSelectionAnimationMode?: CellSelectionAnimationMode | string;
    /**
     * Sets or gets the default animation settings for the grid.
    */
    animationSettings?: IgrGridAnimationSettings;
    /**
     * Sets or gets the column resizing animation mode to use. Only applies when resizing in Deferred mode.
    */
    columnResizingAnimationMode?: ColumnResizingAnimationMode | string;
    /**
     * Sets or gets the column showing animation mode to use.
    */
    columnShowingAnimationMode?: ColumnShowingAnimationMode | string;
    /**
     * Sets or gets the column moving animation mode to use.
    */
    columnMovingAnimationMode?: ColumnMovingAnimationMode | string;
    /**
     * Sets or gets the column hiding animation mode to use.
    */
    columnHidingAnimationMode?: ColumnHidingAnimationMode | string;
    /**
     * Sets or gets the column exchanging animation mode to use.
    */
    columnExchangingAnimationMode?: ColumnExchangingAnimationMode | string;
    /**
     * Sets or gets the grid selection mode.
    */
    selectionMode?: GridSelectionMode | string;
    /**
     * Sets or gets the grid selection mode.
    */
    activationMode?: GridActivationMode | string;
    /**
     * Sets or gets how selection behaves in the grid.
    */
    selectionBehavior?: GridSelectionBehavior | string;
    /**
     * Gets or sets whether to show the column options UI in the headers for columns.
    */
    isColumnOptionsEnabled?: boolean | string;
    /**
     * Gets or sets if group rows will stick to the top of the grid.
    */
    isGroupRowSticky?: boolean | string;
    /**
     * Gets or sets if header separators are rendered.
    */
    isHeaderSeparatorVisible?: boolean | string;
    /**
     * Gets or sets the default background color to use for content cells when a row is in a selected state
    */
    cellSelectedBackground?: string;
    /**
     * Gets or sets the default background color to use for section header cells when a row is in a selected state
    */
    sectionHeaderSelectedBackground?: string;
    /**
     * Gets or sets the default background color to use for summary cells at the root level.
    */
    summaryRootBackground?: string;
    /**
     * Gets or sets the default background color to use for summary cells at the section level.
    */
    summarySectionBackground?: string;
    /**
     * Gets or sets the default opacity to use for pinned rows
    */
    pinnedRowOpacity?: number | string;
    /**
     * Gets or sets the font to use for cells that have been edited.
    */
    editTextStyle?: string;
    /**
     * Gets or sets the default opacity for unsaved cell edits.
    */
    editOpacity?: number | string;
    /**
     * Gets or sets the text color for unsaved deleted rows.
    */
    deletedTextColor?: string;
    /**
     * Gets or sets the default color to use for sticky rows
    */
    stickyRowBackground?: string;
    /**
     * Gets or sets the default color to use for pinned rows
    */
    pinnedRowBackground?: string;
    /**
     * Gets or sets the default color to use for the last sticky row
    */
    lastStickyRowBackground?: string;
    /**
     * Gets or sets the position of the active cell.
    */
    activeCell?: IgrGridCellPosition;
    /**
     * Gets or sets the default background color to use for content cells
    */
    cellBackground?: string;
    /**
     * Gets or sets the default text color to use for content cells
    */
    cellTextColor?: string;
    /**
     * Gets or sets the default text color to use for content cells
    */
    headerSortIndicatorColor?: string;
    /**
     * Gets or sets the default render style for sort indicators in header cells.
    */
    headerSortIndicatorStyle?: SortIndicatorStyle | string;
    /**
     * Gets or sets the font to use for content cells
    */
    cellTextStyle?: string;
    /**
     * Gets or sets the default background color to use for section header cells
    */
    sectionHeaderBackground?: string;
    /**
     * Gets or sets the default text color to use for section header cells
    */
    sectionHeaderTextColor?: string;
    /**
     * Gets or sets the font to use for section header cells
    */
    sectionHeaderTextStyle?: string;
    /**
     * Gets or sets the font to use for summary labels at the root level.
    */
    summaryRootLabelTextStyle?: string;
    /**
     * Gets or sets the font to use for summary labels at the section level.
    */
    summarySectionLabelTextStyle?: string;
    /**
     * Gets or sets the default text color to use for summary cells at the root level.
    */
    summaryRootValueTextColor?: string;
    /**
     * Gets or sets the font to use for summary values at the root level.
    */
    summaryRootValueTextStyle?: string;
    /**
     * Gets or sets the font to use for summary values at the section level.
    */
    summarySectionValueTextStyle?: string;
    /**
     * Gets or sets the default text color to use for summary cells at the section level.
    */
    summarySectionValueTextColor?: string;
    /**
     * Gets or sets the default text color to use for summary labels in summary cells at the root level.
    */
    summaryRootLabelTextColor?: string;
    /**
     * Gets or sets the default text color to use for summary labels in summary cells at the section level.
    */
    summarySectionLabelTextColor?: string;
    /**
     * Gets or sets the default background color to use for summary cells at the root level.
    */
    summaryRootSelectedBackground?: string;
    /**
     * Gets or sets the default background color to use for summary cells at the section level.
    */
    summarySectionSelectedBackground?: string;
    /**
     * Gets or sets the width of the pinned area separators.
    */
    pinnedAreaSeparatorWidth?: number | string;
    /**
     * Gets or sets the width of the header separators.
    */
    headerSeparatorWidth?: number | string;
    /**
     * Gets or sets the default background color to use for header separators.
    */
    headerSeparatorBackground?: string;
    /**
     * Gets or sets the default background color to use for header cells
    */
    headerBackground?: string;
    /**
     * Gets or sets the default text color to use for header cells
    */
    headerTextColor?: string;
    /**
     * Gets or sets the font to use for header cells
    */
    headerTextStyle?: string;
    /**
     * Gets or sets the default background color to use for row separators
    */
    rowSeparatorBackground?: string;
    headerRowSeparatorBackground?: string;
    /**
     * Gets or sets the default sticky row background color to use for row separators
    */
    rowSeparatorStickyRowBackground?: string;
    /**
     * Gets or sets the default last sticky row background color to use for row separators
    */
    rowSeparatorLastStickyRowBackground?: string;
    /**
     * Gets or sets the pinned row background color to use for row separators
    */
    rowSeparatorPinnedRowBackground?: string;
    /**
     * Sets or gets the width to use for the column resizing separator.
    */
    columnResizingSeparatorWidth?: number | string;
    /**
     * Sets or gets the width to use for the column resizing separator.
    */
    columnMovingSeparatorWidth?: number | string;
    /**
     * Gets or sets the default background color to use for column resizing separator.
    */
    columnResizingSeparatorBackground?: string;
    /**
     * Gets or sets the default background color to use for column moving separator.
    */
    columnMovingSeparatorBackground?: string;
    /**
     * Gets or sets if the section header content should be shifted into the normal column scrollable area when there are pinned columns
    */
    shiftSectionContent?: boolean | string;
    /**
     * Gets or sets the column options icon alignment in header cells.
    */
    columnOptionsIconAlignment?: ColumnOptionsIconAlignment | string;
    /**
     * Gets or sets the column options icon color in header cells.
    */
    columnOptionsIconColor?: string;
    /**
     * Gets or sets how the column options icon will behave inside header cells.
    */
    columnOptionsIconBehavior?: ColumnOptionsIconBehavior | string;
    /**
     * Gets or sets the border color around the grid.
    */
    border?: string;
    /**
     * Gets the actual border width.
    */
    actualBorderWidth?: Thickness;
    borderWidthBottom?: number | string;
    borderWidthLeft?: number | string;
    borderWidthRight?: number | string;
    borderWidthTop?: number | string;
    /**
     * Gets or sets if the grid should notify on programmatic selection changes as well as changes from the UI.
    */
    notifyOnAllSelectionChanges?: boolean | string;
    cornerRadiusBottomRight?: number | string;
    cornerRadiusBottomLeft?: number | string;
    cornerRadiusTopLeft?: number | string;
    cornerRadiusTopRight?: number | string;
    actualCornerRadiusBottomRight?: number | string;
    actualCornerRadiusBottomLeft?: number | string;
    actualCornerRadiusTopLeft?: number | string;
    actualCornerRadiusTopRight?: number | string;
    /**
     * Gets or sets whether the active cell style will be applied to cells when made active.
    */
    isActiveCellStyleEnabled?: boolean | string;
    /**
     * Gets or sets the scope which summaries are calculated for.
    */
    summaryScope?: DataSourceSummaryScope | string;
    /**
     * Gets or sets whether group headers are collapsable.
    */
    isGroupCollapsable?: boolean | string;
    /**
     * Gets or sets how group headers are displayed when there are multiple groups defined in the grid.
    */
    groupHeaderDisplayMode?: DataSourceSectionHeaderDisplayMode | string;
    /**
     * Gets or sets whether groups are expanded or collapsed by default.
    */
    isGroupExpandedDefault?: boolean | string;
    /**
     * Gets or sets the display mode summaries will use inside groups.
    */
    groupSummaryDisplayMode?: GroupSummaryDisplayMode | string;
    /**
     * Gets or sets whether to automatically accept edits or require explicit acceptance or rejections of edits
     * when handling the CellValueChanging or DataCommitting events.
     * When True, nothing is required on the part of the developer in order for edits to be accepted. In
     * order to validate and reject a user cell edit you must explicitly handle the CellValueChanging event
     * and call the RejectEdit method using the edit ID provided by the event. In order to reject a whole
     * commit you need to handle the DataComitting event and explicitly call the RejectCommit method using
     * the commit ID provided by the event.
     * When False, cell edits are not immediately accepted until you explicitly call the AcceptEdit method
     * using the edit ID provided by the CellValueChanging event. If you do not handle this event then edits
     * will be auto accepted.
    */
    autoAcceptEdits?: boolean | string;
    /**
     * Sets or gets the user provided primary key to assume for the data. Certain functionality of the grid requires a way to uniquely identify items in order to work correctly.
     * If a primary key cannot be inferred from the data source, you may need to provide one here.
    */
    primaryKey?: string[];
    /**
     * Gets either the inferred primary key from the data source, or the user provided primary key, if present. Represents the actual primary key that the grid will use in operations that require it.
    */
    actualPrimaryKey?: string[];
    /**
     * Sets or gets whether the grid will react to sort changes.
    */
    reactsToSortChanges?: boolean | string;
    /**
     * Sets or gets whether the grid will react to group changes.
    */
    reactsToGroupChanges?: boolean | string;
    /**
     * Sets or gets whether the grid will react to filter changes.
    */
    reactsToFilterChanges?: boolean | string;
    filterExpressionsChanging?: (s: IgrDataGrid, e: IgrGridFilterExpressionsEventArgs) => void;
    filterExpressionsChanged?: (s: IgrDataGrid, e: IgrGridFilterExpressionsEventArgs) => void;
    /**
     * Previews that a pointer is down on a cell.
    */
    cellPreviewPointerDown?: (s: IgrDataGrid, e: IgrGridCellEventArgs) => void;
    /**
     * Previews that a pointer is up on a cell.
    */
    cellPreviewPointerUp?: (s: IgrDataGrid, e: IgrGridCellEventArgs) => void;
    /**
     * Indicates a pointer is down on a cell.
    */
    cellPointerDown?: (s: IgrDataGrid, e: IgrGridCellEventArgs) => void;
    /**
     * Indicates a pointer is up on a cell.
    */
    cellPointerUp?: (s: IgrDataGrid, e: IgrGridCellEventArgs) => void;
    /**
     * Called when a cell is clicked.
    */
    cellClicked?: (s: IgrDataGrid, e: IgrGridCellEventArgs) => void;
    /**
     * Called when sorting has changed.
    */
    sortDescriptionsChanged?: (s: IgrDataGrid, e: IgrGridSortDescriptionsChangedEventArgs) => void;
    /**
     * Called when grouping has changed.
    */
    groupDescriptionsChanged?: (s: IgrDataGrid, e: IgrGridGroupDescriptionsChangedEventArgs) => void;
    /**
     * Called when a column is hidden or unhidden.
    */
    columnHiddenChanged?: (s: IgrDataGrid, e: IgrColumnHiddenChangedEventArgs) => void;
    /**
     * Called when a column is pinned or unpinned.
    */
    columnPinnedChanged?: (s: IgrDataGrid, e: IgrColumnPinnedChangedEventArgs) => void;
    /**
     * Called when a cell has been edited.
    */
    cellValueChanging?: (s: IgrDataGrid, e: IgrGridCellValueChangingEventArgs) => void;
    /**
     * Called when edits have been committed to the datasource.
    */
    dataCommitted?: (s: IgrDataGrid, e: IgrGridDataCommittedEventArgs) => void;
    /**
     * Called when edits are about to be committed to the datasource.
    */
    dataCommitting?: (s: IgrDataGrid, e: IgrGridDataCommittingEventArgs) => void;
    /**
     * Called when the grids size has changed.
    */
    sizeChanged?: (s: IgrDataGrid, e: IgrGridSizeChangedEventArgs) => void;
    actualColumnsChanged?: (s: IgrDataGrid, e: IgrGridColumnsChangedEventArgs) => void;
    /**
     * Called when the columns are autogenerated.
    */
    columnsAutoGenerated?: (s: IgrDataGrid, e: IgrGridColumnsAutoGeneratedEventArgs) => void;
    /**
     * Called when the selected items change.
    */
    selectedItemsChanged?: (s: IgrDataGrid, e: IgrGridSelectedItemsChangedEventArgs) => void;
    /**
     * Called when the selected keys change.
    */
    selectedKeysChanged?: (s: IgrDataGrid, e: IgrGridSelectedKeysChangedEventArgs) => void;
    /**
     * Called when the selected cells change.
    */
    selectedCellsChanged?: (s: IgrDataGrid, e: IgrGridSelectedCellsChangedEventArgs) => void;
    /**
     * Called when the active cell changes.
    */
    activeCellChanged?: (s: IgrDataGrid, e: IgrGridActiveCellChangedEventArgs) => void;
    /**
     * Called when the selected cell ranges changed.
    */
    selectedCellRangesChanged?: (s: IgrDataGrid, e: IgrGridSelectedCellRangesChangedEventArgs) => void;
    /**
     * Called when a column's Width property has changed.
    */
    columnWidthChanged?: (s: IgrDataGrid, e: IgrGridColumnWidthChangedEventArgs) => void;
    cellEditStarted?: (s: IgrDataGrid, e: IgrGridCellEditStartedEventArgs) => void;
    cellEditEnded?: (s: IgrDataGrid, e: IgrGridCellEditEndedEventArgs) => void;
    rowEditStarted?: (s: IgrDataGrid, e: IgrGridRowEditStartedEventArgs) => void;
    rowEditEnded?: (s: IgrDataGrid, e: IgrGridRowEditEndedEventArgs) => void;
}
