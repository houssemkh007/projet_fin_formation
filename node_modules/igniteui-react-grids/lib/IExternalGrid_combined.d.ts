import { DomRenderer } from "igniteui-react-core";
import { Base, Type, Point, PropertyChangedEventArgs, INotifyPropertyChanged, EventArgs, IList$1 } from "igniteui-react-core";
import { IDataSource } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { ICellActionManager } from "./ICellActionManager";
import { RowPath } from "./RowPath";
import { IDragger } from "./IDragger";
import { ColumnFilterCondition } from "./ColumnFilterCondition";
import { DataSourceSchemaPropertyType } from "igniteui-react-core";
import { ControlDisplayDensity } from "igniteui-react-core";
import { BaseControlTheme } from "igniteui-react-core";
import { GridViewportChangedEventArgs } from "./GridViewportChangedEventArgs";
import { DateTimeFormats } from "./DateTimeFormats";
import { ModelStates } from "./ModelStates";
import { CellPath } from "./CellPath";
import { ModelTypes } from "./ModelTypes";
import { CellContentHorizontalAlignment } from "./CellContentHorizontalAlignment";
import { CellContentVerticalAlignment } from "./CellContentVerticalAlignment";
import { FontInfo } from "igniteui-react-core";
import { TextCellLineBreakMode } from "./TextCellLineBreakMode";
import { ColumnSortDirection } from "./ColumnSortDirection";
import { PinnedPositions } from "./PinnedPositions";
import { Dictionary$2 } from "igniteui-react-core";
import { CellModelExport } from "./CellModelExport";
import { DataSourceRowType } from "igniteui-react-core";
import { GroupSummaryDisplayMode } from "./GroupSummaryDisplayMode";
import { BindingFormatter } from "igniteui-react-core";
import { EditorType } from "./EditorType";
import { ImageStretchOptions } from "./ImageStretchOptions";
import { ImageResourceType } from "./ImageResourceType";
import { GroupData } from "./GroupData";
import { SummaryData } from "./SummaryData";
import { SortIndicatorStyle } from "./SortIndicatorStyle";
import { ColumnOptionsIconAlignment } from "./ColumnOptionsIconAlignment";
import { ColumnOptionsIconBehavior } from "./ColumnOptionsIconBehavior";
import { INativeCell } from "./INativeCell";
import { IDataSourceUpdateNotifier } from "igniteui-react-core";
import { IDataSourceSchema } from "igniteui-react-core";
import { HashSet$1 } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { FastIterationDictionary$2 } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { EditModeType } from "./EditModeType";
import { IPropertySetter } from "./IPropertySetter";
import { DragSelectEventArgs } from "./DragSelectEventArgs";
import { ColumnResizingMode } from "./ColumnResizingMode";
import { ColumnMovingMode } from "./ColumnMovingMode";
import { IDelayedExecutionManager } from "./IDelayedExecutionManager";
import { ITickProvider } from "igniteui-react-core";
import { IViewportManager } from "./IViewportManager";
import { ColumnWidth } from "./ColumnWidth";
import { HeaderClickAction } from "./HeaderClickAction";
import { EditModeClickAction } from "./EditModeClickAction";
import { ColumnShowingAnimationMode } from "./ColumnShowingAnimationMode";
import { ColumnPropertyUpdatingAnimationMode } from "./ColumnPropertyUpdatingAnimationMode";
import { CellDataLoadedAnimationMode } from "./CellDataLoadedAnimationMode";
import { RowSelectionAnimationMode } from "./RowSelectionAnimationMode";
import { RowHoverAnimationMode } from "./RowHoverAnimationMode";
import { CellSelectionAnimationMode } from "./CellSelectionAnimationMode";
import { GridColumnAnimationSettings } from "./GridColumnAnimationSettings";
import { GridAnimationSettings } from "./GridAnimationSettings";
import { ColumnResizingAnimationMode } from "./ColumnResizingAnimationMode";
import { ColumnMovingAnimationMode } from "./ColumnMovingAnimationMode";
import { ColumnHidingAnimationMode } from "./ColumnHidingAnimationMode";
import { ColumnExchangingAnimationMode } from "./ColumnExchangingAnimationMode";
import { GridSelectionMode } from "./GridSelectionMode";
import { GridActivationMode } from "./GridActivationMode";
import { GridSelectionBehavior } from "./GridSelectionBehavior";
import { GridSelectedItemsCollection } from "./GridSelectedItemsCollection";
import { GridSelectedKeysCollection } from "./GridSelectedKeysCollection";
import { GridSelectedCellRangesCollection } from "./GridSelectedCellRangesCollection";
import { GridCellPosition } from "./GridCellPosition";
import { CornerRadius } from "igniteui-react-core";
import { IPlatformPixelConverter } from "./IPlatformPixelConverter";
import { ColumnSortDescriptionCollection } from "./ColumnSortDescriptionCollection";
import { ColumnGroupDescriptionCollection } from "./ColumnGroupDescriptionCollection";
import { FilterExpressionCollection } from "igniteui-react-core";
import { ColumnSummaryDescriptionCollection } from "./ColumnSummaryDescriptionCollection";
import { DataSourceSummaryScope } from "igniteui-react-core";
import { DataSourceSectionHeaderDisplayMode } from "igniteui-react-core";
import { IEditableDataSource } from "igniteui-react-core";
import { GridFilterExpressionsEventArgs } from "./GridFilterExpressionsEventArgs";
import { CellRange } from "./CellRange";
import { NotifyCollectionChangedEventArgs } from "igniteui-react-core";
import { ObservableCollection$1 } from "igniteui-react-core";
import { ColumnGroupDescription } from "./ColumnGroupDescription";
import { ColumnSummaryDescription } from "./ColumnSummaryDescription";
import { GridGroupDescriptionsChangedEventArgs } from "./GridGroupDescriptionsChangedEventArgs";
import { GridSortDescriptionsChangedEventArgs } from "./GridSortDescriptionsChangedEventArgs";
import { PrimaryKeyValue } from "./PrimaryKeyValue";
import { GridSelectedItemsChangedEventArgs } from "./GridSelectedItemsChangedEventArgs";
import { GridSelectedKeysChangedEventArgs } from "./GridSelectedKeysChangedEventArgs";
import { GridSelectedCellRangesChangedEventArgs } from "./GridSelectedCellRangesChangedEventArgs";
import { GridDataCommittedEventArgs } from "./GridDataCommittedEventArgs";
import { GridDataCommittingEventArgs } from "./GridDataCommittingEventArgs";
import { DefinitionPropertyUpdatedEventArgs } from "./DefinitionPropertyUpdatedEventArgs";
import { CellPropertyAnimationType } from "./CellPropertyAnimationType";
import { GridSizeChangedEventArgs } from "./GridSizeChangedEventArgs";
import { ColumnStates } from "./ColumnStates";
import { IFilterExpression } from "igniteui-react-core";
import { VisualModelExport } from "./VisualModelExport";
import { GridActiveCellChangedEventArgs } from "./GridActiveCellChangedEventArgs";
import { ISummaryResult } from "igniteui-react-core";
import { GridRowEditStartedEventArgs } from "./GridRowEditStartedEventArgs";
import { GridRowEditEndedEventArgs } from "./GridRowEditEndedEventArgs";
import { GridAnimationPhaseSettings } from "./GridAnimationPhaseSettings";
import { GridAnimationManagerAnimationCreatedEventArgs } from "./GridAnimationManagerAnimationCreatedEventArgs";
import { GridAnimationManagerAnimationCompletedEventArgs } from "./GridAnimationManagerAnimationCompletedEventArgs";
import { GridAnimationManagerAnimationCanceledEventArgs } from "./GridAnimationManagerAnimationCanceledEventArgs";
import { GridColumnSpacer } from "./GridColumnSpacer";
import { GridColumnSpacerCollection } from "./GridColumnSpacerCollection";
import { GridEffectMainIntent } from "./GridEffectMainIntent";
import { FixedCellPositions } from "./FixedCellPositions";
import { GridEffectSubIntent } from "./GridEffectSubIntent";
import { CellStyleRequestedEventArgs } from "./CellStyleRequestedEventArgs";
import { CalculationParameters } from "./CalculationParameters";
import { ColumnPropertySettersCollection } from "./ColumnPropertySettersCollection";
import { ColumnPropertySetter } from "./ColumnPropertySetter";
import { ResponsiveStateEnteringEventArgs } from "./ResponsiveStateEnteringEventArgs";
import { ResponsiveStateEnteredEventArgs } from "./ResponsiveStateEnteredEventArgs";
import { ResponsiveStateExitedEventArgs } from "./ResponsiveStateExitedEventArgs";
/**
 * @hidden
 */
export interface IExternalGrid {
    readonly renderer: DomRenderer;
    insertExternalColumnAtIndex(a: number, b: any): void;
    removeExternalColumn(a: any): void;
    ensureColumnsAreManual(): void;
    onContentSizeChanged(): void;
    createLocalDataSource(a: any): IDataSource;
    createTextColumn(a: string): TextColumn;
    createNumericColumn(a: string): NumericColumn;
    createDateTimeColumn(a: string): DateTimeColumn;
    createImageColumn(a: string): ImageColumn;
    createTemplateColumn(a: string): TemplateColumn;
    createComboBoxColumn(a: string): ComboBoxColumn;
    focusScroller(): void;
    setHandCursor(): void;
    setResizeCursor(): void;
    setDefaultCursor(): void;
    setBorder(a: Brush, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
    setScrollerVerticalTrackInset(a: number): void;
}
/**
 * @hidden
 */
export declare let IExternalGrid_$type: Type;
/**
 * @hidden
 */
export declare class DefaultCellActionManager extends Base implements ICellActionManager {
    static $t: Type;
    private b;
    private a;
    private c;
    private d;
    constructor(a: Grid, b: CellModel);
    clickExpansionIndicator(): void;
    clickCell(a: boolean): void;
    dragStarted(): void;
    previewPointerDownCell(): void;
    previewPointerUpCell(): void;
    pointerDownCell(): void;
    pointerUpCell(): void;
    mouseDownCell(a: number, b: number): void;
    mouseUpCell(a: number, b: number): void;
    mouseLeaveCell(a: number, b: number): void;
    mouseEnterCell(a: number, b: number): void;
    mouseIsOver(a: number, b: number): void;
    doubleClicked(): void;
    getColumnFilterCondition(): ColumnFilterCondition;
    getColumnPropertyType(): DataSourceSchemaPropertyType;
    columnFilterChanging(a: ColumnFilterCondition): void;
    columnFilterChanged(a: ColumnFilterCondition): void;
    isCellDown(): boolean;
    readonly isLeaveActionDesired: boolean;
    readonly isEnterActionDesired: boolean;
    readonly isClickActionDesired: boolean;
    readonly isHoverActionDesired: boolean;
    readonly isPreviewPointerDownActionDesired: boolean;
    readonly isPreviewPointerUpActionDesired: boolean;
    readonly isPointerDownActionDesired: boolean;
    readonly isPointerUpActionDesired: boolean;
    isControlPressed: boolean;
    isShiftPressed: boolean;
    readonly isDrag: boolean;
    readonly isMouseDown: boolean;
    readonly mousePosition: Point;
    readonly isGridDragging: boolean;
    updateCellEditValue(a: any): void;
    editorCellLostFocus(): void;
    cancelEditMode(a: boolean): void;
}
/**
 * @hidden
 */
export interface IGridInfoRequestor {
    getColumn(): Column;
    getDensity(): ControlDisplayDensity;
    getTheme(): BaseControlTheme;
    setViewportChangedHandler(a: (sender: any, e: GridViewportChangedEventArgs) => void): void;
    removeViewportChangedHandler(a: (sender: any, e: GridViewportChangedEventArgs) => void): void;
}
/**
 * @hidden
 */
export declare let IGridInfoRequestor_$type: Type;
/**
 * @hidden
 */
export declare class DefaultGridInfoRequestor extends Base implements IGridInfoRequestor {
    static $t: Type;
    private b;
    private a;
    constructor(a: Grid, b: CellModel);
    getColumn(): Column;
    getDensity(): ControlDisplayDensity;
    getTheme(): BaseControlTheme;
    setViewportChangedHandler(a: (sender: any, e: GridViewportChangedEventArgs) => void): void;
    removeViewportChangedHandler(a: (sender: any, e: GridViewportChangedEventArgs) => void): void;
}
/**
 * @hidden
 */
export declare class DateTimeColumnValueFormatter extends Base {
    static $t: Type;
    private a;
    private b;
    k(): void;
    j(a: DateTimeCellModel): void;
    private f;
    private e;
    private c;
    private d;
    private g;
    private h;
    i(a: Date): string;
}
/**
 * @hidden
 */
export declare abstract class CellModel extends Base {
    static $t: Type;
    private n;
    o: Grid;
    constructor();
    private static c3;
    private static c2;
    private static bf;
    static ez(a: string): number;
    r: ICellPresenter;
    static f8: number;
    private s;
    t: ModelStates;
    i0: string;
    private j;
    static fu: number;
    k: CellPath;
    ej: number;
    a5: boolean;
    ba: boolean;
    as: boolean;
    aq: boolean;
    a3: boolean;
    bb: boolean;
    au: boolean;
    a4: boolean;
    c: ICellActionManager;
    d: IGridInfoRequestor;
    private am;
    static fc: number;
    a6: boolean;
    private an;
    static fd: number;
    a7: boolean;
    private al;
    static fb: number;
    a2: boolean;
    private c1;
    static e6: number;
    e5: number;
    private bc;
    at(a: string): boolean;
    ax(propertyId_: number): boolean;
    aw(a: string): boolean;
    private cu;
    private a;
    je(propertyId_: number): void;
    jb(): void;
    jf(a: string): void;
    protected jm(a: string, b: number, c: any, d: any): void;
    protected jp(a: string, b: any, c: any): void;
    private jn;
    private jh;
    private ji;
    private jj;
    private jk;
    private jo;
    private jl;
    private ki;
    jr(): void;
    protected js(): void;
    private be;
    jt(a: string, b: any): void;
    ap(a: string): boolean;
    jq(a: string): void;
    gm(a: string): any;
    private p;
    q: GridLayer;
    static fz: number;
    private gl;
    gp: any;
    static readonly gh: number;
    private bw;
    cc: number;
    static readonly gi: number;
    private bx;
    cd: number;
    static readonly f3: number;
    private c8;
    f2: number;
    static readonly f5: number;
    private c9;
    f4: number;
    static readonly eo: number;
    private bm;
    b2: number;
    static readonly ei: number;
    private bl;
    b1: number;
    static readonly dw: number;
    private bj;
    bz: number;
    static readonly fk: number;
    private bq;
    b6: number;
    static readonly dy: number;
    private bk;
    b0: number;
    static readonly fg: number;
    jg(): void;
    private bo;
    b4: number;
    static readonly gb: number;
    private bt;
    b9: number;
    static readonly fh: number;
    private bp;
    b5: number;
    static readonly gc: number;
    private bu;
    ca: number;
    static readonly e1: number;
    private c0;
    e0: number;
    static readonly gg: number;
    private da;
    gf: number;
    static readonly fe: number;
    private ao;
    a9: boolean;
    static readonly fj: number;
    private u;
    v: ModelTypes;
    static readonly f1: number;
    private bs;
    b8: number;
    static readonly dk: number;
    private bi;
    by: number;
    static readonly e4: number;
    private bn;
    b3: number;
    static readonly e2: number;
    private e;
    f: CellContentHorizontalAlignment;
    static readonly gd: number;
    private g;
    h: CellContentVerticalAlignment;
    static readonly d8: number;
    private jz;
    ke: Brush;
    static readonly ed: number;
    private j0;
    kf: Brush;
    static readonly dl: number;
    private jw;
    kb: Brush;
    static readonly dr: number;
    private jx;
    kc: Brush;
    static readonly df: number;
    private jv;
    ka: Brush;
    static readonly et: number;
    private j2;
    kh: Brush;
    static readonly f0: number;
    private j6;
    km: Brush;
    static readonly e3: number;
    private j3;
    kj: Brush;
    static readonly f7: number;
    private j7;
    kn: Brush;
    static readonly f9: number;
    private j8;
    ko: Brush;
    static readonly fw: number;
    private j5;
    kl: Brush;
    private j4;
    static readonly ff: number;
    kk: Brush;
    static readonly fx: number;
    private br;
    b7: number;
    static readonly fl: number;
    private gk;
    go: any;
    static readonly fy: number;
    private gr;
    ip: string;
    static readonly ga: number;
    private j9;
    kp: Brush;
    static readonly d7: number;
    private jy;
    kd: Brush;
    static readonly ek: number;
    private j1;
    kg: Brush;
    static readonly ey: number;
    private ac;
    af: FontInfo;
    static readonly dx: number;
    private aa;
    ad: FontInfo;
    static readonly fi: number;
    private y;
    z: TextCellLineBreakMode;
    static readonly ge: number;
    private bv;
    cb: number;
    static readonly fp: number;
    private c5;
    fo: number;
    static readonly ft: number;
    private c7;
    fs: number;
    static readonly fr: number;
    private c6;
    fq: number;
    static readonly fn: number;
    private c4;
    fm: number;
    static readonly d2: number;
    private cn;
    d1: number;
    static readonly d6: number;
    private cp;
    d5: number;
    static readonly d4: number;
    private co;
    d3: number;
    static readonly d0: number;
    private cm;
    dz: number;
    static readonly ec: number;
    private cr;
    eb: number;
    static readonly eh: number;
    private ct;
    eg: number;
    static readonly ef: number;
    private cs;
    ee: number;
    static readonly ea: number;
    private cq;
    d9: number;
    static readonly de: number;
    private cf;
    dd: number;
    static readonly dj: number;
    private ch;
    di: number;
    static readonly dh: number;
    private cg;
    dg: number;
    static readonly dc: number;
    private ce;
    db: number;
    static readonly es: number;
    private cx;
    er: number;
    static readonly ex: number;
    private cz;
    ew: number;
    static readonly ev: number;
    private cy;
    eu: number;
    static readonly eq: number;
    private cw;
    ep: number;
    static readonly dq: number;
    private cj;
    dp: number;
    static readonly dv: number;
    private cl;
    du: number;
    static readonly dt: number;
    private ck;
    ds: number;
    static readonly dn: number;
    private ci;
    dm: number;
    static readonly f6: number;
    private l;
    m: ColumnSortDirection;
    static readonly fa: number;
    private aj;
    az: boolean;
    static readonly e7: number;
    private ag;
    ar: boolean;
    static readonly fv: number;
    private w;
    x: PinnedPositions;
    static readonly em: number;
    private ab;
    ae: FontInfo;
    static readonly e9: number;
    private ai;
    ay: boolean;
    static readonly e8: number;
    private ah;
    av: boolean;
    static readonly el: number;
    private gq;
    hl: string;
    a1: boolean;
    private cv;
    en: number;
    private ak;
    a0: boolean;
    gj: number;
    i9(): void;
    protected ja(): void;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    b(a: CellModelExport): CellModelExport;
    private static bg;
    protected jd(): void;
    private static bd;
    protected jc(): void;
    ju(a: string, b: any): void;
    gn(a: string): any;
    cellReconciling: (model: CellModel) => void;
    a8(a: DataSourceRowType): boolean;
}
/**
 * @hidden
 */
export declare class DateTimeCellModel extends CellModel {
    static $t: Type;
    constructor();
    static readonly k2: number;
    private kz;
    k0: Date;
    static readonly k5: number;
    private lb;
    lh: string;
    static readonly k4: number;
    private kq;
    kr: any[];
    ks: BindingFormatter;
    private k9;
    static readonly k3: number;
    private _formatOverride;
    la: any;
    static readonly k1: number;
    private kv;
    kw: DateTimeFormats;
    le(a: Date): string;
    static readonly k6: number;
    private kt;
    ku: DateTimeColumnValueFormatter;
    static readonly k7: number;
    private kx;
    ky: boolean;
    protected jp(a: string, b: any, c: any): void;
    ju(a: string, b: any): void;
    gn(a: string): any;
    b(a: CellModelExport): CellModelExport;
}
/**
 * @hidden
 */
export declare class EditorCellModel extends CellModel {
    static $t: Type;
    constructor();
    private k1;
    private k0;
    private ky;
    static la: number;
    kz: boolean;
    private ku;
    static k7: number;
    kv: CellModel;
    private ks;
    static k2: number;
    kt: DataSourceSchemaPropertyType;
    private lg;
    static k9: number;
    lp: string;
    private lc;
    static k8: number;
    le: any;
    private kw;
    static k5: number;
    kx: EditorType;
    private lb;
    static k3: number;
    ld: any;
    private lf;
    static k4: number;
    lj: string;
    private kq;
    static k6: number;
    kr: string[];
    protected jp(a: string, b: any, c: any): void;
    ju(a: string, b: any): void;
    gn(a: string): any;
    b(a: CellModelExport): CellModelExport;
    private ls;
    private lu;
    private lt;
}
/**
 * @hidden
 */
export declare class EditorRowCellModel extends CellModel {
    static $t: Type;
    private ks;
    constructor();
    private kq;
    static kt: number;
    kr: CellModel;
    protected jp(a: string, b: any, c: any): void;
    private kv;
    private kw;
}
/**
 * @hidden
 */
export declare class SummaryCellModel extends CellModel {
    static $t: Type;
    constructor();
    static readonly ks: number;
    private kw;
    ky: string;
    static readonly kt: number;
    private kx;
    k0: string;
    static readonly kv: number;
    private k4;
    k5: Brush;
    static readonly ku: number;
    private kq;
    kr: FontInfo;
    b(a: CellModelExport): CellModelExport;
    a8(a: DataSourceRowType): boolean;
}
/**
 * @hidden
 */
export declare class VerticalSeparatorCellModel extends CellModel {
    static $t: Type;
    constructor();
    static readonly ks: number;
    private kq;
    kr: boolean;
}
/**
 * @hidden
 */
export declare class ImageCellModel extends CellModel {
    static $t: Type;
    constructor();
    static readonly ku: number;
    private kx;
    ky: string;
    static readonly kw: number;
    private ks;
    kt: ImageStretchOptions;
    static readonly kv: number;
    private kq;
    kr: ImageResourceType;
    b(a: CellModelExport): CellModelExport;
    ju(a: string, b: any): void;
    gn(a: string): any;
}
/**
 * @hidden
 */
export declare class NumericCellModel extends CellModel {
    static $t: Type;
    constructor();
    static readonly lf: number;
    private ky;
    kz: number;
    static readonly k6: number;
    private kt;
    kv: boolean;
    static readonly k5: number;
    private lm;
    lt: string;
    static readonly k4: number;
    private kq;
    kr: any[];
    ks: BindingFormatter;
    private lk;
    static readonly k3: number;
    private _formatOverride;
    ll: any;
    static readonly ld: number;
    private ln;
    lz: string;
    static readonly lg: number;
    private lp;
    l4: string;
    static readonly le: number;
    private lo;
    l1: string;
    static readonly lh: number;
    private lq;
    l6: string;
    static readonly k8: number;
    private k0;
    k7: number;
    static readonly la: number;
    private k1;
    k9: number;
    static readonly lc: number;
    private k2;
    lb: number;
    static readonly li: number;
    private ku;
    kx: boolean;
    kw(): boolean;
    protected jp(a: string, b: any, c: any): void;
    ju(a: string, b: any): void;
    gn(a: string): any;
    b(a: CellModelExport): CellModelExport;
}
/**
 * @hidden
 */
export declare class RowSeparatorModel extends CellModel {
    static $t: Type;
    constructor();
    b(a: CellModelExport): CellModelExport;
}
/**
 * @hidden
 */
export declare class SectionHeaderCellModel extends CellModel {
    static $t: Type;
    constructor();
    static readonly kw: number;
    private kq;
    ks: GroupData[];
    static readonly kz: number;
    private kr;
    kt: SummaryData[];
    static readonly ky: number;
    private k2;
    k6: string;
    static readonly kx: number;
    private k1;
    k4: string;
    static readonly k0: number;
    private ku;
    kv: GroupSummaryDisplayMode;
    ju(a: string, b: any): void;
    gn(a: string): any;
    b(a: CellModelExport): CellModelExport;
    a8(a: DataSourceRowType): boolean;
}
/**
 * @hidden
 */
export declare class TemplateCellModel extends CellModel {
    static $t: Type;
    constructor();
    static readonly kq: number;
    private kr;
    ks: any;
    ju(a: string, b: any): void;
    gn(a: string): any;
    b(a: CellModelExport): CellModelExport;
}
/**
 * @hidden
 */
export declare class TextCellModel extends CellModel {
    static $t: Type;
    constructor();
    static readonly kq: number;
    private kr;
    ks: string;
    ju(a: string, b: any): void;
    gn(a: string): any;
    b(a: CellModelExport): CellModelExport;
}
/**
 * @hidden
 */
export declare class TextHeaderCellModel extends TextCellModel {
    static $t: Type;
    constructor();
    static readonly k5: number;
    private k0;
    k1: boolean;
    static readonly k6: number;
    private ky;
    kz: SortIndicatorStyle;
    static readonly k2: number;
    private ku;
    kv: ColumnOptionsIconAlignment;
    static readonly k4: number;
    private lc;
    ld: Brush;
    static readonly k3: number;
    private kw;
    kx: ColumnOptionsIconBehavior;
    ju(a: string, b: any): void;
    gn(a: string): any;
    b(a: CellModelExport): CellModelExport;
}
/**
 * @hidden
 */
export interface ICellPresenter {
    modelUpdated(a: CellModel): void;
    readonly isCanvasBased: boolean;
    readonly nativeCell: INativeCell;
}
/**
 * @hidden
 */
export declare let ICellPresenter_$type: Type;
/**
 * @hidden
 */
export declare class DataSourceNotificationBridge extends Base implements IDataSourceUpdateNotifier {
    static $t: Type;
    private a;
    constructor(a: Grid);
    rangeActualized(a: number, b: number): void;
    notifySetItem(a: number, b: any, c: any): void;
    notifyClearItems(): void;
    notifyInsertItem(a: number, b: any): void;
    notifyRemoveItem(a: number, b: any): void;
}
/**
 * @hidden
 */
export declare class ColumnController extends Base {
    static $t: Type;
    private i;
    private n;
    private c;
    private a;
    p: boolean;
    d: IDataSourceSchema;
    private u;
    b: string[];
    readonly j: GridColumnCollection;
    protected o: boolean;
    private m;
    k: IExternalGrid;
    t(): boolean;
    private l;
    private q;
    private e;
    constructor(a: GridColumnCollection, b: boolean, c: () => void);
    h(a: CellPath): Column;
    f(a: number): Column;
    g(a: string): Column;
    r(a: Column): boolean;
    s(a: Column): boolean;
}
/**
 * @hidden
 */
export declare class EditingManager extends Base {
    static $t: Type;
    private f;
    private c;
    private b;
    private e;
    n: number;
    m: number;
    j: boolean;
    private _item;
    item: any;
    readonly d: EditorCellModel;
    readonly a: CellModel;
    readonly l: number;
    k: boolean;
    constructor(a: Grid);
    v(a: CellModel): void;
    h(a: boolean, b: boolean): boolean;
    p(): void;
    t(a: string): void;
    u(a: CellModel): void;
    i(a: CellModel): boolean;
    private s;
    private g;
    private r;
    private q;
}
/**
 * @hidden
 */
export declare class Grid extends Base implements INotifyPropertyChanged {
    static $t: Type;
    private lm;
    lq: any;
    private _propertySetter;
    propertySetter: IPropertySetter;
    private ed;
    externalGrid: IExternalGrid;
    private eb;
    dragger: IDragger;
    columnExchangingAnimationCompleted: (sender: any, e: EventArgs) => void;
    columnExchangingAnimationCanceled: (sender: any, e: EventArgs) => void;
    q8(a: Column): void;
    q7(a: Column): void;
    columnShowingAnimationCompleted: (sender: any, e: EventArgs) => void;
    columnShowingAnimationCanceled: (sender: any, e: EventArgs) => void;
    o(a: CellModel): ColumnFilterCondition;
    p(a: CellModel): DataSourceSchemaPropertyType;
    rh(a: Column): void;
    filterExpressionsChanging: (sender: any, args: GridFilterExpressionsEventArgs) => void;
    filterExpressionsChanged: (sender: any, args: GridFilterExpressionsEventArgs) => void;
    pv(a: CellModel, b: ColumnFilterCondition): void;
    pu(a: CellModel, b: ColumnFilterCondition): void;
    rg(a: Column): void;
    columnMovingAnimationCompleted: (sender: any, e: EventArgs) => void;
    columnMovingAnimationCanceled: (sender: any, e: EventArgs) => void;
    re(a: Column): void;
    rd(a: Column): void;
    columnHidingAnimationCompleted: (sender: any, e: EventArgs) => void;
    columnHidingAnimationCanceled: (sender: any, e: EventArgs) => void;
    ra(a: Column): void;
    q9(a: Column): void;
    cellPreviewPointerDown: (sender: any, args: GridCellEventArgs) => void;
    q2(a: CellModel): void;
    cellPreviewPointerUp: (sender: any, args: GridCellEventArgs) => void;
    q3(a: CellModel): void;
    cellPointerDown: (sender: any, args: GridCellEventArgs) => void;
    q0(a: CellModel): void;
    cellPointerUp: (sender: any, args: GridCellEventArgs) => void;
    q1(a: CellModel): void;
    r4(a: number, b: string): void;
    cellClicked: (sender: any, args: GridCellEventArgs) => void;
    ru(a: CellModel): void;
    tj(a: number): void;
    private j3;
    rt(a: EditorCellModel): void;
    qt(a: CellModel): void;
    qr(a: CellModel, b: boolean, c: boolean, d: boolean): void;
    private si;
    private bt;
    bu: ColumnResizingMode;
    private bf;
    bg: ColumnMovingMode;
    d5: HoverManager;
    private gk;
    h4: boolean;
    private ua;
    u7: Brush;
    private t2;
    uz: Brush;
    private vu;
    v0: Thickness;
    vo: Point;
    aq: CellPath;
    private gc;
    qy(a: CellModel, b: number, c: number): void;
    qz(a: CellModel, b: number, c: number): void;
    qx(a: CellModel, b: number, c: number): void;
    private hb;
    private j6;
    private lb;
    qw(a: CellModel, b: number, c: number): void;
    ry(a: CellModel, b: number, c: number): void;
    private ke;
    private gm;
    private gl;
    private jd;
    private jk;
    private ji;
    private jj;
    private i3;
    private i8;
    private i9;
    private ja;
    private jb;
    private as;
    private ki;
    private kh;
    private gv;
    pq(): void;
    rs(a: CellPath, b: number, c: number, d: boolean): void;
    rp(a: any, b: DragSelectEventArgs): void;
    rn(a: any, b: DragSelectEventArgs): void;
    private ka;
    ld: number;
    private kj;
    private ej;
    private ro;
    private an;
    private i6;
    private jh;
    private je;
    private jf;
    private rq;
    private rr;
    private vq;
    private am;
    ap(a: number, b: number): CellModel;
    private au;
    private g4;
    private p0;
    private tm;
    constructor();
    sv(a: ColumnGroupDescription): void;
    sw(a: ColumnSummaryDescription): void;
    private tc;
    private p6;
    private hx;
    private p3;
    private tb;
    private ti;
    private b5;
    private gy;
    private s5;
    private s6;
    private g0;
    private s4;
    private s3;
    private gx;
    private se;
    private sf;
    private cj;
    ck: GridAnimationManager;
    private _delayedExecutionManager;
    delayedExecutionManager: IDelayedExecutionManager;
    private ek;
    readonly el: ResponsiveEngine;
    private d8;
    d9: IDataAdapter;
    private a1;
    a2: ColumnController;
    private dd;
    de: GridLayerController;
    private e5;
    e6: SpatialEngine;
    private c8;
    c9: GridEffectManager;
    private ez;
    e0: SelectionManager;
    private ai;
    aj: ActivationManager;
    private e3;
    e4: SortManager;
    cb: EditingManager;
    private fz;
    tickProvider: ITickProvider;
    private ex;
    ey: SectionHeader;
    private ev;
    ew: SectionFooter;
    private e7;
    e8: SummaryRowRoot;
    private e9;
    fa: SummaryRowSection;
    private et;
    eu: RowSeparator;
    private d1;
    d2: HeaderRowSeparator;
    private d3;
    d4: HeaderSeparator;
    private bv;
    bw: ColumnResizingSeparator;
    private bh;
    bi: ColumnMovingSeparator;
    private eh;
    ei: PinnedAreaSeparator;
    private b;
    f: string[];
    private c;
    g: string[];
    private fb;
    fc: VisibilityEngine;
    private _viewportManager;
    viewportManager: IViewportManager;
    private i5;
    jm: number;
    private i4;
    jl: number;
    private ff;
    fg: ControlDisplayDensity;
    private jz;
    kl: number;
    private kb;
    le: number;
    private b8;
    defaultColumnWidth: ColumnWidth;
    private i7;
    jn: number;
    private jy;
    kk: number;
    private j4;
    k6: number;
    private kg;
    lk: number;
    private ln;
    itemsSource: any;
    private kf;
    li: number;
    private kd;
    lh: number;
    private j2;
    kq: number;
    private dz;
    d0: HeaderClickAction;
    private ce;
    cf: EditModeType;
    private cc;
    cd: EditModeClickAction;
    private f4;
    g3: boolean;
    private kc;
    lg: number;
    private gj;
    hy: boolean;
    private hi;
    private b1;
    private bx;
    bz: ColumnShowingAnimationMode;
    readonly ho: boolean;
    private bo;
    columnPropertyUpdatingAnimationMode: ColumnPropertyUpdatingAnimationMode;
    protected readonly hj: boolean;
    readonly hf: boolean;
    private ak;
    al: CellDataLoadedAnimationMode;
    readonly h5: boolean;
    private er;
    es: RowSelectionAnimationMode;
    readonly h3: boolean;
    private eo;
    ep: RowHoverAnimationMode;
    readonly hg: boolean;
    private av;
    aw: CellSelectionAnimationMode;
    private cy;
    cz: GridColumnAnimationSettings;
    private cl;
    cm: GridAnimationSettings;
    hp(a: Column): boolean;
    private bs;
    private bq;
    br: ColumnResizingAnimationMode;
    private hq;
    private b2;
    private by;
    b0: ColumnShowingAnimationMode;
    private hm;
    private be;
    private bc;
    bd: ColumnMovingAnimationMode;
    private hl;
    private bb;
    private a9;
    ba: ColumnHidingAnimationMode;
    private hk;
    private a5;
    private a3;
    a4: ColumnExchangingAnimationMode;
    private vv;
    inset: Thickness;
    private ds;
    dt: GridSelectionMode;
    private cg;
    ch: GridActivationMode;
    private dq;
    dr: GridSelectionBehavior;
    private f8;
    hd: boolean;
    private ab;
    readonly ad: GridSelectedItemsCollection;
    private af;
    readonly ah: GridSelectedKeysCollection;
    private dl;
    readonly dm: GridSelectedCellsCollection;
    private di;
    readonly dj: GridSelectedCellRangesCollection;
    private f7;
    hc: boolean;
    private aa;
    readonly ac: GridSelectedItemsCollection;
    private ae;
    readonly ag: GridSelectedKeysCollection;
    private te;
    private gb;
    hn: boolean;
    private gh;
    hu: boolean;
    private gi;
    hv: boolean;
    private tw;
    ut: Brush;
    private ug;
    vd: Brush;
    private uj;
    vg: Brush;
    private un;
    vk: Brush;
    private jg;
    jp: number;
    private fi;
    fq: FontInfo;
    private jc;
    jo: number;
    private t1;
    uy: Brush;
    private ui;
    vf: Brush;
    private t9;
    u6: Brush;
    private t8;
    u5: Brush;
    private cv;
    private cu;
    cw: GridCellPosition;
    private tv;
    us: Brush;
    private tx;
    uu: Brush;
    private t6;
    u3: Brush;
    private e1;
    e2: SortIndicatorStyle;
    private fh;
    fp: FontInfo;
    private uf;
    vc: Brush;
    private uh;
    ve: Brush;
    private fk;
    fs: FontInfo;
    private fl;
    ft: FontInfo;
    private fn;
    fv: FontInfo;
    private um;
    vj: Brush;
    private fm;
    fu: FontInfo;
    private fo;
    fw: FontInfo;
    private uq;
    vn: Brush;
    private uk;
    vh: Brush;
    private uo;
    vl: Brush;
    private ul;
    vi: Brush;
    private up;
    vm: Brush;
    private j9;
    lc: number;
    private j5;
    la: number;
    km(a: number): number;
    private t5;
    u2: Brush;
    private t3;
    u0: Brush;
    private t7;
    u4: Brush;
    private fj;
    fr: FontInfo;
    private ub;
    u8: Brush;
    private t4;
    u1: Brush;
    private ue;
    vb: Brush;
    private uc;
    u9: Brush;
    private ud;
    va: Brush;
    private j1;
    kp: number;
    private j0;
    kn: number;
    private t0;
    ux: Brush;
    private ty;
    uv: Brush;
    private gu;
    iv: boolean;
    private bj;
    bk: ColumnOptionsIconAlignment;
    private tz;
    uw: Brush;
    private bl;
    bm: ColumnOptionsIconBehavior;
    private tu;
    border: Brush;
    private vt;
    vz: Thickness;
    private vr;
    vw: Thickness;
    private vs;
    vx: Thickness;
    private go;
    h7: boolean;
    private tp;
    tt: CornerRadius;
    private to;
    ts: CornerRadius;
    private tn;
    tq: CornerRadius;
    private ga;
    he: boolean;
    private fx;
    platformPixelConverter: IPlatformPixelConverter;
    private d6;
    renderingEngine: ICellRenderingEngine;
    private r1;
    private em;
    readonly en: ResponsiveStatesCollection;
    private fd;
    model: VisualModel;
    readonly vp: Rect;
    private b3;
    private a6;
    private u;
    private b6;
    readonly b4: ColumnSortDescriptionCollection;
    readonly a7: ColumnGroupDescriptionCollection;
    sortDescriptionsChanged: (sender: any, args: GridSortDescriptionsChangedEventArgs) => void;
    groupDescriptionsChanged: (sender: any, args: GridGroupDescriptionsChangedEventArgs) => void;
    columnHiddenChanged: (sender: any, args: ColumnHiddenChangedEventArgs) => void;
    columnPinnedChanged: (sender: any, args: ColumnPinnedChangedEventArgs) => void;
    cellValueChanging: (sender: any, args: GridCellValueChangingEventArgs) => void;
    dataCommitted: (sender: any, e: GridDataCommittedEventArgs) => void;
    dataCommitting: (sender: any, e: GridDataCommittingEventArgs) => void;
    readonly v: FilterExpressionCollection;
    readonly b7: ColumnSummaryDescriptionCollection;
    private gw;
    private s;
    t: DataSourceSummaryScope;
    private ge;
    private gd;
    hs: boolean;
    private f5;
    private q;
    r: DataSourceSectionHeaderDisplayMode;
    private gg;
    private gf;
    ht: boolean;
    private f6;
    private dx;
    dy: GroupSummaryDisplayMode;
    private f3;
    g2: boolean;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    protected rz(a: string, b: any, c: any): void;
    su(): void;
    sl(): void;
    sm(): void;
    p5(): void;
    private gt;
    ip: boolean;
    sk(): void;
    p4(): void;
    private y;
    private w;
    actualDataSource: IDataSource;
    private d;
    l: string[];
    private a;
    e: string[];
    private f2;
    g1: boolean;
    protected sg(a: string, b: any, c: any): void;
    private tg;
    private tr;
    private vy;
    syncBorder(): void;
    private rm;
    private m;
    private n;
    private h;
    private sx;
    private p7;
    private p8;
    private sy;
    private p9;
    private pz;
    private py;
    private rl;
    qk(): void;
    sizeChanged: (sender: any, e: GridSizeChangedEventArgs) => void;
    onSizeChanged(a: number, b: number): void;
    viewportChanged: (sender: any, e: GridViewportChangedEventArgs) => void;
    private j7;
    private j8;
    i0: boolean;
    notifyScrollStart(): void;
    notifyScrollStop(): void;
    setViewport(a: number, b: number, c: number, d: number): void;
    readonly actualColumns: GridColumnCollection;
    actualColumnsChanged: (sender: any, args: GridColumnsChangedEventArgs) => void;
    private c0;
    readonly columns: GridColumnCollection;
    rx(a: CellModel, b: any, c: any): void;
    rw(a: CellModel, b: any, c: any, d: string): void;
    a0(a: CellPath): Column;
    qa(a: Column): void;
    p2(a: Column, b: Column): void;
    private pk;
    private gn;
    private ri;
    private rf;
    private rb;
    private pt;
    private r7;
    private pw;
    sd(a: Column, b: PinnedPositions): void;
    private iy;
    private iz;
    qf(a: number, b: number): void;
    qg(a: number): void;
    qh(a: number): void;
    g6(a: number): boolean;
    g7(a: number): boolean;
    private h6;
    private ay;
    private ax;
    private rc;
    private ps;
    private th;
    private ca;
    nc(a: CellPath, b: Grid, c: any, d: number): string;
    ao(a: CellPath, b: string): CellModel;
    lp(): any;
    nb(): string;
    eq(a: number): RowPath;
    private f1;
    s2(a: number): void;
    s1(a: number): void;
    it(a: any): boolean;
    iu(a: any[]): boolean;
    sz(a: number): void;
    private s0;
    iw(a: Column): boolean;
    rk(a: number, b: number): void;
    private pr;
    private ku;
    private is;
    k2(): number;
    ky(): number;
    kw(): number;
    k0(): number;
    sb(): void;
    hh: boolean;
    hw: boolean;
    readonly h1: boolean;
    readonly h2: boolean;
    readonly hz: boolean;
    readonly h0: boolean;
    private iq;
    private ir;
    r5(a: any, b: PrimaryKeyValue): void;
    r6(a: any, b: PrimaryKeyValue): void;
    r8(a: number, b: any, c: PrimaryKeyValue): void;
    private gz;
    qq(a: number, b: string): void;
    qs(a: number, b: string): void;
    h8(a: boolean, b: boolean): boolean;
    h9(a: boolean, b: boolean): boolean;
    private kz;
    private kv;
    private k4;
    private k3;
    private kt;
    private po;
    id(a: boolean, b: boolean): boolean;
    ie(a: boolean, b: boolean): boolean;
    ig(a: boolean, b: boolean): boolean;
    ih(a: boolean, b: boolean): boolean;
    ii(a: boolean, b: boolean): boolean;
    ij(a: boolean, b: boolean): boolean;
    sc(): void;
    ik(a: boolean, b: boolean): boolean;
    ia(a: boolean, b: boolean): boolean;
    ib(): boolean;
    ic(): boolean;
    ar: CellPath;
    i1(): boolean;
    ix(a: CellModel): boolean;
    ha(a: boolean, b?: boolean): boolean;
    p1(a: boolean): void;
    q4(a: PrimaryKeyValue, b: number): void;
    q5(a: PrimaryKeyValue, b: number): void;
    columnsAutoGenerated: (sender: any, args: GridColumnsAutoGeneratedEventArgs) => void;
    selectedItemsChanged: (sender: any, args: GridSelectedItemsChangedEventArgs) => void;
    selectedKeysChanged: (sender: any, args: GridSelectedKeysChangedEventArgs) => void;
    selectedCellsChanged: (sender: any, args: GridSelectedCellsChangedEventArgs) => void;
    activeCellChanged: (sender: any, args: GridActiveCellChangedEventArgs) => void;
    selectedCellRangesChanged: (sender: any, args: GridSelectedCellRangesChangedEventArgs) => void;
    pn(a: any, b: PrimaryKeyValue): void;
    tl(a: number, b: any, c: PrimaryKeyValue): void;
    st(a: any, b: PrimaryKeyValue): void;
    private at;
    pm(a: number, b: number, c: number, d: number): void;
    pl(a: CellRange): void;
    sq(a: CellRange): void;
    sp(): void;
    private qi;
    r9(a: number, b: any, c: any): void;
    private qb;
    q6(): void;
    qe(): void;
    private qc;
    private kx;
    private k1;
    private qd;
    private f9;
    sh(): void;
    rv(a: number, b: any): void;
    r0(a: number, b: any): void;
    s7(a: string): void;
    s8(a: ResponsiveState): void;
    qp(a: number, b: any, c: any): void;
    qj(): void;
    ql(a: number, b: any): void;
    qm(a: number, b: any): void;
    kr(a: any): number;
    ks(a: any[]): number;
    i(): string[];
    ls(a: CellKey): any;
    lt(a: number, b: number): any;
    az(a: number): Column;
    j(): ISummaryResult[];
    k(a: number): ISummaryResult[][];
    private gs;
    io: boolean;
    private gr;
    im: boolean;
    private gq;
    il: boolean;
    z(a: Column): IFilterExpression;
    i2(a: CellModel, b: any): boolean;
    private lo;
    columnWidthChanged: (sender: any, args: GridColumnWidthChangedEventArgs) => void;
    private rj;
    cellEditStarted: (sender: any, args: GridCellEditStartedEventArgs) => void;
    private qv;
    cellEditEnded: (sender: any, args: GridCellEditEndedEventArgs) => void;
    private qu;
    rowEditStarted: (sender: any, args: GridRowEditStartedEventArgs) => void;
    private r3;
    rowEditEnded: (sender: any, args: GridRowEditEndedEventArgs) => void;
    private r2;
    private hr;
    readonly g9: boolean;
    readonly g8: boolean;
    readonly g5: boolean;
    px(): void;
    pp(): void;
    pi(a: number): void;
    sn(a: number): void;
    tf(): void;
    sj(): void;
    tk(a: any[], b: string, c: any): void;
    ss(a: any[]): void;
    sr(a: any): void;
    private gp;
    pj(a: number): void;
    so(a: number): void;
    s9(a: number, b: string): void;
}
/**
 * @hidden
 */
export declare class GridColumnsAutoGeneratedEventArgs extends EventArgs {
    static $t: Type;
    private _columns;
    columns: GridColumnCollection;
}
/**
 * @hidden
 */
export declare class GridColumnsChangedEventArgs extends EventArgs {
    static $t: Type;
    private _columns;
    columns: GridColumnCollection;
}
/**
 * @hidden
 */
export declare class GridSelectedCellsChangedEventArgs extends EventArgs {
    static $t: Type;
    private _currentCells;
    currentCells: GridSelectedCellsCollection;
    private _addedCells;
    addedCells: GridSelectedCellsCollection;
    private _removedCells;
    removedCells: GridSelectedCellsCollection;
}
/**
 * @hidden
 */
export declare class GridCellEventArgs extends EventArgs {
    static $t: Type;
    private _cellInfo;
    cellInfo: CellModel;
    private _grid;
    grid: Grid;
}
/**
 * @hidden
 */
export declare class ColumnHiddenChangedEventArgs extends Base {
    static $t: Type;
    a: Column;
    b: boolean;
}
/**
 * @hidden
 */
export declare class ColumnPinnedChangedEventArgs extends Base {
    static $t: Type;
    a: Column;
    b: PinnedPositions;
}
/**
 * @hidden
 */
export declare class GridCellValueChangingEventArgs extends Base {
    static $t: Type;
    c: number;
    private _cellInfo;
    cellInfo: CellModel;
    b: Column;
    e: any;
    d: any;
}
/**
 * @hidden
 */
export declare class GridColumnWidthChangedEventArgs extends Base {
    static $t: Type;
    a: Column;
    b: ColumnWidth;
}
/**
 * @hidden
 */
export declare class GridCellEditStartedEventArgs extends Base {
    static $t: Type;
    a: Column;
    b: number;
    private _item;
    item: any;
}
/**
 * @hidden
 */
export declare class GridCellEditEndedEventArgs extends Base {
    static $t: Type;
    a: Column;
    b: number;
    private _item;
    item: any;
}
/**
 * @hidden
 */
export declare class GridAnimationManager extends Base {
    static $t: Type;
    constructor();
    readonly h: GridColumnAnimationSettings;
    private static o;
    protected p(): number;
    private l;
    private i;
    ar(): void;
    m(): List$1<number>;
    animationCreated: (sender: any, args: GridAnimationManagerAnimationCreatedEventArgs) => void;
    animationCompleted: (sender: any, args: GridAnimationManagerAnimationCompletedEventArgs) => void;
    animationCanceled: (sender: any, args: GridAnimationManagerAnimationCanceledEventArgs) => void;
    protected w(a: number): void;
    protected u(a: number): void;
    protected v(a: number): void;
    private g;
    private f;
    aq(a: Grid, b: GridColumnAnimationSettings, c: ColumnInfo, d: boolean, e: ColumnStates): void;
    private k;
    ai(a: Grid, b: GridColumnAnimationSettings, c: ColumnInfo, d: ColumnInfo, e: ColumnStates): void;
    private x;
    private t;
    private s;
    private j;
    ag(a: Grid, b: GridColumnAnimationSettings, c: ColumnInfo, d: number): void;
    ak(a: Grid, b: GridColumnAnimationSettings, c: ColumnInfo, d: ColumnStates): void;
    private static as;
    private q;
    private n;
    aj(a: Grid, b: GridColumnAnimationSettings, c: ColumnInfo, d: boolean, e: ColumnStates): void;
    r(a: Grid, b: ColumnInfo, c: string, d: CellPropertyAnimationType, e: any, f: any, g: boolean, h: boolean, i: boolean, j: boolean): void;
    private e;
    al(a: Grid, b: number, c: number): void;
    private d;
    ah(a: Grid, b: ColumnInfo): void;
    y(a: Grid, b: number, c: number, d: boolean): void;
    af(a: Grid, b: number, c: number, d: number, e: boolean): void;
    an(a: Grid, b: number): void;
    ap(a: Grid, b: number): void;
    ad(a: Grid, b: number, c: number, d: number): void;
    z(a: Grid, b: number, c: number, d: number): void;
    ae(a: Grid, b: number, c: number, d: number): void;
    aa(a: Grid, b: number, c: number, d: number): void;
    ab(a: Grid, b: number, c: number): void;
    ac(a: Grid, b: number, c: number): void;
    am(a: Grid, b: number): void;
    ao(a: Grid, b: number): void;
}
/**
 * @hidden
 */
export declare class CellKey extends Base {
    static $t: Type;
    private e;
    private g;
    private i;
    private a;
    private c;
    primaryKey: PrimaryKeyValue;
    h: any;
    j: string;
    readonly b: Column;
    d: Grid;
}
/**
 * @hidden
 */
export declare class GridSelectedCellsCollection extends ObservableCollection$1<CellKey> {
    static $t: Type;
    constructor();
    an(a: (sender: any, e: NotifyCollectionChangedEventArgs) => void): void;
    ao(a: (sender: any, e: NotifyCollectionChangedEventArgs) => void): void;
    readonly am: IList$1<CellKey>;
    ai(a: PrimaryKeyValue, b: number): CellKey;
    aj(a: PrimaryKeyValue, b: string): CellKey;
    ak(a: any, b: string): CellKey;
    ae(a: PrimaryKeyValue, b: Column): CellKey;
    af(a: PrimaryKeyValue, b: string): CellKey;
    ag(a: any, b: Column): CellKey;
    ah(a: any, b: string): CellKey;
    al(a: PrimaryKeyValue, b: number): CellKey;
}
/**
 * @hidden
 */
export declare abstract class DefinitionBase extends Base implements INotifyPropertyChanged {
    static $t: Type;
    constructor();
    private bl;
    private t;
    externalObject: any;
    private dr;
    d7: Brush;
    private ds;
    d8: Brush;
    private dh;
    dy: Brush;
    private dt;
    d9: Brush;
    private dk;
    d1: Brush;
    private a2;
    be: number;
    private a4;
    bg: number;
    private a3;
    bf: number;
    private a1;
    bd: number;
    private ay;
    ba: number;
    private a0;
    bc: number;
    private az;
    bb: number;
    private ax;
    a9: number;
    private a6;
    bi: number;
    private a8;
    bk: number;
    private a7;
    bj: number;
    private a5;
    bh: number;
    private r;
    grid: Grid;
    private c0;
    protected cz(a: Grid, b: Grid): void;
    protected c1(a: any, b: PropertyChangedEventArgs): void;
    private dj;
    d0: Brush;
    private di;
    dz: Brush;
    private dl;
    d2: Brush;
    private dw;
    ej: Brush;
    private dp;
    d5: Brush;
    private dv;
    ei: Brush;
    private dn;
    d4: Brush;
    private du;
    eh: Brush;
    private dm;
    d3: Brush;
    private ar;
    au: number;
    private b;
    e: CellContentHorizontalAlignment;
    private g;
    j: CellContentVerticalAlignment;
    private a;
    c: CellContentHorizontalAlignment;
    private f;
    h: CellContentVerticalAlignment;
    private w;
    y: TextCellLineBreakMode;
    private v;
    x: TextCellLineBreakMode;
    private dx;
    ek: Brush;
    private dq;
    d6: Brush;
    private as;
    aw: number;
    private aq;
    at: number;
    private ac;
    textStyle: FontInfo;
    private ab;
    ad: FontInfo;
    k(a: CellPath, b: string): CellModel;
    protected abstract l(a: CellPath): CellModel;
    cl(a: CellPath, b: Grid, c: any, d: number): string;
    protected abstract cm(a: CellPath, b: Grid, c: any): string;
    cw(a: CellModel, b: Grid, c: any, d: any): void;
    cx(a: CellModel, b: Grid, c: any, d: any): void;
    private n;
    dataBinding: (sender: any, args: DataBindingEventArgs) => void;
    dataBound: (sender: any, args: DataBindingEventArgs) => void;
    cy(a: CellModel, b: Grid, c: any, d: any): void;
    c5(): void;
    protected aj(a: string): boolean;
    protected ak(a: string): boolean;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    protected c2(a: string, b: CellPropertyAnimationType, c: any, d: any): void;
    protected c8(): void;
    protected df(): void;
    protected dg(): void;
    protected dd(): void;
    protected dc(): void;
    protected de(): void;
    protected db(): void;
    protected c3(a: string, b: CellPropertyAnimationType, c: any, d: any): void;
    private ag;
    protected c9(): void;
    private c7;
    private da;
    private am;
    private ao;
    private al;
    protected readonly an: HashSet$1<string>;
    protected readonly ap: List$1<string>;
    private cv;
    protected d(): CellContentHorizontalAlignment;
    protected i(): CellContentVerticalAlignment;
    protected eg(): Brush;
    protected ea(): Brush;
    protected af(): FontInfo;
    protected eb(): Brush;
    protected ef(): Brush;
    protected ed(): Brush;
    protected ec(): Brush;
    protected ee(): Brush;
    protected av(): number;
    definitionPropertyUpdated: (sender: any, args: DefinitionPropertyUpdatedEventArgs) => void;
    private z;
    c6(a: string, b: CellPropertyAnimationType, c: any): void;
    ai(): boolean;
    readonly aa: FastIterationDictionary$2<string, any>;
    ah(a: string): boolean;
    c4(a: string): void;
    bn(a: string): any;
    ck(a: any, b: DataSourceSchemaPropertyType, c: any): string;
    u(a: ColumnSummaryDescription, b: ISummaryResult): SummaryData;
    cellStyleKeyRequested: (sender: any, args: CellStyleRequestedEventArgs) => void;
}
/**
 * @hidden
 */
export declare abstract class Column extends DefinitionBase {
    static $t: Type;
    constructor();
    protected jl(): Brush;
    protected jk(): Brush;
    private static g1;
    g2: number;
    private e7;
    e8: ColumnStates;
    private gr;
    gy: number;
    private gt;
    g0: number;
    private gs;
    gz: number;
    private gq;
    gx: number;
    private ha;
    id: string;
    private go;
    gv: number;
    private gn;
    gu: number;
    private gp;
    gw: number;
    private fh;
    fj: PinnedPositions;
    private g8;
    hy: string;
    private g9;
    h2: string;
    private g6;
    hh: string;
    private jd;
    jn: Brush;
    private i9;
    jh: Brush;
    private jc;
    jm: Brush;
    private i8;
    jg: Brush;
    private fd;
    fe: GridColumnAnimationSettings;
    private e9;
    width: ColumnWidth;
    private gj;
    gm: number;
    private fy;
    gc: boolean;
    private fu;
    f8: boolean;
    private f1;
    gf: boolean;
    private en;
    eo: ColumnFilterCondition;
    private ff;
    header: Header;
    private fx;
    gb: boolean;
    private f0;
    ge: boolean;
    private fz;
    gd: boolean;
    private f2;
    gg: boolean;
    private e5;
    e6: ColumnSortDirection;
    private fi;
    fk: PinnedPositions;
    private ft;
    f7: boolean;
    readonly f4: boolean;
    private ev;
    ex: ColumnOptionsIconAlignment;
    private ew;
    ey: ColumnOptionsIconAlignment;
    private i6;
    je: Brush;
    private ja;
    ji: Brush;
    private e0;
    e2: ColumnOptionsIconBehavior;
    private ez;
    e1: ColumnOptionsIconBehavior;
    private fr;
    f3: boolean;
    private fv;
    f9: boolean;
    private fw;
    ga: boolean;
    private jb;
    jj: Brush;
    private i7;
    jf: Brush;
    private gi;
    gl: number;
    private gh;
    gk: number;
    private fo;
    textEditStyle: FontInfo;
    private fn;
    fp: FontInfo;
    private fb;
    fc: EditorType;
    private g3;
    g4: any;
    private g7;
    hu: string;
    private el;
    em: string[];
    protected ed(): Brush;
    protected ef(): Brush;
    cy(a: CellModel, b: Grid, c: any, d: any): void;
    cw(a: CellModel, b: Grid, c: any, d: any): void;
    protected c3(a: string, b: CellPropertyAnimationType, c: any, d: any): void;
    protected eq(): CellContentVerticalAlignment;
    protected ep(): CellContentHorizontalAlignment;
    private i3;
    private is;
    protected cz(a: Grid, b: Grid): void;
    protected c1(a: any, b: PropertyChangedEventArgs): void;
    i4(): void;
    i5(): void;
    protected c8(): void;
    protected df(): void;
    protected dg(): void;
    protected dd(): void;
    protected i0(): void;
    protected i2(): void;
    protected i1(): void;
    protected dc(): void;
    protected de(): void;
    protected db(): void;
    protected iw(): void;
    protected iz(): void;
    protected iy(): void;
    protected ix(): void;
    columnCellsPropertyUpdating: (column: Column, propertyName: string, propertyAnimationType: CellPropertyAnimationType, oldValue: any, newValue: any) => void;
    columnHeaderCellsPropertyUpdating: (column: Column, propertyName: string, propertyAnimationType: CellPropertyAnimationType, oldValue: any, newValue: any) => void;
    protected iv(a: string, b: CellPropertyAnimationType, c: any, d: any): void;
    eu(): ColumnHidingAnimationMode;
    e4(): ColumnShowingAnimationMode;
    et(): ColumnExchangingAnimationMode;
    e3(): ColumnResizingAnimationMode;
    h0(): string;
    private fl;
    private fs;
    iu(a: string, b: CellPropertyAnimationType, c: any): void;
    f6(): boolean;
    readonly fm: FastIterationDictionary$2<string, any>;
    f5(a: string): boolean;
    it(a: string): void;
    g5(a: string): any;
}
/**
 * @hidden
 */
export declare class GridColumnCollection extends ObservableCollection$1<Column> {
    static $t: Type;
    constructor();
}
/**
 * @hidden
 */
export declare class GridEffectGroup extends Base {
    static $t: Type;
    private c;
    private f;
    private a;
    private b;
    effectsFinished: (sender: any, e: EventArgs) => void;
    effectsCanceled: (sender: any, e: EventArgs) => void;
    constructor(a: number, b: boolean);
    constructor(a: number);
    constructor(a: number, ..._rest: any[]);
    k(): void;
    g(a: GridEffect): void;
    private h;
    private i;
    protected j(): void;
}
/**
 * @hidden
 */
export declare class HoverManager extends Base {
    static $t: Type;
    private a;
    private b;
    private d;
    private e;
    constructor(a: Grid);
    f(a: number): void;
    c(a: number): boolean;
}
/**
 * @hidden
 */
export declare class RecyclingManager extends Base {
    static $t: Type;
    private b;
    constructor();
    a(a: string): CellModel;
    c(a: CellModel): void;
}
/**
 * @hidden
 */
export declare class ActivationManager extends Base {
    static $t: Type;
    private a;
    private b;
    private c;
    private e;
    private d;
    private f;
    private k;
    private l;
    private q;
    private s;
    private p;
    private readonly g;
    private readonly i;
    private readonly h;
    private readonly j;
    constructor(a: Grid, b: GridAnimationManager);
    ai(a: CellModel): void;
    m(a: CellModel): boolean;
    private n;
    private o;
    aa(): void;
    private ac;
    x(a: CellModel): void;
    w(a: CellPath): void;
    y(a: number, b: string): void;
    private v;
    private u;
    private ab;
    ae(): void;
    af(a: number): void;
    ag(a: number): void;
    private t;
    ah(a: number): void;
    ad(): void;
    private z;
    r(): number;
}
/**
 * @hidden
 */
export declare class SelectionManager extends Base {
    static $t: Type;
    private a;
    private b;
    private f;
    private e;
    private c;
    private d;
    private i;
    private readonly g;
    private readonly h;
    private r;
    private q;
    private j;
    constructor(a: Grid, b: GridAnimationManager);
    an(a: CellModel): void;
    am(a: CellModel): void;
    o(a: CellModel): boolean;
    private m;
    private k;
    private n;
    private l;
    private aq;
    private aj;
    private ak;
    private al;
    private as;
    private ar;
    private ai;
    private ah;
    private ag;
    private ap;
    private ao;
    private s;
    av(): void;
    au(): void;
    at(): void;
    private u;
    private p;
    z(): void;
    ad(a: number): void;
    ae(a: number): void;
    ac(a: number, b: Column): void;
    aa(a: number, b: Column): void;
    ab(a: number, b: number, c: Column): void;
    private t;
    af(a: number): void;
    w(): void;
    private v;
    private y;
    private x;
}
/**
 * @hidden
 */
export declare class SortManager extends Base {
    static $t: Type;
    private c;
    private e;
    constructor(a: Grid);
    d(a: Column): boolean;
    f(a: Column, b: ColumnSortDirection): boolean;
    private g;
    h(): void;
    private a;
    private b;
}
/**
 * @hidden
 */
export interface IDataAdapter {
    setDataSource(a: IDataSource): void;
    getItemForKey(a: PrimaryKeyValue): any;
    getItemKey(a: string[], b: any): PrimaryKeyValue;
    getRowKey(a: string[], b: number): PrimaryKeyValue;
    getRowCount(): number;
    getSectionCount(): number;
    getStickyRows(): number[];
    getStickyRowsInRange(a: number, b: number): number[];
    getStickRowPriority(a: number): number;
    isExclusivelySticky(a: number): boolean;
    pinRow(a: PrimaryKeyValue): void;
    unpinRow(a: PrimaryKeyValue): void;
    clearPinnedRows(): void;
    isRowPinned(a: number): boolean;
    firstVisibleIndexRequested: number;
    lastVisibleIndexRequested: number;
    indexOfKey(a: PrimaryKeyValue): number;
    fastGetItemIndexForKey(a: string[], b: PrimaryKeyValue, c: number, d: number): number;
    indexOfVisibleItemByKey(a: string[], b: PrimaryKeyValue, c: number, d: number): number;
    getDataRow(a: CellPath): number;
    resolveValue(a: number, b: string): any;
    resolveValueForPath(a: Grid, b: CellPath): any;
    resolveRow(a: number): any;
    resolveValueForDataRow(a: number): any;
    resolveValueForRow(a: CellPath): any;
    getSectionForRow(a: number): number;
    getRowPathForRow(a: number): RowPath;
    isPlaceholderValue(a: CellPath): boolean;
    isPlaceholderItem(a: number): boolean;
    getRowType(a: number): DataSourceRowType;
    isRowSpanning(a: DataSourceRowType): boolean;
    getRowIndent(a: number): number;
    getRootSummaryRowCount(): number;
    isEditedValue(a: any, b: string): boolean;
    isDeletedRow(a: any): boolean;
    getPendingEditID(a: any, b: string): number;
    getError(a: number): string;
}
/**
 * @hidden
 */
export declare let IDataAdapter_$type: Type;
/**
 * @hidden
 */
export declare class DataAdapter extends Base implements INotifyPropertyChanged, IDataAdapter {
    static $t: Type;
    private a;
    private h;
    private i;
    g: ColumnController;
    constructor(a: ColumnController);
    private b;
    c: IDataSource;
    private d;
    e: IEditableDataSource;
    setDataSource(a: IDataSource): void;
    getItemForKey(a: PrimaryKeyValue): any;
    getItemKey(a: string[], item_: any): PrimaryKeyValue;
    getRowKey(a: string[], b: number): PrimaryKeyValue;
    private n;
    protected o(a: string, b: any, c: any): void;
    getRowCount(): number;
    m(a: PrimaryKeyValue, b: any): number;
    indexOfKey(a: PrimaryKeyValue): number;
    fastGetItemIndexForKey(a: string[], b: PrimaryKeyValue, c: number, d: number): number;
    indexOfVisibleItemByKey(a: string[], b: PrimaryKeyValue, c: number, d: number): number;
    l(a: number): number;
    getSectionCount(): number;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    private f;
    getDataRow(a: CellPath): number;
    resolveValue(a: number, b: string): any;
    resolveValueForPath(a: Grid, b: CellPath): any;
    resolveRow(a: number): any;
    resolveValueForDataRow(a: number): any;
    resolveValueForRow(a: CellPath): any;
    getSectionForRow(a: number): number;
    getRowPathForRow(a: number): RowPath;
    private j;
    firstVisibleIndexRequested: number;
    private k;
    lastVisibleIndexRequested: number;
    isPlaceholderValue(a: CellPath): boolean;
    isPlaceholderItem(a: number): boolean;
    getRowType(a: number): DataSourceRowType;
    getStickyRows(): number[];
    getStickyRowsInRange(a: number, b: number): number[];
    getStickRowPriority(a: number): number;
    isExclusivelySticky(a: number): boolean;
    isRowSpanning(a: DataSourceRowType): boolean;
    pinRow(a: PrimaryKeyValue): void;
    unpinRow(a: PrimaryKeyValue): void;
    clearPinnedRows(): void;
    isRowPinned(a: number): boolean;
    getRowIndent(a: number): number;
    getRootSummaryRowCount(): number;
    isEditedValue(a: any, b: string): boolean;
    isDeletedRow(a: any): boolean;
    getPendingEditID(a: any, b: string): number;
    getError(a: number): string;
}
/**
 * @hidden
 */
export declare class ColumnMovingSeparator extends DefinitionBase {
    static $t: Type;
    protected cm(a: CellPath, b: Grid, c: any): string;
    protected l(a: CellPath): CellModel;
    protected eb(): Brush;
    private el;
    em: number;
    protected cz(a: Grid, b: Grid): void;
    protected c8(): void;
    protected c1(a: any, b: PropertyChangedEventArgs): void;
}
/**
 * @hidden
 */
export declare class ComboBoxColumn extends Column {
    static $t: Type;
    constructor();
    private jp;
    jq: IDataSource;
    jr: any;
    jv: string;
    jo: string[];
    protected l(a: CellPath): CellModel;
    protected cm(a: CellPath, b: Grid, c: any): string;
    protected cz(a: Grid, b: Grid): void;
    cy(a: CellModel, b: Grid, c: any, d: any): void;
    cw(a: CellModel, b: Grid, c: any, d: any): void;
    protected c3(a: string, b: CellPropertyAnimationType, c: any, d: any): void;
    private jw;
    private jx;
    private jt;
    ju(a: any): string;
}
/**
 * @hidden
 */
export declare class DateTimeColumn extends Column {
    static $t: Type;
    private jr;
    private js;
    jt: DateTimeFormats;
    private jz;
    j4: string;
    private jo;
    jq: any[];
    private jw;
    jy: any;
    ju: EditorType;
    jx: any;
    j1: string;
    jp: string[];
    protected c3(a: string, b: CellPropertyAnimationType, c: any, d: any): void;
    constructor();
    protected l(a: CellPath): CellModel;
    protected cm(a: CellPath, b: Grid, c: any): string;
    cy(a: CellModel, b: Grid, c: any, d: any): void;
    cw(a: CellModel, b: Grid, c: any, d: any): void;
    private jv;
}
/**
 * @hidden
 */
export interface IExternalDefinitionBase {
    resolveStyleKey(a: string, b: CellPath, c: Grid, d: any): string;
}
/**
 * @hidden
 */
export declare let IExternalDefinitionBase_$type: Type;
/**
 * @hidden
 */
export declare class DataBindingEventArgs extends EventArgs {
    static $t: Type;
    private _resolvedValue;
    resolvedValue: any;
    private _rowObject;
    rowObject: any;
    private _cellInfo;
    cellInfo: CellModel;
}
/**
 * @hidden
 */
export declare abstract class Header extends DefinitionBase {
    static $t: Type;
    constructor();
    protected eg(): Brush;
    protected eb(): Brush;
    protected fa(): Brush;
    protected af(): FontInfo;
    protected cz(a: Grid, b: Grid): void;
    protected c8(): void;
    protected df(): void;
    protected dg(): void;
    protected e5(): void;
    protected e6(): void;
    protected c1(a: any, b: PropertyChangedEventArgs): void;
    private e8;
    fb: Brush;
    private e7;
    e9: Brush;
    private em;
    eo: SortIndicatorStyle;
    private el;
    en: SortIndicatorStyle;
    private eq;
    eu: number;
    private es;
    ew: number;
    private er;
    ev: number;
    private ep;
    et: number;
    protected ak(a: string): boolean;
    cw(a: CellModel, b: Grid, c: any, d: any): void;
    cy(a: CellModel, b: Grid, c: any, d: any): void;
}
/**
 * @hidden
 */
export declare class ColumnResizingSeparator extends DefinitionBase {
    static $t: Type;
    protected cm(a: CellPath, b: Grid, c: any): string;
    protected l(a: CellPath): CellModel;
    protected eb(): Brush;
    protected cz(a: Grid, b: Grid): void;
    protected c8(): void;
    protected el(a: any, b: PropertyChangedEventArgs): void;
}
/**
 * @hidden
 */
export declare class HeaderSeparator extends DefinitionBase {
    static $t: Type;
    protected cm(a: CellPath, b: Grid, c: any): string;
    protected l(a: CellPath): CellModel;
    protected eb(): Brush;
    protected el(): number;
    protected cz(a: Grid, b: Grid): void;
    protected c1(a: any, b: PropertyChangedEventArgs): void;
    protected c8(): void;
    private em;
    cw(a: CellModel, b: Grid, c: any, d: any): void;
}
/**
 * @hidden
 */
export declare class ImageColumn extends Column {
    static $t: Type;
    private js;
    jt: ImageStretchOptions;
    private jq;
    jr: ImageResourceType;
    jp: EditorType;
    ju: any;
    jv: string;
    jo: string[];
    constructor();
    protected i(): CellContentVerticalAlignment;
    protected ep(): CellContentHorizontalAlignment;
    protected eq(): CellContentVerticalAlignment;
    protected d(): CellContentHorizontalAlignment;
    protected l(a: CellPath): CellModel;
    protected cm(a: CellPath, b: Grid, c: any): string;
    cy(a: CellModel, b: Grid, c: any, d: any): void;
    cw(a: CellModel, b: Grid, c: any, d: any): void;
    private jw;
}
/**
 * @hidden
 */
export declare class NumericColumn extends Column {
    static $t: Type;
    constructor();
    protected d(): CellContentHorizontalAlignment;
    private j5;
    kh: string;
    private j7;
    kl: string;
    private j6;
    kj: string;
    private j8;
    kn: string;
    private jv;
    jy: number;
    private jw;
    jz: number;
    private jx;
    j0: number;
    private js;
    jt: boolean;
    private j4;
    kc: string;
    private jo;
    jq: any[];
    private j1;
    j3: any;
    jr: EditorType;
    j2: any;
    j9: string;
    jp: string[];
    protected l(a: CellPath): CellModel;
    protected cm(a: CellPath, b: Grid, c: any): string;
    cy(a: CellModel, b: Grid, c: any, d: any): void;
    cw(a: CellModel, b: Grid, c: any, d: any): void;
    private ju;
}
/**
 * @hidden
 */
export declare class PinnedAreaSeparator extends DefinitionBase {
    static $t: Type;
    protected cm(a: CellPath, b: Grid, c: any): string;
    protected l(a: CellPath): CellModel;
    protected eb(): Brush;
    protected cz(a: Grid, b: Grid): void;
    protected c8(): void;
    protected c1(a: any, b: PropertyChangedEventArgs): void;
}
/**
 * @hidden
 */
export declare class SectionFooter extends DefinitionBase {
    static $t: Type;
    protected l(a: CellPath): CellModel;
    protected cm(a: CellPath, b: Grid, c: any): string;
    cy(a: CellModel, b: Grid, c: any, d: any): void;
    cw(a: CellModel, b: Grid, c: any, d: any): void;
}
/**
 * @hidden
 */
export declare class SectionHeader extends DefinitionBase {
    static $t: Type;
    private fc;
    fe: Brush;
    private fb;
    fd: Brush;
    private et;
    ex: number;
    private ev;
    ez: number;
    private eu;
    ey: number;
    private es;
    ew: number;
    private ep;
    eq: boolean;
    private em;
    en: GroupSummaryDisplayMode;
    sectionHeaderPropertyUpdating: (sectionHeader: SectionHeader, propertyName: string, propertyAnimationType: CellPropertyAnimationType, oldValue: any, newValue: any) => void;
    constructor();
    protected cm(a: CellPath, b: Grid, c: any): string;
    protected l(a: CellPath): CellModel;
    protected eb(): Brush;
    cy(a: CellModel, b: Grid, c: any, d: any): void;
    cw(a: CellModel, b: Grid, c: any, d: any): void;
    protected cz(a: Grid, b: Grid): void;
    private er;
    private e8;
    protected c1(a: any, b: PropertyChangedEventArgs): void;
    fa(): void;
    protected c8(): void;
    protected df(): void;
    protected dg(): void;
    e9(): void;
    protected c3(a: string, b: CellPropertyAnimationType, c: any, d: any): void;
    private el;
}
/**
 * @hidden
 */
export declare class RowSeparator extends DefinitionBase {
    static $t: Type;
    protected cm(a: CellPath, b: Grid, c: any): string;
    protected cz(a: Grid, b: Grid): void;
    protected c8(): void;
    protected dc(): void;
    protected de(): void;
    protected db(): void;
    protected c1(a: any, b: PropertyChangedEventArgs): void;
    protected l(a: CellPath): CellModel;
    protected eb(): Brush;
    protected ef(): Brush;
    protected ec(): Brush;
    protected ed(): Brush;
    protected av(): number;
}
/**
 * @hidden
 */
export declare class HeaderRowSeparator extends DefinitionBase {
    static $t: Type;
    protected cm(a: CellPath, b: Grid, c: any): string;
    protected l(a: CellPath): CellModel;
    protected eb(): Brush;
    protected c8(): void;
    protected cz(a: Grid, b: Grid): void;
    protected c1(a: any, b: PropertyChangedEventArgs): void;
}
/**
 * @hidden
 */
export declare abstract class SummaryRow extends DefinitionBase {
    static $t: Type;
    private fd;
    fi: Brush;
    private fb;
    ff: Brush;
    private fe;
    fj: Brush;
    private fc;
    fg: Brush;
    private em;
    summaryNameTextStyle: FontInfo;
    private el;
    en: FontInfo;
    private er;
    ev: number;
    private et;
    ex: number;
    private es;
    ew: number;
    private eq;
    eu: number;
    constructor();
    protected cm(a: CellPath, b: Grid, c: any): string;
    protected l(a: CellPath): CellModel;
    cy(a: CellModel, b: Grid, c: any, d: any): void;
    cw(a: CellModel, b: Grid, c: any, d: any): void;
    protected cz(a: Grid, b: Grid): void;
    protected fh(): Brush;
    protected eg(): Brush;
    protected c1(a: any, b: PropertyChangedEventArgs): void;
    protected e8(): void;
    protected e9(): void;
    protected dg(): void;
    protected fa(): void;
    protected c3(a: string, b: CellPropertyAnimationType, c: any, d: any): void;
    protected af(): FontInfo;
    protected eo(): FontInfo;
}
/**
 * @hidden
 */
export declare class SummaryRowRoot extends SummaryRow {
    static $t: Type;
    protected cm(a: CellPath, b: Grid, c: any): string;
    protected eb(): Brush;
    protected c8(): void;
    protected e8(): void;
    protected e9(): void;
    protected df(): void;
    protected fa(): void;
}
/**
 * @hidden
 */
export declare class SummaryRowSection extends SummaryRow {
    static $t: Type;
    protected cm(a: CellPath, b: Grid, c: any): string;
    protected eb(): Brush;
    protected c8(): void;
    protected e8(): void;
    protected e9(): void;
    protected df(): void;
    protected fa(): void;
}
/**
 * @hidden
 */
export declare class TemplateColumn extends Column {
    static $t: Type;
    constructor();
    protected l(a: CellPath): CellModel;
    protected cm(a: CellPath, b: Grid, c: any): string;
    cy(a: CellModel, b: Grid, c: any, d: any): void;
    cw(a: CellModel, b: Grid, c: any, d: any): void;
    jp(a: TemplateCellModel, b: any): void;
    cellUpdating: (sender: any, args: TemplateCellUpdatingEventArgs) => void;
    protected c3(a: string, b: CellPropertyAnimationType, c: any, d: any): void;
}
/**
 * @hidden
 */
export declare class TemplateCellUpdatingEventArgs extends EventArgs {
    static $t: Type;
    private _cellInfo;
    cellInfo: TemplateCellModel;
    private _content;
    content: any;
}
/**
 * @hidden
 */
export declare class TextColumn extends Column {
    static $t: Type;
    private jr;
    ju: string;
    jp: EditorType;
    jq: any;
    js: string;
    jo: string[];
    protected l(a: CellPath): CellModel;
    cy(a: CellModel, b: Grid, c: any, d: any): void;
    cw(a: CellModel, b: Grid, c: any, d: any): void;
    private jt;
    protected cm(a: CellPath, b: Grid, c: any): string;
}
/**
 * @hidden
 */
export declare class TextHeader extends Header {
    static $t: Type;
    constructor();
    protected l(a: CellPath): CellModel;
    protected cm(a: CellPath, b: Grid, c: any): string;
    cw(a: CellModel, b: Grid, c: any, d: any): void;
    cy(a: CellModel, b: Grid, c: any, d: any): void;
}
/**
 * @hidden
 */
export declare abstract class GridEffect extends Base {
    static $t: Type;
    constructor();
    bu(): void;
    bt(a: GridEffect): void;
    private s;
    t: GridEffectMainIntent;
    am(a: GridEffect): boolean;
    private u;
    v: GridEffectSubIntent;
    private br;
    bs: string;
    private af;
    as: boolean;
    private ac;
    ap: boolean;
    onFinished: (target: any) => void;
    onCanceled: (target: any, canceledBy: GridEffect) => void;
    private a3;
    private a1;
    ba: number;
    private h;
    i: (startItem: CellPath, numberOfItems: number, item: CellPath) => number;
    private a7;
    bi: number;
    private a8;
    bj: number;
    private a2;
    a9: number;
    private j;
    k: (startItem: CellPath, numberOfItems: number, item: CellPath) => number;
    private a4;
    bg: number;
    private c;
    g: CellPath;
    private a;
    e: CellPath;
    private a6;
    bh: number;
    private ad;
    aq: boolean;
    private ab;
    ao: boolean;
    private bk;
    bl: number;
    private bm;
    bo: any;
    private bn;
    bq: any;
    private w;
    x: (progress: number, fromValue: any, toValue: any, target: any, model: VisualModel) => void;
    private p;
    q: (progress: number) => number;
    private aa;
    al: boolean;
    private n;
    o: (target: any, model: VisualModel) => any;
    private ae;
    ar: boolean;
    bx(a: GridAnimationPhaseSettings): void;
    private r;
    private ay;
    au(a: ColumnInfo, b: VisualModel, c: GridLayerController, d: number): boolean;
    av(a: any, b: VisualModel, c: GridLayerController, d: number): boolean;
    private a0;
    private an;
    bz(a: CellPath, b: VisualModel, c: GridLayerController, d: number): void;
    at(a: CellModel, b: VisualModel, c: GridLayerController, d: number): boolean;
    private az;
    by(a: any, b: VisualModel, c: any): void;
    private bp;
    aw(a: SectionInfo, b: VisualModel, c: GridLayerController, d: number): boolean;
    ag(a: CellPath, b: VisualModel): boolean;
    ah(a: ColumnInfo, b: VisualModel): boolean;
    ai(a: RowPath, b: VisualModel): boolean;
    aj(a: GridColumnSpacer, b: VisualModel): boolean;
    bv(a: RowPath): void;
    bw(a: RowPath): void;
    private a5;
    private b;
    protected readonly f: CellPath;
    bf(a: VisualModel, b: GridLayerController, c: CellPath, d: number): number;
    private ax;
    private bd;
    private bb;
    be(a: VisualModel, b: CellPath): number;
    bc(a: VisualModel, b: GridLayerController, c: CellPath, d: number): number;
    protected d(a: VisualModel): CellPath;
    protected y(a: RowPath, b: RowPath): RowPath;
    protected z(a: RowPath, b: RowPath): RowPath;
    ak(a: VisualModel, b: GridLayerController, c: number): boolean;
}
/**
 * @hidden
 */
export declare class ColumnEffect extends GridEffect {
    static $t: Type;
    b0: number;
    ah(a: ColumnInfo, b: VisualModel): boolean;
}
/**
 * @hidden
 */
export declare class SpacerEffect extends GridEffect {
    static $t: Type;
    b0: number;
    aj(a: GridColumnSpacer, b: VisualModel): boolean;
}
/**
 * @hidden
 */
export declare class ColumnCellsEffect extends GridEffect {
    static $t: Type;
    b2: number;
    b1: number;
    b0: FixedCellPositions;
    ag(a: CellPath, b: VisualModel): boolean;
    protected d(a: VisualModel): CellPath;
    be(a: VisualModel, b: CellPath): number;
}
/**
 * @hidden
 */
export declare class CellEffect extends GridEffect {
    static $t: Type;
    b4: number;
    b3: number;
    b1: FixedCellPositions;
    b0: CellPath;
    b2: boolean;
    ag(a: CellPath, b: VisualModel): boolean;
    bv(a: RowPath): void;
    bw(a: RowPath): void;
}
/**
 * @hidden
 */
export declare class CellPositionEffect extends CellEffect {
    static $t: Type;
    ag(a: CellPath, b: VisualModel): boolean;
    bv(a: RowPath): void;
    bw(a: RowPath): void;
}
/**
 * @hidden
 */
export declare class RowEffect extends GridEffect {
    static $t: Type;
    b0: RowPath;
    ai(a: RowPath, b: VisualModel): boolean;
    bv(a: RowPath): void;
    bw(a: RowPath): void;
}
/**
 * @hidden
 */
export declare class RowCellsEffect extends GridEffect {
    static $t: Type;
    b0: RowPath;
    ag(a: CellPath, b: VisualModel): boolean;
    bv(a: RowPath): void;
    bw(a: RowPath): void;
    be(a: VisualModel, b: CellPath): number;
}
/**
 * @hidden
 */
export declare class GridEffectManager extends Base {
    static $t: Type;
    private b;
    protected readonly c: ITickProvider;
    constructor(a: ITickProvider, b: Grid);
    ae(a: RowPath): void;
    af(a: RowPath): void;
    private k;
    private j;
    private m;
    private l;
    private i;
    private n;
    private q;
    private o;
    a: Grid;
    private ad;
    d(): boolean;
    ac(): void;
    ab(): void;
    an(a: boolean): void;
    private p;
    private am;
    private aa;
    u(a: ColumnInfo, b: ColumnEffect): void;
    ai(a: number, b: boolean, c: GridEffect): void;
    z(a: GridColumnSpacer, b: SpacerEffect): void;
    al(a: GridColumnSpacer, b: boolean, c: GridEffect): void;
    t(a: ColumnInfo, b: ColumnCellsEffect): void;
    x(a: ColumnCellsEffect): void;
    y(a: ColumnCellsEffect): void;
    ah(a: number, b: boolean, c: GridEffect): void;
    w(a: RowPath, b: RowEffect): void;
    ak(a: RowPath, b: boolean, c: GridEffect): void;
    v(a: RowPath, b: RowCellsEffect): void;
    aj(a: RowPath, b: boolean, c: GridEffect): void;
    r(a: CellPath, b: CellEffect, c: number): void;
    s(a: CellPath, b: CellPositionEffect): void;
    ag(a: CellPath, b: boolean, c: GridEffect): void;
    f(a: number, b: VisualModel, c: GridLayerController): boolean;
    h(a: number, b: VisualModel, c: GridLayerController): boolean;
    g(a: number, b: VisualModel, c: GridLayerController): boolean;
    e(a: number, b: VisualModel, c: GridLayerController): boolean;
}
/**
 * @hidden
 */
export declare class GridLayerController extends Base {
    static $t: Type;
    private e;
    a(a: CellPath, b: VisualModel): CellModel;
    b(a: CellPath, b: Grid, c: VisualModel, d: GridLayer, e: ModelTypes, f: boolean, g: boolean, h: boolean): CellModel;
    private d;
    private g;
    private f;
    i(a: CellPath, b: VisualModel): void;
    j(a: CellPath, b: GridLayer, c: VisualModel): void;
    c(a: CellPath, b: VisualModel): CellModel;
    h(a: CellModel, b: VisualModel, c: number, d: number, e: number, f: number): void;
}
/**
 * @hidden
 */
export declare class VisibilityEngine extends Base {
    static $t: Type;
    private d;
    private c;
    f: boolean;
    private j;
    k: number;
    constructor();
    private e;
    v(): void;
    l(a: Grid): void;
    m(a: Grid, b: VisualModel, c: SpatialEngine, d: boolean): void;
    a(a: Grid, b: VisualModel, c: SpatialEngine, d: Rect): CalculationParameters;
    private u;
    private t;
    private q;
    i(a: Grid, b: VisualModel, c: Rect): List$1<PinnedRowInfo>;
    h(a: Grid, b: VisualModel, c: Rect, d: CalculationParameters, e: boolean): List$1<PinnedRowInfo>;
    private y;
    private b;
    private g;
    private p;
    private r;
    private s;
    private n;
    private o;
    private w;
    private x;
    private z;
    private aa;
    private ae;
    private ab;
    private ac;
    private ad;
}
/**
 * @hidden
 */
export declare class PinnedRowInfo extends Base {
    static $t: Type;
    m: number;
    o: string;
    l: number;
    readonly j: number;
    k: number;
    i: number;
    e: boolean;
    private c;
    h: boolean;
    a: DataSourceRowType;
    f: boolean;
    n: number;
    g: boolean;
    d: boolean;
    b: VisualModel;
    toString(): string;
}
/**
 * @hidden
 */
export declare class PushRowSettings extends Base {
    static $t: Type;
    a: number[];
    d: Dictionary$2<number, PinnedRowInfo>;
    b: boolean;
    c: boolean;
    e: number;
}
/**
 * @hidden
 */
export declare class PushRowResult extends Base {
    static $t: Type;
    b: boolean;
    a: PinnedRowInfo;
}
/**
 * @hidden
 */
export interface ICellRenderingEngine {
    refresh(a: VisualModel, b: boolean): void;
    viewportChanged(): void;
    invalidateVisibility(a: () => void): void;
    readonly initialRefreshFinished: boolean;
}
/**
 * @hidden
 */
export declare let ICellRenderingEngine_$type: Type;
/**
 * @hidden
 */
export declare class SpatialEngine extends Base {
    static $t: Type;
    private f;
    private c;
    private d;
    private e;
    r(a: Grid, b: VisualModel, c: number): void;
    s(a: VisualModel): void;
    q(a: Grid, b: VisualModel, c: number): void;
    g(a: ColumnInfo): number;
    private static p;
    k(a: number, b: Grid, c: VisualModel): number;
    l(a: number, b: VisualModel, c: boolean): number;
    private h;
    m(a: PinnedPositions, b: number, c: VisualModel): number;
    j(a: number, b: VisualModel): number;
    n(a: number, b: Grid, c: VisualModel): number;
    o(a: number, b: Grid, c: VisualModel): number;
    b(a: number, b: VisualModel): RowPath;
    v(a: GridLayerController, b: number, c: Column, d: VisualModel): void;
    t(a: number, b: Column, c: VisualModel): void;
    x(a: RowPath, b: VisualModel): void;
    y(a: GridLayerController, b: RowPath, c: VisualModel): void;
    private aa;
    private a;
    private ab;
    private z;
    w(a: GridLayerController, b: VisualModel): void;
    u(a: GridLayerController, b: VisualModel, c: number, d: number, e: number): void;
    i(a: VisualModel, b: RowPath): number;
}
/**
 * @hidden
 */
export declare class ColumnExchanger extends Base {
    static $t: Type;
    c: any;
    a: Column;
    b: number;
    constructor(a: number);
    constructor(a: number, b: Column, c: number);
    constructor(a: number, ..._rest: any[]);
}
/**
 * @hidden
 */
export declare class ColumnExchangersCollection extends ObservableCollection$1<ColumnExchanger> {
    static $t: Type;
    constructor();
}
/**
 * @hidden
 */
export declare class ResponsiveEngine extends Base {
    static $t: Type;
    private c;
    private l;
    private m;
    private k;
    private h;
    private i;
    private j;
    private a;
    private f;
    g: ResponsiveStatesCollection;
    private b;
    private d;
    constructor(a: Grid);
    x(a: ResponsiveState): void;
    y(a: number, b: number): void;
    private w;
    private q;
    private t;
    private u;
    private o;
    private p;
    private r;
    private v;
    private s;
    private e;
    private n;
}
/**
 * @hidden
 */
export declare class ResponsivePhase extends Base {
    static $t: Type;
    j: any;
    k: string;
    i: number;
    private d;
    readonly e: ColumnPropertySettersCollection;
    private a;
    readonly b: ColumnExchangersCollection;
    g(a: ColumnPropertySetter): ResponsivePhase;
    c(): ColumnPropertySetter;
    f(a: ColumnExchanger): ResponsivePhase;
    h(): ResponsivePhase;
}
/**
 * @hidden
 */
export declare class ResponsivePhasesCollection extends ObservableCollection$1<ResponsivePhase> {
    static $t: Type;
    constructor();
}
/**
 * @hidden
 */
export declare class ResponsiveState extends Base {
    static $t: Type;
    m: any;
    n: string;
    k: number;
    j: number;
    stateEntering: (sender: any, eventArgs: ResponsiveStateEnteringEventArgs) => void;
    stateEntered: (sender: any, eventArgs: ResponsiveStateEnteredEventArgs) => void;
    stateExited: (sender: any, eventArgs: ResponsiveStateExitedEventArgs) => void;
    private h;
    i: boolean;
    l: number;
    private b;
    readonly c: ResponsivePhasesCollection;
    d(a: ResponsivePhase): ResponsiveState;
    a(): ResponsivePhase;
    p(): void;
    o(): void;
    q(): void;
}
/**
 * @hidden
 */
export declare class ResponsiveStatesCollection extends ObservableCollection$1<ResponsiveState> {
    static $t: Type;
    constructor();
}
/**
 * @hidden
 */
export declare class GridLayer extends FastIterationDictionary$2<CellPath, CellModel> {
    static $t: Type;
    v: string;
    constructor(a: string);
}
/**
 * @hidden
 */
export declare class ColumnInfo extends Base {
    static $t: Type;
    constructor();
    m: number;
    n: number;
    b: ColumnWidth;
    i: number;
    k: number;
    l: number;
    p: string;
    o: number;
    c: FixedCellPositions;
    g: number;
    j: number;
    h: number;
    e(a: VisualModel): number;
    f(a: VisualModel): number;
    a: ColumnStates;
    d: PinnedPositions;
}
/**
 * @hidden
 */
export declare class SectionInfo extends Base {
    static $t: Type;
    h: number;
    m: number;
    q: number;
    o: number;
    g: number;
    d: number;
    n: number;
    p: number;
    i: number;
    b: List$1<number>;
    c: List$1<number>;
    l(): number;
    e(a: number): number;
    f(a: number): number;
    k(): number;
    j(a: number): number;
    a(a: number): RowPath;
}
/**
 * @hidden
 */
export declare class VisualModel extends Base {
    static $t: Type;
    private _actualVisibleRegion;
    actualVisibleRegion: Rect;
    private _absoluteWidth;
    absoluteWidth: number;
    private _absoluteHeight;
    absoluteHeight: number;
    ci: number;
    cl: number;
    cm: number;
    ch: number;
    cf: number;
    cg: number;
    cc: number;
    cs: number;
    ct: number;
    b4: number;
    b5: number;
    cd: number;
    ce: number;
    cj: number;
    cp: number;
    b7: number;
    readonly b8: number;
    readonly b3: number;
    readonly b6: number;
    readonly by: number;
    readonly b9: number;
    b0: number;
    b1: number;
    b2: number;
    bz: number;
    private ae;
    a7: GridLayer;
    private p;
    as: GridLayer;
    private i;
    al: GridLayer;
    private k;
    an: GridLayer;
    private ah;
    ba: GridLayer;
    private s;
    av: GridLayer;
    private o;
    ar: GridLayer;
    private j;
    am: GridLayer;
    private ag;
    a9: GridLayer;
    private r;
    au: GridLayer;
    private q;
    at: GridLayer;
    private af;
    a8: GridLayer;
    private w;
    az: GridLayer;
    private v;
    ay: GridLayer;
    private l;
    ao: GridLayer;
    private aj;
    bc: GridLayer;
    private u;
    ax: GridLayer;
    private t;
    aw: GridLayer;
    private ai;
    bb: GridLayer;
    private m;
    ap: GridLayer;
    private x;
    a0: GridLayer;
    private n;
    aq: GridLayer;
    private y;
    a1: GridLayer;
    private z;
    a2: GridLayer;
    private aa;
    a3: GridLayer;
    private ab;
    a4: GridLayer;
    private ac;
    a5: GridLayer;
    private ad;
    a6: GridLayer;
    private ak;
    bd: GridLayer;
    private c;
    e(a: number, b: number): CellModel;
    private bg;
    bh: FastIterationDictionary$2<CellPath, List$1<CellModel>>;
    bv: List$1<SectionInfo>;
    br: List$1<ColumnInfo>;
    bl: boolean;
    bn: boolean;
    bk: boolean;
    private bq;
    bw: List$1<GridColumnSpacerCollection>;
    bo: Dictionary$2<number, number>;
    bf: RowPath;
    be: RowPath;
    bm(): boolean;
    private cx;
    private f;
    g(a: number): ColumnInfo;
    cy(a: ColumnInfo): void;
    constructor();
    private c2;
    private bp;
    readonly bu: List$1<GridLayer>;
    bi(): boolean;
    c1(): void;
    c0(): void;
    b(): VisualModelExport;
    private a;
    bx: List$1<number>;
    cn: number;
    cq: number;
    co: number;
    cr: number;
    bj: boolean;
    cv: number;
    cw: number;
    cu: number;
    h(a: number, b: ColumnInfo, c: number, d: boolean, e: boolean): GridColumnSpacer;
    cz(a: GridColumnSpacer): void;
    bt(a: ColumnInfo): List$1<GridColumnSpacer>;
    bs(a: ColumnInfo): List$1<CellModel>;
    d(a: number, b: number): CellModel;
    ck(): number;
}
