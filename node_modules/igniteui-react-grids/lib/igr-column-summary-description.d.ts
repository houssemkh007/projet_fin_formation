import { SummaryOperand } from "igniteui-react-core";
import { IgrFormatSummaryTextEventArgs } from "./igr-format-summary-text-event-args";
import { IgrProvideCalculatorEventArgs } from "igniteui-react-core";
import { ColumnSummaryDescription as ColumnSummaryDescription_internal } from "./ColumnSummaryDescription";
/**
 * Represents a summary that is applied to a datasource. Changes to this object are not observed or expected after it is initially assigned to a collection.
*/
export declare class IgrColumnSummaryDescription {
    protected createImplementation(): ColumnSummaryDescription_internal;
    protected _implementation: any;
    /**
     * @hidden
     */
    readonly i: ColumnSummaryDescription_internal;
    private onImplementationCreated;
    constructor();
    protected _provideImplementation(i: any): void;
    field: string;
    operand: SummaryOperand;
    /**
     * Gets or sets the name to use when displaying the calculator name.
    */
    calculatorDisplayName: string;
    /**
     * Gets or sets the display name for the summary.
    */
    displayName: string;
    /**
     * Gets or sets the format string for the summary value.
    */
    valueFormat: string;
    /**
     * Gets or sets the format specifiers to use with the ValueFormat string.
    */
    valueFormatSpecifiers: any[];
    /**
     * Gets or sets the display format for the summary when in list display mode.
    */
    displayFormat: string;
    /**
     * Gets or sets the format specifiers to use with the DisplayFormat string.
    */
    displayFormatSpecifiers: any[];
    /**
     * Gets or sets an INTL.DateTimeFormat or INTL.NumericFormat to use to format the value.
    */
    formatOverride: any;
    /**
     * Gets or sets the minimum fraction digits. If FormatOverride is specificied this value is ignored.
    */
    maxFractionDigits: number;
    findByName(name: string): any;
    equals(other: any): boolean;
    private _formatText;
    private _formatText_wrapped;
    /**
     * Called when the value is being formatted.
    */
    formatText: (s: IgrColumnSummaryDescription, e: IgrFormatSummaryTextEventArgs) => void;
    private _provideCalculator;
    private _provideCalculator_wrapped;
    /**
     * Called when the summary calculator is required.
    */
    provideCalculator: (s: IgrColumnSummaryDescription, e: IgrProvideCalculatorEventArgs) => void;
}
