import { IgrCellInfo } from "./igr-cell-info";
import { NumericCellModel as NumericCellModel_internal } from "./NumericCellModel";
/**
 * Backing information for a numeric cell in the grid.
*/
export declare class IgrNumericCellInfo extends IgrCellInfo {
    protected createImplementation(): NumericCellModel_internal;
    /**
                                 * @hidden
                                 */
    readonly i: NumericCellModel_internal;
    constructor();
    /**
     * Sets or gets the numeric value to use for the cell.
    */
    numericValue: number;
    /**
     * Sets or gets whether there is a decimal numeric value to use for the cell.
    */
    hasDecimalValue: boolean;
    /**
     * The format string to apply to the value
    */
    formatStringOverride: string;
    formatSpecifiers: any[];
    /**
     * The format options to apply to the value
    */
    formatOverride: any;
    /**
     * Sets or gets the text prepended to a negative numeric value
    */
    negativePrefix: string;
    /**
     * Sets or gets the text prepended to a positive numeric value
    */
    positivePrefix: string;
    /**
     * Sets or gets the text appended to a negative numeric value
    */
    negativeSuffix: string;
    /**
     * Sets or gets the text appended to a positive numeric value
    */
    positiveSuffix: string;
    /**
     * The maximum number of decimal places to display when formatting
    */
    maxFractionDigits: number;
    /**
     * The minimum number of decimal places to display when formatting
    */
    minFractionDigits: number;
    /**
     * The minimum number of integer digits to display when formatting
    */
    minIntegerDigits: number;
    /**
     * Sets or gets if the grouping separator is shown
    */
    showGroupingSeparator: boolean;
    findByName(name: string): any;
}
