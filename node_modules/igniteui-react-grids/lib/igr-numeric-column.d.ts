import { EditorType } from "./EditorType";
import { IgrColumn, IIgrColumnProps } from "./igr-column";
import { NumericColumn } from "./NumericColumn";
/**
 * Represents a Numeric grid column, used to allow the developer to display a formatted number in a cell.
*/
export declare class IgrNumericColumn extends IgrColumn<IIgrNumericColumnProps> {
    protected createImplementation(): NumericColumn;
    /**
                                 * @hidden
                                 */
    readonly i: NumericColumn;
    constructor(props: IIgrNumericColumnProps);
    /**
     * Gets or sets the string to prefix a negative value. If FormatString is specificied this value is ignored.
    */
    negativePrefix: string;
    /**
     * Gets or sets the string to prefix a positive value. If FormatString is specificied this value is ignored.
    */
    positivePrefix: string;
    /**
     * Gets or sets the string to suffix a negative value. If FormatString is specificied this value is ignored.
    */
    negativeSuffix: string;
    /**
     * Gets or sets the string to suffix a positive value. If FormatString is specificied this value is ignored.
    */
    positiveSuffix: string;
    /**
     * Gets or sets the maximum fraction digits. If FormatString is specificied this value is ignored.
    */
    maxFractionDigits: number;
    /**
     * Gets or sets the minimum fraction digits. If FormatString is specificied this value is ignored.
    */
    minFractionDigits: number;
    /**
     * Gets or sets the minimum integer digits. If FormatString is specificied this value is ignored.
    */
    minIntegerDigits: number;
    /**
     * Gets or sets whether to show a grouping separator. If FormatString is specificied this value is ignored.
    */
    showGroupingSeparator: boolean;
    /**
     * Gets or sets the format string to apply to the value. If set, the other value formatting properties on this column are ignored.
    */
    formatString: string;
    formatSpecifiers: any[];
    /**
     * Gets or sets the INTL NumericFormat object to use for formatting the date values.
    */
    formatOverride: any;
    /**
     * Gets or sets the editor type used for editing cells in this column.
    */
    editorType: EditorType;
    /**
     * Gets or sets the ComboBox data source.
    */
    editorDataSource: any;
    /**
     * Gets or sets the ComboBox text field.
    */
    editorTextField: string;
    /**
     * Gets or sets the ComboBox value field.
    */
    editorValueField: string[];
    findByName(name: string): any;
}
export interface IIgrNumericColumnProps extends IIgrColumnProps {
    /**
     * Gets or sets the string to prefix a negative value. If FormatString is specificied this value is ignored.
    */
    negativePrefix?: string;
    /**
     * Gets or sets the string to prefix a positive value. If FormatString is specificied this value is ignored.
    */
    positivePrefix?: string;
    /**
     * Gets or sets the string to suffix a negative value. If FormatString is specificied this value is ignored.
    */
    negativeSuffix?: string;
    /**
     * Gets or sets the string to suffix a positive value. If FormatString is specificied this value is ignored.
    */
    positiveSuffix?: string;
    /**
     * Gets or sets the maximum fraction digits. If FormatString is specificied this value is ignored.
    */
    maxFractionDigits?: number | string;
    /**
     * Gets or sets the minimum fraction digits. If FormatString is specificied this value is ignored.
    */
    minFractionDigits?: number | string;
    /**
     * Gets or sets the minimum integer digits. If FormatString is specificied this value is ignored.
    */
    minIntegerDigits?: number | string;
    /**
     * Gets or sets whether to show a grouping separator. If FormatString is specificied this value is ignored.
    */
    showGroupingSeparator?: boolean | string;
    /**
     * Gets or sets the format string to apply to the value. If set, the other value formatting properties on this column are ignored.
    */
    formatString?: string;
    formatSpecifiers?: any[];
    /**
     * Gets or sets the INTL NumericFormat object to use for formatting the date values.
    */
    formatOverride?: any;
    /**
     * Gets or sets the editor type used for editing cells in this column.
    */
    editorType?: EditorType | string;
    /**
     * Gets or sets the ComboBox data source.
    */
    editorDataSource?: any;
    /**
     * Gets or sets the ComboBox text field.
    */
    editorTextField?: string;
    /**
     * Gets or sets the ComboBox value field.
    */
    editorValueField?: string[];
}
