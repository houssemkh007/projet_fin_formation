import * as React from 'react';
import { CheckboxList } from './CheckboxList';
import { IgrCheckedChangedEventArgs } from "./igr-checked-changed-event-args";
import { IgrSelectAllCheckboxChangedEventArgs } from "./igr-select-all-checkbox-changed-event-args";
import { IgrGridSelectedKeysCollection } from "./igr-grid-selected-keys-collection";
import { CheckboxListIndexType } from "./CheckboxListIndexType";
import { InputGroupDisplayType } from "igniteui-react-inputs";
import { BaseControlTheme } from "igniteui-react-core";
import { ControlDisplayDensity } from "igniteui-react-core";
export declare class IgrCheckboxList extends React.Component<IIgrCheckboxListProps> {
    private _container;
    private _height;
    private _width;
    private _initialized;
    private _elRef;
    private _filterHrRef;
    private _selectAllSectionRef;
    private _gridRef;
    private _renderer;
    height: string;
    width: string;
    private _dataSource;
    dataSource: any;
    private _wrapper;
    private _getMainRef;
    private _getGridRef;
    private _getSelectAllSection;
    private _getFilterHr;
    private verifyReferences;
    render(): React.DetailedReactHTMLElement<{
        className: string;
        ref: (ref: any) => void;
        children: any[];
    }, any>;
    constructor(props: IIgrCheckboxListProps);
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    protected initializeProperties(): void;
    updateStyle(): void;
    componentWillUnmount(): void;
    private _implementation;
    componentDidMount(): void;
    initializeContent(): void;
    protected createImplementation(): CheckboxList;
    readonly i: CheckboxList;
    private _checkboxList;
    private _keys;
    /**
     * Gets the collection responsible for selection in the CheckboxList. Selection is determined by two factors:
     * whether everything is selected or deselected and the values present in this collection. If everything is
     * selected then any items in this collection will be deselected. If everything is deselected then any items in
     * this collection will be selected. The CheckboxList defaults all items as deselected. This state can change
     * when you use the SelectAll and DeselectAll methods.
    */
    keys: IgrGridSelectedKeysCollection;
    /**
     * Gets or sets the primary key to use for the CheckboxList.
    */
    primaryKey: string[];
    /**
     * Gets or Sets the property name that contains the values.
    */
    dataMemberPath: string;
    /**
     * Gets or Sets the property name that contains the values.
    */
    selectedMemberPath: string;
    /**
     * Gets or Sets the property name that contains the values.
    */
    filterPlaceholderText: string;
    /**
     * Gets or Sets the property name that contains the values.
    */
    searchInputType: InputGroupDisplayType;
    /**
     * Gets or Sets the property name that contains the values.
    */
    rowHeight: number;
    /**
     * Gets or Sets the property name that contains the values.
    */
    cellTextStyle: string;
    /**
     * Gets or Sets the property name that contains the values.
    */
    indexType: CheckboxListIndexType;
    /**
     * Gets or Sets the property name that contains the values.
    */
    baseTheme: BaseControlTheme;
    /**
     * Gets or Sets the property name that contains the values.
    */
    density: ControlDisplayDensity;
    /**
     * Gets / sets the caption of the "Select All" checkbox.
    */
    selectAllCaption: string;
    /**
     * Gets or sets the color to use for the "Select All" label.
    */
    selectAllCaptionTextColor: string;
    /**
     * Gets or sets the color to use for the actual header selectAllCaption text.
    */
    actualSelectAllCaptionTextColor: string;
    /**
     * Gets / sets whether the "Select all" checkbox is visible.
    */
    showSelectAll: boolean;
    /**
     * Gets or sets the color to use for the background of the component.
    */
    backgroundColor: string;
    /**
     * Gets or sets the color to use for the text of the component.
    */
    textColor: string;
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected readonly hasUserValues: Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    /**
 * selects all the items in the checkbox list.

*/
    selectAll(): void;
    /**
     * Deselects all the items in the checkbox list.
    
    */
    deselectAll(): void;
    notifySetItem(index: number, oldItem: any, newItem: any): void;
    /**
     * Manually notifies the checkboxlist's grid that the data it has bound to has been cleared and needs to be re-examined.
     * This should not be called if the data that the grid is bound to is already observable.
    
    */
    notifyClearItems(): void;
    notifyInsertItem(index: number, newItem: any): void;
    notifyRemoveItem(index: number, oldItem: any): void;
    addKeyValue(value: any[]): void;
    removeKeyValue(value: any[]): void;
    /**
     * Returns true if no items are selected / checked; otherwise false.
    
    */
    isNothingSelected(): boolean;
    /**
     * Returns true if all of the items are selected / checked; otherwise false.
    
    */
    isEverythingSelected(): boolean;
    private _checkedChanged;
    private _checkedChanged_wrapped;
    /**
     * Called when a checkbox is checked or unchecked.
    */
    checkedChanged: (s: IgrCheckboxList, e: IgrCheckedChangedEventArgs) => void;
    private _selectAllCheckboxChanged;
    private _selectAllCheckboxChanged_wrapped;
    /**
     * Called when the SelectAll checkbox is checked or unchecked.
    */
    selectAllCheckboxChanged: (s: IgrCheckboxList, e: IgrSelectAllCheckboxChangedEventArgs) => void;
}
export interface IIgrCheckboxListProps {
    width?: string;
    height?: string;
    /**
    * Gets or sets the data for the grid to use.
    */
    dataSource?: any;
    /**
 * Gets or sets the primary key to use for the CheckboxList.
*/
    primaryKey?: string[];
    /**
     * Gets or Sets the property name that contains the values.
    */
    dataMemberPath?: string;
    /**
     * Gets or Sets the property name that contains the values.
    */
    selectedMemberPath?: string;
    /**
     * Gets or Sets the property name that contains the values.
    */
    filterPlaceholderText?: string;
    /**
     * Gets or Sets the property name that contains the values.
    */
    searchInputType?: InputGroupDisplayType | string;
    /**
     * Gets or Sets the property name that contains the values.
    */
    rowHeight?: number | string;
    /**
     * Gets or Sets the property name that contains the values.
    */
    cellTextStyle?: string;
    /**
     * Gets or Sets the property name that contains the values.
    */
    indexType?: CheckboxListIndexType | string;
    /**
     * Gets or Sets the property name that contains the values.
    */
    baseTheme?: BaseControlTheme | string;
    /**
     * Gets or Sets the property name that contains the values.
    */
    density?: ControlDisplayDensity | string;
    /**
     * Gets / sets the caption of the "Select All" checkbox.
    */
    selectAllCaption?: string;
    /**
     * Gets or sets the color to use for the "Select All" label.
    */
    selectAllCaptionTextColor?: string;
    /**
     * Gets or sets the color to use for the actual header selectAllCaption text.
    */
    actualSelectAllCaptionTextColor?: string;
    /**
     * Gets / sets whether the "Select all" checkbox is visible.
    */
    showSelectAll?: boolean | string;
    /**
     * Gets or sets the color to use for the background of the component.
    */
    backgroundColor?: string;
    /**
     * Gets or sets the color to use for the text of the component.
    */
    textColor?: string;
    /**
 * Called when a checkbox is checked or unchecked.
*/
    checkedChanged?: (s: IgrCheckboxList, e: IgrCheckedChangedEventArgs) => void;
    /**
     * Called when the SelectAll checkbox is checked or unchecked.
    */
    selectAllCheckboxChanged?: (s: IgrCheckboxList, e: IgrSelectAllCheckboxChangedEventArgs) => void;
}
