import { Component, createElement, Children } from 'react';
import { Base, markType, markEnum, ObservableCollection$1, delegateCombine, Type, enumGetBox, Brush, Color, FontInfo, DeviceUtils, truncate, Thickness, CornerRadius, StringBuilder, stringIsNullOrEmpty, isNaN_, stringEndsWith, DataSourceSchemaPropertyType_$type, SummaryOperand_$type, stringContains, stringReplace, List$1, String_$type, tryParseNumber, PropertyChangedEventArgs, INotifyPropertyChanged_$type, delegateRemove, runOn, SyncableObservableCollection$2, SortDescription, BindingFormatter, CountSummaryCalculator, AverageSummaryCalculator, SumSummaryCalculator, MaxSummaryCalculator, MinSummaryCalculator, SummaryDescription, EventArgs, RectData, typeCast, dateMinValue, Dictionary$2, Boolean_$type, Number_$type, BrushUtil, EnumUtil, AppearanceHelper, FontUtil, Delegate_$type, typeGetValue, IDataSourceUpdateNotifier_$type, HashSet$1, createGuid, FilterExpressionCollection, Point_$type, intDivide, Rect, dateNow, timeSpanTotalSeconds, fromEnum, fromEn, ControlDisplayDensity_$type, DataSourceSummaryScope_$type, DataSourceSectionHeaderDisplayMode_$type, IDataSource_$type, IEditableDataSource_$type, stringStartsWith, InvalidOperationException, NotSupportedException, FilterFactory, Convert, FastIterationDictionary$2, stringEmpty, stringIsNullOrWhiteSpace, Stack$1, DataSourceSpecialRow, IList$1_$type, DefaultSectionInformation, getInstanceType, Date_$type, EasingFunctions, DataSourceRowType_$type, timeSpanFromMilliseconds, timeSpanTotalMilliseconds, DomWrapper_$type, NativeUI, BaseControlTheme_$type, FastReflectionHelper, ArgumentException, ensureBool, ensureEnum, brushToString, stringToBrush, arrayFindByName, NamePatcher, TypeRegistrar, isValidProp, toSpinal, initializePropertiesFromCss, getModifiedProps, IgCollection, SyncableObservableCollection$1, ListSortDirection_$type, CanvasViewRenderer, RenderingContext, LocalDataSource, ITickProvider_$type, Rectangle, Line, TextBlock, PointUtil, Random, isDigit, Path, TransformGroup, TranslateTransform, RotateTransform, DoubleAnimator, PathFigure, LineSegment, PathGeometry, Geometry, dateGetMonth, dateFromValues, BaseDOMEventProxy, dateTryParse, KeyFrameAnimationFactory, AnimationKeyFrameEffect, ElevationHelper, AnimationKeyFrameEffectTiming, AnimationKeyFrameProperty, CanvasGestureDOMEventProxy, IgrProvideCalculatorEventArgs, IgrFilterExpressionCollection, IScrollerKeyboardListener_$type, ContentChildrenManager, PortalManager, ReactRenderer, CollectionAdapter, Scroller, ReactWrapper, NotifyCollectionChangedAction, ScrollbarStyle_$type, fromRect, IgrLocalDataSourceModule, IgrNumberFormatSpecifierModule, IgrDateTimeFormatSpecifierModule, IgrTemplateContainer, IgrTemplateContentModule, SizeData, stringFormat, StringComparer, Size, toNullable, nullableEquals, stringFormat1, Array_$type, IExecutionContext_$type } from 'igniteui-react-core';
import { Checkbox, InputGroupDisplayType_$type, InputGroup, Prefix, Icon, Input, IgrCheckboxModule, IgrInputGroupModule, IgrButtonModule, Button, ButtonGroup, Label, Suffix, ThemeResolver, ElevationHelper as ElevationHelper$1, IgrIconModule } from 'igniteui-react-inputs';
import { Popup } from 'igniteui-react-layouts';
import { createPortal } from 'react-dom';

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let PrimaryKeyValue = /*@__PURE__*/ (() => {
    class PrimaryKeyValue extends Base {
        constructor(a, b) {
            super();
            this.a = null;
            this.b = null;
            this.a = a;
            this.b = b;
        }
        get key() {
            return this.a;
        }
        set key(a) {
            this.a = a;
        }
        get value() {
            return this.b;
        }
        set value(a) {
            this.b = a;
        }
        static createIdentityKey(a) {
            return new PrimaryKeyValue(null, [a]);
        }
        equals(a) {
            let b = a;
            if (b == null) {
                return false;
            }
            if (b.b == null && this.b == null) {
                return true;
            }
            if (b.b.length != this.b.length) {
                return false;
            }
            if (this.a == null && b.a == null && this.b.length == 1 && b.b.length == 1) {
                let v1_ = this.b[0];
                let v2_ = b.b[0];
                return (v1_ === v2_);
            }
            for (let c = 0; c < this.b.length; c++) {
                if (!this.f(this.b[c], b.b[c])) {
                    return false;
                }
            }
            return true;
        }
        f(a, b) {
            if (a == null && b == null) {
                return true;
            }
            if (a == null && b != null) {
                return false;
            }
            return Base.equalsStatic(a, b);
        }
        getHashCode() {
            if (this.b == null || this.b.length == 0) {
                return 0;
            }
            let a = 0;
            a = this.i(this.b[0]);
            for (let b = 1; b < this.b.length; b++) {
                a = a * 17 + this.i(this.b[b]);
            }
            return a;
        }
        i(val_) {
            if (val_ == null) {
                return 0;
            }
            return Base.getHashCodeStatic(val_);
        }
    }
    PrimaryKeyValue.$t = /*@__PURE__*/ markType(PrimaryKeyValue, 'PrimaryKeyValue');
    return PrimaryKeyValue;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
var CheckboxListIndexType = /*@__PURE__*/ (function (CheckboxListIndexType) {
    CheckboxListIndexType[CheckboxListIndexType["Selected"] = 0] = "Selected";
    CheckboxListIndexType[CheckboxListIndexType["DeSelected"] = 1] = "DeSelected";
    return CheckboxListIndexType;
})({});
/**
 * @hidden
 */
let CheckboxListIndexType_$type = /*@__PURE__*/ markEnum('CheckboxListIndexType', 'Selected,0|DeSelected,1');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridSelectedKeysCollection = /*@__PURE__*/ (() => {
    class GridSelectedKeysCollection extends ObservableCollection$1 {
        constructor() {
            super(PrimaryKeyValue.$, 0);
        }
        get ae() {
            return this;
        }
        af(a) {
            this.collectionChanged = delegateCombine(this.collectionChanged, a);
        }
    }
    GridSelectedKeysCollection.$t = /*@__PURE__*/ markType(GridSelectedKeysCollection, 'GridSelectedKeysCollection', /*@__PURE__*/ ObservableCollection$1.$.specialize(PrimaryKeyValue.$));
    return GridSelectedKeysCollection;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let CheckedChangedEventArgs = /*@__PURE__*/ (() => {
    class CheckedChangedEventArgs extends Base {
        constructor() {
            super(...arguments);
            this.b = 0;
            this.a = false;
        }
    }
    CheckedChangedEventArgs.$t = /*@__PURE__*/ markType(CheckedChangedEventArgs, 'CheckedChangedEventArgs');
    return CheckedChangedEventArgs;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let ICellActionManager_$type = /*@__PURE__*/ new Type(null, 'ICellActionManager');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let FixedCellPositions_$type = /*@__PURE__*/ markEnum('FixedCellPositions', 'None,0|Left,1|Right,2|Top,3|Bottom,4');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let RowPath = /*@__PURE__*/ (() => {
    class RowPath extends Base {
        constructor(a, b) {
            super();
            this.n = 0;
            this.m = 0;
            this.a = 0;
            this.c = 0;
            this.l = -1;
            this.e = false;
            this.k = -1;
            this.b = 0;
            this.d = 0;
            this.n = a;
            this.m = b;
            this.ac();
        }
        get x() {
            return this.n;
        }
        set x(a) {
            this.n = a;
            this.ac();
        }
        get w() {
            return this.m;
        }
        set w(a) {
            this.m = a;
            this.ac();
        }
        get b() {
            return this.a;
        }
        set b(a) {
            this.a = a;
            this.ac();
        }
        get d() {
            return this.c;
        }
        set d(a) {
            this.c = a;
            this.ac();
        }
        ac() {
            this.l = (this.n * 1000000) + this.m;
        }
        getHashCode() {
            return this.l;
        }
        equals(a) {
            let b = a;
            if (this.a != b.a) {
                return false;
            }
            if (this.n != b.n) {
                return false;
            }
            if (this.m != b.m) {
                return false;
            }
            return true;
        }
        toString() {
            return "F" + enumGetBox(FixedCellPositions_$type, this.a) + "." + this.n + "." + this.m;
        }
        get g() {
            return ((this.m == -100 || this.m == -101) && this.n == -100);
        }
        get h() {
            return this.m == -101;
        }
        get j() {
            return (this.m == -200 || this.m == -201);
        }
        get i() {
            return this.e;
        }
        set i(a) {
            this.e = a;
        }
        get o() {
            return this.k;
        }
        set o(a) {
            this.k = a;
        }
        aa() {
            let a = new RowPath(this.x, this.w);
            a.b = this.b;
            a.i = this.i;
            a.o = this.o;
            return a;
        }
    }
    RowPath.$t = /*@__PURE__*/ markType(RowPath, 'RowPath');
    return RowPath;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridViewportChangedEventArgs = /*@__PURE__*/ (() => {
    class GridViewportChangedEventArgs extends Base {
        constructor() {
            super(...arguments);
            this.g = 0;
            this.d = 0;
            this.h = 0;
            this.e = 0;
            this.f = 0;
            this.c = 0;
            this.a = 0;
            this.b = 0;
        }
    }
    GridViewportChangedEventArgs.$t = /*@__PURE__*/ markType(GridViewportChangedEventArgs, 'GridViewportChangedEventArgs');
    return GridViewportChangedEventArgs;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * Indicates some simple date formats to be used.
 */
var DateTimeFormats = /*@__PURE__*/ (function (DateTimeFormats) {
    /**
     * A standard short date format is used.
     */
    DateTimeFormats[DateTimeFormats["DateShort"] = 0] = "DateShort";
    /**
     * A standard long date format is used.
     */
    DateTimeFormats[DateTimeFormats["DateLong"] = 1] = "DateLong";
    /**
     * A standard short time format is used.
     */
    DateTimeFormats[DateTimeFormats["TimeShort"] = 2] = "TimeShort";
    /**
     * A standard long time format is used.
     */
    DateTimeFormats[DateTimeFormats["TimeLong"] = 3] = "TimeLong";
    /**
     * A standard short date/time format is used.
     */
    DateTimeFormats[DateTimeFormats["DateTimeShort"] = 4] = "DateTimeShort";
    /**
     * A standard long date/time format is used.
     */
    DateTimeFormats[DateTimeFormats["DateTimeLong"] = 5] = "DateTimeLong";
    return DateTimeFormats;
})({});
/**
 * @hidden
 */
let DateTimeFormats_$type = /*@__PURE__*/ markEnum('DateTimeFormats', 'DateShort,0|DateLong,1|TimeShort,2|TimeLong,3|DateTimeShort,4|DateTimeLong,5');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let ModelStates_$type = /*@__PURE__*/ markEnum('ModelStates', 'New,0|Recycled,1|Inview,2');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let CellPath = /*@__PURE__*/ (() => {
    class CellPath extends RowPath {
        constructor(a, ..._rest) {
            a = (a == void 0) ? 0 : a;
            switch (a) {
                case 0:
                    {
                        let c = _rest[0];
                        let d = _rest[1];
                        let e = _rest[2];
                        let f = _rest[3];
                        let g = [d, e, f];
                        {
                            let i = g[0];
                            let j = g[1];
                            let k = g[2];
                            super(j, k);
                            this.ax = 0;
                            this.ay = 0;
                            this.aw = -1;
                            this.ar = false;
                            this.ae = false;
                            this.ad = false;
                            this.ao = false;
                            this.af = false;
                            this.ax = i;
                            this.ac();
                        }
                        this.b = c;
                        this.ac();
                    }
                    break;
                case 1:
                    {
                        let c = _rest[0];
                        let d = _rest[1];
                        let e = _rest[2];
                        super(d, e);
                        this.ax = 0;
                        this.ay = 0;
                        this.aw = -1;
                        this.ar = false;
                        this.ae = false;
                        this.ad = false;
                        this.ao = false;
                        this.af = false;
                        this.ax = c;
                        this.ac();
                    }
                    break;
            }
        }
        get az() {
            return this.ax;
        }
        set az(a) {
            this.ax = a;
            this.ac();
        }
        get a5() {
            return this.ay;
        }
        set a5(a) {
            this.ay = a;
        }
        ac() {
            super.ac();
            this.aw = (this.az * 100000000) + super.getHashCode();
        }
        getHashCode() {
            return this.aw;
        }
        equals(a) {
            if (!super.equals(a)) {
                return false;
            }
            let b = a;
            if (a == null) {
                return false;
            }
            if (this.ax != b.ax) {
                return false;
            }
            if (this.at != b.at) {
                return false;
            }
            if (this.aq != b.aq) {
                return false;
            }
            return true;
        }
        toString() {
            return this.ax + "." + super.toString();
        }
        aa() {
            let a = new CellPath(0, this.b, this.ax, this.x, this.w);
            a.a5 = this.a5;
            a.at = this.at;
            a.aq = this.aq;
            a.i = this.i;
            a.o = this.o;
            a.d = this.d;
            a.ao = this.ao;
            a.af = this.af;
            a.ar = this.ar;
            return a;
        }
        get as() {
            return (this.ax == -300);
        }
        get ag() {
            return ((this.ax >= 0 || this.ax == -800 || this.ax == -400) && this.w >= 0 && this.w >= 0);
        }
        get au() {
            return this.ax == -400 || this.ax == -401 || this.ax == -402;
        }
        get aj() {
            return this.g && !this.as;
        }
        get ap() {
            return this.w == -102 && this.ax == -400;
        }
        get al() {
            return (this.w == -103 || this.w == -104) && this.az == -500;
        }
        get an() {
            return (this.w == -103 || this.w == -104) && this.az == -501;
        }
        get ak() {
            return this.w == -100 && this.az == -500;
        }
        get am() {
            return this.w == -100 && this.az == -501;
        }
        get at() {
            return this.ae;
        }
        set at(a) {
            this.ae = a;
        }
        get aq() {
            return this.ad;
        }
        set aq(a) {
            this.ad = a;
        }
        get av() {
            return this.at || this.aq;
        }
        get ah() {
            return this.az == -1000 && this.w == -1000;
        }
        get ai() {
            return this.az == -1001 && this.w == -1001;
        }
    }
    CellPath.$t = /*@__PURE__*/ markType(CellPath, 'CellPath', RowPath.$);
    return CellPath;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let ModelTypes_$type = /*@__PURE__*/ markEnum('ModelTypes', 'ColumnHeader,0|Cell,1|SectionHeader,2|SectionFooter,3|RowSeparator,4|VerticalSeparator,5|ResizeSeparator,6');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * Indicates the desired horizontal alignment of the cell content.
 */
var CellContentHorizontalAlignment = /*@__PURE__*/ (function (CellContentHorizontalAlignment) {
    /**
     * Align left.
     */
    CellContentHorizontalAlignment[CellContentHorizontalAlignment["Left"] = 0] = "Left";
    /**
     * Align center.
     */
    CellContentHorizontalAlignment[CellContentHorizontalAlignment["Center"] = 1] = "Center";
    /**
     * Align right.
     */
    CellContentHorizontalAlignment[CellContentHorizontalAlignment["Right"] = 2] = "Right";
    /**
     * Align stretch
     */
    CellContentHorizontalAlignment[CellContentHorizontalAlignment["Stretch"] = 3] = "Stretch";
    /**
     * Align auto
     */
    CellContentHorizontalAlignment[CellContentHorizontalAlignment["Auto"] = 4] = "Auto";
    return CellContentHorizontalAlignment;
})({});
/**
 * @hidden
 */
let CellContentHorizontalAlignment_$type = /*@__PURE__*/ markEnum('CellContentHorizontalAlignment', 'Left,0|Center,1|Right,2|Stretch,3|Auto,4');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * Indicates the desired vertical alignment of the cell content.
 */
var CellContentVerticalAlignment = /*@__PURE__*/ (function (CellContentVerticalAlignment) {
    /**
     * Align top.
     */
    CellContentVerticalAlignment[CellContentVerticalAlignment["Top"] = 0] = "Top";
    /**
     * Align center.
     */
    CellContentVerticalAlignment[CellContentVerticalAlignment["Center"] = 1] = "Center";
    /**
     * Align bottom.
     */
    CellContentVerticalAlignment[CellContentVerticalAlignment["Bottom"] = 2] = "Bottom";
    /**
     * Align stretch
     */
    CellContentVerticalAlignment[CellContentVerticalAlignment["Stretch"] = 3] = "Stretch";
    /**
     * Align auto
     */
    CellContentVerticalAlignment[CellContentVerticalAlignment["Auto"] = 4] = "Auto";
    return CellContentVerticalAlignment;
})({});
/**
 * @hidden
 */
let CellContentVerticalAlignment_$type = /*@__PURE__*/ markEnum('CellContentVerticalAlignment', 'Top,0|Center,1|Bottom,2|Stretch,3|Auto,4');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * Indicates how to break lines of text for a cell.
 */
var TextCellLineBreakMode = /*@__PURE__*/ (function (TextCellLineBreakMode) {
    /**
     * Truncates the text content at the end and displays an ellipsis character if it can't fit on a line.
     */
    TextCellLineBreakMode[TextCellLineBreakMode["Ellipsis"] = 0] = "Ellipsis";
    /**
     * Keeps the text on a single line, but does not attempt to insert an ellipsis character.
     */
    TextCellLineBreakMode[TextCellLineBreakMode["NoWrap"] = 1] = "NoWrap";
    /**
     * If possible for the current platform, wraps to a new line on a word break, if necessary.
     */
    TextCellLineBreakMode[TextCellLineBreakMode["WordWrap"] = 2] = "WordWrap";
    /**
     * If possible for the current platform, wraps to a new line whenever necessary.
     */
    TextCellLineBreakMode[TextCellLineBreakMode["CharacterWrap"] = 3] = "CharacterWrap";
    return TextCellLineBreakMode;
})({});
/**
 * @hidden
 */
let TextCellLineBreakMode_$type = /*@__PURE__*/ markEnum('TextCellLineBreakMode', 'Ellipsis,0|NoWrap,1|WordWrap,2|CharacterWrap,3');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * Indicates the direction a column should be sorted in.
 */
var ColumnSortDirection = /*@__PURE__*/ (function (ColumnSortDirection) {
    /**
     * Not sort applied.
     */
    ColumnSortDirection[ColumnSortDirection["None"] = 0] = "None";
    /**
     * Sort is ascending.
     */
    ColumnSortDirection[ColumnSortDirection["Ascending"] = 1] = "Ascending";
    /**
     * Sort is descending.
     */
    ColumnSortDirection[ColumnSortDirection["Descending"] = 2] = "Descending";
    return ColumnSortDirection;
})({});
/**
 * @hidden
 */
let ColumnSortDirection_$type = /*@__PURE__*/ markEnum('ColumnSortDirection', 'None,0|Ascending,1|Descending,2');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * Enumeration defining different positions a column can be fixed against.
 */
var PinnedPositions = /*@__PURE__*/ (function (PinnedPositions) {
    /**
     * The column is not fixed.
     */
    PinnedPositions[PinnedPositions["None"] = 0] = "None";
    /**
     * The column is pinned against the left side of the grid.
     */
    PinnedPositions[PinnedPositions["Left"] = 1] = "Left";
    /**
     * The column is pinned against the right side of the grid.
     */
    PinnedPositions[PinnedPositions["Right"] = 2] = "Right";
    return PinnedPositions;
})({});
/**
 * @hidden
 */
let PinnedPositions_$type = /*@__PURE__*/ markEnum('PinnedPositions', 'None,0|Left,1|Right,2');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridStyleRepository = /*@__PURE__*/ (() => {
    class GridStyleRepository extends Base {
        static get bi() {
            if (GridStyleRepository.ap == null) {
                let a = "#babfc7";
                GridStyleRepository.ap = ((() => {
                    let $ret = new Brush();
                    $ret.fill = a;
                    return $ret;
                })());
            }
            return GridStyleRepository.ap;
        }
        static get bk() {
            if (GridStyleRepository.ar == null) {
                let a = "#dde2eb";
                GridStyleRepository.ar = ((() => {
                    let $ret = new Brush();
                    $ret.fill = a;
                    return $ret;
                })());
            }
            return GridStyleRepository.ar;
        }
        static get bc() {
            if (GridStyleRepository.aj == null) {
                GridStyleRepository.aj = ((() => {
                    let $ret = new Brush();
                    $ret.color = Color.u(255, 224, 224, 224);
                    return $ret;
                })());
            }
            return GridStyleRepository.aj;
        }
        static get a2() {
            if (GridStyleRepository.z == null) {
                let a = "#babfc7";
                GridStyleRepository.z = ((() => {
                    let $ret = new Brush();
                    $ret.fill = a;
                    return $ret;
                })());
            }
            return GridStyleRepository.z;
        }
        static get a0() {
            if (GridStyleRepository.x == null) {
                let a = "#babfc7";
                GridStyleRepository.x = ((() => {
                    let $ret = new Brush();
                    $ret.fill = a;
                    return $ret;
                })());
            }
            return GridStyleRepository.x;
        }
        static get bm() {
            if (GridStyleRepository.at == null) {
                let a = "#ff80ab";
                GridStyleRepository.at = ((() => {
                    let $ret = new Brush();
                    $ret.fill = a;
                    return $ret;
                })());
            }
            return GridStyleRepository.at;
        }
        static get bn() {
            if (GridStyleRepository.au == null) {
                let a = "#181d1f";
                GridStyleRepository.au = ((() => {
                    let $ret = new Brush();
                    $ret.fill = a;
                    return $ret;
                })());
            }
            return GridStyleRepository.au;
        }
        static get av() {
            if (GridStyleRepository.s == null) {
                let a = "#2196f3";
                GridStyleRepository.s = ((() => {
                    let $ret = new Brush();
                    $ret.fill = a;
                    return $ret;
                })());
            }
            return GridStyleRepository.s;
        }
        static get l() {
            if (GridStyleRepository.g == null) {
                GridStyleRepository.g = new FontInfo();
                GridStyleRepository.g.d = DeviceUtils.f(13);
                GridStyleRepository.g.n = "'Segoe UI', Verdana";
            }
            return GridStyleRepository.g;
        }
        static get k() {
            if (GridStyleRepository.f == null) {
                GridStyleRepository.f = new FontInfo();
                GridStyleRepository.f.d = DeviceUtils.f(13);
                GridStyleRepository.f.q = "italic";
                GridStyleRepository.f.n = "'Segoe UI', Verdana";
            }
            return GridStyleRepository.f;
        }
        static get h() {
            if (GridStyleRepository.c == null) {
                GridStyleRepository.c = new FontInfo();
                GridStyleRepository.c.d = DeviceUtils.f(14);
                GridStyleRepository.c.n = "'Segoe UI', Verdana";
            }
            return GridStyleRepository.c;
        }
        static get j() {
            if (GridStyleRepository.d == null) {
                GridStyleRepository.d = new FontInfo();
                GridStyleRepository.d.d = DeviceUtils.f(12);
                GridStyleRepository.d.s = "600";
                GridStyleRepository.d.n = "'Segoe UI', Verdana";
            }
            return GridStyleRepository.d;
        }
        static get i() {
            if (GridStyleRepository.e == null) {
                GridStyleRepository.e = new FontInfo();
                GridStyleRepository.e.d = DeviceUtils.f(12);
                GridStyleRepository.e.n = "'Segoe UI', Verdana";
            }
            return GridStyleRepository.e;
        }
        static get ba() {
            if (GridStyleRepository.ah == null) {
                GridStyleRepository.ah = new Brush();
                GridStyleRepository.ah.color = Color.u(255, 210, 234, 253);
            }
            return GridStyleRepository.ah;
        }
        static get aw() {
            if (GridStyleRepository.t == null) {
                GridStyleRepository.t = ((() => {
                    let $ret = new Brush();
                    $ret.fill = "White";
                    return $ret;
                })());
            }
            return GridStyleRepository.t;
        }
        static get a1() {
            if (GridStyleRepository.y == null) {
                let a = "#f3f9fe";
                GridStyleRepository.y = ((() => {
                    let $ret = new Brush();
                    $ret.color = Color.u(255, 232, 244, 254);
                    return $ret;
                })());
            }
            return GridStyleRepository.y;
        }
        static get bh() {
            if (GridStyleRepository.ao == null) {
                let a = "#F8F8F8";
                GridStyleRepository.ao = ((() => {
                    let $ret = new Brush();
                    $ret.fill = a;
                    return $ret;
                })());
            }
            return GridStyleRepository.ao;
        }
        static get bl() {
            if (GridStyleRepository.as == null) {
                let a = "#181d1f";
                GridStyleRepository.as = ((() => {
                    let $ret = new Brush();
                    $ret.fill = a;
                    return $ret;
                })());
            }
            return GridStyleRepository.as;
        }
        static get bj() {
            if (GridStyleRepository.aq == null) {
                let a = "#181d1f";
                GridStyleRepository.aq = ((() => {
                    let $ret = new Brush();
                    $ret.fill = a;
                    return $ret;
                })());
            }
            return GridStyleRepository.aq;
        }
        static get a8() {
            if (GridStyleRepository.af == null) {
                let a = "#fafafa";
                GridStyleRepository.af = ((() => {
                    let $ret = new Brush();
                    $ret.fill = a;
                    return $ret;
                })());
            }
            return GridStyleRepository.af;
        }
        static get a7() {
            if (GridStyleRepository.ae == null) {
                GridStyleRepository.ae = ((() => {
                    let $ret = new Brush();
                    $ret.fill = "#f5f5dc";
                    return $ret;
                })());
            }
            return GridStyleRepository.ae;
        }
        static get bb() {
            if (GridStyleRepository.ai == null) {
                let a = "#ffffff";
                GridStyleRepository.ai = ((() => {
                    let $ret = new Brush();
                    $ret.fill = a;
                    return $ret;
                })());
            }
            return GridStyleRepository.ai;
        }
        static get a4() {
            if (GridStyleRepository.ab == null) {
                let a = "#ffffff";
                GridStyleRepository.ab = ((() => {
                    let $ret = new Brush();
                    $ret.fill = a;
                    return $ret;
                })());
            }
            return GridStyleRepository.ab;
        }
        static get a6() {
            if (GridStyleRepository.ad == null) {
                let a = "#f8f8f8";
                GridStyleRepository.ad = ((() => {
                    let $ret = new Brush();
                    $ret.fill = a;
                    return $ret;
                })());
            }
            return GridStyleRepository.ad;
        }
        static get a9() {
            if (GridStyleRepository.ag == null) {
                let a = "#fafafa";
                GridStyleRepository.ag = ((() => {
                    let $ret = new Brush();
                    $ret.fill = a;
                    return $ret;
                })());
            }
            return GridStyleRepository.ag;
        }
        static get bd() {
            if (GridStyleRepository.ak == null) {
                let a = "#0099FF";
                GridStyleRepository.ak = ((() => {
                    let $ret = new Brush();
                    $ret.fill = a;
                    return $ret;
                })());
            }
            return GridStyleRepository.ak;
        }
        static get be() {
            if (GridStyleRepository.al == null) {
                let a = "#181d1f";
                GridStyleRepository.al = ((() => {
                    let $ret = new Brush();
                    $ret.fill = a;
                    return $ret;
                })());
            }
            return GridStyleRepository.al;
        }
        static get ay() {
            if (GridStyleRepository.v == null) {
                let a = "#2196f3";
                GridStyleRepository.v = ((() => {
                    let $ret = new Brush();
                    $ret.fill = a;
                    return $ret;
                })());
            }
            return GridStyleRepository.v;
        }
        static get a5() {
            if (GridStyleRepository.ac == null) {
                let a = "#2196f3";
                GridStyleRepository.ac = ((() => {
                    let $ret = new Brush();
                    $ret.fill = a;
                    return $ret;
                })());
            }
            return GridStyleRepository.ac;
        }
        static get a3() {
            if (GridStyleRepository.aa == null) {
                let a = "#babfc7";
                GridStyleRepository.aa = ((() => {
                    let $ret = new Brush();
                    $ret.fill = a;
                    return $ret;
                })());
            }
            return GridStyleRepository.aa;
        }
        static get az() {
            if (GridStyleRepository.w == null) {
                let a = "#181d1f";
                GridStyleRepository.w = ((() => {
                    let $ret = new Brush();
                    $ret.fill = a;
                    return $ret;
                })());
            }
            return GridStyleRepository.w;
        }
        static get a() {
            return 2;
        }
        static get b() {
            return 3;
        }
        static get o() {
            return truncate(DeviceUtils.g(30));
        }
        static get p() {
            return truncate(DeviceUtils.g(36));
        }
        static get n() {
            return truncate(DeviceUtils.g(40));
        }
        static get ax() {
            if (GridStyleRepository.u == null) {
                let a = "#babfc7";
                GridStyleRepository.u = ((() => {
                    let $ret = new Brush();
                    $ret.fill = a;
                    return $ret;
                })());
            }
            return GridStyleRepository.u;
        }
        static get bp() {
            return GridStyleRepository.bo;
        }
        static get r() {
            return GridStyleRepository.q;
        }
        static get bg() {
            if (GridStyleRepository.an == null) {
                let a = "#ff0000";
                GridStyleRepository.an = ((() => {
                    let $ret = new Brush();
                    $ret.fill = a;
                    return $ret;
                })());
            }
            return GridStyleRepository.an;
        }
        static get bf() {
            if (GridStyleRepository.am == null) {
                GridStyleRepository.am = ((() => {
                    let $ret = new Brush();
                    $ret.color = Color.u(0, 0, 0, 0);
                    return $ret;
                })());
            }
            return GridStyleRepository.am;
        }
    }
    GridStyleRepository.$t = /*@__PURE__*/ markType(GridStyleRepository, 'GridStyleRepository');
    GridStyleRepository.ap = null;
    GridStyleRepository.ar = null;
    GridStyleRepository.aj = null;
    GridStyleRepository.z = null;
    GridStyleRepository.x = null;
    GridStyleRepository.at = null;
    GridStyleRepository.au = null;
    GridStyleRepository.s = null;
    GridStyleRepository.g = null;
    GridStyleRepository.f = null;
    GridStyleRepository.m = 0.54;
    GridStyleRepository.c = null;
    GridStyleRepository.d = null;
    GridStyleRepository.e = null;
    GridStyleRepository.ah = null;
    GridStyleRepository.t = null;
    GridStyleRepository.y = null;
    GridStyleRepository.ao = null;
    GridStyleRepository.as = null;
    GridStyleRepository.aq = null;
    GridStyleRepository.af = null;
    GridStyleRepository.ae = null;
    GridStyleRepository.ai = null;
    GridStyleRepository.ab = null;
    GridStyleRepository.ad = null;
    GridStyleRepository.ag = null;
    GridStyleRepository.ak = null;
    GridStyleRepository.al = null;
    GridStyleRepository.v = null;
    GridStyleRepository.ac = null;
    GridStyleRepository.aa = null;
    GridStyleRepository.w = null;
    GridStyleRepository.u = null;
    GridStyleRepository.bo = /*@__PURE__*/ new Thickness(0, 1);
    GridStyleRepository.q = /*@__PURE__*/ new CornerRadius(0, 3);
    GridStyleRepository.an = null;
    GridStyleRepository.am = null;
    return GridStyleRepository;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let CellModelExport = /*@__PURE__*/ (() => {
    class CellModelExport extends Base {
        constructor() {
            super(...arguments);
            this.r = 0;
            this.s = 0;
            this.n = 0;
            this.o = 0;
            this.k = 0;
            this.q = 0;
            this.m = 0;
            this.h = 0;
            this.l = 0;
            this.i = 0;
            this.a = null;
            this.b = null;
            this.d = 0;
            this.e = 0;
            this.aa = null;
            this.c = null;
            this.w = null;
            this.x = null;
            this.y = null;
            this.j = 0;
            this.u = null;
            this.v = null;
            this.p = 0;
            this.f = 0;
            this.t = 0;
            this.g = false;
            this.z = null;
        }
        ab() {
            let a = new StringBuilder(0);
            a.l("{ ");
            a.l("type : \"" + this.ac + "\", ");
            a.l("x : " + this.r + ", ");
            a.l("y : " + this.s + ", ");
            a.l("snappedX : " + this.n + ", ");
            a.l("snappedY : " + this.o + ", ");
            a.l("height : " + this.k + ", ");
            a.l("width : " + this.q + ", ");
            a.l("lineBreakMode: \"" + this.z + "\", ");
            a.l("selectedStatus : " + this.m + ", ");
            a.l("activationStatus : " + this.h + ", ");
            a.l("virtualizationPercentage : " + this.p + ", ");
            a.l("backgroundBrushData : " + this.a.serialize() + ", ");
            if (this.b != null) {
                a.l("borderBrushData : " + this.b.serialize() + ", ");
            }
            a.l("opacity : " + this.l + ", ");
            a.l("contentOpacity : " + this.i + ", ");
            if (this.d != null) {
                a.l("horizontalAlignment : " + this.d + ", ");
            }
            if (this.e != null) {
                a.l("verticalAlignment : " + this.e + ", ");
            }
            a.l("renderValue : \"" + this.aa + "\", ");
            if (this.c != null) {
                a.l("textColor : " + this.c.serialize() + ", ");
            }
            if (!stringIsNullOrEmpty(this.w)) {
                a.l("fontStyle : \"" + this.w + "\", ");
            }
            if (!stringIsNullOrEmpty(this.x)) {
                a.l("fontVariant : \"" + this.x + "\", ");
            }
            if (!stringIsNullOrEmpty(this.y)) {
                a.l("fontWeight : \"" + this.y + "\", ");
            }
            if (!stringIsNullOrEmpty(this.u)) {
                a.l("fontFamily : \"" + this.u + "\", ");
            }
            if (!stringIsNullOrEmpty(this.v)) {
                a.l("fontStretch : \"" + this.v + "\", ");
            }
            if (!isNaN_(this.j)) {
                a.l("fontSize : " + this.j + ", ");
            }
            a.l("sortDirection : " + this.f + ", ");
            a.l("indent : " + this.t + ", ");
            a.l("isCollapsable : " + this.g.toString().toLowerCase() + ", ");
            this.ad(a);
            let b = a.toString();
            if (stringEndsWith(b, ", ")) {
                b = b.substr(0, b.length - 2);
            }
            b += "} ";
            return b;
        }
        get_ac() {
            return "Cell";
        }
        get ac() {
            return this.get_ac();
        }
        ad(a) {
        }
    }
    CellModelExport.$t = /*@__PURE__*/ markType(CellModelExport, 'CellModelExport');
    return CellModelExport;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * Indicates how summaries are displayed inside groups.
 */
var GroupSummaryDisplayMode = /*@__PURE__*/ (function (GroupSummaryDisplayMode) {
    /**
     * Group summaries are displayed in a flat list in the spanning group header.
     */
    GroupSummaryDisplayMode[GroupSummaryDisplayMode["List"] = 0] = "List";
    /**
     * The group header is rendered as cells and summary values are rendered inside the cells
     * aligned with their column.
     */
    GroupSummaryDisplayMode[GroupSummaryDisplayMode["Cells"] = 1] = "Cells";
    /**
     * Group summaries are displayed as summary rows at the top of the group.
     */
    GroupSummaryDisplayMode[GroupSummaryDisplayMode["RowTop"] = 2] = "RowTop";
    /**
     * Group summaries are displayed as summary rows at the bottom of the group.
     */
    GroupSummaryDisplayMode[GroupSummaryDisplayMode["RowBottom"] = 3] = "RowBottom";
    /**
     * No summaries are displayed in the group.
     */
    GroupSummaryDisplayMode[GroupSummaryDisplayMode["None"] = 4] = "None";
    return GroupSummaryDisplayMode;
})({});
/**
 * @hidden
 */
let GroupSummaryDisplayMode_$type = /*@__PURE__*/ markEnum('GroupSummaryDisplayMode', 'List,0|Cells,1|RowTop,2|RowBottom,3|None,4');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let DateTimeCellModelExport = /*@__PURE__*/ (() => {
    class DateTimeCellModelExport extends CellModelExport {
        constructor() {
            super(...arguments);
            this.af = new Date();
            this.ag = 0;
            this.ae = false;
        }
        get_ac() {
            return "DateTimeCell";
        }
        ad(a) {
            super.ad(a);
            a.l("dateTimeFormat : " + this.ag + ", ");
        }
    }
    DateTimeCellModelExport.$t = /*@__PURE__*/ markType(DateTimeCellModelExport, 'DateTimeCellModelExport', CellModelExport.$);
    return DateTimeCellModelExport;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * Indicates what editor type to use for cell editing.
 */
var EditorType = /*@__PURE__*/ (function (EditorType) {
    /**
     * Default edit type used in cell editing.
     */
    EditorType[EditorType["Default"] = 0] = "Default";
    /**
     * Use a combo editor for cell editing.
     */
    EditorType[EditorType["Combo"] = 1] = "Combo";
    return EditorType;
})({});
/**
 * @hidden
 */
let EditorType_$type = /*@__PURE__*/ markEnum('EditorType', 'Default,0|Combo,1');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let EditorCellModelExport = /*@__PURE__*/ (() => {
    class EditorCellModelExport extends CellModelExport {
        constructor() {
            super(...arguments);
            this.af = false;
            this.ag = null;
            this.ae = 0;
            this.ah = null;
        }
        get_ac() {
            return "EditorCell";
        }
        ad(a) {
            super.ad(a);
            a.l("isHidden: " + this.af.toString().toLowerCase() + ", ");
            a.l("editValue: '" + this.ag + "', ");
            a.l("dataType: '" + enumGetBox(DataSourceSchemaPropertyType_$type, this.ae) + "', ");
            a.l("errorMessage: '" + this.ah + "', ");
        }
    }
    EditorCellModelExport.$t = /*@__PURE__*/ markType(EditorCellModelExport, 'EditorCellModelExport', CellModelExport.$);
    return EditorCellModelExport;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let SummaryCellModelExport = /*@__PURE__*/ (() => {
    class SummaryCellModelExport extends CellModelExport {
        constructor() {
            super(...arguments);
            this.ai = null;
            this.ao = null;
            this.ae = null;
            this.af = null;
            this.al = null;
            this.am = null;
            this.an = null;
            this.ag = 0;
            this.aj = null;
            this.ak = null;
            this.ar = null;
            this.as = null;
            this.at = null;
            this.ah = 0;
            this.ap = null;
            this.aq = null;
        }
        get_ac() {
            return "SummaryCell";
        }
        ad(a) {
            super.ad(a);
            a.l("summaryLabel : \"" + this.ai + "\", ");
            a.l("summaryValue : \"" + this.ao + "\", ");
            if (this.ae != null) {
                a.l("summaryLabelColor : " + this.ae.serialize() + ", ");
            }
            if (this.af != null) {
                a.l("summaryValueColor : " + this.af.serialize() + ", ");
            }
            if (!stringIsNullOrEmpty(this.al)) {
                a.l("summaryLabelFontStyle : \"" + this.al + "\", ");
            }
            if (!stringIsNullOrEmpty(this.am)) {
                a.l("summaryLabelFontVariant : \"" + this.am + "\", ");
            }
            if (!stringIsNullOrEmpty(this.an)) {
                a.l("summaryLabelFontWeight : \"" + this.an + "\", ");
            }
            if (!isNaN_(this.ag)) {
                a.l("summaryLabelFontSize : " + this.ag + ", ");
            }
            if (!stringIsNullOrEmpty(this.aj)) {
                a.l("summaryLabelFontFamily : \"" + this.aj + "\", ");
            }
            if (!stringIsNullOrEmpty(this.ak)) {
                a.l("summaryLabelFontStretch : \"" + this.ak + "\", ");
            }
            if (!stringIsNullOrEmpty(this.ar)) {
                a.l("summaryValueFontStyle : \"" + this.ar + "\", ");
            }
            if (!stringIsNullOrEmpty(this.as)) {
                a.l("summaryValueFontVariant : \"" + this.as + "\", ");
            }
            if (!stringIsNullOrEmpty(this.at)) {
                a.l("summaryValueFontWeight : \"" + this.at + "\", ");
            }
            if (!isNaN_(this.ah)) {
                a.l("summaryValueFontSize : " + this.ah + ", ");
            }
            if (!stringIsNullOrEmpty(this.ap)) {
                a.l("summaryValueFontFamily : \"" + this.ap + "\", ");
            }
            if (!stringIsNullOrEmpty(this.aq)) {
                a.l("summaryValueFontStretch : \"" + this.aq + "\", ");
            }
        }
    }
    SummaryCellModelExport.$t = /*@__PURE__*/ markType(SummaryCellModelExport, 'SummaryCellModelExport', CellModelExport.$);
    return SummaryCellModelExport;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * Indicates how the images will be stretched.
 */
var ImageStretchOptions = /*@__PURE__*/ (function (ImageStretchOptions) {
    /**
     * Images stretch but try to maintain aspect ratio.
     */
    ImageStretchOptions[ImageStretchOptions["Uniform"] = 0] = "Uniform";
    /**
     * Image fills all available space but breaks aspect ratio.
     */
    ImageStretchOptions[ImageStretchOptions["Fill"] = 1] = "Fill";
    /**
     * Image is displayed unstreteched.
     */
    ImageStretchOptions[ImageStretchOptions["None"] = 2] = "None";
    return ImageStretchOptions;
})({});
/**
 * @hidden
 */
let ImageStretchOptions_$type = /*@__PURE__*/ markEnum('ImageStretchOptions', 'Uniform,0|Fill,1|None,2');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * Indicates the image resource type to use.
 */
var ImageResourceType = /*@__PURE__*/ (function (ImageResourceType) {
    /**
     * Image resource type will attempt to be determined from any scheme specifiers on the paths.
     */
    ImageResourceType[ImageResourceType["Unspecified"] = 0] = "Unspecified";
    /**
     * Images are a local platform specific resource in the application.
     */
    ImageResourceType[ImageResourceType["LocalResource"] = 1] = "LocalResource";
    /**
     * Images are a local platform specific asset in the application. For platforms that don't support assets, this will fall back on local resource.
     */
    ImageResourceType[ImageResourceType["LocalAsset"] = 2] = "LocalAsset";
    /**
     * Images are a .NET embedded resource in the application. Path needs to be a valid embedded resource identifier.
     */
    ImageResourceType[ImageResourceType["EmbeddedResource"] = 3] = "EmbeddedResource";
    /**
     * Images are a remote URL resource.
     */
    ImageResourceType[ImageResourceType["RemoteResource"] = 4] = "RemoteResource";
    return ImageResourceType;
})({});
/**
 * @hidden
 */
let ImageResourceType_$type = /*@__PURE__*/ markEnum('ImageResourceType', 'Unspecified,0|LocalResource,1|LocalAsset,2|EmbeddedResource,3|RemoteResource,4');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let ImageCellModelExport = /*@__PURE__*/ (() => {
    class ImageCellModelExport extends CellModelExport {
        constructor() {
            super(...arguments);
            this.ae = null;
        }
        get_ac() {
            return "ImageCell";
        }
        ad(a) {
            super.ad(a);
            a.l("imagePath : \"" + this.ae + "\", ");
        }
    }
    ImageCellModelExport.$t = /*@__PURE__*/ markType(ImageCellModelExport, 'ImageCellModelExport', CellModelExport.$);
    return ImageCellModelExport;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let NumericCellModelExport = /*@__PURE__*/ (() => {
    class NumericCellModelExport extends CellModelExport {
        constructor() {
            super(...arguments);
            this.ae = 0;
            this.af = 0;
            this.ag = 0;
        }
        get_ac() {
            return "NumericCell";
        }
        ad(a) {
            super.ad(a);
            a.l("numericValue : " + this.ae + ", ");
            a.l("maxDecimalPlaces : " + this.af + ", ");
            a.l("minDecimalPlaces : " + this.ag + ", ");
        }
    }
    NumericCellModelExport.$t = /*@__PURE__*/ markType(NumericCellModelExport, 'NumericCellModelExport', CellModelExport.$);
    return NumericCellModelExport;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let RowSeparatorModelExport = /*@__PURE__*/ (() => {
    class RowSeparatorModelExport extends CellModelExport {
        get_ac() {
            return "RowSeparator";
        }
        ad(a) {
            super.ad(a);
        }
    }
    RowSeparatorModelExport.$t = /*@__PURE__*/ markType(RowSeparatorModelExport, 'RowSeparatorModelExport', CellModelExport.$);
    return RowSeparatorModelExport;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GroupData = /*@__PURE__*/ (() => {
    class GroupData extends Base {
        constructor() {
            super(...arguments);
            this.c = null;
            this.a = null;
            this.b = null;
        }
    }
    GroupData.$t = /*@__PURE__*/ markType(GroupData, 'GroupData');
    return GroupData;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let SummaryData = /*@__PURE__*/ (() => {
    class SummaryData extends Base {
        constructor() {
            super(...arguments);
            this.e = null;
            this.b = null;
            this.a = 0;
            this.c = null;
            this.d = null;
        }
    }
    SummaryData.$t = /*@__PURE__*/ markType(SummaryData, 'SummaryData');
    return SummaryData;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let SectionHeaderCellModelExport = /*@__PURE__*/ (() => {
    class SectionHeaderCellModelExport extends CellModelExport {
        constructor() {
            super(...arguments);
            this.af = null;
            this.ag = null;
            this.ae = null;
            this.al = null;
            this.ai = null;
            this.ak = null;
            this.aj = null;
            this.ah = null;
            this.am = null;
        }
        get_ac() {
            return "SectionHeaderCell";
        }
        ad(a) {
            super.ad(a);
            let b = "groupNames : [ ";
            let c = "groupValues : [ ";
            for (let d = 0; d < this.af.length; d++) {
                b += "\"" + this.af[d] + "\", ";
                c += "\"" + this.ag[d] + "\", ";
            }
            let e = "summaryNames : [ ";
            let f = "summaryValues : [ ";
            let g = "summaryOperands : [ ";
            let h = "summaryFormattedText : [ ";
            if (this.ai != null) {
                for (let i = 0; i < this.ai.length; i++) {
                    e += "\"" + this.ai[i] + "\", ";
                    f += "\"" + this.ak[i] + "\", ";
                    g += "\"" + enumGetBox(SummaryOperand_$type, this.aj[i]) + "\", ";
                    h += "\"" + this.ah[i] + "\", ";
                }
            }
            a.l(b + " ], ");
            a.l(c + " ], ");
            a.l("formattedText : \"" + this.al + "\", ");
            a.l(e + " ], ");
            a.l(f + " ], ");
            a.l(g + " ], ");
            a.l(h + " ], ");
            a.l("fullSummaryFormattedText : \"" + this.am + "\", ");
        }
    }
    SectionHeaderCellModelExport.$t = /*@__PURE__*/ markType(SectionHeaderCellModelExport, 'SectionHeaderCellModelExport', CellModelExport.$);
    return SectionHeaderCellModelExport;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let TemplateCellModelExport = /*@__PURE__*/ (() => {
    class TemplateCellModelExport extends CellModelExport {
        constructor() {
            super(...arguments);
            this.ae = null;
        }
        get_ac() {
            return "TemplateCell";
        }
        ad(a) {
            super.ad(a);
        }
    }
    TemplateCellModelExport.$t = /*@__PURE__*/ markType(TemplateCellModelExport, 'TemplateCellModelExport', CellModelExport.$);
    return TemplateCellModelExport;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let TextCellModelExport = /*@__PURE__*/ (() => {
    class TextCellModelExport extends CellModelExport {
        constructor() {
            super(...arguments);
            this.af = null;
            this.ae = null;
        }
        get_ac() {
            return "TextCell";
        }
        ad(a) {
            super.ad(a);
            a.l("textValue : \"" + this.af + "\", ");
            a.l("formatString : \"" + this.ae + "\", ");
        }
    }
    TextCellModelExport.$t = /*@__PURE__*/ markType(TextCellModelExport, 'TextCellModelExport', CellModelExport.$);
    return TextCellModelExport;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
var SortIndicatorStyle = /*@__PURE__*/ (function (SortIndicatorStyle) {
    /**
     * The sort indicator is rendered as a single arrow that points in the direction of the sort.
     */
    SortIndicatorStyle[SortIndicatorStyle["Default"] = 0] = "Default";
    /**
     * The sort indicator is rendered as two arrows pointing opposite of each other.  The direction of the sort determines which arrow
     * is faded and which is fully opaque.
     */
    SortIndicatorStyle[SortIndicatorStyle["FadingUpDownArrows"] = 1] = "FadingUpDownArrows";
    /**
     * The sort indicator is rendered as two arrows without the stem, one ontop of the other.  The direction of the sort determines which arrow
     * is faded and which is fully opaque.
     */
    SortIndicatorStyle[SortIndicatorStyle["FadingSimpleUpDownArrows"] = 2] = "FadingSimpleUpDownArrows";
    /**
     * No style is set.
     */
    SortIndicatorStyle[SortIndicatorStyle["Unset"] = 3] = "Unset";
    return SortIndicatorStyle;
})({});
/**
 * @hidden
 */
let SortIndicatorStyle_$type = /*@__PURE__*/ markEnum('SortIndicatorStyle', 'Default,0|FadingUpDownArrows,1|FadingSimpleUpDownArrows,2|Unset,3');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * Indicates what type of alignment to use for the column options icon.
 */
var ColumnOptionsIconAlignment = /*@__PURE__*/ (function (ColumnOptionsIconAlignment) {
    /**
     * Use the default alignment.
     */
    ColumnOptionsIconAlignment[ColumnOptionsIconAlignment["Unset"] = 0] = "Unset";
    /**
     * The icon is not aligned so it will appear alongside the header text.
     */
    ColumnOptionsIconAlignment[ColumnOptionsIconAlignment["None"] = 1] = "None";
    /**
     * The icon is aligned with the edge of the column but opposite the alignment of the header text.
     */
    ColumnOptionsIconAlignment[ColumnOptionsIconAlignment["Opposite"] = 2] = "Opposite";
    return ColumnOptionsIconAlignment;
})({});
/**
 * @hidden
 */
let ColumnOptionsIconAlignment_$type = /*@__PURE__*/ markEnum('ColumnOptionsIconAlignment', 'Unset,0|None,1|Opposite,2');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * Indicates how the column options icon will behave in the column header cell.
 */
var ColumnOptionsIconBehavior = /*@__PURE__*/ (function (ColumnOptionsIconBehavior) {
    /**
     * Use the default behavior which is AppearOnHoverAnimate.
     */
    ColumnOptionsIconBehavior[ColumnOptionsIconBehavior["Unset"] = 0] = "Unset";
    /**
     * The column options icon is always visible.
     */
    ColumnOptionsIconBehavior[ColumnOptionsIconBehavior["AlwaysVisible"] = 1] = "AlwaysVisible";
    /**
     * The column options icon will appear when the header cell is hovered.
     */
    ColumnOptionsIconBehavior[ColumnOptionsIconBehavior["AppearOnHover"] = 2] = "AppearOnHover";
    /**
     * The column options icon will animate into view when the header cell is hovered.
     */
    ColumnOptionsIconBehavior[ColumnOptionsIconBehavior["AppearOnHoverAnimate"] = 3] = "AppearOnHoverAnimate";
    return ColumnOptionsIconBehavior;
})({});
/**
 * @hidden
 */
let ColumnOptionsIconBehavior_$type = /*@__PURE__*/ markEnum('ColumnOptionsIconBehavior', 'Unset,0|AlwaysVisible,1|AppearOnHover,2|AppearOnHoverAnimate,3');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let TextHeaderCellModelExport = /*@__PURE__*/ (() => {
    class TextHeaderCellModelExport extends TextCellModelExport {
        get_ac() {
            return "TextHeaderCell";
        }
        ad(a) {
            super.ad(a);
        }
    }
    TextHeaderCellModelExport.$t = /*@__PURE__*/ markType(TextHeaderCellModelExport, 'TextHeaderCellModelExport', TextCellModelExport.$);
    return TextHeaderCellModelExport;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * Indicates what should occur when entering edit mode.
 */
var EditModeType = /*@__PURE__*/ (function (EditModeType) {
    /**
     * Edit mode is disabled.
     */
    EditModeType[EditModeType["None"] = 0] = "None";
    /**
     * Allow cells to enter edit mode and commit the value on exit.
     */
    EditModeType[EditModeType["Cell"] = 1] = "Cell";
    /**
     * Allows cells to enter edit mode but changes will be cached for later commit.
     */
    EditModeType[EditModeType["CellBatch"] = 2] = "CellBatch";
    /**
     * Allow rows to enter edit mode and commit the value on exit.
     */
    EditModeType[EditModeType["Row"] = 3] = "Row";
    return EditModeType;
})({});
/**
 * @hidden
 */
let EditModeType_$type = /*@__PURE__*/ markEnum('EditModeType', 'None,0|Cell,1|CellBatch,2|Row,3');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
var ColumnResizingMode = /*@__PURE__*/ (function (ColumnResizingMode) {
    ColumnResizingMode[ColumnResizingMode["Deferred"] = 0] = "Deferred";
    ColumnResizingMode[ColumnResizingMode["Immediate"] = 1] = "Immediate";
    ColumnResizingMode[ColumnResizingMode["None"] = 2] = "None";
    return ColumnResizingMode;
})({});
/**
 * @hidden
 */
let ColumnResizingMode_$type = /*@__PURE__*/ markEnum('ColumnResizingMode', 'Deferred,0|Immediate,1|None,2');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
var ColumnMovingMode = /*@__PURE__*/ (function (ColumnMovingMode) {
    ColumnMovingMode[ColumnMovingMode["Deferred"] = 0] = "Deferred";
    ColumnMovingMode[ColumnMovingMode["None"] = 1] = "None";
    return ColumnMovingMode;
})({});
/**
 * @hidden
 */
let ColumnMovingMode_$type = /*@__PURE__*/ markEnum('ColumnMovingMode', 'Deferred,0|None,1');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let ColumnWidth = /*@__PURE__*/ (() => {
    class ColumnWidth extends Base {
        constructor() {
            super(...arguments);
            this.g = null;
            this.c = false;
            this.f = 0;
            this.d = 0;
        }
        get e() {
            return this.d;
        }
        set e(a) {
            this.d = a;
        }
        static get a() {
            return ((() => {
                let $ret = new ColumnWidth();
                $ret.c = true;
                $ret.e = 0;
                $ret.f = 1;
                return $ret;
            })());
        }
        static parse(a) {
            if (a == null) {
                return new ColumnWidth();
            }
            a = a.trim();
            let b = stringContains(a, "*");
            if (b || stringContains(a, "min=") || stringContains(a, "Min=") || stringContains(a, ",")) {
                let c = new ColumnWidth();
                c.c = b;
                a = stringReplace(a, " ", "");
                a = stringReplace(a, "min=", ",");
                a = stringReplace(a, "Min=", ",");
                a = stringReplace(a, "*,,", "*");
                a = stringReplace(a, "*,", "*");
                a = stringReplace(a, ",,", ",");
                let d = a.split('*');
                let e = new List$1(String_$type, 0);
                for (let f = 0; f < d.length; f++) {
                    let g = d[f].split(',');
                    for (let h = 0; h < g.length; h++) {
                        e.add(g[h]);
                    }
                }
                let i = e._inner[0];
                if (i != null) {
                    i = i.trim();
                }
                let j;
                if (stringIsNullOrEmpty(i)) {
                    j = 1;
                }
                else {
                    if (!((() => { let k = tryParseNumber(i, j); j = k.p1; return k.ret; })())) {
                        return new ColumnWidth();
                    }
                }
                c.f = j;
                if (e.count > 1 && e._inner[1] != null) {
                    e._inner[1] = stringReplace(e._inner[1], ">", "");
                    let k;
                    if (((() => { let l = tryParseNumber(e._inner[1], k); k = l.p1; return l.ret; })())) {
                        c.e = k;
                    }
                }
                return c;
            }
            else {
                let l = new ColumnWidth();
                l.c = false;
                let m;
                if (!((() => { let n = tryParseNumber(a, m); m = n.p1; return n.ret; })())) {
                    return new ColumnWidth();
                }
                l.f = m;
                return l;
            }
        }
    }
    ColumnWidth.$t = /*@__PURE__*/ markType(ColumnWidth, 'ColumnWidth');
    return ColumnWidth;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * Indicates what should occur on a header click event.
 */
var HeaderClickAction = /*@__PURE__*/ (function (HeaderClickAction) {
    /**
     * Sorting by one column is permitted and toggles between ascending and descending.
     */
    HeaderClickAction[HeaderClickAction["SortByOneColumnOnly"] = 0] = "SortByOneColumnOnly";
    /**
     * Sorting by multiple columns is permitted and each toggle between ascending and descending.
     */
    HeaderClickAction[HeaderClickAction["SortByMultipleColumns"] = 1] = "SortByMultipleColumns";
    /**
     * Sorting by one column is permitted and toggles between ascending, descending and unsorted.
     */
    HeaderClickAction[HeaderClickAction["SortByOneColumnOnlyTriState"] = 2] = "SortByOneColumnOnlyTriState";
    /**
     * Sorting by multiple columns is permitted and toggles between ascending, descending and unsorted.
     */
    HeaderClickAction[HeaderClickAction["SortByMultipleColumnsTriState"] = 3] = "SortByMultipleColumnsTriState";
    /**
     * No action is triggered.
     */
    HeaderClickAction[HeaderClickAction["None"] = 4] = "None";
    return HeaderClickAction;
})({});
/**
 * @hidden
 */
let HeaderClickAction_$type = /*@__PURE__*/ markEnum('HeaderClickAction', 'SortByOneColumnOnly,0|SortByMultipleColumns,1|SortByOneColumnOnlyTriState,2|SortByMultipleColumnsTriState,3|None,4');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * Indicates what type of click action will activate edit mode.
 */
var EditModeClickAction = /*@__PURE__*/ (function (EditModeClickAction) {
    /**
     * Mouse clicks will be ignored for edit mode activation.
     */
    EditModeClickAction[EditModeClickAction["None"] = 0] = "None";
    /**
     * A single click is required to enter edit mode.
     */
    EditModeClickAction[EditModeClickAction["SingleClick"] = 1] = "SingleClick";
    /**
     * A double click is required to enter edit mode.
     */
    EditModeClickAction[EditModeClickAction["DoubleClick"] = 2] = "DoubleClick";
    return EditModeClickAction;
})({});
/**
 * @hidden
 */
let EditModeClickAction_$type = /*@__PURE__*/ markEnum('EditModeClickAction', 'None,0|SingleClick,1|DoubleClick,2');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * Enumerates the options for how columns animate into view.
 */
var ColumnShowingAnimationMode = /*@__PURE__*/ (function (ColumnShowingAnimationMode) {
    /**
     * Automatically selects the correct animation mode.
     */
    ColumnShowingAnimationMode[ColumnShowingAnimationMode["Auto"] = 0] = "Auto";
    /**
     * No animation should be performed.
     */
    ColumnShowingAnimationMode[ColumnShowingAnimationMode["None"] = 1] = "None";
    /**
     * Cells slide in from the left.
     */
    ColumnShowingAnimationMode[ColumnShowingAnimationMode["SlideFromLeft"] = 2] = "SlideFromLeft";
    /**
     * Cells slide in from the right.
     */
    ColumnShowingAnimationMode[ColumnShowingAnimationMode["SlideFromRight"] = 3] = "SlideFromRight";
    /**
     * Cells slide in from the top.
     */
    ColumnShowingAnimationMode[ColumnShowingAnimationMode["SlideFromTop"] = 4] = "SlideFromTop";
    /**
     * Cells slide in from the bottom.
     */
    ColumnShowingAnimationMode[ColumnShowingAnimationMode["SlideFromBottom"] = 5] = "SlideFromBottom";
    /**
     * Cells fade in.
     */
    ColumnShowingAnimationMode[ColumnShowingAnimationMode["FadeIn"] = 6] = "FadeIn";
    /**
     * Cells slide in from the left and fade in.
     */
    ColumnShowingAnimationMode[ColumnShowingAnimationMode["SlideFromLeftAndFadeIn"] = 7] = "SlideFromLeftAndFadeIn";
    /**
     * Cells slide in from the right and fade in.
     */
    ColumnShowingAnimationMode[ColumnShowingAnimationMode["SlideFromRightAndFadeIn"] = 8] = "SlideFromRightAndFadeIn";
    /**
     * Cells slide in from the top and fade in.
     */
    ColumnShowingAnimationMode[ColumnShowingAnimationMode["SlideFromTopAndFadeIn"] = 9] = "SlideFromTopAndFadeIn";
    /**
     * Cells slide in from the bottom and fade in.
     */
    ColumnShowingAnimationMode[ColumnShowingAnimationMode["SlideFromBottomAndFadeIn"] = 10] = "SlideFromBottomAndFadeIn";
    return ColumnShowingAnimationMode;
})({});
/**
 * @hidden
 */
let ColumnShowingAnimationMode_$type = /*@__PURE__*/ markEnum('ColumnShowingAnimationMode', 'Auto,0|None,1|SlideFromLeft,2|SlideFromRight,3|SlideFromTop,4|SlideFromBottom,5|FadeIn,6|SlideFromLeftAndFadeIn,7|SlideFromRightAndFadeIn,8|SlideFromTopAndFadeIn,9|SlideFromBottomAndFadeIn,10');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * Enumerates the options for how changes to column properties are animated.
 */
var ColumnPropertyUpdatingAnimationMode = /*@__PURE__*/ (function (ColumnPropertyUpdatingAnimationMode) {
    /**
     * Automatically decides on the animation mode to use.
     */
    ColumnPropertyUpdatingAnimationMode[ColumnPropertyUpdatingAnimationMode["Auto"] = 0] = "Auto";
    /**
     * No animation is performed.
     */
    ColumnPropertyUpdatingAnimationMode[ColumnPropertyUpdatingAnimationMode["None"] = 1] = "None";
    /**
     * The previous value and the next value are interpolated between.
     */
    ColumnPropertyUpdatingAnimationMode[ColumnPropertyUpdatingAnimationMode["Interpolate"] = 2] = "Interpolate";
    /**
     * Deep values within the previous and next value are interpolated between.
     */
    ColumnPropertyUpdatingAnimationMode[ColumnPropertyUpdatingAnimationMode["InterpolateDeep"] = 3] = "InterpolateDeep";
    return ColumnPropertyUpdatingAnimationMode;
})({});
/**
 * @hidden
 */
let ColumnPropertyUpdatingAnimationMode_$type = /*@__PURE__*/ markEnum('ColumnPropertyUpdatingAnimationMode', 'Auto,0|None,1|Interpolate,2|InterpolateDeep,3');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * Enumerates the options for how data loaded animations are displayed.
 */
var CellDataLoadedAnimationMode = /*@__PURE__*/ (function (CellDataLoadedAnimationMode) {
    /**
     * The correct animation mode is automatically selected.
     */
    CellDataLoadedAnimationMode[CellDataLoadedAnimationMode["Auto"] = 0] = "Auto";
    /**
     * No animation is performed.
     */
    CellDataLoadedAnimationMode[CellDataLoadedAnimationMode["None"] = 1] = "None";
    /**
     * The previous value and the next value are crossfaded between.
     */
    CellDataLoadedAnimationMode[CellDataLoadedAnimationMode["CrossFade"] = 2] = "CrossFade";
    return CellDataLoadedAnimationMode;
})({});
/**
 * @hidden
 */
let CellDataLoadedAnimationMode_$type = /*@__PURE__*/ markEnum('CellDataLoadedAnimationMode', 'Auto,0|None,1|CrossFade,2');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * Enumerates the option for how row selection is animated.
 */
var RowSelectionAnimationMode = /*@__PURE__*/ (function (RowSelectionAnimationMode) {
    /**
     * The correct animation mode is automatically selected.
     */
    RowSelectionAnimationMode[RowSelectionAnimationMode["Auto"] = 0] = "Auto";
    /**
     * No animation is performed.
     */
    RowSelectionAnimationMode[RowSelectionAnimationMode["None"] = 1] = "None";
    /**
     * The selection color and the normal background color are blended between.
     */
    RowSelectionAnimationMode[RowSelectionAnimationMode["ColorBlend"] = 2] = "ColorBlend";
    return RowSelectionAnimationMode;
})({});
/**
 * @hidden
 */
let RowSelectionAnimationMode_$type = /*@__PURE__*/ markEnum('RowSelectionAnimationMode', 'Auto,0|None,1|ColorBlend,2');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * Enumerates the option for how row selection is animated.
 */
var RowHoverAnimationMode = /*@__PURE__*/ (function (RowHoverAnimationMode) {
    /**
     * The correct animation mode is automatically selected.
     */
    RowHoverAnimationMode[RowHoverAnimationMode["Auto"] = 0] = "Auto";
    /**
     * No animation is performed.
     */
    RowHoverAnimationMode[RowHoverAnimationMode["None"] = 1] = "None";
    /**
     * The selection color and the normal background color are blended between.
     */
    RowHoverAnimationMode[RowHoverAnimationMode["ColorBlend"] = 2] = "ColorBlend";
    return RowHoverAnimationMode;
})({});
/**
 * @hidden
 */
let RowHoverAnimationMode_$type = /*@__PURE__*/ markEnum('RowHoverAnimationMode', 'Auto,0|None,1|ColorBlend,2');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * Enumerates the options for how cell selection is animated.
 */
var CellSelectionAnimationMode = /*@__PURE__*/ (function (CellSelectionAnimationMode) {
    /**
     * The correct animation mode is automatically selected.
     */
    CellSelectionAnimationMode[CellSelectionAnimationMode["Auto"] = 0] = "Auto";
    /**
     * No animation is performed.
     */
    CellSelectionAnimationMode[CellSelectionAnimationMode["None"] = 1] = "None";
    /**
     * The selection color and the normal background color are blended between.
     */
    CellSelectionAnimationMode[CellSelectionAnimationMode["ColorBlend"] = 2] = "ColorBlend";
    return CellSelectionAnimationMode;
})({});
/**
 * @hidden
 */
let CellSelectionAnimationMode_$type = /*@__PURE__*/ markEnum('CellSelectionAnimationMode', 'Auto,0|None,1|ColorBlend,2');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * Indicates the built in easing type to use for an animation.
 */
var GridEasingFunctionType = /*@__PURE__*/ (function (GridEasingFunctionType) {
    /**
     * Use linear easing.
     */
    GridEasingFunctionType[GridEasingFunctionType["Linear"] = 0] = "Linear";
    /**
     * Use cubic in/out easing.
     */
    GridEasingFunctionType[GridEasingFunctionType["CubicInOut"] = 1] = "CubicInOut";
    /**
     * Use exponential in/out easing.
     */
    GridEasingFunctionType[GridEasingFunctionType["ExponentialInOut"] = 2] = "ExponentialInOut";
    /**
     * Use circle in/out easing.
     */
    GridEasingFunctionType[GridEasingFunctionType["CircleInOut"] = 3] = "CircleInOut";
    return GridEasingFunctionType;
})({});
/**
 * @hidden
 */
let GridEasingFunctionType_$type = /*@__PURE__*/ markEnum('GridEasingFunctionType', 'Linear,0|CubicInOut,1|ExponentialInOut,2|CircleInOut,3');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridAnimationPhaseSettings = /*@__PURE__*/ (() => {
    class GridAnimationPhaseSettings extends Base {
        constructor() {
            super(...arguments);
            this.p = null;
            this.g = 300;
            this.h = 0;
            this.i = -1;
            this.j = -1;
            this.f = 300;
            this.d = false;
            this.b = 1;
            this.propertyChanged = null;
        }
        get l() {
            return this.g;
        }
        set l(a) {
            let b = this.g;
            this.g = a;
            if (b != this.g) {
                this.x("DurationMilliseconds", b, this.g);
            }
        }
        get m() {
            return this.h;
        }
        set m(a) {
            let b = this.h;
            this.h = a;
            if (b != this.h) {
                this.x("HoldInitialMilliseconds", b, this.h);
            }
        }
        get n() {
            return this.i;
        }
        set n(a) {
            let b = this.i;
            this.i = a;
            if (b != this.i) {
                this.x("PerItemDelayMilliseconds", b, this.i);
            }
        }
        get o() {
            return this.j;
        }
        set o(a) {
            let b = this.j;
            this.j = a;
            if (b != this.j) {
                this.x("SubItemDurationMilliseconds", b, this.j);
            }
        }
        get k() {
            return this.f;
        }
        set k(a) {
            let b = this.f;
            this.f = a;
            if (b != this.f) {
                this.x("DesiredSubItemDurationMilliseconds", b, this.f);
            }
        }
        get e() {
            return this.d;
        }
        set e(a) {
            let b = this.d;
            this.d = a;
            if (b != this.d) {
                this.x("ShouldItemsFinishSimultaneously", b, this.d);
            }
        }
        get c() {
            return this.b;
        }
        set c(a) {
            let b = this.b;
            this.b = a;
            if (b != this.b) {
                this.x("EasingFunctionType", enumGetBox(GridEasingFunctionType_$type, b), enumGetBox(GridEasingFunctionType_$type, this.b));
            }
        }
        x(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
        }
        a() {
            return ((() => {
                let $ret = new GridAnimationPhaseSettings();
                $ret.l = this.l;
                $ret.c = this.c;
                $ret.m = this.m;
                $ret.n = this.n;
                $ret.e = this.e;
                $ret.o = this.o;
                $ret.k = this.k;
                return $ret;
            })());
        }
    }
    GridAnimationPhaseSettings.$t = /*@__PURE__*/ markType(GridAnimationPhaseSettings, 'GridAnimationPhaseSettings', Base.$, [INotifyPropertyChanged_$type]);
    return GridAnimationPhaseSettings;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridColumnAnimationSettings = /*@__PURE__*/ (() => {
    class GridColumnAnimationSettings extends Base {
        constructor() {
            super();
            this.y = null;
            this.i = null;
            this.a = null;
            this.b = null;
            this.k = null;
            this.l = null;
            this.j = null;
            this.g = null;
            this.h = null;
            this.e = null;
            this.f = null;
            this.d = null;
            this.c = null;
            this.propertyChanged = null;
            this.a = new GridAnimationPhaseSettings();
            this.a.l = 1000;
            this.a.c = 1;
            this.a.m = 500;
            this.a.e = false;
            this.k = this.a.a();
            this.i = new GridAnimationPhaseSettings();
            this.i.l = 1000;
            this.i.c = 1;
            this.i.e = false;
            this.b = new GridAnimationPhaseSettings();
            this.b.c = 1;
            this.b.l = 300;
            this.l = this.b.a();
            this.e = this.a.a();
            this.e.m = 0;
            this.f = new GridAnimationPhaseSettings();
            this.f.m = 1200;
            this.f.l = 300;
            this.f.c = 1;
            this.g = new GridAnimationPhaseSettings();
            this.g.l = 1000;
            this.g.c = 1;
            this.g.m = 500;
            this.g.e = false;
            this.h = new GridAnimationPhaseSettings();
            this.h.c = 1;
            this.h.l = 800;
            this.d = this.a.a();
            this.d.m = 0;
            this.c = new GridAnimationPhaseSettings();
            this.c.m = 0;
            this.c.l = 300;
            this.c.c = 0;
            this.j = new GridAnimationPhaseSettings();
            this.j.c = 1;
            this.j.l = 200;
        }
        get u() {
            return this.i;
        }
        set u(a) {
            let b = this.i;
            this.i = a;
            this.av("ColumnPropertyUpdatingMainPhase", b, this.i);
        }
        get m() {
            return this.a;
        }
        set m(a) {
            let b = this.a;
            this.a = a;
            this.av("ColumnAddingMainPhase", b, this.a);
        }
        get n() {
            return this.b;
        }
        set n(a) {
            let b = this.b;
            this.b = a;
            this.av("ColumnAddingPrePhase", b, this.b);
        }
        get w() {
            return this.k;
        }
        set w(a) {
            let b = this.k;
            this.k = a;
            this.av("ColumnShowingMainPhase", b, this.k);
        }
        get x() {
            return this.l;
        }
        set x(a) {
            let b = this.l;
            this.l = a;
            this.av("ColumnShowingPrePhase", b, this.l);
        }
        get v() {
            return this.j;
        }
        set v(a) {
            let b = this.j;
            this.j = a;
            this.av("ColumnResizingMainPhase", b, this.j);
        }
        get s() {
            return this.g;
        }
        set s(a) {
            let b = this.g;
            this.g = a;
            this.av("ColumnMovingMainPhase", b, this.g);
        }
        get t() {
            return this.h;
        }
        set t(a) {
            let b = this.h;
            this.h = a;
            this.av("ColumnMovingPrePhase", b, this.h);
        }
        get q() {
            return this.e;
        }
        set q(a) {
            let b = this.e;
            this.e = a;
            this.av("ColumnHidingMainPhase", b, this.e);
        }
        get r() {
            return this.f;
        }
        set r(a) {
            let b = this.f;
            this.f = a;
            this.av("ColumnHidingPostPhase", b, this.f);
        }
        get p() {
            return this.d;
        }
        set p(a) {
            let b = this.d;
            this.d = a;
            this.av("ColumnExchangingMainPhase", b, this.d);
        }
        get o() {
            return this.c;
        }
        set o(a) {
            let b = this.c;
            this.c = a;
            this.av("ColumnExchangingCleanupPhase", b, this.c);
        }
        av(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            this.aw(a, b, c);
        }
        aw(a, b, c) {
            switch (a) {
                case "ColumnAddingMainPhase":
                    if (b != null) {
                        let d = b;
                        d.propertyChanged = delegateRemove(d.propertyChanged, runOn(this, this.al));
                    }
                    if (c != null) {
                        let e = c;
                        e.propertyChanged = delegateCombine(e.propertyChanged, runOn(this, this.al));
                    }
                    break;
                case "ColumnAddingPrePhase":
                    if (b != null) {
                        let f = b;
                        f.propertyChanged = delegateRemove(f.propertyChanged, runOn(this, this.am));
                    }
                    if (c != null) {
                        let g = c;
                        g.propertyChanged = delegateCombine(g.propertyChanged, runOn(this, this.am));
                    }
                    break;
                case "ColumnShowingMainPhase":
                    if (b != null) {
                        let h = b;
                        h.propertyChanged = delegateRemove(h.propertyChanged, runOn(this, this.at));
                    }
                    if (c != null) {
                        let i = c;
                        i.propertyChanged = delegateCombine(i.propertyChanged, runOn(this, this.at));
                    }
                    break;
                case "ColumnShowingPrePhase":
                    if (b != null) {
                        let j = b;
                        j.propertyChanged = delegateRemove(j.propertyChanged, runOn(this, this.au));
                    }
                    if (c != null) {
                        let k = c;
                        k.propertyChanged = delegateCombine(k.propertyChanged, runOn(this, this.au));
                    }
                    break;
                case "ColumnMovingMainPhase":
                    if (b != null) {
                        let l = b;
                        l.propertyChanged = delegateRemove(l.propertyChanged, runOn(this, this.ar));
                    }
                    if (c != null) {
                        let m = c;
                        m.propertyChanged = delegateCombine(m.propertyChanged, runOn(this, this.ar));
                    }
                    break;
                case "ColumnMovingPrePhase":
                    if (b != null) {
                        let n = b;
                        n.propertyChanged = delegateRemove(n.propertyChanged, runOn(this, this.as));
                    }
                    if (c != null) {
                        let o = c;
                        o.propertyChanged = delegateCombine(o.propertyChanged, runOn(this, this.as));
                    }
                    break;
                case "ColumnHidingMainPhase":
                    if (b != null) {
                        let p = b;
                        p.propertyChanged = delegateRemove(p.propertyChanged, runOn(this, this.ap));
                    }
                    if (c != null) {
                        let q = c;
                        q.propertyChanged = delegateCombine(q.propertyChanged, runOn(this, this.ap));
                    }
                    break;
                case "ColumnHidingPostPhase":
                    if (b != null) {
                        let r = b;
                        r.propertyChanged = delegateRemove(r.propertyChanged, runOn(this, this.aq));
                    }
                    if (c != null) {
                        let s = c;
                        s.propertyChanged = delegateCombine(s.propertyChanged, runOn(this, this.aq));
                    }
                    break;
                case "ColumnExchangingMainPhase":
                    if (b != null) {
                        let t = b;
                        t.propertyChanged = delegateRemove(t.propertyChanged, runOn(this, this.ao));
                    }
                    if (c != null) {
                        let u = c;
                        u.propertyChanged = delegateCombine(u.propertyChanged, runOn(this, this.ao));
                    }
                    break;
                case "ColumnExchangingCleanupPhase":
                    if (b != null) {
                        let v = b;
                        v.propertyChanged = delegateRemove(v.propertyChanged, runOn(this, this.an));
                    }
                    if (c != null) {
                        let w = c;
                        w.propertyChanged = delegateCombine(w.propertyChanged, runOn(this, this.an));
                    }
                    break;
            }
        }
        al(a, b) {
            this.av("ColumnAddingMainPhase", this.m, this.m);
        }
        am(a, b) {
            this.av("ColumnAddingPrePhase", this.n, this.n);
        }
        at(a, b) {
            this.av("ColumnShowingMainPhase", this.w, this.w);
        }
        au(a, b) {
            this.av("ColumnShowingPrePhase", this.x, this.x);
        }
        ar(a, b) {
            this.av("ColumnMovingMainPhase", this.s, this.s);
        }
        as(a, b) {
            this.av("ColumnMovingPrePhase", this.t, this.t);
        }
        ap(a, b) {
            this.av("ColumnHidingMainPhase", this.q, this.q);
        }
        aq(a, b) {
            this.av("ColumnHidingPostPhase", this.r, this.r);
        }
        ao(a, b) {
            this.av("ColumnExchangingMainPhase", this.p, this.p);
        }
        an(a, b) {
            this.av("ColumnExchangingCleanupPhase", this.o, this.o);
        }
    }
    GridColumnAnimationSettings.$t = /*@__PURE__*/ markType(GridColumnAnimationSettings, 'GridColumnAnimationSettings', Base.$, [INotifyPropertyChanged_$type]);
    return GridColumnAnimationSettings;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridAnimationSettings = /*@__PURE__*/ (() => {
    class GridAnimationSettings extends Base {
        constructor() {
            super();
            this.i = null;
            this.b = null;
            this.d = null;
            this.a = null;
            this.c = null;
            this.propertyChanged = null;
            this.b = new GridAnimationPhaseSettings();
            this.b.l = 500;
            this.b.c = 1;
            this.b.e = false;
            this.d = new GridAnimationPhaseSettings();
            this.d.l = 300;
            this.d.c = 1;
            this.d.n = 0;
            this.d.e = true;
            this.a = new GridAnimationPhaseSettings();
            this.a.l = 0;
            this.a.c = 1;
            this.a.n = 0;
            this.a.e = true;
            this.c = new GridAnimationPhaseSettings();
            this.c.l = 100;
            this.c.c = 1;
            this.c.n = 0;
            this.c.e = true;
        }
        get f() {
            return this.b;
        }
        set f(a) {
            let b = this.b;
            this.b = a;
            this.p("CellDataLoadedMainPhase", b, this.b);
        }
        get h() {
            return this.d;
        }
        set h(a) {
            let b = this.d;
            this.d = a;
            this.p("RowSelectionMainPhase", b, this.d);
        }
        get e() {
            return this.a;
        }
        set e(a) {
            let b = this.a;
            this.a = a;
            this.p("CellActivationMainPhase", b, this.a);
        }
        get g() {
            return this.c;
        }
        set g(a) {
            let b = this.c;
            this.c = a;
            this.p("RowHoverMainPhase", b, this.c);
        }
        p(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            this.q(a, b, c);
        }
        q(a, b, c) {
            switch (a) {
                case "CellDataLoadedMainPhase":
                    if (b != null) {
                        let d = b;
                        d.propertyChanged = delegateRemove(d.propertyChanged, runOn(this, this.o));
                    }
                    if (c != null) {
                        let e = c;
                        e.propertyChanged = delegateCombine(e.propertyChanged, runOn(this, this.o));
                    }
                    break;
                case "RowSelectionMainPhase":
                    if (b != null) {
                        let f = b;
                        f.propertyChanged = delegateRemove(f.propertyChanged, runOn(this, this.r));
                    }
                    if (c != null) {
                        let g = c;
                        g.propertyChanged = delegateCombine(g.propertyChanged, runOn(this, this.r));
                    }
                    break;
                case "CellActivationMainPhase":
                    if (b != null) {
                        let h = b;
                        h.propertyChanged = delegateRemove(h.propertyChanged, runOn(this, this.n));
                    }
                    if (c != null) {
                        let i = c;
                        i.propertyChanged = delegateCombine(i.propertyChanged, runOn(this, this.n));
                    }
                    break;
            }
        }
        o(a, b) {
            this.p("CellDataLoadedMainPhase", this.f, this.f);
        }
        r(a, b) {
            this.p("RowSelectionMainPhase", this.h, this.h);
        }
        n(a, b) {
            this.p("CellActivationMainPhase", this.e, this.e);
        }
    }
    GridAnimationSettings.$t = /*@__PURE__*/ markType(GridAnimationSettings, 'GridAnimationSettings', Base.$, [INotifyPropertyChanged_$type]);
    return GridAnimationSettings;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * Enumerates the options for how columns animate while resizing.
 */
var ColumnResizingAnimationMode = /*@__PURE__*/ (function (ColumnResizingAnimationMode) {
    /**
     * Automatically decides on the animation mode to use.
     */
    ColumnResizingAnimationMode[ColumnResizingAnimationMode["Auto"] = 0] = "Auto";
    /**
     * No animation is performed.
     */
    ColumnResizingAnimationMode[ColumnResizingAnimationMode["None"] = 1] = "None";
    /**
     * The column width interpolates to the new width.
     */
    ColumnResizingAnimationMode[ColumnResizingAnimationMode["Interpolate"] = 2] = "Interpolate";
    return ColumnResizingAnimationMode;
})({});
/**
 * @hidden
 */
let ColumnResizingAnimationMode_$type = /*@__PURE__*/ markEnum('ColumnResizingAnimationMode', 'Auto,0|None,1|Interpolate,2');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * Enumerates the options for how columns animate while moving.
 */
var ColumnMovingAnimationMode = /*@__PURE__*/ (function (ColumnMovingAnimationMode) {
    /**
     * Automatically decides on the animation mode to use.
     */
    ColumnMovingAnimationMode[ColumnMovingAnimationMode["Auto"] = 0] = "Auto";
    /**
     * No animation is performed.
     */
    ColumnMovingAnimationMode[ColumnMovingAnimationMode["None"] = 1] = "None";
    /**
     * The cells slide on top of the others to its desired position.
     */
    ColumnMovingAnimationMode[ColumnMovingAnimationMode["SlideOver"] = 2] = "SlideOver";
    return ColumnMovingAnimationMode;
})({});
/**
 * @hidden
 */
let ColumnMovingAnimationMode_$type = /*@__PURE__*/ markEnum('ColumnMovingAnimationMode', 'Auto,0|None,1|SlideOver,2');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * Enumerates the options for how column hiding is animated.
 */
var ColumnHidingAnimationMode = /*@__PURE__*/ (function (ColumnHidingAnimationMode) {
    /**
     * The correct animation mode is automatically selected.
     */
    ColumnHidingAnimationMode[ColumnHidingAnimationMode["Auto"] = 0] = "Auto";
    /**
     * No animation is performed.
     */
    ColumnHidingAnimationMode[ColumnHidingAnimationMode["None"] = 1] = "None";
    /**
     * The cells slide to the left.
     */
    ColumnHidingAnimationMode[ColumnHidingAnimationMode["SlideToLeft"] = 2] = "SlideToLeft";
    /**
     * The cells slide to the right.
     */
    ColumnHidingAnimationMode[ColumnHidingAnimationMode["SlideToRight"] = 3] = "SlideToRight";
    /**
     * The cells slide to the top.
     */
    ColumnHidingAnimationMode[ColumnHidingAnimationMode["SlideToTop"] = 4] = "SlideToTop";
    /**
     * The cells slide to the bottom.
     */
    ColumnHidingAnimationMode[ColumnHidingAnimationMode["SlideToBottom"] = 5] = "SlideToBottom";
    /**
     * The cells fade out.
     */
    ColumnHidingAnimationMode[ColumnHidingAnimationMode["FadeOut"] = 6] = "FadeOut";
    /**
     * The cells slide to the left and fade out.
     */
    ColumnHidingAnimationMode[ColumnHidingAnimationMode["SlideToLeftAndFadeOut"] = 7] = "SlideToLeftAndFadeOut";
    /**
     * The cells slide to the right and fade out.
     */
    ColumnHidingAnimationMode[ColumnHidingAnimationMode["SlideToRightAndFadeOut"] = 8] = "SlideToRightAndFadeOut";
    /**
     * The cells slide to the top and fade out.
     */
    ColumnHidingAnimationMode[ColumnHidingAnimationMode["SlideToTopAndFadeOut"] = 9] = "SlideToTopAndFadeOut";
    /**
     * The cells slide to the bottom and fade out.
     */
    ColumnHidingAnimationMode[ColumnHidingAnimationMode["SlideToBottomAndFadeOut"] = 10] = "SlideToBottomAndFadeOut";
    return ColumnHidingAnimationMode;
})({});
/**
 * @hidden
 */
let ColumnHidingAnimationMode_$type = /*@__PURE__*/ markEnum('ColumnHidingAnimationMode', 'Auto,0|None,1|SlideToLeft,2|SlideToRight,3|SlideToTop,4|SlideToBottom,5|FadeOut,6|SlideToLeftAndFadeOut,7|SlideToRightAndFadeOut,8|SlideToTopAndFadeOut,9|SlideToBottomAndFadeOut,10');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * Enumerates the options for how column exchanging is animated.
 */
var ColumnExchangingAnimationMode = /*@__PURE__*/ (function (ColumnExchangingAnimationMode) {
    /**
     * The correct animation mode is automatically selected.
     */
    ColumnExchangingAnimationMode[ColumnExchangingAnimationMode["Auto"] = 0] = "Auto";
    /**
     * No animation is performed.
     */
    ColumnExchangingAnimationMode[ColumnExchangingAnimationMode["None"] = 1] = "None";
    /**
     * The cells slide to the left.
     */
    ColumnExchangingAnimationMode[ColumnExchangingAnimationMode["SlideToLeft"] = 2] = "SlideToLeft";
    /**
     * The cells slide to the right.
     */
    ColumnExchangingAnimationMode[ColumnExchangingAnimationMode["SlideToRight"] = 3] = "SlideToRight";
    /**
     * The cells slide to the top.
     */
    ColumnExchangingAnimationMode[ColumnExchangingAnimationMode["SlideToTop"] = 4] = "SlideToTop";
    /**
     * The cells slide to the bottom.
     */
    ColumnExchangingAnimationMode[ColumnExchangingAnimationMode["SlideToBottom"] = 5] = "SlideToBottom";
    /**
     * The cells crossfade.
     */
    ColumnExchangingAnimationMode[ColumnExchangingAnimationMode["Crossfade"] = 6] = "Crossfade";
    /**
     * The cells slide to the left and crossfade.
     */
    ColumnExchangingAnimationMode[ColumnExchangingAnimationMode["SlideToLeftAndCrossfade"] = 7] = "SlideToLeftAndCrossfade";
    /**
     * The cells slide to the right and crossfade.
     */
    ColumnExchangingAnimationMode[ColumnExchangingAnimationMode["SlideToRightAndCrossfade"] = 8] = "SlideToRightAndCrossfade";
    /**
     * The cells slide to the top and crossfade.
     */
    ColumnExchangingAnimationMode[ColumnExchangingAnimationMode["SlideToTopAndCrossfade"] = 9] = "SlideToTopAndCrossfade";
    /**
     * The cells slide to the bottom and crossfade.
     */
    ColumnExchangingAnimationMode[ColumnExchangingAnimationMode["SlideToBottomAndCrossfade"] = 10] = "SlideToBottomAndCrossfade";
    return ColumnExchangingAnimationMode;
})({});
/**
 * @hidden
 */
let ColumnExchangingAnimationMode_$type = /*@__PURE__*/ markEnum('ColumnExchangingAnimationMode', 'Auto,0|None,1|SlideToLeft,2|SlideToRight,3|SlideToTop,4|SlideToBottom,5|Crossfade,6|SlideToLeftAndCrossfade,7|SlideToRightAndCrossfade,8|SlideToTopAndCrossfade,9|SlideToBottomAndCrossfade,10');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * Indicates the selection mode to use for the grid.
 */
var GridSelectionMode = /*@__PURE__*/ (function (GridSelectionMode) {
    /**
     * No selection should be peformed based on interaction.
     */
    GridSelectionMode[GridSelectionMode["None"] = 0] = "None";
    /**
     * A single row is permitted to be selected at a time from interaction.
     */
    GridSelectionMode[GridSelectionMode["SingleRow"] = 1] = "SingleRow";
    /**
     * Multiple rows are permitted to be selected at a time from interaction.
     */
    GridSelectionMode[GridSelectionMode["MultipleRow"] = 2] = "MultipleRow";
    /**
     * A single cell is permitted to be selected at a time from interaction.
     */
    GridSelectionMode[GridSelectionMode["SingleCell"] = 3] = "SingleCell";
    /**
     * Multiple cells are permitted to be selected at a time from interaction.
     */
    GridSelectionMode[GridSelectionMode["MultipleCell"] = 4] = "MultipleCell";
    /**
     * Multiple cells are allowed to be selected however they are stored as ranges not individual cells.
     */
    GridSelectionMode[GridSelectionMode["RangeCell"] = 5] = "RangeCell";
    return GridSelectionMode;
})({});
/**
 * @hidden
 */
let GridSelectionMode_$type = /*@__PURE__*/ markEnum('GridSelectionMode', 'None,0|SingleRow,1|MultipleRow,2|SingleCell,3|MultipleCell,4|RangeCell,5');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * Indicates the activation mode to use for the grid.
 */
var GridActivationMode = /*@__PURE__*/ (function (GridActivationMode) {
    /**
     * No activation should be peformed based on interaction.
     */
    GridActivationMode[GridActivationMode["None"] = 0] = "None";
    /**
     * A single cell is permitted to be activated at a time.
     */
    GridActivationMode[GridActivationMode["Cell"] = 1] = "Cell";
    return GridActivationMode;
})({});
/**
 * @hidden
 */
let GridActivationMode_$type = /*@__PURE__*/ markEnum('GridActivationMode', 'None,0|Cell,1');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * Indicates the selection mode to use for the grid.
 */
var GridSelectionBehavior = /*@__PURE__*/ (function (GridSelectionBehavior) {
    /**
     * Rows and cells are selected using a toggleable behavior. Modifier selection is ignored (CTRL and SHIFT).
     */
    GridSelectionBehavior[GridSelectionBehavior["Toggle"] = 0] = "Toggle";
    /**
     * Only one row or cell is selected at a time and modifier keys are required to multi-select them.
     */
    GridSelectionBehavior[GridSelectionBehavior["ModifierBased"] = 1] = "ModifierBased";
    return GridSelectionBehavior;
})({});
/**
 * @hidden
 */
let GridSelectionBehavior_$type = /*@__PURE__*/ markEnum('GridSelectionBehavior', 'Toggle,0|ModifierBased,1');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridSelectedItemsCollection = /*@__PURE__*/ (() => {
    class GridSelectedItemsCollection extends ObservableCollection$1 {
        constructor() {
            super(Base.$, 0);
        }
        get ae() {
            return this;
        }
        af(a) {
            this.collectionChanged = delegateCombine(this.collectionChanged, a);
        }
    }
    GridSelectedItemsCollection.$t = /*@__PURE__*/ markType(GridSelectedItemsCollection, 'GridSelectedItemsCollection', /*@__PURE__*/ ObservableCollection$1.$.specialize(Base.$));
    return GridSelectedItemsCollection;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let CellRange = /*@__PURE__*/ (() => {
    class CellRange extends Base {
        constructor() {
            super(...arguments);
            this.g = -2147483648;
            this.e = -2147483648;
            this.h = -2147483648;
            this.f = -2147483648;
        }
        get k() {
            return this.g;
        }
        set k(a) {
            this.g = a;
        }
        get i() {
            return this.e;
        }
        set i(a) {
            this.e = a;
        }
        get l() {
            return this.h;
        }
        set l(a) {
            this.h = a;
        }
        get j() {
            return this.f;
        }
        set j(a) {
            this.f = a;
        }
        b(a, b) {
            return this.d(a) && this.c(b);
        }
        d(a) {
            return a >= this.l && a <= this.j;
        }
        c(a) {
            return a >= this.k && a <= this.i;
        }
        a() {
            let a = new CellRange();
            a.k = this.k;
            a.i = this.i;
            a.l = this.l;
            a.j = this.j;
            return a;
        }
    }
    CellRange.$t = /*@__PURE__*/ markType(CellRange, 'CellRange');
    return CellRange;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridSelectedCellRangesCollection = /*@__PURE__*/ (() => {
    class GridSelectedCellRangesCollection extends ObservableCollection$1 {
        constructor() {
            super(CellRange.$, 0);
        }
        get ae() {
            return this;
        }
    }
    GridSelectedCellRangesCollection.$t = /*@__PURE__*/ markType(GridSelectedCellRangesCollection, 'GridSelectedCellRangesCollection', /*@__PURE__*/ ObservableCollection$1.$.specialize(CellRange.$));
    return GridSelectedCellRangesCollection;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridCellPosition = /*@__PURE__*/ (() => {
    class GridCellPosition extends Base {
        constructor() {
            super(...arguments);
            this.a = 0;
            this.c = null;
        }
        get b() {
            return this.a;
        }
        set b(a) {
            this.a = a;
        }
        get d() {
            return this.c;
        }
        set d(a) {
            this.c = a;
        }
    }
    GridCellPosition.$t = /*@__PURE__*/ markType(GridCellPosition, 'GridCellPosition');
    return GridCellPosition;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let ColumnSortDescription = /*@__PURE__*/ (() => {
    class ColumnSortDescription extends Base {
        constructor(a, ..._rest) {
            super();
            this.e = null;
            this.b = 0;
            a = (a == void 0) ? 0 : a;
            switch (a) {
                case 0: break;
                case 1:
                    {
                        let c = _rest[0];
                        this.f = c;
                    }
                    break;
                case 2:
                    {
                        let c = _rest[0];
                        let d = _rest[1];
                        this.f = c;
                        this.c = d;
                    }
                    break;
            }
        }
        get f() {
            return this.e;
        }
        set f(a) {
            this.e = a;
        }
        get c() {
            return this.b;
        }
        set c(a) {
            this.b = a;
        }
        equals(a) {
            let b = a;
            if (b == null) {
                return super.equals(a);
            }
            return b.f == this.f && b.c == this.c;
        }
        getHashCode() {
            return Base.getHashCodeStatic(this.f) * 17 + this.c;
        }
    }
    ColumnSortDescription.$t = /*@__PURE__*/ markType(ColumnSortDescription, 'ColumnSortDescription');
    return ColumnSortDescription;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let ColumnSortDescriptionCollection = /*@__PURE__*/ (() => {
    class ColumnSortDescriptionCollection extends Base {
        constructor() {
            super();
            this.f = new SyncableObservableCollection$2(ColumnSortDescription.$, SortDescription.$, 0);
            this.a = null;
            let a = this.f;
            a.compare = (b, c) => {
                if (b.f == c.propertyName) {
                    return true;
                }
                return false;
            };
            a.createFrom = (b) => new ColumnSortDescription(2, b.propertyName, b.direction);
            a.createTo = (b) => {
                let c = b.c;
                return SortDescription.create(b.f, c);
            };
        }
        get b() {
            return this.a;
        }
        set b(a) {
            if (a == null) {
                this.f.syncTarget = null;
                this.a = null;
                return;
            }
            this.a = a;
            this.f.syncTarget = this.a.getInner();
        }
        g(a) {
            return this.f.add(a);
        }
        n(a, b) {
            this.f.add1(a, b);
        }
        m() {
            this.f.clear();
        }
        get(a) {
            return this.f.get(a);
        }
        j(a) {
            return this.f.indexOf(a);
        }
        h(a) {
            return this.f.remove1(a);
        }
        d(a) {
            return this.f.remove(a);
        }
        set(a, b) {
            return this.f.set(a, b);
        }
        size() {
            return this.f.size();
        }
        l(a) {
            this.f.addListener(a);
        }
        o(a) {
            this.f.removeListener(a);
        }
        get i() {
            return this.f.all;
        }
    }
    ColumnSortDescriptionCollection.$t = /*@__PURE__*/ markType(ColumnSortDescriptionCollection, 'ColumnSortDescriptionCollection');
    return ColumnSortDescriptionCollection;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let FormatGroupTextEventArgs = /*@__PURE__*/ (() => {
    class FormatGroupTextEventArgs extends Base {
        constructor() {
            super(...arguments);
            this.d = null;
            this.a = null;
            this.c = null;
            this.b = null;
        }
    }
    FormatGroupTextEventArgs.$t = /*@__PURE__*/ markType(FormatGroupTextEventArgs, 'FormatGroupTextEventArgs');
    return FormatGroupTextEventArgs;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let ColumnGroupDescription = /*@__PURE__*/ (() => {
    class ColumnGroupDescription extends ColumnSortDescription {
        constructor(a, ..._rest) {
            a = (a == void 0) ? 0 : a;
            switch (a) {
                case 0:
                    {
                        super(0);
                        this.t = null;
                        this.h = null;
                        this.r = null;
                        this.g = null;
                        this.p = null;
                        this.s = null;
                        this.o = false;
                        this.m = 0;
                        this.l = null;
                        this.k = null;
                        this.formatText = null;
                        this.o = false;
                        this.m = 11;
                    }
                    break;
                case 1:
                    {
                        let c = _rest[0];
                        super(1, c);
                        this.t = null;
                        this.h = null;
                        this.r = null;
                        this.g = null;
                        this.p = null;
                        this.s = null;
                        this.o = false;
                        this.m = 0;
                        this.l = null;
                        this.k = null;
                        this.formatText = null;
                        this.o = false;
                        this.m = 11;
                    }
                    break;
                case 2:
                    {
                        let c = _rest[0];
                        let d = _rest[1];
                        super(2, c, d);
                        this.t = null;
                        this.h = null;
                        this.r = null;
                        this.g = null;
                        this.p = null;
                        this.s = null;
                        this.o = false;
                        this.m = 0;
                        this.l = null;
                        this.k = null;
                        this.formatText = null;
                        this.o = false;
                        this.m = 11;
                    }
                    break;
            }
        }
        get x() {
            return this.t;
        }
        set x(a) {
            this.t = a;
            this.y();
        }
        get j() {
            return this.h;
        }
        set j(a) {
            this.h = a;
            this.y();
        }
        get u() {
            return this.r;
        }
        set u(a) {
            this.r = a;
            this.y();
        }
        get i() {
            return this.g;
        }
        set i(a) {
            this.g = a;
            this.y();
        }
        get q() {
            return this.p;
        }
        set q(a) {
            this.p = a;
        }
        get v() {
            return this.s;
        }
        set v(a) {
            this.s = a;
        }
        y() {
            if (this.x != null) {
                this.l = new BindingFormatter();
                this.l.j = this.x;
                this.l.d = this.j;
            }
            else {
                this.l = null;
            }
            if (this.u != null) {
                this.k = new BindingFormatter();
                this.k.j = this.u;
                this.k.d = this.i;
            }
            else {
                this.k = null;
            }
        }
        w(a, b, c) {
            let d = null;
            if (this.formatText != null) {
                d = ((() => {
                    let $ret = new FormatGroupTextEventArgs();
                    $ret.d = this.f;
                    $ret.a = a;
                    $ret.c = b;
                    $ret.b = c;
                    return $ret;
                })());
                this.formatText(this, d);
            }
            return d == null ? c : d.b;
        }
    }
    ColumnGroupDescription.$t = /*@__PURE__*/ markType(ColumnGroupDescription, 'ColumnGroupDescription', ColumnSortDescription.$);
    return ColumnGroupDescription;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let ColumnGroupDescriptionCollection = /*@__PURE__*/ (() => {
    class ColumnGroupDescriptionCollection extends Base {
        constructor() {
            super();
            this.f = new SyncableObservableCollection$2(ColumnGroupDescription.$, SortDescription.$, 0);
            this.a = null;
            let a = this.f;
            a.compare = (b, c) => {
                if (b.f == c.propertyName) {
                    return true;
                }
                return false;
            };
            a.createFrom = (b) => new ColumnGroupDescription(2, b.propertyName, b.direction);
            a.createTo = (b) => {
                let c = b.c;
                return SortDescription.create(b.f, c);
            };
        }
        get b() {
            return this.a;
        }
        set b(a) {
            if (a == null) {
                this.f.syncTarget = null;
                this.a = null;
                return;
            }
            this.a = a;
            this.f.syncTarget = this.a.getInner();
        }
        g(a) {
            return this.f.add(a);
        }
        n(a, b) {
            this.f.add1(a, b);
        }
        m() {
            this.f.clear();
        }
        get(a) {
            return this.f.get(a);
        }
        j(a) {
            return this.f.indexOf(a);
        }
        h(a) {
            return this.f.remove1(a);
        }
        d(a) {
            return this.f.remove(a);
        }
        set(a, b) {
            return this.f.set(a, b);
        }
        size() {
            return this.f.size();
        }
        l(a) {
            this.f.addListener(a);
        }
        o(a) {
            this.f.removeListener(a);
        }
        get i() {
            return this.f.all;
        }
    }
    ColumnGroupDescriptionCollection.$t = /*@__PURE__*/ markType(ColumnGroupDescriptionCollection, 'ColumnGroupDescriptionCollection');
    return ColumnGroupDescriptionCollection;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let FormatSummaryTextEventArgs = /*@__PURE__*/ (() => {
    class FormatSummaryTextEventArgs extends Base {
        constructor() {
            super(...arguments);
            this.c = null;
            this.b = null;
            this.a = null;
            this.d = null;
            this.e = null;
        }
    }
    FormatSummaryTextEventArgs.$t = /*@__PURE__*/ markType(FormatSummaryTextEventArgs, 'FormatSummaryTextEventArgs');
    return FormatSummaryTextEventArgs;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let ColumnSummaryDescription = /*@__PURE__*/ (() => {
    class ColumnSummaryDescription extends Base {
        constructor(a, ..._rest) {
            super();
            this.r = false;
            this.g = 0;
            this.aa = null;
            this.m = 0;
            this.i = null;
            this.x = null;
            this.z = null;
            this.ab = null;
            this.b = null;
            this.y = null;
            this.a = null;
            this.f = null;
            this.e = null;
            this.v = null;
            this.s = 10;
            this.formatText = null;
            this.provideCalculator = null;
            this.k = null;
            a = (a == void 0) ? 0 : a;
            switch (a) {
                case 0: break;
                case 1:
                    {
                        let c = _rest[0];
                        this.af = c;
                        this.n = 4;
                    }
                    break;
                case 2:
                    {
                        let c = _rest[0];
                        let d = _rest[1];
                        this.af = c;
                        this.n = d;
                    }
                    break;
            }
        }
        get af() {
            return this.aa;
        }
        set af(a) {
            this.aa = a;
        }
        get n() {
            return this.m;
        }
        set n(a) {
            this.m = a;
            switch (this.m) {
                case 0:
                    this.j = new MinSummaryCalculator();
                    break;
                case 1:
                    this.j = new MaxSummaryCalculator();
                    break;
                case 2:
                    this.j = new SumSummaryCalculator();
                    break;
                case 3:
                    this.j = new AverageSummaryCalculator();
                    break;
                case 4:
                    this.j = new CountSummaryCalculator();
                    break;
            }
        }
        get j() {
            return this.i;
        }
        set j(a) {
            this.i = a;
        }
        get ac() {
            return this.x;
        }
        set ac(a) {
            this.x = a;
        }
        get ae() {
            return this.z;
        }
        set ae(a) {
            this.z = a;
        }
        get ag() {
            return this.ab;
        }
        set ag(a) {
            this.ab = a;
            this.ah();
        }
        get d() {
            return this.b;
        }
        set d(a) {
            this.b = a;
            this.ah();
        }
        get ad() {
            return this.y;
        }
        set ad(a) {
            this.y = a;
            this.ah();
        }
        get c() {
            return this.a;
        }
        set c(a) {
            this.a = a;
            this.ah();
        }
        ah() {
            if (this.ag != null) {
                this.f = new BindingFormatter();
                this.f.j = this.ag;
                this.f.d = this.d;
            }
            else {
                this.f = null;
            }
            if (this.ad != null) {
                this.e = new BindingFormatter();
                this.e.j = this.ad;
                this.e.d = this.c;
            }
            else {
                this.e = null;
            }
        }
        get w() {
            return this.v;
        }
        set w(a) {
            this.v = a;
        }
        get u() {
            return this.s;
        }
        set u(a) {
            this.s = a;
        }
        equals(a) {
            let b = a;
            if (b == null) {
                return super.equals(a);
            }
            return b.af == this.af && b.n == this.n;
        }
        getHashCode() {
            return Base.getHashCodeStatic(this.af) * 17 + this.n;
        }
        o(a, b, c) {
            let d = ((() => {
                let $ret = new FormatSummaryTextEventArgs();
                $ret.c = this.af;
                $ret.b = this.ae;
                $ret.a = a;
                $ret.d = b;
                $ret.e = c;
                return $ret;
            })());
            if (this.formatText != null) {
                this.formatText(this, d);
            }
            return d;
        }
        get l() {
            return this.k;
        }
        set l(a) {
            let b = this.k;
            if (b != null) {
                b.provideCalculator = delegateRemove(b.provideCalculator, runOn(this, this.ai));
            }
            this.k = a;
            if (this.k != null) {
                let c = this.k;
                c.provideCalculator = delegateCombine(c.provideCalculator, runOn(this, this.ai));
            }
        }
        ai(a, b) {
            if (this.provideCalculator != null) {
                this.provideCalculator(this, b);
                this.j = b.a;
            }
        }
    }
    ColumnSummaryDescription.$t = /*@__PURE__*/ markType(ColumnSummaryDescription, 'ColumnSummaryDescription');
    return ColumnSummaryDescription;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let ColumnSummaryDescriptionCollection = /*@__PURE__*/ (() => {
    class ColumnSummaryDescriptionCollection extends Base {
        constructor() {
            super();
            this.f = new SyncableObservableCollection$2(ColumnSummaryDescription.$, SummaryDescription.$, 0);
            this.a = null;
            let a = this.f;
            a.compare = (b, c) => b.af == c.propertyName && b.n == c.operand && b.j == c.calculator && b.l == c;
            a.createFrom = (b) => {
                let c = new ColumnSummaryDescription(1, b.propertyName);
                c.n = b.operand;
                c.j = b.calculator;
                c.l = b;
                return c;
            };
            a.createTo = (b) => {
                let c = new SummaryDescription(1, b.af);
                c.operand = b.n;
                c.calculator = b.j;
                b.l = c;
                return c;
            };
        }
        get b() {
            return this.a;
        }
        set b(a) {
            if (a == null) {
                this.f.syncTarget = null;
                this.a = null;
                return;
            }
            this.a = a;
            this.f.syncTarget = this.a.g();
        }
        g(a) {
            return this.f.add(a);
        }
        n(a, b) {
            this.f.add1(a, b);
        }
        m() {
            this.f.clear();
        }
        get(a) {
            return this.f.get(a);
        }
        j(a) {
            return this.f.indexOf(a);
        }
        h(a) {
            return this.f.remove1(a);
        }
        d(a) {
            return this.f.remove(a);
        }
        set(a, b) {
            return this.f.set(a, b);
        }
        size() {
            return this.f.size();
        }
        l(a) {
            this.f.addListener(a);
        }
        o(a) {
            this.f.removeListener(a);
        }
        get i() {
            return this.f.all;
        }
    }
    ColumnSummaryDescriptionCollection.$t = /*@__PURE__*/ markType(ColumnSummaryDescriptionCollection, 'ColumnSummaryDescriptionCollection');
    return ColumnSummaryDescriptionCollection;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridFilterExpressionsEventArgs = /*@__PURE__*/ (() => {
    class GridFilterExpressionsEventArgs extends Base {
        constructor() {
            super(...arguments);
            this.a = null;
        }
    }
    GridFilterExpressionsEventArgs.$t = /*@__PURE__*/ markType(GridFilterExpressionsEventArgs, 'GridFilterExpressionsEventArgs');
    return GridFilterExpressionsEventArgs;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let IPlatformPixelConverter_$type = /*@__PURE__*/ new Type(null, 'IPlatformPixelConverter');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let DefaultPlatformPixelConverter = /*@__PURE__*/ (() => {
    class DefaultPlatformPixelConverter extends Base {
        devicePixelsToPixel(a) {
            return a;
        }
    }
    DefaultPlatformPixelConverter.$t = /*@__PURE__*/ markType(DefaultPlatformPixelConverter, 'DefaultPlatformPixelConverter', Base.$, [IPlatformPixelConverter_$type]);
    return DefaultPlatformPixelConverter;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridGroupDescriptionsChangedEventArgs = /*@__PURE__*/ (() => {
    class GridGroupDescriptionsChangedEventArgs extends EventArgs {
        constructor() {
            super(...arguments);
            this._groupDescriptions = null;
        }
        get groupDescriptions() {
            return this._groupDescriptions;
        }
        set groupDescriptions(a) {
            this._groupDescriptions = a;
        }
    }
    GridGroupDescriptionsChangedEventArgs.$t = /*@__PURE__*/ markType(GridGroupDescriptionsChangedEventArgs, 'GridGroupDescriptionsChangedEventArgs', EventArgs.$);
    return GridGroupDescriptionsChangedEventArgs;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridSortDescriptionsChangedEventArgs = /*@__PURE__*/ (() => {
    class GridSortDescriptionsChangedEventArgs extends EventArgs {
        constructor() {
            super(...arguments);
            this._sortDescriptions = null;
        }
        get sortDescriptions() {
            return this._sortDescriptions;
        }
        set sortDescriptions(a) {
            this._sortDescriptions = a;
        }
    }
    GridSortDescriptionsChangedEventArgs.$t = /*@__PURE__*/ markType(GridSortDescriptionsChangedEventArgs, 'GridSortDescriptionsChangedEventArgs', EventArgs.$);
    return GridSortDescriptionsChangedEventArgs;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridSelectedItemsChangedEventArgs = /*@__PURE__*/ (() => {
    class GridSelectedItemsChangedEventArgs extends EventArgs {
        constructor() {
            super(...arguments);
            this._currentItems = null;
            this._addedItems = null;
            this._removedItems = null;
        }
        get currentItems() {
            return this._currentItems;
        }
        set currentItems(a) {
            this._currentItems = a;
        }
        get addedItems() {
            return this._addedItems;
        }
        set addedItems(a) {
            this._addedItems = a;
        }
        get removedItems() {
            return this._removedItems;
        }
        set removedItems(a) {
            this._removedItems = a;
        }
    }
    GridSelectedItemsChangedEventArgs.$t = /*@__PURE__*/ markType(GridSelectedItemsChangedEventArgs, 'GridSelectedItemsChangedEventArgs', EventArgs.$);
    return GridSelectedItemsChangedEventArgs;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridSelectedKeysChangedEventArgs = /*@__PURE__*/ (() => {
    class GridSelectedKeysChangedEventArgs extends EventArgs {
        constructor() {
            super(...arguments);
            this._currentKeys = null;
            this._addedKeys = null;
            this._removedKeys = null;
        }
        get currentKeys() {
            return this._currentKeys;
        }
        set currentKeys(a) {
            this._currentKeys = a;
        }
        get addedKeys() {
            return this._addedKeys;
        }
        set addedKeys(a) {
            this._addedKeys = a;
        }
        get removedKeys() {
            return this._removedKeys;
        }
        set removedKeys(a) {
            this._removedKeys = a;
        }
    }
    GridSelectedKeysChangedEventArgs.$t = /*@__PURE__*/ markType(GridSelectedKeysChangedEventArgs, 'GridSelectedKeysChangedEventArgs', EventArgs.$);
    return GridSelectedKeysChangedEventArgs;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridSelectedCellRangesChangedEventArgs = /*@__PURE__*/ (() => {
    class GridSelectedCellRangesChangedEventArgs extends EventArgs {
        constructor() {
            super(...arguments);
            this._currentRanges = null;
            this._addedRanges = null;
            this._removedRanges = null;
            this._updatedRanges = null;
        }
        get currentRanges() {
            return this._currentRanges;
        }
        set currentRanges(a) {
            this._currentRanges = a;
        }
        get addedRanges() {
            return this._addedRanges;
        }
        set addedRanges(a) {
            this._addedRanges = a;
        }
        get removedRanges() {
            return this._removedRanges;
        }
        set removedRanges(a) {
            this._removedRanges = a;
        }
        get updatedRanges() {
            return this._updatedRanges;
        }
        set updatedRanges(a) {
            this._updatedRanges = a;
        }
    }
    GridSelectedCellRangesChangedEventArgs.$t = /*@__PURE__*/ markType(GridSelectedCellRangesChangedEventArgs, 'GridSelectedCellRangesChangedEventArgs', EventArgs.$);
    return GridSelectedCellRangesChangedEventArgs;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridDataCommittedEventArgs = /*@__PURE__*/ (() => {
    class GridDataCommittedEventArgs extends Base {
        constructor(a, b) {
            super();
            this.b = 0;
            this.a = null;
            this.b = a;
            this.a = b;
        }
    }
    GridDataCommittedEventArgs.$t = /*@__PURE__*/ markType(GridDataCommittedEventArgs, 'GridDataCommittedEventArgs');
    return GridDataCommittedEventArgs;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridDataCommittingEventArgs = /*@__PURE__*/ (() => {
    class GridDataCommittingEventArgs extends Base {
        constructor(a, b) {
            super();
            this.a = null;
            this.b = 0;
            this.b = a;
            this.a = b;
        }
    }
    GridDataCommittingEventArgs.$t = /*@__PURE__*/ markType(GridDataCommittingEventArgs, 'GridDataCommittingEventArgs');
    return GridDataCommittingEventArgs;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let DefinitionPropertyUpdatedEventArgs = /*@__PURE__*/ (() => {
    class DefinitionPropertyUpdatedEventArgs extends EventArgs {
        constructor() {
            super(...arguments);
            this._propertyName = null;
            this._animationType = 0;
            this._oldValue = null;
            this._newValue = null;
        }
        get propertyName() {
            return this._propertyName;
        }
        set propertyName(a) {
            this._propertyName = a;
        }
        get animationType() {
            return this._animationType;
        }
        set animationType(a) {
            this._animationType = a;
        }
        get oldValue() {
            return this._oldValue;
        }
        set oldValue(a) {
            this._oldValue = a;
        }
        get newValue() {
            return this._newValue;
        }
        set newValue(a) {
            this._newValue = a;
        }
    }
    DefinitionPropertyUpdatedEventArgs.$t = /*@__PURE__*/ markType(DefinitionPropertyUpdatedEventArgs, 'DefinitionPropertyUpdatedEventArgs', EventArgs.$);
    return DefinitionPropertyUpdatedEventArgs;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * Enumerates the options for how cell property animates are applied.
 */
var CellPropertyAnimationType = /*@__PURE__*/ (function (CellPropertyAnimationType) {
    /**
     * The property is animated as a double value.
     */
    CellPropertyAnimationType[CellPropertyAnimationType["DoubleValue"] = 0] = "DoubleValue";
    /**
     * The property is animated as a number value.
     */
    CellPropertyAnimationType[CellPropertyAnimationType["NumberValue"] = 1] = "NumberValue";
    /**
     * The property is animated as a brush value.
     */
    CellPropertyAnimationType[CellPropertyAnimationType["BrushValue"] = 2] = "BrushValue";
    /**
     * The property is animated as a font value.
     */
    CellPropertyAnimationType[CellPropertyAnimationType["FontValue"] = 3] = "FontValue";
    /**
     * The property is animated as a enum value.
     */
    CellPropertyAnimationType[CellPropertyAnimationType["EnumValue"] = 4] = "EnumValue";
    /**
     * The property is animated as a bool value.
     */
    CellPropertyAnimationType[CellPropertyAnimationType["BoolValue"] = 5] = "BoolValue";
    /**
     * The property is animated as an int value.
     */
    CellPropertyAnimationType[CellPropertyAnimationType["IntValue"] = 6] = "IntValue";
    /**
     * The property is animated as a date value.
     */
    CellPropertyAnimationType[CellPropertyAnimationType["DateValue"] = 7] = "DateValue";
    /**
     * The propety is animated as a string value.
     */
    CellPropertyAnimationType[CellPropertyAnimationType["StringValue"] = 8] = "StringValue";
    /**
     * The property is animated as an object value.
     */
    CellPropertyAnimationType[CellPropertyAnimationType["ObjectValue"] = 9] = "ObjectValue";
    /**
     * The property value is ignored and not propagated to live cells.
     */
    CellPropertyAnimationType[CellPropertyAnimationType["IgnoredValue"] = 10] = "IgnoredValue";
    /**
     * The property value is not animated.
     */
    CellPropertyAnimationType[CellPropertyAnimationType["None"] = 11] = "None";
    return CellPropertyAnimationType;
})({});
/**
 * @hidden
 */
let CellPropertyAnimationType_$type = /*@__PURE__*/ markEnum('CellPropertyAnimationType', 'DoubleValue,0|NumberValue,1|BrushValue,2|FontValue,3|EnumValue,4|BoolValue,5|IntValue,6|DateValue,7|StringValue,8|ObjectValue,9|IgnoredValue,10|None,11');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridSizeChangedEventArgs = /*@__PURE__*/ (() => {
    class GridSizeChangedEventArgs extends Base {
        constructor() {
            super(...arguments);
            this.b = 0;
            this.a = 0;
        }
    }
    GridSizeChangedEventArgs.$t = /*@__PURE__*/ markType(GridSizeChangedEventArgs, 'GridSizeChangedEventArgs');
    return GridSizeChangedEventArgs;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let ColumnStates_$type = /*@__PURE__*/ markEnum('ColumnStates', 'Detached,0|Showing,1|Hiding,2|Hidden,3|Swapping,4|Visible,5|Moving,6');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridLayerExport = /*@__PURE__*/ (() => {
    class GridLayerExport extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.c = null;
            this.c = a;
            this.a = new List$1(CellModelExport.$, 0);
        }
        get b() {
            return this.a;
        }
        e(a) {
            this.a.add(a);
        }
        f() {
            this.a.clear();
        }
        d() {
            let a = new StringBuilder(0);
            a.u("{");
            a.u("name: \"" + this.c + "\", cells: [");
            for (let b = 0; b < this.a.count; b++) {
                a.l(this.a._inner[b].ab());
                if (b < this.a.count - 1) {
                    a.l(", ");
                }
            }
            a.l("]");
            a.l("}");
            return a.toString();
        }
    }
    GridLayerExport.$t = /*@__PURE__*/ markType(GridLayerExport, 'GridLayerExport');
    return GridLayerExport;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let VisualModelExport = /*@__PURE__*/ (() => {
    class VisualModelExport extends Base {
        constructor() {
            super();
            this.ae = null;
            this.ah = 0;
            this.ag = 0;
            this.an = 0;
            this.am = 0;
            this.ak = 0;
            this.al = 0;
            this.ai = 0;
            this.aq = 0;
            this.ar = 0;
            this.as = 0;
            this.ap = 0;
            this.ao = 0;
            this.at = 0;
            this.x = null;
            this.a = null;
            this.aa = null;
            this.b = null;
            this.r = null;
            this.q = null;
            this.s = null;
            this.h = null;
            this.c = null;
            this.k = null;
            this.f = null;
            this.g = null;
            this.w = null;
            this.u = null;
            this.t = null;
            this.v = null;
            this.z = null;
            this.y = null;
            this.o = null;
            this.n = null;
            this.ac = null;
            this.ab = null;
            this.j = null;
            this.i = null;
            this.e = null;
            this.d = null;
            this.m = null;
            this.l = null;
            this.ad = null;
            this.p = null;
            this.aj = 0;
            this.af = null;
            this.au = 0;
            this.ae = RectData.empty;
            this.x = new GridLayerExport("SubContentLayer");
            this.a = new GridLayerExport("ContentLayer");
            this.aa = new GridLayerExport("SuperContentLayer");
            this.b = new GridLayerExport("DecoratorLayer");
            this.r = new GridLayerExport("PinnedRowsSubLayer");
            this.q = new GridLayerExport("PinnedRowsLayer");
            this.s = new GridLayerExport("PinnedRowsSuperLayer");
            this.h = new GridLayerExport("FixedSubContentLayer");
            this.c = new GridLayerExport("FixedContentLayer");
            this.k = new GridLayerExport("FixedSuperContentLayer");
            this.f = new GridLayerExport("FixedPinnedRowsLayer");
            this.g = new GridLayerExport("FixedSeparatorLayer");
            this.w = new GridLayerExport("SectionLayer");
            this.u = new GridLayerExport("PinnedSectionSubLayer");
            this.t = new GridLayerExport("PinnedSectionLayer");
            this.v = new GridLayerExport("PinnedSectionSuperLayer");
            this.z = new GridLayerExport("SubHeaderLayer");
            this.y = new GridLayerExport("SubHeaderDecoratorLayer");
            this.o = new GridLayerExport("HeaderLayer");
            this.n = new GridLayerExport("HeaderDecoratorLayer");
            this.ac = new GridLayerExport("SuperHeaderLayer");
            this.ab = new GridLayerExport("SuperHeaderDecoratorLayer");
            this.j = new GridLayerExport("FixedSubHeaderLayer");
            this.i = new GridLayerExport("FixedSubHeaderDecoratorLayer");
            this.e = new GridLayerExport("FixedHeaderLayer");
            this.d = new GridLayerExport("FixedHeaderDecoratorLayer");
            this.m = new GridLayerExport("FixedSuperHeaderLayer");
            this.l = new GridLayerExport("FixedSuperHeaderDecoratorLayer");
            this.ad = new GridLayerExport("VerticalSeparatorLayer");
            this.p = new GridLayerExport("HiddenLayer");
            this.aj = 1;
        }
        ax() {
            this.af = new List$1(GridLayerExport.$, 0);
            this.af.add(this.x);
            this.af.add(this.a);
            this.af.add(this.aa);
            this.af.add(this.b);
            this.af.add(this.r);
            this.af.add(this.q);
            this.af.add(this.s);
            this.af.add(this.h);
            this.af.add(this.c);
            this.af.add(this.k);
            this.af.add(this.f);
            this.af.add(this.g);
            this.af.add(this.w);
            this.af.add(this.u);
            this.af.add(this.t);
            this.af.add(this.v);
            this.af.add(this.z);
            this.af.add(this.y);
            this.af.add(this.o);
            this.af.add(this.n);
            this.af.add(this.ac);
            this.af.add(this.ab);
            this.af.add(this.j);
            this.af.add(this.i);
            this.af.add(this.e);
            this.af.add(this.d);
            this.af.add(this.m);
            this.af.add(this.l);
            this.af.add(this.ad);
        }
        aw() {
            this.x.f();
            this.a.f();
            this.aa.f();
            this.b.f();
            this.r.f();
            this.q.f();
            this.s.f();
            this.h.f();
            this.c.f();
            this.k.f();
            this.f.f();
            this.g.f();
            this.w.f();
            this.u.f();
            this.t.f();
            this.v.f();
            this.z.f();
            this.y.f();
            this.o.f();
            this.n.f();
            this.ac.f();
            this.ab.f();
            this.j.f();
            this.i.f();
            this.e.f();
            this.d.f();
            this.m.f();
            this.l.f();
            this.ad.f();
        }
        av() {
            let a = new StringBuilder(0);
            a.l("{");
            a.l("top : " + this.as + ", ");
            a.l("left : " + this.ap + ", ");
            a.l("height : " + this.ao + ", ");
            a.l("width : " + this.at + ", ");
            a.l("absoluteWidth : " + this.ah + ", ");
            a.l("absoluteHeight : " + this.ag + ", ");
            a.l("headerHeight : " + this.an + ", ");
            a.l("fixedRowHeight : " + this.am + ", ");
            a.l("fixedColumnWidthLeft : " + this.ak + ", ");
            a.l("fixedColumnWidthRight : " + this.al + ", ");
            a.l("dipScalingRatio: " + this.aj + ", ");
            a.l("columnSpacing : " + this.ai + ", ");
            a.l("separatorLeft : " + this.aq + ", ");
            a.l("separatorRight : " + this.ar + ", ");
            for (let b = 0; b < this.af.count; b++) {
                let c = this.af._inner[b].c.charAt(0).toString().toLowerCase() + this.af._inner[b].c.substr(1);
                a.l(c + ": " + this.af._inner[b].d() + ", ");
            }
            a.l("actualVisibleRegion: { left: " + this.ae.left + ", top: " + this.ae.top + ", width: " + this.ae.width + ", height: " + this.ae.height + "}");
            a.l("}");
            return a.toString();
        }
    }
    VisualModelExport.$t = /*@__PURE__*/ markType(VisualModelExport, 'VisualModelExport');
    return VisualModelExport;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridActiveCellChangedEventArgs = /*@__PURE__*/ (() => {
    class GridActiveCellChangedEventArgs extends EventArgs {
        constructor() {
            super(...arguments);
            this._newActiveCell = null;
            this._oldActiveCell = null;
        }
        get newActiveCell() {
            return this._newActiveCell;
        }
        set newActiveCell(a) {
            this._newActiveCell = a;
        }
        get oldActiveCell() {
            return this._oldActiveCell;
        }
        set oldActiveCell(a) {
            this._oldActiveCell = a;
        }
    }
    GridActiveCellChangedEventArgs.$t = /*@__PURE__*/ markType(GridActiveCellChangedEventArgs, 'GridActiveCellChangedEventArgs', EventArgs.$);
    return GridActiveCellChangedEventArgs;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridRowEditStartedEventArgs = /*@__PURE__*/ (() => {
    class GridRowEditStartedEventArgs extends Base {
        constructor() {
            super(...arguments);
            this.a = 0;
            this._item = null;
        }
        get item() {
            return this._item;
        }
        set item(a) {
            this._item = a;
        }
    }
    GridRowEditStartedEventArgs.$t = /*@__PURE__*/ markType(GridRowEditStartedEventArgs, 'GridRowEditStartedEventArgs');
    return GridRowEditStartedEventArgs;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridRowEditEndedEventArgs = /*@__PURE__*/ (() => {
    class GridRowEditEndedEventArgs extends Base {
        constructor() {
            super(...arguments);
            this.a = 0;
            this._item = null;
        }
        get item() {
            return this._item;
        }
        set item(a) {
            this._item = a;
        }
    }
    GridRowEditEndedEventArgs.$t = /*@__PURE__*/ markType(GridRowEditEndedEventArgs, 'GridRowEditEndedEventArgs');
    return GridRowEditEndedEventArgs;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridAnimationManagerAnimationCreatedEventArgs = /*@__PURE__*/ (() => {
    class GridAnimationManagerAnimationCreatedEventArgs extends Base {
        constructor() {
            super(...arguments);
            this.a = 0;
        }
    }
    GridAnimationManagerAnimationCreatedEventArgs.$t = /*@__PURE__*/ markType(GridAnimationManagerAnimationCreatedEventArgs, 'GridAnimationManagerAnimationCreatedEventArgs');
    return GridAnimationManagerAnimationCreatedEventArgs;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridAnimationManagerAnimationCompletedEventArgs = /*@__PURE__*/ (() => {
    class GridAnimationManagerAnimationCompletedEventArgs extends Base {
        constructor() {
            super(...arguments);
            this.a = 0;
        }
    }
    GridAnimationManagerAnimationCompletedEventArgs.$t = /*@__PURE__*/ markType(GridAnimationManagerAnimationCompletedEventArgs, 'GridAnimationManagerAnimationCompletedEventArgs');
    return GridAnimationManagerAnimationCompletedEventArgs;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridAnimationManagerAnimationCanceledEventArgs = /*@__PURE__*/ (() => {
    class GridAnimationManagerAnimationCanceledEventArgs extends Base {
        constructor() {
            super(...arguments);
            this.a = 0;
        }
    }
    GridAnimationManagerAnimationCanceledEventArgs.$t = /*@__PURE__*/ markType(GridAnimationManagerAnimationCanceledEventArgs, 'GridAnimationManagerAnimationCanceledEventArgs');
    return GridAnimationManagerAnimationCanceledEventArgs;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridColumnSpacer = /*@__PURE__*/ (() => {
    class GridColumnSpacer extends Base {
        constructor() {
            super();
            this.g = 0;
            this.h = 0;
            this.m = 0;
            this.c = false;
            this.l = 0;
            this.b = false;
            this.a = false;
            this.m = GridColumnSpacer.k;
            GridColumnSpacer.k++;
        }
        get i() {
            return this.g;
        }
        set i(a) {
            this.g = a;
        }
        get j() {
            return this.h;
        }
        set j(a) {
            this.h = a;
        }
        get o() {
            return this.m;
        }
        get f() {
            return this.c;
        }
        set f(a) {
            this.c = a;
        }
        get n() {
            return this.l;
        }
        set n(a) {
            this.l = a;
        }
        get e() {
            return this.b;
        }
        set e(a) {
            this.b = a;
        }
        get d() {
            return this.a;
        }
        set d(a) {
            this.a = a;
        }
    }
    GridColumnSpacer.$t = /*@__PURE__*/ markType(GridColumnSpacer, 'GridColumnSpacer');
    GridColumnSpacer.k = 0;
    return GridColumnSpacer;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridColumnSpacerCollection = /*@__PURE__*/ (() => {
    class GridColumnSpacerCollection extends List$1 {
        constructor() {
            super(GridColumnSpacer.$, 0);
        }
        ac() {
            let a = this.count;
            let b = 0;
            for (let c = 0; c < a; c++) {
                b = b + this._inner[c].i;
            }
            return b;
        }
        ag() {
            let a = this.count;
            let b = 0;
            for (let c = 0; c < a; c++) {
                if (this._inner[c].f) {
                    b = b + this._inner[c].i;
                }
            }
            return b;
        }
        ae() {
            let a = this.count;
            let b = 0;
            for (let c = 0; c < a; c++) {
                if (!this._inner[c].f) {
                    b = b + this._inner[c].i;
                }
            }
            return b;
        }
        ah() {
            let a = this.count;
            let b = 0;
            for (let c = 0; c < a; c++) {
                if (this._inner[c].i > 0) {
                    b = b + this._inner[c].j;
                }
            }
            return b;
        }
        ad(a) {
            let b = this.count;
            let c = 0;
            for (let d = 0; d < b; d++) {
                if (!this._inner[d].d && !(this._inner[d].n == a)) {
                    c = c + this._inner[d].i;
                }
            }
            return c;
        }
        af(a) {
            let b = this.count;
            let c = 0;
            for (let d = 0; d < b; d++) {
                if (this._inner[d].d && !(this._inner[d].n == a)) {
                    c = c + this._inner[d].i;
                }
            }
            return c;
        }
    }
    GridColumnSpacerCollection.$t = /*@__PURE__*/ markType(GridColumnSpacerCollection, 'GridColumnSpacerCollection', /*@__PURE__*/ List$1.$.specialize(GridColumnSpacer.$));
    return GridColumnSpacerCollection;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let CellStyleRequestedEventArgs = /*@__PURE__*/ (() => {
    class CellStyleRequestedEventArgs extends EventArgs {
        constructor() {
            super(...arguments);
            this._styleKey = null;
            this._resolvedValue = null;
            this._rowNumber = 0;
        }
        get styleKey() {
            return this._styleKey;
        }
        set styleKey(a) {
            this._styleKey = a;
        }
        get resolvedValue() {
            return this._resolvedValue;
        }
        set resolvedValue(a) {
            this._resolvedValue = a;
        }
        get rowNumber() {
            return this._rowNumber;
        }
        set rowNumber(a) {
            this._rowNumber = a;
        }
    }
    CellStyleRequestedEventArgs.$t = /*@__PURE__*/ markType(CellStyleRequestedEventArgs, 'CellStyleRequestedEventArgs', EventArgs.$);
    return CellStyleRequestedEventArgs;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let CalculationParameters = /*@__PURE__*/ (() => {
    class CalculationParameters extends Base {
        constructor() {
            super(...arguments);
            this.j = 0;
            this.g = 0;
            this.h = 0;
            this.i = 0;
            this.b = null;
            this.a = null;
            this.k = 0;
            this.m = 0;
            this.l = 0;
            this.n = 0;
            this.d = 0;
            this.f = 0;
            this.e = 0;
            this.c = false;
            this.o = null;
        }
    }
    CalculationParameters.$t = /*@__PURE__*/ markType(CalculationParameters, 'CalculationParameters');
    return CalculationParameters;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let ColumnPropertySetter = /*@__PURE__*/ (() => {
    class ColumnPropertySetter extends Base {
        constructor(a, ..._rest) {
            super();
            this.a = null;
            this.c = null;
            this.d = null;
            this.b = null;
            a = (a == void 0) ? 0 : a;
            switch (a) {
                case 0: break;
                case 1:
                    {
                        let c = _rest[0];
                        let d = _rest[1];
                        let e = _rest[2];
                        this.c = c;
                        this.d = d;
                        this.b = e;
                    }
                    break;
            }
        }
    }
    ColumnPropertySetter.$t = /*@__PURE__*/ markType(ColumnPropertySetter, 'ColumnPropertySetter');
    return ColumnPropertySetter;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let ColumnPropertySettersCollection = /*@__PURE__*/ (() => {
    class ColumnPropertySettersCollection extends ObservableCollection$1 {
        constructor() {
            super(ColumnPropertySetter.$, 0);
        }
    }
    ColumnPropertySettersCollection.$t = /*@__PURE__*/ markType(ColumnPropertySettersCollection, 'ColumnPropertySettersCollection', /*@__PURE__*/ ObservableCollection$1.$.specialize(ColumnPropertySetter.$));
    return ColumnPropertySettersCollection;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let ResponsiveStateEnteringEventArgs = /*@__PURE__*/ (() => {
    class ResponsiveStateEnteringEventArgs extends EventArgs {
    }
    ResponsiveStateEnteringEventArgs.$t = /*@__PURE__*/ markType(ResponsiveStateEnteringEventArgs, 'ResponsiveStateEnteringEventArgs', EventArgs.$);
    return ResponsiveStateEnteringEventArgs;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let ResponsiveStateEnteredEventArgs = /*@__PURE__*/ (() => {
    class ResponsiveStateEnteredEventArgs extends EventArgs {
    }
    ResponsiveStateEnteredEventArgs.$t = /*@__PURE__*/ markType(ResponsiveStateEnteredEventArgs, 'ResponsiveStateEnteredEventArgs', EventArgs.$);
    return ResponsiveStateEnteredEventArgs;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let ResponsiveStateExitedEventArgs = /*@__PURE__*/ (() => {
    class ResponsiveStateExitedEventArgs extends EventArgs {
    }
    ResponsiveStateExitedEventArgs.$t = /*@__PURE__*/ markType(ResponsiveStateExitedEventArgs, 'ResponsiveStateExitedEventArgs', EventArgs.$);
    return ResponsiveStateExitedEventArgs;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let IExternalGrid_$type = /*@__PURE__*/ new Type(null, 'IExternalGrid');
/**
 * @hidden
 */
let DefaultCellActionManager = /*@__PURE__*/ (() => {
    class DefaultCellActionManager extends Base {
        constructor(a, b) {
            super();
            this.b = null;
            this.a = null;
            this.c = false;
            this.d = false;
            this.b = a;
            this.a = b;
        }
        clickExpansionIndicator() {
            if (this.b != null && this.a != null) {
                this.b.ru(this.a);
            }
        }
        clickCell(a) {
            if (this.b != null && this.a != null) {
                this.b.qr(this.a, this.c, this.d, a);
            }
        }
        dragStarted() {
            if (this.b != null && this.b.aq != null) {
                this.b.rs(this.b.aq, this.mousePosition.x, this.mousePosition.y, this.c);
                this.mouseUpCell(this.mousePosition.x, this.mousePosition.y);
            }
        }
        previewPointerDownCell() {
            if (this.b != null && this.a != null) {
                this.b.q2(this.a);
            }
        }
        previewPointerUpCell() {
            if (this.b != null && this.a != null) {
                this.b.q3(this.a);
            }
        }
        pointerDownCell() {
            if (this.b != null && this.a != null) {
                this.b.q0(this.a);
            }
        }
        pointerUpCell() {
            if (this.b != null && this.a != null) {
                this.b.q1(this.a);
            }
        }
        mouseDownCell(a, b) {
            if (this.b != null && this.a != null) {
                this.b.qy(this.a, a, b);
            }
        }
        mouseUpCell(a, b) {
            if (this.b != null && this.a != null) {
                this.b.qz(this.a, a, b);
            }
        }
        mouseLeaveCell(a, b) {
            if (this.b != null && this.a != null) {
                this.b.qx(this.a, a, b);
            }
        }
        mouseEnterCell(a, b) {
            if (this.b != null && this.a != null) {
                this.b.qw(this.a, a, b);
            }
        }
        mouseIsOver(a, b) {
            if (this.b != null && this.a != null) {
                this.b.ry(this.a, a, b);
            }
        }
        doubleClicked() {
            if (this.b != null && this.a != null) {
                this.b.qt(this.a);
            }
        }
        getColumnFilterCondition() {
            if (this.b == null) {
                return null;
            }
            return this.b.o(this.a);
        }
        getColumnPropertyType() {
            if (this.b == null) {
                return 11;
            }
            return this.b.p(this.a);
        }
        columnFilterChanging(a) {
            if (this.b == null) {
                return;
            }
            this.b.pv(this.a, a);
        }
        columnFilterChanged(a) {
            if (this.b == null) {
                return;
            }
            this.b.pu(this.a, a);
        }
        isCellDown() {
            if (this.b != null && this.b.aq != null && this.a != null) {
                return this.b.aq.equals(this.a.k);
            }
            return false;
        }
        get isLeaveActionDesired() {
            if (this.a.k.h) {
                return true;
            }
            return this.b.h4;
        }
        get isEnterActionDesired() {
            return this.b.h4;
        }
        get isClickActionDesired() {
            return this.b.hh;
        }
        get isHoverActionDesired() {
            return this.b.hw;
        }
        get isPreviewPointerDownActionDesired() {
            return this.b.h1;
        }
        get isPreviewPointerUpActionDesired() {
            return this.b.h2;
        }
        get isPointerDownActionDesired() {
            return this.b.hz;
        }
        get isPointerUpActionDesired() {
            return this.b.h0;
        }
        get isControlPressed() {
            return this.c;
        }
        set isControlPressed(a) {
            this.c = a;
        }
        get isShiftPressed() {
            return this.d;
        }
        set isShiftPressed(a) {
            this.d = a;
        }
        get isDrag() {
            return this.b.dragger.isDragActive;
        }
        get isMouseDown() {
            return this.b.aq != null;
        }
        get mousePosition() {
            return this.b.vo;
        }
        get isGridDragging() {
            if (this.b != null && this.b.dragger != null) {
                return this.b.dragger.isDragActive;
            }
            else {
                return false;
            }
        }
        updateCellEditValue(a) {
            let b = typeCast(EditorCellModel.$, this.a);
            if (b != null) {
                b.le = a;
            }
        }
        editorCellLostFocus() {
            if (this.b != null) {
                this.b.rt(typeCast(EditorCellModel.$, this.a));
            }
        }
        cancelEditMode(a) {
            if (this.b != null) {
                this.b.ha(a);
            }
        }
    }
    DefaultCellActionManager.$t = /*@__PURE__*/ markType(DefaultCellActionManager, 'DefaultCellActionManager', Base.$, [ICellActionManager_$type]);
    return DefaultCellActionManager;
})();
/**
 * @hidden
 */
let IGridInfoRequestor_$type = /*@__PURE__*/ new Type(null, 'IGridInfoRequestor');
/**
 * @hidden
 */
let DefaultGridInfoRequestor = /*@__PURE__*/ (() => {
    class DefaultGridInfoRequestor extends Base {
        constructor(a, b) {
            super();
            this.b = null;
            this.a = null;
            this.b = a;
            this.a = b;
        }
        getColumn() {
            if (this.b == null) {
                return null;
            }
            return this.b.a0(this.a.k);
        }
        getDensity() {
            if (this.b == null) {
                return 3;
            }
            return this.b.fg;
        }
        getTheme() {
            if (this.b == null) {
                return 0;
            }
            return 1;
        }
        setViewportChangedHandler(a) {
            if (this.b != null && a != null) {
                let b = this.b;
                b.viewportChanged = delegateCombine(b.viewportChanged, a);
            }
        }
        removeViewportChangedHandler(a) {
            if (this.b != null && a != null) {
                let b = this.b;
                b.viewportChanged = delegateRemove(b.viewportChanged, a);
            }
        }
    }
    DefaultGridInfoRequestor.$t = /*@__PURE__*/ markType(DefaultGridInfoRequestor, 'DefaultGridInfoRequestor', Base.$, [IGridInfoRequestor_$type]);
    return DefaultGridInfoRequestor;
})();
/**
 * @hidden
 */
let DateTimeColumnValueFormatter = /*@__PURE__*/ (() => {
    class DateTimeColumnValueFormatter extends Base {
        constructor() {
            super(...arguments);
            this.a = 0;
            this.b = false;
            this.f = null;
            this.e = null;
            this.c = null;
            this.d = null;
            this.g = null;
            this.h = null;
        }
        k() {
            this.b = true;
        }
        j(a) {
            this.a = a.kw;
            this.b = false;
        }
        i(a) {
            if (+a == +(dateMinValue())) {
                return "";
            }
            let b = (Intl && Intl.DateTimeFormat);
            if (b) {
                let format_ = null;
                switch (this.a) {
                    case 4:
                        if (this.f == null) {
                            this.f = (new Intl.DateTimeFormat([], { month: 'numeric', day: 'numeric', year: 'numeric', hour: 'numeric', minute: 'numeric', second: 'numeric' }));
                        }
                        format_ = this.f;
                        break;
                    case 5:
                        if (this.e == null) {
                            this.e = (new Intl.DateTimeFormat([], { weekday: 'long', month: 'long', day: 'numeric', year: 'numeric', hour: 'numeric', minute: 'numeric', second: 'numeric' }));
                        }
                        format_ = this.e;
                        break;
                    case 1:
                        if (this.c == null) {
                            this.c = (new Intl.DateTimeFormat([], { weekday: 'long', month: 'long', day: 'numeric', year: 'numeric' }));
                        }
                        format_ = this.c;
                        break;
                    case 0:
                        if (this.d == null) {
                            this.d = (new Intl.DateTimeFormat([], { month: 'numeric', day: 'numeric', year: 'numeric' }));
                        }
                        format_ = this.d;
                        break;
                    case 3:
                        if (this.g == null) {
                            this.g = (new Intl.DateTimeFormat([], { hour: 'numeric', minute: 'numeric', second: 'numeric' }));
                        }
                        format_ = this.g;
                        break;
                    case 2:
                        if (this.h == null) {
                            this.h = (new Intl.DateTimeFormat([], { hour: 'numeric', minute: 'numeric' }));
                        }
                        format_ = this.h;
                        break;
                }
                let date_ = a;
                return (format_.format(date_));
            }
            else {
                let date_ = a;
                switch (this.a) {
                    case 4: return (date_.toLocaleString());
                    case 5: return (date_.toLocaleString());
                    case 1: return (date_.toLocaleDateString());
                    case 0: return (date_.toLocaleDateString());
                    case 3: return (date_.toLocaleTimeString());
                    case 2: return (date_.toLocaleTimeString());
                }
                return a.toString();
            }
        }
    }
    DateTimeColumnValueFormatter.$t = /*@__PURE__*/ markType(DateTimeColumnValueFormatter, 'DateTimeColumnValueFormatter');
    return DateTimeColumnValueFormatter;
})();
/**
 * @hidden
 */
let CellModel = /*@__PURE__*/ (() => {
    class CellModel extends Base {
        constructor() {
            super();
            this.n = null;
            this.r = null;
            this.s = 0;
            this.i0 = null;
            this.j = null;
            this.ej = 0;
            this.a5 = false;
            this.ba = false;
            this.as = false;
            this.aq = false;
            this.a3 = false;
            this.bb = false;
            this.au = false;
            this.a4 = false;
            this.c = null;
            this.d = null;
            this.am = false;
            this.an = false;
            this.al = false;
            this.c1 = 0;
            this.bc = new Dictionary$2(String_$type, Boolean_$type, 0);
            this.cu = -1;
            this.a = null;
            this.be = null;
            this.p = null;
            this.gl = null;
            this.bw = 0;
            this.bx = 0;
            this.c8 = 0;
            this.c9 = 0;
            this.bm = 1;
            this.bl = 1;
            this.bj = 1;
            this.bq = 1;
            this.bk = 1;
            this.bo = 0;
            this.bt = 0;
            this.bp = 0;
            this.bu = 0;
            this.c0 = 0;
            this.da = 0;
            this.ao = false;
            this.u = 0;
            this.bs = 0;
            this.bi = 0;
            this.bn = 0;
            this.e = 0;
            this.g = 1;
            this.jz = null;
            this.j0 = null;
            this.jw = null;
            this.jx = null;
            this.jv = null;
            this.j2 = null;
            this.j6 = null;
            this.j3 = null;
            this.j7 = null;
            this.j8 = null;
            this.j5 = null;
            this.j4 = null;
            this.br = 0.3;
            this.gk = null;
            this.gr = "";
            this.j9 = null;
            this.jy = null;
            this.j1 = null;
            this.ac = null;
            this.aa = null;
            this.y = 0;
            this.bv = 0;
            this.c5 = 0;
            this.c7 = 0;
            this.c6 = 0;
            this.c4 = 0;
            this.cn = 0;
            this.cp = 0;
            this.co = 0;
            this.cm = 0;
            this.cr = 0;
            this.ct = 0;
            this.cs = 0;
            this.cq = 0;
            this.cf = 1;
            this.ch = 1;
            this.cg = 1;
            this.ce = 1;
            this.cx = 2;
            this.cz = 2;
            this.cy = 2;
            this.cw = 2;
            this.cj = 0;
            this.cl = 0;
            this.ck = 0;
            this.ci = 0;
            this.l = 0;
            this.aj = false;
            this.ag = false;
            this.w = 0;
            this.ab = null;
            this.ai = false;
            this.ah = false;
            this.gq = null;
            this.a1 = false;
            this.cv = -1;
            this.ak = false;
            this.gj = 0;
            this.propertyChanged = null;
            this.cellReconciling = null;
            this.t = 0;
            this.ej = -1;
            this.jr();
            this.ke = GridStyleRepository.aw;
        }
        get o() {
            return this.n;
        }
        set o(a) {
            this.n = a;
        }
        static ez(a) {
            if (CellModel.bf == null || CellModel.bf == undefined) {
                CellModel.bf = new Dictionary$2(String_$type, Number_$type, 0);
            }
            if (CellModel.bf.containsKey(a)) {
                return CellModel.bf.item(a);
            }
            let b = CellModel.c3;
            CellModel.c3++;
            CellModel.c2 = b;
            CellModel.bf.item(a, b);
            return b;
        }
        get t() {
            return this.s;
        }
        set t(a) {
            let b = this.s;
            this.s = a;
            if (this.s != b) {
                this.jm("State", CellModel.f8, enumGetBox(ModelStates_$type, b), enumGetBox(ModelStates_$type, this.s));
            }
        }
        get k() {
            return this.j;
        }
        set k(a) {
            let b = this.j;
            this.j = a;
            if (this.j != b) {
                this.jm("Path", CellModel.fu, b, this.j);
            }
        }
        get a6() {
            return this.am;
        }
        set a6(a) {
            let b = this.am;
            this.am = a;
            if (this.am != b) {
                this.jm("IsRowPinned", CellModel.fc, b, this.am);
            }
        }
        get a7() {
            return this.an;
        }
        set a7(a) {
            let b = this.an;
            this.an = a;
            if (this.an != b) {
                this.jm("IsRowSticky", CellModel.fd, b, this.an);
            }
        }
        get a2() {
            return this.al;
        }
        set a2(a) {
            let b = this.al;
            this.al = a;
            if (this.al != b) {
                this.jm("IsLastStickyRow", CellModel.fb, b, this.al);
            }
        }
        get e5() {
            return this.c1;
        }
        set e5(a) {
            let b = this.c1;
            this.c1 = a;
            if (this.c1 != b) {
                this.jm("Indent", CellModel.e6, b, this.c1);
            }
        }
        at(a) {
            if (this.bc.containsKey(a)) {
                return this.bc.item(a);
            }
            return false;
        }
        ax(propertyId_) {
            if (this.cu == -1) {
                return false;
            }
            let a = ((propertyId_ / 32) | 0);
            let b = propertyId_ % 32;
            return ((this.a[a] >> b) & 1) != 0;
        }
        aw(a) {
            let b = CellModel.bf.f(a);
            if (b != undefined) {
                return this.ax(b);
            }
            if (this.at(a)) {
                return true;
            }
            return false;
        }
        je(propertyId_) {
            if (this.cu == -1) {
                this.cu = truncate(Math.ceil(CellModel.c2 / 32));
                this.a = new Array(propertyId_);
            }
            let a = ((propertyId_ / 32) | 0);
            let b = propertyId_ % 32;
            this.a[a] = this.a[a] | (1 << b);
        }
        jb() {
            for (let a = 0; a < this.cu; a++) {
                this.a[a] = 0;
            }
        }
        jf(a) {
            let b = CellModel.bf.f(a);
            if (b != undefined) {
                this.je(b);
                return;
            }
            this.bc.item(a, true);
        }
        jm(a, b, c, d) {
            this.je(b);
            this.jp(a, c, d);
            if (this.o != null) {
                this.o.sk();
            }
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
        }
        jp(a, b, c) {
            switch (a) {
                case "State":
                    this.a5 = true;
                    this.ba = true;
                    this.as = true;
                    this.bb = true;
                    break;
                case "LeftOffset":
                case "TopOffset":
                case "LeftPercentOffset":
                case "TopPercentOffset":
                case "X":
                case "Y":
                    this.a5 = true;
                    break;
                case "Width":
                case "Height":
                    this.ba = true;
                    break;
                case "RowItem":
                    this.jn();
                    break;
                case "Background":
                case "SelectedBackground":
                case "SelectedStatus":
                case "HoverBackground":
                case "HoverStatus":
                case "IsLastStickyRow":
                case "StickyRowBackground":
                case "PinnedRowBackground":
                case "LastStickyRowBackground":
                    this.jh();
                    break;
                case "IsRowSticky":
                case "IsRowPinned":
                case "PinnedRowOpacity":
                    this.jh();
                    this.jk();
                    break;
                case "Border":
                case "ActivationBorder":
                case "ErrorBorder":
                case "BorderLeftWidth":
                case "BorderTopWidth":
                case "BorderBottomWidth":
                case "BorderRightWidth":
                case "ActivationBorderLeftWidth":
                case "ActivationBorderTopWidth":
                case "ActivationBorderBottomWidth":
                case "ActivationBorderRightWidth":
                case "ActivationStatus":
                case "EditError":
                case "ErrorBorderLeftWidth":
                case "ErrorBorderTopWidth":
                case "ErrorBorderBottomWidth":
                case "ErrorBorderRightWidth":
                    this.aq = true;
                    this.ji();
                    break;
                case "PaddingLeft":
                case "PaddingTop":
                case "PaddingBottom":
                case "PaddingRight":
                    this.ji();
                    break;
                case "Opacity":
                    this.jj();
                    break;
                case "ContentOpacity":
                case "EditOpacity":
                    this.jk();
                    break;
                case "IsEdited":
                case "IsDeleted":
                    this.jo();
                    this.jk();
                    this.jl();
                    this.as = true;
                    break;
                case "TextColor":
                case "DeletedTextColor":
                    this.jo();
                    break;
                case "FontInfo":
                case "EditFontInfo":
                    this.jl();
                    break;
                case "Path": break;
                default:
                    this.as = true;
                    break;
            }
        }
        jn() {
        }
        jh() {
            let a = this.ke;
            if (this.a2 && this.kk != null) {
                a = this.kk;
            }
            else if (this.a7 && this.ko != null) {
                a = this.ko;
            }
            else if (this.a6 && this.kl != null) {
                a = this.kl;
            }
            if (this.kj != null) {
                a = this.ki(a, this.kj, this.b3);
            }
            this.kb = this.ki(a, this.km, this.b8);
        }
        ji() {
            let a = false;
            if (this.by != 0 && this.ka != null) {
                a = true;
            }
            if (this.hl != null) {
                let b = this.er - this.eb;
                let c = this.ew - this.eg;
                let d = this.eu - this.ee;
                let e = this.ep - this.d9;
                this.d1 = Math.max(0, this.fo - b);
                this.d5 = Math.max(0, this.fs - c);
                this.d3 = Math.max(0, this.fq - d);
                this.dz = Math.max(0, this.fm - e);
                this.dp = Math.max(0, this.eb + b);
                this.du = Math.max(0, this.eg + c);
                this.ds = Math.max(0, this.ee + d);
                this.dm = Math.max(0, this.d9 + e);
                this.kc = this.kh;
            }
            else {
                if (a && (this.eb == 0 || this.eg == 0 || this.ee == 0 || this.d9 == 0)) {
                    let f = this.dd - this.eb;
                    let g = this.di - this.eg;
                    let h = this.dg - this.ee;
                    let i = this.db - this.d9;
                    this.d1 = Math.max(0, this.fo - f);
                    this.d5 = Math.max(0, this.fs - g);
                    this.d3 = Math.max(0, this.fq - h);
                    this.dz = Math.max(0, this.fm - i);
                    this.dp = Math.max(0, this.eb + f);
                    this.du = Math.max(0, this.eg + g);
                    this.ds = Math.max(0, this.ee + h);
                    this.dm = Math.max(0, this.d9 + i);
                }
                else {
                    this.d1 = this.fo;
                    this.d5 = this.fs;
                    this.d3 = this.fq;
                    this.dz = this.fm;
                    this.dp = this.eb;
                    this.du = this.eg;
                    this.ds = this.ee;
                    this.dm = this.d9;
                }
                let j = this.kf;
                this.kc = this.ki(j, this.ka, this.by);
            }
        }
        jj() {
            this.b0 = this.b6;
        }
        jk() {
            if (this.ay && !this.av) {
                this.bz = this.b2;
            }
            else if (this.a6 && !this.a7) {
                this.bz = this.b7;
            }
            else {
                this.bz = this.b1;
            }
        }
        jo() {
            if (this.av) {
                this.kd = this.kg;
            }
            else {
                this.kd = this.kp;
            }
        }
        jl() {
            if (this.ay || this.av) {
                this.ad = this.ae;
            }
            else {
                this.ad = this.af;
            }
        }
        ki(a, b, c) {
            if (c == 0) {
                return a;
            }
            if (c == 1) {
                return b;
            }
            return BrushUtil.k(a, c, b, 0);
        }
        jr() {
            this.js();
        }
        js() {
            this.jb();
            if (this.be != null) {
                this.be.clear();
            }
            this.b8 = 0;
            this.as = true;
            this.a5 = true;
            this.ba = true;
            this.a3 = false;
        }
        jt(a, b) {
            if (this.be == null) {
                this.be = new Dictionary$2(String_$type, Base.$, 0);
            }
            let c = null;
            if (this.be.containsKey(a)) {
                c = this.be.item(a);
            }
            this.be.item(a, b);
            let d = false;
            if (c == null && b != null) {
                d = true;
            }
            if (c != null) {
                if (!Base.equalsStatic(c, b)) {
                    d = true;
                }
            }
            if (d) {
                this.jf(a);
                this.as = true;
                if (this.o != null) {
                    this.o.sk();
                }
            }
        }
        ap(a) {
            if (this.be == null) {
                return false;
            }
            return this.be.containsKey(a);
        }
        jq(a) {
            if (this.be == null) {
                return;
            }
            if (this.be.containsKey(a)) {
                this.be.removeItem(a);
            }
        }
        gm(a) {
            if (this.be == null) {
                return null;
            }
            if (this.be.containsKey(a)) {
                return this.be.item(a);
            }
            return null;
        }
        get q() {
            return this.p;
        }
        set q(a) {
            let b = this.p;
            this.p = a;
            if (this.p != b) {
                this.a3 = true;
            }
        }
        get gp() {
            return this.gl;
        }
        set gp(a) {
            let b = this.gl;
            this.gl = a;
            if (this.gl != b) {
                this.jm("RowItem", CellModel.fz, b, this.gl);
            }
        }
        get cc() {
            return this.bw;
        }
        set cc(a) {
            let b = this.bw;
            this.bw = a;
            if (this.bw != b) {
                this.jm("X", CellModel.gh, b, this.bw);
            }
        }
        get cd() {
            return this.bx;
        }
        set cd(a) {
            let b = this.bx;
            this.bx = a;
            if (this.bx != b) {
                this.jm("Y", CellModel.gi, b, this.bx);
            }
        }
        get f2() {
            return this.c8;
        }
        set f2(a) {
            let b = this.c8;
            this.c8 = a;
            if (this.c8 != b) {
                this.jm("SnappedX", CellModel.f3, b, this.c8);
            }
        }
        get f4() {
            return this.c9;
        }
        set f4(a) {
            let b = this.c9;
            this.c9 = a;
            if (this.c9 != b) {
                this.jm("SnappedY", CellModel.f5, b, this.c9);
            }
        }
        get b2() {
            return this.bm;
        }
        set b2(a) {
            let b = this.bm;
            this.bm = a;
            if (this.bm != b) {
                this.jm("EditOpacity", CellModel.eo, b, this.bm);
            }
        }
        get b1() {
            return this.bl;
        }
        set b1(a) {
            let b = this.bl;
            this.bl = a;
            if (this.bl != b) {
                this.jm("ContentOpacity", CellModel.ei, b, this.bl);
            }
        }
        get bz() {
            return this.bj;
        }
        set bz(a) {
            let b = this.bj;
            this.bj = a;
            if (this.bj != b) {
                this.jm("ActualContentOpacity", CellModel.dw, b, this.bj);
            }
        }
        get b6() {
            return this.bq;
        }
        set b6(a) {
            let b = this.bq;
            this.bq = a;
            if (this.bq != b) {
                this.jm("Opacity", CellModel.fk, b, this.bq);
            }
        }
        get b0() {
            return this.bk;
        }
        set b0(a) {
            let b = this.bk;
            this.bk = a;
            if (this.bk != b) {
                this.jm("ActualOpacity", CellModel.dy, b, this.bk);
            }
        }
        jg() {
            if (this.cellReconciling != null) {
                this.cellReconciling(this);
            }
        }
        get b4() {
            return this.bo;
        }
        set b4(a) {
            let b = this.bo;
            this.bo = a;
            if (this.bo != b) {
                this.jm("LeftOffset", CellModel.fg, b, this.bo);
            }
        }
        get b9() {
            return this.bt;
        }
        set b9(a) {
            let b = this.bt;
            this.bt = a;
            if (this.bt != b) {
                this.jm("TopOffset", CellModel.gb, b, this.bt);
            }
        }
        get b5() {
            return this.bp;
        }
        set b5(a) {
            let b = this.bp;
            this.bp = a;
            if (this.bp != b) {
                this.jm("LeftPercentOffset", CellModel.fh, b, this.bp);
            }
        }
        get ca() {
            return this.bu;
        }
        set ca(a) {
            let b = this.bu;
            this.bu = a;
            if (this.bu != b) {
                this.jm("TopPercentOffset", CellModel.gc, b, this.bu);
            }
        }
        get e0() {
            return this.c0;
        }
        set e0(a) {
            let b = this.c0;
            this.c0 = a;
            if (this.c0 != b) {
                this.jm("Height", CellModel.e1, b, this.c0);
            }
        }
        get gf() {
            return this.da;
        }
        set gf(a) {
            let b = this.da;
            this.da = a;
            if (this.da != b) {
                this.jm("Width", CellModel.gg, b, this.da);
            }
        }
        get a9() {
            return this.ao;
        }
        set a9(a) {
            let b = this.ao;
            this.ao = a;
            if (this.ao != b) {
                this.jm("IsSelected", CellModel.fe, b, this.ao);
            }
        }
        get v() {
            return this.u;
        }
        set v(a) {
            let b = this.u;
            this.u = a;
            if (this.u != b) {
                this.jm("ModelType", CellModel.fj, enumGetBox(ModelTypes_$type, b), enumGetBox(ModelTypes_$type, this.u));
            }
        }
        get b8() {
            return this.bs;
        }
        set b8(a) {
            let b = this.bs;
            this.bs = a;
            if (this.bs != b) {
                this.jm("SelectedStatus", CellModel.f1, b, this.bs);
            }
        }
        get by() {
            return this.bi;
        }
        set by(a) {
            let b = this.bi;
            this.bi = a;
            if (this.bi != b) {
                this.jm("ActivationStatus", CellModel.dk, b, this.bi);
            }
        }
        get b3() {
            return this.bn;
        }
        set b3(a) {
            let b = this.bn;
            this.bn = a;
            if (this.bn != b) {
                this.jm("HoverStatus", CellModel.e4, b, this.bn);
            }
        }
        get f() {
            return this.e;
        }
        set f(a) {
            let b = this.e;
            this.e = a;
            if (this.e != b) {
                this.jm("HorizontalAlignment", CellModel.e2, enumGetBox(CellContentHorizontalAlignment_$type, b), enumGetBox(CellContentHorizontalAlignment_$type, this.e));
            }
        }
        get h() {
            return this.g;
        }
        set h(a) {
            let b = this.g;
            this.g = a;
            if (this.g != b) {
                this.jm("VerticalAlignment", CellModel.gd, enumGetBox(CellContentVerticalAlignment_$type, b), enumGetBox(CellContentHorizontalAlignment_$type, this.e));
            }
        }
        get ke() {
            return this.jz;
        }
        set ke(a) {
            let b = this.jz;
            this.jz = a;
            if (this.jz != b) {
                this.jm("Background", CellModel.d8, b, this.jz);
            }
        }
        get kf() {
            return this.j0;
        }
        set kf(a) {
            let b = this.j0;
            this.j0 = a;
            if (this.j0 != b) {
                this.jm("Border", CellModel.ed, b, this.j0);
            }
        }
        get kb() {
            return this.jw;
        }
        set kb(a) {
            let b = this.jw;
            this.jw = a;
            if (this.jw != b) {
                this.jm("ActualBackground", CellModel.dl, b, this.jw);
            }
        }
        get kc() {
            return this.jx;
        }
        set kc(a) {
            let b = this.jx;
            this.jx = a;
            if (this.jx != b) {
                this.jm("ActualBorder", CellModel.dr, b, this.jx);
            }
        }
        get ka() {
            return this.jv;
        }
        set ka(a) {
            let b = this.jv;
            this.jv = a;
            if (this.jv != b) {
                this.jm("ActivationBorder", CellModel.df, b, this.jv);
            }
        }
        get kh() {
            return this.j2;
        }
        set kh(a) {
            let b = this.j2;
            this.j2 = a;
            if (this.j2 != b) {
                this.jm("ErrorBorder", CellModel.et, b, this.j2);
            }
        }
        get km() {
            return this.j6;
        }
        set km(a) {
            let b = this.j6;
            this.j6 = a;
            if (this.j6 != b) {
                this.jm("SelectedBackground", CellModel.f0, b, this.j6);
            }
        }
        get kj() {
            return this.j3;
        }
        set kj(a) {
            let b = this.j3;
            this.j3 = a;
            if (this.j3 != b) {
                this.jm("HoverBackground", CellModel.e3, b, this.j3);
            }
        }
        get kn() {
            return this.j7;
        }
        set kn(a) {
            let b = this.j7;
            this.j7 = a;
            if (this.j7 != b) {
                this.jm("SortIndicatorColor", CellModel.f7, b, this.j7);
            }
        }
        get ko() {
            return this.j8;
        }
        set ko(a) {
            let b = this.j8;
            this.j8 = a;
            if (this.j8 != b) {
                this.jm("StickyRowBackground", CellModel.f9, b, this.j8);
            }
        }
        get kl() {
            return this.j5;
        }
        set kl(a) {
            let b = this.j5;
            this.j5 = a;
            if (this.j5 != b) {
                this.jm("PinnedRowBackground", CellModel.fw, b, this.j5);
            }
        }
        get kk() {
            return this.j4;
        }
        set kk(a) {
            let b = this.j4;
            this.j4 = a;
            if (this.j4 != b) {
                this.jm("LastStickyRowBackground", CellModel.ff, b, this.j4);
            }
        }
        get b7() {
            return this.br;
        }
        set b7(a) {
            let b = this.br;
            this.br = a;
            if (this.br != b) {
                this.jm("PinnedRowOpacity", CellModel.fx, b, this.br);
            }
        }
        get go() {
            return this.gk;
        }
        set go(a) {
            let b = this.gk;
            this.gk = a;
            if (this.gk != b) {
                this.jm("OriginalValue", CellModel.fl, b, this.gk);
            }
        }
        get ip() {
            return this.gr;
        }
        set ip(a) {
            let b = this.gr;
            this.gr = a;
            if (this.gr != b) {
                this.jm("RenderValue", CellModel.fy, b, this.gr);
            }
        }
        get kp() {
            return this.j9;
        }
        set kp(a) {
            let b = this.j9;
            this.j9 = a;
            if (this.j9 != b) {
                this.jm("TextColor", CellModel.ga, b, this.j9);
            }
        }
        get kd() {
            return this.jy;
        }
        set kd(a) {
            let b = this.jy;
            this.jy = a;
            if (this.jy != b) {
                this.jm("ActualTextColor", CellModel.d7, b, this.jy);
            }
        }
        get kg() {
            return this.j1;
        }
        set kg(a) {
            let b = this.j1;
            this.j1 = a;
            if (this.j1 != b) {
                this.jm("DeletedTextColor", CellModel.ek, b, this.j1);
            }
        }
        get af() {
            return this.ac;
        }
        set af(a) {
            let b = this.ac;
            this.ac = a;
            if (this.ac != b) {
                this.jm("FontInfo", CellModel.ey, b, this.ac);
            }
        }
        get ad() {
            return this.aa;
        }
        set ad(a) {
            let b = this.aa;
            this.aa = a;
            if (this.aa != b) {
                this.jm("ActualFontInfo", CellModel.dx, b, this.aa);
            }
        }
        get z() {
            return this.y;
        }
        set z(a) {
            let b = this.y;
            this.y = a;
            if (this.y != b) {
                this.jm("LineBreakMode", CellModel.fi, enumGetBox(TextCellLineBreakMode_$type, b), enumGetBox(TextCellLineBreakMode_$type, this.y));
            }
        }
        get cb() {
            return this.bv;
        }
        set cb(a) {
            let b = this.bv;
            this.bv = a;
            if (this.bv != b) {
                this.jm("VirtualizationPercentage", CellModel.ge, b, this.bv);
            }
        }
        get fo() {
            return this.c5;
        }
        set fo(a) {
            let b = this.c5;
            this.c5 = a;
            if (this.c5 != b) {
                this.jm("PaddingLeft", CellModel.fp, b, this.c5);
            }
        }
        get fs() {
            return this.c7;
        }
        set fs(a) {
            let b = this.c7;
            this.c7 = a;
            if (this.c7 != b) {
                this.jm("PaddingTop", CellModel.ft, b, this.c7);
            }
        }
        get fq() {
            return this.c6;
        }
        set fq(a) {
            let b = this.c6;
            this.c6 = a;
            if (this.c6 != b) {
                this.jm("PaddingRight", CellModel.fr, b, this.c6);
            }
        }
        get fm() {
            return this.c4;
        }
        set fm(a) {
            let b = this.c4;
            this.c4 = a;
            if (this.c4 != b) {
                this.jm("PaddingBottom", CellModel.fn, b, this.c4);
            }
        }
        get d1() {
            return this.cn;
        }
        set d1(a) {
            let b = this.cn;
            this.cn = a;
            if (this.cn != b) {
                this.jm("ActualPaddingLeft", CellModel.d2, b, this.cn);
            }
        }
        get d5() {
            return this.cp;
        }
        set d5(a) {
            let b = this.cp;
            this.cp = a;
            if (this.cp != b) {
                this.jm("ActualPaddingTop", CellModel.d6, b, this.cp);
            }
        }
        get d3() {
            return this.co;
        }
        set d3(a) {
            let b = this.co;
            this.co = a;
            if (this.co != b) {
                this.jm("ActualPaddingRight", CellModel.d4, b, this.co);
            }
        }
        get dz() {
            return this.cm;
        }
        set dz(a) {
            let b = this.cm;
            this.cm = a;
            if (this.cm != b) {
                this.jm("ActualPaddingBottom", CellModel.d0, b, this.cm);
            }
        }
        get eb() {
            return this.cr;
        }
        set eb(a) {
            let b = this.cr;
            this.cr = a;
            if (this.cr != b) {
                this.jm("BorderLeftWidth", CellModel.ec, b, this.cr);
            }
        }
        get eg() {
            return this.ct;
        }
        set eg(a) {
            let b = this.ct;
            this.ct = a;
            if (this.ct != b) {
                this.jm("BorderTopWidth", CellModel.eh, b, this.ct);
            }
        }
        get ee() {
            return this.cs;
        }
        set ee(a) {
            let b = this.cs;
            this.cs = a;
            if (this.cs != b) {
                this.jm("BorderRightWidth", CellModel.ef, b, this.cs);
            }
        }
        get d9() {
            return this.cq;
        }
        set d9(a) {
            let b = this.cq;
            this.cq = a;
            if (this.cq != b) {
                this.jm("BorderBottomWidth", CellModel.ea, b, this.cq);
            }
        }
        get dd() {
            return this.cf;
        }
        set dd(a) {
            let b = this.cf;
            this.cf = a;
            if (this.cf != b) {
                this.jm("ActivationBorderLeftWidth", CellModel.de, b, this.cf);
            }
        }
        get di() {
            return this.ch;
        }
        set di(a) {
            let b = this.ch;
            this.ch = a;
            if (this.ch != b) {
                this.jm("ActivationBorderTopWidth", CellModel.dj, b, this.ch);
            }
        }
        get dg() {
            return this.cg;
        }
        set dg(a) {
            let b = this.cg;
            this.cg = a;
            if (this.cg != b) {
                this.jm("ActivationBorderRightWidth", CellModel.dh, b, this.cg);
            }
        }
        get db() {
            return this.ce;
        }
        set db(a) {
            let b = this.ce;
            this.ce = a;
            if (this.ce != b) {
                this.jm("ActivationBorderBottomWidth", CellModel.dc, b, this.ce);
            }
        }
        get er() {
            return this.cx;
        }
        set er(a) {
            let b = this.cx;
            this.cx = a;
            if (this.cx != b) {
                this.jm("ErrorBorderLeftWidth", CellModel.es, b, this.cx);
            }
        }
        get ew() {
            return this.cz;
        }
        set ew(a) {
            let b = this.cz;
            this.cz = a;
            if (this.cz != b) {
                this.jm("ErrorBorderTopWidth", CellModel.ex, b, this.cz);
            }
        }
        get eu() {
            return this.cy;
        }
        set eu(a) {
            let b = this.cy;
            this.cy = a;
            if (this.cy != b) {
                this.jm("ErrorBorderRightWidth", CellModel.ev, b, this.cy);
            }
        }
        get ep() {
            return this.cw;
        }
        set ep(a) {
            let b = this.cw;
            this.cw = a;
            if (this.cw != b) {
                this.jm("ErrorBorderBottomWidth", CellModel.eq, b, this.cw);
            }
        }
        get dp() {
            return this.cj;
        }
        set dp(a) {
            let b = this.cj;
            this.cj = a;
            if (this.cj != b) {
                this.jm("ActualBorderLeftWidth", CellModel.dq, b, this.cj);
            }
        }
        get du() {
            return this.cl;
        }
        set du(a) {
            let b = this.cl;
            this.cl = a;
            if (this.cl != b) {
                this.jm("ActualBorderTopWidth", CellModel.dv, b, this.cl);
            }
        }
        get ds() {
            return this.ck;
        }
        set ds(a) {
            let b = this.ck;
            this.ck = a;
            if (this.ck != b) {
                this.jm("ActualBorderRightWidth", CellModel.dt, b, this.ck);
            }
        }
        get dm() {
            return this.ci;
        }
        set dm(a) {
            let b = this.ci;
            this.ci = a;
            if (this.ci != b) {
                this.jm("ActualBorderBottomWidth", CellModel.dn, b, this.ci);
            }
        }
        get m() {
            return this.l;
        }
        set m(a) {
            let b = this.l;
            this.l = a;
            if (this.l != b) {
                this.jm("SortDirection", CellModel.f6, enumGetBox(ColumnSortDirection_$type, b), enumGetBox(ColumnSortDirection_$type, this.l));
            }
        }
        get az() {
            return this.aj;
        }
        set az(a) {
            let b = this.aj;
            this.aj = a;
            if (this.aj != b) {
                this.jm("IsExpanded", CellModel.fa, b, this.aj);
            }
        }
        get ar() {
            return this.ag;
        }
        set ar(a) {
            let b = this.ag;
            this.ag = a;
            if (this.ag != b) {
                this.jm("IsCollapsable", CellModel.e7, b, this.ag);
            }
        }
        get x() {
            return this.w;
        }
        set x(a) {
            let b = this.w;
            this.w = a;
            if (this.w != b) {
                this.jm("Pinned", CellModel.fv, enumGetBox(PinnedPositions_$type, b), enumGetBox(PinnedPositions_$type, this.w));
            }
        }
        get ae() {
            return this.ab;
        }
        set ae(a) {
            let b = this.ab;
            this.ab = a;
            if (this.ab != b) {
                this.jm("EditFontInfo", CellModel.em, b, this.ab);
            }
        }
        get ay() {
            return this.ai;
        }
        set ay(a) {
            let b = this.ai;
            this.ai = a;
            if (this.ai != b) {
                this.jm("IsEdited", CellModel.e9, b, this.ai);
            }
        }
        get av() {
            return this.ah;
        }
        set av(a) {
            let b = this.ah;
            this.ah = a;
            if (this.ah != b) {
                this.jm("IsDeleted", CellModel.e8, b, this.ah);
            }
        }
        get hl() {
            return this.gq;
        }
        set hl(a) {
            let b = this.gq;
            this.gq = a;
            if (this.gq != b) {
                this.jm("EditError", CellModel.el, b, this.gq);
            }
        }
        get en() {
            return this.cv;
        }
        set en(a) {
            this.cv = a;
        }
        get a0() {
            return this.ak;
        }
        set a0(a) {
            this.ak = a;
        }
        i9() {
            this.ja();
        }
        ja() {
            this.a5 = false;
            this.ba = false;
            this.as = false;
            this.aq = false;
            this.a3 = false;
            this.bb = false;
            this.au = false;
            this.jb();
        }
        b(a) {
            if (a == null) {
                a = new CellModelExport();
            }
            a.r = this.cc;
            a.s = this.cd;
            a.n = this.f2;
            a.o = this.f4;
            a.k = this.e0;
            a.q = this.gf;
            a.m = this.b8;
            a.h = this.by;
            a.z = EnumUtil.getName(TextCellLineBreakMode_$type, this.z);
            a.a = AppearanceHelper.a(this.kb);
            a.b = AppearanceHelper.a(this.kc);
            a.l = this.b0;
            a.i = this.bz;
            a.t = this.e5;
            a.g = this.ar;
            a.d = this.f;
            a.e = this.h;
            a.aa = this.ip;
            a.p = this.cb;
            a.f = this.m;
            a.c = AppearanceHelper.a(this.kd);
            if (this.ad != null) {
                let b = this.ad;
                if (this.o != null && b.n == null) {
                    let c = this.o.externalGrid.renderer;
                    let d = FontUtil.getFontInfoFromString(c, b.fontString);
                    b.n = d.n;
                    b.d = d.d;
                    b.o = d.o;
                    b.q = d.q;
                    b.r = d.r;
                    b.s = d.s;
                }
                if (b.n != null) {
                    a.u = b.n;
                }
                if (!isNaN_(b.d)) {
                    a.j = b.d;
                }
                if (b.s != null) {
                    a.y = b.s;
                }
                if (b.q != null) {
                    a.w = b.q;
                }
                if (b.o != null) {
                    a.v = b.q;
                }
            }
            return a;
        }
        jd() {
            if (CellModel.bg == null) {
                CellModel.bg = new Dictionary$2(String_$type, Delegate_$type, 0);
                CellModel.bg.addItem("X", (a, b) => a.cc = typeGetValue(b));
                CellModel.bg.addItem("Y", (a, b) => a.cd = typeGetValue(b));
                CellModel.bg.addItem("SnappedX", (a, b) => a.f2 = typeGetValue(b));
                CellModel.bg.addItem("SnappedY", (a, b) => a.f4 = typeGetValue(b));
                CellModel.bg.addItem("ContentOpacity", (a, b) => a.b1 = b);
                CellModel.bg.addItem("Opacity", (a, b) => a.b6 = b);
                CellModel.bg.addItem("LeftOffset", (a, b) => a.b4 = b);
                CellModel.bg.addItem("LeftPercentOffset", (a, b) => a.b5 = b);
                CellModel.bg.addItem("TopOffset", (a, b) => a.b9 = b);
                CellModel.bg.addItem("TopPercentOffset", (a, b) => a.ca = b);
                CellModel.bg.addItem("Height", (a, b) => a.e0 = typeGetValue(b));
                CellModel.bg.addItem("Width", (a, b) => a.gf = typeGetValue(b));
                CellModel.bg.addItem("IsSelected", (a, b) => a.a9 = b);
                CellModel.bg.addItem("ModelType", (a, b) => a.v = EnumUtil.getEnumValue(ModelTypes_$type, b));
                CellModel.bg.addItem("SelectedStatus", (a, b) => a.b8 = b);
                CellModel.bg.addItem("ActivationStatus", (a, b) => a.by = b);
                CellModel.bg.addItem("HoverStatus", (a, b) => a.b3 = b);
                CellModel.bg.addItem("HorizontalAlignment", (a, b) => a.f = EnumUtil.getEnumValue(CellContentHorizontalAlignment_$type, b));
                CellModel.bg.addItem("VerticalAlignment", (a, b) => a.h = EnumUtil.getEnumValue(CellContentVerticalAlignment_$type, b));
                CellModel.bg.addItem("Background", (a, b) => a.ke = b);
                CellModel.bg.addItem("Border", (a, b) => a.kf = b);
                CellModel.bg.addItem("ActivationBorder", (a, b) => a.ka = b);
                CellModel.bg.addItem("SelectedBackground", (a, b) => a.km = b);
                CellModel.bg.addItem("HoverBackground", (a, b) => a.kj = b);
                CellModel.bg.addItem("RenderValue", (a, b) => a.ip = b);
                CellModel.bg.addItem("OriginalValue", (a, b) => a.go = b);
                CellModel.bg.addItem("TextColor", (a, b) => a.kp = b);
                CellModel.bg.addItem("SortIndicatorColor", (a, b) => a.kn = b);
                CellModel.bg.addItem("FontInfo", (a, b) => a.af = b);
                CellModel.bg.addItem("LineBreakMode", (a, b) => a.z = EnumUtil.getEnumValue(TextCellLineBreakMode_$type, b));
                CellModel.bg.addItem("VirtualizationPercentage", (a, b) => a.cb = b);
                CellModel.bg.addItem("PaddingLeft", (a, b) => a.fo = typeGetValue(b));
                CellModel.bg.addItem("PaddingTop", (a, b) => a.fs = typeGetValue(b));
                CellModel.bg.addItem("PaddingRight", (a, b) => a.fq = typeGetValue(b));
                CellModel.bg.addItem("PaddingBottom", (a, b) => a.fm = typeGetValue(b));
                CellModel.bg.addItem("BorderLeftWidth", (a, b) => a.eb = typeGetValue(b));
                CellModel.bg.addItem("BorderTopWidth", (a, b) => a.eg = typeGetValue(b));
                CellModel.bg.addItem("BorderRightWidth", (a, b) => a.ee = typeGetValue(b));
                CellModel.bg.addItem("BorderBottomWidth", (a, b) => a.d9 = typeGetValue(b));
                CellModel.bg.addItem("ActivationBorderLeftWidth", (a, b) => a.dd = typeGetValue(b));
                CellModel.bg.addItem("ActivationBorderTopWidth", (a, b) => a.di = typeGetValue(b));
                CellModel.bg.addItem("ActivationBorderRightWidth", (a, b) => a.dg = typeGetValue(b));
                CellModel.bg.addItem("ActivationBorderBottomWidth", (a, b) => a.db = typeGetValue(b));
                CellModel.bg.addItem("SortDirection", (a, b) => a.m = EnumUtil.getEnumValue(ColumnSortDirection_$type, b));
                CellModel.bg.addItem("PinnedRowBackground", (a, b) => a.kl = b);
                CellModel.bg.addItem("StickyRowBackground", (a, b) => a.ko = b);
                CellModel.bg.addItem("LastStickyRowBackground", (a, b) => a.kk = b);
                CellModel.bg.addItem("PinnedRowOpacity", (a, b) => a.b7 = b);
                CellModel.bg.addItem("Pinned", (a, b) => a.x = EnumUtil.getEnumValue(PinnedPositions_$type, b));
                CellModel.bg.addItem("IsEdited", (a, b) => a.ay = b);
                CellModel.bg.addItem("IsDeleted", (a, b) => a.av = b);
                CellModel.bg.addItem("DeletedTextColor", (a, b) => a.kg = b);
                CellModel.bg.addItem("EditOpacity", (a, b) => a.b2 = b);
                CellModel.bg.addItem("EditFontInfo", (a, b) => a.ae = b);
                CellModel.bg.addItem("ErrorBorder", (a, b) => a.kh = b);
                CellModel.bg.addItem("ErrorBorderLeftWidth", (a, b) => a.er = typeGetValue(b));
                CellModel.bg.addItem("ErrorBorderTopWidth", (a, b) => a.ew = typeGetValue(b));
                CellModel.bg.addItem("ErrorBorderBottomWidth", (a, b) => a.ep = typeGetValue(b));
                CellModel.bg.addItem("ErrorBorderRightWidth", (a, b) => a.eu = typeGetValue(b));
                CellModel.bg.addItem("EditError", (a, b) => a.hl = b);
            }
        }
        jc() {
            if (CellModel.bd == null) {
                CellModel.bd = new Dictionary$2(String_$type, Delegate_$type, 0);
                CellModel.bd.addItem("X", (a) => a.cc);
                CellModel.bd.addItem("Y", (a) => a.cd);
                CellModel.bd.addItem("SnappedX", (a) => a.f2);
                CellModel.bd.addItem("SnappedY", (a) => a.f4);
                CellModel.bd.addItem("ContentOpacity", (a) => a.b1);
                CellModel.bd.addItem("Opacity", (a) => a.b6);
                CellModel.bd.addItem("LeftOffset", (a) => a.b4);
                CellModel.bd.addItem("LeftPercentOffset", (a) => a.b5);
                CellModel.bd.addItem("TopOffset", (a) => a.b9);
                CellModel.bd.addItem("TopPercentOffset", (a) => a.ca);
                CellModel.bd.addItem("Height", (a) => a.e0);
                CellModel.bd.addItem("Width", (a) => a.gf);
                CellModel.bd.addItem("IsSelected", (a) => a.a9);
                CellModel.bd.addItem("ModelType", (a) => enumGetBox(ModelTypes_$type, a.v));
                CellModel.bd.addItem("SelectedStatus", (a) => a.b8);
                CellModel.bd.addItem("ActivationStatus", (a) => a.by);
                CellModel.bd.addItem("HorizontalAlignment", (a) => enumGetBox(CellContentHorizontalAlignment_$type, a.f));
                CellModel.bd.addItem("VerticalAlignment", (a) => enumGetBox(CellContentVerticalAlignment_$type, a.h));
                CellModel.bd.addItem("Background", (a) => a.ke);
                CellModel.bd.addItem("Border", (a) => a.kf);
                CellModel.bd.addItem("ActivationBorder", (a) => a.ka);
                CellModel.bd.addItem("SelectedBackground", (a) => a.km);
                CellModel.bd.addItem("HoverBackground", (a) => a.kj);
                CellModel.bd.addItem("RenderValue", (a) => a.ip);
                CellModel.bd.addItem("OriginalValue", (a) => a.go);
                CellModel.bd.addItem("TextColor", (a) => a.kp);
                CellModel.bd.addItem("SortIndicatorColor", (a) => a.kn);
                CellModel.bd.addItem("FontInfo", (a) => a.af);
                CellModel.bd.addItem("LineBreakMode", (a) => enumGetBox(TextCellLineBreakMode_$type, a.z));
                CellModel.bd.addItem("VirtualizationPercentage", (a) => a.cb);
                CellModel.bd.addItem("PaddingLeft", (a) => a.fo);
                CellModel.bd.addItem("PaddingTop", (a) => a.fs);
                CellModel.bd.addItem("PaddingRight", (a) => a.fq);
                CellModel.bd.addItem("PaddingBottom", (a) => a.fm);
                CellModel.bd.addItem("BorderLeftWidth", (a) => a.eb);
                CellModel.bd.addItem("BorderTopWidth", (a) => a.eg);
                CellModel.bd.addItem("BorderRightWidth", (a) => a.ee);
                CellModel.bd.addItem("BorderBottomWidth", (a) => a.d9);
                CellModel.bd.addItem("ActivationBorderLeftWidth", (a) => a.dd);
                CellModel.bd.addItem("ActivationBorderTopWidth", (a) => a.di);
                CellModel.bd.addItem("ActivationBorderRightWidth", (a) => a.dg);
                CellModel.bd.addItem("ActivationBorderBottomWidth", (a) => a.db);
                CellModel.bd.addItem("SortDirection", (a) => enumGetBox(ColumnSortDirection_$type, a.m));
                CellModel.bd.addItem("PinnedRowBackground", (a) => a.kl);
                CellModel.bd.addItem("StickyRowBackground", (a) => a.ko);
                CellModel.bd.addItem("LastStickyRowBackground", (a) => a.kk);
                CellModel.bd.addItem("PinnedRowOpacity", (a) => a.b7);
                CellModel.bd.addItem("Pinned", (a) => enumGetBox(PinnedPositions_$type, a.x));
                CellModel.bd.addItem("IsEdited", (a) => a.ay);
                CellModel.bd.addItem("IsDeleted", (a) => a.av);
                CellModel.bd.addItem("DeletedTextColor", (a) => a.kg);
                CellModel.bd.addItem("EditOpacity", (a) => a.b2);
                CellModel.bd.addItem("EditFontInfo", (a) => a.ae);
                CellModel.bd.addItem("ErrorBorder", (a) => a.kh);
                CellModel.bd.addItem("ErrorBorderLeftWidth", (a) => a.er);
                CellModel.bd.addItem("ErrorBorderTopWidth", (a) => a.ew);
                CellModel.bd.addItem("ErrorBorderBottomWidth", (a) => a.ep);
                CellModel.bd.addItem("ErrorBorderRightWidth", (a) => a.eu);
                CellModel.bd.addItem("EditError", (a) => a.hl);
            }
        }
        ju(a, b) {
            this.jd();
            if (CellModel.bg.containsKey(a)) {
                CellModel.bg.item(a)(this, b);
            }
            else {
                this.jt(a, b);
            }
        }
        gn(a) {
            this.jc();
            if (CellModel.bd.containsKey(a)) {
                return CellModel.bd.item(a)(this);
            }
            if (this.ap(a)) {
                return this.gm(a);
            }
            return null;
        }
        a8(a) {
            return (a != 1 || (a == 1 && this.n.dy == 1)) && a != 2 && a != 4 && a != 5;
        }
    }
    CellModel.$t = /*@__PURE__*/ markType(CellModel, 'CellModel');
    CellModel.c3 = 0;
    CellModel.c2 = 0;
    CellModel.bf = null;
    CellModel.f8 = /*@__PURE__*/ CellModel.ez("State");
    CellModel.fu = /*@__PURE__*/ CellModel.ez("Path");
    CellModel.fc = /*@__PURE__*/ CellModel.ez("IsRowPinned");
    CellModel.fd = /*@__PURE__*/ CellModel.ez("IsRowSticky");
    CellModel.fb = /*@__PURE__*/ CellModel.ez("IsLastStickyRow");
    CellModel.e6 = /*@__PURE__*/ CellModel.ez("Indent");
    CellModel.fz = /*@__PURE__*/ CellModel.ez("RowItem");
    CellModel.gh = /*@__PURE__*/ CellModel.ez("X");
    CellModel.gi = /*@__PURE__*/ CellModel.ez("Y");
    CellModel.f3 = /*@__PURE__*/ CellModel.ez("SnappedX");
    CellModel.f5 = /*@__PURE__*/ CellModel.ez("SnappedY");
    CellModel.eo = /*@__PURE__*/ CellModel.ez("EditOpacity");
    CellModel.ei = /*@__PURE__*/ CellModel.ez("ContentOpacity");
    CellModel.dw = /*@__PURE__*/ CellModel.ez("ActualContentOpacity");
    CellModel.fk = /*@__PURE__*/ CellModel.ez("Opacity");
    CellModel.dy = /*@__PURE__*/ CellModel.ez("ActualOpacity");
    CellModel.fg = /*@__PURE__*/ CellModel.ez("LeftOffset");
    CellModel.gb = /*@__PURE__*/ CellModel.ez("TopOffset");
    CellModel.fh = /*@__PURE__*/ CellModel.ez("LeftPercentOffset");
    CellModel.gc = /*@__PURE__*/ CellModel.ez("TopPercentOffset");
    CellModel.e1 = /*@__PURE__*/ CellModel.ez("Height");
    CellModel.gg = /*@__PURE__*/ CellModel.ez("Width");
    CellModel.fe = /*@__PURE__*/ CellModel.ez("IsSelected");
    CellModel.fj = /*@__PURE__*/ CellModel.ez("ModelType");
    CellModel.f1 = /*@__PURE__*/ CellModel.ez("SelectedStatus");
    CellModel.dk = /*@__PURE__*/ CellModel.ez("ActivationStatus");
    CellModel.e4 = /*@__PURE__*/ CellModel.ez("HoverStatus");
    CellModel.e2 = /*@__PURE__*/ CellModel.ez("HorizontalAlignment");
    CellModel.gd = /*@__PURE__*/ CellModel.ez("VerticalAlignment");
    CellModel.d8 = /*@__PURE__*/ CellModel.ez("Background");
    CellModel.ed = /*@__PURE__*/ CellModel.ez("Border");
    CellModel.dl = /*@__PURE__*/ CellModel.ez("ActualBackground");
    CellModel.dr = /*@__PURE__*/ CellModel.ez("ActualBorder");
    CellModel.df = /*@__PURE__*/ CellModel.ez("ActivationBorder");
    CellModel.et = /*@__PURE__*/ CellModel.ez("ErrorBorder");
    CellModel.f0 = /*@__PURE__*/ CellModel.ez("SelectedBackground");
    CellModel.e3 = /*@__PURE__*/ CellModel.ez("HoverBackground");
    CellModel.f7 = /*@__PURE__*/ CellModel.ez("SortIndicatorColor");
    CellModel.f9 = /*@__PURE__*/ CellModel.ez("StickyRowBackground");
    CellModel.fw = /*@__PURE__*/ CellModel.ez("PinnedRowBackground");
    CellModel.ff = /*@__PURE__*/ CellModel.ez("LastStickyRowBackground");
    CellModel.fx = /*@__PURE__*/ CellModel.ez("PinnedRowOpacity");
    CellModel.fl = /*@__PURE__*/ CellModel.ez("OriginalValue");
    CellModel.fy = /*@__PURE__*/ CellModel.ez("RenderValue");
    CellModel.ga = /*@__PURE__*/ CellModel.ez("TextColor");
    CellModel.d7 = /*@__PURE__*/ CellModel.ez("ActualTextColor");
    CellModel.ek = /*@__PURE__*/ CellModel.ez("DeletedTextColor");
    CellModel.ey = /*@__PURE__*/ CellModel.ez("FontInfo");
    CellModel.dx = /*@__PURE__*/ CellModel.ez("ActualFontInfo");
    CellModel.fi = /*@__PURE__*/ CellModel.ez("LineBreakMode");
    CellModel.ge = /*@__PURE__*/ CellModel.ez("VirtualizationPercentage");
    CellModel.fp = /*@__PURE__*/ CellModel.ez("PaddingLeft");
    CellModel.ft = /*@__PURE__*/ CellModel.ez("PaddingTop");
    CellModel.fr = /*@__PURE__*/ CellModel.ez("PaddingRight");
    CellModel.fn = /*@__PURE__*/ CellModel.ez("PaddingBottom");
    CellModel.d2 = /*@__PURE__*/ CellModel.ez("ActualPaddingLeft");
    CellModel.d6 = /*@__PURE__*/ CellModel.ez("ActualPaddingTop");
    CellModel.d4 = /*@__PURE__*/ CellModel.ez("ActualPaddingRight");
    CellModel.d0 = /*@__PURE__*/ CellModel.ez("ActualPaddingBottom");
    CellModel.ec = /*@__PURE__*/ CellModel.ez("BorderLeftWidth");
    CellModel.eh = /*@__PURE__*/ CellModel.ez("BorderTopWidth");
    CellModel.ef = /*@__PURE__*/ CellModel.ez("BorderRightWidth");
    CellModel.ea = /*@__PURE__*/ CellModel.ez("BorderBottomWidth");
    CellModel.de = /*@__PURE__*/ CellModel.ez("ActivationBorderLeftWidth");
    CellModel.dj = /*@__PURE__*/ CellModel.ez("ActivationBorderTopWidth");
    CellModel.dh = /*@__PURE__*/ CellModel.ez("ActivationBorderRightWidth");
    CellModel.dc = /*@__PURE__*/ CellModel.ez("ActivationBorderBottomWidth");
    CellModel.es = /*@__PURE__*/ CellModel.ez("ErrorBorderLeftWidth");
    CellModel.ex = /*@__PURE__*/ CellModel.ez("ErrorBorderTopWidth");
    CellModel.ev = /*@__PURE__*/ CellModel.ez("ErrorBorderRightWidth");
    CellModel.eq = /*@__PURE__*/ CellModel.ez("ErrorBorderBottomWidth");
    CellModel.dq = /*@__PURE__*/ CellModel.ez("ActualBorderLeftWidth");
    CellModel.dv = /*@__PURE__*/ CellModel.ez("ActualBorderTopWidth");
    CellModel.dt = /*@__PURE__*/ CellModel.ez("ActualBorderRightWidth");
    CellModel.dn = /*@__PURE__*/ CellModel.ez("ActualBorderBottomWidth");
    CellModel.f6 = /*@__PURE__*/ CellModel.ez("SortDirection");
    CellModel.fa = /*@__PURE__*/ CellModel.ez("IsExpanded");
    CellModel.e7 = /*@__PURE__*/ CellModel.ez("IsCollapsable");
    CellModel.fv = /*@__PURE__*/ CellModel.ez("Pinned");
    CellModel.em = /*@__PURE__*/ CellModel.ez("EditFontInfo");
    CellModel.e9 = /*@__PURE__*/ CellModel.ez("IsEdited");
    CellModel.e8 = /*@__PURE__*/ CellModel.ez("IsDeleted");
    CellModel.el = /*@__PURE__*/ CellModel.ez("EditError");
    CellModel.bg = null;
    CellModel.bd = null;
    return CellModel;
})();
/**
 * @hidden
 */
let DateTimeCellModel = /*@__PURE__*/ (() => {
    class DateTimeCellModel extends CellModel {
        constructor() {
            super();
            this.kz = new Date();
            this.lb = null;
            this.kq = null;
            this.ks = null;
            this.k9 = null;
            this._formatOverride = null;
            this.kv = 0;
            this.kt = null;
            this.kx = false;
            this.k0 = dateMinValue();
            this.je(DateTimeCellModel.k2);
            this.a0 = true;
        }
        get k0() {
            return this.kz;
        }
        set k0(a) {
            let b = this.kz;
            this.kz = a;
            if (+(this.kz) != +b) {
                this.jm("DateTimeValue", DateTimeCellModel.k2, b, this.kz);
            }
        }
        get lh() {
            return this.lb;
        }
        set lh(a) {
            let b = this.lb;
            this.lb = a;
            if (this.lb != b) {
                this.jm("FormatStringOverride", DateTimeCellModel.k5, b, this.lb);
            }
        }
        get kr() {
            return this.kq;
        }
        set kr(a) {
            let b = this.kq;
            this.kq = a;
            if (this.kq != b) {
                this.jm("FormatSpecifiers", DateTimeCellModel.k4, b, this.kq);
            }
        }
        get la() {
            return this._formatOverride;
        }
        set la(a) {
            let b = this._formatOverride;
            this._formatOverride = a;
            if (this._formatOverride != b) {
                this.jm("FormatOverride", DateTimeCellModel.k3, b, this._formatOverride);
            }
        }
        get kw() {
            return this.kv;
        }
        set kw(a) {
            let b = this.kv;
            this.kv = a;
            if (this.kv != b) {
                this.jm("DateTimeFormat", DateTimeCellModel.k1, enumGetBox(DateTimeFormats_$type, b), enumGetBox(DateTimeFormats_$type, this.kv));
            }
        }
        le(a) {
            if (this.ks != null) {
                return this.ks.i(a);
            }
            if (this._formatOverride != null) {
                let date_ = a;
                return (this._formatOverride.format(date_));
            }
            this.kt.j(this);
            return this.kt.i(a);
        }
        get ku() {
            return this.kt;
        }
        set ku(a) {
            let b = this.kt;
            this.kt = a;
            if (this.kt != b) {
                this.jm("Formatter", DateTimeCellModel.k6, b, this.kt);
            }
        }
        get ky() {
            return this.kx;
        }
        set ky(a) {
            let b = this.kx;
            this.kx = a;
            if (this.kx != b) {
                this.jm("IsOffsetValue", DateTimeCellModel.k7, b, this.kx);
            }
        }
        jp(a, b, c) {
            switch (a) {
                case "FormatStringOverride":
                case "FormatSpecifiers":
                    if (this.lh != null) {
                        this.ks = new BindingFormatter();
                        this.ks.j = this.lh;
                        this.ks.d = this.kr;
                    }
                    else {
                        this.ks = null;
                    }
                    break;
            }
            super.jp(a, b, c);
        }
        ju(a, b) {
            super.ju(a, b);
            if (a == "DateTimeFormat") {
                this.kw = EnumUtil.getEnumValue(DateTimeFormats_$type, b);
            }
            if (a == "DateTimeValue") {
                this.k0 = b;
            }
            if (a == "IsOffsetValue") {
                this.ky = b;
            }
            if (a == "FormatOverride") {
                this.la = b;
            }
        }
        gn(a) {
            if (a == "DateTimeFormat") {
                return enumGetBox(DateTimeFormats_$type, this.kw);
            }
            if (a == "DateTimeValue") {
                return this.k0;
            }
            if (a == "IsOffsetValue") {
                return this.ky;
            }
            if (a == "FormatOverride") {
                return this.la;
            }
            return super.gn(a);
        }
        b(a) {
            if (a == null) {
                a = new DateTimeCellModelExport();
            }
            a = super.b(a);
            let b = a;
            b.af = this.k0;
            b.ag = this.kw;
            b.ae = this.ky;
            return b;
        }
    }
    DateTimeCellModel.$t = /*@__PURE__*/ markType(DateTimeCellModel, 'DateTimeCellModel', CellModel.$);
    DateTimeCellModel.k2 = /*@__PURE__*/ CellModel.ez("DateTimeValue");
    DateTimeCellModel.k5 = /*@__PURE__*/ CellModel.ez("FormatStringOverride");
    DateTimeCellModel.k4 = /*@__PURE__*/ CellModel.ez("FormatSpecifiers");
    DateTimeCellModel.k3 = /*@__PURE__*/ CellModel.ez("FormatOverride");
    DateTimeCellModel.k1 = /*@__PURE__*/ CellModel.ez("DateTimeFormat");
    DateTimeCellModel.k6 = /*@__PURE__*/ CellModel.ez("Formatter");
    DateTimeCellModel.k7 = /*@__PURE__*/ CellModel.ez("IsOffsetValue");
    return DateTimeCellModel;
})();
/**
 * @hidden
 */
let EditorCellModel = /*@__PURE__*/ (() => {
    class EditorCellModel extends CellModel {
        constructor() {
            super();
            this.k1 = 0;
            this.k0 = 0;
            this.ky = true;
            this.ku = null;
            this.ks = 0;
            this.lg = null;
            this.lc = null;
            this.kw = 0;
            this.lb = null;
            this.lf = null;
            this.kq = null;
            this.i0 = "editorCell";
        }
        get kz() {
            return this.ky;
        }
        set kz(a) {
            let b = this.ky;
            this.ky = a;
            if (b != this.ky) {
                this.jm("IsHidden", EditorCellModel.la, b, this.ky);
            }
        }
        get kv() {
            return this.ku;
        }
        set kv(a) {
            let b = this.ku;
            this.ku = a;
            if (b != this.ku) {
                this.jm("EditTarget", EditorCellModel.k7, b, this.ku);
            }
        }
        get kt() {
            return this.ks;
        }
        set kt(a) {
            let b = this.ks;
            this.ks = a;
            if (b != this.ks) {
                this.jm("DataType", EditorCellModel.k2, enumGetBox(DataSourceSchemaPropertyType_$type, b), enumGetBox(DataSourceSchemaPropertyType_$type, this.ks));
            }
        }
        get lp() {
            return this.lg;
        }
        set lp(a) {
            let b = this.lg;
            this.lg = a;
            if (b != this.lg) {
                this.jm("ErrorMessage", EditorCellModel.k9, b, this.lg);
            }
        }
        get le() {
            return this.lc;
        }
        set le(a) {
            let b = this.lc;
            this.lc = a;
            if (b != this.lc) {
                this.jm("EditValue", EditorCellModel.k8, b, this.lc);
            }
        }
        get kx() {
            return this.kw;
        }
        set kx(a) {
            let b = this.kw;
            this.kw = a;
            if (b != this.kw) {
                this.jm("EditorType", EditorCellModel.k5, enumGetBox(EditorType_$type, b), enumGetBox(EditorType_$type, this.kw));
            }
        }
        get ld() {
            return this.lb;
        }
        set ld(a) {
            let b = this.lb;
            this.lb = a;
            if (b != this.lb) {
                this.jm("EditorItemsSource", EditorCellModel.k3, b, this.lb);
            }
        }
        get lj() {
            return this.lf;
        }
        set lj(a) {
            let b = this.lf;
            this.lf = a;
            if (b != this.lf) {
                this.jm("EditorTextField", EditorCellModel.k4, b, this.lf);
            }
        }
        get kr() {
            return this.kq;
        }
        set kr(a) {
            let b = this.kq;
            this.kq = a;
            if (b != this.kq) {
                this.jm("EditorValueField", EditorCellModel.k6, b, this.kq);
            }
        }
        jp(a, b, c) {
            super.jp(a, b, c);
            switch (a) {
                case "IsHidden":
                    this.a5 = true;
                    break;
                case "EditTarget":
                    this.ls(b);
                    this.lu();
                    this.as = true;
                    break;
                case "OriginalValue":
                case "DataType":
                    this.as = true;
                    break;
                case "ErrorMessage":
                    this.lu();
                    this.as = true;
                    break;
            }
        }
        ju(a, b) {
            super.ju(a, b);
            if (a == "IsHidden") {
                this.kz = b;
            }
            else if (a == "DataType") {
                this.kt = EnumUtil.getEnumValue(DataSourceSchemaPropertyType_$type, b);
            }
            else if (a == "ErrorMessage") {
                this.lp = b;
            }
            else if (a == "EditValue") {
                this.le = b;
            }
        }
        gn(a) {
            switch (a) {
                case "IsHidden": return this.kz;
                case "DataType": return enumGetBox(DataSourceSchemaPropertyType_$type, this.kt);
                case "ErrorMessage": return this.lp;
                case "EditValue": return this.le;
            }
            return super.gn(a);
        }
        b(a) {
            if (a == null) {
                a = new EditorCellModelExport();
            }
            let b = super.b(a);
            b.af = this.kz;
            b.ae = this.kt;
            b.ag = this.le != null ? this.le.toString() : null;
            b.ah = this.lp;
            return b;
        }
        ls(a) {
            if (a != null) {
                let b = a;
                b.propertyChanged = delegateRemove(b.propertyChanged, runOn(this, this.lt));
            }
            if (this.kv != null) {
                this.cc = this.kv.cc;
                this.cd = this.kv.cd;
                this.gf = this.kv.gf;
                this.e0 = this.kv.e0;
                this.k0 = this.kv.k.az;
                this.k1 = this.kv.k.w;
                this.go = this.kv.go;
                this.lp = this.kv.hl;
                this.fo = this.kv.d1;
                this.fs = this.kv.d5;
                this.fq = this.kv.d3;
                this.fm = this.kv.dz;
                this.ka = this.kv.ka;
                this.dd = this.kv.dd + 1;
                this.di = this.kv.di + 1;
                this.dg = this.kv.dg + 1;
                this.db = this.kv.db + 1;
                this.by = 1;
                this.af = this.kv.af;
                let c = this.kv;
                c.propertyChanged = delegateCombine(c.propertyChanged, runOn(this, this.lt));
            }
            else {
                this.lp = null;
            }
        }
        lu() {
            if (this.kv != null) {
                if (this.lp != null) {
                    this.ka = GridStyleRepository.bg;
                }
                else {
                    this.ka = this.kv.ka;
                }
            }
        }
        lt(a, b) {
            switch (b.propertyName) {
                case "X":
                    this.cc = this.kv.cc;
                    break;
                case "Y":
                    this.cd = this.kv.cd;
                    break;
                case "Width":
                    this.gf = this.kv.gf;
                    break;
                case "Height":
                    this.e0 = this.kv.e0;
                    break;
                case "Path":
                    if (this.k1 != this.kv.k.w || this.k0 != this.kv.k.az) {
                        this.kv = null;
                    }
                    break;
                case "OriginalValue":
                    this.le = this.kv.go;
                    break;
            }
        }
    }
    EditorCellModel.$t = /*@__PURE__*/ markType(EditorCellModel, 'EditorCellModel', CellModel.$);
    EditorCellModel.la = /*@__PURE__*/ CellModel.ez("IsHidden");
    EditorCellModel.k7 = /*@__PURE__*/ CellModel.ez("EditTarget");
    EditorCellModel.k2 = /*@__PURE__*/ CellModel.ez("DataType");
    EditorCellModel.k9 = /*@__PURE__*/ CellModel.ez("ErrorMessage");
    EditorCellModel.k8 = /*@__PURE__*/ CellModel.ez("EditValue");
    EditorCellModel.k5 = /*@__PURE__*/ CellModel.ez("EditorType");
    EditorCellModel.k3 = /*@__PURE__*/ CellModel.ez("EditorItemsSource");
    EditorCellModel.k4 = /*@__PURE__*/ CellModel.ez("EditorTextField");
    EditorCellModel.k6 = /*@__PURE__*/ CellModel.ez("EditorValueField");
    return EditorCellModel;
})();
/**
 * @hidden
 */
let EditorRowCellModel = /*@__PURE__*/ (() => {
    class EditorRowCellModel extends CellModel {
        constructor() {
            super();
            this.ks = 0;
            this.kq = null;
            this.i0 = "editorRowCell";
            this.a0 = false;
        }
        get kr() {
            return this.kq;
        }
        set kr(a) {
            let b = this.kq;
            this.kq = a;
            if (b != this.kq) {
                this.jm("EditTarget", EditorRowCellModel.kt, b, this.kq);
            }
        }
        jp(a, b, c) {
            super.jp(a, b, c);
            switch (a) {
                case "EditTarget":
                    this.kv(b);
                    break;
            }
        }
        kv(a) {
            if (a != null) {
                let b = a;
                b.propertyChanged = delegateRemove(b.propertyChanged, runOn(this, this.kw));
            }
            if (this.kr != null) {
                this.cd = this.kr.cd;
                this.e0 = this.kr.e0;
                this.cc = this.o.model.b0;
                this.gf = this.o.model.absoluteWidth;
                this.ks = this.kr.k.w;
                let c = this.kr;
                c.propertyChanged = delegateCombine(c.propertyChanged, runOn(this, this.kw));
            }
        }
        kw(a, b) {
            switch (b.propertyName) {
                case "Y":
                    this.cd = this.kr.cd;
                    break;
                case "Height":
                    this.e0 = this.kr.e0;
                    break;
                case "Path":
                    if (this.ks != this.kr.k.w) {
                        this.kr = null;
                    }
                    break;
            }
        }
    }
    EditorRowCellModel.$t = /*@__PURE__*/ markType(EditorRowCellModel, 'EditorRowCellModel', CellModel.$);
    EditorRowCellModel.kt = /*@__PURE__*/ CellModel.ez("EditTarget");
    return EditorRowCellModel;
})();
/**
 * @hidden
 */
let SummaryCellModel = /*@__PURE__*/ (() => {
    class SummaryCellModel extends CellModel {
        constructor() {
            super();
            this.kw = null;
            this.kx = null;
            this.k4 = null;
            this.kq = null;
            this.a0 = true;
        }
        get ky() {
            return this.kw;
        }
        set ky(a) {
            let b = this.kw;
            this.kw = a;
            if (this.kw != b) {
                this.jm("ResolvedSummaryLabel", SummaryCellModel.ks, b, this.kw);
            }
        }
        get k0() {
            return this.kx;
        }
        set k0(a) {
            let b = this.kx;
            this.kx = a;
            if (this.kx != b) {
                this.jm("ResolvedSummaryValue", SummaryCellModel.kt, b, this.kx);
            }
        }
        get k5() {
            return this.k4;
        }
        set k5(a) {
            let b = this.k4;
            this.k4 = a;
            if (this.k4 != b) {
                this.jm("SummaryLabelTextColor", SummaryCellModel.kv, b, this.k4);
            }
        }
        get kr() {
            return this.kq;
        }
        set kr(a) {
            let b = this.kq;
            this.kq = a;
            if (this.kq != b) {
                this.jm("SummaryLabelFontInfo", SummaryCellModel.ku, b, this.kq);
            }
        }
        b(a) {
            if (a == null) {
                a = new SummaryCellModelExport();
            }
            a = super.b(a);
            let b = a;
            b.ai = this.ky;
            b.ao = this.k0;
            b.ae = AppearanceHelper.a(this.k5);
            b.af = AppearanceHelper.a(this.kp);
            if (this.kr != null) {
                let c = this.kr;
                if (this.o != null && c.n == null) {
                    let d = this.o.externalGrid.renderer;
                    let e = FontUtil.getFontInfoFromString(d, c.fontString);
                    c.n = e.n;
                    c.d = e.d;
                    c.o = e.o;
                    c.q = e.q;
                    c.r = e.r;
                    c.s = e.s;
                }
                if (c.n != null) {
                    b.aj = c.n;
                }
                if (!isNaN_(c.d)) {
                    b.ag = c.d;
                }
                if (c.s != null) {
                    b.an = c.s;
                }
                if (c.q != null) {
                    b.al = c.q;
                }
                if (c.o != null) {
                    b.ak = c.q;
                }
            }
            if (this.af != null) {
                let f = this.af;
                if (this.o != null && f.n == null) {
                    let g = this.o.externalGrid.renderer;
                    let h = FontUtil.getFontInfoFromString(g, f.fontString);
                    f.n = h.n;
                    f.d = h.d;
                    f.o = h.o;
                    f.q = h.q;
                    f.r = h.r;
                    f.s = h.s;
                }
                if (f.n != null) {
                    b.ap = f.n;
                }
                if (!isNaN_(f.d)) {
                    b.ah = f.d;
                }
                if (f.s != null) {
                    b.at = f.s;
                }
                if (f.q != null) {
                    b.ar = f.q;
                }
                if (f.o != null) {
                    b.aq = f.q;
                }
            }
            return b;
        }
        a8(a) {
            return a == 4 || a == 5;
        }
    }
    SummaryCellModel.$t = /*@__PURE__*/ markType(SummaryCellModel, 'SummaryCellModel', CellModel.$);
    SummaryCellModel.ks = /*@__PURE__*/ CellModel.ez("ResolvedSummaryLabel");
    SummaryCellModel.kt = /*@__PURE__*/ CellModel.ez("ResolvedSummaryValue");
    SummaryCellModel.kv = /*@__PURE__*/ CellModel.ez("SummaryLabelTextColor");
    SummaryCellModel.ku = /*@__PURE__*/ CellModel.ez("SummaryLabelFontInfo");
    return SummaryCellModel;
})();
/**
 * @hidden
 */
let VerticalSeparatorCellModel = /*@__PURE__*/ (() => {
    class VerticalSeparatorCellModel extends CellModel {
        constructor() {
            super();
            this.kq = true;
        }
        get kr() {
            return this.kq;
        }
        set kr(a) {
            let b = this.kq;
            this.kq = a;
            if (b != this.kq) {
                this.jm("IsHitTestVisible", VerticalSeparatorCellModel.ks, b, this.kq);
            }
        }
    }
    VerticalSeparatorCellModel.$t = /*@__PURE__*/ markType(VerticalSeparatorCellModel, 'VerticalSeparatorCellModel', CellModel.$);
    VerticalSeparatorCellModel.ks = /*@__PURE__*/ CellModel.ez("IsHitTestVisible");
    return VerticalSeparatorCellModel;
})();
/**
 * @hidden
 */
let ImageCellModel = /*@__PURE__*/ (() => {
    class ImageCellModel extends CellModel {
        constructor() {
            super();
            this.kx = "";
            this.ks = 0;
            this.kq = 0;
            this.f = 3;
            this.a0 = true;
        }
        get ky() {
            return this.kx;
        }
        set ky(a) {
            let b = this.kx;
            this.kx = a;
            if (this.kx != b) {
                this.jm("ImagePath", ImageCellModel.ku, b, this.kx);
            }
        }
        get kt() {
            return this.ks;
        }
        set kt(a) {
            let b = this.ks;
            this.ks = a;
            if (this.ks != b) {
                this.jm("ImageStretchOption", ImageCellModel.kw, enumGetBox(ImageStretchOptions_$type, b), enumGetBox(ImageStretchOptions_$type, this.ks));
            }
        }
        get kr() {
            return this.kq;
        }
        set kr(a) {
            let b = this.kq;
            this.kq = a;
            if (this.kq != b) {
                this.jm("ImageResourceType", ImageCellModel.kv, enumGetBox(ImageResourceType_$type, b), enumGetBox(ImageResourceType_$type, this.kq));
            }
        }
        b(a) {
            if (a == null) {
                a = new ImageCellModelExport();
            }
            a = super.b(a);
            let b = a;
            b.ae = this.ky;
            return b;
        }
        ju(a, b) {
            super.ju(a, b);
            if (a == "ImageStretchOption") {
                this.kt = EnumUtil.getEnumValue(ImageStretchOptions_$type, b);
            }
            if (a == "ImageResourceType") {
                this.kr = EnumUtil.getEnumValue(ImageResourceType_$type, b);
            }
            if (a == "ImagePath") {
                this.ky = b;
            }
        }
        gn(a) {
            if (a == "ImageStretchOption") {
                return enumGetBox(ImageStretchOptions_$type, this.kt);
            }
            if (a == "ImageResourceType") {
                return enumGetBox(ImageResourceType_$type, this.kr);
            }
            if (a == "ImagePath") {
                return this.ky;
            }
            return super.gn(a);
        }
    }
    ImageCellModel.$t = /*@__PURE__*/ markType(ImageCellModel, 'ImageCellModel', CellModel.$);
    ImageCellModel.ku = /*@__PURE__*/ CellModel.ez("ImagePath");
    ImageCellModel.kw = /*@__PURE__*/ CellModel.ez("ImageStretchOption");
    ImageCellModel.kv = /*@__PURE__*/ CellModel.ez("ImageResourceType");
    return ImageCellModel;
})();
/**
 * @hidden
 */
let NumericCellModel = /*@__PURE__*/ (() => {
    class NumericCellModel extends CellModel {
        constructor() {
            super();
            this.ky = NaN;
            this.kt = false;
            this.lm = null;
            this.kq = null;
            this.ks = null;
            this.lk = null;
            this._formatOverride = null;
            this.ln = null;
            this.lp = null;
            this.lo = null;
            this.lq = "";
            this.k0 = 5;
            this.k1 = 0;
            this.k2 = -1;
            this.ku = false;
            this.f = 2;
            this.a0 = true;
        }
        get kz() {
            return this.ky;
        }
        set kz(a) {
            let b = this.ky;
            this.ky = a;
            if (this.ky != b) {
                this.jm("NumericValue", NumericCellModel.lf, b, this.ky);
            }
        }
        get kv() {
            return this.kt;
        }
        set kv(a) {
            let b = this.kt;
            this.kt = a;
            if (this.kt != b) {
                this.jm("HasDecimalValue", NumericCellModel.k6, b, this.kt);
            }
        }
        get lt() {
            return this.lm;
        }
        set lt(a) {
            let b = this.lm;
            this.lm = a;
            if (this.lm != b) {
                this.jm("FormatStringOverride", NumericCellModel.k5, b, this.lm);
            }
        }
        get kr() {
            return this.kq;
        }
        set kr(a) {
            let b = this.kq;
            this.kq = a;
            if (this.kq != b) {
                this.jm("FormatSpecifiers", NumericCellModel.k4, b, this.kq);
            }
        }
        get ll() {
            return this._formatOverride;
        }
        set ll(a) {
            let b = this._formatOverride;
            this._formatOverride = a;
            if (this._formatOverride != b) {
                this.jm("FormatOverride", NumericCellModel.k3, b, this._formatOverride);
            }
        }
        get lz() {
            return this.ln;
        }
        set lz(a) {
            let b = this.ln;
            this.ln = a;
            if (this.ln != b) {
                this.jm("NegativePrefix", NumericCellModel.ld, b, this.ln);
            }
        }
        get l4() {
            return this.lp;
        }
        set l4(a) {
            let b = this.lp;
            this.lp = a;
            if (this.lp != b) {
                this.jm("PositivePrefix", NumericCellModel.lg, b, this.lp);
            }
        }
        get l1() {
            return this.lo;
        }
        set l1(a) {
            let b = this.lo;
            this.lo = a;
            if (this.lo != b) {
                this.jm("NegativeSuffix", NumericCellModel.le, b, this.lo);
            }
        }
        get l6() {
            return this.lq;
        }
        set l6(a) {
            let b = this.lq;
            this.lq = a;
            if (this.lq != b) {
                this.jm("PositiveSuffix", NumericCellModel.lh, b, this.lq);
            }
        }
        get k7() {
            return this.k0;
        }
        set k7(a) {
            let b = this.k0;
            this.k0 = a;
            if (this.k0 != b) {
                this.jm("MaxFractionDigits", NumericCellModel.k8, b, this.k0);
            }
        }
        get k9() {
            return this.k1;
        }
        set k9(a) {
            let b = this.k1;
            this.k1 = a;
            if (this.k1 != b) {
                this.jm("MinFractionDigits", NumericCellModel.la, b, this.k1);
            }
        }
        get lb() {
            return this.k2;
        }
        set lb(a) {
            let b = this.k2;
            this.k2 = a;
            if (this.k2 != b) {
                this.jm("MinIntegerDigits", NumericCellModel.lc, b, this.k2);
            }
        }
        get kx() {
            return this.ku;
        }
        set kx(a) {
            let b = this.ku;
            this.ku = a;
            if (this.ku != b) {
                this.jm("ShowGroupingSeparator", NumericCellModel.li, b, this.ku);
            }
        }
        kw() {
            if (this.ax(NumericCellModel.la) || this.ax(NumericCellModel.k8) || this.ax(NumericCellModel.lc) || this.ax(NumericCellModel.lh) || this.ax(NumericCellModel.le) || this.ax(NumericCellModel.lg) || this.ax(NumericCellModel.ld) || this.ax(NumericCellModel.k3) || this.ax(NumericCellModel.li)) {
                return true;
            }
            return false;
        }
        jp(a, b, c) {
            switch (a) {
                case "FormatStringOverride":
                case "FormatSpecifiers":
                    if (this.lt != null) {
                        this.ks = new BindingFormatter();
                        this.ks.j = this.lt;
                        this.ks.d = this.kr;
                    }
                    else {
                        this.ks = null;
                    }
                    break;
            }
            super.jp(a, b, c);
        }
        ju(a, b) {
            super.ju(a, b);
            if (a == "NumericValue") {
                this.kz = b;
            }
            if (a == "NegativePrefix") {
                this.lz = b;
            }
            if (a == "PositivePrefix") {
                this.l4 = b;
            }
            if (a == "NegativeSuffix") {
                this.l1 = b;
            }
            if (a == "PositiveSuffix") {
                this.l6 = b;
            }
            if (a == "MinFractionDigits") {
                this.k9 = typeGetValue(b);
            }
            if (a == "MaxFractionDigits") {
                this.k7 = typeGetValue(b);
            }
            if (a == "MinIntegerDigits") {
                this.lb = typeGetValue(b);
            }
            if (a == "ShowGroupingSeparator") {
                this.kx = b;
            }
            if (a == "FormatOverride") {
                this.ll = b;
            }
        }
        gn(a) {
            if (a == "NumericValue") {
                return this.kz;
            }
            if (a == "NegativePrefix") {
                return this.lz;
            }
            if (a == "PositivePrefix") {
                return this.l4;
            }
            if (a == "NegativeSuffix") {
                return this.lz;
            }
            if (a == "PositiveSuffix") {
                return this.l6;
            }
            if (a == "MinFractionDigits") {
                return this.k9;
            }
            if (a == "MaxFractionDigits") {
                return this.k7;
            }
            if (a == "MinIntegerDigits") {
                return this.lb;
            }
            if (a == "ShowGroupingSeparator") {
                return this.kx;
            }
            if (a == "FormatOverride") {
                return this.ll;
            }
            return super.gn(a);
        }
        b(a) {
            if (a == null) {
                a = new NumericCellModelExport();
            }
            a = super.b(a);
            let b = a;
            b.ae = this.kz;
            return b;
        }
    }
    NumericCellModel.$t = /*@__PURE__*/ markType(NumericCellModel, 'NumericCellModel', CellModel.$);
    NumericCellModel.lf = /*@__PURE__*/ CellModel.ez("NumericValue");
    NumericCellModel.k6 = /*@__PURE__*/ CellModel.ez("HasDecimalValue");
    NumericCellModel.k5 = /*@__PURE__*/ CellModel.ez("FormatStringOverride");
    NumericCellModel.k4 = /*@__PURE__*/ CellModel.ez("FormatSpecifiers");
    NumericCellModel.k3 = /*@__PURE__*/ CellModel.ez("FormatOverride");
    NumericCellModel.ld = /*@__PURE__*/ CellModel.ez("NegativePrefix");
    NumericCellModel.lg = /*@__PURE__*/ CellModel.ez("PositivePrefix");
    NumericCellModel.le = /*@__PURE__*/ CellModel.ez("NegativeSuffix");
    NumericCellModel.lh = /*@__PURE__*/ CellModel.ez("PositiveSuffix");
    NumericCellModel.k8 = /*@__PURE__*/ CellModel.ez("MaxFractionDigits");
    NumericCellModel.la = /*@__PURE__*/ CellModel.ez("MinFractionDigits");
    NumericCellModel.lc = /*@__PURE__*/ CellModel.ez("MinIntegerDigits");
    NumericCellModel.li = /*@__PURE__*/ CellModel.ez("ShowGroupingSeparator");
    return NumericCellModel;
})();
/**
 * @hidden
 */
let RowSeparatorModel = /*@__PURE__*/ (() => {
    class RowSeparatorModel extends CellModel {
        constructor() {
            super();
        }
        b(a) {
            if (a == null) {
                a = new RowSeparatorModelExport();
            }
            a = super.b(a);
            return a;
        }
    }
    RowSeparatorModel.$t = /*@__PURE__*/ markType(RowSeparatorModel, 'RowSeparatorModel', CellModel.$);
    return RowSeparatorModel;
})();
/**
 * @hidden
 */
let SectionHeaderCellModel = /*@__PURE__*/ (() => {
    class SectionHeaderCellModel extends CellModel {
        constructor() {
            super();
            this.kq = null;
            this.kr = null;
            this.k2 = null;
            this.k1 = null;
            this.ku = 4;
            this.a0 = true;
        }
        get ks() {
            return this.kq;
        }
        set ks(a) {
            let b = this.kq;
            this.kq = a;
            if (this.kq != b) {
                this.jm("Groups", SectionHeaderCellModel.kw, b, this.kq);
            }
        }
        get kt() {
            return this.kr;
        }
        set kt(a) {
            let b = this.kr;
            this.kr = a;
            if (this.kr != b) {
                this.jm("Summaries", SectionHeaderCellModel.kz, b, this.kr);
            }
        }
        get k6() {
            return this.k2;
        }
        set k6(a) {
            let b = this.k2;
            this.k2 = a;
            if (this.k2 != b) {
                this.jm("ResolvedText", SectionHeaderCellModel.ky, b, this.k2);
            }
        }
        get k4() {
            return this.k1;
        }
        set k4(a) {
            let b = this.k1;
            this.k1 = a;
            if (this.k1 != b) {
                this.jm("ResolvedSummaryText", SectionHeaderCellModel.kx, b, this.k1);
            }
        }
        get kv() {
            return this.ku;
        }
        set kv(a) {
            let b = this.ku;
            this.ku = a;
            if (this.ku != b) {
                this.jm("SummaryDisplayMode", SectionHeaderCellModel.k0, enumGetBox(GroupSummaryDisplayMode_$type, b), enumGetBox(GroupSummaryDisplayMode_$type, this.ku));
            }
        }
        ju(a, b) {
            super.ju(a, b);
            if (a == "Groups") {
                this.ks = b;
            }
            else if (a == "SummaryDisplayMode") {
                this.kv = EnumUtil.getEnumValue(GroupSummaryDisplayMode_$type, b);
            }
        }
        gn(a) {
            if (a == "Groups") {
                return this.ks;
            }
            else if (a == "IsCollapsable") {
                return this.ar;
            }
            else if (a == "SummaryDisplayMode") {
                return enumGetBox(GroupSummaryDisplayMode_$type, this.kv);
            }
            return super.gn(a);
        }
        b(a) {
            if (a == null) {
                a = new SectionHeaderCellModelExport();
            }
            a = super.b(a);
            let b = a;
            b.af = new Array(this.ks.length);
            b.ag = new Array(this.ks.length);
            b.ae = new Array(this.ks.length);
            b.al = this.k6;
            b.ai = new Array(this.kt.length);
            b.ak = new Array(this.kt.length);
            b.aj = new Array(this.kt.length);
            b.ah = new Array(this.kt.length);
            b.am = this.k4;
            for (let c = 0; c < this.ks.length; c++) {
                b.af[c] = this.ks[c].c;
                b.ag[c] = this.ks[c].a;
                b.ae[c] = this.ks[c].b;
            }
            for (let d = 0; d < this.kt.length; d++) {
                b.ai[d] = this.kt[d].e;
                b.ak[d] = this.kt[d].b;
                b.aj[d] = this.kt[d].a;
                b.ah[d] = this.kt[d].c;
            }
            return b;
        }
        a8(a) {
            return a == 1;
        }
    }
    SectionHeaderCellModel.$t = /*@__PURE__*/ markType(SectionHeaderCellModel, 'SectionHeaderCellModel', CellModel.$);
    SectionHeaderCellModel.kw = /*@__PURE__*/ CellModel.ez("Groups");
    SectionHeaderCellModel.kz = /*@__PURE__*/ CellModel.ez("Summaries");
    SectionHeaderCellModel.ky = /*@__PURE__*/ CellModel.ez("ResolvedText");
    SectionHeaderCellModel.kx = /*@__PURE__*/ CellModel.ez("ResolvedSummaryText");
    SectionHeaderCellModel.k0 = /*@__PURE__*/ CellModel.ez("SummaryDisplayMode");
    return SectionHeaderCellModel;
})();
/**
 * @hidden
 */
let TemplateCellModel = /*@__PURE__*/ (() => {
    class TemplateCellModel extends CellModel {
        constructor() {
            super();
            this.kr = null;
            this.a0 = true;
        }
        get ks() {
            return this.kr;
        }
        set ks(a) {
            let b = this.kr;
            this.kr = a;
            if (this.kr != b) {
                this.jm("Value", TemplateCellModel.kq, b, this.kr);
            }
        }
        ju(a, b) {
            super.ju(a, b);
            if (a == "Value") {
                this.ks = b;
            }
        }
        gn(a) {
            if (a == "Value") {
                return this.ks;
            }
            return super.gn(a);
        }
        b(a) {
            if (a == null) {
                a = new TemplateCellModelExport();
            }
            a = super.b(a);
            let b = a;
            b.ae = this.ks;
            return b;
        }
    }
    TemplateCellModel.$t = /*@__PURE__*/ markType(TemplateCellModel, 'TemplateCellModel', CellModel.$);
    TemplateCellModel.kq = /*@__PURE__*/ CellModel.ez("Value");
    return TemplateCellModel;
})();
/**
 * @hidden
 */
let TextCellModel = /*@__PURE__*/ (() => {
    class TextCellModel extends CellModel {
        constructor() {
            super();
            this.kr = "";
            this.a0 = true;
        }
        get ks() {
            return this.kr;
        }
        set ks(a) {
            let b = this.kr;
            this.kr = a;
            if (this.kr != b) {
                this.jm("TextValue", TextCellModel.kq, b, this.kr);
            }
        }
        ju(a, b) {
            super.ju(a, b);
            if (a == "TextValue") {
                this.ks = b;
            }
        }
        gn(a) {
            if (a == "TextValue") {
                return this.ks;
            }
            return super.gn(a);
        }
        b(a) {
            if (a == null) {
                a = new TextCellModelExport();
            }
            a = super.b(a);
            let b = a;
            b.af = this.ks;
            return b;
        }
    }
    TextCellModel.$t = /*@__PURE__*/ markType(TextCellModel, 'TextCellModel', CellModel.$);
    TextCellModel.kq = /*@__PURE__*/ CellModel.ez("TextValue");
    return TextCellModel;
})();
/**
 * @hidden
 */
let TextHeaderCellModel = /*@__PURE__*/ (() => {
    class TextHeaderCellModel extends TextCellModel {
        constructor() {
            super();
            this.k0 = false;
            this.ky = 0;
            this.ku = 0;
            this.lc = null;
            this.kw = 0;
        }
        get k1() {
            return this.k0;
        }
        set k1(a) {
            let b = this.k0;
            this.k0 = a;
            if (this.k0 != b) {
                this.jm("IsColumnOptionsEnabled", TextHeaderCellModel.k5, b, this.k0);
            }
        }
        get kz() {
            return this.ky;
        }
        set kz(a) {
            let b = this.ky;
            this.ky = a;
            if (this.ky != b) {
                this.jm("SortIndicatorStyle", TextHeaderCellModel.k6, enumGetBox(SortIndicatorStyle_$type, b), enumGetBox(SortIndicatorStyle_$type, this.ky));
            }
        }
        get kv() {
            return this.ku;
        }
        set kv(a) {
            let b = this.ku;
            this.ku = a;
            if (this.ku != b) {
                this.jm("ColumnOptionsIconAlignment", TextHeaderCellModel.k2, enumGetBox(ColumnOptionsIconAlignment_$type, b), enumGetBox(ColumnOptionsIconAlignment_$type, this.ku));
            }
        }
        get ld() {
            return this.lc;
        }
        set ld(a) {
            let b = this.lc;
            this.lc = a;
            if (this.lc != b) {
                this.jm("ColumnOptionsIconColor", TextHeaderCellModel.k4, b, this.lc);
            }
        }
        get kx() {
            return this.kw;
        }
        set kx(a) {
            let b = this.kw;
            this.kw = a;
            if (this.kw != b) {
                this.jm("ColumnOptionsIconBehavior", TextHeaderCellModel.k3, enumGetBox(ColumnOptionsIconBehavior_$type, b), enumGetBox(ColumnOptionsIconBehavior_$type, this.kw));
            }
        }
        ju(a, b) {
            super.ju(a, b);
            if (a == "IsColumnOptionsEnabled") {
                this.k1 = b;
            }
            else if (a == "SortIndicatorStyle") {
                this.kz = EnumUtil.getEnumValue(SortIndicatorStyle_$type, b);
            }
            else if (a == "ColumnOptionsIconAlignment") {
                this.kv = EnumUtil.getEnumValue(ColumnOptionsIconAlignment_$type, b);
            }
            else if (a == "ColumnOptionsIconColor") {
                this.ld = b;
            }
            else if (a == "ColumnOptionsIconBehavior") {
                this.kx = EnumUtil.getEnumValue(ColumnOptionsIconBehavior_$type, b);
            }
        }
        gn(a) {
            if (a == "IsColumnOptionsEnabled") {
                return this.k1;
            }
            if (a == "SortIndicatorStyle") {
                return enumGetBox(SortIndicatorStyle_$type, this.kz);
            }
            if (a == "ColumnOptionsIconAlignment") {
                return enumGetBox(ColumnOptionsIconAlignment_$type, this.kv);
            }
            if (a == "ColumnOptionsIconColor") {
                return this.ld;
            }
            if (a == "ColumnOptionsIconBehavior") {
                return enumGetBox(ColumnOptionsIconBehavior_$type, this.kx);
            }
            return super.gn(a);
        }
        b(a) {
            if (a == null) {
                a = new TextHeaderCellModelExport();
            }
            a = super.b(a);
            let b = a;
            return b;
        }
    }
    TextHeaderCellModel.$t = /*@__PURE__*/ markType(TextHeaderCellModel, 'TextHeaderCellModel', TextCellModel.$);
    TextHeaderCellModel.k5 = /*@__PURE__*/ CellModel.ez("IsColumnOptionsEnabled");
    TextHeaderCellModel.k6 = /*@__PURE__*/ CellModel.ez("SortIndicatorStyle");
    TextHeaderCellModel.k2 = /*@__PURE__*/ CellModel.ez("ColumnOptionsIconAlignment");
    TextHeaderCellModel.k4 = /*@__PURE__*/ CellModel.ez("ColumnOptionsIconColor");
    TextHeaderCellModel.k3 = /*@__PURE__*/ CellModel.ez("ColumnOptionsIconBehavior");
    return TextHeaderCellModel;
})();
/**
 * @hidden
 */
let ICellPresenter_$type = /*@__PURE__*/ new Type(null, 'ICellPresenter');
/**
 * @hidden
 */
let DataSourceNotificationBridge = /*@__PURE__*/ (() => {
    class DataSourceNotificationBridge extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.a = a;
        }
        rangeActualized(a, b) {
            this.a.rk(a, b);
        }
        notifySetItem(a, b, c) {
            this.a.r9(a, b, c);
        }
        notifyClearItems() {
            this.a.q6();
        }
        notifyInsertItem(a, b) {
            this.a.rv(a, b);
        }
        notifyRemoveItem(a, b) {
            this.a.r0(a, b);
        }
    }
    DataSourceNotificationBridge.$t = /*@__PURE__*/ markType(DataSourceNotificationBridge, 'DataSourceNotificationBridge', Base.$, [IDataSourceUpdateNotifier_$type]);
    return DataSourceNotificationBridge;
})();
/**
 * @hidden
 */
let ColumnController = /*@__PURE__*/ (() => {
    class ColumnController extends Base {
        constructor(a, b, c) {
            super();
            this.i = null;
            this.n = false;
            this.c = null;
            this.a = null;
            this.u = new HashSet$1(String_$type, 0);
            this.m = false;
            this.k = null;
            this.l = null;
            this.n = b;
            this.i = a;
            this.l = c;
        }
        get p() {
            return this.n;
        }
        set p(a) {
            let b = this.n;
            this.n = a;
            if (b != this.n) {
                this.m = false;
            }
            this.t();
        }
        get d() {
            return this.c;
        }
        set d(a) {
            let b = this.c;
            this.c = a;
            if (b != this.c) {
                this.m = false;
            }
            this.t();
        }
        get b() {
            return this.a;
        }
        set b(a) {
            let b = this.a;
            this.a = a;
            if (b != this.a) {
                this.m = false;
                this.u.clear();
                for (let c = 0; c < this.a.length; c++) {
                    this.u.add_1(this.a[c]);
                }
            }
            this.t();
        }
        get j() {
            return this.i;
        }
        get o() {
            return this.m;
        }
        set o(a) {
            this.m = a;
        }
        t() {
            if (this.m) {
                return false;
            }
            if (this.c == null) {
                return false;
            }
            let a = new Dictionary$2(String_$type, Boolean_$type, 0);
            for (let b = 0; b < this.i.count; b++) {
                let c = this.i._inner[b];
                if (!c.f8) {
                    a.item(c.hy, true);
                }
            }
            let d = false;
            for (let e = this.i.count - 1; e >= 0; e--) {
                if (this.i._inner[e].f8) {
                    this.k.removeExternalColumn(this.i._inner[e].externalObject);
                }
            }
            if (this.n && this.c != null) {
                d = this.q(a, this.c);
            }
            this.m = true;
            if (d) {
                this.l();
            }
            return d;
        }
        q(a, b) {
            let c = new GridColumnCollection();
            for (let d = 0; d < b.propertyNames.length; d++) {
                let e = b.propertyNames[d];
                if (!a.containsKey(e)) {
                    if (this.b != null && !this.u.contains(e)) {
                        continue;
                    }
                    let f = this.e(e, b.propertyTypes[d]);
                    c.add(f);
                    a.item(e, true);
                }
            }
            let g = new Dictionary$2(String_$type, Boolean_$type, 0);
            for (let h = 0; h < c.count; h++) {
                g.item(c._inner[h].hy, true);
            }
            let i = false;
            let j = this.i.count;
            for (let k = 0; k < c.count; k++) {
                i = true;
                this.k.insertExternalColumnAtIndex(j + k, c._inner[k].externalObject);
            }
            return i;
        }
        e(a, b) {
            let c = null;
            switch (b) {
                case 8:
                case 9:
                    c = this.k.createDateTimeColumn(a);
                    break;
                case 5:
                case 6:
                case 7:
                case 1:
                case 3:
                case 4:
                case 10:
                    c = this.k.createNumericColumn(a);
                    break;
                case 11:
                    c = this.k.createTextColumn(a);
                    break;
                case 0:
                case 2:
                    c = this.k.createTextColumn(a);
                    break;
            }
            c.hy = a;
            c.f8 = true;
            c.id = (createGuid());
            return c;
        }
        h(a) {
            if (a.az < 0 || this.i.count == 0 || this.i.count <= a.az) {
                return null;
            }
            return this.i._inner[a.az];
        }
        f(a) {
            for (let b = 0; b < this.i.count; b++) {
                if (this.i._inner[b].g2 == a) {
                    return this.i._inner[b];
                }
            }
            return null;
        }
        g(a) {
            for (let b = 0; b < this.i.count; b++) {
                if (this.i._inner[b].h0() == a) {
                    return this.i._inner[b];
                }
            }
            return null;
        }
        r(a) {
            return false;
        }
        s(a) {
            return false;
        }
    }
    ColumnController.$t = /*@__PURE__*/ markType(ColumnController, 'ColumnController');
    return ColumnController;
})();
/**
 * @hidden
 */
let EditingManager = /*@__PURE__*/ (() => {
    class EditingManager extends Base {
        constructor(a) {
            super();
            this.f = null;
            this.c = null;
            this.b = null;
            this.e = null;
            this.n = 0;
            this.m = 0;
            this.j = false;
            this._item = null;
            this.k = false;
            this.f = a;
            this.n = -1;
            this.m = -1;
        }
        get item() {
            return this._item;
        }
        set item(a) {
            this._item = a;
        }
        get d() {
            return this.c;
        }
        get a() {
            return this.d != null ? this.d.kv : null;
        }
        get l() {
            return this.a != null ? this.a.en : -1;
        }
        v(a) {
            if (a == null || a.k.az < 0 || a.k.w < 0) {
                return;
            }
            if (this.c == null) {
                this.c = new EditorCellModel();
                this.c.c = new DefaultCellActionManager(this.f, this.c);
                this.c.d = new DefaultGridInfoRequestor(this.f, this.c);
                this.c.k = new CellPath(1, -1000, 0, -1000);
                this.c.o = this.f;
                let b = this.f;
                b.viewportChanged = delegateCombine(b.viewportChanged, runOn(this, this.r));
            }
            if (this.e == null) {
                this.e = new EditorRowCellModel();
                this.e.k = new CellPath(1, -1001, 0, -1001);
                this.e.o = this.f;
                this.e.ke = GridStyleRepository.bf;
            }
            if (this.j && this.c.lp != null) {
                return;
            }
            this.j = true;
            this.b = this.f.actualColumns._inner[a.k.az];
            let c = this.g(this.b, a.k.w);
            if (this.c.q != c) {
                if (this.c.q != null) {
                    this.c.q.f(this.c.k);
                }
                c.s(this.c.k, this.c);
            }
            this.c.q = c;
            this.c.kv = a;
            this.c.le = a.go;
            this.c.lp = a.hl;
            this.c.kx = this.b.fc;
            this.c.ld = this.b.g4;
            this.c.lj = this.b.hu;
            this.c.kr = this.b.em;
            this.c.kz = false;
            this.c.kt = this.f.actualDataSource.resolveSchemaPropertyType(this.b.hy);
            this.n = a.k.w;
            this.m = a.k.az;
            this.item = a.gp;
            a.a1 = true;
            if (this.f.cf == 3) {
                if (this.e.q != this.f.model.ar) {
                    if (this.e.q != null) {
                        this.e.q.f(this.e.k);
                    }
                    this.f.model.ar.s(this.e.k, this.e);
                }
                this.e.q = this.f.model.ar;
                this.e.kr = a;
                this.e.by = 1;
                if (this.f.uz != null) {
                    this.e.ka = this.f.uz;
                }
                else {
                    this.e.ka = GridStyleRepository.av;
                }
                this.e.dd = truncate(this.f.v0.c);
                this.e.di = truncate(this.f.v0.e);
                this.e.dg = truncate(this.f.v0.d);
                this.e.db = truncate(this.f.v0.b);
            }
            this.s();
        }
        h(a, b) {
            if (this.c != null && this.c.kv != null && this.j) {
                let c = true;
                if (a) {
                    c = this.f.i2(this.c.kv, this.c.le);
                }
                else {
                    if (this.l != -1) {
                        this.f.so(this.l);
                    }
                    this.c.lp = null;
                }
                if (c && this.c.lp == null) {
                    this.j = false;
                    this.c.kv.a1 = false;
                    this.c.kv = null;
                    this.c.go = null;
                    this.c.le = null;
                    this.c.kz = true;
                    this.c.cc = -1000;
                    this.c.cd = -1000;
                    this.b = null;
                    if (this.f.cf == 3 && b) {
                        this.e.kr = null;
                        this.e.by = 0;
                        this.e.cc = -1000;
                        this.e.cd = -1000;
                    }
                    this.s();
                }
            }
            return !this.j;
        }
        p() {
            if (this.e != null && this.f.cf == 3) {
                this.e.kr = null;
                this.e.by = 0;
                this.e.cc = -1000;
                this.e.cd = -1000;
                this.n = -1;
            }
        }
        t(a) {
            if (this.c != null) {
                this.c.lp = a;
                this.s();
            }
        }
        u(a) {
            if (this.c != null) {
                this.c.kv = a;
            }
            if (this.e != null) {
                this.e.kr = a;
            }
        }
        i(a) {
            return a.k.w == this.n;
        }
        s() {
            this.f.renderingEngine.refresh(this.f.model, false);
        }
        g(a, b) {
            if (a.fk != 0) {
                if (this.f.d9.isRowPinned(b)) {
                    return this.f.model.ar;
                }
                else {
                    return this.f.model.av;
                }
            }
            else {
                if (this.f.d9.isRowPinned(b)) {
                    return this.f.model.a2;
                }
                else {
                    return this.f.model.ba;
                }
            }
        }
        r(a, b) {
            this.q();
        }
        q() {
            if (!this.j) {
                return;
            }
            let a = this.f.vp.top + this.f.kk + this.f.lg + this.f.model.cv;
            let b = this.f.vp.bottom;
            let c = this.f.vp.left;
            let d = this.f.vp.right;
            if (this.d.cc > d || this.d.cc + this.d.gf < c || this.d.cd > b || this.d.cd + this.d.e0 < a) {
                if (this.d.q != null) {
                    this.f.de.j(this.d.k, this.d.q, this.f.model);
                    this.d.q = null;
                }
            }
            else {
                if (this.d.q == null && this.b != null && this.a != null) {
                    let e = this.g(this.b, this.a.k.w);
                    e.s(this.d.k, this.d);
                    this.d.q = e;
                }
            }
            if (this.e.cd > b || this.e.cd + this.e.e0 < a) {
                if (this.e.q != null) {
                    this.f.de.j(this.e.k, this.e.q, this.f.model);
                    this.e.q = null;
                }
            }
            else {
                if (this.e.q == null && this.b != null && this.a != null) {
                    let f = this.f.model.ar;
                    f.s(this.e.k, this.e);
                    this.e.q = f;
                }
            }
        }
    }
    EditingManager.$t = /*@__PURE__*/ markType(EditingManager, 'EditingManager');
    return EditingManager;
})();
/**
 * @hidden
 */
let Grid = /*@__PURE__*/ (() => {
    class Grid extends Base {
        constructor() {
            super();
            this.lm = null;
            this._propertySetter = null;
            this.ed = null;
            this.eb = null;
            this.columnExchangingAnimationCompleted = null;
            this.columnExchangingAnimationCanceled = null;
            this.columnShowingAnimationCompleted = null;
            this.columnShowingAnimationCanceled = null;
            this.filterExpressionsChanging = null;
            this.filterExpressionsChanged = null;
            this.columnMovingAnimationCompleted = null;
            this.columnMovingAnimationCanceled = null;
            this.columnHidingAnimationCompleted = null;
            this.columnHidingAnimationCanceled = null;
            this.cellPreviewPointerDown = null;
            this.cellPreviewPointerUp = null;
            this.cellPointerDown = null;
            this.cellPointerUp = null;
            this.cellClicked = null;
            this.j3 = -1;
            this.bt = 0;
            this.bf = 0;
            this.d5 = null;
            this.gk = true;
            this.ua = null;
            this.t2 = null;
            this.vu = new Thickness(0, 1);
            this.vo = null;
            this.aq = null;
            this.gc = false;
            this.hb = false;
            this.j6 = -1;
            this.ke = -1;
            this.gm = false;
            this.gl = false;
            this.jd = 0;
            this.jk = 0;
            this.ji = 0;
            this.jj = 0;
            this.i3 = new Date();
            this.i8 = 0;
            this.i9 = 0;
            this.ja = 0;
            this.jb = 0;
            this.as = null;
            this.ki = 0;
            this.kh = 0;
            this.gv = false;
            this.ka = -1;
            this.kj = -1;
            this.ej = 0;
            this.an = null;
            this.i6 = -1;
            this.jh = 0;
            this.je = 0;
            this.jf = 0;
            this.am = null;
            this.hx = false;
            this.gy = false;
            this.g0 = false;
            this.gx = false;
            this.cj = new GridAnimationManager();
            this._delayedExecutionManager = null;
            this.ek = null;
            this.d8 = null;
            this.a1 = null;
            this.dd = new GridLayerController();
            this.e5 = new SpatialEngine();
            this.c8 = null;
            this.ez = null;
            this.ai = null;
            this.e3 = null;
            this.cb = null;
            this.fz = null;
            this.ex = null;
            this.ev = new SectionFooter();
            this.e7 = null;
            this.e9 = null;
            this.et = null;
            this.d1 = null;
            this.d3 = null;
            this.bv = null;
            this.bh = null;
            this.eh = null;
            this.b = null;
            this.c = null;
            this.fb = new VisibilityEngine();
            this._viewportManager = null;
            this.i5 = 0;
            this.i4 = 0;
            this.ff = 2;
            this.jz = truncate(DeviceUtils.g(36));
            this.kb = -1;
            this.b8 = ColumnWidth.a;
            this.i7 = 0;
            this.jy = truncate(DeviceUtils.g(36));
            this.j4 = -1;
            this.kg = truncate(DeviceUtils.g(0));
            this.ln = null;
            this.kf = truncate(DeviceUtils.g(0));
            this.kd = truncate(DeviceUtils.g(0));
            this.j2 = truncate(DeviceUtils.g(0));
            this.dz = 0;
            this.ce = 1;
            this.cc = 2;
            this.f4 = true;
            this.kc = truncate(DeviceUtils.g(1));
            this.gj = true;
            this.bx = 1;
            this.bo = 0;
            this.ak = 0;
            this.er = 1;
            this.eo = 1;
            this.av = 1;
            this.cy = new GridColumnAnimationSettings();
            this.cl = new GridAnimationSettings();
            this.bq = 1;
            this.by = 1;
            this.bc = 1;
            this.a9 = 1;
            this.a3 = 1;
            this.vv = new Thickness(1, 0, 0, 0, 0);
            this.ds = 5;
            this.cg = 1;
            this.dq = 1;
            this.f8 = false;
            this.ab = new GridSelectedItemsCollection();
            this.af = new GridSelectedKeysCollection();
            this.dl = new GridSelectedCellsCollection();
            this.di = new GridSelectedCellRangesCollection();
            this.f7 = false;
            this.aa = new GridSelectedItemsCollection();
            this.ae = new GridSelectedKeysCollection();
            this.gb = true;
            this.gh = true;
            this.gi = true;
            this.tw = null;
            this.ug = null;
            this.uj = null;
            this.un = null;
            this.jg = NaN;
            this.fi = null;
            this.jc = NaN;
            this.t1 = null;
            this.ui = null;
            this.t9 = null;
            this.t8 = null;
            this.cv = null;
            this.cu = null;
            this.tv = null;
            this.tx = null;
            this.t6 = null;
            this.e1 = 0;
            this.fh = null;
            this.uf = null;
            this.uh = null;
            this.fk = null;
            this.fl = null;
            this.fn = null;
            this.um = null;
            this.fm = null;
            this.fo = null;
            this.uq = null;
            this.uk = null;
            this.uo = null;
            this.ul = null;
            this.up = null;
            this.j9 = truncate(DeviceUtils.g(2));
            this.j5 = truncate(DeviceUtils.g(1));
            this.t5 = null;
            this.t3 = null;
            this.t7 = null;
            this.fj = null;
            this.ub = null;
            this.t4 = null;
            this.ue = null;
            this.uc = null;
            this.ud = null;
            this.j1 = truncate(DeviceUtils.g(4));
            this.j0 = truncate(DeviceUtils.g(2));
            this.t0 = null;
            this.ty = null;
            this.gu = false;
            this.bj = 0;
            this.tz = null;
            this.bl = 0;
            this.tu = null;
            this.vt = GridStyleRepository.bp;
            this.vr = GridStyleRepository.bp;
            this.vs = new Thickness(0, NaN);
            this.go = false;
            this.tp = GridStyleRepository.r;
            this.to = new CornerRadius(0, NaN);
            this.tn = GridStyleRepository.r;
            this.ga = true;
            this.fx = new DefaultPlatformPixelConverter();
            this.d6 = null;
            this.em = null;
            this.fd = new VisualModel();
            this.b3 = null;
            this.a6 = null;
            this.u = null;
            this.b6 = null;
            this.sortDescriptionsChanged = null;
            this.groupDescriptionsChanged = null;
            this.columnHiddenChanged = null;
            this.columnPinnedChanged = null;
            this.cellValueChanging = null;
            this.dataCommitted = null;
            this.dataCommitting = null;
            this.gw = false;
            this.s = 0;
            this.ge = false;
            this.gd = false;
            this.f5 = false;
            this.q = 0;
            this.gg = false;
            this.gf = true;
            this.f6 = false;
            this.dx = 4;
            this.f3 = true;
            this.propertyChanged = null;
            this.gt = false;
            this.y = null;
            this.w = null;
            this.d = null;
            this.a = null;
            this.f2 = true;
            this.sizeChanged = null;
            this.viewportChanged = null;
            this.j7 = -1;
            this.j8 = -1;
            this.i0 = false;
            this.actualColumnsChanged = null;
            this.c0 = new GridColumnCollection();
            this.gn = false;
            this.iy = false;
            this.iz = false;
            this.f1 = false;
            this.hh = false;
            this.hw = false;
            this.gz = false;
            this.ar = null;
            this.columnsAutoGenerated = null;
            this.selectedItemsChanged = null;
            this.selectedKeysChanged = null;
            this.selectedCellsChanged = null;
            this.activeCellChanged = null;
            this.selectedCellRangesChanged = null;
            this.at = null;
            this.f9 = false;
            this.gs = true;
            this.gr = true;
            this.gq = true;
            this.columnWidthChanged = null;
            this.cellEditStarted = null;
            this.cellEditEnded = null;
            this.rowEditStarted = null;
            this.rowEditEnded = null;
            this.gp = false;
            this.ey = new SectionHeader();
            this.eu = new RowSeparator();
            this.d2 = new HeaderRowSeparator();
            this.d4 = new HeaderSeparator();
            this.bw = new ColumnResizingSeparator();
            this.bi = new ColumnMovingSeparator();
            this.ei = new PinnedAreaSeparator();
            this.e8 = new SummaryRowRoot();
            this.fa = new SummaryRowSection();
            this.vs = this.vt;
            this.to = this.tp;
            this.tu = GridStyleRepository.ax;
            this.a1 = new ColumnController(this.c0, this.g3, runOn(this, this.qk));
            let a = this.a1.j;
            a.collectionChanged = delegateCombine(a.collectionChanged, runOn(this, this.pk));
            this.d8 = new DataAdapter(this.a1);
            this.em = new ResponsiveStatesCollection();
            this.ek = new ResponsiveEngine(this);
            this.ek.g = this.em;
            this.hh = this.iq();
            this.hw = this.ir();
            this.e0 = new SelectionManager(this, this.ck);
            this.aj = new ActivationManager(this, this.ck);
            this.ab.af(runOn(this, this.s5));
            this.af.af(runOn(this, this.s6));
            this.dl.an(runOn(this, this.s4));
            let b = this.di;
            b.collectionChanged = delegateCombine(b.collectionChanged, runOn(this, this.s3));
            this.aa.af(runOn(this, this.se));
            this.ae.af(runOn(this, this.sf));
            this.b3 = new ColumnSortDescriptionCollection();
            this.a6 = new ColumnGroupDescriptionCollection();
            this.b6 = new ColumnSummaryDescriptionCollection();
            this.b3.l(runOn(this, this.tb));
            this.a6.l(runOn(this, this.p6));
            this.b6.l(runOn(this, this.tc));
            this.u = new FilterExpressionCollection();
            this.u.m(runOn(this, this.p3));
            this.e4 = new SortManager(this);
            this.cb = new EditingManager(this);
            this.d5 = new HoverManager(this);
        }
        get lq() {
            return this.lm;
        }
        set lq(a) {
            this.lm = a;
        }
        get propertySetter() {
            return this._propertySetter;
        }
        set propertySetter(a) {
            this._propertySetter = a;
        }
        get externalGrid() {
            return this.ed;
        }
        set externalGrid(a) {
            this.ed = a;
            if (this.a2 != null) {
                this.a2.k = this.ed;
            }
        }
        get dragger() {
            return this.eb;
        }
        set dragger(a) {
            if (this.eb != null) {
                let b = this.eb;
                b.onDrag = delegateRemove(b.onDrag, runOn(this, this.rn));
                let c = this.eb;
                c.onDragEnd = delegateCombine(c.onDragEnd, runOn(this, this.rp));
            }
            this.eb = a;
            let d = this.eb;
            d.onDrag = delegateCombine(d.onDrag, runOn(this, this.rn));
            let e = this.eb;
            e.onDragEnd = delegateCombine(e.onDragEnd, runOn(this, this.rp));
        }
        q8(a) {
            if (this.columnExchangingAnimationCompleted != null) {
                this.columnExchangingAnimationCompleted(a.externalObject, new EventArgs());
            }
        }
        q7(a) {
            if (this.columnExchangingAnimationCanceled != null) {
                this.columnExchangingAnimationCanceled(a.externalObject, new EventArgs());
            }
        }
        o(a) {
            let b = this.a0(a.k);
            if (b == null) {
                return null;
            }
            return b.eo;
        }
        p(a) {
            let b = this.a0(a.k);
            if (b == null) {
                return 11;
            }
            if (this.actualDataSource == null) {
                return 11;
            }
            return this.actualDataSource.resolveSchemaPropertyType(b.hy);
        }
        rh(a) {
            if (this.columnShowingAnimationCompleted != null) {
                this.columnShowingAnimationCompleted(a.externalObject, new EventArgs());
            }
        }
        pv(a, b) {
            let c = this.a0(a.k);
            if (c == null) {
                return;
            }
            if (!Base.equalsStatic(c.eo, b)) {
                c.eo = b;
                if (this.filterExpressionsChanging != null) {
                    this.filterExpressionsChanging(this, ((() => {
                        let $ret = new GridFilterExpressionsEventArgs();
                        $ret.a = this.v;
                        return $ret;
                    })()));
                }
            }
        }
        pu(a, b) {
            let c = this.a0(a.k);
            if (c == null) {
                return;
            }
            if (!Base.equalsStatic(c.eo, b)) {
                c.eo = b;
            }
        }
        rg(a) {
            if (this.columnShowingAnimationCanceled != null) {
                this.columnShowingAnimationCanceled(a.externalObject, new EventArgs());
            }
        }
        re(a) {
            if (this.columnMovingAnimationCompleted != null) {
                this.columnMovingAnimationCompleted(a.externalObject, new EventArgs());
            }
        }
        rd(a) {
            if (this.columnMovingAnimationCanceled != null) {
                this.columnMovingAnimationCanceled(a.externalObject, new EventArgs());
            }
        }
        ra(a) {
            if (this.columnHidingAnimationCompleted != null) {
                this.columnHidingAnimationCompleted(a.externalObject, new EventArgs());
            }
        }
        q9(a) {
            if (this.columnHidingAnimationCanceled != null) {
                this.columnHidingAnimationCanceled(a.externalObject, new EventArgs());
            }
        }
        q2(a) {
            if (this.cellPreviewPointerDown != null) {
                this.cellPreviewPointerDown(a, ((() => {
                    let $ret = new GridCellEventArgs();
                    $ret.cellInfo = a;
                    $ret.grid = this;
                    return $ret;
                })()));
            }
        }
        q3(a) {
            if (this.cellPreviewPointerUp != null) {
                this.cellPreviewPointerUp(a, ((() => {
                    let $ret = new GridCellEventArgs();
                    $ret.cellInfo = a;
                    $ret.grid = this;
                    return $ret;
                })()));
            }
        }
        q0(a) {
            if (this.cellPointerDown != null) {
                this.cellPointerDown(a, ((() => {
                    let $ret = new GridCellEventArgs();
                    $ret.cellInfo = a;
                    $ret.grid = this;
                    return $ret;
                })()));
            }
        }
        q1(a) {
            if (this.cellPointerUp != null) {
                this.cellPointerUp(a, ((() => {
                    let $ret = new GridCellEventArgs();
                    $ret.cellInfo = a;
                    $ret.grid = this;
                    return $ret;
                })()));
            }
        }
        r4(a, b) {
            this.qb(a);
        }
        ru(a) {
            if (a.v == 2) {
                this.tj(a.k.w);
            }
        }
        tj(a) {
            if (this.cb.j) {
                if (!this.ha(true)) {
                    return;
                }
                if (this.cf == 3) {
                    this.p1(true);
                }
            }
            let b = !this.actualDataSource.getIsRowExpandedAtIndex(a);
            this.actualDataSource.setIsRowExpandedAtIndex(a, b);
            let c = this.actualDataSource.getRowLevel(a);
            if (a < this.model.bf.w) {
                this.s2(a - c);
            }
        }
        rt(a) {
            if (a != null && this.cf != 3) {
                this.ha(true);
            }
        }
        qt(a) {
            if (a.v == 1) {
                if (this.hr()) {
                    if (this.cd == 2) {
                        this.ix(a);
                    }
                }
            }
        }
        qr(a, b, c, d) {
            this.externalGrid.focusScroller();
            if (a.v == 1) {
                if (this.cb.j && a != this.cb.a) {
                    if (!this.ha(true)) {
                        return;
                    }
                }
                if (a.k.w != this.j3) {
                    this.p1(true);
                }
                if (d && this.hr()) {
                    if (this.cd == 1 || (this.cf == 3 && a.k.w == this.j3)) {
                        this.ix(a);
                    }
                }
            }
            else if (a.v == 2 || a.v == 3) {
                this.ha(true);
                this.p1(true);
            }
            if (a.v == 0 && this.d0 != 4) {
                this.e4.d(this.a0(a.k));
            }
            if (this.dt == 5) {
                if (a.k.ag && !a.k.au) {
                    let e = this.model.br._inner[a.k.az].n;
                    if (this.dr == 1) {
                        if (b) {
                            this.si(a.k.w, e);
                        }
                        else {
                            if (c && this.at != null) {
                                let f = e;
                                let g = a.k.w;
                                this.dj.remove(this.at);
                                this.pm(Math.min(this.at.k, f), Math.max(this.at.k, f), Math.min(this.at.l, g), Math.max(this.at.l, g));
                            }
                            else {
                                this.sp();
                                this.pm(e, e, a.k.w, a.k.w);
                            }
                        }
                    }
                    else if (this.dr == 0) {
                        this.si(a.k.w, e);
                    }
                }
            }
            else {
                if (this.dr == 0) {
                    this.e0.an(a);
                }
                else if (this.dr == 1) {
                    if (b) {
                        this.e0.an(a);
                    }
                    else {
                        this.e0.am(a);
                    }
                }
            }
            if (this.ch == 1) {
                this.aj.x(a);
            }
            if (this.cellClicked != null) {
                this.cellClicked(a, ((() => {
                    let $ret = new GridCellEventArgs();
                    $ret.cellInfo = a;
                    $ret.grid = this;
                    return $ret;
                })()));
            }
        }
        si(a, b) {
            let c = false;
            for (let d = 0; d < this.dj.count; d++) {
                let e = this.dj._inner[d];
                if (e.k == b && e.i == b && e.l == a && e.j == a) {
                    this.sq(this.dj._inner[d]);
                    c = true;
                    break;
                }
            }
            if (!c) {
                this.pm(b, b, a, a);
            }
        }
        get bu() {
            return this.bt;
        }
        set bu(a) {
            let b = this.bt;
            this.bt = a;
            if (b != this.bt) {
                this.rz("ColumnResizingMode", enumGetBox(ColumnResizingMode_$type, b), enumGetBox(ColumnResizingMode_$type, this.bt));
            }
        }
        get bg() {
            return this.bf;
        }
        set bg(a) {
            let b = this.bf;
            this.bf = a;
            if (b != this.bf) {
                this.rz("ColumnMovingMode", enumGetBox(ColumnMovingMode_$type, b), enumGetBox(ColumnMovingMode_$type, this.bf));
            }
        }
        get h4() {
            return this.gk;
        }
        set h4(a) {
            let b = this.gk;
            this.gk = a;
            if (b != this.gk) {
                this.rz("IsRowHoverEnabled", b, this.gk);
            }
        }
        get u7() {
            return this.ua;
        }
        set u7(a) {
            let b = this.ua;
            this.ua = a;
            if (b != this.ua) {
                this.rz("RowHoverBackground", b, this.ua);
            }
        }
        get uz() {
            return this.t2;
        }
        set uz(a) {
            let b = this.t2;
            this.t2 = a;
            if (b != this.t2) {
                this.rz("EditRowBorder", b, this.t2);
            }
        }
        get v0() {
            return this.vu;
        }
        set v0(a) {
            let b = this.vu;
            this.vu = a;
            if (b != this.vu) {
                this.rz("EditRowBorderWidth", b, this.vu);
            }
        }
        qy(a, b, c) {
            this.aq = a.k.aa();
            this.vo = { $type: Point_$type, x: b, y: c };
            this.gc = a.a6 && a.a7;
            if (this.dragger != null && this.bu != 2 && this.aq.h) {
                let d = this.a2.j._inner[a.k.az];
                if (d.ge) {
                    let e = this.model.br._inner[this.aq.az];
                    this.jh = e.k;
                    this.je = this.model.cf;
                    this.jf = this.model.cg;
                    this.ji = this.model.actualVisibleRegion.left;
                    this.jj = this.model.actualVisibleRegion.top;
                    let f = this.dragger.view.transformPoint(b, c);
                    this.ld = truncate((f.x + this.ji)) - (intDivide(this.kp, 2));
                    this.i6 = -1;
                    this.externalGrid.setResizeCursor();
                    this.dragger.dragStart(b, c, this.model.actualVisibleRegion.x, this.model.actualVisibleRegion.y, 1, this.aq, false);
                    if (this.bu == 0) {
                        this.sk();
                    }
                }
            }
        }
        qz(a, b, c) {
            this.aq = null;
        }
        qx(a, b, c) {
            let d = 0;
            for (let e = 0; e < this.model.br.count; e++) {
                let f = this.model.br._inner[e];
                d += f.k;
            }
            let g = this.dragger.view.transformPoint(b, c);
            if ((this.dragger == null || !this.dragger.isDragActive) && g.x >= d) {
                this.externalGrid.setDefaultCursor();
            }
            if (this.h4) {
                this.d5.f(-1);
            }
        }
        get lb() {
            return this.j6;
        }
        set lb(a) {
            this.j6 = a;
            this.hb = true;
        }
        qw(a, b, c) {
            if (this.h4) {
                let d = false;
                let e = -1;
                if (a.k.ag || a.k.as || a.k.ah) {
                    d = true;
                    e = a.k.w;
                    if (a.k.ah && this.cb.j) {
                        e = this.cb.a.k.w;
                    }
                }
                else if (a.k.g || a.k.j) {
                    d = true;
                }
                if (d) {
                    if (this.i0) {
                        this.lb = e;
                    }
                    else {
                        this.d5.f(e);
                    }
                }
            }
        }
        ry(a, b, c) {
            if (this.dragger == null || !this.dragger.isDragActive) {
                if (a.k.h && this.bu != 2) {
                    let d = this.a2.j._inner[a.k.az];
                    if (d.ge) {
                        this.externalGrid.setResizeCursor();
                    }
                }
                else {
                    this.externalGrid.setDefaultCursor();
                }
            }
            else if (this.dragger.dragType != 1 && this.dragger.dragType != 2) {
                this.externalGrid.setDefaultCursor();
            }
        }
        pq() {
            if (this.ke != -1) {
                this.fz.teardownTicking(this.ke);
                this.ke = -1;
            }
        }
        rs(a, b, c, d) {
            this.ji = this.model.actualVisibleRegion.left;
            this.jj = this.model.actualVisibleRegion.top;
            if ((this.dragger == null || !this.dragger.isDragActive) && a.g && !a.h && this.bg != 1) {
                let e = this.a0(a);
                if (e != null && e.gc) {
                    this.externalGrid.ensureColumnsAreManual();
                }
                this.externalGrid.setHandCursor();
                this.dragger.dragStart(b, c, this.model.actualVisibleRegion.x, this.model.actualVisibleRegion.y, 2, a, d);
            }
            else if (this.dt == 5 && a.ag && !a.au) {
                if (!d) {
                    this.sp();
                }
                this.ki = a.w;
                this.kh = this.model.br._inner[a.az].n;
                this.gv = this.gc;
                if (this.ch == 1) {
                    this.aj.w(a);
                }
                this.dragger.dragStart(b, c, this.model.actualVisibleRegion.x, this.model.actualVisibleRegion.y, 0, a, d);
            }
        }
        rp(a, b) {
            this.pq();
            this.as = null;
            this.an = null;
            this.ka = -1;
            this.aq = null;
            if (this.dragger == null) {
                return;
            }
            if (this.dragger.dragType == 1) {
                this.externalGrid.setDefaultCursor();
                if (this.bu == 0) {
                    if (this.i6 != -1) {
                        let c = this.model.br._inner[this.dragger.cellPath.az];
                        this.ck.ag(this, this.cz, c, this.i6);
                    }
                    else {
                        this.renderingEngine.refresh(this.model, false);
                    }
                }
            }
            else if (this.dragger.dragType == 2) {
                this.externalGrid.setDefaultCursor();
                if (this.bg == 0) {
                    let d = true;
                    if ((this.kj != -1 && this.kj != this.dragger.cellPath.az) || this.ej != this.columns._inner[this.dragger.cellPath.az].fk) {
                        let e = this.columns._inner[this.dragger.cellPath.az].fk;
                        if (e != this.ej) {
                            this.iz = true;
                            this.qf(this.dragger.cellPath.az, this.kj);
                            this.iz = false;
                            this.sd(this.columns._inner[this.kj], this.ej);
                        }
                        else {
                            this.qf(this.dragger.cellPath.az, this.kj);
                        }
                        d = false;
                    }
                    if (d) {
                        this.sk();
                    }
                    this.kj = -1;
                }
            }
        }
        rn(a, b) {
            if (this.dragger == null) {
                return;
            }
            this.i8 = b.startX;
            this.i9 = b.startY;
            this.ja = b.currentX;
            this.jb = b.currentY;
            switch (this.dragger.dragType) {
                case 0:
                    this.rr(false);
                    break;
                case 1:
                    this.rq();
                    break;
                case 2:
                    this.ro(false);
                    break;
            }
        }
        get ld() {
            return this.ka;
        }
        set ld(a) {
            if (this.ka != a) {
                this.ka = a;
            }
        }
        ro(a) {
            if (this.dragger == null) {
                return;
            }
            let b = this.ja + this.model.actualVisibleRegion.x;
            if (a || !this.g4(b, NaN)) {
                let c = this.dragger.cellPath.az;
                let d = this.ld;
                this.ej = 0;
                for (let e = 0; e < this.model.br.count; e++) {
                    let f = this.model.br._inner[e];
                    if (f.a == 3) {
                        continue;
                    }
                    let g = f.l;
                    if (f.d == 1) {
                        g = f.l + this.model.actualVisibleRegion.x;
                    }
                    let h = g + f.k;
                    let i = g + (intDivide(f.k, 2));
                    if ((f.n == 0 && b < g) || (b > g && b <= i)) {
                        d = g;
                        if (e != c) {
                            c = e < this.dragger.cellPath.az ? e : e - 1;
                        }
                        if (f.d != 1 && d < this.model.actualVisibleRegion.x + this.model.cf) {
                            d = this.model.actualVisibleRegion.x + this.model.cf;
                        }
                        this.ej = f.d;
                        break;
                    }
                    else if ((b > i && b < h) || (e == this.model.br.count - 1 && b > h)) {
                        d = h - this.kn;
                        if (e != c) {
                            c = e < this.dragger.cellPath.az ? e + 1 : e;
                        }
                        this.ej = f.d;
                        break;
                    }
                }
                if (d != this.ld) {
                    let j = this.ld;
                    this.ld = truncate(d);
                    if (j == -1) {
                        this.renderingEngine.invalidateVisibility(() => this.fc.l(this));
                        this.renderingEngine.refresh(this.model, true);
                    }
                    else {
                        if (this.an == null) {
                            this.an = this.de.c(new CellPath(1, -400, 0, -102), this.model);
                        }
                        this.an.cc = this.ld;
                        this.renderingEngine.refresh(this.model, false);
                    }
                    this.kj = c;
                }
            }
        }
        rq() {
            let a = this.a2.h(this.dragger.cellPath);
            if (this.an == null) {
                this.an = this.de.c(new CellPath(1, -400, 0, -102), this.model);
            }
            let b = (this.ja + this.model.actualVisibleRegion.x) - this.i8;
            let c = isNaN_(a.gm) ? isNaN_(this.jn) ? 0 : this.jn : a.gm;
            this.i6 = Math.max(this.jh + b, Math.max(c, 10));
            let d = 20;
            if (a.fk == 1) {
                d = Math.min(20, this.vp.width - this.model.cf);
                let e = this.vp.width - d - this.model.cg;
                let f = this.je + (this.i6 - this.jh);
                if (f > e) {
                    this.i6 = this.i6 - (f - e);
                }
            }
            else if (a.fk == 2) {
                d = Math.min(20, this.vp.width - this.model.cg);
                let g = this.vp.width - d - this.model.cf;
                let h = this.jf + (this.i6 - this.jh);
                if (h > g) {
                    this.i6 = this.i6 - (h - g);
                }
            }
            if (this.bu == 0) {
                this.ld = truncate((this.i8 - this.jh + this.i6)) - (intDivide(this.kp, 2));
                if (this.an != null) {
                    this.an.cc = this.ld;
                    this.renderingEngine.refresh(this.model, false);
                }
            }
            else {
                let i = ((() => {
                    let $ret = new ColumnWidth();
                    $ret.f = this.i6;
                    $ret.c = false;
                    return $ret;
                })());
                if (!isNaN_(a.gm)) {
                    i.e = a.gm;
                }
                a.width = i;
            }
        }
        rr(a) {
            if (a || !this.g4(this.ja + this.model.actualVisibleRegion.x, this.jb + this.model.actualVisibleRegion.y)) {
                let b = this.ja + this.model.actualVisibleRegion.x;
                let c = this.vq(b, this.i9, this.ja, this.jb);
                let d = this.au(c, this.ki, this.kh, this.gv);
                if (this.as == null) {
                    this.as = d;
                    this.pl(this.as);
                }
                else {
                    this.tm(d);
                }
            }
        }
        vq(a, b, c, d) {
            c += this.model.actualVisibleRegion.x;
            d += this.model.actualVisibleRegion.y;
            return new Rect(0, Math.min(a, c), Math.min(b, d), Math.abs(c - a), Math.abs(d - b));
        }
        ap(a, b) {
            if (this.fd == null) {
                return null;
            }
            return this.fd.e(a, b);
        }
        au(a, b, c, d) {
            let e = this.model.al.q;
            let f = this.model.a0.q;
            let g = this.model.a3.q;
            let h = this.model.an.q;
            let i = new List$1(CellModel.$, 1, f);
            i.o(e);
            i.o(g);
            i.o(h);
            let j = b;
            let k = c;
            let l = this.ja + this.model.actualVisibleRegion.x;
            for (let m = 0; m < i.count; m++) {
                let n = i._inner[m];
                if (!n.k.ag || n.k.au) {
                    continue;
                }
                if (l < this.model.actualVisibleRegion.x + this.model.cf && n.k.d != 1) {
                    continue;
                }
                if (l > this.model.actualVisibleRegion.right - this.model.cg && n.k.d != 2) {
                    continue;
                }
                if (this.dt == 5) {
                    if (d) {
                        if (!n.a6 || (n.a6 && !n.a7)) {
                            continue;
                        }
                    }
                    else {
                        if (n.a6 && n.a7) {
                            continue;
                        }
                    }
                    let o = new Rect(0, n.cc, n.cd, n.gf, n.e0);
                    if (a.intersectsWith(o)) {
                        let p = this.model.br._inner[n.k.az].n;
                        let q = Math.abs(n.k.w - b);
                        let r = Math.abs(Math.max(0, p) - c);
                        let s = Math.abs(j - b);
                        let t = Math.abs(k - c);
                        if (q > s) {
                            j = n.k.w;
                        }
                        if (r > t && !n.k.au) {
                            k = p;
                        }
                    }
                }
            }
            let u = new CellRange();
            u.k = Math.min(c, k);
            u.i = Math.max(c, k);
            u.l = Math.min(b, j);
            u.j = Math.max(b, j);
            return u;
        }
        g4(a, b) {
            let c = 20;
            let d = 20;
            let e = new Rect(0, this.model.actualVisibleRegion.x + d, this.model.actualVisibleRegion.y + c, this.model.actualVisibleRegion.width - d * 2, this.model.actualVisibleRegion.height - c * 2);
            let f = 5;
            let g = 1000;
            let h = 5;
            let i = 1000;
            if (!this.gv && !isNaN_(b)) {
                if (b > e.bottom) {
                    let j = b - e.bottom;
                    this.jk = Math.min(j * f, g);
                    this.gm = true;
                }
                else if (b < e.top) {
                    let k = e.top - b;
                    this.jk = -Math.min(k * f, g);
                    this.gm = true;
                }
                else {
                    this.jk = 0;
                    this.gm = false;
                }
            }
            if (a > e.right) {
                let l = a - e.right;
                this.jd = Math.min(l * h, i);
                this.gl = true;
            }
            else if (a < e.left) {
                let m = e.left - a;
                this.jd = -Math.min(m * h, i);
                this.gl = true;
            }
            else {
                this.jd = 0;
                this.gl = false;
            }
            if ((this.gm || this.gl) && this.ke == -1) {
                this.i3 = dateNow();
                this.ke = this.fz.setupTicking(runOn(this, this.p0));
                this.fz.requestFrame(this.ke);
            }
            if (!this.gm && !this.gl) {
                this.pq();
            }
            return this.gl || this.gm;
        }
        p0() {
            if (this.dragger == null) {
                return;
            }
            let a = dateNow();
            let b = timeSpanTotalSeconds((+a - +(this.i3)));
            this.i3 = a;
            this.ji = Math.max(this.ji + this.jd * b, 0);
            this.jj = Math.max(this.jj + this.jk * b, 0);
            if (this.model.absoluteWidth > 0 && this.model.actualVisibleRegion.width > 0 && this.ji + this.model.actualVisibleRegion.width > this.model.absoluteWidth) {
                this.ji = Math.round(this.model.absoluteWidth - this.model.actualVisibleRegion.width);
            }
            if (this.model.absoluteHeight > 0 && this.model.actualVisibleRegion.height > 0 && this.jj + this.model.actualVisibleRegion.height > this.model.absoluteHeight) {
                this.jj = Math.round(this.model.absoluteHeight - this.model.actualVisibleRegion.height);
            }
            this.viewportManager.moveViewportTo(truncate(this.ji), truncate(this.jj));
            switch (this.dragger.dragType) {
                case 0:
                    this.rr(true);
                    break;
                case 1:
                    this.rq();
                    break;
                case 2:
                    this.ro(true);
                    break;
            }
            this.fz.requestFrame(this.ke);
        }
        tm(a) {
            if (a.k != this.as.k || a.i != this.as.i || a.l != this.as.l || a.j != this.as.j) {
                this.as.k = a.k;
                this.as.i = a.i;
                this.as.l = a.l;
                this.as.j = a.j;
                this.g0 = true;
                this.e0.at();
                this.g0 = false;
                this.qi(this.as);
            }
        }
        sv(a) {
            if (this.actualDataSource != null && this.actualDataSource.actualSchema != null) {
                a.m = this.actualDataSource.resolveSchemaPropertyType(a.f);
                a.o = true;
            }
        }
        sw(a) {
            if (this.actualDataSource != null && this.actualDataSource.actualSchema != null) {
                a.g = this.actualDataSource.resolveSchemaPropertyType(a.af);
                a.r = true;
            }
        }
        tc(a, b) {
            switch (b.action) {
                case 0:
                    if (b.newItems != null) {
                        for (let c = 0; c < b.newItems.count; c++) {
                            let d = b.newItems.item(c);
                            if (!d.r) {
                                this.sw(d);
                            }
                        }
                    }
                    break;
            }
        }
        p6(a, b) {
            switch (b.action) {
                case 0:
                    if (b.newItems != null) {
                        for (let c = 0; c < b.newItems.count; c++) {
                            let d = b.newItems.item(c);
                            if (!d.o) {
                                this.sv(d);
                            }
                        }
                    }
                    break;
            }
            if (this.groupDescriptionsChanged != null) {
                this.groupDescriptionsChanged(this, ((() => {
                    let $ret = new GridGroupDescriptionsChangedEventArgs();
                    $ret.groupDescriptions = this.a7;
                    return $ret;
                })()));
            }
        }
        p3(a, b) {
            if (this.filterExpressionsChanged != null) {
                this.filterExpressionsChanged(this, ((() => {
                    let $ret = new GridFilterExpressionsEventArgs();
                    $ret.a = this.v;
                    return $ret;
                })()));
            }
        }
        tb(a, b) {
            this.hx = true;
            try {
                switch (b.action) {
                    case 0:
                        if (b.newItems != null) {
                            for (let c = 0; c < b.newItems.count; c++) {
                                let d = b.newItems.item(c);
                                this.ti(d.f, this.b5(d.c));
                            }
                        }
                        break;
                    case 1:
                        if (b.oldItems != null) {
                            for (let e = 0; e < b.oldItems.count; e++) {
                                let f = b.oldItems.item(e);
                                this.ti(f.f, 0);
                            }
                        }
                        break;
                    case 2:
                        if (b.oldItems != null) {
                            for (let g = 0; g < b.oldItems.count; g++) {
                                let h = b.oldItems.item(g);
                                this.ti(h.f, 0);
                            }
                        }
                        if (b.newItems != null) {
                            for (let i = 0; i < b.newItems.count; i++) {
                                let j = b.newItems.item(i);
                                this.ti(j.f, this.b5(j.c));
                            }
                        }
                        break;
                    case 4:
                        for (let k of fromEnum(this.columns)) {
                            k.e6 = 0;
                        }
                        break;
                }
                if (this.sortDescriptionsChanged != null) {
                    this.sortDescriptionsChanged(this, ((() => {
                        let $ret = new GridSortDescriptionsChangedEventArgs();
                        $ret.sortDescriptions = this.b4;
                        return $ret;
                    })()));
                }
            }
            finally {
                this.hx = false;
            }
        }
        ti(a, b) {
            for (let c = 0; c < this.columns.count; c++) {
                if (this.columns._inner[c].hy == a) {
                    this.columns._inner[c].e6 = b;
                }
            }
        }
        b5(a) {
            switch (a) {
                case 0: return 1;
                case 1: return 2;
            }
            return 0;
        }
        s5(a, b) {
            if (!this.hd && this.actualDataSource != null) {
                if (!this.gy) {
                    this.gy = true;
                    switch (b.action) {
                        case 0:
                            if (b.newItems != null) {
                                for (let c = 0; c < b.newItems.count; c++) {
                                    let d = this.d9.getItemKey(this.i(), b.newItems.item(c));
                                    this.ah.ae.insert(c + b.newStartingIndex, d);
                                }
                            }
                            break;
                        case 1:
                            if (b.oldItems != null) {
                                for (let e = 0; e < b.oldItems.count; e++) {
                                    this.ah.ae.removeAt(b.oldStartingIndex);
                                }
                            }
                            break;
                        case 2:
                            if (b.oldItems != null) {
                                for (let f = 0; f < b.oldItems.count; f++) {
                                    this.ah.ae.removeAt(b.oldStartingIndex);
                                }
                            }
                            if (b.newItems != null) {
                                for (let g = 0; g < b.newItems.count; g++) {
                                    let h = this.d9.getItemKey(this.i(), b.newItems.item(g));
                                    this.ah.ae.insert(g + b.newStartingIndex, h);
                                }
                            }
                            break;
                        case 4:
                            this.ah.clear();
                            for (let i of fromEnum(this.ad.ae)) {
                                let j = this.d9.getItemKey(this.i(), i);
                                this.ah.add(j);
                            }
                            break;
                    }
                    this.e0.av();
                    this.gy = false;
                }
            }
            if (this.h7) {
                if (this.selectedItemsChanged != null) {
                    let k = null;
                    if (b.newItems != null && b.newItems.count > 0) {
                        k = new GridSelectedItemsCollection();
                        for (let l of fromEn(b.newItems)) {
                            k.add1(l);
                        }
                    }
                    let m = null;
                    if (b.oldItems != null && b.oldItems.count > 0) {
                        m = new GridSelectedItemsCollection();
                        for (let n of fromEn(b.oldItems)) {
                            m.add1(n);
                        }
                    }
                    this.selectedItemsChanged(this, ((() => {
                        let $ret = new GridSelectedItemsChangedEventArgs();
                        $ret.addedItems = k;
                        $ret.removedItems = m;
                        $ret.currentItems = this.ad;
                        return $ret;
                    })()));
                }
            }
        }
        s6(a, b) {
            if (!this.hd && this.actualDataSource != null) {
                if (!this.gy) {
                    this.gy = true;
                    switch (b.action) {
                        case 0:
                            if (b.newItems != null) {
                                for (let c = 0; c < b.newItems.count; c++) {
                                    let d = this.d9.getItemForKey(b.newItems.item(c));
                                    this.ad.ae.insert1(c + b.newStartingIndex, d);
                                }
                            }
                            break;
                        case 1:
                            if (b.oldItems != null) {
                                for (let e = 0; e < b.oldItems.count; e++) {
                                    this.ad.ae.removeAt(b.oldStartingIndex);
                                }
                            }
                            break;
                        case 2:
                            if (b.oldItems != null) {
                                for (let f = 0; f < b.oldItems.count; f++) {
                                    this.ad.ae.removeAt(b.oldStartingIndex);
                                }
                            }
                            if (b.newItems != null) {
                                for (let g = 0; g < b.newItems.count; g++) {
                                    let h = this.d9.getItemForKey(b.newItems.item(g));
                                    this.ad.ae.insert1(g + b.newStartingIndex, h);
                                }
                            }
                            break;
                        case 4:
                            this.ad.clear();
                            for (let i of fromEnum(this.ah.ae)) {
                                let j = this.d9.getItemForKey(i);
                                this.ad.add1(j);
                            }
                            break;
                    }
                    this.e0.av();
                    this.gy = false;
                }
            }
            if (this.h7) {
                if (this.selectedKeysChanged != null) {
                    let k = null;
                    if (b.newItems != null && b.newItems.count > 0) {
                        k = new GridSelectedKeysCollection();
                        for (let l of fromEn(b.newItems)) {
                            k.add(l);
                        }
                    }
                    let m = null;
                    if (b.oldItems != null && b.oldItems.count > 0) {
                        m = new GridSelectedKeysCollection();
                        for (let n of fromEn(b.oldItems)) {
                            m.add(n);
                        }
                    }
                    this.selectedKeysChanged(this, ((() => {
                        let $ret = new GridSelectedKeysChangedEventArgs();
                        $ret.addedKeys = k;
                        $ret.removedKeys = m;
                        $ret.currentKeys = this.ah;
                        return $ret;
                    })()));
                }
            }
        }
        s4(a, b) {
            switch (b.action) {
                case 0:
                case 2:
                    for (let c = 0; c < b.newItems.count; c++) {
                        (typeCast(CellKey.$, b.newItems.item(c))).d = this;
                    }
                    break;
            }
            if (!this.hd) {
                this.g0 = true;
                this.e0.au();
                this.g0 = false;
            }
            if (this.h7) {
                let d = null;
                if (b.newItems != null && b.newItems.count > 0) {
                    d = new GridSelectedCellsCollection();
                    for (let e of fromEn(b.newItems)) {
                        d.add(e);
                    }
                }
                let f = null;
                if (b.oldItems != null && b.oldItems.count > 0) {
                    f = new GridSelectedCellsCollection();
                    for (let g of fromEn(b.oldItems)) {
                        f.add(g);
                    }
                }
                if (this.selectedCellsChanged != null) {
                    this.selectedCellsChanged(this, ((() => {
                        let $ret = new GridSelectedCellsChangedEventArgs();
                        $ret.addedCells = d;
                        $ret.removedCells = f;
                        $ret.currentCells = this.dm;
                        return $ret;
                    })()));
                }
            }
        }
        s3(a, b) {
            this.g0 = true;
            this.e0.at();
            this.g0 = false;
            if (this.h7) {
                if (this.selectedCellRangesChanged != null) {
                    this.selectedCellRangesChanged(this, ((() => {
                        let $ret = new GridSelectedCellRangesChangedEventArgs();
                        $ret.currentRanges = this.dj;
                        return $ret;
                    })()));
                }
            }
        }
        se(a, b) {
            if (!this.hc && this.actualDataSource != null) {
                if (!this.gx) {
                    this.gx = true;
                    switch (b.action) {
                        case 0:
                            if (b.newItems != null) {
                                for (let c = 0; c < b.newItems.count; c++) {
                                    let d = this.d9.getItemKey(this.i(), b.newItems.item(c));
                                    this.ag.ae.insert(c + b.newStartingIndex, d);
                                    this.d9.pinRow(d);
                                }
                            }
                            break;
                        case 1:
                            if (b.oldItems != null) {
                                for (let e = 0; e < b.oldItems.count; e++) {
                                    this.d9.unpinRow(this.ag.ae._inner[b.oldStartingIndex]);
                                    this.ag.ae.removeAt(b.oldStartingIndex);
                                }
                            }
                            break;
                        case 2:
                            if (b.oldItems != null) {
                                for (let f = 0; f < b.oldItems.count; f++) {
                                    this.d9.unpinRow(this.ag.ae._inner[b.oldStartingIndex]);
                                    this.ag.ae.removeAt(b.oldStartingIndex);
                                }
                            }
                            if (b.newItems != null) {
                                for (let g = 0; g < b.newItems.count; g++) {
                                    let h = this.d9.getItemKey(this.i(), b.newItems.item(g));
                                    this.ag.ae.insert(g + b.newStartingIndex, h);
                                    this.d9.pinRow(h);
                                }
                            }
                            break;
                        case 4:
                            this.ag.clear();
                            this.d9.clearPinnedRows();
                            for (let i of fromEnum(this.ac.ae)) {
                                let j = this.d9.getItemKey(this.i(), i);
                                this.ag.add(j);
                                this.d9.pinRow(j);
                            }
                            break;
                    }
                    this.gx = false;
                }
            }
        }
        sf(a, b) {
            if (!this.hc && this.actualDataSource != null) {
                if (!this.gx) {
                    this.gx = true;
                    switch (b.action) {
                        case 0:
                            if (b.newItems != null) {
                                for (let c = 0; c < b.newItems.count; c++) {
                                    let d = this.d9.getItemForKey(b.newItems.item(c));
                                    this.ac.ae.insert1(c + b.newStartingIndex, d);
                                    this.d9.pinRow(b.newItems.item(c));
                                }
                            }
                            break;
                        case 1:
                            if (b.oldItems != null) {
                                for (let e = 0; e < b.oldItems.count; e++) {
                                    this.d9.unpinRow(b.oldItems.item(e));
                                    this.ac.ae.removeAt(b.oldStartingIndex);
                                }
                            }
                            break;
                        case 2:
                            if (b.oldItems != null) {
                                for (let f = 0; f < b.oldItems.count; f++) {
                                    this.d9.unpinRow(b.oldItems.item(f));
                                    this.ac.ae.removeAt(b.oldStartingIndex);
                                }
                            }
                            if (b.newItems != null) {
                                for (let g = 0; g < b.newItems.count; g++) {
                                    let h = this.d9.getItemForKey(b.newItems.item(g));
                                    let i = this.d9.indexOfKey(b.newItems.item(g));
                                    this.ac.ae.insert1(g + b.newStartingIndex, h);
                                    this.d9.pinRow(b.newItems.item(g));
                                }
                            }
                            break;
                        case 4:
                            this.ac.clear();
                            this.d9.clearPinnedRows();
                            for (let j of fromEnum(this.ag.ae)) {
                                let k = this.d9.getItemForKey(j);
                                this.ac.add1(k);
                                this.d9.pinRow(j);
                            }
                            break;
                    }
                    this.gx = false;
                }
            }
        }
        get ck() {
            return this.cj;
        }
        set ck(a) {
            this.cj = a;
        }
        get delayedExecutionManager() {
            return this._delayedExecutionManager;
        }
        set delayedExecutionManager(a) {
            this._delayedExecutionManager = a;
        }
        get el() {
            return this.ek;
        }
        get d9() {
            return this.d8;
        }
        set d9(a) {
            this.d8 = a;
        }
        get a2() {
            return this.a1;
        }
        set a2(a) {
            this.a1 = a;
        }
        get de() {
            return this.dd;
        }
        set de(a) {
            this.dd = a;
        }
        get e6() {
            return this.e5;
        }
        set e6(a) {
            this.e5 = a;
        }
        get c9() {
            return this.c8;
        }
        set c9(a) {
            this.c8 = a;
        }
        get e0() {
            return this.ez;
        }
        set e0(a) {
            this.ez = a;
        }
        get aj() {
            return this.ai;
        }
        set aj(a) {
            this.ai = a;
        }
        get e4() {
            return this.e3;
        }
        set e4(a) {
            this.e3 = a;
        }
        get tickProvider() {
            return this.fz;
        }
        set tickProvider(a) {
            this.fz = a;
            this.c8 = new GridEffectManager(this.fz, this);
        }
        get ey() {
            return this.ex;
        }
        set ey(a) {
            let b = this.ex;
            this.ex = a;
            if (this.ex == null) {
                this.ex = new SectionHeader();
            }
            this.ex.grid = this;
            if (b != this.ex) {
                this.rz("SectionHeader", b, this.ex);
            }
        }
        get ew() {
            return this.ev;
        }
        set ew(a) {
            this.ev = a;
        }
        get e8() {
            return this.e7;
        }
        set e8(a) {
            let b = this.e7;
            this.e7 = a;
            if (this.e7 == null) {
                this.e7 = new SummaryRowRoot();
            }
            this.e7.grid = this;
            if (b != this.e7) {
                this.rz("SummaryRowRoot", b, this.e7);
            }
        }
        get fa() {
            return this.e9;
        }
        set fa(a) {
            let b = this.e9;
            this.e9 = a;
            if (this.e9 == null) {
                this.e9 = new SummaryRowSection();
            }
            this.e9.grid = this;
            if (b != this.e9) {
                this.rz("SummaryRowSection", b, this.e9);
            }
        }
        get eu() {
            return this.et;
        }
        set eu(a) {
            let b = this.et;
            this.et = a;
            if (b != this.et) {
                this.rz("RowSeparator", b, this.et);
            }
        }
        get d2() {
            return this.d1;
        }
        set d2(a) {
            let b = this.d1;
            this.d1 = a;
            if (b != this.d1) {
                this.rz("HeaderRowSeparator", b, this.d1);
            }
        }
        get d4() {
            return this.d3;
        }
        set d4(a) {
            let b = this.d3;
            this.d3 = a;
            if (b != this.d3) {
                this.rz("HeaderSeparator", b, this.d3);
            }
        }
        get bw() {
            return this.bv;
        }
        set bw(a) {
            let b = this.bv;
            this.bv = a;
            if (b != this.bv) {
                this.rz("ColumnResizingSeparator", b, this.bv);
            }
        }
        get bi() {
            return this.bh;
        }
        set bi(a) {
            let b = this.bh;
            this.bh = a;
            if (b != this.bh) {
                this.rz("ColumnMovingSeparator", b, this.bh);
            }
        }
        get ei() {
            return this.eh;
        }
        set ei(a) {
            let b = this.eh;
            this.eh = a;
            if (b != this.eh) {
                this.rz("PinnedAreaSeparator", b, this.eh);
            }
        }
        get f() {
            return this.b;
        }
        set f(a) {
            let b = this.b;
            this.b = a;
            if (b != this.b) {
                this.rz("AutoGenerateDesiredColumns", b, this.b);
            }
        }
        get g() {
            return this.c;
        }
        set g(a) {
            let b = this.c;
            this.c = a;
            if (b != this.c) {
                this.rz("DataSourceDesiredProperties", b, this.c);
            }
        }
        get fc() {
            return this.fb;
        }
        set fc(a) {
            this.fb = a;
        }
        get viewportManager() {
            return this._viewportManager;
        }
        set viewportManager(a) {
            this._viewportManager = a;
        }
        get jm() {
            return this.i5;
        }
        set jm(a) {
            this.i5 = a;
        }
        get jl() {
            return this.i4;
        }
        set jl(a) {
            this.i4 = a;
        }
        get fg() {
            return this.ff;
        }
        set fg(a) {
            let b = this.ff;
            this.ff = a;
            if (b != this.ff) {
                this.rz("Density", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, this.ff));
            }
        }
        get kl() {
            return this.jz;
        }
        set kl(a) {
            let b = this.jz;
            this.jz = a;
            if (b != this.jz) {
                this.rz("ActualRowHeight", b, this.jz);
            }
        }
        get le() {
            return this.kb;
        }
        set le(a) {
            let b = this.kb;
            this.kb = a;
            if (b != this.kb) {
                this.rz("RowHeight", b, this.kb);
            }
        }
        get defaultColumnWidth() {
            return this.b8;
        }
        set defaultColumnWidth(a) {
            let b = this.b8;
            this.b8 = a;
            if (b != this.b8) {
                this.rz("DefaultColumnWidth", b, this.b8);
            }
        }
        get jn() {
            return this.i7;
        }
        set jn(a) {
            let b = this.i7;
            this.i7 = a;
            if (b != this.i7) {
                this.rz("DefaultColumnMinWidth", b, this.i7);
            }
        }
        get kk() {
            return this.jy;
        }
        set kk(a) {
            let b = this.jy;
            this.jy = a;
            if (b != this.jy) {
                this.rz("ActualHeaderHeight", b, this.jy);
            }
        }
        get k6() {
            return this.j4;
        }
        set k6(a) {
            let b = this.j4;
            this.j4 = a;
            if (b != this.j4) {
                this.rz("HeaderHeight", b, this.j4);
            }
        }
        get lk() {
            return this.kg;
        }
        set lk(a) {
            let b = this.kg;
            this.kg = a;
            if (b != this.kg) {
                this.rz("SectionHeaderHeight", b, this.kg);
            }
        }
        get itemsSource() {
            return this.ln;
        }
        set itemsSource(a) {
            let b = this.ln;
            this.ln = a;
            if (b != this.ln) {
                this.rz("ItemsSource", b, this.ln);
            }
        }
        get li() {
            return this.kf;
        }
        set li(a) {
            let b = this.kf;
            this.kf = a;
            if (b != this.kf) {
                this.rz("SectionFooterHeight", b, this.kf);
            }
        }
        get lh() {
            return this.kd;
        }
        set lh(a) {
            let b = this.kd;
            this.kd = a;
            if (b != this.kd) {
                this.rz("RowSpacingHeight", b, this.kd);
            }
        }
        get kq() {
            return this.j2;
        }
        set kq(a) {
            let b = this.j2;
            this.j2 = a;
            if (b != this.j2) {
                this.rz("ColumnSpacingWidth", b, this.j2);
            }
        }
        get d0() {
            return this.dz;
        }
        set d0(a) {
            let b = this.dz;
            this.dz = a;
            if (b != this.dz) {
                this.rz("HeaderClickAction", enumGetBox(HeaderClickAction_$type, b), enumGetBox(HeaderClickAction_$type, this.dz));
                if ((this.dz == 0 || this.dz == 2) && (b == 1 || b == 3)) {
                    this.e4.h();
                }
            }
        }
        get cf() {
            return this.ce;
        }
        set cf(a) {
            let b = this.ce;
            this.ce = a;
            if (b != this.ce) {
                this.rz("EditMode", enumGetBox(EditModeType_$type, b), enumGetBox(EditModeType_$type, this.ce));
            }
        }
        get cd() {
            return this.cc;
        }
        set cd(a) {
            let b = this.cc;
            this.cc = a;
            if (b != this.cc) {
                this.rz("EditModeClickAction", enumGetBox(EditModeClickAction_$type, b), enumGetBox(EditModeClickAction_$type, this.cc));
            }
        }
        get g3() {
            return this.f4;
        }
        set g3(a) {
            let b = this.f4;
            this.f4 = a;
            if (b != this.f4) {
                this.rz("AutoGenerateColumns", b, this.f4);
            }
        }
        get lg() {
            return this.kc;
        }
        set lg(a) {
            let b = this.kc;
            this.kc = a;
            if (b != this.kc) {
                this.rz("RowSeparatorHeight", b, this.kc);
            }
        }
        get hy() {
            return this.gj;
        }
        set hy(a) {
            let b = this.gj;
            this.gj = a;
            if (b != this.gj) {
                this.rz("IsPlaceholderRenderingEnabled", b, this.gj);
            }
        }
        hi(a) {
            return this.b1(a) != 1 && this.hj;
        }
        b1(a) {
            if (this.bx == 0) {
                return a.e4();
            }
            return this.bx;
        }
        get bz() {
            return this.bx;
        }
        set bz(a) {
            let b = this.bx;
            this.bx = a;
            this.rz("ColumnAddingAnimationMode", enumGetBox(ColumnShowingAnimationMode_$type, b), enumGetBox(ColumnShowingAnimationMode_$type, this.bx));
        }
        get ho() {
            return this.bo != 1 && this.hj;
        }
        get columnPropertyUpdatingAnimationMode() {
            return this.bo;
        }
        set columnPropertyUpdatingAnimationMode(a) {
            let b = this.bo;
            this.bo = a;
            this.rz("ColumnPropertyUpdatingAnimationMode", enumGetBox(ColumnPropertyUpdatingAnimationMode_$type, b), enumGetBox(ColumnPropertyUpdatingAnimationMode_$type, this.bo));
        }
        get hj() {
            return this.renderingEngine.initialRefreshFinished;
        }
        get hf() {
            return this.ak != 1;
        }
        get al() {
            return this.ak;
        }
        set al(a) {
            let b = this.ak;
            this.ak = a;
            this.rz("CellDataLoadedAnimationMode", enumGetBox(CellDataLoadedAnimationMode_$type, b), enumGetBox(CellDataLoadedAnimationMode_$type, this.ak));
        }
        get h5() {
            return this.er != 1;
        }
        get es() {
            return this.er;
        }
        set es(a) {
            let b = this.er;
            this.er = a;
            this.rz("RowSelectionAnimationMode", enumGetBox(RowSelectionAnimationMode_$type, b), enumGetBox(RowSelectionAnimationMode_$type, this.er));
        }
        get h3() {
            return this.eo != 1;
        }
        get ep() {
            return this.eo;
        }
        set ep(a) {
            let b = this.eo;
            this.eo = a;
            if (b != this.eo) {
                this.rz("RowHoverAnimationMode", enumGetBox(RowHoverAnimationMode_$type, b), enumGetBox(RowHoverAnimationMode_$type, this.eo));
            }
        }
        get hg() {
            return this.av != 1;
        }
        get aw() {
            return this.av;
        }
        set aw(a) {
            let b = this.av;
            this.av = a;
            this.rz("CellSelectionAnimationMode", enumGetBox(CellSelectionAnimationMode_$type, b), enumGetBox(CellSelectionAnimationMode_$type, this.av));
        }
        get cz() {
            return this.cy;
        }
        set cz(a) {
            let b = this.cy;
            this.cy = a;
            if (b != this.cy) {
                this.rz("ColumnAnimationSettings", b, this.cy);
            }
        }
        get cm() {
            return this.cl;
        }
        set cm(a) {
            let b = this.cl;
            this.cl = a;
            if (b != this.cl) {
                this.rz("AnimationSettings", b, this.cl);
            }
        }
        hp(a) {
            return this.bs(a) != 1 && this.hj;
        }
        bs(a) {
            if (this.bq == 0) {
                return a.e3();
            }
            return this.bq;
        }
        get br() {
            return this.bq;
        }
        set br(a) {
            let b = this.bq;
            this.bq = a;
            this.rz("ColumnResizingAnimationMode", enumGetBox(ColumnResizingAnimationMode_$type, b), enumGetBox(ColumnResizingAnimationMode_$type, this.bq));
        }
        hq(a) {
            return this.b2(a) != 1 && this.hj;
        }
        b2(a) {
            if (this.by == 0) {
                return a.e4();
            }
            return this.by;
        }
        get b0() {
            return this.by;
        }
        set b0(a) {
            let b = this.by;
            this.by = a;
            this.rz("ColumnShowingAnimationMode", enumGetBox(ColumnShowingAnimationMode_$type, b), enumGetBox(ColumnShowingAnimationMode_$type, this.by));
        }
        hm(a) {
            return this.be(a) != 1 && this.hj && !this.iz;
        }
        be(a) {
            if (this.bc == 0) {
                return 2;
            }
            return this.bc;
        }
        get bd() {
            return this.bc;
        }
        set bd(a) {
            let b = this.bc;
            this.bc = a;
            this.rz("ColumnMovingAnimationMode", enumGetBox(ColumnMovingAnimationMode_$type, b), enumGetBox(ColumnMovingAnimationMode_$type, this.bc));
        }
        hl(a) {
            return this.bb(a) != 1 && this.hj;
        }
        bb(a) {
            if (this.a9 == 0) {
                return a.eu();
            }
            return this.a9;
        }
        get ba() {
            return this.a9;
        }
        set ba(a) {
            let b = this.a9;
            this.a9 = a;
            this.rz("ColumnHidingAnimationMode", enumGetBox(ColumnHidingAnimationMode_$type, b), enumGetBox(ColumnHidingAnimationMode_$type, this.a9));
        }
        hk(a) {
            return this.a5(a) != 1 && this.hj;
        }
        a5(a) {
            if (this.a3 == 0) {
                return a.et();
            }
            return this.a3;
        }
        get a4() {
            return this.a3;
        }
        set a4(a) {
            let b = this.a3;
            this.a3 = a;
            this.rz("ColumnExchangingAnimationMode", enumGetBox(ColumnExchangingAnimationMode_$type, b), enumGetBox(ColumnExchangingAnimationMode_$type, this.a3));
        }
        get inset() {
            return this.vv;
        }
        set inset(a) {
            let b = this.vv;
            this.vv = a;
            if (b != this.vv) {
                this.rz("Inset", b, this.vv);
            }
        }
        get dt() {
            return this.ds;
        }
        set dt(a) {
            let b = this.ds;
            this.ds = a;
            if (b != this.ds) {
                this.rz("SelectionMode", enumGetBox(GridSelectionMode_$type, b), enumGetBox(GridSelectionMode_$type, this.ds));
            }
        }
        get ch() {
            return this.cg;
        }
        set ch(a) {
            let b = this.cg;
            this.cg = a;
            if (b != this.cg) {
                this.rz("ActivationMode", enumGetBox(GridActivationMode_$type, b), enumGetBox(GridActivationMode_$type, this.cg));
            }
        }
        get dr() {
            return this.dq;
        }
        set dr(a) {
            let b = this.dq;
            this.dq = a;
            if (b != this.dq) {
                this.rz("SelectionBehavior", enumGetBox(GridSelectionBehavior_$type, b), enumGetBox(GridSelectionBehavior_$type, this.dq));
            }
        }
        get hd() {
            return this.f8;
        }
        set hd(a) {
            this.f8 = a;
        }
        get ad() {
            return this.ab;
        }
        get ah() {
            return this.af;
        }
        get dm() {
            return this.dl;
        }
        get dj() {
            return this.di;
        }
        get hc() {
            return this.f7;
        }
        set hc(a) {
            this.f7 = a;
        }
        get ac() {
            return this.aa;
        }
        get ag() {
            return this.ae;
        }
        te(a, b) {
            if (this.actualDataSource == null) {
                return;
            }
            if (a.ae.count > 0 && b.ae.count == 0) {
                let c = this.i();
                for (let d of fromEnum(a.ae)) {
                    let e = this.d9.getItemKey(c, d);
                    b.ae.add(e);
                }
            }
            else if (a.ae.count == 0 && b.ae.count > 0) {
                for (let f of fromEnum(b.ae)) {
                    let g = this.d9.getItemForKey(f);
                    a.ae.add1(g);
                }
            }
            else {
                a.ae.clear();
                for (let h of fromEnum(b.ae)) {
                    let i = this.d9.getItemForKey(h);
                    a.ae.add1(i);
                }
            }
        }
        get hn() {
            return this.gb;
        }
        set hn(a) {
            let b = this.gb;
            this.gb = a;
            if (b != this.gb) {
                this.rz("IsColumnOptionsEnabled", b, this.gb);
            }
        }
        get hu() {
            return this.gh;
        }
        set hu(a) {
            let b = this.gh;
            this.gh = a;
            if (b != this.gh) {
                this.rz("IsGroupRowSticky", b, this.gh);
            }
        }
        get hv() {
            return this.gi;
        }
        set hv(a) {
            let b = this.gi;
            this.gi = a;
            if (b != this.gi) {
                this.rz("IsHeaderSeparatorVisible", b, this.gi);
            }
        }
        get ut() {
            return this.tw;
        }
        set ut(a) {
            let b = this.tw;
            this.tw = a;
            if (b != this.tw) {
                this.rz("CellSelectedBackground", b, this.tw);
            }
        }
        get vd() {
            return this.ug;
        }
        set vd(a) {
            let b = this.ug;
            this.ug = a;
            if (b != this.ug) {
                this.rz("SectionHeaderSelectedBackground", b, this.ug);
            }
        }
        get vg() {
            return this.uj;
        }
        set vg(a) {
            let b = this.uj;
            this.uj = a;
            if (b != this.uj) {
                this.rz("SummaryRootBackground", b, this.uj);
            }
        }
        get vk() {
            return this.un;
        }
        set vk(a) {
            let b = this.un;
            this.un = a;
            if (b != this.un) {
                this.rz("SummarySectionBackground", b, this.un);
            }
        }
        get jp() {
            return this.jg;
        }
        set jp(a) {
            let b = this.jg;
            this.jg = a;
            if (b != this.jg) {
                this.rz("PinnedRowOpacity", b, this.jg);
            }
        }
        get fq() {
            return this.fi;
        }
        set fq(a) {
            let b = this.fi;
            this.fi = a;
            if (b != this.fi) {
                this.rz("EditTextStyle", b, this.fi);
            }
        }
        get jo() {
            return this.jc;
        }
        set jo(a) {
            let b = this.jc;
            this.jc = a;
            if (b != this.jc) {
                this.rz("EditOpacity", b, this.jc);
            }
        }
        get uy() {
            return this.t1;
        }
        set uy(a) {
            let b = this.t1;
            this.t1 = a;
            if (b != this.t1) {
                this.rz("DeletedTextColor", b, this.t1);
            }
        }
        get vf() {
            return this.ui;
        }
        set vf(a) {
            let b = this.ui;
            this.ui = a;
            if (b != this.ui) {
                this.rz("StickyRowBackground", b, this.ui);
            }
        }
        get u6() {
            return this.t9;
        }
        set u6(a) {
            let b = this.t9;
            this.t9 = a;
            if (b != this.t9) {
                this.rz("PinnedRowBackground", b, this.t9);
            }
        }
        get u5() {
            return this.t8;
        }
        set u5(a) {
            let b = this.t8;
            this.t8 = a;
            if (b != this.t8) {
                this.rz("LastStickyRowBackground", b, this.t8);
            }
        }
        get cw() {
            return this.cu;
        }
        set cw(a) {
            let b = this.cu;
            this.cu = a;
            if (b != this.cu) {
                this.rz("ActiveCell", b, this.cu);
            }
        }
        get us() {
            return this.tv;
        }
        set us(a) {
            let b = this.tv;
            this.tv = a;
            if (b != this.tv) {
                this.rz("CellBackground", b, this.tv);
            }
        }
        get uu() {
            return this.tx;
        }
        set uu(a) {
            let b = this.tx;
            this.tx = a;
            if (b != this.tx) {
                this.rz("CellTextColor", b, this.tx);
            }
        }
        get u3() {
            return this.t6;
        }
        set u3(a) {
            let b = this.t6;
            this.t6 = a;
            if (b != this.t6) {
                this.rz("HeaderSortIndicatorColor", b, this.t6);
            }
        }
        get e2() {
            return this.e1;
        }
        set e2(a) {
            let b = this.e1;
            this.e1 = a;
            if (b != this.e1) {
                this.rz("HeaderSortIndicatorStyle", enumGetBox(SortIndicatorStyle_$type, b), enumGetBox(SortIndicatorStyle_$type, this.e1));
            }
        }
        get fp() {
            return this.fh;
        }
        set fp(a) {
            let b = this.fh;
            this.fh = a;
            if (b != this.fh) {
                this.rz("CellTextStyle", b, this.fh);
            }
        }
        get vc() {
            return this.uf;
        }
        set vc(a) {
            let b = this.uf;
            this.uf = a;
            if (b != this.uf) {
                this.rz("SectionHeaderBackground", b, this.uf);
            }
        }
        get ve() {
            return this.uh;
        }
        set ve(a) {
            let b = this.uh;
            this.uh = a;
            if (b != this.uh) {
                this.rz("SectionHeaderTextColor", b, this.uh);
            }
        }
        get fs() {
            return this.fk;
        }
        set fs(a) {
            let b = this.fk;
            this.fk = a;
            if (b != this.fk) {
                this.rz("SectionHeaderTextStyle", b, this.fk);
            }
        }
        get ft() {
            return this.fl;
        }
        set ft(a) {
            let b = this.fl;
            this.fl = a;
            if (b != this.fl) {
                this.rz("SummaryRootLabelTextStyle", b, this.fl);
            }
        }
        get fv() {
            return this.fn;
        }
        set fv(a) {
            let b = this.fn;
            this.fn = a;
            if (b != this.fn) {
                this.rz("SummarySectionLabelTextStyle", b, this.fn);
            }
        }
        get vj() {
            return this.um;
        }
        set vj(a) {
            let b = this.um;
            this.um = a;
            if (b != this.um) {
                this.rz("SummaryRootValueTextColor", b, this.um);
            }
        }
        get fu() {
            return this.fm;
        }
        set fu(a) {
            let b = this.fm;
            this.fm = a;
            if (b != this.fm) {
                this.rz("SummaryRootValueTextStyle", b, this.fm);
            }
        }
        get fw() {
            return this.fo;
        }
        set fw(a) {
            let b = this.fo;
            this.fo = a;
            if (b != this.fo) {
                this.rz("SummarySectionValueTextStyle", b, this.fo);
            }
        }
        get vn() {
            return this.uq;
        }
        set vn(a) {
            let b = this.uq;
            this.uq = a;
            if (b != this.uq) {
                this.rz("SummarySectionValueTextColor", b, this.uq);
            }
        }
        get vh() {
            return this.uk;
        }
        set vh(a) {
            let b = this.uk;
            this.uk = a;
            if (b != this.uk) {
                this.rz("SummaryRootLabelTextColor", b, this.uk);
            }
        }
        get vl() {
            return this.uo;
        }
        set vl(a) {
            let b = this.uo;
            this.uo = a;
            if (b != this.uo) {
                this.rz("SummarySectionLabelTextColor", b, this.uo);
            }
        }
        get vi() {
            return this.ul;
        }
        set vi(a) {
            let b = this.ul;
            this.ul = a;
            if (b != this.ul) {
                this.rz("SummaryRootSelectedBackground", b, this.ul);
            }
        }
        get vm() {
            return this.up;
        }
        set vm(a) {
            let b = this.up;
            this.up = a;
            if (b != this.up) {
                this.rz("SummarySectionSelectedBackground", b, this.up);
            }
        }
        get lc() {
            return this.j9;
        }
        set lc(a) {
            let b = this.j9;
            this.j9 = a;
            if (b != this.j9) {
                this.rz("PinnedAreaSeparatorWidth", b, this.j9);
            }
        }
        get la() {
            return this.j5;
        }
        set la(a) {
            let b = this.j5;
            this.j5 = a;
            if (b != this.j5) {
                this.rz("HeaderSeparatorWidth", b, this.j5);
            }
        }
        km(a) {
            let b = 3;
            let c = Math.max(b - a, 0);
            if (c % 2 == 1) {
                c += 1;
            }
            return intDivide(c, 2);
        }
        get u2() {
            return this.t5;
        }
        set u2(a) {
            let b = this.t5;
            this.t5 = a;
            if (b != this.t5) {
                this.rz("HeaderSeparatorBackground", b, this.t5);
            }
        }
        get u0() {
            return this.t3;
        }
        set u0(a) {
            let b = this.t3;
            this.t3 = a;
            if (b != this.t3) {
                this.rz("HeaderBackground", b, this.t3);
            }
        }
        get u4() {
            return this.t7;
        }
        set u4(a) {
            let b = this.t7;
            this.t7 = a;
            if (b != this.t7) {
                this.rz("HeaderTextColor", b, this.t7);
            }
        }
        get fr() {
            return this.fj;
        }
        set fr(a) {
            let b = this.fj;
            this.fj = a;
            if (b != this.fj) {
                this.rz("HeaderTextStyle", b, this.fj);
            }
        }
        get u8() {
            return this.ub;
        }
        set u8(a) {
            let b = this.ub;
            this.ub = a;
            if (b != this.ub) {
                this.rz("RowSeparatorBackground", b, this.ub);
            }
        }
        get u1() {
            return this.t4;
        }
        set u1(a) {
            let b = this.t4;
            this.t4 = a;
            if (b != this.t4) {
                this.rz("HeaderRowSeparatorBackground", b, this.t4);
            }
        }
        get vb() {
            return this.ue;
        }
        set vb(a) {
            let b = this.ue;
            this.ue = a;
            if (b != this.ue) {
                this.rz("RowSeparatorStickyRowBackground", b, this.ue);
            }
        }
        get u9() {
            return this.uc;
        }
        set u9(a) {
            let b = this.uc;
            this.uc = a;
            if (b != this.uc) {
                this.rz("RowSeparatorLastStickyRowBackground", b, this.uc);
            }
        }
        get va() {
            return this.ud;
        }
        set va(a) {
            let b = this.ud;
            this.ud = a;
            if (b != this.ud) {
                this.rz("RowSeparatorPinnedRowBackground", b, this.ud);
            }
        }
        get kp() {
            return this.j1;
        }
        set kp(a) {
            let b = this.j1;
            this.j1 = a;
            if (b != this.j1) {
                this.rz("ColumnResizingSeparatorWidth", b, this.j1);
            }
        }
        get kn() {
            return this.j0;
        }
        set kn(a) {
            let b = this.j0;
            this.j0 = a;
            if (b != this.j0) {
                this.rz("ColumnMovingSeparatorWidth", b, this.j0);
            }
        }
        get ux() {
            return this.t0;
        }
        set ux(a) {
            let b = this.t0;
            this.t0 = a;
            if (b != this.t0) {
                this.rz("ColumnResizingSeparatorBackground", b, this.t0);
            }
        }
        get uv() {
            return this.ty;
        }
        set uv(a) {
            let b = this.ty;
            this.ty = a;
            if (b != this.ty) {
                this.rz("ColumnMovingSeparatorBackground", b, this.ty);
            }
        }
        get iv() {
            return this.gu;
        }
        set iv(a) {
            let b = this.gu;
            this.gu = a;
            if (b != this.gu) {
                this.rz("ShiftSectionContent", b, this.gu);
            }
        }
        get bk() {
            return this.bj;
        }
        set bk(a) {
            let b = this.bj;
            this.bj = a;
            if (b != this.bj) {
                this.rz("ColumnOptionsIconAlignment", enumGetBox(ColumnOptionsIconAlignment_$type, b), enumGetBox(ColumnOptionsIconAlignment_$type, this.bj));
            }
        }
        get uw() {
            return this.tz;
        }
        set uw(a) {
            let b = this.tz;
            this.tz = a;
            if (b != this.tz) {
                this.rz("ColumnOptionsIconColor", b, this.tz);
            }
        }
        get bm() {
            return this.bl;
        }
        set bm(a) {
            let b = this.bl;
            this.bl = a;
            if (b != this.bl) {
                this.rz("ColumnOptionsIconBehavior", enumGetBox(ColumnOptionsIconBehavior_$type, b), enumGetBox(ColumnOptionsIconBehavior_$type, this.bl));
            }
        }
        get border() {
            return this.tu;
        }
        set border(a) {
            let b = this.tu;
            this.tu = a;
            if (b != this.tu) {
                this.rz("Border", b, this.tu);
            }
        }
        get vz() {
            return this.vt;
        }
        set vz(a) {
            let b = this.vt;
            this.vt = a;
            if (b != this.vt) {
                this.rz("DefaultBorderWidth", b, this.vt);
            }
        }
        get vw() {
            return this.vr;
        }
        set vw(a) {
            let b = this.vr;
            this.vr = a;
            if (b != this.vr) {
                this.rz("ActualBorderWidth", b, this.vr);
            }
        }
        get vx() {
            return this.vs;
        }
        set vx(a) {
            let b = this.vs;
            this.vs = a;
            if (b != this.vs) {
                this.rz("BorderWidth", b, this.vs);
            }
        }
        get h7() {
            return this.go;
        }
        set h7(a) {
            let b = this.go;
            this.go = a;
            if (b != this.go) {
                this.rz("NotifyOnAllSelectionChanges", b, this.go);
            }
        }
        get tt() {
            return this.tp;
        }
        set tt(a) {
            let b = this.tp;
            this.tp = a;
            if (b != this.tp) {
                this.rz("DefaultCornerRadius", b, this.tp);
            }
        }
        get ts() {
            return this.to;
        }
        set ts(a) {
            let b = this.to;
            this.to = a;
            if (b != this.to) {
                this.rz("CornerRadius", b, this.to);
            }
        }
        get tq() {
            return this.tn;
        }
        set tq(a) {
            let b = this.tn;
            this.tn = a;
            if (b != this.tn) {
                this.rz("ActualCornerRadius", b, this.tn);
            }
        }
        get he() {
            return this.ga;
        }
        set he(a) {
            let b = this.ga;
            this.ga = a;
            if (this.ga != b) {
                this.rz("IsActiveCellStyleEnabled", b, this.ga);
            }
        }
        get platformPixelConverter() {
            return this.fx;
        }
        set platformPixelConverter(a) {
            this.fx = a;
        }
        get renderingEngine() {
            return this.d6;
        }
        set renderingEngine(a) {
            this.d6 = a;
            this.r1(this.d6);
        }
        r1(a) {
            if (a != null) {
                a.refresh(this.model, false);
            }
        }
        get en() {
            return this.em;
        }
        get model() {
            return this.fd;
        }
        set model(a) {
            this.fd = a;
        }
        get vp() {
            return new Rect(0, this.fd.b3, this.fd.b8, this.fd.b9, this.fd.by);
        }
        get b4() {
            return this.b3;
        }
        get a7() {
            return this.a6;
        }
        get v() {
            return this.u;
        }
        get b7() {
            return this.b6;
        }
        get t() {
            return this.s;
        }
        set t(a) {
            let b = this.s;
            this.s = a;
            this.gw = true;
            if (b != this.s) {
                this.rz("SummaryScope", enumGetBox(DataSourceSummaryScope_$type, b), enumGetBox(DataSourceSummaryScope_$type, this.s));
            }
        }
        get hs() {
            return this.gd;
        }
        set hs(a) {
            let b = this.gd;
            this.gd = a;
            this.ge = true;
            if (b != this.gd) {
                this.rz("IsGroupCollapsable", b, this.gd);
            }
        }
        get r() {
            return this.q;
        }
        set r(a) {
            let b = this.q;
            this.q = a;
            this.f5 = true;
            if (b != this.q) {
                this.rz("GroupHeaderDisplayMode", enumGetBox(DataSourceSectionHeaderDisplayMode_$type, b), enumGetBox(DataSourceSectionHeaderDisplayMode_$type, this.q));
            }
        }
        get ht() {
            return this.gf;
        }
        set ht(a) {
            let b = this.gf;
            this.gf = a;
            this.gg = true;
            if (b != this.gf) {
                this.rz("IsGroupExpandedDefault", b, this.gf);
            }
        }
        get dy() {
            return this.dx;
        }
        set dy(a) {
            let b = this.dx;
            this.dx = a;
            this.f6 = true;
            if (b != this.dx) {
                this.rz("GroupSummaryDisplayMode", enumGetBox(GroupSummaryDisplayMode_$type, b), enumGetBox(GroupSummaryDisplayMode_$type, this.dx));
            }
        }
        get g2() {
            return this.f3;
        }
        set g2(a) {
            this.f3 = a;
        }
        rz(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            this.sg(a, b, c);
        }
        su() {
        }
        sl() {
            if (this.i5 == 0) {
                return;
            }
            let a = this.model.absoluteWidth;
            let b = this.model.absoluteHeight;
            this.ip = true;
            this.e6.r(this, this.model, truncate(this.jm));
            if (a != this.model.absoluteWidth || b != this.model.absoluteHeight) {
                this.externalGrid.onContentSizeChanged();
            }
            this.ip = false;
            this.fc.v();
            this.renderingEngine.invalidateVisibility(() => this.fc.l(this));
            this.renderingEngine.refresh(this.model, false);
        }
        sm() {
            if (this.f9) {
                this.p5();
            }
            else {
                this.renderingEngine.invalidateVisibility(() => this.fc.l(this));
                this.renderingEngine.refresh(this.model, true);
            }
        }
        p5() {
            if (this.f9) {
                this.f9 = false;
                this.sl();
                this.qe();
            }
        }
        get ip() {
            return this.gt;
        }
        set ip(a) {
            this.gt = a;
        }
        sk() {
            if (this.gt) {
                return;
            }
            this.renderingEngine.invalidateVisibility(() => this.fc.l(this));
            this.renderingEngine.refresh(this.model, false);
        }
        p4() {
            if (this.actualDataSource != null) {
                this.actualDataSource.flushAutoRefresh();
            }
            this.c9.an(true);
            this.renderingEngine.refresh(this.model, true);
        }
        get actualDataSource() {
            return this.w;
        }
        set actualDataSource(a) {
            let b = this.w;
            this.w = a;
            if (this.w != b) {
                this.rz("ActualDataSource", b, this.w);
            }
        }
        get l() {
            return this.d;
        }
        set l(a) {
            let b = this.d;
            this.d = a;
            if (this.d != b) {
                this.rz("PrimaryKey", b, this.d);
            }
        }
        get e() {
            return this.a;
        }
        set e(a) {
            let b = this.a;
            this.a = a;
            if (this.a != b) {
                this.rz("ActualPrimaryKey", b, this.a);
            }
        }
        get g1() {
            return this.f2;
        }
        set g1(a) {
            this.f2 = a;
        }
        sg(a, b, c) {
            if (a == "ItemsSource") {
                if (this.w != null) {
                    let d = this.w;
                    d.schemaChanged = delegateRemove(d.schemaChanged, runOn(this, this.pz));
                    if (this.y != null) {
                        let e = this.y;
                        e.dataCommitted = delegateRemove(e.dataCommitted, runOn(this, this.py));
                    }
                    this.w.updateNotifier = null;
                    this.b4.b = null;
                    this.a7.b = null;
                    this.v.syncTarget = null;
                    this.b7.b = null;
                    this.e = this.m();
                }
                if (typeCast(IDataSource_$type, this.itemsSource) !== null) {
                    this.actualDataSource = this.itemsSource;
                }
                else {
                    let f = this.externalGrid.createLocalDataSource(this.itemsSource);
                    this.actualDataSource = f;
                }
                if (this.w != null) {
                    this.y = typeCast(IEditableDataSource_$type, this.actualDataSource);
                    let g = this.w;
                    g.schemaChanged = delegateCombine(g.schemaChanged, runOn(this, this.pz));
                    if (this.y != null) {
                        let h = this.y;
                        h.dataCommitted = delegateCombine(h.dataCommitted, runOn(this, this.py));
                    }
                    this.w.updateNotifier = new DataSourceNotificationBridge(this);
                    if (this.w.isVirtual) {
                        this.model.bl = this.hy;
                    }
                    if (this.io) {
                        this.b4.b = this.w.sortDescriptions;
                    }
                    if (this.im) {
                        this.a7.b = this.w.groupDescriptions;
                    }
                    if (this.il) {
                        this.v.syncTarget = this.w.filterExpressions;
                    }
                    this.b7.b = this.w.summaryDescriptions;
                    this.w.propertiesRequested = this.n();
                    if (this.l != null) {
                        this.actualDataSource.primaryKey = this.l;
                    }
                    this.e = this.m();
                    if (this.w.actualSchema != null) {
                        this.delayedExecutionManager.executeIn(() => this.rl(), 0);
                        this.d8.setDataSource(this.w);
                    }
                    this.hd = true;
                    this.hc = true;
                    this.gy = true;
                    this.gx = true;
                    this.te(this.ad, this.ah);
                    this.te(this.ac, this.ag);
                    this.e0.av();
                    this.hd = false;
                    this.hc = false;
                    this.gy = false;
                    this.gx = false;
                    for (let i = 0; i < this.ag.ae.count; ++i) {
                        this.d9.pinRow(this.ag.ae._inner[i]);
                    }
                    if (this.ge) {
                        this.actualDataSource.isSectionCollapsable = this.hs;
                    }
                    if (this.f5) {
                        this.actualDataSource.sectionHeaderDisplayMode = this.r;
                    }
                    if (this.gw) {
                        this.actualDataSource.summaryScope = this.t;
                    }
                    if (this.gg) {
                        this.actualDataSource.isSectionExpandedDefault = this.ht;
                    }
                    if (this.f6) {
                        switch (this.dy) {
                            case 1:
                            case 0:
                            case 4:
                                this.actualDataSource.includeSummaryRowsInSection = false;
                                break;
                            case 2:
                                this.actualDataSource.includeSummaryRowsInSection = true;
                                this.actualDataSource.isSectionSummaryRowsAtBottom = false;
                                break;
                            case 3:
                                this.actualDataSource.includeSummaryRowsInSection = true;
                                this.actualDataSource.isSectionSummaryRowsAtBottom = true;
                                break;
                        }
                    }
                    this.tg();
                }
            }
            if (a == "AutoGenerateColumns") {
                this.a2.p = this.g3;
            }
            if (a == "AutoGenerateDesiredColumns") {
                this.a2.b = this.f;
            }
            if (a == "IsPlaceholderRenderingEnabled") {
                if (this.w != null && this.w.isVirtual) {
                    this.model.bl = this.hy;
                }
            }
            if (a == "ColumnResizingMode") {
                this.hw = this.ir();
            }
            if (a == "ActivationMode") {
                this.hh = this.iq();
            }
            if (a == "SelectionMode") {
                this.hh = this.iq();
                switch (this.dt) {
                    case 1:
                        if (this.dj.count > 0) {
                            this.dj.clear();
                        }
                        if (this.dm.count > 0) {
                            this.dm.clear();
                        }
                        if (this.ah.count > 1) {
                            let j = this.ah._inner[this.ah.count - 1];
                            this.ah.clear();
                            this.ah.add(j);
                        }
                        break;
                    case 2:
                        if (this.dj.count > 0) {
                            this.dj.clear();
                        }
                        if (this.dm.count > 0) {
                            this.dm.clear();
                        }
                        break;
                    case 3:
                        if (this.ah.count > 0) {
                            this.ah.clear();
                        }
                        if (this.dj.count > 0) {
                            this.dj.clear();
                        }
                        if (this.dm.count > 1) {
                            let k = this.dm._inner[this.dm.count - 1];
                            this.dm.clear();
                            this.dm.add(k);
                        }
                        break;
                    case 4:
                        if (this.ah.count > 0) {
                            this.ah.clear();
                        }
                        if (this.dj.count > 0) {
                            this.dj.clear();
                        }
                        break;
                    case 5:
                        if (this.dm.count > 0) {
                            this.dm.clear();
                        }
                        if (this.ah.count > 0) {
                            this.ah.clear();
                        }
                        break;
                    case 0:
                        if (this.ah.count > 0) {
                            this.ah.clear();
                        }
                        if (this.dm.count > 0) {
                            this.dm.clear();
                        }
                        if (this.dj.count > 0) {
                            this.dj.clear();
                        }
                        break;
                }
            }
            if (a == "RowSeparator") {
                let l = b;
                let m = c;
                if (l != null) {
                    l.definitionPropertyUpdated = delegateRemove(l.definitionPropertyUpdated, runOn(this, this.sx));
                    l.grid = null;
                }
                if (m != null) {
                    m.definitionPropertyUpdated = delegateCombine(m.definitionPropertyUpdated, runOn(this, this.sx));
                    m.grid = this;
                }
                if (this.is()) {
                    if (!l.d0.equals(m.d0)) {
                        this.ck.r(this, null, "Background", 2, l.d0, m.d0, false, true, false, false);
                    }
                    if (!l.d3.equals(m.d3)) {
                        this.ck.r(this, null, "LastStickyRowBackground", 2, l.d3, m.d3, false, true, false, false);
                    }
                    if (!l.d5.equals(m.d5)) {
                        this.ck.r(this, null, "StickyRowBackground", 2, l.d5, m.d5, false, true, false, false);
                    }
                    if (!l.d4.equals(m.d4)) {
                        this.ck.r(this, null, "PinnedRowBackground", 2, l.d4, m.d4, false, true, false, false);
                    }
                }
            }
            if (a == "HeaderRowSeparator") {
                let n = b;
                let o = c;
                if (n != null) {
                    n.definitionPropertyUpdated = delegateRemove(n.definitionPropertyUpdated, runOn(this, this.p7));
                    n.grid = null;
                }
                if (o != null) {
                    o.definitionPropertyUpdated = delegateCombine(o.definitionPropertyUpdated, runOn(this, this.p7));
                    o.grid = this;
                }
            }
            if (a == "HeaderSeparator") {
                let p = b;
                let q = c;
                if (p != null) {
                    p.definitionPropertyUpdated = delegateRemove(p.definitionPropertyUpdated, runOn(this, this.p8));
                    p.grid = null;
                }
                if (q != null) {
                    q.definitionPropertyUpdated = delegateCombine(q.definitionPropertyUpdated, runOn(this, this.p8));
                    q.grid = this;
                }
            }
            if (a == "ColumnResizingSeparator") {
                let r = b;
                let s = c;
                if (r != null) {
                    r.grid = null;
                }
                if (s != null) {
                    s.grid = this;
                }
            }
            if (a == "ColumnMovingSeparator") {
                let t = b;
                let u = c;
                if (t != null) {
                    t.grid = null;
                }
                if (u != null) {
                    u.grid = this;
                }
            }
            if (a == "DataSourceDesiredProperties") {
                if (this.w != null) {
                    this.w.propertiesRequested = this.g;
                }
            }
            if (a == "PrimaryKey") {
                if (this.actualDataSource != null && this.l != null) {
                    this.actualDataSource.primaryKey = c;
                }
                this.e = this.m();
            }
            if (a == "ActualRowHeight" || a == "ActualHeaderHeight" || a == "RowSeparatorHeight" || a == "IsGroupRowSticky" || a == "IsHeaderSeparatorVisible" || a == "ShiftSectionContent" || a == "PinnedAreaSeparatorWidth") {
                this.hw = this.ir();
                if (this.is()) {
                    this.sl();
                }
            }
            if (a == "DefaultColumnWidth" || a == "DefaultColumnMinWidth" || a == "Inset" || a == "HeaderSeparatorWidth") {
                if (this.model != null && this.model.br != null && this.model.br.count > 0) {
                    this.sl();
                }
            }
            if (a == "SectionHeader") {
                if (b != null) {
                    let v = typeCast(SectionHeader.$, b);
                    v.sectionHeaderPropertyUpdating = delegateRemove(v.sectionHeaderPropertyUpdating, runOn(this, this.r7));
                    v.grid = null;
                }
                if (this.ey != null) {
                    let w = this.ey;
                    w.sectionHeaderPropertyUpdating = delegateCombine(w.sectionHeaderPropertyUpdating, runOn(this, this.r7));
                    this.ey.grid = this;
                }
                this.model.bn = true;
                this.sl();
            }
            if (a == "PinnedAreaSeparator") {
                if (b != null) {
                    let x = typeCast(PinnedAreaSeparator.$, b);
                    x.grid = null;
                }
                if (this.ei != null) {
                    this.ei.grid = this;
                }
                this.sl();
            }
            if (a == "ActiveCell") {
                this.cv = typeCast(GridCellPosition.$, b);
                this.gz = true;
                if (this.cw != null && this.cw.b >= 0) {
                    this.aj.y(this.cw.b, this.cw.d);
                }
                else {
                    this.aj.aa();
                }
                this.gz = false;
            }
            if (a == "ReactsToSortChanges") {
                let y = c;
                if (!y) {
                    this.b4.b = null;
                }
                else {
                    if (this.w != null) {
                        this.b4.b = this.w.sortDescriptions;
                    }
                }
            }
            if (a == "ReactsToGroupChanges") {
                let z = c;
                if (!z) {
                    this.a7.b = null;
                }
                else {
                    if (this.w != null) {
                        this.a7.b = this.w.groupDescriptions;
                    }
                }
            }
            if (a == "ReactsToFilterChanges") {
                let aa = c;
                if (!aa) {
                    this.v.syncTarget = null;
                }
                else {
                    if (this.w != null) {
                        this.v.syncTarget = this.w.filterExpressions;
                    }
                }
            }
            if (a == "IsGroupCollapsable") {
                if (this.actualDataSource != null) {
                    this.actualDataSource.isSectionCollapsable = c;
                }
            }
            if (a == "GroupHeaderDisplayMode") {
                if (this.actualDataSource != null) {
                    this.actualDataSource.sectionHeaderDisplayMode = EnumUtil.getEnumValue(DataSourceSectionHeaderDisplayMode_$type, c);
                }
            }
            if (a == "SummaryScope") {
                if (this.actualDataSource != null) {
                    this.actualDataSource.summaryScope = EnumUtil.getEnumValue(DataSourceSummaryScope_$type, c);
                }
            }
            if (a == "IsGroupExpandedDefault") {
                if (this.actualDataSource != null) {
                    this.actualDataSource.isSectionExpandedDefault = c;
                }
            }
            if (a == "GroupSummaryDisplayMode") {
                this.ey.en = this.dy;
                this.model.bn = true;
                if (this.actualDataSource != null) {
                    switch (this.dy) {
                        case 1:
                        case 0:
                        case 4:
                            this.actualDataSource.includeSummaryRowsInSection = false;
                            break;
                        case 2:
                            this.actualDataSource.includeSummaryRowsInSection = true;
                            this.actualDataSource.isSectionSummaryRowsAtBottom = false;
                            break;
                        case 3:
                            this.actualDataSource.includeSummaryRowsInSection = true;
                            this.actualDataSource.isSectionSummaryRowsAtBottom = true;
                            break;
                    }
                }
                this.sl();
            }
            if (a == "Density" || a == "RowHeight") {
                this.rm();
            }
            if (a == "HeaderHeight") {
                this.rm();
                this.externalGrid.setScrollerVerticalTrackInset(this.kk);
            }
            if (a == "DefaultBorderWidth" || a == "BorderWidth") {
                this.vw = this.vy(this.vx, this.vz);
            }
            if (a == "DefaultCornerRadius" || a == "CornerRadius") {
                this.tq = this.tr(this.ts, this.tt);
            }
            if (a == "Border" || a == "ActualCornerRadius" || a == "ActualBorderWidth") {
                this.externalGrid.setBorder(this.border, this.vw.c, this.vw.e, this.vw.d, this.vw.b, this.tq.c, this.tq.d, this.tq.a, this.tq.b);
            }
            if (a == "EditMode") {
                this.tg();
            }
        }
        tg() {
            if (this.y != null) {
                if (this.cf == 2 || this.cf == 3) {
                    this.y.isBatchingEnabled = true;
                }
                else {
                    this.y.isBatchingEnabled = false;
                }
            }
        }
        tr(a, b) {
            return new CornerRadius(1, !isNaN_(a.c) ? a.c : b.c, !isNaN_(a.d) ? a.d : b.d, !isNaN_(a.b) ? a.b : b.b, !isNaN_(a.a) ? a.a : b.a);
        }
        vy(a, b) {
            return new Thickness(1, !isNaN_(a.c) ? a.c : b.c, !isNaN_(a.e) ? a.e : b.e, !isNaN_(a.d) ? a.d : b.d, !isNaN_(a.b) ? a.b : b.b);
        }
        syncBorder() {
            if (this.externalGrid != null) {
                this.externalGrid.setBorder(this.border, this.vw.c, this.vw.e, this.vw.d, this.vw.b, this.tq.c, this.tq.d, this.tq.a, this.tq.b);
            }
        }
        rm() {
            if (this.le == -1) {
                switch (this.fg) {
                    case 0:
                    case 2:
                        this.kl = GridStyleRepository.p;
                        break;
                    case 3:
                        this.kl = GridStyleRepository.o;
                        break;
                    case 1:
                        this.kl = GridStyleRepository.n;
                        break;
                }
            }
            else {
                this.kl = this.le;
            }
            if (this.k6 == -1) {
                switch (this.fg) {
                    case 0:
                    case 2:
                        this.kk = GridStyleRepository.p;
                        break;
                    case 3:
                        this.kk = GridStyleRepository.o;
                        break;
                    case 1:
                        this.kk = GridStyleRepository.n;
                        break;
                }
            }
            else {
                this.kk = this.k6;
            }
        }
        m() {
            if (this.l != null) {
                return this.l;
            }
            if (this.actualDataSource != null) {
                return this.actualDataSource.actualPrimaryKey;
            }
            return null;
        }
        n() {
            if (!this.g3 && this.g == null && this.w.propertiesRequested == null && this.columns.count > 0) {
                return this.h();
            }
            if (this.g != null) {
                return this.g;
            }
            return this.w.propertiesRequested;
        }
        h() {
            let a = new Array(this.columns.count);
            for (let b = 0; b < this.columns.count; b++) {
                a[b] = this.columns._inner[b].hy;
            }
            return a;
        }
        sx(a, b) {
            this.sy(b.propertyName, b.animationType, b.oldValue, b.newValue, false);
        }
        p7(a, b) {
            this.sy(b.propertyName, b.animationType, b.oldValue, b.newValue, true);
        }
        p8(a, b) {
            this.p9(b.propertyName, b.animationType, b.oldValue, b.newValue);
        }
        sy(a, b, c, d, e) {
            if (b == 10) {
                return;
            }
            if (a != null && stringStartsWith(a, "Actual")) {
                a = a.substr(6);
            }
            this.ck.r(this, null, a, b, c, d, e, true, false, false);
        }
        p9(a, b, c, d) {
            if (b == 10) {
                return;
            }
            if (a != null && stringStartsWith(a, "Actual")) {
                a = a.substr(6);
            }
            for (let e = 0; e < this.model.br.count; e++) {
                let f = this.model.br._inner[e];
                this.ck.r(this, f, a, b, c, d, true, false, false, true);
            }
        }
        pz(a, b) {
            this.rl();
        }
        py(a, b) {
            if (this.dataCommitted != null) {
                this.dataCommitted(this, new GridDataCommittedEventArgs(b.commitID, b.changes));
            }
        }
        rl() {
            this.d8.setDataSource(this.w);
            this.a2.d = this.w.actualSchema;
            this.th();
            for (let a = 0; a < this.a7.i.count; a++) {
                this.sv(this.a7.i.item(a));
            }
            for (let b = 0; b < this.b7.i.count; b++) {
                this.sw(this.b7.i.item(b));
            }
            this.sl();
            this.qe();
        }
        qk() {
            if (this.columnsAutoGenerated != null) {
                let a = new GridColumnsAutoGeneratedEventArgs();
                a.columns = this.actualColumns;
                this.columnsAutoGenerated(this, a);
            }
            for (let b of fromEnum(this.actualColumns)) {
                b.gf = false;
            }
        }
        onSizeChanged(a, b) {
            this.jm = a;
            this.jl = b;
            this.ek.y(a, b);
            this.sl();
            if (this.sizeChanged != null) {
                this.sizeChanged(this, ((() => {
                    let $ret = new GridSizeChangedEventArgs();
                    $ret.b = a;
                    $ret.a = b;
                    return $ret;
                })()));
            }
        }
        notifyScrollStart() {
            this.i0 = true;
        }
        notifyScrollStop() {
            this.i0 = false;
            if (this.hb) {
                this.d5.f(this.lb);
                this.hb = false;
            }
        }
        setViewport(a, b, c, d) {
            this.j7 = -1;
            this.j8 = -1;
            let e = c - a;
            let f = new Rect(0, a, b, c - a, d - b);
            if (f.x != this.model.actualVisibleRegion.x || f.y != this.model.actualVisibleRegion.y || f.width != this.model.actualVisibleRegion.width || f.height != this.model.actualVisibleRegion.height) {
                let g = this.model.actualVisibleRegion;
                this.model.actualVisibleRegion = f;
                this.sm();
                if (this.viewportChanged != null) {
                    this.viewportChanged(this, ((() => {
                        let $ret = new GridViewportChangedEventArgs();
                        $ret.g = f.x;
                        $ret.d = g.x;
                        $ret.h = f.y;
                        $ret.e = g.y;
                        $ret.f = f.width;
                        $ret.c = g.width;
                        $ret.a = f.height;
                        $ret.b = g.height;
                        return $ret;
                    })()));
                }
            }
        }
        get actualColumns() {
            return this.a1.j;
        }
        get columns() {
            return this.c0;
        }
        rx(a, b, c) {
            let d = this.ca(a.k);
            d.cw(a, this, b, c);
            d.cx(a, this, b, c);
        }
        rw(a, b, c, d) {
            a.i0 = d;
            let e = this.ca(a.k);
            e.cx(a, this, b, c);
        }
        a0(a) {
            return this.a2.h(a);
        }
        qa(a) {
            a.f7 = true;
            a.gd = true;
        }
        p2(a, b) {
            let c = this.columns.indexOf(b);
            if (c == -1) {
                return;
            }
            if ((a != null && a.gc) || (b != null && b.gc)) {
                throw new InvalidOperationException(1, "Cannot exchange a column created from markup");
            }
            if (this.columns.contains(a)) {
                if (a.gd) {
                    this.externalGrid.removeExternalColumn(a.externalObject);
                }
                else {
                    return;
                }
            }
            let d = this.a4;
            if (d == 0) {
                d = a.et();
            }
            let e = false;
            if (d == 2 || d == 7) {
                e = true;
            }
            a.e8 = 3;
            if (e) {
                this.externalGrid.insertExternalColumnAtIndex(c + 1, a.externalObject);
            }
            else {
                this.externalGrid.insertExternalColumnAtIndex(c, a.externalObject);
            }
            b.fk = a.fk;
            if (!this.hk(a)) {
                a.gd = false;
                a.e8 = 5;
                this.externalGrid.removeExternalColumn(b.externalObject);
                this.q8(a);
            }
            this.sl();
            if (this.hk(a)) {
                let f = this.model.g(b.g2).a;
                b.e8 = 2;
                a.e8 = 1;
                this.ck.ai(this, this.cz, this.model.g(b.g2), this.model.g(a.g2), f);
            }
        }
        pk(a, b) {
            this.e0.w();
            this.aj.ad();
            this.e0.au();
            if (this.iy) {
                return;
            }
            switch (b.action) {
                case 0:
                    if (b.newItems != null) {
                        for (let c = 0; c < b.newItems.count; c++) {
                            this.rb(c + b.newStartingIndex, b.newItems.item(c));
                        }
                    }
                    break;
                case 1:
                    if (b.oldItems != null) {
                        for (let d = 0; d < b.oldItems.count; d++) {
                            this.rf(b.oldStartingIndex, b.oldItems.item(d));
                        }
                    }
                    break;
                case 2:
                    if (b.oldItems != null) {
                        for (let e = 0; e < b.oldItems.count; e++) {
                            this.rf(b.oldStartingIndex, b.oldItems.item(e));
                        }
                    }
                    if (b.newItems != null) {
                        for (let f = 0; f < b.newItems.count; f++) {
                            this.rb(f + b.newStartingIndex, b.newItems.item(f));
                        }
                    }
                    break;
                case 4:
                    this.ri();
                    break;
            }
            this.sl();
            if (!this.gn) {
                this.gn = true;
                this.delayedExecutionManager.executeIn(() => {
                    this.gn = false;
                    if (this.actualColumnsChanged != null) {
                        this.actualColumnsChanged(this, ((() => {
                            let $ret = new GridColumnsChangedEventArgs();
                            $ret.columns = this.actualColumns;
                            return $ret;
                        })()));
                    }
                }, 0);
            }
        }
        ri() {
            this.e6.w(this.de, this.model);
        }
        rf(a, b) {
            b.grid = null;
            b.propertyChanged = delegateRemove(b.propertyChanged, runOn(this, this.ps));
            b.columnCellsPropertyUpdating = delegateRemove(b.columnCellsPropertyUpdating, runOn(this, this.pt));
            b.columnHeaderCellsPropertyUpdating = delegateRemove(b.columnHeaderCellsPropertyUpdating, runOn(this, this.pw));
            this.e6.v(this.de, a, b, this.model);
            this.sl();
            b.e8 = 0;
            this.e0.ac(a, b);
        }
        rb(a, b) {
            b.grid = this;
            b.propertyChanged = delegateCombine(b.propertyChanged, runOn(this, this.ps));
            b.columnCellsPropertyUpdating = delegateCombine(b.columnCellsPropertyUpdating, runOn(this, this.pt));
            b.columnHeaderCellsPropertyUpdating = delegateCombine(b.columnHeaderCellsPropertyUpdating, runOn(this, this.pw));
            this.e6.t(a, b, this.model);
            if (b.gd) {
                b.e8 = 3;
            }
            if (this.hi(b) && !b.gd && b.e8 != 3) {
                let c = b.e8;
                b.e8 = 1;
                this.sl();
                this.ck.aq(this, this.cz, this.model.g(b.g2), true, c);
            }
            else {
                this.sl();
            }
            for (let d = 0; d < this.b4.i.count; d++) {
                if (b.hy == this.b4.i.item(d).f) {
                    b.e6 = this.b5(this.b4.i.item(d).c);
                    break;
                }
            }
            this.e0.aa(a, b);
        }
        pt(a, b, c, d, e) {
            if (b == "Pinned") {
                this.ha(false);
            }
            if (b == "Width" || b == "MinWidth" || b == "Pinned") {
                this.sl();
                this.pr();
                if (b == "Width") {
                    this.rj(a, d);
                }
                return;
            }
            if (c == 10) {
                return;
            }
            let f = this.model.g(a.g2);
            if (f == null) {
                return;
            }
            if (b != null && stringStartsWith(b, "Actual")) {
                b = b.substr(6);
            }
            if (b == "HeaderText") {
                this.pw(a, "TextValue", c, d, e);
                return;
            }
            if (b == "ColumnOptionsIconAlignment" || b == "ColumnOptionsIconColor" || b == "ColumnOptionsIconBehavior" || b == "IsColumnOptionsEnabled") {
                this.pw(a, b, c, d, e);
                return;
            }
            if (b == "FormatString") {
                if (typeCast(NumericColumn.$, a) !== null || typeCast(DateTimeColumn.$, a) !== null) {
                    b = "FormatStringOverride";
                }
            }
            if (b == "SortDirection" && false == this.hx) {
                this.e4.f(a, a.e6);
            }
            this.ck.r(this, f, b, c, d, e, false, false, false, false);
        }
        r7(a, b, c, d, e) {
            if (c == 10) {
                return;
            }
            if (b != null && stringStartsWith(b, "Actual")) {
                b = b.substr(6);
            }
            this.ck.r(this, null, b, c, d, e, false, false, true, false);
        }
        pw(a, b, c, d, e) {
            if (c == 10) {
                return;
            }
            let f = this.model.g(a.g2);
            if (f == null) {
                return;
            }
            if (b != null && stringStartsWith(b, "Actual")) {
                b = b.substr(6);
            }
            this.ck.r(this, f, b, c, d, e, true, false, false, false);
        }
        sd(a, b) {
            let c = b;
            if (c == null) {
                b = 0;
            }
            if ((typeof c == "number")) {
                let d = typeGetValue(c);
                if ((EnumUtil.getName(PinnedPositions_$type, d) == undefined)) {
                    b = 0;
                }
                b = d;
            }
            else {
                b = (typeGetValue(EnumUtil.parse(PinnedPositions_$type, c, true)));
            }
            let e = this.columns.indexOf(a);
            if (e == -1) {
                return;
            }
            if (a.fk == b) {
                return;
            }
            this.ha(false);
            a.gv = this.e6.k(e, this, this.model);
            a.gw = this.model.br._inner[e].n;
            a.fj = a.fk;
            a.fk = b;
            this.e6.s(this.model);
            let f = a.e8;
            if (this.hm(a)) {
                a.e8 = 6;
                this.ck.ak(this, this.cz, this.model.g(a.g2), f);
            }
        }
        qf(a, b) {
            this.externalGrid.ensureColumnsAreManual();
            let c = this.columns._inner[a];
            b = Math.min(this.columns.count - 1, Math.max(0, b));
            this.iy = true;
            if (c != null && c.gc) {
                throw new InvalidOperationException(1, "Can't move a column that was created from markup");
            }
            if (b > a) {
                let d = this.columns._inner[b - 1];
                if (d.gc) {
                    throw new InvalidOperationException(1, "Can't move a column to before columns created from markup");
                }
            }
            else {
                let e = this.columns._inner[b];
                if (e.gc) {
                    throw new InvalidOperationException(1, "Can't move a column to before columns created from markup");
                }
            }
            this.externalGrid.removeExternalColumn(c.externalObject);
            this.externalGrid.insertExternalColumnAtIndex(b, c.externalObject);
            this.iy = false;
            this.ha(false);
            this.rc(a, b, c);
            if (this.actualColumnsChanged != null) {
                this.actualColumnsChanged(this, ((() => {
                    let $ret = new GridColumnsChangedEventArgs();
                    $ret.columns = this.actualColumns;
                    return $ret;
                })()));
            }
        }
        qg(a) {
            this.h6(a, true, true);
        }
        qh(a) {
            this.h6(a, false, true);
        }
        g6(a) {
            return this.h6(a, true, false);
        }
        g7(a) {
            return this.h6(a, false, false);
        }
        h6(a, b, c) {
            let d = this.actualColumns;
            let e = d.count - 1;
            let f = d._inner[a];
            let g = f.fk;
            let h = -1;
            let i = a;
            do {
                i += b ? -1 : 1;
                if (i < 0 || i > e) {
                    break;
                }
                let j = d._inner[i];
                if (!j.gd && j.fk == g) {
                    h = i;
                }
            } while (h == -1);
            if (h != -1) {
                if (c) {
                    this.qf(a, h);
                }
                return true;
            }
            switch (f.fk) {
                case 0:
                    let k = this.ay(b);
                    if (null == k) {
                        return false;
                    }
                    if (c) {
                        h = d.indexOf(k);
                        this.qf(a, h + (b ? 1 : -1));
                        f.fk = k.fk;
                    }
                    break;
                case 1:
                    if (b) {
                        return false;
                    }
                    if (c) {
                        let l = this.ax(true);
                        if (l == null) {
                            this.sd(d._inner[a], 0);
                        }
                        else {
                            h = d.indexOf(l);
                            this.qf(a, h - 1);
                            f.fk = 0;
                        }
                    }
                    break;
                case 2:
                    if (!b) {
                        return false;
                    }
                    if (c) {
                        let m = this.ax(false);
                        if (m == null) {
                            this.sd(d._inner[a], 0);
                        }
                        else {
                            h = d.indexOf(m);
                            this.qf(a, h + 1);
                            f.fk = 0;
                        }
                    }
                    break;
            }
            return true;
        }
        ay(a) {
            let b = a ? 1 : 2;
            let c = this.actualColumns;
            let d = this.model.bx;
            let e = d.count - 1;
            let f = a ? 0 : e;
            let g = d._inner[f];
            let h = c._inner[g];
            let i = null;
            while (h.fk == b) {
                i = h;
                f += a ? 1 : -1;
                if (f < 0 || f > e) {
                    break;
                }
                g = d._inner[f];
                h = c._inner[g];
            }
            return i;
        }
        ax(a) {
            let b = this.actualColumns;
            let c = this.model.bx;
            let d = c.count - 1;
            let e = a ? 0 : d;
            let f = c._inner[e];
            let g = b._inner[f];
            while (g.fk != 0) {
                e += a ? 1 : -1;
                if (e < 0 || e > d) {
                    break;
                }
                f = c._inner[e];
                g = b._inner[f];
            }
            if (g.fk == 0) {
                return g;
            }
            else {
                return null;
            }
        }
        rc(a, b, c) {
            c.gv = this.e6.k(a, this, this.model);
            c.gu = a;
            c.gw = this.model.br._inner[a].n;
            let d = c.e8;
            this.e6.u(this.de, this.model, a, b, c.g2);
            if (!this.hm(c) && d != 3) {
                c.e8 = 5;
            }
            this.sl();
            if (this.hm(c)) {
                c.e8 = 6;
                this.ck.ak(this, this.cz, this.model.g(c.g2), d);
            }
            this.e0.ab(a, b, c);
        }
        ps(a, b) {
            let c = a;
            switch (b.propertyName) {
                case "Filter":
                    this.th();
                    break;
                case "IsHidden":
                    if (c.gd) {
                        if (this.hl(c)) {
                            let d = c.e8;
                            c.e8 = 2;
                            this.sl();
                            this.ck.aj(this, this.cz, this.model.g(c.g2), false, d);
                        }
                        else {
                            c.e8 = 3;
                            if (c.f4) {
                                this.externalGrid.ensureColumnsAreManual();
                                this.externalGrid.removeExternalColumn(c.externalObject);
                            }
                            this.sl();
                        }
                    }
                    else {
                        if (this.hq(c)) {
                            let e = c.e8;
                            c.e8 = 1;
                            this.sl();
                            this.ck.aq(this, this.cz, this.model.g(c.g2), false, e);
                        }
                        else {
                            c.e8 = 5;
                            this.ck.ah(this, this.model.g(c.g2));
                            this.c9.ab();
                            this.sl();
                        }
                    }
                    if (this.columnHiddenChanged != null) {
                        this.columnHiddenChanged(this, ((() => {
                            let $ret = new ColumnHiddenChangedEventArgs();
                            $ret.a = c;
                            $ret.b = c.gd;
                            return $ret;
                        })()));
                    }
                    break;
                case "Pinned":
                    if (this.columnPinnedChanged != null) {
                        this.columnPinnedChanged(this, ((() => {
                            let $ret = new ColumnPinnedChangedEventArgs();
                            $ret.a = c;
                            $ret.b = c.fk;
                            return $ret;
                        })()));
                    }
                    break;
            }
        }
        th() {
            if (this.actualDataSource == null) {
                return;
            }
            let a = this.z(null);
            if (a != null) {
                a.markAutoGenerated();
                let b = false;
                if (this.v != null) {
                    for (let c = 0; c < this.v.j.count; c++) {
                        if (this.v.j.item(c).isAutoGenerated) {
                            this.v.j.item(c, a);
                            b = true;
                            break;
                        }
                    }
                }
                if (!b) {
                    this.v.add(a);
                }
            }
            else {
                for (let d = this.v.j.count - 1; d >= 0; d--) {
                    if (this.v.j.item(d).isAutoGenerated) {
                        this.v.removeAt(d);
                    }
                }
            }
        }
        ca(a) {
            let b = this.d8.getRowType(a.w);
            if (b != 0 && b != 3) {
                if (a.as) {
                    if (a.g) {
                        return this.d2;
                    }
                    return this.eu;
                }
                switch (b) {
                    case 1: if (this.dy != 1) {
                        return this.ey;
                    }
                    else {
                        return this.a0(a);
                    }
                    case 2: return this.ew;
                    case 4: return this.e8;
                    case 5: return this.fa;
                    default: throw new NotSupportedException(0);
                }
            }
            else {
                if (a.as) {
                    if (a.g) {
                        return this.d2;
                    }
                    return this.eu;
                }
                else {
                    if (a.ap && this.dragger != null) {
                        if (this.dragger.dragType == 1) {
                            return this.bw;
                        }
                        else if (this.dragger.dragType == 2) {
                            return this.bi;
                        }
                    }
                    if (a.al || a.an || a.ak || a.am) {
                        return this.ei;
                    }
                    let c = this.a0(a);
                    if (a.g) {
                        if (a.h) {
                            return this.d4;
                        }
                        else {
                            return c.header;
                        }
                    }
                    else {
                        return c;
                    }
                }
            }
        }
        nc(a, b, c, d) {
            return this.ca(a).cl(a, b, c, d);
        }
        ao(a, b) {
            let c = this.ca(a);
            let d = c.k(a, b);
            d.o = this;
            return d;
        }
        lp() {
            return this.model.b();
        }
        nb() {
            let a = this.model.b();
            return a.av();
        }
        eq(a) {
            return this.d9.getRowPathForRow(a);
        }
        s2(a) {
            let b = truncate(this.model.actualVisibleRegion.left);
            if (this.j7 != -1) {
                b = this.j7;
            }
            let c = 0;
            let d = 0;
            if (a < 0) {
                a = 0;
            }
            if (a >= this.d9.getRowCount()) {
                a = this.d9.getRowCount() - 1;
            }
            let e = 0;
            for (let f of fromEnum(this.model.bv)) {
                if (d + f.m > a) {
                    e = truncate(Math.floor(a - d));
                    let g = f.e(e);
                    c = f.f(e);
                    c += truncate(Math.round(g * ((a - d) - e)));
                }
                else {
                    d += f.m;
                    continue;
                }
            }
            let h = this.fc.i(this, this.model, new Rect(0, b, c, this.model.b9, this.model.by));
            let i = -1;
            let j = -1;
            let k = false;
            for (let l = 0; l < h.count; l++) {
                if (h._inner[l].m == e) {
                    i = l;
                    j = h._inner[l].n;
                    break;
                }
                if (h._inner[l].m > e) {
                    i = l - 1;
                    break;
                }
                switch (h._inner[l].a) {
                    case 3:
                        k = true;
                        break;
                    case 1:
                        k = false;
                        break;
                }
            }
            if (i == -1) {
                i = h.count - 1;
            }
            let m = 0;
            for (let n = i; n >= 0; n--) {
                if (k) {
                    if (h._inner[n].n >= j) {
                        if (h._inner[n].a != 3) {
                            j = h._inner[n].n;
                            k = false;
                        }
                        m += h._inner[n].k + this.lg + this.lh;
                    }
                }
                else {
                    if (h._inner[n].n > j) {
                        if (h._inner[n].a != 3) {
                            j = h._inner[n].n;
                        }
                        m += h._inner[n].k + this.lg + this.lh;
                    }
                }
            }
            c -= truncate(m);
            c = Math.max(c, 0);
            if (this.model.absoluteHeight > 0 && this.model.actualVisibleRegion.height > 0 && c + this.model.actualVisibleRegion.height > this.model.absoluteHeight) {
                c = truncate(Math.round(this.model.absoluteHeight - this.model.actualVisibleRegion.height));
            }
            if (c < 0) {
                c = 0;
            }
            this.j8 = c;
            this.j7 = b;
            this.viewportManager.moveViewportTo(b, c);
        }
        s1(a) {
            let b = truncate(this.model.actualVisibleRegion.left);
            if (this.j7 != -1) {
                b = this.j7;
            }
            let c = 0;
            let d = 0;
            if (a < 0) {
                a = 0;
            }
            if (a >= this.d9.getRowCount()) {
                a = this.d9.getRowCount() - 1;
            }
            let e = 0;
            for (let f of fromEnum(this.model.bv)) {
                if (d + f.m > a) {
                    let g = truncate(Math.floor(a - d));
                    let h = f.e(g);
                    e = h;
                    c = f.i + f.f(g);
                    c += truncate(Math.round(h * ((a - d) - g)));
                }
                else {
                    d += f.m;
                    continue;
                }
            }
            c -= this.model.ci;
            c = Math.max(c, 0);
            if (this.model.absoluteHeight > 0 && this.model.actualVisibleRegion.height > 0) {
                c -= truncate(Math.round(this.model.actualVisibleRegion.height - this.model.cu - (e + this.model.ci)));
            }
            if (this.model.absoluteHeight > 0 && this.model.actualVisibleRegion.height > 0 && c + this.model.actualVisibleRegion.height > this.model.absoluteHeight) {
                c = truncate(Math.round(this.model.absoluteHeight - this.model.actualVisibleRegion.height));
            }
            if (c < 0) {
                c = 0;
            }
            this.j8 = c;
            this.j7 = b;
            this.viewportManager.moveViewportTo(b, c);
        }
        it(a) {
            let b = this.kr(a);
            if (b == -1) {
                return false;
            }
            this.s2(b);
            return true;
        }
        iu(a) {
            let b = this.ks(a);
            if (b == -1) {
                return false;
            }
            this.s2(b);
            return true;
        }
        sz(a) {
            let b = truncate(a);
            if (b < 0) {
                b = 0;
                a = 0;
            }
            if (a > this.model.br.count) {
                b = this.model.br.count - 1;
                a = this.model.br.count - 1;
            }
            let c = this.columns._inner[b];
            if (c.fk != 0) {
                return;
            }
            let d = this.e6.k(b, this, this.model);
            let e = truncate(this.model.actualVisibleRegion.top);
            if (this.j8 != -1) {
                e = this.j8;
            }
            let f = d + truncate((this.model.br._inner[b].k * (a - b)));
            f -= this.model.cf;
            if (this.model.absoluteWidth > 0 && this.model.actualVisibleRegion.width > 0 && f + this.model.actualVisibleRegion.width > this.model.absoluteWidth) {
                f = truncate(Math.round(this.model.absoluteWidth - this.model.actualVisibleRegion.width));
            }
            if (f < 0) {
                f = 0;
            }
            this.j8 = e;
            this.j7 = f;
            this.viewportManager.moveViewportTo(f, e);
        }
        s0(a) {
            let b = truncate(a);
            if (b < 0) {
                b = 0;
                a = 0;
            }
            if (a > this.model.br.count) {
                b = this.model.br.count - 1;
                a = this.model.br.count - 1;
            }
            let c = this.columns._inner[b];
            let d = this.e6.k(b, this, this.model);
            let e = truncate(this.model.actualVisibleRegion.top);
            if (this.j8 != -1) {
                e = this.j8;
            }
            let f = d + truncate((this.model.br._inner[b].k * (a - b)));
            let g = this.model.actualVisibleRegion.width - this.model.cg;
            if (this.model.absoluteWidth > 0 && g > 0) {
                f -= truncate(Math.round(g - this.model.br._inner[b].k));
            }
            if (this.model.absoluteWidth > 0 && this.model.actualVisibleRegion.width > 0 && f + this.model.actualVisibleRegion.width > this.model.absoluteWidth) {
                f = truncate(Math.round(this.model.absoluteWidth - this.model.actualVisibleRegion.width));
            }
            if (f < 0) {
                f = 0;
            }
            this.j8 = e;
            this.j7 = f;
            this.viewportManager.moveViewportTo(f, e);
        }
        iw(a) {
            return this.hi(a);
        }
        rk(a, b) {
            if (this.ch == 1 && this.cw != null) {
                if (this.cw.b >= a && this.cw.b <= b) {
                    if (this.activeCellChanged != null) {
                        let c = new GridActiveCellChangedEventArgs();
                        c.newActiveCell = this.cw;
                        c.oldActiveCell = this.cw;
                        this.activeCellChanged(this, c);
                    }
                }
            }
            let d = this.ky();
            let e = this.k2();
            if (b < d || a > e) {
                return;
            }
            if (a < d) {
                a = d;
            }
            if (b > e) {
                b = e;
            }
            if (!this.is()) {
                return;
            }
            this.ck.y(this, a, b, false);
            if (this.d9.getRowCount() != this.model.ck()) {
                this.sl();
            }
            else {
                this.sm();
            }
            this.pr();
        }
        pr() {
            if (this.model.actualVisibleRegion.isEmpty) {
                return;
            }
            if (this.model.actualVisibleRegion.bottom > this.model.absoluteHeight || this.model.actualVisibleRegion.top > this.model.absoluteHeight) {
                let a = this.d9.getRowCount() - 1;
                if (a < 0) {
                    a = 0;
                }
                this.s2(a);
            }
            if (this.model.actualVisibleRegion.right > this.model.absoluteWidth || this.model.actualVisibleRegion.left > this.model.absoluteWidth) {
                let b = this.a2.j.count - 1;
                if (b < 0) {
                    b = 0;
                }
                this.s0(b);
            }
        }
        ku(a) {
            return this.e6.i(this.model, a.k);
        }
        is() {
            return this.model.be != null && this.model.bf != null && this.model.bf.w >= 0 && this.model.be.w >= 0;
        }
        k2() {
            return this.e6.i(this.model, this.model.be);
        }
        ky() {
            return this.e6.i(this.model, this.model.bf);
        }
        kw() {
            let a = this.e6.b(this.model.actualVisibleRegion.top + this.model.cl + this.model.cm + this.model.cv, this.model);
            return this.e6.i(this.model, a);
        }
        k0() {
            let a = this.e6.b(this.model.actualVisibleRegion.bottom - this.model.cu, this.model);
            return this.e6.i(this.model, a);
        }
        sb() {
            let a = this.ky();
            let b = this.k2();
            this.d9.firstVisibleIndexRequested = a;
            this.d9.lastVisibleIndexRequested = b;
        }
        get h1() {
            return this.cellPreviewPointerDown != null;
        }
        get h2() {
            return this.cellPreviewPointerUp != null;
        }
        get hz() {
            return this.cellPointerDown != null;
        }
        get h0() {
            return this.cellPointerUp != null;
        }
        iq() {
            return this.dt != 0 || this.cellClicked != null || this.ch != 0 || this.bu != 2 || this.bg != 1;
        }
        ir() {
            return (this.bu != 2 && this.hv) || this.bg != 1;
        }
        r5(a, b) {
            this.hd = true;
            this.pn(a, b);
            this.hd = false;
        }
        r6(a, b) {
            this.hd = true;
            this.st(a, b);
            this.hd = false;
        }
        r8(a, b, c) {
            this.hd = true;
            this.tl(a, b, c);
            this.hd = false;
        }
        qq(a, b) {
            if (!this.gz) {
                let c = new GridCellPosition();
                c.d = b;
                c.b = a;
                this.cw = c;
            }
            if (this.activeCellChanged != null) {
                let d = new GridActiveCellChangedEventArgs();
                d.newActiveCell = this.cw;
                d.oldActiveCell = this.cv;
                this.activeCellChanged(this, d);
            }
        }
        qs(a, b) {
            if (b == null) {
                return;
            }
            let c = this.cw;
            if (!this.gz) {
                let d = new GridCellPosition();
                d.d = b;
                d.b = a;
                this.cw = d;
            }
            if (this.activeCellChanged != null) {
                let e = new GridActiveCellChangedEventArgs();
                e.newActiveCell = this.cw;
                e.oldActiveCell = c;
                this.activeCellChanged(this, e);
            }
        }
        h8(a, b) {
            if (this.ch == 0 || this.cw == null) {
                return false;
            }
            let c = this.cu.b;
            let d = this.cu.d;
            if (c > this.d9.getRowCount() - 1) {
                return false;
            }
            let e = c + 1;
            if (b) {
                e = this.d9.getRowCount() - 1;
            }
            if (e > this.d9.getRowCount() - 1) {
                e = this.d9.getRowCount() - 1;
            }
            if (e == c) {
                return false;
            }
            let f = Math.min(this.aj.r(), this.actualColumns.count - 1);
            f = this.kt(f);
            let g = this.actualColumns._inner[f];
            if (d != g.h0()) {
                d = g.h0();
            }
            if (this.dy != 1) {
                let h = this.d9.getRowType(e);
                if (h == 1 || h == 2) {
                    d = null;
                }
            }
            this.cw = ((() => {
                let $ret = new GridCellPosition();
                $ret.b = e;
                $ret.d = d;
                return $ret;
            })());
            if (this.model.br.count > 0) {
                let i = this.aj.r();
                this.po(e, this.model.br._inner[i].n, false);
            }
            return true;
        }
        h9(a, b) {
            if (this.ch == 0 || this.cw == null) {
                return false;
            }
            if (!b || this.cb.j) {
                return false;
            }
            let c = this.kz();
            let d = this.actualColumns._inner[c];
            let e = this.cu.b;
            let f = this.cu.d;
            if (e >= this.d9.getRowCount() - 1 && f == d.h0()) {
                return false;
            }
            e = this.d9.getRowCount() - 1;
            f = d.h0();
            let g = this.d9.getRowType(e);
            if (g == 1 || g == 2) {
                f = null;
            }
            this.cw = ((() => {
                let $ret = new GridCellPosition();
                $ret.b = e;
                $ret.d = f;
                return $ret;
            })());
            this.f1 = true;
            this.s1(e);
            this.f1 = false;
            this.sz(c);
            return true;
        }
        kz() {
            let a = this.actualColumns.count - 1;
            let b = this.e6.j(a, this.model);
            while (a > 0 && this.actualColumns._inner[b].gd) {
                a--;
                b = this.e6.j(a, this.model);
            }
            return b;
        }
        kv() {
            let a = 0;
            let b = this.e6.j(a, this.model);
            while (a < this.actualColumns.count - 1 && this.actualColumns._inner[b].gd) {
                a++;
                b = this.e6.j(a, this.model);
            }
            return b;
        }
        k4(a, b = true) {
            let c = Math.max(0, a - 1);
            if (!b) {
                c = this.e6.j(c, this.model);
            }
            if (this.actualColumns._inner[c].gd) {
                let d = c;
                let e = this.model.br._inner[c].n;
                while (e > 0 && this.actualColumns._inner[d].gd) {
                    e--;
                    d = this.e6.j(e, this.model);
                }
                if (this.actualColumns._inner[d].gd) {
                    d = c;
                    e = this.model.br._inner[c].n;
                    while (e < this.actualColumns.count - 1 && this.actualColumns._inner[d].gd) {
                        e++;
                        d = this.e6.j(e, this.model);
                    }
                    if (!this.actualColumns._inner[d].gd) {
                        c = d;
                    }
                }
                else {
                    c = d;
                }
            }
            return c;
        }
        k3(a, b = true) {
            let c = Math.min(this.actualColumns.count - 1, a + 1);
            if (!b) {
                c = this.e6.j(c, this.model);
            }
            return this.kt(c);
        }
        kt(a) {
            a = Math.min(a, this.actualColumns.count - 1);
            if (this.actualColumns._inner[a].gd) {
                let b = a;
                let c = this.model.br._inner[b].n;
                while (c < this.actualColumns.count - 1 && this.actualColumns._inner[b].gd) {
                    c++;
                    b = this.e6.j(c, this.model);
                }
                if (this.actualColumns._inner[b].gd) {
                    b = a;
                    c = this.model.br._inner[b].n;
                    while (c > 0 && this.actualColumns._inner[b].gd) {
                        c--;
                        b = this.e6.j(c, this.model);
                    }
                    if (!this.actualColumns._inner[b].gd) {
                        a = b;
                    }
                }
                else {
                    a = b;
                }
            }
            return a;
        }
        po(a, b, c) {
            if (b <= this.kx()) {
                b = this.e6.j(b, this.model);
                this.sz(b);
            }
            else if (b >= this.k1()) {
                b = this.e6.j(b, this.model);
                this.s0(b);
            }
            if (a <= this.kw()) {
                this.s2(a);
            }
            else if (a >= this.k0()) {
                if (c) {
                    this.s2(a);
                }
                else {
                    this.s1(a);
                }
            }
        }
        id(a, b) {
            if (!b || this.cb.j) {
                return false;
            }
            let c = this.kv();
            let d = this.actualColumns._inner[c];
            let e = this.cu.b;
            let f = this.cu.d;
            if (e <= 0 && f == d.h0()) {
                return false;
            }
            e = 0;
            f = d.h0();
            if (this.dy != 1) {
                let g = this.d9.getRowType(e);
                if (g == 1 || g == 2) {
                    f = null;
                }
            }
            this.cw = ((() => {
                let $ret = new GridCellPosition();
                $ret.b = e;
                $ret.d = f;
                return $ret;
            })());
            this.f1 = true;
            this.s1(e);
            this.f1 = false;
            this.sz(c);
            return true;
        }
        ie(a, b) {
            if (this.ch == 0 || this.cw == null) {
                return false;
            }
            let c = this.aj.r();
            let d = this.model.br._inner[c].n;
            let e = this.cu.b;
            let f = this.cu.d;
            if (f == null) {
                return false;
            }
            let g = this.k4(d, false);
            if (b) {
                g = this.kv();
            }
            let h = this.actualColumns._inner[g];
            if (f == h.h0()) {
                return false;
            }
            f = h.h0();
            this.cw = ((() => {
                let $ret = new GridCellPosition();
                $ret.b = e;
                $ret.d = f;
                return $ret;
            })());
            if (this.model.br.count > 0) {
                if (h.fk == 0) {
                    this.po(e, this.model.br._inner[g].n, false);
                }
            }
            return true;
        }
        ig(a, b) {
            if (this.ch == 0 || this.cw == null) {
                return false;
            }
            let c = this.cu.d;
            let d = this.aj.r();
            let e = this.ky();
            let f = this.k2();
            let g = f - e;
            let h = Math.min(f + 1, this.d9.getRowCount() - 1);
            if (!this.cb.j) {
                let i = this.d9.getRowType(h);
                if (i == 1 || i == 2) {
                    c = null;
                }
                this.cw = ((() => {
                    let $ret = new GridCellPosition();
                    $ret.b = h;
                    $ret.d = c;
                    return $ret;
                })());
            }
            this.po(h, this.model.br._inner[d].n, true);
            return true;
        }
        ih(a, b) {
            if (this.ch == 0 || this.cw == null) {
                return false;
            }
            let c = this.cu.d;
            let d = this.aj.r();
            let e = this.ky();
            let f = this.k2();
            let g = f - e;
            let h = Math.max(e - g - 1, 0);
            if (!this.cb.j) {
                let i = this.d9.getRowType(h);
                if (i == 1 || i == 2) {
                    c = null;
                }
                this.cw = ((() => {
                    let $ret = new GridCellPosition();
                    $ret.b = h;
                    $ret.d = c;
                    return $ret;
                })());
            }
            this.po(h, this.model.br._inner[d].n, false);
            return true;
        }
        ii(a, b) {
            if (this.ch == 0 || this.cw == null) {
                return false;
            }
            let c = this.aj.r();
            let d = this.model.br._inner[c].n;
            let e = this.cu.b;
            let f = this.cu.d;
            if (f == null) {
                return false;
            }
            let g = this.k3(d, false);
            if (b) {
                g = this.kz();
            }
            let h = this.actualColumns._inner[g];
            if (f == h.h0()) {
                return false;
            }
            f = h.h0();
            this.cw = ((() => {
                let $ret = new GridCellPosition();
                $ret.b = e;
                $ret.d = f;
                return $ret;
            })());
            if (this.model.br.count > 0) {
                if (h.fk == 0) {
                    this.po(e, this.model.br._inner[g].n, false);
                }
            }
            return true;
        }
        ij(a, b) {
            if (this.ch == 0 || this.cw == null) {
                return false;
            }
            let c = this.aj.r();
            let d = this.model.br._inner[c].n;
            let e = this.cu.b;
            let f = this.cu.d;
            let g = e;
            let h = f;
            let i = c;
            let j = 0;
            if (g >= 0 && g < this.d9.getRowCount()) {
                j = this.d9.getRowType(g);
            }
            let k = this.dy != 1 && j == 1;
            let l = j != 1 && j != 2 && j != 4 && j != 5;
            if (a) {
                let m;
                let n = null;
                do {
                    m = this.k4(d, false);
                    n = this.actualColumns._inner[m];
                    if (h == n.h0() || k) {
                        if (g > 0) {
                            g--;
                            j = this.d9.getRowType(g);
                            k = j == 1;
                            l = j != 1 && j != 2 && j != 4 && j != 5;
                            if (this.dy != 1 && j == 1) {
                                m = this.kv();
                            }
                            else {
                                m = this.kz();
                            }
                            n = this.actualColumns._inner[m];
                        }
                        else {
                            return false;
                        }
                    }
                    d = m;
                    h = n.h0();
                } while (this.cb.j && g >= 0 && (!l || !n.ga));
                if (this.dy != 1) {
                    if (j == 1 || j == 2) {
                        h = null;
                    }
                }
                i = m;
            }
            else {
                let o;
                let p = null;
                do {
                    o = this.k3(d, false);
                    p = this.actualColumns._inner[o];
                    if (h == p.h0() || k) {
                        if (g < this.d9.getRowCount() - 1) {
                            o = this.kv();
                            p = this.actualColumns._inner[o];
                            g++;
                            j = this.d9.getRowType(g);
                            k = j == 1;
                            l = j != 1 && j != 2 && j != 4 && j != 5;
                        }
                        else {
                            return false;
                        }
                    }
                    d = o;
                    h = p.h0();
                } while (this.cb.j && g < this.d9.getRowCount() - 1 && (!l || !p.ga));
                if (this.dy != 1) {
                    if (j == 1 || j == 2) {
                        h = null;
                    }
                }
                i = o;
            }
            if (this.cb.j && (f != h || e != g)) {
                this.ha(true);
                if (!this.cb.j) {
                    this.cw = ((() => {
                        let $ret = new GridCellPosition();
                        $ret.b = g;
                        $ret.d = h;
                        return $ret;
                    })());
                    this.po(g, this.model.br._inner[i].n, false);
                    this.i1();
                }
            }
            else {
                this.cw = ((() => {
                    let $ret = new GridCellPosition();
                    $ret.b = g;
                    $ret.d = h;
                    return $ret;
                })());
                this.po(g, this.model.br._inner[i].n, false);
            }
            return true;
        }
        sc() {
        }
        ik(a, b) {
            if (this.ch == 0 || this.cw == null) {
                return false;
            }
            let c = this.cu.b;
            let d = this.cu.d;
            if (c < 0) {
                return false;
            }
            let e = c - 1;
            if (b) {
                e = 0;
            }
            if (e < 0) {
                e = 0;
            }
            if (e == c) {
                return false;
            }
            let f = Math.min(this.aj.r(), this.actualColumns.count - 1);
            f = this.kt(f);
            let g = this.actualColumns._inner[f];
            if (d != g.h0()) {
                d = g.h0();
            }
            if (this.dy != 1) {
                let h = this.d9.getRowType(e);
                if (h == 1 || h == 2) {
                    d = null;
                }
            }
            this.cw = ((() => {
                let $ret = new GridCellPosition();
                $ret.b = e;
                $ret.d = d;
                return $ret;
            })());
            if (this.model.br.count > 0) {
                let i = this.aj.r();
                this.po(e, this.model.br._inner[i].n, false);
            }
            return true;
        }
        ia(a, b) {
            if (this.cb.j) {
                this.ha(true);
                if (this.cf == 3) {
                    this.p1(true);
                }
            }
            else {
                if (this.ch != 0 && this.cw != null) {
                    let c = this.d9.getRowType(this.cw.b);
                    if (c == 1) {
                        this.tj(this.cw.b);
                    }
                    else if (this.hr() && c == 0) {
                        let d = this.aj.r();
                        let e = this.actualColumns._inner[d];
                        if (e != null && e.ga) {
                            let f = this.model.d(d, this.cw.b);
                            return this.ix(f);
                        }
                    }
                }
            }
            return false;
        }
        ib() {
            if (this.hr()) {
                if (this.cb.l != -1) {
                    this.y.rejectPendingTransaction(this.cb.l);
                }
                this.ha(false);
                if (this.cf == 3) {
                    this.p1(false);
                }
            }
            return false;
        }
        ic() {
            return this.i1();
        }
        i1() {
            if (this.cb.j) {
                this.ha(true);
                return true;
            }
            if (this.ch != 0 && this.cw != null) {
                let a = this.d9.getRowType(this.cw.b);
                if (this.hr() && (a == 0 || a == 3)) {
                    let b = this.aj.r();
                    let c = this.actualColumns._inner[b];
                    if (c != null && c.ga) {
                        let d = this.model.d(b, this.cw.b);
                        if (d == null) {
                            this.ar = new CellPath(1, b, 0, this.cw.b);
                        }
                        else {
                            this.ix(d);
                        }
                        return true;
                    }
                }
            }
            return false;
        }
        ix(a) {
            if (!this.hr() || a == null || a.k.az < 0 || a.k.w < 0 || a.k.av) {
                return false;
            }
            this.ar = null;
            this.cb.h(true, false);
            let b = false;
            if (this.cf == 3) {
                if (!this.cb.i(a)) {
                    this.p1(true);
                    b = true;
                }
            }
            let c = this.a0(a.k);
            if (!c.ga) {
                return false;
            }
            this.cb.v(a);
            this.po(a.k.w, a.k.az, false);
            this.j3 = a.k.w;
            let d = this.actualColumns._inner[this.cb.m];
            let e = this.cb.n;
            let f = this.cb.item;
            if (b) {
                this.r3(e, f);
            }
            this.qv(d, e, f);
            return true;
        }
        ha(a, b = true) {
            if (this.cb.j) {
                let c = this.actualColumns._inner[this.cb.m];
                let d = this.cb.n;
                let e = this.cb.item;
                if (this.cb.h(a, b)) {
                    this.qu(c, d, e);
                    this.externalGrid.focusScroller();
                    return true;
                }
                return false;
            }
            return true;
        }
        p1(a) {
            if (this.cf != 3 || this.j3 == -1) {
                return;
            }
            this.j3 = -1;
            let b = this.cb.n;
            let c = this.cb.item;
            this.cb.p();
            this.r2(b, c);
            if (a) {
                this.px();
            }
            else {
                this.pp();
            }
        }
        q4(a, b) {
            this.hd = true;
            if (!this.g0) {
                let c = this.dm.af(a, this.a2.f(b).h0());
            }
            if (this.selectedCellsChanged != null) {
                let d = new GridSelectedCellsChangedEventArgs();
                d.addedCells = new GridSelectedCellsCollection();
                d.addedCells.add(this.dm.ai(a, b));
                d.removedCells = new GridSelectedCellsCollection();
                d.currentCells = this.dm;
                this.selectedCellsChanged(this, d);
            }
            this.hd = false;
        }
        q5(a, b) {
            this.hd = true;
            let c = this.dm.ai(a, b);
            if (c != null) {
                if (!this.g0) {
                    this.dm.remove(c);
                }
                if (this.selectedCellsChanged != null) {
                    let d = new GridSelectedCellsChangedEventArgs();
                    d.addedCells = new GridSelectedCellsCollection();
                    d.removedCells = new GridSelectedCellsCollection();
                    d.removedCells.add(c);
                    d.currentCells = this.dm;
                    this.selectedCellsChanged(this, d);
                }
            }
            this.hd = false;
        }
        pn(a, b) {
            let c = this.h7;
            this.h7 = false;
            if (!this.gy) {
                this.ad.add1(a);
                this.ah.add(b);
            }
            this.h7 = c;
            let d = new GridSelectedItemsChangedEventArgs();
            let e = new GridSelectedItemsCollection();
            e.add1(a);
            d.addedItems = e;
            d.currentItems = this.ad;
            if (this.selectedItemsChanged != null) {
                this.selectedItemsChanged(this, d);
            }
            let f = new GridSelectedKeysChangedEventArgs();
            let g = new GridSelectedKeysCollection();
            g.add(b);
            f.addedKeys = g;
            f.currentKeys = this.ah;
            if (this.selectedKeysChanged != null) {
                this.selectedKeysChanged(this, f);
            }
        }
        tl(a, b, c) {
            let d = this.h7;
            this.h7 = false;
            let e = this.ad.ae._inner[a];
            if (!this.gy) {
                this.ad.ae._inner[a] = b;
            }
            this.h7 = d;
            let f = new GridSelectedItemsChangedEventArgs();
            let g = new GridSelectedItemsCollection();
            g.add1(b);
            f.addedItems = g;
            let h = new GridSelectedItemsCollection();
            h.add1(b);
            f.removedItems = h;
            f.currentItems = this.ad;
            if (this.selectedItemsChanged != null) {
                this.selectedItemsChanged(this, f);
            }
        }
        st(a, b) {
            let c = this.h7;
            this.h7 = false;
            if (!this.gy) {
                this.ad.remove1(a);
                this.ah.remove(b);
            }
            this.h7 = c;
            let d = new GridSelectedItemsChangedEventArgs();
            let e = new GridSelectedItemsCollection();
            e.add1(a);
            d.removedItems = e;
            d.currentItems = this.ad;
            if (this.selectedItemsChanged != null) {
                this.selectedItemsChanged(this, d);
            }
            let f = new GridSelectedKeysChangedEventArgs();
            let g = new GridSelectedKeysCollection();
            g.add(b);
            f.removedKeys = g;
            f.currentKeys = this.ah;
            if (this.selectedKeysChanged != null) {
                this.selectedKeysChanged(this, f);
            }
        }
        pm(a, b, c, d) {
            let e = new CellRange();
            e.k = a;
            e.i = b;
            e.l = c;
            e.j = d;
            this.pl(e);
        }
        pl(a) {
            this.dj.add(a);
            this.at = a;
            if (this.selectedCellRangesChanged != null) {
                let b = new GridSelectedCellRangesChangedEventArgs();
                b.addedRanges = ((() => {
                    let $ret = new GridSelectedCellRangesCollection();
                    $ret.add(a);
                    return $ret;
                })());
                b.currentRanges = this.dj;
                this.selectedCellRangesChanged(this, b);
            }
        }
        sq(a) {
            if (this.dj.contains(a)) {
                this.dj.remove(a);
                if (this.selectedCellRangesChanged != null) {
                    let b = new GridSelectedCellRangesChangedEventArgs();
                    b.removedRanges = ((() => {
                        let $ret = new GridSelectedCellRangesCollection();
                        $ret.add(a);
                        return $ret;
                    })());
                    b.currentRanges = this.dj;
                    this.selectedCellRangesChanged(this, b);
                }
            }
        }
        sp() {
            if (this.dj.count > 0) {
                let a = new GridSelectedCellRangesCollection();
                for (let b = 0; b < this.dj.count; b++) {
                    a.add(this.dj._inner[b]);
                }
                this.dj.clear();
                if (this.selectedCellRangesChanged != null) {
                    let c = new GridSelectedCellRangesChangedEventArgs();
                    c.removedRanges = a;
                    c.currentRanges = this.dj;
                    this.selectedCellRangesChanged(this, c);
                }
            }
        }
        qi(a) {
            if (this.dj.contains(a)) {
                if (this.selectedCellRangesChanged != null) {
                    let b = new GridSelectedCellRangesChangedEventArgs();
                    b.updatedRanges = ((() => {
                        let $ret = new GridSelectedCellRangesCollection();
                        $ret.add(a);
                        return $ret;
                    })());
                    b.currentRanges = this.dj;
                    this.selectedCellRangesChanged(this, b);
                }
            }
        }
        r9(a, b, c) {
            this.qb(a);
            if (b != c) {
                this.e0.af(a);
                this.aj.ah(a);
            }
        }
        qb(a) {
            this.ck.al(this, a, a);
        }
        q6() {
            if (this.cb.j) {
                this.ha(false);
                this.j3 = -1;
            }
            this.e0.z();
            this.sl();
            this.qe();
        }
        qe() {
            if (!this.is()) {
                return;
            }
            let a = this.ky();
            let b = this.k2();
            this.qc(a, b);
        }
        qc(a, b) {
            let c = this.ky();
            let d = this.k2();
            if (b < c || a > d) {
                return;
            }
            if (a < c) {
                a = c;
            }
            if (b > d) {
                b = d;
            }
            this.ck.y(this, a, b, true);
            this.model.bn = true;
            this.sm();
        }
        kx() {
            return this.e6.o(this.model.actualVisibleRegion.left + this.model.cf, this, this.model);
        }
        k1() {
            return this.e6.o(this.model.actualVisibleRegion.right - this.model.cg, this, this.model);
        }
        qd(a, b) {
            let c = this.e6.i(this.model, a);
            let d = this.e6.i(this.model, b);
            this.qc(c, d);
        }
        sh() {
            if (!this.f9) {
                this.f9 = true;
                this.fc.v();
                this.renderingEngine.invalidateVisibility(() => this.fc.l(this));
                this.renderingEngine.refresh(this.model, false);
            }
        }
        rv(a, b) {
            let c = this.d9.getRowPathForRow(a);
            this.c9.ae(c);
            this.e0.ad(this.e6.i(this.model, c));
            this.aj.af(this.e6.i(this.model, c));
            this.sh();
        }
        r0(a, b) {
            let c = this.d9.getRowPathForRow(a);
            this.c9.af(c);
            this.e0.ae(this.e6.i(this.model, c));
            this.aj.ag(this.e6.i(this.model, c));
            this.sh();
        }
        s7(a) {
            for (let b = 0; b < this.ek.g.count; b++) {
                if (this.ek.g._inner[b].n == a) {
                    this.s8(this.ek.g._inner[b]);
                }
            }
        }
        s8(a) {
            this.ek.x(a);
        }
        qp(a, b, c) {
            if (this.w != null) {
                this.w.notifySetItem(a, b, c);
            }
        }
        qj() {
            if (this.w != null) {
                this.w.notifyClearItems();
            }
        }
        ql(a, b) {
            if (this.w != null) {
                this.w.notifyInsertItem(a, b);
            }
            ;
        }
        qm(a, b) {
            if (this.w != null) {
                this.w.notifyRemoveItem(a, b);
            }
            ;
        }
        kr(a) {
            if (this.w == null) {
                return -1;
            }
            return this.w.indexOfItem(a);
        }
        ks(a) {
            if (this.w == null) {
                return -1;
            }
            return this.w.indexOfKey(a);
        }
        i() {
            if (this.actualDataSource != null) {
                return this.actualDataSource.actualPrimaryKey;
            }
            return this.e;
        }
        ls(a) {
            let b = a.b != null ? a.b : this.a2.g(a.j);
            let c = null;
            if (a.h != null) {
                c = a.h;
            }
            else if (a.primaryKey != null) {
                if (this.i() == null && a.primaryKey.key == null && a.primaryKey.value.length == 1) {
                    c = a.primaryKey.value[0];
                }
                else {
                    c = this.d9.getItemForKey(a.primaryKey);
                }
            }
            if (b != null && c != null) {
                return this.actualDataSource.getItemProperty(c, b.hy);
            }
            return null;
        }
        lt(a, b) {
            if (b < 0 || b > this.a2.j.count) {
                return null;
            }
            if (a < 0 || a > this.d9.getRowCount() - 1) {
                return null;
            }
            let c = this.actualDataSource.getItemAtIndex(a);
            if (c == null) {
                return null;
            }
            else {
                let d = this.d9.getRowType(a);
                if (d != 0 && d != 3) {
                    return null;
                }
            }
            let e = this.e6.j(b, this.model);
            let f = this.a2.j._inner[e];
            return this.actualDataSource.getItemProperty(c, f.hy);
        }
        az(a) {
            let b = this.e6.j(a, this.model);
            if (b >= 0 && b < this.a2.j.count) {
                return this.a2.j._inner[b];
            }
            return null;
        }
        j() {
            if (this.actualDataSource != null) {
                return this.actualDataSource.getRootSummaryResults();
            }
            return null;
        }
        k(a) {
            if (this.actualDataSource != null) {
                return this.actualDataSource.getSectionSummaryResults(a);
            }
            return null;
        }
        get io() {
            return this.gs;
        }
        set io(a) {
            let b = this.gs;
            this.gs = a;
            if (b != this.gs) {
                this.rz("ReactsToSortChanges", b, this.gs);
            }
        }
        get im() {
            return this.gr;
        }
        set im(a) {
            let b = this.gr;
            this.gr = a;
            if (b != this.gr) {
                this.rz("ReactsToGroupChanges", b, this.gr);
            }
        }
        get il() {
            return this.gq;
        }
        set il(a) {
            let b = this.gq;
            this.gq = a;
            if (b != this.gq) {
                this.rz("ReactsToFilterChanges", b, this.gq);
            }
        }
        z(a) {
            let b = null;
            for (let c = 0; c < this.a2.j.count; c++) {
                let d = this.a2.j._inner[c];
                if (d != a && d.eo != null) {
                    let e = this.actualDataSource.resolveSchemaPropertyType(d.hy);
                    let f = d.eo.a(d.hy, e);
                    if (b != null) {
                        b = FilterFactory.instance.and(b, f);
                    }
                    else {
                        b = f;
                    }
                }
            }
            return b;
        }
        i2(a, b) {
            if (this.actualDataSource != null && a.k.az >= 0 && a.k.az < this.actualColumns.count) {
                let c = this.actualColumns._inner[a.k.az];
                let d = this.actualDataSource.resolveSchemaPropertyType(c.hy);
                let e = null;
                try {
                    e = this.lo(d, b);
                }
                catch (f) {
                    this.cb.t(f.message);
                    return false;
                }
                if (e == null && a.go != null || e != null && a.go == null || !Base.equalsStatic(e, a.go)) {
                    if (this.cb.l != -1) {
                        this.y.rejectPendingTransaction(this.cb.l);
                    }
                    this.cb.t(null);
                    let g = this.d9.getItemKey(this.e, a.gp);
                    let h = this.y.updatePropertyAtKey(g.value, c.hy, e, true);
                    this.gp = true;
                    if (this.cellValueChanging != null) {
                        let i = ((() => {
                            let $ret = new GridCellValueChangingEventArgs();
                            $ret.c = h;
                            $ret.cellInfo = a;
                            $ret.b = c;
                            $ret.e = a.go;
                            $ret.d = e;
                            return $ret;
                        })());
                        this.cellValueChanging(this, i);
                        let j = this.y.getTransactionErrorByID(h);
                        if (j != null) {
                            this.cb.t(j);
                            a.en = h;
                            return false;
                        }
                        let k = this.y.isPendingTransaction(h);
                        if (k && this.g2) {
                            this.pj(h);
                        }
                    }
                    else {
                        this.pj(h);
                    }
                    this.gp = false;
                }
                else {
                    if (this.cb.l != -1) {
                        let l = this.y.getTransactionErrorByID(this.cb.l);
                        if (l != null) {
                            this.cb.t(l);
                            return false;
                        }
                    }
                }
            }
            return true;
        }
        lo(a, b) {
            if (b == null) {
                return null;
            }
            switch (a) {
                case 2: return Convert.toBoolean(b);
                case 10: return Convert.toByte1(b);
                case 8: return Convert.toDateTime(b);
                case 6: return Convert.toDecimal2(b);
                case 5: return Convert.toDouble3(b);
                case 1: return Convert.toInt321(b);
                case 3: return Convert.toInt64(b);
                case 11: return b;
                case 0: return b.toString();
            }
            return b;
        }
        rj(a, b) {
            if (this.columnWidthChanged != null) {
                let c = ((() => {
                    let $ret = new GridColumnWidthChangedEventArgs();
                    $ret.a = a;
                    $ret.b = b;
                    return $ret;
                })());
                this.columnWidthChanged(a.externalObject, c);
            }
        }
        qv(a, b, c) {
            if (this.cellEditStarted != null) {
                this.cellEditStarted(this, ((() => {
                    let $ret = new GridCellEditStartedEventArgs();
                    $ret.a = a;
                    $ret.b = b;
                    $ret.item = c;
                    return $ret;
                })()));
            }
        }
        qu(a, b, c) {
            if (this.cellEditEnded != null) {
                this.cellEditEnded(this, ((() => {
                    let $ret = new GridCellEditEndedEventArgs();
                    $ret.a = a;
                    $ret.b = b;
                    $ret.item = c;
                    return $ret;
                })()));
            }
        }
        r3(a, b) {
            if (this.rowEditStarted != null) {
                this.rowEditStarted(this, ((() => {
                    let $ret = new GridRowEditStartedEventArgs();
                    $ret.a = a;
                    $ret.item = b;
                    return $ret;
                })()));
            }
        }
        r2(a, b) {
            if (this.rowEditEnded != null) {
                this.rowEditEnded(this, ((() => {
                    let $ret = new GridRowEditEndedEventArgs();
                    $ret.a = a;
                    $ret.item = b;
                    return $ret;
                })()));
            }
        }
        hr() {
            return this.y != null && !this.y.isReadOnly && this.cf != 0;
        }
        get g9() {
            if (this.y != null) {
                return this.y.canUndo;
            }
            return false;
        }
        get g8() {
            if (this.y != null) {
                return this.y.canRedo;
            }
            return false;
        }
        get g5() {
            if (this.y != null) {
                return this.y.canCommit;
            }
            return false;
        }
        px() {
            if (this.hr() && this.g5) {
                if (this.cb.j && this.cb.l != -1) {
                    this.ha(false);
                }
                let a = this.y.commitEdits(true);
                if (a != -1) {
                    let b = this.y.getAggregatedChanges(a);
                    if (this.dataCommitting != null) {
                        let c = new GridDataCommittingEventArgs(a, b);
                        this.dataCommitting(this, c);
                        if (this.y.isPendingCommit(a) && this.g2) {
                            this.pi(a);
                        }
                    }
                    else {
                        this.pi(a);
                    }
                }
            }
        }
        pp() {
            if (this.hr()) {
                this.y.cancelEdits();
            }
        }
        pi(a) {
            if (this.hr()) {
                this.y.acceptPendingCommit(a);
            }
        }
        sn(a) {
            if (this.hr()) {
                this.y.rejectPendingCommit(a);
            }
        }
        tf() {
            if (this.hr()) {
                this.y.undo();
            }
        }
        sj() {
            if (this.hr()) {
                this.y.redo();
            }
        }
        tk(a, b, c) {
            if (this.hr()) {
                this.y.updatePropertyAtKey(a, b, c, false);
                if (this.cf != 2) {
                    this.px();
                }
            }
        }
        ss(a) {
            if (this.hr()) {
                this.y.removeItemByKey(a);
                if (this.cf != 2) {
                    this.px();
                }
            }
        }
        sr(a) {
            if (this.hr()) {
                this.y.removeItem(a);
                if (this.cf != 2) {
                    this.px();
                }
            }
        }
        pj(a) {
            if (this.hr()) {
                this.y.acceptPendingTransaction(a);
                if (!this.y.isBatchingEnabled) {
                    this.px();
                }
            }
        }
        so(a) {
            if (this.hr()) {
                this.y.rejectPendingTransaction(a);
            }
        }
        s9(a, b) {
            if (this.hr()) {
                this.y.setTransactionError(a, b);
            }
        }
    }
    Grid.$t = /*@__PURE__*/ markType(Grid, 'Grid', Base.$, [INotifyPropertyChanged_$type]);
    return Grid;
})();
/**
 * @hidden
 */
let GridColumnsAutoGeneratedEventArgs = /*@__PURE__*/ (() => {
    class GridColumnsAutoGeneratedEventArgs extends EventArgs {
        constructor() {
            super(...arguments);
            this._columns = null;
        }
        get columns() {
            return this._columns;
        }
        set columns(a) {
            this._columns = a;
        }
    }
    GridColumnsAutoGeneratedEventArgs.$t = /*@__PURE__*/ markType(GridColumnsAutoGeneratedEventArgs, 'GridColumnsAutoGeneratedEventArgs', EventArgs.$);
    return GridColumnsAutoGeneratedEventArgs;
})();
/**
 * @hidden
 */
let GridColumnsChangedEventArgs = /*@__PURE__*/ (() => {
    class GridColumnsChangedEventArgs extends EventArgs {
        constructor() {
            super(...arguments);
            this._columns = null;
        }
        get columns() {
            return this._columns;
        }
        set columns(a) {
            this._columns = a;
        }
    }
    GridColumnsChangedEventArgs.$t = /*@__PURE__*/ markType(GridColumnsChangedEventArgs, 'GridColumnsChangedEventArgs', EventArgs.$);
    return GridColumnsChangedEventArgs;
})();
/**
 * @hidden
 */
let GridSelectedCellsChangedEventArgs = /*@__PURE__*/ (() => {
    class GridSelectedCellsChangedEventArgs extends EventArgs {
        constructor() {
            super(...arguments);
            this._currentCells = null;
            this._addedCells = null;
            this._removedCells = null;
        }
        get currentCells() {
            return this._currentCells;
        }
        set currentCells(a) {
            this._currentCells = a;
        }
        get addedCells() {
            return this._addedCells;
        }
        set addedCells(a) {
            this._addedCells = a;
        }
        get removedCells() {
            return this._removedCells;
        }
        set removedCells(a) {
            this._removedCells = a;
        }
    }
    GridSelectedCellsChangedEventArgs.$t = /*@__PURE__*/ markType(GridSelectedCellsChangedEventArgs, 'GridSelectedCellsChangedEventArgs', EventArgs.$);
    return GridSelectedCellsChangedEventArgs;
})();
/**
 * @hidden
 */
let GridCellEventArgs = /*@__PURE__*/ (() => {
    class GridCellEventArgs extends EventArgs {
        constructor() {
            super(...arguments);
            this._cellInfo = null;
            this._grid = null;
        }
        get cellInfo() {
            return this._cellInfo;
        }
        set cellInfo(a) {
            this._cellInfo = a;
        }
        get grid() {
            return this._grid;
        }
        set grid(a) {
            this._grid = a;
        }
    }
    GridCellEventArgs.$t = /*@__PURE__*/ markType(GridCellEventArgs, 'GridCellEventArgs', EventArgs.$);
    return GridCellEventArgs;
})();
/**
 * @hidden
 */
let ColumnHiddenChangedEventArgs = /*@__PURE__*/ (() => {
    class ColumnHiddenChangedEventArgs extends Base {
        constructor() {
            super(...arguments);
            this.a = null;
            this.b = false;
        }
    }
    ColumnHiddenChangedEventArgs.$t = /*@__PURE__*/ markType(ColumnHiddenChangedEventArgs, 'ColumnHiddenChangedEventArgs');
    return ColumnHiddenChangedEventArgs;
})();
/**
 * @hidden
 */
let ColumnPinnedChangedEventArgs = /*@__PURE__*/ (() => {
    class ColumnPinnedChangedEventArgs extends Base {
        constructor() {
            super(...arguments);
            this.a = null;
            this.b = 0;
        }
    }
    ColumnPinnedChangedEventArgs.$t = /*@__PURE__*/ markType(ColumnPinnedChangedEventArgs, 'ColumnPinnedChangedEventArgs');
    return ColumnPinnedChangedEventArgs;
})();
/**
 * @hidden
 */
let GridCellValueChangingEventArgs = /*@__PURE__*/ (() => {
    class GridCellValueChangingEventArgs extends Base {
        constructor() {
            super(...arguments);
            this.c = 0;
            this._cellInfo = null;
            this.b = null;
            this.e = null;
            this.d = null;
        }
        get cellInfo() {
            return this._cellInfo;
        }
        set cellInfo(a) {
            this._cellInfo = a;
        }
    }
    GridCellValueChangingEventArgs.$t = /*@__PURE__*/ markType(GridCellValueChangingEventArgs, 'GridCellValueChangingEventArgs');
    return GridCellValueChangingEventArgs;
})();
/**
 * @hidden
 */
let GridColumnWidthChangedEventArgs = /*@__PURE__*/ (() => {
    class GridColumnWidthChangedEventArgs extends Base {
        constructor() {
            super(...arguments);
            this.a = null;
            this.b = null;
        }
    }
    GridColumnWidthChangedEventArgs.$t = /*@__PURE__*/ markType(GridColumnWidthChangedEventArgs, 'GridColumnWidthChangedEventArgs');
    return GridColumnWidthChangedEventArgs;
})();
/**
 * @hidden
 */
let GridCellEditStartedEventArgs = /*@__PURE__*/ (() => {
    class GridCellEditStartedEventArgs extends Base {
        constructor() {
            super(...arguments);
            this.a = null;
            this.b = 0;
            this._item = null;
        }
        get item() {
            return this._item;
        }
        set item(a) {
            this._item = a;
        }
    }
    GridCellEditStartedEventArgs.$t = /*@__PURE__*/ markType(GridCellEditStartedEventArgs, 'GridCellEditStartedEventArgs');
    return GridCellEditStartedEventArgs;
})();
/**
 * @hidden
 */
let GridCellEditEndedEventArgs = /*@__PURE__*/ (() => {
    class GridCellEditEndedEventArgs extends Base {
        constructor() {
            super(...arguments);
            this.a = null;
            this.b = 0;
            this._item = null;
        }
        get item() {
            return this._item;
        }
        set item(a) {
            this._item = a;
        }
    }
    GridCellEditEndedEventArgs.$t = /*@__PURE__*/ markType(GridCellEditEndedEventArgs, 'GridCellEditEndedEventArgs');
    return GridCellEditEndedEventArgs;
})();
/**
 * @hidden
 */
let GridAnimationManager = /*@__PURE__*/ (() => {
    class GridAnimationManager extends Base {
        constructor() {
            super();
            this.l = new List$1(Number_$type, 0);
            this.i = false;
            this.animationCreated = null;
            this.animationCompleted = null;
            this.animationCanceled = null;
            this.g = new GridColumnAnimationSettings();
            this.f = new GridAnimationSettings();
            this.k = new Dictionary$2(Number_$type, List$1.$.specialize(Delegate_$type), 0);
            this.e = null;
            this.d = null;
            this.e = new GridAnimationPhaseSettings();
            this.e.l = 0;
            this.e.e = true;
            this.e.n = 0;
            this.d = new GridAnimationPhaseSettings();
            this.d.l = 0;
            this.d.e = true;
            this.d.n = 0;
        }
        get h() {
            return this.g;
        }
        p() {
            let a = GridAnimationManager.o;
            GridAnimationManager.o++;
            return a;
        }
        ar() {
            this.i = true;
            this.l = new List$1(Number_$type, 0);
        }
        m() {
            this.i = false;
            return this.l;
        }
        w(a) {
            if (this.i) {
                this.l.add(a);
            }
            if (this.animationCreated != null) {
                this.animationCreated(this, ((() => {
                    let $ret = new GridAnimationManagerAnimationCreatedEventArgs();
                    $ret.a = a;
                    return $ret;
                })()));
            }
        }
        u(a) {
            if (this.i) {
                this.l.remove(a);
            }
            if (this.animationCanceled != null) {
                this.animationCanceled(this, ((() => {
                    let $ret = new GridAnimationManagerAnimationCanceledEventArgs();
                    $ret.a = a;
                    return $ret;
                })()));
            }
        }
        v(a) {
            if (this.i) {
                this.l.remove(a);
            }
            if (this.animationCompleted != null) {
                this.animationCompleted(this, ((() => {
                    let $ret = new GridAnimationManagerAnimationCompletedEventArgs();
                    $ret.a = a;
                    return $ret;
                })()));
            }
        }
        aq(a, b, c, d, e) {
            if (c == null) {
                return;
            }
            let f = this.p();
            this.w(f);
            let g;
            let h;
            let i = a.a2.f(c.o);
            if (i == null) {
                return;
            }
            let j = new GridEffectGroup(1);
            j.effectsFinished = delegateCombine(j.effectsFinished, (k, l) => {
                i.e8 = 5;
                c.a = 5;
                a.model.bk = false;
                a.sl();
                a.rh(i);
                this.v(f);
            });
            j.effectsCanceled = delegateCombine(j.effectsCanceled, (k, l) => {
                a.model.bk = false;
                a.rg(i);
                this.u(f);
            });
            if (d) {
                if (i.fe != null && i.fe.n != null) {
                    g = i.fe.n;
                }
                else if (b != null && b.n != null) {
                    g = b.n;
                }
                else {
                    g = this.g.n;
                }
                if (i.fe != null && i.fe.m != null) {
                    h = i.fe.m;
                }
                else if (b != null && b.m != null) {
                    h = b.m;
                }
                else {
                    h = this.g.m;
                }
            }
            else {
                if (i.fe != null && i.fe.x != null) {
                    g = i.fe.x;
                }
                else if (b != null && b.x != null) {
                    g = b.x;
                }
                else {
                    g = this.g.x;
                }
                if (i.fe != null && i.fe.w != null) {
                    h = i.fe.w;
                }
                else if (b != null && b.w != null) {
                    h = b.w;
                }
                else {
                    h = this.g.w;
                }
            }
            let k = a.bz;
            if (!d) {
                k = a.b0;
            }
            if (k == 0) {
                k = i.e4();
            }
            if (e == 3 || e == 0) {
                switch (k) {
                    case 2:
                    case 4:
                    case 5:
                    case 7:
                    case 9:
                    case 10:
                    case 6:
                        c.h = -1;
                        break;
                    case 3:
                    case 8:
                        c.h = 1;
                        break;
                }
            }
            a.model.bk = true;
            let l = new ColumnEffect();
            l.bx(g);
            l.al = true;
            l.bq = 0;
            l.x = (m, n, o, p, q) => {
                let r = o;
                let s = n;
                let t = p;
                t.h = s + (r - s) * m;
            };
            l.o = (m, n) => c.h;
            j.g(l);
            a.c9.u(c, l);
            let m = new ColumnCellsEffect();
            m.t = 1;
            m.bx(h);
            m.al = true;
            m.bq = 0;
            m.x = (n, o, p, q, r) => {
                let s = p;
                let t = o;
                let u = q;
                switch (k) {
                    case 6:
                    case 2:
                    case 3:
                    case 7:
                    case 8:
                        u.b5 = t + (s - t) * n;
                        break;
                    case 4:
                    case 5:
                    case 9:
                    case 10:
                        u.b9 = t + (s - t) * n;
                        break;
                }
            };
            m.o = (n, o) => {
                let p = n;
                let q = p.b5;
                if (k == 4 || k == 5 || k == 9 || k == 10) {
                    q = p.b9;
                }
                if (e == 0 || e == 3) {
                    switch (k) {
                        case 6:
                            q = 0;
                            p.b5 = q;
                            p.ca = q;
                            p.b4 = 0;
                            p.b9 = 0;
                            break;
                        case 2:
                        case 7:
                            q = -1;
                            p.b5 = q;
                            p.b4 = 0;
                            p.ca = 0;
                            p.b9 = 0;
                            break;
                        case 3:
                        case 8:
                            q = 1;
                            p.b5 = q;
                            p.b4 = 0;
                            p.ca = 0;
                            p.b9 = 0;
                            break;
                        case 4:
                        case 9:
                            q = (a.jl + a.model.ci) * -1;
                            p.b9 = q;
                            p.b4 = 0;
                            p.b5 = 0;
                            p.ca = 0;
                            break;
                        case 5:
                        case 10:
                            q = (a.jl + a.model.ci) * 1;
                            p.b9 = q;
                            p.b4 = 0;
                            p.b5 = 0;
                            p.ca = 0;
                            break;
                    }
                }
                return q;
            };
            if (a.model.bm()) {
                m.g = new CellPath(0, 0, c.m, a.model.bf.x, a.model.bf.w);
                m.e = new CellPath(0, 0, c.m, a.model.be.x, a.model.be.w);
            }
            j.g(m);
            if (k == 4 || k == 9) {
                m.ao = true;
            }
            a.c9.t(c, m);
            let n = new ColumnCellsEffect();
            n.t = 2;
            n.bx(h);
            n.al = true;
            n.bq = 1;
            n.x = (o, p, q, r, s) => {
                let t = q;
                let u = p;
                let v = r;
                let w = u + (t - u) * o;
                if (w < 0) {
                    w = 0;
                }
                v.b1 = w;
            };
            n.o = (o, p) => {
                let q = o;
                if (e == 0 || e == 3) {
                    switch (k) {
                        case 10:
                        case 7:
                        case 8:
                        case 9:
                            q.b1 = -1;
                            break;
                        case 6:
                            q.b1 = 0;
                            break;
                    }
                }
                return q.b1;
            };
            if (a.model.bm()) {
                n.g = new CellPath(0, 0, c.m, a.model.bf.x, a.model.bf.w);
                n.e = new CellPath(0, 0, c.m, a.model.be.x, a.model.be.w);
            }
            j.g(n);
            if (k == 4 || k == 9) {
                n.ao = true;
            }
            a.c9.t(c, n);
        }
        ai(a, b, c, d, e) {
            if (c == null || d == null) {
                return;
            }
            let f = this.p();
            this.w(f);
            c.a = 2;
            d.a = 1;
            let g;
            let h;
            let i = a.a2.f(d.o);
            let j = a.a2.f(c.o);
            if (i == null || j == null) {
                return;
            }
            if (i.fe != null && i.fe.o != null) {
                g = i.fe.o;
            }
            else if (j.fe != null && j.fe.o != null) {
                g = j.fe.o;
            }
            else if (b != null && b.x != null) {
                g = b.o;
            }
            else {
                g = this.g.o;
            }
            if (i.fe != null && i.fe.p != null) {
                h = i.fe.p;
            }
            else if (j.fe != null && j.fe.p != null) {
                h = j.fe.p;
            }
            else if (b != null && b.p != null) {
                h = b.p;
            }
            else {
                h = this.g.p;
            }
            let k = a.a4;
            if (k == 0) {
                k = i.et();
            }
            let l = false;
            if (k == 2 || k == 7) {
                l = true;
            }
            if (l) {
                d.h = 1;
            }
            else {
                d.h = -1;
            }
            if (this.k.containsKey(c.o)) {
                this.k.addItem(d.o, new List$1(Delegate_$type, 0));
                this.k.item(c.o).add(() => {
                    c = a.model.g(c.o);
                    d = a.model.g(d.o);
                    if (c == null || d == null) {
                        return;
                    }
                    j.e8 = 2;
                    c.a = 2;
                    i.e8 = 1;
                    d.a = 1;
                    this.x(a, c, d, g, h, i, j, k, l, f);
                });
            }
            else {
                this.k.addItem(d.o, new List$1(Delegate_$type, 0));
                this.x(a, c, d, g, h, i, j, k, l, f);
            }
        }
        x(a, b, c, d, e, f, g, h, i, j) {
            if (b == null || c == null) {
                return;
            }
            let k = new GridEffectGroup(1);
            k.effectsFinished = delegateCombine(k.effectsFinished, (l, m) => {
                let n = a.model.g(b.o);
                let o = a.model.g(c.o);
                let p = new GridEffectGroup(1);
                p.effectsFinished = delegateCombine(p.effectsFinished, (q, r) => {
                    g.e8 = 3;
                    b.a = 3;
                    a.columns.remove(g);
                    f.e8 = 5;
                    c.a = 5;
                    a.model.bk = false;
                    a.sl();
                    if (this.k.containsKey(c.o)) {
                        let s = this.k.item(c.o);
                        if (s.count == 0) {
                            this.k.removeItem(c.o);
                        }
                        else {
                            let t = s._inner[0];
                            s.removeAt(0);
                            t();
                        }
                    }
                    a.q8(f);
                    this.v(j);
                });
                p.effectsCanceled = delegateCombine(p.effectsCanceled, (q, r) => {
                    a.model.bk = false;
                    a.q7(f);
                    this.u(j);
                });
                this.t(a, n, o, d, g, i, p);
                this.s(a, n, o, d, f, g, i, p);
            });
            k.effectsCanceled = delegateCombine(k.effectsCanceled, (l, m) => {
                a.q7(f);
                let n = new GridEffectGroup(1);
                n.effectsFinished = delegateCombine(n.effectsFinished, (o, p) => {
                    g.e8 = 3;
                    b.a = 3;
                    a.columns.remove(g);
                    a.model.bk = false;
                    a.sl();
                });
                n.effectsCanceled = delegateCombine(n.effectsCanceled, (o, p) => a.model.bk = false);
                let o = a.model.g(b.o);
                let p = a.model.g(c.o);
                this.t(a, o, p, d, g, i, n);
            });
            let l = new ColumnCellsEffect();
            l.t = 1;
            l.bx(e);
            l.al = true;
            k.g(l);
            if (c.d != 0) {
                a.model.bk = true;
            }
            if (i) {
                l.bq = -1 - b.h;
            }
            else {
                l.bq = 1 + b.h;
            }
            let m = false;
            switch (h) {
                case 4:
                case 9:
                    l.bq = (a.jl + a.model.ci) * -1;
                    m = true;
                    break;
                case 5:
                case 10:
                    l.bq = (a.jl + a.model.ci) * 1;
                    m = true;
                    break;
            }
            if (m) {
                l.bi = 0;
            }
            l.x = (n, o, p, q, r) => {
                let s = p;
                let t = o;
                let u = q;
                switch (h) {
                    case 2:
                    case 3:
                    case 7:
                    case 8:
                        u.b5 = t + (s - t) * n;
                        break;
                    case 4:
                    case 5:
                    case 9:
                    case 10:
                        u.b9 = t + (s - t) * n;
                        break;
                }
            };
            l.o = (n, o) => {
                let p = n;
                let q = p.b5;
                if (h == 4 || h == 5 || h == 9 || h == 10) {
                    q = p.b9;
                }
                if (h == 6) {
                    q = 0;
                }
                switch (h) {
                    case 2:
                    case 7:
                    case 6:
                        p.b5 = q;
                        p.b4 = 0;
                        p.ca = 0;
                        p.b9 = 0;
                        break;
                    case 3:
                    case 8:
                        p.b5 = q;
                        p.b4 = 0;
                        p.ca = 0;
                        p.b9 = 0;
                        break;
                    case 4:
                    case 9:
                        q = p.b9;
                        p.b9 = q;
                        p.b4 = 0;
                        p.b5 = 0;
                        p.ca = 0;
                        break;
                    case 5:
                    case 10:
                        q = p.b9;
                        p.b9 = q;
                        p.b4 = 0;
                        p.b5 = 0;
                        p.ca = 0;
                        break;
                }
                return q;
            };
            if (a.model.bm()) {
                l.g = new CellPath(0, 0, b.m, a.model.bf.x, a.model.bf.w);
                l.e = new CellPath(0, 0, b.m, a.model.be.x, a.model.be.w);
            }
            l.onFinished = delegateCombine(l.onFinished, (n) => {
            });
            if (h == 4 || h == 9) {
                l.ao = true;
            }
            a.c9.t(b, l);
            let n = new ColumnCellsEffect();
            n.t = 1;
            n.bx(e);
            n.al = true;
            k.g(n);
            if (i) {
                n.bq = -1;
            }
            else {
                n.bq = 1;
            }
            if (m) {
                n.bq = 0;
            }
            if (m) {
                n.bi = 0;
            }
            n.x = (o, p, q, r, s) => {
                let t = q;
                let u = p;
                let v = r;
                switch (h) {
                    case 2:
                    case 3:
                    case 7:
                    case 8:
                        v.b5 = u + (t - u) * o;
                        break;
                    case 4:
                    case 5:
                    case 9:
                    case 10:
                        v.b9 = u + (t - u) * o;
                        break;
                }
            };
            n.o = (o, p) => {
                let q = o;
                let r = q.b5;
                if (h == 4 || h == 5 || h == 9 || h == 10) {
                    r = q.b9;
                }
                if (h == 6) {
                    r = n.bq;
                }
                else {
                    r = 0;
                }
                switch (h) {
                    case 2:
                    case 7:
                    case 6:
                        q.b5 = r;
                        q.b4 = 0;
                        q.ca = 0;
                        q.b9 = 0;
                        break;
                    case 3:
                    case 8:
                        q.b5 = r;
                        q.b4 = 0;
                        q.ca = 0;
                        q.b9 = 0;
                        break;
                    case 4:
                    case 9:
                        r = (a.jl + a.model.ci) * 1;
                        q.b9 = r;
                        q.b4 = 0;
                        q.b5 = 1;
                        q.ca = 0;
                        break;
                    case 5:
                    case 10:
                        r = (a.jl + a.model.ci) * -1;
                        q.b9 = r;
                        q.b4 = 0;
                        q.b5 = 1;
                        q.ca = 0;
                        break;
                }
                return r;
            };
            if (a.model.bm()) {
                n.g = new CellPath(0, 0, c.m, a.model.bf.x, a.model.bf.w);
                n.e = new CellPath(0, 0, c.m, a.model.be.x, a.model.be.w);
            }
            if (h == 5 || h == 10) {
                n.ao = true;
            }
            a.c9.t(c, n);
            let o = new ColumnCellsEffect();
            o.t = 2;
            o.bx(e);
            o.al = true;
            o.bq = 0;
            k.g(o);
            if (h != 6 && h != 10 && h != 7 && h != 9) {
                o.bq = 1;
            }
            o.x = (p, q, r, s, t) => {
                let u = r;
                let v = q;
                let w = s;
                w.b6 = v + (u - v) * p;
            };
            o.o = (p, q) => {
                let r = p;
                let s = r.b6;
                return s;
            };
            if (a.model.bm()) {
                o.g = new CellPath(0, 0, b.m, a.model.bf.x, a.model.bf.w);
                o.e = new CellPath(0, 0, b.m, a.model.be.x, a.model.be.w);
            }
            o.onFinished = delegateCombine(o.onFinished, (p) => {
            });
            if (h == 5 || h == 10) {
                o.ao = true;
            }
            a.c9.t(b, o);
            let p = new ColumnCellsEffect();
            p.t = 2;
            p.bx(e);
            p.al = true;
            p.bq = 1;
            k.g(p);
            p.x = (q, r, s, t, u) => {
                let v = s;
                let w = r;
                let x = t;
                x.b6 = w + (v - w) * q;
            };
            p.o = (q, r) => {
                let s = q;
                let t = s.b6;
                if (h == 6 || h == 10 || h == 8 || h == 7 || h == 9) {
                    t = 0;
                }
                s.b6 = t;
                return t;
            };
            if (a.model.bm()) {
                p.g = new CellPath(0, 0, c.m, a.model.bf.x, a.model.bf.w);
                p.e = new CellPath(0, 0, c.m, a.model.be.x, a.model.be.w);
            }
            if (h == 5 || h == 10) {
                p.ao = true;
            }
            a.c9.t(c, p);
        }
        t(a, b, c, d, e, f, g) {
            if (b == null) {
                return;
            }
            let h = new ColumnEffect();
            h.bx(d);
            h.al = true;
            g.g(h);
            if (f) {
                h.bq = -1;
            }
            else {
                h.bq = 1;
            }
            h.x = (i, j, k, l, m) => {
                let n = k;
                let o = j;
                let p = l;
                p.h = o + (n - o) * i;
            };
            h.o = (i, j) => {
                if (this.j(b, c)) {
                    b.h = h.bq;
                    return h.bq;
                }
                return b.h;
            };
            a.c9.u(b, h);
        }
        s(a, b, c, d, e, f, g, h) {
            if (c == null) {
                return;
            }
            let i = new ColumnEffect();
            i.bx(d);
            i.al = true;
            i.bq = 0;
            h.g(i);
            i.x = (j, k, l, m, n) => {
                let o = l;
                let p = k;
                let q = m;
                q.h = p + (o - p) * j;
            };
            i.o = (j, k) => {
                if (this.j(b, c)) {
                    c.h = i.bq;
                    return c.h;
                }
                return c.h;
            };
            a.c9.u(c, i);
            let j = new ColumnCellsEffect();
            j.bx(d);
            j.al = true;
            j.bq = 0;
            h.g(j);
            j.x = (k, l, m, n, o) => {
                let p = m;
                let q = l;
                let r = n;
                r.b5 = q + (p - q) * k;
            };
            j.o = (k, l) => {
                let m = k;
                if (this.j(b, c)) {
                    m.b5 = j.bq;
                    return m.b5;
                }
                return m.b5;
            };
            a.c9.t(c, j);
        }
        j(a, b) {
            if (a == null) {
                return true;
            }
            if (b == null) {
                return true;
            }
            if (a.b == null && b.b == null) {
                return true;
            }
            if (a.b == null && (b.b.c && b.b.f == 1)) {
                return true;
            }
            if ((a.b.c && a.b.f == 1) && b.b == null) {
                return true;
            }
            if (a.b.c && b.b.c && a.b.f == b.b.f) {
                return true;
            }
            if (!a.b.c && !b.b.c && a.b.f == b.b.f) {
                return true;
            }
            return false;
        }
        ag(a, b, c, d) {
            if (c == null) {
                return;
            }
            let e = a.a2.f(c.o);
            if (e == null) {
                return;
            }
            let f = this.p();
            this.w(f);
            let g;
            if (e.fe != null && e.fe.v != null) {
                g = e.fe.v;
            }
            else if (b != null && b.v != null) {
                g = b.v;
            }
            else {
                g = this.g.v;
            }
            let h = new ColumnEffect();
            h.bx(g);
            h.al = true;
            h.bq = d;
            h.onFinished = delegateCombine(h.onFinished, (i) => this.v(f));
            h.onCanceled = delegateCombine(h.onCanceled, (i, j) => this.u(f));
            h.x = (i, j, k, l, m) => {
                let n = k;
                let o = j;
                let p = l;
                let q = o + (n - o) * i;
                let r = ((() => {
                    let $ret = new ColumnWidth();
                    $ret.f = q;
                    $ret.c = false;
                    return $ret;
                })());
                if (!isNaN_(e.gm)) {
                    r.e = e.gm;
                }
                e.width = r;
            };
            h.o = (i, j) => c.k;
            if (!a.hp(e)) {
                h.ba = 0;
            }
            a.c9.u(c, h);
        }
        ak(a, b, c, d) {
            if (c == null) {
                return;
            }
            let e = this.p();
            this.w(e);
            let f;
            let g;
            let h = a.a2.f(c.o);
            if (h == null) {
                return;
            }
            if (h.fe != null && h.fe.t != null) {
                f = h.fe.t;
            }
            else if (b != null && b.t != null) {
                f = b.t;
            }
            else {
                f = this.g.t;
            }
            if (h.fe != null && h.fe.s != null) {
                g = h.fe.s;
            }
            else if (b != null && b.w != null) {
                g = b.s;
            }
            else {
                g = this.g.s;
            }
            let i = a.bd;
            let j = new GridEffectGroup(1);
            j.effectsFinished = delegateCombine(j.effectsFinished, (k, l) => {
                let m = a.model.g(c.o);
                let n = a.model.bt(m);
                for (let o = 0; o < n.count; o++) {
                    a.model.cz(n._inner[o]);
                }
                h.e8 = 5;
                a.sl();
                a.re(h);
                this.v(e);
            });
            j.effectsCanceled = delegateCombine(j.effectsCanceled, (k, l) => {
                a.rd(h);
                this.u(e);
            });
            if (i == 0) {
                i = 2;
            }
            let k = 0;
            let l = c.h;
            c.h = 0;
            k = a.e6.k(c.m, a, a.model);
            c.h = l;
            let m = a.e6.j(h.gw, a.model);
            let n = m;
            let o = false;
            if (c.n < h.gw) {
                o = true;
            }
            let p = null;
            if (d != 6) {
                p = a.model.h(n, c, (c.k + a.model.cc) - c.f(a.model), c.b == null || c.b.c, o);
            }
            let q = a.model.bt(c);
            for (let r = 0; r < q.count; r++) {
                q._inner[r].e = true;
            }
            let s = c.m;
            let t = null;
            let u = a.model.bw;
            if (u._inner[s].count > 0) {
                for (let v = 0; v < u._inner[s].count; v++) {
                    if (u._inner[s]._inner[v].n == c.o) {
                        t = u._inner[s]._inner[v];
                        break;
                    }
                }
            }
            let w;
            if (t != null) {
                w = t;
                w.e = false;
            }
            else {
                w = a.model.h(s, c, 0, c.b == null || c.b.c, !o);
                w.e = false;
            }
            let x = h.gv;
            let y = GridAnimationManager.as(a.model, c, h, k, x);
            k = y.p3;
            x = y.p4;
            let z = k - x;
            let aa = -1 * z;
            c.h = aa / c.k;
            c.a = 6;
            let ab = new ColumnEffect();
            ab.bx(f);
            ab.al = true;
            ab.bq = 0;
            let ac = c.k;
            let ad = false;
            let ae = 0;
            let af = c.m;
            let ag = a.e6.k(c.m, a, a.model);
            let ah = this.n(a, c, c.m);
            ag = this.q(a, c, ag, a.model.bt(c), ah);
            j.g(ab);
            ab.x = (ai, aj, ak, al, am) => {
                let an = ak;
                let ao = aj;
                let ap = al;
                ap.h = ao + (an - ao) * ai;
                if (ap.k > 0) {
                    let aq = a.e6.l(ap.m, am, true);
                    x = h.gv;
                    let ar = GridAnimationManager.as(a.model, c, h, aq, x);
                    aq = ar.p3;
                    x = ar.p4;
                    if (aq - x != z) {
                        let as = aq - x;
                        let at = z - as;
                        let au = ae + (at / ap.k);
                        let av = au / (1 - ai);
                        ab.by(av, am, ap.o);
                        ap.h = au;
                        ae = au;
                        z = as;
                        ap.h = av + (an - av) * ai;
                    }
                    if (!ad) {
                        let aw = a.model.bs(ap);
                        for (let ax = 0; ax < aw.count; ax++) {
                            let ay = aw._inner[ax];
                            ay.b5 += (ae - ap.h);
                        }
                    }
                    ae = ap.h;
                    af = ap.m;
                    let az = a.model.bt(ap);
                    ah = this.n(a, ap, ap.m);
                    ag = this.q(a, ap, ag, az, ah);
                }
            };
            ab.o = (ai, aj) => {
                ae = c.h;
                return c.h;
            };
            a.c9.u(c, ab);
            let ai = new ColumnCellsEffect();
            ai.ar = true;
            ai.bx(g);
            ai.al = true;
            ai.bq = 0;
            j.g(ai);
            ai.x = (aj, ak, al, am, an) => {
                if (aj > 0) {
                    ad = true;
                }
                if (ad) {
                    let ao = al;
                    let ap = ak;
                    let aq = am;
                    let ar = ap + (ao - ap) * aj;
                    aq.b5 = ar;
                }
            };
            ai.o = (aj, ak) => {
                let al = aj;
                return al.b5;
            };
            if (a.model.bm()) {
                ai.g = new CellPath(0, 0, c.m, a.model.bf.x, a.model.bf.w);
                ai.e = new CellPath(0, 0, c.m, a.model.be.x, a.model.be.w);
            }
            a.c9.t(c, ai);
        }
        static as(a, b, c, d, e) {
            if (a.b3 > a.b0) {
                if (b.d == 1) {
                    e += truncate(a.b0);
                    d += truncate(a.b3);
                }
                else if (b.d == 0 && c.fj == 1) {
                    e += truncate(a.b3);
                    d += truncate(a.b0);
                }
            }
            if (a.b6 < a.absoluteWidth - a.b1) {
                let f = a.absoluteWidth - a.b1 - a.b6;
                if (b.d == 2) {
                    d -= truncate(f);
                }
                else if (b.d == 0 && c.fj == 2) {
                    e -= truncate(f);
                }
            }
            return {
                p3: d,
                p4: e
            };
        }
        q(a, b, c, d, e) {
            if (e > 0) {
                let f = 0;
                for (let g = 0; g < d.count; g++) {
                    if (!d._inner[g].e) {
                        if (e > d._inner[g].i) {
                            f = Math.abs(d._inner[g].i - e);
                            d._inner[g].i = e;
                        }
                    }
                }
                let h = 0;
                for (let i = 0; i < d.count; i++) {
                    if (d._inner[i].e) {
                        h += d._inner[i].i;
                    }
                }
                let j = h - f;
                if (j < 0) {
                    j = 0;
                }
                let k = 1;
                if (h == 0) {
                    k = 0;
                }
                else {
                    k = j / h;
                }
                for (let l = 0; l < d.count; l++) {
                    if (d._inner[l].e) {
                        d._inner[l].i = d._inner[l].i * k;
                    }
                }
            }
            if (b.o == 0) {
                c = a.e6.k(b.m, a, a.model);
            }
            return c;
        }
        n(a, b, c) {
            let d = a.e6.l(c, a.model, true);
            let e = d + b.k;
            let f = a.e6.l(b.m, a.model, false);
            if (d > f) {
                return Math.max(0, (f + b.k) - d);
            }
            else {
                return Math.max(0, (d + b.k) - f);
            }
        }
        aj(a, b, c, d, e) {
            if (c == null) {
                return;
            }
            let f = this.p();
            this.w(f);
            let g;
            let h;
            let i = a.a2.f(c.o);
            if (i == null) {
                return;
            }
            if (i.fe != null && i.fe.q != null) {
                g = i.fe.q;
            }
            else if (b != null && b.q != null) {
                g = b.q;
            }
            else {
                g = this.g.q;
            }
            if (i.fe != null && i.fe.r != null) {
                h = i.fe.r;
            }
            else if (b != null && b.r != null) {
                h = b.r;
            }
            else {
                h = this.g.r;
            }
            let j = a.ba;
            let k = new GridEffectGroup(1);
            k.effectsFinished = delegateCombine(k.effectsFinished, (l, m) => {
                i.e8 = 3;
                c.a = 3;
                if (i.f4) {
                    a.externalGrid.ensureColumnsAreManual();
                    a.externalGrid.removeExternalColumn(i.externalObject);
                }
                a.model.bk = false;
                a.sl();
                a.ra(i);
                this.v(f);
            });
            k.effectsCanceled = delegateCombine(k.effectsCanceled, (l, m) => {
                a.model.bk = false;
                a.q9(i);
                this.u(f);
            });
            if (j == 0) {
                j = i.eu();
            }
            let l = 0;
            switch (j) {
                case 2:
                case 7:
                    l = -1;
                    break;
                case 3:
                case 8:
                    l = 1;
                    break;
                case 4:
                case 9:
                    l = (a.jl + a.model.ci) * -1;
                    break;
                case 5:
                case 10:
                    l = (a.jl + a.model.ci) * 1;
                    break;
            }
            a.model.bk = true;
            let m = new ColumnCellsEffect();
            m.bx(g);
            m.t = 1;
            m.al = true;
            m.bq = l;
            k.g(m);
            m.x = (n, o, p, q, r) => {
                let s = p;
                let t = o;
                let u = q;
                switch (j) {
                    case 2:
                    case 3:
                    case 7:
                    case 8:
                        u.b5 = t + (s - t) * n;
                        break;
                    case 4:
                    case 5:
                    case 9:
                    case 10:
                        u.b9 = t + (s - t) * n;
                        break;
                }
            };
            m.o = (n, o) => {
                let p = n;
                let q = p.b5;
                if (j == 4 || j == 5) {
                    q = p.b9;
                }
                return q;
            };
            if (a.model.bm()) {
                m.g = new CellPath(0, 0, c.m, a.model.bf.x, a.model.bf.w);
                m.e = new CellPath(0, 0, c.m, a.model.be.x, a.model.be.w);
            }
            if (j == 5 || j == 10) {
                m.ao = true;
            }
            a.c9.t(c, m);
            let n = 0;
            switch (j) {
                case 2:
                case 4:
                case 5:
                case 7:
                case 9:
                case 10:
                case 6:
                    n = -1;
                    break;
                case 3:
                case 8:
                    n = 1;
                    break;
            }
            let o = new ColumnEffect();
            o.bx(h);
            o.al = true;
            o.bq = n;
            k.g(o);
            o.x = (p, q, r, s, t) => {
                let u = r;
                let v = q;
                let w = s;
                w.h = v + (u - v) * p;
            };
            o.o = (p, q) => c.h;
            a.c9.u(c, o);
            let p = new ColumnCellsEffect();
            p.t = 2;
            p.bx(g);
            p.al = true;
            if (j == 6 || j == 10 || j == 7 || j == 8 || j == 9) {
                p.bq = 0;
            }
            else {
                p.bq = 1;
            }
            p.x = (q, r, s, t, u) => {
                let v = s;
                let w = r;
                let x = t;
                let y = w + (v - w) * q;
                if (y < 0) {
                    y = 0;
                }
                x.b1 = y;
            };
            p.o = (q, r) => {
                let s = q;
                if (e == 0 || e == 3) {
                    switch (j) {
                        case 10:
                        case 7:
                        case 8:
                        case 9:
                            s.b1 = 1;
                            break;
                        case 6:
                            s.b1 = 1;
                            break;
                    }
                }
                return s.b1;
            };
            if (a.model.bm()) {
                p.g = new CellPath(0, 0, c.m, a.model.bf.x, a.model.bf.w);
                p.e = new CellPath(0, 0, c.m, a.model.be.x, a.model.be.w);
            }
            k.g(p);
            if (j == 5 || j == 10) {
                p.ao = true;
            }
            a.c9.t(c, p);
        }
        r(a, b, c, d, e, f, g, h, i, j) {
            if (!a.model.bm()) {
                return;
            }
            let k = this.p();
            this.w(k);
            let l = this.g.u;
            if (a.cz != null && a.cz.u != null) {
                l = a.cz.u;
            }
            let m = a.columnPropertyUpdatingAnimationMode;
            let n = new ColumnCellsEffect();
            n.bx(l);
            n.t = 7;
            n.as = true;
            if (g) {
                n.v = 5;
            }
            if (j) {
                n.v = 6;
            }
            n.bs = c;
            n.al = true;
            n.bq = f;
            n.onFinished = delegateCombine(n.onFinished, (o) => this.v(k));
            n.onCanceled = delegateCombine(n.onCanceled, (o, p) => this.u(k));
            if (m == 0) {
                m = 2;
            }
            if (d == 11) {
                n.x = (o, p, q, r, s) => {
                    let t = r;
                    if (g != t.k.g) {
                        return;
                    }
                    if ((h && !t.k.as) || (!h && t.k.as)) {
                        return;
                    }
                    if ((j && !t.k.h) || (!j && t.k.h)) {
                        return;
                    }
                    t.ju(c, q);
                };
            }
            if (d == 5 || d == 4 || d == 9 || d == 8 || (m != 3 && (d == 7 || d == 1 || d == 3))) {
                n.x = (o, p, q, r, s) => {
                    let t = r;
                    if (g != t.k.g) {
                        return;
                    }
                    if ((h && !t.k.as) || (!h && t.k.as)) {
                        return;
                    }
                    if ((j && !t.k.h) || (!j && t.k.h)) {
                        return;
                    }
                    if (o > 0.5) {
                        t.ju(c, q);
                    }
                    else {
                        t.ju(c, p);
                    }
                };
            }
            if (m == 3 && d == 1) {
                n.x = (o, p, q, r, s) => {
                    let t = r;
                    if (g != t.k.g) {
                        return;
                    }
                    if ((h && !t.k.as) || (!h && t.k.as)) {
                        return;
                    }
                    if ((j && !t.k.h) || (!j && t.k.h)) {
                        return;
                    }
                    let u = p;
                    let v = q;
                    let w = u + (v - u) * o;
                    t.ju(c, w);
                };
            }
            if (d == 0) {
                n.x = (o, p, q, r, s) => {
                    let t = r;
                    if (g != t.k.g) {
                        return;
                    }
                    if ((h && !t.k.as) || (!h && t.k.as)) {
                        return;
                    }
                    if ((j && !t.k.h) || (!j && t.k.h)) {
                        return;
                    }
                    let u = p;
                    let v = q;
                    let w = u + (v - u) * o;
                    t.ju(c, w);
                };
            }
            if (d == 2) {
                n.x = (o, p, q, r, s) => {
                    let t = r;
                    if (g != t.k.g) {
                        return;
                    }
                    if ((h && !t.k.as) || (!h && t.k.as)) {
                        return;
                    }
                    if ((j && !t.k.h) || (!j && t.k.h)) {
                        return;
                    }
                    let u = p;
                    let v = q;
                    let w = BrushUtil.k(u, o, v, 0);
                    t.ju(c, w);
                };
            }
            if (d == 3) {
                n.x = (o, p, q, r, s) => {
                    let t = r;
                    if (g != t.k.g) {
                        return;
                    }
                    if ((h && !t.k.as) || (!h && t.k.as)) {
                        return;
                    }
                    if ((j && !t.k.h) || (!j && t.k.h)) {
                        return;
                    }
                    let u = p;
                    let v = q;
                    if (u != null) {
                        u.t(a.externalGrid.renderer);
                    }
                    if (v != null) {
                        v.t(a.externalGrid.renderer);
                    }
                    let w = new FontInfo();
                    FontUtil.interpolateFont(w, o, u, v);
                    t.ju(c, w);
                };
            }
            if (d == 6) {
                n.x = (o, p, q, r, s) => {
                    let t = r;
                    if (g != t.k.g) {
                        return;
                    }
                    if ((h && !t.k.as) || (!h && t.k.as)) {
                        return;
                    }
                    if ((j && !t.k.h) || (!j && t.k.h)) {
                        return;
                    }
                    let u = typeGetValue(p);
                    let v = typeGetValue(q);
                    let w = truncate((Math.round(u + (v - u) * o)));
                    t.ju(c, w);
                };
            }
            n.o = (o, p) => {
                let q = o;
                return q.gn(c);
            };
            if (a.model.bm()) {
                if (h) {
                    n.g = new CellPath(0, 0, -300, a.model.bf.x, a.model.bf.w);
                    n.e = new CellPath(0, 0, -300, a.model.be.x, a.model.be.w);
                }
                else if (i) {
                    n.g = new CellPath(0, 0, -400, a.model.bf.x, a.model.bf.w);
                    n.e = new CellPath(0, 0, -400, a.model.be.x, a.model.be.w);
                }
                else {
                    n.g = new CellPath(0, 0, b.m, a.model.bf.x, a.model.bf.w);
                    n.e = new CellPath(0, 0, b.m, a.model.be.x, a.model.be.w);
                }
            }
            if (!a.ho || d == 11) {
                n.ba = 0;
            }
            if (h) {
                a.c9.x(n);
            }
            else if (i) {
                a.c9.y(n);
            }
            else {
                a.c9.t(b, n);
            }
        }
        al(a, b, c) {
            let d = this.p();
            this.w(d);
            let e = this.e;
            let f = a.model;
            let g = new GridEffectGroup(1);
            g.effectsCanceled = delegateCombine(g.effectsCanceled, (h, i) => this.u(d));
            g.effectsFinished = delegateCombine(g.effectsFinished, (h, i) => this.v(d));
            for (let h = b; h <= c; h++) {
                let i = new RowCellsEffect();
                g.g(i);
                i.t = 6;
                i.bx(e);
                i.al = true;
                i.bq = 1;
                i.x = (j, k, l, m, n) => {
                };
                i.o = (j, k) => {
                    let l = j;
                    if (l.k.ag) {
                        let m = a.d9.getDataRow(l.k);
                        l.ej = m;
                        if (m == -1) {
                            return l.ip;
                        }
                        let n = a.d9.getRowType(m);
                        if (l.a8(n)) {
                            let o = a.d9.resolveValueForPath(a, l.k);
                            let p = a.nc(l.k, a, o, m);
                            a.rw(l, o, a.d9.resolveRow(m), p);
                        }
                    }
                    return l.ip;
                };
                let j = a.eq(h);
                if (a.model.bm()) {
                    i.g = new CellPath(0, 0, a.model.cn, j.x, j.w);
                    i.e = new CellPath(0, 0, a.model.cq, j.x, j.w);
                }
                if (!a.h5) {
                    i.ba = 0;
                }
                a.c9.v(j, i);
            }
        }
        ah(a, b) {
            if (b == null) {
                return;
            }
            let c = this.p();
            this.w(c);
            let d = this.d;
            let e = a.model;
            let f = new GridEffectGroup(1);
            f.effectsFinished = delegateCombine(f.effectsFinished, (g, h) => this.v(c));
            f.effectsCanceled = delegateCombine(f.effectsCanceled, (g, h) => this.u(c));
            let g = a.a2.f(b.o);
            if (g == null) {
                return;
            }
            let h = new ColumnEffect();
            f.g(h);
            h.bx(d);
            h.al = true;
            h.bq = 1;
            h.x = (i, j, k, l, m) => {
            };
            h.o = (i, j) => {
                let k = i;
                k.g = 0;
                k.h = 0;
                k.j = 0;
                a.sl();
                return k.g;
            };
            a.c9.u(b, h);
            let i = new ColumnCellsEffect();
            f.g(i);
            i.t = 1;
            i.bx(d);
            i.al = true;
            i.bq = 1;
            i.x = (j, k, l, m, n) => {
            };
            i.o = (j, k) => {
                let l = j;
                l.b4 = 0;
                l.b5 = 0;
                l.b9 = 0;
                l.ca = 0;
                l.b1 = 1;
                return l.b4;
            };
            a.c9.t(b, i);
        }
        y(a, b, c, d) {
            let e = this.p();
            this.w(e);
            let f = this.f.f;
            if (a.cm != null && a.cm.f != null) {
                f = a.cm.f;
            }
            let g = a.al;
            let h = a.model;
            let i = new GridEffectGroup(1);
            i.effectsFinished = delegateCombine(i.effectsFinished, (j, k) => this.v(e));
            i.effectsCanceled = delegateCombine(i.effectsCanceled, (j, k) => this.u(e));
            for (let j = 0; j < h.br.count; j++) {
                let k = h.br._inner[j];
                let l = a.a2.f(k.o);
                if (l == null) {
                    continue;
                }
                let m = new ColumnCellsEffect();
                i.g(m);
                m.t = 3;
                m.bx(f);
                m.al = true;
                m.bq = 0;
                if (g == 0) {
                    g = 2;
                }
                m.x = (n, o, p, q, r) => {
                    let s = q;
                    let t = o;
                    let u = p;
                    if (s.k.ag) {
                        let v = a.a0(s.k);
                        if (a.d9.isPlaceholderValue(s.k)) {
                            n = 0;
                        }
                    }
                    s.cb = t + (u - t) * n;
                };
                m.o = (n, o) => {
                    let p = n;
                    if (p.k.ag) {
                        let q = a.d9.getDataRow(p.k);
                        p.ej = q;
                        if (q == -1) {
                            return p.cb;
                        }
                        let r = a.d9.resolveValueForPath(a, p.k);
                        let s = false;
                        if (r == null && a.d9.isPlaceholderValue(p.k)) {
                            s = true;
                        }
                        if (p.a8(a.d9.getRowType(p.k.w))) {
                            let t = a.nc(p.k, a, r, q);
                            a.rw(p, r, a.d9.resolveRow(q), t);
                        }
                        if (s) {
                            p.cb = 1;
                        }
                    }
                    return p.cb;
                };
                if (a.model.bm()) {
                    m.g = new CellPath(0, 0, k.m, a.model.bf.x, a.model.bf.w);
                    m.e = new CellPath(0, 0, k.m, a.model.be.x, a.model.be.w);
                }
                if (!a.hf || d) {
                    m.ba = 0;
                }
                a.c9.t(k, m);
            }
        }
        af(a, b, c, d, e) {
            let f = this.p();
            this.w(f);
            let g = this.f.f;
            if (a.cm != null && a.cm.f != null) {
                g = a.cm.f;
            }
            let h = a.al;
            let i = a.model;
            if (d < 0 || d >= i.br.count) {
                return;
            }
            let j = i.br._inner[d];
            let k = a.a2.f(j.o);
            if (k == null) {
                return;
            }
            let l = new ColumnCellsEffect();
            l.onFinished = delegateCombine(l.onFinished, (m) => this.v(f));
            l.onCanceled = delegateCombine(l.onCanceled, (m, n) => this.u(f));
            l.t = 3;
            l.bx(g);
            l.al = true;
            l.bq = 0;
            if (h == 0) {
                h = 2;
            }
            l.x = (m, n, o, p, q) => {
                let r = p;
                let s = n;
                let t = o;
                if (r.k.ag) {
                    let u = a.a0(r.k);
                    if (a.d9.isPlaceholderValue(r.k)) {
                        m = 0;
                    }
                }
                r.cb = s + (t - s) * m;
            };
            l.o = (m, n) => {
                let o = m;
                if (o.k.ag) {
                    let p = a.d9.getDataRow(o.k);
                    o.ej = p;
                    if (p == -1) {
                        return o.cb;
                    }
                    let q = a.d9.resolveValueForPath(a, o.k);
                    let r = false;
                    if (q == null && a.d9.isPlaceholderValue(o.k)) {
                        r = true;
                    }
                    if (o.a8(a.d9.getRowType(o.k.w))) {
                        let s = a.nc(o.k, a, q, p);
                        a.rw(o, q, a.d9.resolveRow(p), s);
                    }
                    if (r) {
                        o.cb = 1;
                    }
                }
                return o.cb;
            };
            if (a.model.bm()) {
                l.g = new CellPath(0, 0, j.m, a.model.bf.x, a.model.bf.w);
                l.e = new CellPath(0, 0, j.m, a.model.be.x, a.model.be.w);
            }
            if (!a.hf || e) {
                l.ba = 0;
            }
            a.c9.t(j, l);
        }
        an(a, b) {
            let c = this.p();
            this.w(c);
            let d = this.f.h;
            if (a.cz != null && a.cm.h != null) {
                d = a.cm.h;
            }
            let e = a.es;
            let f = a.model;
            let g = new RowCellsEffect();
            g.onFinished = delegateCombine(g.onFinished, (h) => this.v(c));
            g.onCanceled = delegateCombine(g.onCanceled, (h, i) => this.u(c));
            g.t = 5;
            g.bx(d);
            g.al = true;
            g.bq = 1;
            if (e == 0) {
                e = 2;
            }
            g.x = (h, i, j, k, l) => {
                let m = k;
                let n = i;
                let o = j;
                if (m.k.ag) {
                    m.b8 = n + (o - n) * h;
                }
                else {
                    m.b8 = 0;
                }
            };
            g.o = (h, i) => {
                let j = h;
                return j.b8;
            };
            let h = a.eq(b);
            if (a.model.bm()) {
                g.g = new CellPath(0, 0, a.model.cn, h.x, h.w);
                g.g.d = a.model.br._inner[a.model.cn].d;
                g.e = new CellPath(0, 0, a.model.cq, h.x, h.w);
                g.e.d = a.model.br._inner[a.model.cq].d;
            }
            if (!a.h5 || a.dragger.isDragActive) {
                g.ba = 0;
            }
            a.c9.v(h, g);
        }
        ap(a, b) {
            let c = this.p();
            this.w(c);
            let d = this.f.h;
            if (a.cz != null && a.cm.h != null) {
                d = a.cm.h;
            }
            let e = a.es;
            let f = a.model;
            let g = new RowCellsEffect();
            g.onFinished = delegateCombine(g.onFinished, (h) => this.v(c));
            g.onCanceled = delegateCombine(g.onCanceled, (h, i) => this.u(c));
            g.t = 5;
            g.bx(d);
            g.al = true;
            g.bq = 0;
            if (e == 0) {
                e = 2;
            }
            g.x = (h, i, j, k, l) => {
                let m = k;
                let n = i;
                let o = j;
                if (m.k.ag) {
                    m.b8 = n + (o - n) * h;
                }
                else {
                    m.b8 = 0;
                }
            };
            g.o = (h, i) => {
                let j = h;
                return j.b8;
            };
            let h = a.eq(b);
            if (a.model.bm()) {
                g.g = new CellPath(0, 0, a.model.cn, h.x, h.w);
                g.g.d = a.model.br._inner[a.model.cn].d;
                g.e = new CellPath(0, 0, a.model.cq, h.x, h.w);
                g.e.d = a.model.br._inner[a.model.cq].d;
            }
            if (!a.h5 || a.dragger.isDragActive) {
                g.ba = 0;
            }
            a.c9.v(h, g);
        }
        ad(a, b, c, d) {
            let e = this.p();
            this.w(e);
            let f = this.f.h;
            if (a.cm != null && a.cm.h != null) {
                f = a.cm.h;
            }
            let g = a.model;
            let h = new CellEffect();
            h.onFinished = delegateCombine(h.onFinished, (i) => this.v(e));
            h.onCanceled = delegateCombine(h.onCanceled, (i, j) => this.u(e));
            h.t = 5;
            h.bx(f);
            h.al = true;
            h.bq = 1;
            h.x = (i, j, k, l, m) => {
                let n = l;
                let o = j;
                let p = k;
                if (n.k.ag) {
                    n.b8 = o + (p - o) * i;
                }
                else {
                    n.b8 = 0;
                }
            };
            h.o = (i, j) => {
                let k = i;
                return k.b8;
            };
            let i = new CellPath(1, c, 0, b);
            if (a.model.bm()) {
                h.g = new CellPath(0, 0, a.model.cn, i.x, i.w);
                h.e = new CellPath(0, 0, a.model.cq, i.x, i.w);
            }
            if (!a.hg || a.dragger.isDragActive) {
                h.ba = 0;
            }
            a.c9.r(i, h, d);
        }
        z(a, b, c, d) {
            let e = this.p();
            this.w(e);
            let f = this.f.e;
            if (a.cm != null && a.cm.e != null) {
                f = a.cm.e;
            }
            let g = a.model;
            let h = new CellEffect();
            h.onFinished = delegateCombine(h.onFinished, (i) => this.v(e));
            h.onCanceled = delegateCombine(h.onCanceled, (i, j) => this.u(e));
            h.t = 8;
            h.bx(f);
            h.al = true;
            h.bq = 1;
            h.x = (i, j, k, l, m) => {
                let n = l;
                let o = j;
                let p = k;
                if (n.k.ag) {
                    n.by = o + (p - o) * i;
                }
                else {
                    n.by = 0;
                }
            };
            h.o = (i, j) => {
                let k = i;
                return k.by;
            };
            let i = new CellPath(1, c, 0, b);
            if (a.model.bm()) {
                h.g = new CellPath(0, 0, c, i.x, i.w);
                h.e = new CellPath(0, 0, c, i.x, i.w);
            }
            a.c9.r(i, h, d);
        }
        ae(a, b, c, d) {
            let e = this.p();
            this.w(e);
            let f = this.f.h;
            if (a.cm != null && a.cm.h != null) {
                f = a.cm.h;
            }
            let g = a.model;
            let h = new CellEffect();
            h.onFinished = delegateCombine(h.onFinished, (i) => this.v(e));
            h.onCanceled = delegateCombine(h.onCanceled, (i, j) => this.u(e));
            h.t = 5;
            h.bx(f);
            h.al = true;
            h.bq = 0;
            h.x = (i, j, k, l, m) => {
                let n = l;
                let o = j;
                let p = k;
                if (n.k.ag) {
                    n.b8 = o + (p - o) * i;
                }
                else {
                    n.b8 = 0;
                }
            };
            h.o = (i, j) => {
                let k = i;
                return k.b8;
            };
            let i = new CellPath(1, c, 0, b);
            if (a.model.bm()) {
                h.g = new CellPath(0, 0, a.model.cn, i.x, i.w);
                h.e = new CellPath(0, 0, a.model.cq, i.x, i.w);
            }
            if (!a.hg || a.dragger.isDragActive) {
                h.ba = 0;
            }
            a.c9.r(i, h, d);
        }
        aa(a, b, c, d) {
            let e = this.p();
            this.w(e);
            let f = this.f.e;
            if (a.cm != null && a.cm.e != null) {
                f = a.cm.e;
            }
            let g = a.model;
            let h = new CellEffect();
            h.onFinished = delegateCombine(h.onFinished, (i) => this.v(e));
            h.onCanceled = delegateCombine(h.onCanceled, (i, j) => this.u(e));
            h.t = 8;
            h.bx(f);
            h.al = true;
            h.bq = 0;
            h.x = (i, j, k, l, m) => {
                let n = l;
                let o = j;
                let p = k;
                if (n.k.ag) {
                    n.by = o + (p - o) * i;
                }
                else {
                    n.by = 0;
                }
            };
            h.o = (i, j) => {
                let k = i;
                return k.by;
            };
            let i = new CellPath(1, c, 0, b);
            if (a.model.bm()) {
                h.g = new CellPath(0, 0, c, i.x, i.w);
                h.e = new CellPath(0, 0, c, i.x, i.w);
            }
            a.c9.r(i, h, d);
        }
        ab(a, b, c) {
            let d = this.p();
            this.w(d);
            let e = this.f.h;
            if (a.cm != null && a.cm.h != null) {
                e = a.cm.h;
            }
            let f = a.model;
            let g = new CellPositionEffect();
            g.onFinished = delegateCombine(g.onFinished, (h) => this.v(d));
            g.onCanceled = delegateCombine(g.onCanceled, (h, i) => this.u(d));
            g.t = 5;
            g.bx(e);
            g.al = true;
            g.bq = 1;
            g.x = (h, i, j, k, l) => {
                let m = k;
                let n = i;
                let o = j;
                if (m.k.ag) {
                    m.b8 = n + (o - n) * h;
                }
                else {
                    m.b8 = 0;
                }
            };
            g.o = (h, i) => {
                let j = h;
                return j.b8;
            };
            let h = new CellPath(1, c, 0, b);
            if (a.model.bm()) {
                g.g = new CellPath(0, 0, a.model.cn, h.x, h.w);
                g.e = new CellPath(0, 0, a.model.cq, h.x, h.w);
            }
            if (!a.hg || a.dragger.isDragActive) {
                g.ba = 0;
            }
            a.c9.s(h, g);
        }
        ac(a, b, c) {
            let d = this.p();
            this.w(d);
            let e = this.f.h;
            if (a.cm != null && a.cm.h != null) {
                e = a.cm.h;
            }
            let f = a.model;
            let g = new CellPositionEffect();
            g.onFinished = delegateCombine(g.onFinished, (h) => this.v(d));
            g.onCanceled = delegateCombine(g.onCanceled, (h, i) => this.u(d));
            g.t = 5;
            g.bx(e);
            g.al = true;
            g.bq = 0;
            g.x = (h, i, j, k, l) => {
                let m = k;
                let n = i;
                let o = j;
                if (m.k.ag) {
                    m.b8 = n + (o - n) * h;
                }
                else {
                    m.b8 = 0;
                }
            };
            g.o = (h, i) => {
                let j = h;
                return j.b8;
            };
            let h = new CellPath(1, c, 0, b);
            if (a.model.bm()) {
                g.g = new CellPath(0, 0, a.model.cn, h.x, h.w);
                g.e = new CellPath(0, 0, a.model.cq, h.x, h.w);
            }
            if (!a.hg || a.dragger.isDragActive) {
                g.ba = 0;
            }
            a.c9.s(h, g);
        }
        am(a, b) {
            let c = this.p();
            this.w(c);
            let d = this.f.g;
            if (a.cz != null && a.cm.g != null) {
                d = a.cm.g;
            }
            let e = new RowCellsEffect();
            e.onFinished = delegateCombine(e.onFinished, (f) => this.v(c));
            e.onCanceled = delegateCombine(e.onCanceled, (f, g) => this.u(c));
            e.t = 5;
            e.bx(d);
            e.al = true;
            e.bq = 1;
            e.x = (f, g, h, i, j) => {
                let k = i;
                let l = g;
                let m = h;
                if (k.k.ag) {
                    k.b3 = l + (m - l) * f;
                }
                else {
                    k.b3 = 0;
                }
            };
            e.o = (f, g) => {
                let h = f;
                return h.b3;
            };
            let f = a.eq(b);
            if (a.model.bm()) {
                e.g = new CellPath(0, 0, a.model.cn, f.x, f.w);
                e.g.d = a.model.br._inner[a.model.cn].d;
                e.e = new CellPath(0, 0, a.model.cq, f.x, f.w);
                e.e.d = a.model.br._inner[a.model.cq].d;
            }
            if (!a.h3) {
                e.ba = 0;
            }
            a.c9.v(f, e);
        }
        ao(a, b) {
            let c = this.p();
            this.w(c);
            let d = this.f.g;
            if (a.cz != null && a.cm.g != null) {
                d = a.cm.g;
            }
            let e = new RowCellsEffect();
            e.onFinished = delegateCombine(e.onFinished, (f) => this.v(c));
            e.onCanceled = delegateCombine(e.onCanceled, (f, g) => this.u(c));
            e.t = 5;
            e.bx(d);
            e.al = true;
            e.bq = 0;
            e.x = (f, g, h, i, j) => {
                let k = i;
                let l = g;
                let m = h;
                if (k.k.ag) {
                    k.b3 = l + (m - l) * f;
                }
                else {
                    k.b3 = 0;
                }
            };
            e.o = (f, g) => {
                let h = f;
                return h.b3;
            };
            let f = a.eq(b);
            if (a.model.bm()) {
                e.g = new CellPath(0, 0, a.model.cn, f.x, f.w);
                e.g.d = a.model.br._inner[a.model.cn].d;
                e.e = new CellPath(0, 0, a.model.cq, f.x, f.w);
                e.e.d = a.model.br._inner[a.model.cq].d;
            }
            if (!a.h3) {
                e.ba = 0;
            }
            a.c9.v(f, e);
        }
    }
    GridAnimationManager.$t = /*@__PURE__*/ markType(GridAnimationManager, 'GridAnimationManager');
    GridAnimationManager.o = 0;
    return GridAnimationManager;
})();
/**
 * @hidden
 */
let CellKey = /*@__PURE__*/ (() => {
    class CellKey extends Base {
        constructor() {
            super(...arguments);
            this.e = null;
            this.g = null;
            this.i = null;
            this.a = null;
            this.c = null;
        }
        get primaryKey() {
            if (this.e == null && this.g != null && this.d != null) {
                this.e = this.d.d9.getItemKey(this.d.i(), this.g);
            }
            return this.e;
        }
        set primaryKey(a) {
            this.e = a;
        }
        get h() {
            if (this.g == null && this.e != null && this.d != null) {
                this.g = this.d.d9.getItemForKey(this.primaryKey);
            }
            return this.g;
        }
        set h(a) {
            this.g = a;
        }
        get j() {
            return this.i;
        }
        set j(a) {
            this.i = a;
        }
        get b() {
            if ((this.a == null || this.a.grid != this.d) && this.d != null) {
                this.a = this.d.a2.g(this.j);
            }
            return this.a;
        }
        get d() {
            return this.c;
        }
        set d(a) {
            this.c = a;
        }
    }
    CellKey.$t = /*@__PURE__*/ markType(CellKey, 'CellKey');
    return CellKey;
})();
/**
 * @hidden
 */
let GridSelectedCellsCollection = /*@__PURE__*/ (() => {
    class GridSelectedCellsCollection extends ObservableCollection$1 {
        constructor() {
            super(CellKey.$, 0);
        }
        an(a) {
            this.collectionChanged = delegateCombine(this.collectionChanged, a);
        }
        ao(a) {
            this.collectionChanged = delegateRemove(this.collectionChanged, a);
        }
        get am() {
            return this;
        }
        ai(a, b) {
            for (let c = 0; c < this.count; c++) {
                if (this._inner[c].primaryKey != null && this._inner[c].primaryKey.equals(a) && this._inner[c].b != null && this._inner[c].b.g2 == b) {
                    return this._inner[c];
                }
            }
            return null;
        }
        aj(a, b) {
            for (let c = 0; c < this.count; c++) {
                if (this._inner[c].primaryKey.equals(a) && this._inner[c].j == b) {
                    return this._inner[c];
                }
            }
            return null;
        }
        ak(a, b) {
            for (let c = 0; c < this.count; c++) {
                if (this._inner[c].h == a && this._inner[c].j == b) {
                    return this._inner[c];
                }
            }
            return null;
        }
        ae(a, b) {
            return this.af(a, b.h0());
        }
        af(a, b) {
            if (this.aj(a, b) != null) {
                return null;
            }
            let c = new CellKey();
            c.primaryKey = a;
            c.j = b;
            this.add(c);
            return c;
        }
        ag(a, b) {
            return this.ah(a, b.h0());
        }
        ah(a, b) {
            if (this.ak(a, b) != null) {
                return null;
            }
            let c = new CellKey();
            c.h = a;
            c.j = b;
            this.add(c);
            return c;
        }
        al(a, b) {
            let c = this.ai(a, b);
            if (c != null) {
                this.remove(c);
            }
            return c;
        }
    }
    GridSelectedCellsCollection.$t = /*@__PURE__*/ markType(GridSelectedCellsCollection, 'GridSelectedCellsCollection', /*@__PURE__*/ ObservableCollection$1.$.specialize(CellKey.$));
    return GridSelectedCellsCollection;
})();
/**
 * @hidden
 */
let DefinitionBase = /*@__PURE__*/ (() => {
    class DefinitionBase extends Base {
        constructor() {
            super();
            this.bl = null;
            this.t = null;
            this.dr = null;
            this.ds = null;
            this.dh = null;
            this.dt = null;
            this.dk = null;
            this.a2 = truncate(DeviceUtils.g(0));
            this.a4 = truncate(DeviceUtils.g(0));
            this.a3 = truncate(DeviceUtils.g(0));
            this.a1 = truncate(DeviceUtils.g(0));
            this.ay = truncate(DeviceUtils.g(1));
            this.a0 = truncate(DeviceUtils.g(1));
            this.az = truncate(DeviceUtils.g(1));
            this.ax = truncate(DeviceUtils.g(1));
            this.a6 = truncate(DeviceUtils.g(2));
            this.a8 = truncate(DeviceUtils.g(2));
            this.a7 = truncate(DeviceUtils.g(2));
            this.a5 = truncate(DeviceUtils.g(2));
            this.r = null;
            this.dj = null;
            this.di = null;
            this.dl = null;
            this.dw = null;
            this.dp = null;
            this.dv = null;
            this.dn = null;
            this.du = null;
            this.dm = null;
            this.ar = 1;
            this.b = 4;
            this.g = 4;
            this.a = 0;
            this.f = 1;
            this.w = 0;
            this.v = 0;
            this.dx = null;
            this.dq = null;
            this.as = NaN;
            this.aq = 0;
            this.ac = null;
            this.ab = null;
            this.dataBinding = null;
            this.dataBound = null;
            this.propertyChanged = null;
            this.ag = false;
            this.am = new HashSet$1(String_$type, 0);
            this.ao = new List$1(String_$type, 0);
            this.al = new Dictionary$2(String_$type, CellPropertyAnimationType_$type, 0);
            this.definitionPropertyUpdated = null;
            this.z = null;
            this.cellStyleKeyRequested = null;
            this.d0 = this.eb();
            this.d5 = this.ef();
            this.d4 = this.ed();
            this.d3 = this.ec();
            this.at = this.av();
            this.d6 = this.eg();
            this.ad = this.af();
            this.d2 = GridStyleRepository.bg;
        }
        get externalObject() {
            return this.bl;
        }
        set externalObject(a) {
            let b = this.bl;
            this.bl = a;
            this.t = typeCast(IExternalDefinitionBase_$type, this.bl);
            if (this.bl != b) {
                this.c2("ExternalObject", 10, b, this.bl);
            }
        }
        get d7() {
            return this.dr;
        }
        set d7(a) {
            let b = this.dr;
            this.dr = a;
            if (this.dr != b) {
                this.c2("Background", 10, b, this.dr);
            }
        }
        get d8() {
            return this.ds;
        }
        set d8(a) {
            let b = this.ds;
            this.ds = a;
            if (this.ds != b) {
                this.c2("Border", 10, b, this.ds);
            }
        }
        get dy() {
            return this.dh;
        }
        set dy(a) {
            let b = this.dh;
            this.dh = a;
            if (this.dh != b) {
                this.c2("ActivationBorder", 10, b, this.dh);
            }
        }
        get d9() {
            return this.dt;
        }
        set d9(a) {
            let b = this.dt;
            this.dt = a;
            if (this.dt != b) {
                this.c2("ErrorBorder", 10, b, this.dt);
            }
        }
        get d1() {
            return this.dk;
        }
        set d1(a) {
            let b = this.dk;
            this.dk = a;
            if (this.dk != b) {
                this.c2("ActualBorder", 2, b, this.dk);
            }
        }
        get be() {
            return this.a2;
        }
        set be(a) {
            let b = this.a2;
            this.a2 = a;
            if (this.a2 != b) {
                this.c2("BorderLeftWidth", 6, b, this.a2);
            }
        }
        get bg() {
            return this.a4;
        }
        set bg(a) {
            let b = this.a4;
            this.a4 = a;
            if (this.a4 != b) {
                this.c2("BorderTopWidth", 6, b, this.a4);
            }
        }
        get bf() {
            return this.a3;
        }
        set bf(a) {
            let b = this.a3;
            this.a3 = a;
            if (this.a3 != b) {
                this.c2("BorderRightWidth", 6, b, this.a3);
            }
        }
        get bd() {
            return this.a1;
        }
        set bd(a) {
            let b = this.a1;
            this.a1 = a;
            if (this.a1 != b) {
                this.c2("BorderBottomWidth", 6, b, this.a1);
            }
        }
        get ba() {
            return this.ay;
        }
        set ba(a) {
            let b = this.ay;
            this.ay = a;
            if (this.ay != b) {
                this.c2("ActivationBorderLeftWidth", 6, b, this.ay);
            }
        }
        get bc() {
            return this.a0;
        }
        set bc(a) {
            let b = this.a0;
            this.a0 = a;
            if (this.a0 != b) {
                this.c2("ActivationBorderTopWidth", 6, b, this.a0);
            }
        }
        get bb() {
            return this.az;
        }
        set bb(a) {
            let b = this.az;
            this.az = a;
            if (this.az != b) {
                this.c2("ActivationBorderRightWidth", 6, b, this.az);
            }
        }
        get a9() {
            return this.ax;
        }
        set a9(a) {
            let b = this.ax;
            this.ax = a;
            if (this.ax != b) {
                this.c2("ActivationBorderBottomWidth", 6, b, this.ax);
            }
        }
        get bi() {
            return this.a6;
        }
        set bi(a) {
            let b = this.a6;
            this.a6 = a;
            if (this.a6 != b) {
                this.c2("ErrorBorderLeftWidth", 6, b, this.a6);
            }
        }
        get bk() {
            return this.a8;
        }
        set bk(a) {
            let b = this.a8;
            this.a8 = a;
            if (this.a8 != b) {
                this.c2("ErrorBorderTopWidth", 6, b, this.a8);
            }
        }
        get bj() {
            return this.a7;
        }
        set bj(a) {
            let b = this.a7;
            this.a7 = a;
            if (this.a7 != b) {
                this.c2("ErrorBorderRightWidth", 6, b, this.a7);
            }
        }
        get bh() {
            return this.a5;
        }
        set bh(a) {
            let b = this.a5;
            this.a5 = a;
            if (this.a5 != b) {
                this.c2("ErrorBorderBottomWidth", 6, b, this.a5);
            }
        }
        get grid() {
            return this.r;
        }
        set grid(a) {
            let b = this.r;
            this.r = a;
            this.c0(b, a);
        }
        c0(a, b) {
            if (a != null) {
                a.propertyChanged = delegateRemove(a.propertyChanged, runOn(this, this.c1));
            }
            if (b != null) {
                b.propertyChanged = delegateCombine(b.propertyChanged, runOn(this, this.c1));
            }
            this.c7();
            this.cz(a, b);
        }
        cz(a, b) {
        }
        c1(a, b) {
            switch (b.propertyName) {
                case "IsActiveCellStyleEnabled":
                    this.c7();
                    break;
            }
        }
        get d0() {
            return this.dj;
        }
        set d0(a) {
            let b = this.dj;
            this.dj = a;
            if (this.dj != b) {
                this.c2("ActualBackground", 2, b, this.dj);
            }
        }
        get dz() {
            return this.di;
        }
        set dz(a) {
            let b = this.di;
            this.di = a;
            if (this.di != b) {
                this.c2("ActualActivationBorder", 2, b, this.di);
            }
        }
        get d2() {
            return this.dl;
        }
        set d2(a) {
            let b = this.dl;
            this.dl = a;
            if (this.dl != b) {
                this.c2("ActualErrorBorder", 2, b, this.dl);
            }
        }
        get ej() {
            return this.dw;
        }
        set ej(a) {
            let b = this.dw;
            this.dw = a;
            if (this.dw != b) {
                this.c2("PinnedBackground", 10, b, this.dw);
            }
        }
        get d5() {
            return this.dp;
        }
        set d5(a) {
            let b = this.dp;
            this.dp = a;
            if (this.dp != b) {
                this.c2("ActualStickyRowBackground", 2, b, this.dp);
            }
        }
        get ei() {
            return this.dv;
        }
        set ei(a) {
            let b = this.dv;
            this.dv = a;
            if (this.dv != b) {
                this.c2("PinnedRowBackground", 10, b, this.dv);
            }
        }
        get d4() {
            return this.dn;
        }
        set d4(a) {
            let b = this.dn;
            this.dn = a;
            if (this.dn != b) {
                this.c2("ActualPinnedRowBackground", 2, b, this.dn);
            }
        }
        get eh() {
            return this.du;
        }
        set eh(a) {
            let b = this.du;
            this.du = a;
            if (this.du != b) {
                this.c2("LastStickyRowBackground", 10, b, this.du);
            }
        }
        get d3() {
            return this.dm;
        }
        set d3(a) {
            let b = this.dm;
            this.dm = a;
            if (this.dm != b) {
                this.c2("ActualLastStickyRowBackground", 2, b, this.dm);
            }
        }
        get au() {
            return this.ar;
        }
        set au(a) {
            let b = this.ar;
            this.ar = a;
            if (this.ar != b) {
                this.c2("ContentOpacity", 0, b, this.ar);
            }
        }
        get e() {
            return this.b;
        }
        set e(a) {
            let b = this.b;
            this.b = a;
            if (this.b != b) {
                this.c2("HorizontalAlignment", 10, enumGetBox(CellContentHorizontalAlignment_$type, b), enumGetBox(CellContentHorizontalAlignment_$type, this.b));
            }
        }
        get j() {
            return this.g;
        }
        set j(a) {
            let b = this.g;
            this.g = a;
            if (this.g != b) {
                this.c2("VerticalAlignment", 10, enumGetBox(CellContentVerticalAlignment_$type, b), enumGetBox(CellContentVerticalAlignment_$type, this.g));
            }
        }
        get c() {
            return this.a;
        }
        set c(a) {
            let b = this.a;
            this.a = a;
            if (this.a != b) {
                this.c2("ActualHorizontalAlignment", 4, enumGetBox(CellContentHorizontalAlignment_$type, b), enumGetBox(CellContentHorizontalAlignment_$type, this.a));
            }
        }
        get h() {
            return this.f;
        }
        set h(a) {
            let b = this.f;
            this.f = a;
            if (this.f != b) {
                this.c2("VerticalAlignment", 4, enumGetBox(CellContentVerticalAlignment_$type, b), enumGetBox(CellContentVerticalAlignment_$type, this.f));
            }
        }
        get y() {
            return this.w;
        }
        set y(a) {
            let b = this.w;
            this.w = a;
            if (this.w != b) {
                this.c2("LineBreakMode", 10, enumGetBox(TextCellLineBreakMode_$type, b), enumGetBox(TextCellLineBreakMode_$type, this.w));
            }
        }
        get x() {
            return this.v;
        }
        set x(a) {
            let b = this.v;
            this.v = a;
            if (this.v != b) {
                this.c2("ActualLineBreakMode", 4, enumGetBox(TextCellLineBreakMode_$type, b), enumGetBox(TextCellLineBreakMode_$type, this.v));
            }
        }
        get ek() {
            return this.dx;
        }
        set ek(a) {
            let b = this.dx;
            this.dx = a;
            if (this.dx != b) {
                this.c2("TextColor", 10, b, this.dx);
            }
        }
        get d6() {
            return this.dq;
        }
        set d6(a) {
            let b = this.dq;
            this.dq = a;
            if (this.dq != b) {
                this.c2("ActualTextColor", 2, b, this.dq);
            }
        }
        get aw() {
            return this.as;
        }
        set aw(a) {
            let b = this.as;
            this.as = a;
            if (this.as != b) {
                this.c2("PinnedRowOpacity", 10, b, this.as);
            }
        }
        get at() {
            return this.aq;
        }
        set at(a) {
            let b = this.aq;
            this.aq = a;
            if (this.aq != b) {
                this.c2("ActualPinnedRowOpacity", 0, b, this.aq);
            }
        }
        get textStyle() {
            return this.ac;
        }
        set textStyle(a) {
            let b = this.ac;
            this.ac = a;
            if (this.ac != b) {
                this.c2("FontInfo", 10, b, this.ac);
            }
        }
        get ad() {
            return this.ab;
        }
        set ad(a) {
            let b = this.ab;
            this.ab = a;
            if (this.ab != b) {
                this.c2("ActualFontInfo", 3, b, this.ab);
            }
        }
        k(a, b) {
            let c = this.l(a);
            c.i0 = b;
            return c;
        }
        cl(a, b, c, d) {
            let e = this.cm(a, b, c);
            if (this.cellStyleKeyRequested == null) {
                return e;
            }
            let f = new CellStyleRequestedEventArgs();
            f.resolvedValue = c;
            f.rowNumber = d;
            f.styleKey = e;
            this.cellStyleKeyRequested(this, f);
            return f.styleKey;
        }
        cw(a, b, c, d) {
            a.a4 = b.model.bl;
            a.f = this.c;
            a.h = this.h;
            a.b4 = 0;
            a.b9 = 0;
            a.b5 = 0;
            a.ca = 0;
            a.b1 = 1;
            a.cb = 0;
            a.b6 = 1;
            a.b1 = this.au;
            a.kp = this.d6;
            a.ke = this.d0;
            a.ka = this.dz;
            a.dd = this.ba;
            a.di = this.bc;
            a.dg = this.bb;
            a.db = this.a9;
            a.kh = this.d2;
            a.er = this.bi;
            a.ew = this.bk;
            a.eu = this.bj;
            a.ep = this.bh;
            if (this.ag) {
                a.kf = this.d1;
                a.eb = this.be;
                a.ee = this.bf;
                a.eg = this.bg;
                a.d9 = this.bd;
            }
            else {
                if (a.kf != null) {
                    a.kf = null;
                    a.eb = 0;
                    a.eg = 0;
                    a.ee = 0;
                    a.d9 = 0;
                }
            }
            if (this.grid != null) {
                if (this.ad != null) {
                    this.ad.t(this.grid.externalGrid.renderer);
                }
            }
            a.af = this.ad;
            a.z = this.x;
            a.ko = this.d5;
            a.kl = this.d4;
            a.kk = this.d3;
            a.b7 = this.at;
            if (a.c == null) {
                a.c = new DefaultCellActionManager(b, a);
            }
            if (a.d == null) {
                a.d = new DefaultGridInfoRequestor(b, a);
            }
        }
        cx(a, b, c, d) {
            if (this.dataBinding != null) {
                let e = this.n(a, b, c, d);
                this.dataBinding(this, e);
                c = e.resolvedValue;
                d = e.rowObject;
            }
            this.cy(a, b, c, d);
            if (this.dataBound != null) {
                this.dataBound(this, this.n(a, b, c, d));
            }
        }
        n(a, b, c, d) {
            let e = new DataBindingEventArgs();
            e.cellInfo = a;
            e.resolvedValue = c;
            e.rowObject = d;
            return e;
        }
        cy(a, b, c, d) {
            a.gp = d;
            if (!a.k.g && this.ai()) {
                let e = this.aa;
                let f = e.o;
                let g = f.count;
                let h = e.p;
                let i = e.q;
                for (let j = 0; j < g; j++) {
                    if (h._inner[j]) {
                        continue;
                    }
                    a.jt(f._inner[j], i._inner[j]);
                }
            }
        }
        c5() {
            for (let a = 0; a < this.ao.count; a++) {
                if (!this.ak(this.ao._inner[a])) {
                    this.aj(this.ao._inner[a]);
                }
            }
        }
        aj(a) {
            if (this.ah(a)) {
                let b = 11;
                if (this.al.containsKey(a)) {
                    b = this.al.item(a);
                }
                this.c3(a, b, this.bn(a), this.bn(a));
                return true;
            }
            return false;
        }
        ak(a) {
            if (stringStartsWith(a, "Actual")) {
                return false;
            }
            switch (a) {
                case "Background":
                    this.c2("ActualBackground", 2, this.d0, this.d0);
                    return true;
                case "ContentOpacity":
                    this.c2("ContentOpacity", 0, this.au, this.au);
                    return true;
                case "FontInfo":
                    this.c2("ActualFontInfo", 3, this.ad, this.ad);
                    return true;
                case "HorizontalAlignment":
                    this.c2("ActualHorizontalAlignment", 4, enumGetBox(CellContentHorizontalAlignment_$type, this.c), enumGetBox(CellContentHorizontalAlignment_$type, this.c));
                    return true;
                case "TextColor":
                    this.c2("ActualTextColor", 2, this.d6, this.d6);
                    return true;
                case "VerticalAlignment":
                    this.c2("VerticalAlignment", 4, enumGetBox(CellContentVerticalAlignment_$type, this.h), enumGetBox(CellContentVerticalAlignment_$type, this.h));
                    return true;
                case "Border":
                    this.c2("ActualBorder", 2, this.d1, this.d1);
                    return true;
                case "ActivationBorder":
                    this.c2("ActualActivationBorder", 2, this.dz, this.dz);
                    return true;
                case "BorderLeftWidth":
                    this.c2("BorderLeftWidth", 0, this.be, this.be);
                    return true;
                case "BorderTopWidth":
                    this.c2("BorderTopWidth", 0, this.bg, this.bg);
                    return true;
                case "BorderRightWidth":
                    this.c2("BorderRightWidth", 0, this.bf, this.bf);
                    return true;
                case "BorderBottomWidth":
                    this.c2("BorderBottomWidth", 0, this.bd, this.bd);
                    return true;
                case "ActivationBorderLeftWidth":
                    this.c2("ActivationBorderLeftWidth", 0, this.ba, this.ba);
                    return true;
                case "ActivationBorderTopWidth":
                    this.c2("ActivationBorderTopWidth", 0, this.bc, this.bc);
                    return true;
                case "ActivationBorderRightWidth":
                    this.c2("ActivationBorderRightWidth", 0, this.bb, this.bb);
                    return true;
                case "ActivationBorderBottomWidth":
                    this.c2("ActivationBorderBottomWidth", 0, this.a9, this.a9);
                    return true;
            }
            return false;
        }
        c2(a, b, c, d) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            this.c3(a, b, c, d);
            if (this.definitionPropertyUpdated != null) {
                this.definitionPropertyUpdated(this, ((() => {
                    let $ret = new DefinitionPropertyUpdatedEventArgs();
                    $ret.propertyName = a;
                    $ret.animationType = b;
                    $ret.newValue = d;
                    $ret.oldValue = c;
                    return $ret;
                })()));
            }
        }
        c8() {
            if (this.d7 != null) {
                this.d0 = this.d7;
            }
            else {
                this.d0 = this.eb();
            }
        }
        df() {
            if (this.ek != null) {
                this.d6 = this.ek;
            }
            else {
                this.d6 = this.eg();
            }
        }
        dg() {
            this.ad = this.textStyle;
        }
        dd() {
            if (!isNaN_(this.aw)) {
                this.at = this.aw;
            }
            else {
                this.at = this.av();
            }
        }
        dc() {
            if (this.ei != null) {
                this.d4 = this.ei;
            }
            else {
                this.d4 = this.ed();
            }
        }
        de() {
            if (this.ej != null) {
                this.d5 = this.ej;
            }
            else {
                this.d5 = this.ef();
            }
        }
        db() {
            if (this.eh != null) {
                this.d3 = this.eh;
            }
            else {
                this.d3 = this.ec();
            }
        }
        c3(a, b, c, d) {
            this.cv(a, b);
            switch (a) {
                case "TextColor":
                    this.df();
                    break;
                case "Background":
                    this.c8();
                    break;
                case "PinnedBackground":
                    this.de();
                    break;
                case "PinnedRowBackground":
                    this.dc();
                    break;
                case "LastStickyRowBackground":
                    this.db();
                    break;
                case "PinnedRowOpacity":
                    this.dd();
                    break;
                case "VerticalAlignment":
                    if (this.j == 4) {
                        this.h = this.i();
                    }
                    else {
                        this.h = this.j;
                    }
                    break;
                case "HorizontalAlignment":
                    if (this.e == 4) {
                        this.c = this.d();
                    }
                    else {
                        this.c = this.e;
                    }
                    break;
                case "LineBreakMode":
                    this.x = this.y;
                    break;
                case "FontInfo":
                    this.dg();
                    break;
                case "Border":
                case "BorderLeftWidth":
                case "BorderTopWidth":
                case "BorderRightWidth":
                case "BorderBottomWidth":
                    this.c9();
                    break;
                case "ActivationBorder":
                    this.c7();
                    break;
                case "ErrorBorder":
                    this.da();
                    break;
            }
        }
        c9() {
            if (this.be != 0 || this.bg != 0 || this.bf != 0 || this.bd != 0) {
                if (this.d8 != null) {
                    this.ag = true;
                    this.d1 = this.d8;
                }
                else if (this.d1 != null) {
                    this.ag = true;
                }
            }
        }
        c7() {
            if (this.grid != null && this.grid.he) {
                if (this.dy == null) {
                    this.dz = this.ea();
                }
                else {
                    this.dz = this.dy;
                }
            }
            else {
                this.dy = null;
            }
        }
        da() {
            if (this.d9 != null) {
                this.d2 = this.d9;
            }
            else {
                this.d2 = GridStyleRepository.bg;
            }
        }
        get an() {
            return this.am;
        }
        get ap() {
            return this.ao;
        }
        cv(a, b) {
            if (this.am.contains(a)) {
                return;
            }
            this.am.add_1(a);
            this.ao.add(a);
            this.al.addItem(a, b);
        }
        d() {
            if (this.e != 4) {
                return this.e;
            }
            return 0;
        }
        i() {
            if (this.j != 4) {
                return this.j;
            }
            return 1;
        }
        eg() {
            return GridStyleRepository.bn;
        }
        ea() {
            return GridStyleRepository.av;
        }
        af() {
            return GridStyleRepository.l;
        }
        eb() {
            return GridStyleRepository.aw;
        }
        ef() {
            return null;
        }
        ed() {
            return null;
        }
        ec() {
            return null;
        }
        ee() {
            return GridStyleRepository.ba;
        }
        av() {
            return 0.3;
        }
        c6(a, b, c) {
            if (this.z == null) {
                this.z = new FastIterationDictionary$2(String_$type, Base.$, 0);
            }
            let d = null;
            if (this.z.d(a)) {
                d = this.z.item(a);
            }
            this.z.item(a, c);
            let e = false;
            if (d == null && c != null) {
                e = true;
            }
            if (d != null) {
                if (!Base.equalsStatic(d, c)) {
                    e = true;
                }
            }
            if (e) {
                this.c2(a, b, d, c);
            }
        }
        ai() {
            if (this.z == null) {
                return false;
            }
            return this.z.r > 0;
        }
        get aa() {
            return this.z;
        }
        ah(a) {
            if (this.z == null) {
                return false;
            }
            return this.z.d(a);
        }
        c4(a) {
            if (this.z == null) {
                return;
            }
            if (this.z.d(a)) {
                this.z.f(a);
            }
        }
        bn(a) {
            if (this.z == null) {
                return null;
            }
            if (this.z.d(a)) {
                return this.z.item(a);
            }
            return null;
        }
        ck(a, b, c) {
            let d = stringEmpty();
            switch (b) {
                case 10:
                    if (c != null) {
                        let override_ = c;
                        let val_ = typeGetValue(a);
                        d = (override_.format(val_));
                    }
                    else {
                        d = (typeGetValue(a)).toString();
                    }
                    break;
                case 8:
                    if (c != null) {
                        let override_ = c;
                        let val_ = a;
                        d = (override_.format(val_));
                    }
                    else {
                        d = a.toString();
                    }
                    break;
                case 5:
                    if (c != null) {
                        let override_ = c;
                        let val_ = a;
                        d = (override_.format(val_));
                    }
                    else {
                        d = a.toString();
                    }
                    break;
                case 1:
                    if (c != null) {
                        let override_ = c;
                        let val_ = typeGetValue(a);
                        d = (override_.format(val_));
                    }
                    else {
                        d = (typeGetValue(a)).toString();
                    }
                    break;
                case 3:
                    if (c != null) {
                        let override_ = c;
                        let val_ = typeGetValue(a);
                        d = (override_.format(val_));
                    }
                    else {
                        d = typeGetValue(a).toString();
                    }
                    break;
                case 4:
                    if (c != null) {
                        let override_ = c;
                        let val_ = typeGetValue(a);
                        d = (override_.format(val_));
                    }
                    else {
                        d = typeGetValue(a).toString();
                    }
                    break;
                case 7:
                    if (c != null) {
                        let override_ = c;
                        let val_ = a;
                        d = (override_.format(val_));
                    }
                    else {
                        d = a.toString();
                    }
                    break;
                case 6:
                    if (c != null) {
                        let override_ = c;
                        let val_ = a;
                        d = (override_.format(val_));
                    }
                    else {
                        d = a.toString();
                    }
                    break;
                case 0:
                case 2:
                case 11:
                    d = a.toString();
                    break;
            }
            return d;
        }
        u(a, b) {
            let c = b != null ? b.value.toString() : stringEmpty();
            let d = a.g;
            if (a.n == 4) {
                d = 1;
            }
            let e = b.value;
            switch (d) {
                case 10:
                    if (a.w != null) {
                        let override_ = a.w;
                        let val_ = typeGetValue(e);
                        c = (override_.format(val_));
                    }
                    else {
                        c = (typeGetValue(e)).toString();
                    }
                    break;
                case 8:
                    if (a.w != null) {
                        let override_ = a.w;
                        let val_ = e;
                        c = (override_.format(val_));
                    }
                    else {
                        c = e.toString();
                    }
                    break;
                case 5:
                    if (a.w != null) {
                        let override_ = a.w;
                        let val_ = e;
                        c = (override_.format(val_));
                    }
                    else {
                        let summaryValue_ = e;
                        let maxFractionDigits_ = a.u;
                        c = (parseFloat(summaryValue_.toFixed(maxFractionDigits_)).toString());
                    }
                    break;
                case 1:
                    if (a.w != null) {
                        let override_ = a.w;
                        let val_ = typeGetValue(e);
                        c = (override_.format(val_));
                    }
                    else {
                        c = (typeGetValue(e)).toString();
                    }
                    break;
                case 3:
                    if (a.w != null) {
                        let override_ = a.w;
                        let val_ = typeGetValue(e);
                        c = (override_.format(val_));
                    }
                    else {
                        c = typeGetValue(e).toString();
                    }
                    break;
                case 4:
                    if (a.w != null) {
                        let override_ = a.w;
                        let val_ = typeGetValue(e);
                        c = (override_.format(val_));
                    }
                    else {
                        c = typeGetValue(e).toString();
                    }
                    break;
                case 7:
                    if (a.w != null) {
                        let override_ = a.w;
                        let val_ = e;
                        c = (override_.format(val_));
                    }
                    else {
                        let summaryValue_ = e;
                        let maxFractionDigits_ = a.u;
                        c = (parseFloat(summaryValue_.toFixed(maxFractionDigits_)).toString());
                    }
                    break;
                case 6:
                    if (a.w != null) {
                        let override_ = a.w;
                        let val_ = e;
                        c = (override_.format(val_));
                    }
                    else {
                        let summaryValue_ = e;
                        let maxFractionDigits_ = a.u;
                        c = (parseFloat(summaryValue_.toFixed(maxFractionDigits_)).toString());
                    }
                    break;
                case 0:
                case 2:
                case 11:
                    c = e.toString();
                    break;
            }
            let f = a.ac != null ? a.ac : a.j != null ? a.j.displayName : stringEmpty();
            if (a.f != null) {
                c = a.f.i(e);
            }
            let g = stringIsNullOrWhiteSpace(a.ae) ? a.af : a.ae;
            let h = g + " " + f + " = " + c;
            if (a.e != null) {
                h = a.e.i(e);
            }
            let i = a.o(b, c, h);
            h = i.e;
            c = i.d;
            return ((() => {
                let $ret = new SummaryData();
                $ret.e = g;
                $ret.b = e;
                $ret.a = a.n;
                $ret.c = i.e;
                $ret.d = i.d;
                return $ret;
            })());
        }
    }
    DefinitionBase.$t = /*@__PURE__*/ markType(DefinitionBase, 'DefinitionBase', Base.$, [INotifyPropertyChanged_$type]);
    return DefinitionBase;
})();
/**
 * @hidden
 */
let Column = /*@__PURE__*/ (() => {
    class Column extends DefinitionBase {
        constructor() {
            super();
            this.g2 = 0;
            this.e7 = 0;
            this.gr = truncate(DeviceUtils.g(12));
            this.gt = truncate(DeviceUtils.g(1));
            this.gs = truncate(DeviceUtils.g(12));
            this.gq = truncate(DeviceUtils.g(1));
            this.ha = stringEmpty();
            this.go = 0;
            this.gn = 0;
            this.gp = 0;
            this.fh = 0;
            this.g8 = null;
            this.g9 = null;
            this.g6 = null;
            this.jd = null;
            this.i9 = null;
            this.jc = null;
            this.i8 = null;
            this.fd = null;
            this.e9 = null;
            this.gj = NaN;
            this.fy = false;
            this.fu = false;
            this.f1 = false;
            this.en = null;
            this.ff = null;
            this.fx = true;
            this.f0 = true;
            this.fz = false;
            this.f2 = false;
            this.e5 = 0;
            this.fi = 0;
            this.ft = false;
            this.ev = 0;
            this.ew = 0;
            this.i6 = null;
            this.ja = null;
            this.e0 = 0;
            this.ez = 0;
            this.fr = true;
            this.fv = true;
            this.fw = true;
            this.jb = null;
            this.i7 = null;
            this.gi = NaN;
            this.gh = 0;
            this.fo = null;
            this.fn = null;
            this.fb = 0;
            this.g3 = null;
            this.g7 = null;
            this.el = null;
            this.columnCellsPropertyUpdating = null;
            this.columnHeaderCellsPropertyUpdating = null;
            this.fl = null;
            this.fs = false;
            this.fs = true;
            this.header = new TextHeader();
            this.fs = false;
            this.c = this.d();
            this.h = this.i();
            this.jh = this.jl();
            this.jg = this.jk();
            this.g2 = Column.g1++;
        }
        jl() {
            return GridStyleRepository.ba;
        }
        jk() {
            return GridStyleRepository.a1;
        }
        get e8() {
            return this.e7;
        }
        set e8(a) {
            let b = this.e7;
            this.e7 = a;
            if (this.e7 != b) {
                this.c2("State", 10, enumGetBox(ColumnStates_$type, b), enumGetBox(ColumnStates_$type, this.e7));
            }
        }
        get gy() {
            return this.gr;
        }
        set gy(a) {
            let b = this.gr;
            this.gr = a;
            if (this.gr != b) {
                this.c2("PaddingLeft", 6, b, this.gr);
            }
        }
        get g0() {
            return this.gt;
        }
        set g0(a) {
            let b = this.gt;
            this.gt = a;
            if (this.gt != b) {
                this.c2("PaddingTop", 6, b, this.gt);
            }
        }
        get gz() {
            return this.gs;
        }
        set gz(a) {
            let b = this.gs;
            this.gs = a;
            if (this.gs != b) {
                this.c2("PaddingRight", 6, b, this.gs);
            }
        }
        get gx() {
            return this.gq;
        }
        set gx(a) {
            let b = this.gq;
            this.gq = a;
            if (this.gq != b) {
                this.c2("PaddingBottom", 6, b, this.gq);
            }
        }
        get id() {
            return this.ha;
        }
        set id(a) {
            let b = this.ha;
            this.ha = a;
            if (this.ha != b) {
                this.c2("Name", 10, b, this.ha);
            }
        }
        get gv() {
            return this.go;
        }
        set gv(a) {
            this.go = a;
        }
        get gu() {
            return this.gn;
        }
        set gu(a) {
            this.gn = a;
        }
        get gw() {
            return this.gp;
        }
        set gw(a) {
            this.gp = a;
        }
        get fj() {
            return this.fh;
        }
        set fj(a) {
            this.fh = a;
        }
        get hy() {
            return this.g8;
        }
        set hy(a) {
            this.g8 = a;
            if (this.h2 == null) {
                this.hh = this.hy;
            }
        }
        get h2() {
            return this.g9;
        }
        set h2(a) {
            let b = this.g9;
            this.g9 = a;
            if (this.g9 != b) {
                this.c2("HeaderText", 8, b, this.g9);
            }
        }
        get hh() {
            return this.g6;
        }
        set hh(a) {
            let b = this.g6;
            this.g6 = a;
            if (this.g6 != b) {
                this.c2("ActualHeaderText", 8, b, this.g6);
            }
        }
        get jn() {
            return this.jd;
        }
        set jn(a) {
            let b = this.jd;
            this.jd = a;
            if (this.jd != b) {
                this.c2("SelectedBackground", 10, b, this.jd);
            }
        }
        get jh() {
            return this.i9;
        }
        set jh(a) {
            let b = this.i9;
            this.i9 = a;
            if (this.i9 != b) {
                this.c2("ActualSelectedBackground", 2, b, this.i9);
            }
        }
        get jm() {
            return this.jc;
        }
        set jm(a) {
            let b = this.jc;
            this.jc = a;
            if (this.jc != b) {
                this.c2("RowHoverBackground", 10, b, this.jc);
            }
        }
        get jg() {
            return this.i8;
        }
        set jg(a) {
            let b = this.i8;
            this.i8 = a;
            if (this.i8 != b) {
                this.c2("ActualHoverBackground", 2, b, this.i8);
            }
        }
        get fe() {
            return this.fd;
        }
        set fe(a) {
            let b = this.fd;
            this.fd = a;
            if (this.fd != b) {
                this.c2("AnimationSettings", 10, b, "AnimationSettings");
            }
        }
        get width() {
            return this.e9;
        }
        set width(a) {
            let b = this.e9;
            this.e9 = a;
            if (this.e9 != b) {
                this.c2("Width", 10, b, a);
            }
        }
        get gm() {
            return this.gj;
        }
        set gm(a) {
            let b = this.gj;
            this.gj = a;
            if (this.gj != b) {
                this.c2("MinWidth", 10, b, a);
            }
        }
        get gc() {
            return this.fy;
        }
        set gc(a) {
            let b = this.fy;
            this.fy = a;
            if (this.fy != b) {
                this.c2("IsFromMarkup", 10, b, this.fy);
            }
        }
        get f8() {
            return this.fu;
        }
        set f8(a) {
            let b = this.fu;
            if (a) {
                this.gf = true;
            }
            this.fu = a;
            if (this.fu != b) {
                this.c2("IsAutoGenerated", 10, b, this.fu);
            }
        }
        get gf() {
            return this.f1;
        }
        set gf(a) {
            let self_ = this;
            let value_ = a;
            this.f1 = value_;
            self_.___mustPassByValue = true;
        }
        get eo() {
            return this.en;
        }
        set eo(a) {
            let b = this.en;
            this.en = a;
            if (this.en != b) {
                this.c2("Filter", 10, b, this.en);
            }
        }
        get header() {
            return this.ff;
        }
        set header(a) {
            let b = this.ff;
            this.ff = a;
            if (this.ff != b) {
                this.c2("Header", 10, b, this.ff);
            }
            this.ff.grid = this.grid;
        }
        get gb() {
            return this.fx;
        }
        set gb(a) {
            let b = this.fx;
            this.fx = a;
            if (this.fx != b) {
                this.c2("IsFilteringEnabled", 10, b, this.fx);
            }
        }
        get ge() {
            return this.f0;
        }
        set ge(a) {
            let b = this.f0;
            this.f0 = a;
            if (this.f0 != b) {
                this.c2("IsResizingEnabled", 10, b, this.f0);
            }
        }
        get gd() {
            return this.fz;
        }
        set gd(a) {
            let b = this.fz;
            this.fz = a;
            if (this.fz != b) {
                this.c2("IsHidden", 10, b, this.fz);
            }
        }
        get gg() {
            return this.f2;
        }
        set gg(a) {
            let b = this.f2;
            this.f2 = a;
            if (this.f2 != b) {
                this.c2("ShouldRemoveWhenHidden", 10, b, this.f2);
            }
        }
        get e6() {
            return this.e5;
        }
        set e6(a) {
            let b = this.e5;
            this.e5 = a;
            if (this.e5 != b) {
                this.c2("SortDirection", 11, enumGetBox(ColumnSortDirection_$type, b), enumGetBox(ColumnSortDirection_$type, this.e5));
            }
        }
        get fk() {
            return this.fi;
        }
        set fk(a) {
            let b = this.fi;
            this.fi = a;
            if (this.fi != b) {
                this.c2("Pinned", 11, enumGetBox(PinnedPositions_$type, b), enumGetBox(PinnedPositions_$type, this.fi));
            }
        }
        get f7() {
            return this.ft;
        }
        set f7(a) {
            let b = this.ft;
            this.ft = a;
            if (this.ft != b) {
                this.c2("InternalShouldRemoveWhenHidden", 10, b, this.ft);
            }
        }
        get f4() {
            if (this.ft) {
                return true;
            }
            return this.f2;
        }
        get ex() {
            return this.ev;
        }
        set ex(a) {
            let b = this.ev;
            this.ev = a;
            if (this.ev != b) {
                this.c2("ActualColumnOptionsIconAlignment", 4, enumGetBox(ColumnOptionsIconAlignment_$type, b), enumGetBox(ColumnOptionsIconAlignment_$type, this.ev));
            }
        }
        get ey() {
            return this.ew;
        }
        set ey(a) {
            let b = this.ew;
            this.ew = a;
            if (this.ew != b) {
                this.c2("ColumnOptionsIconAlignment", 10, enumGetBox(ColumnOptionsIconAlignment_$type, b), enumGetBox(ColumnOptionsIconAlignment_$type, this.ew));
            }
        }
        get je() {
            return this.i6;
        }
        set je(a) {
            let b = this.i6;
            this.i6 = a;
            if (this.i6 != b) {
                this.c2("ActualColumnOptionsIconColor", 2, b, this.i6);
            }
        }
        get ji() {
            return this.ja;
        }
        set ji(a) {
            let b = this.ja;
            this.ja = a;
            if (this.ja != b) {
                this.c2("ColumnOptionsIconColor", 10, b, this.ja);
            }
        }
        get e2() {
            return this.e0;
        }
        set e2(a) {
            let b = this.e0;
            this.e0 = a;
            if (this.e0 != b) {
                this.c2("ColumnOptionsIconBehavior", 10, enumGetBox(ColumnOptionsIconBehavior_$type, b), enumGetBox(ColumnOptionsIconBehavior_$type, this.e0));
            }
        }
        get e1() {
            return this.ez;
        }
        set e1(a) {
            let b = this.ez;
            this.ez = a;
            if (this.ez != b) {
                this.c2("ActualColumnOptionsIconBehavior", 4, enumGetBox(ColumnOptionsIconBehavior_$type, b), enumGetBox(ColumnOptionsIconBehavior_$type, this.ez));
            }
        }
        get f3() {
            return this.fr;
        }
        set f3(a) {
            let b = this.fr;
            this.fr = a;
            if (this.fr != b) {
                this.c2("ActualIsColumnOptionsEnabled", 5, b, this.fr);
            }
        }
        get f9() {
            return this.fv;
        }
        set f9(a) {
            let b = this.fv;
            this.fv = a;
            if (this.fv != b) {
                this.c2("IsColumnOptionsEnabled", 10, b, this.fv);
            }
        }
        get ga() {
            return this.fw;
        }
        set ga(a) {
            let b = this.fw;
            this.fw = a;
            if (this.fw != b) {
                this.c2("IsEditable", 10, b, this.fw);
            }
        }
        get jj() {
            return this.jb;
        }
        set jj(a) {
            let b = this.jb;
            this.jb = a;
            if (this.jb != b) {
                this.c2("DeletedTextColor", 10, b, this.jb);
            }
        }
        get jf() {
            return this.i7;
        }
        set jf(a) {
            let b = this.i7;
            this.i7 = a;
            if (this.i7 != b) {
                this.c2("ActualDeletedTextColor", 2, b, this.i7);
            }
        }
        get gl() {
            return this.gi;
        }
        set gl(a) {
            let b = this.gi;
            this.gi = a;
            if (this.gi != b) {
                this.c2("EditOpacity", 10, b, this.gi);
            }
        }
        get gk() {
            return this.gh;
        }
        set gk(a) {
            let b = this.gh;
            this.gh = a;
            if (this.gh != b) {
                this.c2("ActualEditOpacity", 0, b, this.gh);
            }
        }
        get textEditStyle() {
            return this.fo;
        }
        set textEditStyle(a) {
            let b = this.fo;
            this.fo = a;
            if (this.fo != b) {
                this.c2("EditFontInfo", 10, b, this.fo);
            }
        }
        get fp() {
            return this.fn;
        }
        set fp(a) {
            let b = this.fn;
            this.fn = a;
            if (this.fn != b) {
                this.c2("ActualEditFontInfo", 3, b, this.fn);
            }
        }
        get fc() {
            return this.fb;
        }
        set fc(a) {
            let b = this.fb;
            this.fb = a;
            if (b != this.fb) {
                this.c2("EditorTypeInternal", 4, enumGetBox(EditorType_$type, b), enumGetBox(EditorType_$type, this.fb));
            }
        }
        get g4() {
            return this.g3;
        }
        set g4(a) {
            let b = this.g3;
            this.g3 = a;
            if (b != this.g3) {
                this.c2("EditorItemsSourceInternal", 9, b, this.g3);
            }
        }
        get hu() {
            return this.g7;
        }
        set hu(a) {
            let b = this.g7;
            this.g7 = a;
            if (b != this.g7) {
                this.c2("EditorTextFieldInternal", 8, b, this.g7);
            }
        }
        get em() {
            return this.el;
        }
        set em(a) {
            let b = this.el;
            this.el = a;
            if (b != this.el) {
                this.c2("EditorValueFieldInternal", 8, b, this.el);
            }
        }
        ed() {
            return GridStyleRepository.a4;
        }
        ef() {
            return GridStyleRepository.bb;
        }
        cy(a, b, c, d) {
            super.cy(a, b, c, d);
            a.go = c;
            a.ay = b.d9.isEditedValue(d, this.hy);
            a.av = b.d9.isDeletedRow(d);
            a.en = b.d9.getPendingEditID(d, this.hy);
            a.hl = b.d9.getError(a.en);
            if (b.e0.o(a)) {
                a.b8 = 1;
            }
            else {
                a.b8 = 0;
            }
            if (b.aj.m(a)) {
                a.by = 1;
            }
            else {
                a.by = 0;
            }
            if (b.d5.c(a.k.w)) {
                a.b3 = 1;
            }
            else {
                a.b3 = 0;
            }
        }
        cw(a, b, c, d) {
            super.cw(a, b, c, d);
            a.km = this.jh;
            a.kj = this.jg;
            a.fo = this.gy;
            a.fs = this.g0;
            a.fq = this.gz;
            a.fm = this.gx;
            if (this.grid != null) {
                if (this.fp != null) {
                    this.fp.t(this.grid.externalGrid.renderer);
                }
            }
            a.ae = this.fp;
            a.b2 = this.gk;
            a.kg = this.jf;
        }
        c3(a, b, c, d) {
            super.c3(a, b, c, d);
            switch (a) {
                case "Header":
                    let e = c;
                    let f = d;
                    if (e != null) {
                        e.definitionPropertyUpdated = delegateRemove(e.definitionPropertyUpdated, runOn(this, this.is));
                    }
                    if (f != null) {
                        f.definitionPropertyUpdated = delegateCombine(f.definitionPropertyUpdated, runOn(this, this.is));
                        if (f.e == 4) {
                            f.c = this.ep();
                        }
                        if (f.j == 4) {
                            f.h = this.eq();
                        }
                        if (!this.fs) {
                            f.c5();
                        }
                    }
                    break;
                case "HeaderText":
                    this.hh = d;
                    break;
                case "SelectedBackground":
                    this.i5();
                    break;
                case "ActualHorizontalAlignment":
                    if (this.header != null) {
                        if (this.header.e == 4) {
                            this.header.c = this.ep();
                        }
                    }
                    break;
                case "VerticalAlignment":
                    if (this.header != null) {
                        if (this.header.j == 4) {
                            this.header.h = this.eq();
                        }
                    }
                    break;
                case "SortDirection":
                    this.i3(this, "SortDirection", 11, c, d);
                    break;
                case "ActualLastStickyRowBackground":
                    if (c != null && this.d3 == null) {
                        d = this.d5;
                    }
                    break;
                case "ColumnOptionsIconAlignment":
                    this.iw();
                    break;
                case "ColumnOptionsIconColor":
                    this.iz();
                    break;
                case "ColumnOptionsIconBehavior":
                    this.iy();
                    break;
                case "IsColumnOptionsEnabled":
                    this.ix();
                    break;
                case "DeletedTextColor":
                    this.i0();
                    break;
                case "EditOpacity":
                    this.i2();
                    break;
                case "EditFontInfo":
                    this.i1();
                    break;
                case "RowHoverBackground":
                    this.i4();
                    break;
            }
            this.iv(a, b, c, d);
        }
        eq() {
            return this.h;
        }
        ep() {
            return this.c;
        }
        i3(a, b, c, d, e) {
            if (this.columnHeaderCellsPropertyUpdating != null) {
                this.columnHeaderCellsPropertyUpdating(this, b, c, d, e);
            }
        }
        is(a, b) {
            this.i3(this, b.propertyName, b.animationType, b.oldValue, b.newValue);
        }
        cz(a, b) {
            if (this.header != null) {
                this.header.grid = b;
            }
            this.i5();
            this.i5();
            this.c8();
            this.df();
            this.dg();
            this.de();
            this.db();
            this.dc();
            this.dd();
            this.i2();
            this.i1();
            this.i0();
            this.iw();
            this.iz();
            this.iy();
            this.ix();
            this.i4();
        }
        c1(a, b) {
            switch (b.propertyName) {
                case "CellSelectedBackground":
                    this.i5();
                    break;
                case "CellBackground":
                    this.c8();
                    break;
                case "CellTextColor":
                    this.df();
                    break;
                case "CellTextStyle":
                    this.dg();
                    break;
                case "StickyRowBackground":
                    this.de();
                    break;
                case "LastStickyRowBackground":
                    this.db();
                    break;
                case "PinnedRowBackground":
                    this.dc();
                    break;
                case "PinnedRowOpacity":
                    this.dd();
                    break;
                case "ColumnOptionsIconAlignment":
                    this.iw();
                    break;
                case "ColumnOptionsIconColor":
                    this.iz();
                    break;
                case "ColumnOptionsIconBehavior":
                    this.iy();
                    break;
                case "IsColumnOptionsEnabled":
                    this.ix();
                    break;
                case "DeletedTextColor":
                    this.i0();
                    break;
                case "EditOpacity":
                    this.i2();
                    break;
                case "EditTextStyle":
                    this.i1();
                    break;
                case "RowHoverBackground":
                    this.i4();
                    break;
            }
        }
        i4() {
            if (this.jm == null) {
                if (this.grid != null && this.grid.u7 != null) {
                    this.jg = this.grid.u7;
                    return;
                }
                this.jg = this.jk();
            }
            else {
                this.jg = this.jm;
            }
        }
        i5() {
            if (this.jn == null) {
                if (this.grid != null && this.grid.ut != null) {
                    this.jh = this.grid.ut;
                    return;
                }
                this.jh = this.jl();
            }
            else {
                this.jh = this.jn;
            }
        }
        c8() {
            if (this.d7 == null) {
                if (this.grid != null && this.grid.us != null) {
                    this.d0 = this.grid.us;
                }
                else {
                    this.d0 = this.eb();
                }
            }
            else {
                this.d0 = this.d7;
            }
        }
        df() {
            if (this.ek == null) {
                if (this.grid != null && this.grid.uu != null) {
                    this.d6 = this.grid.uu;
                    return;
                }
                this.d6 = this.eg();
            }
            else {
                this.d6 = this.ek;
            }
        }
        dg() {
            if (this.textStyle == null) {
                if (this.grid != null && this.grid.fp != null) {
                    this.ad = this.grid.fp;
                    return;
                }
                this.ad = this.af();
            }
            else {
                this.ad = this.textStyle;
            }
        }
        dd() {
            if (isNaN_(this.aw)) {
                if (this.grid != null && !isNaN_(this.grid.jp)) {
                    this.at = this.grid.jp;
                    return;
                }
                this.at = this.av();
            }
            else {
                this.at = this.aw;
            }
        }
        i0() {
            if (this.jj == null) {
                if (this.grid != null && this.grid.uy != null) {
                    this.jf = this.grid.uy;
                    return;
                }
                this.jf = GridStyleRepository.bm;
            }
            else {
                this.jf = this.jj;
            }
        }
        i2() {
            if (isNaN_(this.gl)) {
                if (this.grid != null && !isNaN_(this.grid.jo)) {
                    this.gk = this.grid.jo;
                    return;
                }
                this.gk = GridStyleRepository.m;
            }
            else {
                this.gk = this.gl;
            }
        }
        i1() {
            if (this.textEditStyle == null) {
                if (this.grid != null && this.grid.fq != null) {
                    this.fp = this.grid.fq;
                    return;
                }
                this.fp = GridStyleRepository.k;
            }
            else {
                this.fp = this.textEditStyle;
            }
        }
        dc() {
            if (this.ei == null) {
                if (this.grid != null && this.grid.u6 != null) {
                    this.d4 = this.grid.u6;
                    return;
                }
                this.d4 = this.ed();
            }
            else {
                this.d4 = this.ei;
            }
        }
        de() {
            if (this.ej == null) {
                if (this.grid != null && this.grid.vf != null) {
                    this.d5 = this.grid.vf;
                    return;
                }
                this.d5 = this.ef();
            }
            else {
                this.d5 = this.ej;
            }
        }
        db() {
            if (this.eh == null) {
                if (this.grid != null && this.grid.u5 != null) {
                    this.d3 = this.grid.u5;
                    return;
                }
                this.d3 = this.ec();
            }
            else {
                this.d3 = this.eh;
            }
        }
        iw() {
            if (this.ey == 0) {
                if (this.grid != null && this.grid.bk != 0) {
                    this.ex = this.grid.bk;
                    return;
                }
                this.ex = GridStyleRepository.a;
            }
            else {
                this.ex = this.ey;
            }
        }
        iz() {
            if (this.ji == null) {
                if (this.grid != null && this.grid.uw != null) {
                    this.je = this.grid.uw;
                    return;
                }
                this.je = GridStyleRepository.az;
            }
            else {
                this.je = this.ji;
            }
        }
        iy() {
            if (this.e2 == 0) {
                if (this.grid != null && this.grid.bm != 0) {
                    this.e1 = this.grid.bm;
                    return;
                }
                this.e1 = GridStyleRepository.b;
            }
            else {
                this.e1 = this.e2;
            }
        }
        ix() {
            if (this.grid != null) {
                this.f3 = this.grid.hn && this.f9;
            }
            else {
                this.f3 = false;
            }
        }
        iv(a, b, c, d) {
            if (this.columnCellsPropertyUpdating != null) {
                this.columnCellsPropertyUpdating(this, a, b, c, d);
            }
        }
        eu() {
            if (this.c == 0) {
                return 3;
            }
            return 2;
        }
        e4() {
            if (this.c == 0) {
                return 3;
            }
            return 2;
        }
        et() {
            return 2;
        }
        e3() {
            return 2;
        }
        h0() {
            return this.id != null && this.id != "" ? this.id : this.hy;
        }
        iu(a, b, c) {
            if (this.fl == null) {
                this.fl = new FastIterationDictionary$2(String_$type, Base.$, 0);
            }
            let d = null;
            if (this.fl.d(a)) {
                d = this.fl.item(a);
            }
            this.fl.item(a, c);
            let e = false;
            if (d == null && c != null) {
                e = true;
            }
            if (d != null) {
                if (!Base.equalsStatic(d, c)) {
                    e = true;
                }
            }
            if (e) {
                this.i3(this, a, b, d, c);
            }
        }
        f6() {
            if (this.fl == null) {
                return false;
            }
            return this.fl.r > 0;
        }
        get fm() {
            return this.fl;
        }
        f5(a) {
            if (this.fl == null) {
                return false;
            }
            return this.fl.d(a);
        }
        it(a) {
            if (this.fl == null) {
                return;
            }
            if (this.fl.d(a)) {
                this.fl.f(a);
            }
        }
        g5(a) {
            if (this.fl == null) {
                return null;
            }
            if (this.fl.d(a)) {
                return this.fl.item(a);
            }
            return null;
        }
    }
    Column.$t = /*@__PURE__*/ markType(Column, 'Column', DefinitionBase.$);
    Column.g1 = 0;
    return Column;
})();
/**
 * @hidden
 */
let GridColumnCollection = /*@__PURE__*/ (() => {
    class GridColumnCollection extends ObservableCollection$1 {
        constructor() {
            super(Column.$, 0);
        }
    }
    GridColumnCollection.$t = /*@__PURE__*/ markType(GridColumnCollection, 'GridColumnCollection', /*@__PURE__*/ ObservableCollection$1.$.specialize(Column.$));
    return GridColumnCollection;
})();
/**
 * @hidden
 */
let GridEffectGroup = /*@__PURE__*/ (() => {
    class GridEffectGroup extends Base {
        constructor(a, ..._rest) {
            super();
            this.c = null;
            this.f = 0;
            this.a = false;
            this.b = false;
            this.effectsFinished = null;
            this.effectsCanceled = null;
            a = (a == void 0) ? 0 : a;
            switch (a) {
                case 0:
                    {
                        let c = _rest[0];
                        this.a = c;
                        this.c = new List$1(GridEffect.$, 0);
                        this.b = false;
                    }
                    break;
                case 1:
                    {
                        let c = [true];
                        {
                            let e = c[0];
                            this.a = e;
                            this.c = new List$1(GridEffect.$, 0);
                            this.b = false;
                        }
                    }
                    break;
            }
        }
        k() {
            this.b = false;
            for (let a = 0; a < this.c.count; a++) {
                let b = this.c._inner[a];
                b.onFinished = delegateRemove(b.onFinished, runOn(this, this.i));
                let c = this.c._inner[a];
                c.onCanceled = delegateRemove(c.onCanceled, runOn(this, this.h));
            }
            this.f = 0;
            this.c.clear();
        }
        g(a) {
            this.c.add(a);
            a.onFinished = delegateCombine(a.onFinished, runOn(this, this.i));
            a.onCanceled = delegateCombine(a.onCanceled, runOn(this, this.h));
        }
        h(a, b) {
            this.b = true;
            this.f++;
            if (this.f == this.c.count) {
                this.j();
            }
        }
        i(a) {
            this.f++;
            if (this.f == this.c.count) {
                this.j();
            }
        }
        j() {
            if (this.b) {
                if (this.effectsCanceled != null) {
                    this.effectsCanceled(this, new EventArgs());
                }
            }
            else {
                if (this.effectsFinished != null) {
                    this.effectsFinished(this, new EventArgs());
                }
            }
            if (this.a) {
                this.k();
            }
        }
    }
    GridEffectGroup.$t = /*@__PURE__*/ markType(GridEffectGroup, 'GridEffectGroup');
    return GridEffectGroup;
})();
/**
 * @hidden
 */
let HoverManager = /*@__PURE__*/ (() => {
    class HoverManager extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.b = false;
            this.d = -1;
            this.e = -1;
            this.a = a;
        }
        f(a) {
            this.d = a;
            if (!this.b) {
                this.a.delayedExecutionManager.executeIn(() => {
                    if (this.d != this.e) {
                        if (this.e > -1) {
                            this.a.ck.ao(this.a, this.e);
                        }
                        if (this.d > -1) {
                            this.a.ck.am(this.a, this.d);
                        }
                        this.e = this.d;
                    }
                    this.b = false;
                }, 0);
                this.b = true;
            }
        }
        c(a) {
            return this.e == a;
        }
    }
    HoverManager.$t = /*@__PURE__*/ markType(HoverManager, 'HoverManager');
    return HoverManager;
})();
/**
 * @hidden
 */
let RecyclingManager = /*@__PURE__*/ (() => {
    class RecyclingManager extends Base {
        constructor() {
            super();
            this.b = null;
            this.b = new Dictionary$2(String_$type, Stack$1.$.specialize(CellModel.$), 0);
        }
        a(a) {
            if (!this.b.containsKey(a)) {
                this.b.addItem(a, new Stack$1(CellModel.$));
                return null;
            }
            let b = this.b.item(a);
            if (b.f > 0) {
                let c = b.e();
                if (c.t == 2) {
                    c.t = 1;
                }
                return c;
            }
            return null;
        }
        c(a) {
            a.t = 1;
            if (!this.b.containsKey(a.i0)) {
                this.b.addItem(a.i0, new Stack$1(CellModel.$));
            }
            this.b.item(a.i0).h(a);
        }
    }
    RecyclingManager.$t = /*@__PURE__*/ markType(RecyclingManager, 'RecyclingManager');
    return RecyclingManager;
})();
/**
 * @hidden
 */
let ActivationManager = /*@__PURE__*/ (() => {
    class ActivationManager extends Base {
        constructor(a, b) {
            super();
            this.a = null;
            this.b = null;
            this.c = new FastIterationDictionary$2(Number_$type, Number_$type, 0);
            this.e = new FastIterationDictionary$2(Number_$type, Number_$type, 0);
            this.d = new FastIterationDictionary$2(Number_$type, String_$type, 0);
            this.f = new FastIterationDictionary$2(String_$type, Number_$type, 0);
            this.k = false;
            this.l = false;
            this.q = -1;
            this.s = -1;
            this.p = -1;
            this.a = a;
            this.b = b;
        }
        get g() {
            if (this.k) {
                this.z();
                this.k = false;
            }
            return this.c;
        }
        get i() {
            if (this.k) {
                this.z();
                this.k = false;
            }
            return this.e;
        }
        get h() {
            if (this.k) {
                this.z();
                this.k = false;
            }
            return this.d;
        }
        get j() {
            if (this.k) {
                this.z();
                this.k = false;
            }
            return this.f;
        }
        ai(a) {
            if (!a.k.ag) {
                return;
            }
            if (this.m(a)) {
                this.ac(a);
            }
            else {
                this.x(a);
            }
        }
        m(a) {
            let b = false;
            let c = this.a.d9.getDataRow(a.k);
            if (c == -1) {
                return false;
            }
            if (this.q < 0) {
                return false;
            }
            if (c != this.q) {
                return false;
            }
            if (typeCast(SectionHeaderCellModel.$, a) !== null) {
                return true;
            }
            if (this.i.d(a.k.az)) {
                let d = this.i.item(a.k.az);
                if (d >= 0) {
                    b = this.n(c, d);
                }
            }
            return b;
        }
        n(a, b) {
            return this.q == a && b == this.s;
        }
        o() {
            return this.a.ch == 1;
        }
        aa() {
            if (this.q >= 0 && this.s >= 0) {
                this.ab(this.q, this.s, true);
            }
        }
        ac(a) {
            let b = this.a.d9.getDataRow(a.k);
            if (b == -1) {
                return;
            }
            if (this.i.d(a.k.az)) {
                let c = this.i.item(a.k.az);
                if (this.n(b, c)) {
                    this.ab(b, c, true);
                }
            }
        }
        x(a) {
            this.w(a.k);
        }
        w(a) {
            if (!a.ag) {
                return;
            }
            if (!this.o()) {
                return;
            }
            if (this.q >= 0 && this.s != null) {
                this.ab(this.q, this.s, false);
            }
            let b = this.a.d9.getDataRow(a);
            if (b == -1) {
                return;
            }
            if (a.az == -400) {
                if (this.q != b) {
                    this.v(b, 0);
                }
            }
            if (this.i.d(a.az)) {
                let c = this.i.item(a.az);
                if (!this.n(b, c)) {
                    this.u(b, c);
                }
            }
        }
        y(a, b) {
            let c = this.s;
            if (b == null) {
                if (this.a.dy != 1) {
                    let d = this.a.d9.getRowType(a);
                    if (this.a.d9.isRowSpanning(d) && this.s == -1) {
                        c = this.i.item(0);
                    }
                }
            }
            else if (this.j.d(b)) {
                c = this.j.item(b);
            }
            if (c != -1) {
                if (this.q >= 0 && this.s >= 0) {
                    if (a != this.q || c != this.s) {
                        this.ab(this.q, this.s, false);
                        this.u(a, c);
                    }
                }
                else if (this.q == -1 && this.s == -1) {
                    this.u(a, c);
                }
            }
        }
        v(a, b) {
            if (!this.i.d(b)) {
                return;
            }
            let c = this.i.item(b);
            if (a != this.q || c != this.s) {
                this.q = a;
                this.s = c;
                this.p = b;
                if (a >= 0 && b >= 0) {
                    if (a >= 0 && a < this.a.d9.getRowCount()) {
                        if (this.a.dy != 1) {
                            let d = this.a.d9.getRowType(a);
                            if (this.a.d9.isRowSpanning(d)) {
                                b = -400;
                                c = -400;
                            }
                        }
                    }
                    this.b.z(this.a, a, b, c);
                }
                this.a.qq(a, this.t(c));
            }
        }
        u(a, b) {
            if (!this.g.d(b)) {
                return;
            }
            let c = this.g.item(b);
            if (a != this.q || b != this.s) {
                this.q = a;
                this.s = b;
                this.p = c;
                if (a >= 0 && c >= 0) {
                    if (a >= 0 && a < this.a.d9.getRowCount()) {
                        if (this.a.dy != 1) {
                            let d = this.a.d9.getRowType(a);
                            if (this.a.d9.isRowSpanning(d)) {
                                c = -400;
                                b = -400;
                            }
                        }
                    }
                    this.b.z(this.a, a, c, b);
                }
                this.a.qq(a, this.t(b));
            }
        }
        ab(a, b, c) {
            if (this.n(a, b)) {
                this.s = -1;
                this.q = -1;
                this.p = -1;
                if (a >= 0) {
                    if (this.g.d(b)) {
                        let d = this.g.item(b);
                        if (d >= 0) {
                            if (a >= 0 && a < this.a.d9.getRowCount()) {
                                if (this.a.dy != 1) {
                                    let e = this.a.d9.getRowType(a);
                                    if (this.a.d9.isRowSpanning(e)) {
                                        d = -400;
                                        b = -400;
                                    }
                                }
                            }
                            this.b.aa(this.a, a, d, b);
                        }
                    }
                }
                if (c) {
                    this.a.qs(a, this.t(b));
                }
            }
        }
        ae() {
            this.q = -1;
            this.s = -1;
            this.p = -1;
        }
        af(a) {
        }
        ag(a) {
        }
        t(a) {
            if (!this.h.d(a)) {
                return null;
            }
            return this.h.item(a);
        }
        ah(a) {
        }
        ad() {
            this.k = true;
        }
        z() {
            this.c.u();
            this.e.u();
            this.d.u();
            this.f.u();
            for (let a = 0; a < this.a.actualColumns.count; a++) {
                this.c.s(this.a.actualColumns._inner[a].g2, a);
                this.e.s(a, this.a.actualColumns._inner[a].g2);
                this.d.s(this.a.actualColumns._inner[a].g2, this.a.actualColumns._inner[a].h0());
                this.f.s(this.a.actualColumns._inner[a].h0(), this.a.actualColumns._inner[a].g2);
            }
        }
        r() {
            if (this.g.d(this.s)) {
                return this.g.item(this.s);
            }
            if (this.p != -1) {
                return this.p;
            }
            return 0;
        }
    }
    ActivationManager.$t = /*@__PURE__*/ markType(ActivationManager, 'ActivationManager');
    return ActivationManager;
})();
/**
 * @hidden
 */
let SelectionManager = /*@__PURE__*/ (() => {
    class SelectionManager extends Base {
        constructor(a, b) {
            super();
            this.a = null;
            this.b = null;
            this.f = new FastIterationDictionary$2(PrimaryKeyValue.$, Number_$type, 0);
            this.e = new FastIterationDictionary$2(PrimaryKeyValue.$, FastIterationDictionary$2.$.specialize(Number_$type, Number_$type), 0);
            this.c = new FastIterationDictionary$2(Number_$type, Number_$type, 0);
            this.d = new FastIterationDictionary$2(Number_$type, Number_$type, 0);
            this.i = false;
            this.r = new List$1(CellRange.$, 0);
            this.q = new List$1(CellRange.$, 0);
            this.j = false;
            this.a = a;
            this.b = b;
        }
        get g() {
            if (this.i) {
                this.v();
                this.i = false;
            }
            return this.c;
        }
        get h() {
            if (this.i) {
                this.v();
                this.i = false;
            }
            return this.d;
        }
        an(a) {
            if (!a.k.ag) {
                return;
            }
            if (this.o(a)) {
                this.aq(a);
            }
            else {
                this.aj(a);
            }
        }
        am(a) {
            if (!a.k.ag) {
                return;
            }
            this.j = true;
            this.aj(a);
            this.j = false;
        }
        o(a) {
            let b = this.a.d9.getDataRow(a.k);
            if (b == -1) {
                return false;
            }
            if (this.a.d9.isPlaceholderItem(b)) {
                return false;
            }
            let c = this.a.d9.getRowKey(this.a.i(), b);
            if (c == null) {
                return false;
            }
            let d = this.f.d(c);
            if (d) {
                let e = this.f.item(c);
                if (e == -1) {
                    this.f.item(c, b);
                }
                let f = this.a.d9.resolveValueForRow(a.k);
                let g = this.a.ah.indexOf(c);
                if (g >= 0) {
                    if (this.a.ad.ae._inner[g] == null) {
                        this.a.r8(g, f, c);
                    }
                }
            }
            if (!d) {
                if (this.h.d(a.k.az)) {
                    let h = this.h.item(a.k.az);
                    if (h >= 0) {
                        d = this.k(c, h);
                        if (d && this.e.item(c).item(h) == -1) {
                            this.e.item(c).item(h, b);
                        }
                    }
                }
            }
            if (!d) {
                if (a.k.az >= 0) {
                    let i = this.a.model.br._inner[a.k.az];
                    for (let j = 0; j < this.q.count; j++) {
                        if (this.q._inner[j].b(a.k.w, i.n)) {
                            d = true;
                            break;
                        }
                    }
                }
            }
            if (!d) {
                if (this.a.d9.isRowPinned(b)) {
                    let k = typeCast(DataSourceSpecialRow.$, c.value[0]);
                    if (k != null) {
                        let l = this.a.d9.getItemKey(this.a.i(), k.targetRow);
                        d = this.f.d(l);
                        if (!d) {
                            if (this.h.d(a.k.az)) {
                                let m = this.h.item(a.k.az);
                                if (m >= 0) {
                                    d = this.k(l, m);
                                }
                            }
                        }
                    }
                }
            }
            return d;
        }
        m(a) {
            return this.f.d(a);
        }
        k(a, b) {
            return this.e.d(a) && this.e.item(a).d(b);
        }
        n() {
            return this.a.dt == 1 || this.a.dt == 2;
        }
        l() {
            return this.a.dt == 3 || this.a.dt == 4;
        }
        aq(a) {
            let b = this.a.d9.getDataRow(a.k);
            if (b == -1) {
                return;
            }
            if (this.a.d9.isPlaceholderItem(b)) {
                return;
            }
            let c = this.a.d9.getRowKey(this.a.i(), b);
            if (this.m(c)) {
                this.ar(c, b, false);
            }
            if (this.h.d(a.k.az)) {
                let d = this.h.item(a.k.az);
                if (this.k(c, d)) {
                    this.ao(c, b, d);
                }
            }
        }
        aj(a) {
            if (this.a.dt == 0) {
                return;
            }
            if (this.a.dt == 1 || this.j) {
                let b = this.f.o;
                let c = this.f.p;
                let d = new List$1(PrimaryKeyValue.$, 0);
                let e = new List$1(Number_$type, 0);
                for (let f = 0; f < b.count; f++) {
                    if (c._inner[f]) {
                        continue;
                    }
                    d.add(b._inner[f]);
                    e.add(this.f.q._inner[f]);
                }
                for (let g = 0; g < d.count; g++) {
                    this.ar(d._inner[g], e._inner[g], false);
                }
            }
            if (this.a.dt == 3 || this.j) {
                let h = this.e.o;
                let i = this.e.p;
                let j = new List$1(PrimaryKeyValue.$, 0);
                let k = new List$1(Number_$type, 0);
                let l = new List$1(Number_$type, 0);
                for (let m = 0; m < h.count; m++) {
                    if (i._inner[m]) {
                        continue;
                    }
                    let n = h._inner[m];
                    let o = this.e.item(n).o;
                    let p = this.e.item(n).q;
                    let q = this.e.item(n).p;
                    for (let r = 0; r < o.count; r++) {
                        if (q._inner[r]) {
                            continue;
                        }
                        let s = o._inner[r];
                        let t = p._inner[r];
                        if (this.h.d(a.k.az) && this.h.item(a.k.az) == s && a.k.w == t) {
                            continue;
                        }
                        j.add(n);
                        k.add(s);
                        l.add(t);
                    }
                }
                for (let u = 0; u < j.count; u++) {
                    this.ao(j._inner[u], l._inner[u], k._inner[u]);
                }
            }
            let v = this.a.d9.getDataRow(a.k);
            if (v == -1) {
                return;
            }
            if (this.a.d9.isPlaceholderItem(v)) {
                return;
            }
            let w = this.a.d9.getRowKey(this.a.i(), v);
            if (w == null) {
                return;
            }
            if (this.n()) {
                this.ak(w, v, false);
            }
            else if (this.l()) {
                this.ai(w, v, a.k.az);
            }
        }
        ak(a, b, c) {
            let d = true;
            let e = false;
            if (!c) {
                if (this.a.d9.getRowType(b) == 3) {
                    let f = typeCast(DataSourceSpecialRow.$, a.value[0]);
                    if (f.targetRow != null) {
                        let g = this.a.d9.getItemKey(this.a.i(), f.targetRow);
                        let h = this.a.d9.indexOfVisibleItemByKey(this.a.i(), g, this.a.ky(), this.a.k2());
                        this.al(g, h, f.targetRow, true);
                    }
                    e = true;
                    d = false;
                }
            }
            let i = null;
            if (!e) {
                i = this.a.d9.resolveValueForDataRow(b);
                if (this.a.ag.contains(a)) {
                    let j = this.s(a);
                    if (j >= 0) {
                        let k = this.a.d9.getRowKey(this.a.i(), j);
                        if (!this.m(k)) {
                            this.al(k, j, null, false);
                        }
                    }
                }
            }
            this.al(a, b, i, d);
        }
        al(a, b, c, d) {
            if (!this.f.d(a)) {
                this.f.s(a, b);
                if (b >= 0 && this.a.model.br.count > 0) {
                    this.b.an(this.a, b);
                }
            }
            if (d && c != null) {
                this.a.r5(c, a);
            }
        }
        as(a, b, c, d) {
            if (this.f.d(a)) {
                this.f.f(a);
                if (b >= 0) {
                    let e = this.a.d9.getRowKey(this.a.i(), b);
                    if (e != null && e.equals(a) && b >= 0) {
                        this.b.ap(this.a, b);
                    }
                }
            }
            if (d && c != null) {
                this.a.r6(c, a);
            }
        }
        ar(a, b, c) {
            let d = true;
            let e = false;
            if (!c) {
                if (this.a.d9.getRowType(b) == 3) {
                    let f = typeCast(DataSourceSpecialRow.$, a.value[0]);
                    if (f.targetRow != null) {
                        let g = this.a.d9.getItemKey(this.a.i(), f.targetRow);
                        let h = this.a.d9.indexOfVisibleItemByKey(this.a.i(), g, this.a.ky(), this.a.k2());
                        this.as(g, h, f.targetRow, true);
                    }
                    e = true;
                    d = false;
                }
            }
            let i = null;
            if (!e) {
                i = this.a.d9.resolveValueForDataRow(b);
                if (this.a.ag.contains(a)) {
                    let j = this.s(a);
                    if (j >= 0) {
                        let k = this.a.d9.getRowKey(this.a.i(), j);
                        if (this.m(k)) {
                            this.as(k, j, null, false);
                        }
                    }
                }
            }
            this.as(a, b, i, d);
        }
        ai(a, b, c) {
            if (!this.h.d(c)) {
                return;
            }
            let d = this.h.item(c);
            let e = true;
            if (this.a.d9.getRowType(b) == 3) {
                let f = typeCast(DataSourceSpecialRow.$, a.value[0]);
                if (f.targetRow != null) {
                    let g = this.a.d9.getItemKey(this.a.i(), f.targetRow);
                    let h = this.a.d9.indexOfVisibleItemByKey(this.a.i(), g, this.a.ky(), this.a.k2());
                    this.ag(g, d, c, h, true);
                }
                e = false;
            }
            else {
                if (this.a.ag.contains(a)) {
                    let i = this.s(a);
                    if (i >= 0) {
                        let j = this.a.d9.getRowKey(this.a.i(), i);
                        if (!this.k(j, d)) {
                            this.ag(j, d, c, i, false);
                        }
                    }
                }
            }
            this.ag(a, d, c, b, e);
        }
        ah(a, b, c) {
            if (!this.g.d(c)) {
                return;
            }
            let d = this.g.item(c);
            if (!this.e.d(a)) {
                let e = new FastIterationDictionary$2(Number_$type, Number_$type, 0);
                e.s(c, b);
                this.e.s(a, e);
                if (b >= 0 && d >= 0) {
                    this.b.ad(this.a, b, d, c);
                }
                this.a.q4(a, c);
            }
            else {
                if (!this.e.item(a).d(c)) {
                    this.e.item(a).s(c, b);
                    if (b >= 0) {
                        this.b.ad(this.a, b, d, c);
                    }
                    this.a.q4(a, c);
                }
            }
        }
        ag(a, b, c, d, e) {
            if (!this.e.d(a)) {
                if (b >= 0) {
                    let f = new FastIterationDictionary$2(Number_$type, Number_$type, 0);
                    f.s(b, d);
                    this.e.s(a, f);
                    if (d >= 0) {
                        this.b.ad(this.a, d, c, b);
                    }
                    if (e) {
                        this.a.q4(a, b);
                    }
                }
            }
            else {
                if (!this.e.item(a).d(b)) {
                    this.e.item(a).s(b, d);
                    if (d >= 0) {
                        this.b.ad(this.a, d, c, b);
                    }
                    if (e) {
                        this.a.q4(a, b);
                    }
                }
            }
        }
        ap(a, b, c, d) {
            if (this.k(a, c)) {
                this.e.item(a).f(c);
                if (this.e.item(a).r == 0) {
                    this.e.f(a);
                }
                if (b >= 0) {
                    let e = this.a.d9.getRowKey(this.a.i(), b);
                    if (e != null && e.equals(a) && b >= 0) {
                        if (this.g.d(c)) {
                            let f = this.g.item(c);
                            if (f >= 0) {
                                this.b.ae(this.a, b, f, c);
                            }
                        }
                    }
                }
                if (d) {
                    this.a.q5(a, c);
                }
            }
        }
        ao(a, b, c) {
            let d = true;
            if (this.a.d9.getRowType(b) == 3) {
                let e = typeCast(DataSourceSpecialRow.$, a.value[0]);
                if (e.targetRow != null) {
                    let f = this.a.d9.getItemKey(this.a.i(), e.targetRow);
                    let g = this.a.d9.indexOfVisibleItemByKey(this.a.i(), f, this.a.ky(), this.a.k2());
                    this.ap(f, g, c, true);
                }
                d = false;
            }
            else {
                if (this.a.ag.contains(a)) {
                    let h = this.s(a);
                    if (h >= 0) {
                        let i = this.a.d9.getRowKey(this.a.i(), h);
                        if (this.k(i, c)) {
                            this.ap(i, h, c, false);
                        }
                    }
                }
            }
            this.ap(a, b, c, d);
        }
        s(a) {
            let b = -1;
            let c = this.a.d9.getStickyRows();
            if (c != null) {
                for (let d = 0; d < c.length; d++) {
                    let e = typeCast(DataSourceSpecialRow.$, this.a.actualDataSource.getItemAtIndex(c[d]));
                    if (e != null && e.rowType == 3) {
                        let f = this.a.d9.getItemKey(this.a.i(), e.targetRow);
                        if (f != null && f.equals(a)) {
                            b = c[d];
                            break;
                        }
                    }
                }
            }
            return b;
        }
        av() {
            let a = this.p();
            let b = new Dictionary$2(PrimaryKeyValue.$, Number_$type, 0);
            for (let c = 0; c < a.count; c++) {
                let d = a.item(c);
                let e = -1;
                if (this.f.d(d)) {
                    e = this.f.item(d);
                }
                if (e == -1) {
                    e = this.a.d9.indexOfVisibleItemByKey(this.a.i(), d, this.a.ky(), this.a.k2());
                }
                if (this.a.ag.contains(d)) {
                    let f = this.s(d);
                    if (f >= 0) {
                        let g = this.a.d9.getRowKey(this.a.i(), f);
                        if (!b.containsKey(g)) {
                            b.addItem(g, f);
                        }
                        if (!this.m(g)) {
                            this.ak(g, f, true);
                        }
                    }
                }
                if (!b.containsKey(d)) {
                    b.addItem(d, e);
                }
                if (!this.m(d)) {
                    this.ak(d, e, true);
                }
            }
            let h = this.f.o;
            let i = this.f.p;
            let j = new List$1(PrimaryKeyValue.$, 0);
            let k = new List$1(Number_$type, 0);
            for (let l = 0; l < h.count; l++) {
                if (i._inner[l]) {
                    continue;
                }
                let m = h._inner[l];
                if (!b.containsKey(m)) {
                    j.add(m);
                    k.add(this.f.q._inner[l]);
                }
            }
            for (let n = 0; n < k.count; n++) {
                this.ar(j._inner[n], k._inner[n], false);
            }
            for (let o = 0; o < this.a.ad.ae.count; o++) {
                let p = this.a.d9.getItemKey(this.a.i(), this.a.ad.ae._inner[o]);
                if (p != null && !b.containsKey(p)) {
                    let q = -1;
                    if (this.f.d(p)) {
                        q = this.f.item(p);
                    }
                    if (q == -1) {
                        q = this.a.d9.fastGetItemIndexForKey(this.a.i(), p, this.a.ky(), this.a.k2());
                    }
                    this.ar(p, q, false);
                }
            }
        }
        au() {
            let a = this.a.dm.am;
            let b = new Dictionary$2(PrimaryKeyValue.$, IList$1_$type.specialize(Number_$type), 0);
            for (let c = 0; c < a.count; c++) {
                let d = a.item(c).primaryKey;
                if (d == null) {
                    continue;
                }
                if (a.item(c).b == null) {
                    continue;
                }
                let e = a.item(c).b.g2;
                let f = -1;
                if (this.k(d, e)) {
                    f = this.e.item(d).item(e);
                }
                if (f == -1) {
                    let g = this.a.ky();
                    let h = this.a.k2();
                    if (g != -1 && h != -1) {
                        f = this.a.d9.indexOfVisibleItemByKey(this.a.i(), d, g, h);
                    }
                }
                if (this.a.ag.contains(d)) {
                    let i = this.s(d);
                    if (i >= 0) {
                        let j = this.a.d9.getRowKey(this.a.i(), i);
                        if (!b.containsKey(j)) {
                            b.addItem(j, ((() => {
                                let $ret = new List$1(Number_$type, 0);
                                $ret.add(e);
                                return $ret;
                            })()));
                        }
                        else if (!b.item(j).contains(e)) {
                            b.item(j).add(e);
                        }
                        if (!this.k(j, e)) {
                            this.ah(j, i, e);
                        }
                    }
                }
                if (!b.containsKey(d)) {
                    b.addItem(d, ((() => {
                        let $ret = new List$1(Number_$type, 0);
                        $ret.add(e);
                        return $ret;
                    })()));
                }
                else if (!b.item(d).contains(e)) {
                    b.item(d).add(e);
                }
                if (!this.k(d, e)) {
                    this.ah(d, f, e);
                }
            }
            let k = this.e.o;
            let l = this.e.p;
            let m = new List$1(PrimaryKeyValue.$, 0);
            let n = new List$1(Number_$type, 0);
            let o = new List$1(Number_$type, 0);
            for (let p = 0; p < k.count; p++) {
                if (l._inner[p]) {
                    continue;
                }
                let q = k._inner[p];
                for (let r = 0; r < this.e.item(q).o.count; r++) {
                    if (this.e.item(q).p._inner[r]) {
                        continue;
                    }
                    let s = this.e.item(q).o._inner[r];
                    let t = this.e.item(q).q._inner[r];
                    if (!b.containsKey(q) || !b.item(q).contains(s)) {
                        m.add(q);
                        n.add(s);
                        o.add(t);
                    }
                }
            }
            for (let u = 0; u < m.count; u++) {
                this.ao(m._inner[u], o._inner[u], n._inner[u]);
            }
        }
        at() {
            let a = this.a.dj.ae;
            this.r.clear();
            this.r = this.q;
            this.q = new List$1(CellRange.$, 0);
            for (let b = 0; b < a.count; b++) {
                this.q.add(a.item(b).a());
            }
            let c = this.a.d9.getStickyRows();
            if (c != null) {
                for (let d = 0; d < c.length; d++) {
                    let e = this.a.d9.getRowType(c[d]);
                    if (e == 3) {
                        for (let f = 0; f < this.a.model.bx.count; f++) {
                            let g = this.a.model.bx._inner[f];
                            let h = this.a.model.br._inner[g].n;
                            this.u(c[d], h);
                        }
                    }
                }
            }
            let i = this.a.ky();
            let j = this.a.k2();
            for (let k = i; k <= j; k++) {
                for (let l = 0; l < this.a.model.bx.count; l++) {
                    let m = this.a.model.bx._inner[l];
                    let n = this.a.model.br._inner[m].n;
                    this.u(k, n);
                }
            }
        }
        u(a, b) {
            let c = false;
            let d = false;
            for (let e = 0; e < this.r.count; e++) {
                let f = this.r._inner[e];
                if (f.b(a, b)) {
                    c = true;
                }
            }
            for (let g = 0; g < this.q.count; g++) {
                let h = this.q._inner[g];
                if (h.b(a, b)) {
                    d = true;
                }
            }
            if (c && !d) {
                let i = this.a.e6.j(b, this.a.model);
                this.a.ck.ac(this.a, a, i);
            }
            else if (!c && d) {
                let j = this.a.e6.j(b, this.a.model);
                this.a.ck.ab(this.a, a, j);
            }
        }
        p() {
            return this.a.ah.ae;
        }
        z() {
            this.y();
            this.x();
        }
        ad(a) {
            for (let b = 0; b < this.f.o.count; b++) {
                if (this.f.p._inner[b]) {
                    continue;
                }
                let c = this.f.o._inner[b];
                let d = this.f.q._inner[b];
                if (d >= a) {
                    this.f.item(c, d + 1);
                }
            }
            for (let e = 0; e < this.e.o.count; e++) {
                if (this.e.p._inner[e]) {
                    continue;
                }
                let f = this.e.o._inner[e];
                let g = this.e.q._inner[e];
                for (let h = 0; h < g.o.count; h++) {
                    if (this.e.item(f).p._inner[h]) {
                        continue;
                    }
                    let i = g.o._inner[h];
                    let j = this.e.item(f).item(i);
                    if (j >= a) {
                        this.e.item(f).item(i, j + 1);
                    }
                }
            }
        }
        ae(a) {
            let b = new List$1(PrimaryKeyValue.$, 0);
            let c = new List$1(Number_$type, 0);
            for (let d = 0; d < this.f.o.count; d++) {
                if (this.f.p._inner[d]) {
                    continue;
                }
                let e = this.f.o._inner[d];
                let f = this.f.q._inner[d];
                if (f == a) {
                    b.add(e);
                    c.add(f);
                }
                if (f > a) {
                    this.f.item(e, f - 1);
                }
            }
            for (let g = 0; g < b.count; g++) {
                this.ar(b._inner[g], c._inner[g], true);
            }
            for (let h = 0; h < this.e.o.count; h++) {
                if (this.e.p._inner[h]) {
                    continue;
                }
                let i = this.e.o._inner[h];
                let j = this.e.q._inner[h];
                for (let k = 0; k < j.o.count; k++) {
                    if (this.e.item(i).p._inner[k]) {
                        continue;
                    }
                    let l = j.o._inner[k];
                    let m = this.e.item(i).item(l);
                    if (m == a) {
                        this.e.item(i).item(l, -1);
                    }
                    if (m > a) {
                        this.e.item(i).item(l, m - 1);
                    }
                }
            }
        }
        ac(a, b) {
            let c = this.a.ky();
            let d = this.a.k2();
            let e = new List$1(Number_$type, 0);
            for (let f = 0; f < this.q.count; f++) {
                let g = this.q._inner[f];
                if (g.l > d || g.j < c) {
                    continue;
                }
                if (a < g.k) {
                    this.t(e, g.k - 1);
                }
                if (a <= g.i) {
                    this.t(e, g.i);
                }
            }
            for (let h = 0; h < e.count; h++) {
                if (e._inner[h] >= 0 && e._inner[h] <= this.a.actualColumns.count) {
                    this.a.ck.af(this.a, c, d, e._inner[h], true);
                }
            }
        }
        aa(a, b) {
            let c = this.a.ky();
            let d = this.a.k2();
            let e = new List$1(Number_$type, 0);
            for (let f = 0; f < this.q.count; f++) {
                let g = this.q._inner[f];
                if (g.l > d || g.j < c) {
                    continue;
                }
                if (a < g.k) {
                    this.t(e, g.k);
                }
                if (a <= g.i) {
                    this.t(e, g.i + 1);
                }
            }
            for (let h = 0; h < e.count; h++) {
                if (e._inner[h] >= 0 && e._inner[h] <= this.a.actualColumns.count) {
                    this.a.ck.af(this.a, c, d, e._inner[h], true);
                }
            }
        }
        ab(a, b, c) {
            let d = this.a.ky();
            let e = this.a.k2();
            let f = new List$1(Number_$type, 0);
            for (let g = 0; g < this.q.count; g++) {
                let h = this.q._inner[g];
                if (h.l > e || h.j < d) {
                    continue;
                }
                if (h.c(a) && !h.c(b)) {
                    this.t(f, b);
                    if (b > h.i) {
                        this.t(f, h.i);
                    }
                    else if (b < h.k) {
                        this.t(f, h.k);
                    }
                }
                else if (!h.c(a) && h.c(b)) {
                    this.t(f, b);
                    if (a > h.i) {
                        this.t(f, h.i + 1);
                    }
                    else if (a < h.k) {
                        this.t(f, h.k - 1);
                    }
                }
                else if (!h.c(a) && !h.c(b)) {
                    if (a < h.k && b > h.i) {
                        this.t(f, h.k - 1);
                        this.t(f, h.i);
                    }
                    if (a > h.i && b < h.k) {
                        this.t(f, h.k);
                        this.t(f, h.i + 1);
                    }
                }
            }
            for (let i = 0; i < f.count; i++) {
                this.a.ck.af(this.a, d, e, f._inner[i], true);
            }
        }
        t(a, b) {
            if (b < 0 || b >= this.a.actualColumns.count) {
                return;
            }
            if (!a.contains(b)) {
                a.add(b);
            }
        }
        af(a) {
            let b = new List$1(PrimaryKeyValue.$, 0);
            let c = new List$1(Number_$type, 0);
            for (let d = 0; d < this.f.o.count; d++) {
                if (this.f.p._inner[d]) {
                    continue;
                }
                let e = this.f.o._inner[d];
                let f = this.f.q._inner[d];
                if (f == a) {
                    b.add(e);
                    c.add(f);
                }
            }
            for (let g = 0; g < b.count; g++) {
                this.ar(b._inner[g], c._inner[g], true);
            }
        }
        w() {
            this.i = true;
        }
        v() {
            this.c.u();
            this.d.u();
            for (let a = 0; a < this.a.actualColumns.count; a++) {
                this.c.s(this.a.actualColumns._inner[a].g2, a);
                this.d.s(a, this.a.actualColumns._inner[a].g2);
            }
        }
        y() {
            let a = new List$1(Number_$type, 0);
            let b = new HashSet$1(Number_$type, 0);
            for (let c = 0; c < this.f.o.count; c++) {
                if (this.f.p._inner[c]) {
                    continue;
                }
                let d = this.f.o._inner[c];
                a.add(this.f.item(d));
                let e = this.a.d9.indexOfVisibleItemByKey(this.a.i(), d, this.a.ky(), this.a.k2());
                b.add_1(e);
                this.f.item(d, -1);
            }
            for (let f = 0; f < a.count; f++) {
                if (!b.contains(a._inner[f])) {
                    this.a.ck.ap(this.a, a._inner[f]);
                }
            }
        }
        x() {
            let a = new FastIterationDictionary$2(PrimaryKeyValue.$, Number_$type, 0);
            let b = new FastIterationDictionary$2(PrimaryKeyValue.$, Number_$type, 0);
            let c = new List$1(Number_$type, 0);
            for (let d = 0; d < this.e.q.count; d++) {
                let e = this.e.o._inner[d];
                let f = this.a.d9.indexOfVisibleItemByKey(this.a.i(), e, this.a.ky(), this.a.k2());
                let g = this.e.q._inner[d];
                for (let h = 0; h < g.q.count; h++) {
                    let i = g.o._inner[h];
                    if (!a.d(e)) {
                        a.s(e, this.e.item(e).item(i));
                        b.s(e, f);
                    }
                    c.add(i);
                    this.e.item(e).item(i, -1);
                }
            }
            for (let j = 0; j < a.q.count; j++) {
                let k = a.o._inner[j];
                let l = a.q._inner[j];
                let m = b.q._inner[j];
                if (l > -1 && l < this.a.d9.getRowCount()) {
                    let n = this.a.actualDataSource.getItemAtIndex(l);
                    let o = typeCast(DataSourceSpecialRow.$, n);
                    if (o != null && o.rowType == 3) {
                        let p = this.a.d9.getItemKey(this.a.i(), o.targetRow);
                        if (p.equals(k)) {
                            continue;
                        }
                    }
                }
                if (!b.q.contains(l)) {
                    this.a.ck.ae(this.a, l, this.c.item(c._inner[j]), c._inner[j]);
                }
            }
        }
    }
    SelectionManager.$t = /*@__PURE__*/ markType(SelectionManager, 'SelectionManager');
    return SelectionManager;
})();
/**
 * @hidden
 */
let SortManager = /*@__PURE__*/ (() => {
    class SortManager extends Base {
        constructor(a) {
            super();
            this.c = null;
            this.e = false;
            this.c = a;
        }
        d(a) {
            if (null == a) {
                return false;
            }
            let b = a.hy;
            let c = this.c.b4;
            let d = this.a(b, c);
            let e = null == d ? 0 : d.c == 0 ? 1 : 2;
            let f = (this.c.d0 == 3 || this.c.d0 == 2);
            let g = this.b(e, f);
            this.f(a, g);
            return true;
        }
        f(a, b) {
            if (null == a) {
                return false;
            }
            let c = a.hy;
            let d = this.c.b4;
            let e = this.a(c, d);
            return this.g(c, b, e);
        }
        g(a, b, c) {
            if (this.e) {
                return false;
            }
            this.e = true;
            try {
                let d = this.c.b4;
                let e = d.j(c);
                let f = (this.c.d0 == 1 || this.c.d0 == 3);
                if (null != c) {
                    d.h(c);
                }
                if (false == f) {
                    d.m();
                }
                switch (b) {
                    case 0: break;
                    case 2:
                    case 1:
                        {
                            let g = b == 1 ? 0 : 1;
                            let h = new ColumnSortDescription(2, a, g);
                            if (f && e >= 0) {
                                d.i.insert(e, h);
                            }
                            else {
                                d.g(h);
                            }
                        }
                        break;
                }
                return true;
            }
            finally {
                this.e = false;
            }
        }
        h() {
            let a = this.c.b4;
            let b = a.i.count;
            if (b > 1) {
                for (let c = b - 1; c > 0; c--) {
                    a.i.removeAt(c);
                }
            }
        }
        a(a, b) {
            if (null == b || b.i.count < 1) {
                return null;
            }
            for (let c = 0; c < b.i.count; c++) {
                let d = b.i.item(c);
                if (d.f == a) {
                    return d;
                }
            }
            return null;
        }
        b(a, b) {
            if (b) {
                switch (a) {
                    case 0: return 1;
                    case 1: return 2;
                    case 2: return 0;
                }
            }
            else {
                switch (a) {
                    case 0:
                    case 2: return 1;
                    default: return 2;
                }
            }
            return 0;
        }
    }
    SortManager.$t = /*@__PURE__*/ markType(SortManager, 'SortManager');
    return SortManager;
})();
/**
 * @hidden
 */
let IDataAdapter_$type = /*@__PURE__*/ new Type(null, 'IDataAdapter');
/**
 * @hidden
 */
let DataAdapter = /*@__PURE__*/ (() => {
    class DataAdapter extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.h = new Dictionary$2(Base.$, Number_$type, 0);
            this.i = new List$1(PrimaryKeyValue.$, 0);
            this.g = null;
            this.b = null;
            this.d = null;
            this.propertyChanged = null;
            this.j = 0;
            this.k = 0;
            this.g = a;
        }
        get c() {
            return this.b;
        }
        set c(a) {
            let b = this.b;
            this.b = a;
            if (this.b != b) {
                this.n("DataSource", b, this.b);
            }
        }
        get e() {
            return this.d;
        }
        set e(a) {
            let b = this.d;
            this.d = a;
            if (this.d != b) {
                this.n("EditableDataSource", b, this.d);
            }
        }
        setDataSource(a) {
            this.c = a;
            this.e = typeCast(IEditableDataSource_$type, this.c);
        }
        getItemForKey(a) {
            let b = this.indexOfKey(a);
            if (b == -1) {
                if (a.value != null && a.value.length == 1) {
                    return a.value[0];
                }
                return null;
            }
            return this.c.getItemAtIndex(b);
        }
        getItemKey(a, item_) {
            let b = (item_ != null && item_.$$isSpecialRow !== undefined);
            if (a == null) {
                if (item_ == null) {
                    return null;
                }
                return PrimaryKeyValue.createIdentityKey(item_);
            }
            if (b) {
                let c = item_;
                if (this.c.isSectionContentVisible || !this.c.isSectionHeaderNormalRow || c.rowType != 1) {
                    return PrimaryKeyValue.createIdentityKey(item_);
                }
                else if (c.rowType == 1) {
                    let d = c.getSectionKeys();
                    for (let e = 0; e < d.length; e++) {
                        for (let f = 0; f < a.length; f++) {
                            if (a[f] != d[e]) {
                                return PrimaryKeyValue.createIdentityKey(item_);
                            }
                        }
                    }
                }
            }
            let g = new Array(a.length);
            for (let h = 0; h < a.length; h++) {
                g[h] = this.c.getItemProperty(item_, a[h]);
            }
            return new PrimaryKeyValue(a, g);
        }
        getRowKey(a, b) {
            if (this.c == null) {
                return null;
            }
            if (b < 0 || b > this.c.actualCount - 1) {
                return null;
            }
            let c = this.c.getItemAtIndex(b);
            if (c == null) {
                return null;
            }
            return this.getItemKey(a, c);
        }
        n(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            this.o(a, b, c);
        }
        o(a, b, c) {
            switch (a) {
                case "DataSource":
                    this.a = null;
                    this.h.clear();
                    if (this.c != null) {
                        if (this.a == null) {
                            this.a = new Array(1);
                            this.a[0] = new DefaultSectionInformation(0, this.b.actualCount, null, null, null);
                        }
                        for (let d = 0; d < this.a.length; d++) {
                            if (this.a[d].groupKeyValues != null) {
                                this.h.addItem(this.a[d].groupKeyValues, d);
                            }
                        }
                        for (let e = 0; e < this.i.count; e++) {
                            this.b.pinRow(this.i._inner[e].value);
                        }
                        this.i.clear();
                    }
                    break;
            }
        }
        getRowCount() {
            return this.l(0);
        }
        m(a, b) {
            if (this.b == null) {
                return -1;
            }
            if (this.b.actualPrimaryKey != null && this.b.isKeyIndexLookupSupported) {
                return this.indexOfKey(a);
            }
            if (this.b.isItemIndexLookupSupported) {
                return this.b.indexOfItem(b);
            }
            return -1;
        }
        indexOfKey(a) {
            if (this.b == null) {
                return -1;
            }
            if (this.b.actualPrimaryKey != null && this.b.isKeyIndexLookupSupported) {
                return this.b.indexOfKey(a.value);
            }
            return -1;
        }
        fastGetItemIndexForKey(a, b, c, d) {
            let e = this.indexOfVisibleItemByKey(a, b, c, d);
            if (e >= 0) {
                return e;
            }
            return this.indexOfKey(b);
        }
        indexOfVisibleItemByKey(a, b, c, d) {
            if (this.b == null) {
                return -1;
            }
            for (let e = c; e <= d; e++) {
                if (e > this.b.actualCount - 1) {
                    break;
                }
                let f = this.b.getItemAtIndex(e);
                if (f == null) {
                    continue;
                }
                let g = this.getItemKey(a, f);
                if (g == null) {
                    continue;
                }
                if (g.value != null && g.value.length == 1 && g.value[0] != null && getInstanceType(g.value[0]) == DataSourceSpecialRow.$ && b.value != null && b.value.length == 1 && b.value[0] != null && getInstanceType(b.value[0]) == DataSourceSpecialRow.$) {
                    let h = typeCast(DataSourceSpecialRow.$, g.value[0]);
                    let i = typeCast(DataSourceSpecialRow.$, b.value[0]);
                    if (h.rowType == i.rowType && h.targetRow == i.targetRow) {
                        return e;
                    }
                }
                if (g.equals(b)) {
                    return e;
                }
            }
            return -1;
        }
        l(a) {
            if (this.b == null) {
                return 0;
            }
            return this.b.actualCount;
        }
        getSectionCount() {
            if (this.a == null) {
                return 0;
            }
            return this.a.length;
        }
        f(a) {
            return a;
        }
        getDataRow(a) {
            if (a == null) {
                return -1;
            }
            a = this.f(a);
            if (this.a == null || this.a.length < 1) {
                if (this.b.actualCount > a.w) {
                    return a.w;
                }
            }
            else {
                let b = this.a[a.x].startIndex;
                let c = b + a.w;
                if (c < 0 || c >= this.b.actualCount) {
                    return -1;
                }
                return c;
            }
            return -1;
        }
        resolveValue(a, b) {
            if (a < 0 || a > this.b.actualCount - 1) {
                return null;
            }
            if (b != null && b.length == 1 && b.charAt(0) == '.') {
                return this.b.getItemAtIndex(a);
            }
            return this.b.getItemPropertyAtIndex(a, b);
        }
        resolveValueForPath(a, b) {
            let c = null;
            if (b.az == -400) {
                let d = this.b.getRowType(b.w);
                let e = this.b.getMainValuePath(d);
                c = e;
            }
            else {
                let f = a.a0(b);
                c = f.hy;
            }
            return this.resolveValue(b.w, c);
        }
        resolveRow(a) {
            if (a < 0 || a > this.b.actualCount - 1) {
                return null;
            }
            return this.b.getItemAtIndex(a);
        }
        resolveValueForDataRow(a) {
            if (a < 0 || a > this.b.actualCount - 1) {
                return null;
            }
            return this.b.getItemAtIndex(a);
        }
        resolveValueForRow(a) {
            a = this.f(a);
            if (a == null) {
                return null;
            }
            let b = this.getDataRow(a);
            if (b < 0 || b > this.b.actualCount - 1) {
                return null;
            }
            return this.b.getItemAtIndex(b);
        }
        getSectionForRow(a) {
            if (this.a == null || this.a.length < 2) {
                return 0;
            }
            for (let b = 0; b < this.a.length; b++) {
                if (b < this.a.length - 1) {
                    if (a > this.a[b + 1].startIndex) {
                        continue;
                    }
                }
                return b;
            }
            return this.a.length - 1;
        }
        getRowPathForRow(a) {
            let b = this.getSectionForRow(a);
            return new RowPath(b, a - this.a[b].startIndex);
        }
        get firstVisibleIndexRequested() {
            return this.j = 0;
        }
        set firstVisibleIndexRequested(a) {
            this.j = a;
            if (this.b != null) {
                this.b.firstVisibleIndexRequested = this.j;
            }
        }
        get lastVisibleIndexRequested() {
            return this.k = 0;
        }
        set lastVisibleIndexRequested(a) {
            this.k = a;
            if (this.b != null) {
                this.b.lastVisibleIndexRequested = this.k;
            }
        }
        isPlaceholderValue(a) {
            if (this.b == null) {
                return false;
            }
            let b = this.getDataRow(a);
            if (b < 0 || b > this.b.actualCount - 1) {
                return false;
            }
            return this.b.isPlaceholderItem(b);
        }
        isPlaceholderItem(a) {
            if (this.b == null) {
                return false;
            }
            return this.b.isPlaceholderItem(a);
        }
        getRowType(a) {
            if (this.b == null) {
                return 0;
            }
            return this.b.getRowType(a);
        }
        getStickyRows() {
            if (this.b == null) {
                return null;
            }
            return this.b.getStickyRows();
        }
        getStickyRowsInRange(a, b) {
            if (this.b == null) {
                return null;
            }
            return this.b.getStickyRowsInRange(a, b);
        }
        getStickRowPriority(a) {
            if (this.b == null) {
                return -1;
            }
            return this.b.getStickyRowPriority(a);
        }
        isExclusivelySticky(a) {
            if (this.b == null) {
                return false;
            }
            return this.b.isExclusivelySticky(a);
        }
        isRowSpanning(a) {
            if (this.b == null) {
                return false;
            }
            return this.b.isRowSpanning(a);
        }
        pinRow(a) {
            if (this.b == null) {
                this.i.add(a);
                return;
            }
            this.b.pinRow(a.value);
        }
        unpinRow(a) {
            if (this.b == null) {
                for (let b = 0; b < this.i.count; b++) {
                    if (this.i._inner[b].equals(a)) {
                        this.i.remove(this.i._inner[b]);
                        break;
                    }
                }
                return;
            }
            this.b.unpinRow(a.value);
        }
        clearPinnedRows() {
            if (this.b == null) {
                return;
            }
            this.b.clearPinnedRows();
        }
        isRowPinned(a) {
            if (this.b == null) {
                return false;
            }
            return this.b.isRowPinned(a);
        }
        getRowIndent(a) {
            if (this.b == null) {
                return 0;
            }
            return this.b.getRowLevel(a);
        }
        getRootSummaryRowCount() {
            if (this.b == null) {
                return 0;
            }
            return this.b.getRootSummaryRowCount();
        }
        isEditedValue(a, b) {
            if (this.e == null || a == null) {
                return false;
            }
            let c = this.getItemKey(this.b.actualPrimaryKey, a);
            return this.e.hasEdit(c.value, b) || this.e.hasAdd(c.value);
        }
        isDeletedRow(a) {
            if (this.e == null || a == null) {
                return false;
            }
            let b = this.getItemKey(this.b.actualPrimaryKey, a);
            return this.e.hasDelete(b.value);
        }
        getPendingEditID(a, b) {
            if (this.e == null || a == null) {
                return -1;
            }
            let c = this.getItemKey(this.b.actualPrimaryKey, a);
            return this.e.getTransactionID(c.value, b);
        }
        getError(a) {
            if (this.e == null || a == -1) {
                return null;
            }
            return this.e.getTransactionErrorByID(a);
        }
    }
    DataAdapter.$t = /*@__PURE__*/ markType(DataAdapter, 'DataAdapter', Base.$, [INotifyPropertyChanged_$type, IDataAdapter_$type]);
    return DataAdapter;
})();
/**
 * @hidden
 */
let ColumnMovingSeparator = /*@__PURE__*/ (() => {
    class ColumnMovingSeparator extends DefinitionBase {
        constructor() {
            super(...arguments);
            this.el = truncate(DeviceUtils.g(2));
        }
        cm(a, b, c) {
            return "columnMovingSeparator";
        }
        l(a) {
            return new VerticalSeparatorCellModel();
        }
        eb() {
            return GridStyleRepository.ay;
        }
        get em() {
            return this.el;
        }
        set em(a) {
            let b = this.el;
            this.el = a;
            if (this.el != b) {
                this.c2("SeparatorWidth", 6, b, this.el);
            }
        }
        cz(a, b) {
            this.c8();
        }
        c8() {
            if (this.d7 == null) {
                if (this.grid != null && this.grid.uv != null) {
                    this.d0 = this.grid.uv;
                    return;
                }
                this.d0 = this.eb();
            }
            else {
                this.d0 = this.d7;
            }
        }
        c1(a, b) {
            switch (b.propertyName) {
                case "ColumnMovingSeparatorBackground":
                    this.c8();
                    break;
            }
        }
    }
    ColumnMovingSeparator.$t = /*@__PURE__*/ markType(ColumnMovingSeparator, 'ColumnMovingSeparator', DefinitionBase.$);
    return ColumnMovingSeparator;
})();
/**
 * @hidden
 */
let ComboBoxColumn = /*@__PURE__*/ (() => {
    class ComboBoxColumn extends Column {
        constructor() {
            super();
            this.jp = null;
            this.fc = 1;
        }
        get jq() {
            return this.jp;
        }
        set jq(a) {
            let b = this.jp;
            this.jp = a;
            if (this.jp != b) {
                this.c2("ActualDataSource", 10, b, this.jp);
            }
        }
        get jr() {
            return this.g4;
        }
        set jr(a) {
            this.g4 = a;
        }
        get jv() {
            return this.hu;
        }
        set jv(a) {
            this.hu = a;
        }
        get jo() {
            return this.em;
        }
        set jo(a) {
            this.em = a;
        }
        l(a) {
            return new TextCellModel();
        }
        cm(a, b, c) {
            return "combobox";
        }
        cz(a, b) {
            super.cz(a, b);
            if (this.jq == null && this.jr != null) {
                if (b != null) {
                    this.jq = b.externalGrid.createLocalDataSource(this.jr);
                }
            }
        }
        cy(a, b, c, d) {
            super.cy(a, b, c, d);
            let e = a;
            e.ks = this.ju(c);
        }
        cw(a, b, c, d) {
            super.cw(a, b, c, d);
        }
        c3(a, b, c, d) {
            super.c3(a, b, c, d);
            switch (a) {
                case "EditorItemsSourceInternal":
                    if (typeCast(IDataSource_$type, this.jr) !== null) {
                        this.jq = this.jr;
                    }
                    else if (this.grid != null) {
                        this.jq = this.grid.externalGrid.createLocalDataSource(this.jr);
                    }
                    break;
                case "ActualDataSource":
                    if (c != null) {
                        let e = c;
                        e.schemaChanged = delegateRemove(e.schemaChanged, runOn(this, this.jw));
                    }
                    if (this.jq != null) {
                        let f = this.jq;
                        f.schemaChanged = delegateCombine(f.schemaChanged, runOn(this, this.jw));
                    }
                    this.jx();
                    break;
                case "EditorTextFieldInternal":
                case "EditorValueFieldInternal":
                    this.jx();
                    break;
            }
        }
        jw(a, b) {
            this.jx();
        }
        jx() {
            if (this.jq != null) {
                if (this.jo != null) {
                    this.jq.primaryKey = this.jo;
                }
                else if (this.jv != null) {
                    this.jq.primaryKey = [this.jv];
                }
                else {
                    let a = this.jq.actualSchema;
                    if (a != null && a.propertyNames.length > 0) {
                        this.jq.primaryKey = [a.propertyNames[0]];
                    }
                }
            }
        }
        jt(a) {
            if (typeof a === 'string') {
                return a;
            }
            return null;
        }
        ju(a) {
            let b = null;
            if (this.jq != null && this.jv != null) {
                let c = this.jq.indexOfKey([a]);
                if (c > -1) {
                    let d = this.jq.getItemPropertyAtIndex(c, this.jv);
                    if (d != null) {
                        b = this.jt(d);
                    }
                }
            }
            if (b == null && a != null) {
                b = this.jt(a);
            }
            return b;
        }
    }
    ComboBoxColumn.$t = /*@__PURE__*/ markType(ComboBoxColumn, 'ComboBoxColumn', Column.$);
    return ComboBoxColumn;
})();
/**
 * @hidden
 */
let DateTimeColumn = /*@__PURE__*/ (() => {
    class DateTimeColumn extends Column {
        constructor() {
            super();
            this.jr = new DateTimeColumnValueFormatter();
            this.js = 0;
            this.jz = null;
            this.jo = null;
            this.jw = null;
        }
        get jt() {
            return this.js;
        }
        set jt(a) {
            let b = this.js;
            this.js = a;
            if (this.js != b) {
                this.c2("DateTimeFormat", 4, enumGetBox(DateTimeFormats_$type, b), enumGetBox(DateTimeFormats_$type, this.js));
            }
        }
        get j4() {
            return this.jz;
        }
        set j4(a) {
            let b = this.jz;
            this.jz = a;
            if (this.jz != b) {
                this.c2("FormatString", 8, b, this.jz);
            }
        }
        get jq() {
            return this.jo;
        }
        set jq(a) {
            let b = this.jo;
            this.jo = a;
            if (this.jo != b) {
                this.c2("FormatSpecifiers", 9, b, this.jo);
            }
        }
        get jy() {
            return this.jw;
        }
        set jy(a) {
            let b = this.jw;
            this.jw = a;
            if (this.jw != b) {
                this.c2("FormatOverride", 9, b, this.jw);
            }
        }
        get ju() {
            return this.fc;
        }
        set ju(a) {
            this.fc = a;
        }
        get jx() {
            return this.g4;
        }
        set jx(a) {
            this.g4 = a;
        }
        get j1() {
            return this.hu;
        }
        set j1(a) {
            this.hu = a;
        }
        get jp() {
            return this.em;
        }
        set jp(a) {
            this.em = a;
        }
        c3(a, b, c, d) {
            super.c3(a, b, c, d);
            switch (a) {
                case "DateTimeFormat":
                    this.jr.k();
                    break;
            }
        }
        l(a) {
            return new DateTimeCellModel();
        }
        cm(a, b, c) {
            return "datetime";
        }
        cy(a, b, c, d) {
            super.cy(a, b, c, d);
            let e = a;
            e.k0 = this.jv(c);
            e.ku = this.jr;
            this.jr.j(e);
        }
        cw(a, b, c, d) {
            super.cw(a, b, c, d);
            let e = a;
            e.kw = this.jt;
            e.lh = this.j4;
            e.kr = this.jq;
            e.la = this.jy;
        }
        jv(a) {
            if (a == null) {
                return dateMinValue();
            }
            if (typeCast(Date_$type, a) !== null) {
                return a;
            }
            return dateMinValue();
        }
    }
    DateTimeColumn.$t = /*@__PURE__*/ markType(DateTimeColumn, 'DateTimeColumn', Column.$);
    return DateTimeColumn;
})();
/**
 * @hidden
 */
let IExternalDefinitionBase_$type = /*@__PURE__*/ new Type(null, 'IExternalDefinitionBase');
/**
 * @hidden
 */
let DataBindingEventArgs = /*@__PURE__*/ (() => {
    class DataBindingEventArgs extends EventArgs {
        constructor() {
            super(...arguments);
            this._resolvedValue = null;
            this._rowObject = null;
            this._cellInfo = null;
        }
        get resolvedValue() {
            return this._resolvedValue;
        }
        set resolvedValue(a) {
            this._resolvedValue = a;
        }
        get rowObject() {
            return this._rowObject;
        }
        set rowObject(a) {
            this._rowObject = a;
        }
        get cellInfo() {
            return this._cellInfo;
        }
        set cellInfo(a) {
            this._cellInfo = a;
        }
    }
    DataBindingEventArgs.$t = /*@__PURE__*/ markType(DataBindingEventArgs, 'DataBindingEventArgs', EventArgs.$);
    return DataBindingEventArgs;
})();
/**
 * @hidden
 */
let Header = /*@__PURE__*/ (() => {
    class Header extends DefinitionBase {
        constructor() {
            super();
            this.e8 = null;
            this.e7 = null;
            this.em = 3;
            this.el = 3;
            this.eq = truncate(DeviceUtils.g(12));
            this.es = truncate(DeviceUtils.g(0));
            this.er = truncate(DeviceUtils.g(12));
            this.ep = truncate(DeviceUtils.g(0));
            this.e9 = this.fa();
        }
        eg() {
            return GridStyleRepository.bj;
        }
        eb() {
            return GridStyleRepository.bh;
        }
        fa() {
            return GridStyleRepository.bl;
        }
        af() {
            return GridStyleRepository.h;
        }
        cz(a, b) {
            this.c8();
            this.df();
            this.dg();
            this.e5();
            this.e6();
        }
        c8() {
            if (this.d7 == null) {
                if (this.grid != null && this.grid.u0 != null) {
                    this.d0 = this.grid.u0;
                    return;
                }
                this.d0 = this.eb();
            }
            else {
                this.d0 = this.d7;
            }
        }
        df() {
            if (this.ek == null) {
                if (this.grid != null && this.grid.u4 != null) {
                    this.d6 = this.grid.u4;
                    return;
                }
                this.d6 = this.eg();
            }
            else {
                this.d6 = this.ek;
            }
        }
        dg() {
            if (this.textStyle == null) {
                if (this.grid != null && this.grid.fr != null) {
                    this.ad = this.grid.fr;
                    return;
                }
                this.ad = this.af();
            }
            else {
                this.ad = this.textStyle;
            }
        }
        e5() {
            if (this.fb == null) {
                if (this.grid != null && this.grid.u3 != null) {
                    this.e9 = this.grid.u3;
                    return;
                }
                this.e9 = this.fa();
            }
            else {
                this.e9 = this.fb;
            }
        }
        e6() {
            if (this.eo == 3) {
                if (this.grid != null) {
                    this.en = this.grid.e2;
                    return;
                }
                this.en = 0;
            }
            else {
                this.en = this.eo;
            }
        }
        c1(a, b) {
            switch (b.propertyName) {
                case "HeaderBackground":
                    this.c8();
                    break;
                case "HeaderTextColor":
                    this.df();
                    break;
                case "HeaderTextStyle":
                    this.dg();
                    break;
                case "HeaderSortIndicatorColor":
                    this.e5();
                    break;
                case "HeaderSortIndicatorStyle":
                    this.e6();
                    break;
            }
        }
        get fb() {
            return this.e8;
        }
        set fb(a) {
            let b = this.e8;
            this.e8 = a;
            if (this.e8 != b) {
                this.c2("SortIndicatorColor", 10, b, this.e8);
            }
        }
        get e9() {
            return this.e7;
        }
        set e9(a) {
            let b = this.e7;
            this.e7 = a;
            if (this.e7 != b) {
                this.c2("ActualSortIndicatorColor", 2, b, this.e7);
            }
        }
        get eo() {
            return this.em;
        }
        set eo(a) {
            let b = this.em;
            this.em = a;
            if (this.em != b) {
                this.c2("SortIndicatorStyle", 11, enumGetBox(SortIndicatorStyle_$type, b), enumGetBox(SortIndicatorStyle_$type, this.em));
            }
        }
        get en() {
            return this.el;
        }
        set en(a) {
            let b = this.el;
            this.el = a;
            if (this.el != b) {
                this.c2("ActualSortIndicatorStyle", 11, enumGetBox(SortIndicatorStyle_$type, b), enumGetBox(SortIndicatorStyle_$type, this.el));
            }
        }
        get eu() {
            return this.eq;
        }
        set eu(a) {
            let b = this.eq;
            this.eq = a;
            if (this.eq != b) {
                this.c2("PaddingLeft", 6, b, this.eq);
            }
        }
        get ew() {
            return this.es;
        }
        set ew(a) {
            let b = this.es;
            this.es = a;
            if (this.es != b) {
                this.c2("PaddingTop", 6, b, this.es);
            }
        }
        get ev() {
            return this.er;
        }
        set ev(a) {
            let b = this.er;
            this.er = a;
            if (this.er != b) {
                this.c2("PaddingRight", 6, b, this.er);
            }
        }
        get et() {
            return this.ep;
        }
        set et(a) {
            let b = this.ep;
            this.ep = a;
            if (this.ep != b) {
                this.c2("PaddingBottom", 6, b, this.ep);
            }
        }
        ak(a) {
            if (super.ak(a)) {
                return true;
            }
            if (stringStartsWith(a, "Actual")) {
                return false;
            }
            switch (a) {
                case "PaddingBottom":
                    this.c2("PaddingBottom", 0, this.et, this.et);
                    return true;
                case "PaddingLeft":
                    this.c2("PaddingLeft", 0, this.eu, this.eu);
                    return true;
                case "PaddingRight":
                    this.c2("PaddingRight", 0, this.ev, this.ev);
                    return true;
                case "PaddingTop":
                    this.c2("PaddingTop", 0, this.ew, this.ew);
                    return true;
                case "SortIndicatorColor":
                    this.c2("ActualSortIndicatorColor", 2, this.e9, this.e9);
                    return true;
            }
            return false;
        }
        cw(a, b, c, d) {
            super.cw(a, b, c, d);
            a.fo = this.eu;
            a.fs = this.ew;
            a.fq = this.ev;
            a.fm = this.et;
            a.kn = this.e9;
        }
        cy(a, b, c, d) {
            super.cy(a, b, c, d);
            let e = b.a0(a.k);
            if (e != null) {
                if (a.k.g && e.f6()) {
                    let f = e.fm;
                    let g = f.o;
                    let h = g.count;
                    let i = f.p;
                    let j = f.q;
                    for (let k = 0; k < h; k++) {
                        if (i._inner[k]) {
                            continue;
                        }
                        a.jt(g._inner[k], j._inner[k]);
                    }
                }
            }
        }
    }
    Header.$t = /*@__PURE__*/ markType(Header, 'Header', DefinitionBase.$);
    return Header;
})();
/**
 * @hidden
 */
let ColumnResizingSeparator = /*@__PURE__*/ (() => {
    class ColumnResizingSeparator extends DefinitionBase {
        cm(a, b, c) {
            return "columnResizingSeparator";
        }
        l(a) {
            return new VerticalSeparatorCellModel();
        }
        eb() {
            return GridStyleRepository.a5;
        }
        cz(a, b) {
            this.c8();
        }
        c8() {
            if (this.d7 == null) {
                if (this.grid != null && this.grid.ux != null) {
                    this.d0 = this.grid.ux;
                    return;
                }
                this.d0 = this.eb();
            }
            else {
                this.d0 = this.d7;
            }
        }
        el(a, b) {
            switch (b.propertyName) {
                case "ColumnResizingSeparatorBackground":
                    this.c8();
                    break;
            }
        }
    }
    ColumnResizingSeparator.$t = /*@__PURE__*/ markType(ColumnResizingSeparator, 'ColumnResizingSeparator', DefinitionBase.$);
    return ColumnResizingSeparator;
})();
/**
 * @hidden
 */
let HeaderSeparator = /*@__PURE__*/ (() => {
    class HeaderSeparator extends DefinitionBase {
        cm(a, b, c) {
            return "headerSeparator";
        }
        l(a) {
            return new VerticalSeparatorCellModel();
        }
        eb() {
            return GridStyleRepository.bi;
        }
        el() {
            return truncate(DeviceUtils.g(1));
        }
        cz(a, b) {
            this.c8();
            this.em();
        }
        c1(a, b) {
            switch (b.propertyName) {
                case "HeaderSeparatorBackground":
                    this.c8();
                    break;
            }
        }
        c8() {
            if (this.d7 == null) {
                if (this.grid != null && this.grid.u2 != null) {
                    this.d0 = this.grid.u2;
                    return;
                }
                this.d0 = this.eb();
            }
            else {
                this.d0 = this.d7;
            }
        }
        em() {
            if (this.grid != null) {
                this.d1 = ((() => {
                    let $ret = new Brush();
                    $ret.color = Color.u(0, 0, 0, 0);
                    return $ret;
                })());
                let a = this.grid.km(this.grid.la);
                this.be = a;
                this.bf = a;
            }
        }
        cw(a, b, c, d) {
            super.cw(a, b, c, d);
        }
    }
    HeaderSeparator.$t = /*@__PURE__*/ markType(HeaderSeparator, 'HeaderSeparator', DefinitionBase.$);
    return HeaderSeparator;
})();
/**
 * @hidden
 */
let ImageColumn = /*@__PURE__*/ (() => {
    class ImageColumn extends Column {
        constructor() {
            super();
            this.js = 0;
            this.jq = 0;
            this.jt = 0;
            this.h = this.i();
            this.c = this.d();
        }
        get jt() {
            return this.js;
        }
        set jt(a) {
            let b = this.js;
            this.js = a;
            if (this.js != b) {
                this.c2("ImageStretchOption", 4, enumGetBox(ImageStretchOptions_$type, b), enumGetBox(ImageStretchOptions_$type, this.js));
            }
        }
        get jr() {
            return this.jq;
        }
        set jr(a) {
            let b = this.jq;
            this.jq = a;
            if (this.jq != b) {
                this.c2("ImageResourceType", 11, enumGetBox(ImageResourceType_$type, b), enumGetBox(ImageResourceType_$type, this.jq));
            }
        }
        get jp() {
            return this.fc;
        }
        set jp(a) {
            this.fc = a;
        }
        get ju() {
            return this.g4;
        }
        set ju(a) {
            this.g4 = a;
        }
        get jv() {
            return this.hu;
        }
        set jv(a) {
            this.hu = a;
        }
        get jo() {
            return this.em;
        }
        set jo(a) {
            this.em = a;
        }
        i() {
            if (this.j != 4) {
                return this.j;
            }
            return 3;
        }
        ep() {
            if (this.c == 3) {
                return 1;
            }
            return super.ep();
        }
        eq() {
            if (this.h == 3) {
                return 1;
            }
            return super.eq();
        }
        d() {
            if (this.e != 4) {
                return this.e;
            }
            return 3;
        }
        l(a) {
            return new ImageCellModel();
        }
        cm(a, b, c) {
            return "image";
        }
        cy(a, b, c, d) {
            super.cy(a, b, c, d);
            let e = a;
            if (c != null) {
                e.ip = c.toString();
                e.kt = this.jt;
                e.kr = this.jr;
                e.ky = this.jw(c);
            }
        }
        cw(a, b, c, d) {
            super.cw(a, b, c, d);
        }
        jw(a) {
            if (a == null) {
                return "";
            }
            if (typeof a === 'string') {
                return a;
            }
            return a.toString();
        }
    }
    ImageColumn.$t = /*@__PURE__*/ markType(ImageColumn, 'ImageColumn', Column.$);
    return ImageColumn;
})();
/**
 * @hidden
 */
let NumericColumn = /*@__PURE__*/ (() => {
    class NumericColumn extends Column {
        constructor() {
            super();
            this.j5 = null;
            this.j7 = null;
            this.j6 = null;
            this.j8 = "";
            this.jv = 10;
            this.jw = 0;
            this.jx = -1;
            this.js = false;
            this.j4 = null;
            this.jo = null;
            this.j1 = null;
            this.c = this.d();
        }
        d() {
            if (this.e != 4) {
                return this.e;
            }
            return 2;
        }
        get kh() {
            return this.j5;
        }
        set kh(a) {
            let b = this.j5;
            this.j5 = a;
            if (this.j5 != b) {
                this.c2("NegativePrefix", 8, b, this.j5);
            }
        }
        get kl() {
            return this.j7;
        }
        set kl(a) {
            let b = this.j7;
            this.j7 = a;
            if (this.j7 != b) {
                this.c2("PositivePrefix", 8, b, this.j7);
            }
        }
        get kj() {
            return this.j6;
        }
        set kj(a) {
            let b = this.j6;
            this.j6 = a;
            if (this.j6 != b) {
                this.c2("NegativeSuffix", 8, b, this.j6);
            }
        }
        get kn() {
            return this.j8;
        }
        set kn(a) {
            let b = this.j8;
            this.j8 = a;
            if (this.j8 != b) {
                this.c2("PositiveSuffix", 8, b, this.j8);
            }
        }
        get jy() {
            return this.jv;
        }
        set jy(a) {
            let b = this.jv;
            this.jv = a;
            if (this.jv != b) {
                this.c2("MaxFractionDigits", 6, b, this.jv);
            }
        }
        get jz() {
            return this.jw;
        }
        set jz(a) {
            let b = this.jw;
            this.jw = a;
            if (this.jw != b) {
                this.c2("MinFractionDigits", 6, b, this.jw);
            }
        }
        get j0() {
            return this.jx;
        }
        set j0(a) {
            let b = this.jx;
            this.jx = a;
            if (this.jx != b) {
                this.c2("MinIntegerDigits", 6, b, this.jx);
            }
        }
        get jt() {
            return this.js;
        }
        set jt(a) {
            let b = this.js;
            this.js = a;
            if (this.js != b) {
                this.c2("ShowGroupingSeparator", 5, b, this.js);
            }
        }
        get kc() {
            return this.j4;
        }
        set kc(a) {
            let b = this.j4;
            this.j4 = a;
            if (this.j4 != b) {
                this.c2("FormatString", 8, b, this.j4);
            }
        }
        get jq() {
            return this.jo;
        }
        set jq(a) {
            let b = this.jo;
            this.jo = a;
            if (this.jo != b) {
                this.c2("FormatSpecifiers", 9, b, this.jo);
            }
        }
        get j3() {
            return this.j1;
        }
        set j3(a) {
            let b = this.j1;
            this.j1 = a;
            if (this.j1 != b) {
                this.c2("FormatOverride", 9, b, this.j1);
            }
        }
        get jr() {
            return this.fc;
        }
        set jr(a) {
            this.fc = a;
        }
        get j2() {
            return this.g4;
        }
        set j2(a) {
            this.g4 = a;
        }
        get j9() {
            return this.hu;
        }
        set j9(a) {
            this.hu = a;
        }
        get jp() {
            return this.em;
        }
        set jp(a) {
            this.em = a;
        }
        l(a) {
            return new NumericCellModel();
        }
        cm(a, b, c) {
            return "numeric";
        }
        cy(a, b, c, d) {
            super.cy(a, b, c, d);
            let e = a;
            {
                e.kv = false;
                e.kz = this.ju(c);
            }
        }
        cw(a, b, c, d) {
            super.cw(a, b, c, d);
            let e = a;
            e.k9 = this.jz;
            e.k7 = this.jy;
            e.lb = this.j0;
            e.l4 = this.kl;
            e.lz = this.kh;
            e.l6 = this.kn;
            e.l1 = this.kj;
            e.lt = this.kc;
            e.kr = this.jq;
            e.ll = this.j3;
            e.kx = this.jt;
        }
        ju(a) {
            if (a == null) {
                return NaN;
            }
            if (typeof a === 'number') {
                return typeGetValue(a);
            }
            if (typeof a === 'number') {
                return a;
            }
            if (typeof a === 'number') {
                return a;
            }
            if (typeof a === 'number') {
                return typeGetValue(a);
            }
            if (typeof a === 'string') {
                let b;
                if (((() => { let c = tryParseNumber(a, b); b = c.p1; return c.ret; })())) {
                    return b;
                }
            }
            if (typeof a === 'number') {
                return typeGetValue(a);
            }
            if (typeof a === 'number') {
                return typeGetValue(a);
            }
            if (typeof a === 'number') {
                return typeGetValue(a);
            }
            if (typeof a === 'number') {
                return typeGetValue(a);
            }
            if (typeof a === 'number') {
                return typeGetValue(a);
            }
            return NaN;
        }
    }
    NumericColumn.$t = /*@__PURE__*/ markType(NumericColumn, 'NumericColumn', Column.$);
    return NumericColumn;
})();
/**
 * @hidden
 */
let PinnedAreaSeparator = /*@__PURE__*/ (() => {
    class PinnedAreaSeparator extends DefinitionBase {
        cm(a, b, c) {
            return "pinnedAreaSeparator";
        }
        l(a) {
            return ((() => {
                let $ret = new VerticalSeparatorCellModel();
                $ret.kr = false;
                return $ret;
            })());
        }
        eb() {
            return GridStyleRepository.a3;
        }
        cz(a, b) {
            this.c8();
        }
        c8() {
            if (this.d7 == null) {
                this.d0 = this.eb();
            }
            else {
                this.d0 = this.d7;
            }
        }
        c1(a, b) {
        }
    }
    PinnedAreaSeparator.$t = /*@__PURE__*/ markType(PinnedAreaSeparator, 'PinnedAreaSeparator', DefinitionBase.$);
    return PinnedAreaSeparator;
})();
/**
 * @hidden
 */
let SectionFooter = /*@__PURE__*/ (() => {
    class SectionFooter extends DefinitionBase {
        l(a) {
            return new TextCellModel();
        }
        cm(a, b, c) {
            return "sectionFooter";
        }
        cy(a, b, c, d) {
            super.cy(a, b, c, d);
        }
        cw(a, b, c, d) {
            this.d0 = GridStyleRepository.a7;
            super.cw(a, b, c, d);
        }
    }
    SectionFooter.$t = /*@__PURE__*/ markType(SectionFooter, 'SectionFooter', DefinitionBase.$);
    return SectionFooter;
})();
/**
 * @hidden
 */
let SectionHeader = /*@__PURE__*/ (() => {
    class SectionHeader extends DefinitionBase {
        constructor() {
            super();
            this.fc = null;
            this.fb = null;
            this.et = truncate(DeviceUtils.g(12));
            this.ev = truncate(DeviceUtils.g(1));
            this.eu = truncate(DeviceUtils.g(1));
            this.es = truncate(DeviceUtils.g(1));
            this.ep = false;
            this.em = 4;
            this.sectionHeaderPropertyUpdating = null;
            this.er = new Dictionary$2(String_$type, ComboBoxColumn.$, 0);
            this.fd = this.ee();
        }
        get fe() {
            return this.fc;
        }
        set fe(a) {
            let b = this.fc;
            this.fc = a;
            if (this.fc != b) {
                this.c2("SelectedBackground", 10, b, this.fc);
            }
        }
        get fd() {
            return this.fb;
        }
        set fd(a) {
            let b = this.fb;
            this.fb = a;
            if (this.fb != b) {
                this.c2("ActualSelectedBackground", 2, b, this.fb);
            }
        }
        get ex() {
            return this.et;
        }
        set ex(a) {
            let b = this.et;
            this.et = a;
            if (this.et != b) {
                this.c2("PaddingLeft", 6, b, this.et);
            }
        }
        get ez() {
            return this.ev;
        }
        set ez(a) {
            let b = this.ev;
            this.ev = a;
            if (this.ev != b) {
                this.c2("PaddingTop", 6, b, this.ev);
            }
        }
        get ey() {
            return this.eu;
        }
        set ey(a) {
            let b = this.eu;
            this.eu = a;
            if (this.eu != b) {
                this.c2("PaddingRight", 6, b, this.eu);
            }
        }
        get ew() {
            return this.es;
        }
        set ew(a) {
            let b = this.es;
            this.es = a;
            if (this.es != b) {
                this.c2("PaddingBottom", 6, b, this.es);
            }
        }
        get eq() {
            return this.ep;
        }
        set eq(a) {
            let b = this.ep;
            this.ep = a;
            if (this.ep != b) {
                this.c2("IsCollapsable", 5, b, this.ep);
            }
        }
        get en() {
            return this.em;
        }
        set en(a) {
            let b = this.em;
            this.em = a;
            if (this.em != b) {
                this.c2("SummaryDisplayMode", 4, enumGetBox(GroupSummaryDisplayMode_$type, b), enumGetBox(GroupSummaryDisplayMode_$type, this.em));
            }
        }
        cm(a, b, c) {
            return "sectionHeader";
        }
        l(a) {
            return new SectionHeaderCellModel();
        }
        eb() {
            return GridStyleRepository.a8;
        }
        cy(a, b, c, d) {
            super.cy(a, b, c, d);
            let e = new List$1(GroupData.$, 0);
            let f = new List$1(SummaryData.$, 0);
            let g = stringEmpty();
            let h = stringEmpty();
            let i = typeCast(FastIterationDictionary$2.$.specialize(String_$type, Base.$), c);
            if (i != null) {
                let j = b.actualDataSource.actualSchema;
                let k = 0;
                for (let l = 0; l < i.o.count; l++) {
                    let m = i.o._inner[l];
                    let n = i.q._inner[l];
                    let o = null;
                    for (let p = 0; p < b.a7.i.count; p++) {
                        if (b.a7.i.item(p).f == m) {
                            o = b.a7.i.item(p);
                            break;
                        }
                    }
                    if (!o.o) {
                        b.sv(o);
                    }
                    if (k > 0) {
                        g += ", ";
                    }
                    e.add(this.el(m, n, o, o.m));
                    g += e._inner[k].b;
                    k++;
                }
                if (this.en == 0 && b.b7.i.count > 0) {
                    let q = typeCast(DataSourceSpecialRow.$, d);
                    if (q != null && q.summaryResults != null) {
                        for (let r = 0; r < q.summaryResults.length; r++) {
                            if (q.summaryResults[r] != null) {
                                let s = q.summaryResults[r].summaryIndex;
                                let t = b.b7.i.item(s);
                                if (r > 0) {
                                    h += ", ";
                                }
                                f.add(this.u(t, q.summaryResults[r]));
                                h += f._inner[r].c;
                            }
                        }
                    }
                }
            }
            let u = typeCast(SectionHeaderCellModel.$, a);
            if (u != null) {
                u.ks = e.toArray();
                u.kt = f.toArray();
                u.k6 = g;
                u.k4 = h;
                u.kv = this.en;
                if (b.e0.o(u)) {
                    u.b8 = 1;
                }
                else {
                    u.b8 = 0;
                }
                if (b.aj.m(u)) {
                    u.by = 1;
                }
                else {
                    u.by = 0;
                }
                u.ar = this.eq;
                u.az = b.actualDataSource.getIsRowExpandedAtIndex(a.k.w);
                u.e5 = b.d9.getRowIndent(a.k.w);
            }
        }
        cw(a, b, c, d) {
            super.cw(a, b, c, d);
            a.km = this.fd;
            a.fo = this.ex;
            a.fs = this.ez;
            a.fq = this.ey;
            a.fm = this.ew;
        }
        cz(a, b) {
            this.fa();
            this.c8();
            this.df();
            this.dg();
            this.e9();
            if (a != null) {
                a.actualColumnsChanged = delegateRemove(a.actualColumnsChanged, runOn(this, this.e8));
            }
            if (b != null) {
                b.actualColumnsChanged = delegateCombine(b.actualColumnsChanged, runOn(this, this.e8));
            }
        }
        e8(a, b) {
            this.er.clear();
            for (let c = 0; c < b.columns.count; c++) {
                let d = typeCast(ComboBoxColumn.$, b.columns._inner[c]);
                if (d != null && !this.er.containsKey(d.hy)) {
                    this.er.addItem(d.hy, d);
                }
            }
        }
        c1(a, b) {
            switch (b.propertyName) {
                case "SectionHeaderSelectedBackground":
                    this.fa();
                    break;
                case "SectionHeaderBackground":
                    this.c8();
                    break;
                case "SectionHeaderTextColor":
                    this.df();
                    break;
                case "SectionHeaderTextStyle":
                    this.dg();
                    break;
                case "IsGroupCollapsable":
                    this.e9();
                    break;
            }
        }
        fa() {
            if (this.fe == null) {
                if (this.grid != null && this.grid.vd != null) {
                    this.fd = this.grid.vd;
                }
                else {
                    this.fd = this.ee();
                }
            }
            else {
                this.fd = this.fe;
            }
        }
        c8() {
            if (this.d7 == null) {
                if (this.grid != null && this.grid.vc != null) {
                    this.d0 = this.grid.vc;
                    return;
                }
                this.d0 = this.eb();
            }
            else {
                this.d0 = this.d7;
            }
        }
        df() {
            if (this.ek == null) {
                if (this.grid != null && this.grid.ve != null) {
                    this.d6 = this.grid.ve;
                    return;
                }
                this.d6 = this.eg();
            }
            else {
                this.d6 = this.ek;
            }
        }
        dg() {
            if (this.textStyle == null) {
                if (this.grid != null && this.grid.fs != null) {
                    this.ad = this.grid.fs;
                    return;
                }
                this.ad = this.af();
            }
            else {
                this.ad = this.textStyle;
            }
        }
        e9() {
            if (this.grid != null) {
                this.eq = this.grid.hs;
            }
        }
        c3(a, b, c, d) {
            super.c3(a, b, c, d);
            switch (a) {
                case "SelectedBackground":
                    this.fa();
                    break;
            }
            if (this.sectionHeaderPropertyUpdating != null) {
                this.sectionHeaderPropertyUpdating(this, a, b, c, d);
            }
        }
        el(a, b, c, d) {
            let e = b != null ? b.toString() : stringEmpty();
            let f = a + ": " + e;
            let g = stringEmpty();
            if (c != null) {
                if (c.v == null) {
                    g = a + ": ";
                }
                else if (c.v != stringEmpty()) {
                    g = c.v + ": ";
                }
                if (b != null) {
                    switch (d) {
                        case 10:
                            if (c.q != null) {
                                let override_ = c.q;
                                let val_ = typeGetValue(b);
                                e = (override_.format(val_));
                            }
                            else {
                                e = (typeGetValue(b)).toString();
                            }
                            break;
                        case 8:
                            if (c.q != null) {
                                let override_ = c.q;
                                let val_ = b;
                                e = (override_.format(val_));
                            }
                            else {
                                e = b.toString();
                            }
                            break;
                        case 5:
                            if (c.q != null) {
                                let override_ = c.q;
                                let val_ = b;
                                e = (override_.format(val_));
                            }
                            else {
                                e = b.toString();
                            }
                            break;
                        case 1:
                            if (c.q != null) {
                                let override_ = c.q;
                                let val_ = typeGetValue(b);
                                e = (override_.format(val_));
                            }
                            else {
                                e = (typeGetValue(b)).toString();
                            }
                            break;
                        case 3:
                            if (c.q != null) {
                                let override_ = c.q;
                                let val_ = typeGetValue(b);
                                e = (override_.format(val_));
                            }
                            else {
                                e = typeGetValue(b).toString();
                            }
                            break;
                        case 4:
                            if (c.q != null) {
                                let override_ = c.q;
                                let val_ = typeGetValue(b);
                                e = (override_.format(val_));
                            }
                            else {
                                e = typeGetValue(b).toString();
                            }
                            break;
                        case 7:
                            if (c.q != null) {
                                let override_ = c.q;
                                let val_ = b;
                                e = (override_.format(val_));
                            }
                            else {
                                e = b.toString();
                            }
                            break;
                        case 0:
                        case 6:
                        case 2:
                        case 11:
                            e = b.toString();
                            break;
                    }
                    if (this.er.containsKey(c.f)) {
                        let h = this.er.item(c.f);
                        let i = h.ju(b);
                        if (i != null) {
                            e = i;
                        }
                    }
                }
                if (c.l != null) {
                    e = c.l.i(b);
                }
                f = g + e;
                if (c.k != null) {
                    f = c.k.i(b);
                }
                f = c.w(b, e, f);
            }
            return ((() => {
                let $ret = new GroupData();
                $ret.c = a;
                $ret.a = b;
                $ret.b = f;
                return $ret;
            })());
        }
    }
    SectionHeader.$t = /*@__PURE__*/ markType(SectionHeader, 'SectionHeader', DefinitionBase.$);
    return SectionHeader;
})();
/**
 * @hidden
 */
let RowSeparator = /*@__PURE__*/ (() => {
    class RowSeparator extends DefinitionBase {
        cm(a, b, c) {
            return "rowSeparator";
        }
        cz(a, b) {
            this.c8();
        }
        c8() {
            if (this.d7 == null) {
                if (this.grid != null && this.grid.u8 != null) {
                    this.d0 = this.grid.u8;
                    return;
                }
                this.d0 = this.eb();
            }
            else {
                this.d0 = this.d7;
            }
        }
        dc() {
            if (this.ei == null) {
                if (this.grid != null && this.grid.va != null) {
                    this.d4 = this.grid.va;
                    return;
                }
                this.d4 = this.ed();
            }
            else {
                this.d4 = this.ei;
            }
        }
        de() {
            if (this.ej == null) {
                if (this.grid != null && this.grid.vb != null) {
                    this.d5 = this.grid.vb;
                    return;
                }
                this.d5 = this.ef();
            }
            else {
                this.d5 = this.ej;
            }
        }
        db() {
            if (this.eh == null) {
                if (this.grid != null && this.grid.u9 != null) {
                    this.d3 = this.grid.u9;
                    return;
                }
                this.d3 = this.ec();
            }
            else {
                this.d3 = this.eh;
            }
        }
        c1(a, b) {
            switch (b.propertyName) {
                case "RowSeparatorBackground":
                    this.c8();
                    break;
                case "RowSeparatorLastStickyRowBackground":
                    this.db();
                    break;
                case "RowSeparatorPinnedRowBackground":
                    this.dc();
                    break;
                case "RowSeparatorStickyRowBackground":
                    this.de();
                    break;
            }
        }
        l(a) {
            return new RowSeparatorModel();
        }
        eb() {
            return GridStyleRepository.bk;
        }
        ef() {
            return GridStyleRepository.bc;
        }
        ec() {
            return GridStyleRepository.a2;
        }
        ed() {
            return this.eb();
        }
        av() {
            return 1;
        }
    }
    RowSeparator.$t = /*@__PURE__*/ markType(RowSeparator, 'RowSeparator', DefinitionBase.$);
    return RowSeparator;
})();
/**
 * @hidden
 */
let HeaderRowSeparator = /*@__PURE__*/ (() => {
    class HeaderRowSeparator extends DefinitionBase {
        cm(a, b, c) {
            return "headerRowSeparator";
        }
        l(a) {
            return new RowSeparatorModel();
        }
        eb() {
            return GridStyleRepository.a0;
        }
        c8() {
            if (this.d7 == null) {
                if (this.grid != null && this.grid.u1 != null) {
                    this.d0 = this.grid.u1;
                    return;
                }
                this.d0 = this.eb();
            }
            else {
                this.d0 = this.d7;
            }
        }
        cz(a, b) {
            this.c8();
        }
        c1(a, b) {
            switch (b.propertyName) {
                case "HeaderRowSeparatorBackground":
                    this.c8();
                    break;
            }
        }
    }
    HeaderRowSeparator.$t = /*@__PURE__*/ markType(HeaderRowSeparator, 'HeaderRowSeparator', DefinitionBase.$);
    return HeaderRowSeparator;
})();
/**
 * @hidden
 */
let SummaryRow = /*@__PURE__*/ (() => {
    class SummaryRow extends DefinitionBase {
        constructor() {
            super();
            this.fd = null;
            this.fb = null;
            this.fe = null;
            this.fc = null;
            this.em = null;
            this.el = null;
            this.er = truncate(DeviceUtils.g(12));
            this.et = truncate(DeviceUtils.g(0));
            this.es = truncate(DeviceUtils.g(12));
            this.eq = truncate(DeviceUtils.g(0));
            this.ff = this.ee();
            this.en = this.eo();
            this.fg = this.fh();
        }
        get fi() {
            return this.fd;
        }
        set fi(a) {
            let b = this.fd;
            this.fd = a;
            if (this.fd != b) {
                this.c2("SelectedBackground", 10, b, this.fd);
            }
        }
        get ff() {
            return this.fb;
        }
        set ff(a) {
            let b = this.fb;
            this.fb = a;
            if (this.fb != b) {
                this.c2("ActualSelectedBackground", 2, b, this.fb);
            }
        }
        get fj() {
            return this.fe;
        }
        set fj(a) {
            let b = this.fe;
            this.fe = a;
            if (this.fe != b) {
                this.c2("SummaryLabelTextColor", 10, b, this.fe);
            }
        }
        get fg() {
            return this.fc;
        }
        set fg(a) {
            let b = this.fc;
            this.fc = a;
            if (this.fc != b) {
                this.c2("ActualSummaryLabelTextColor", 2, b, this.fc);
            }
        }
        get summaryNameTextStyle() {
            return this.em;
        }
        set summaryNameTextStyle(a) {
            let b = this.em;
            this.em = a;
            if (this.em != b) {
                this.c2("SummaryNameFontInfo", 10, b, this.em);
            }
        }
        get en() {
            return this.el;
        }
        set en(a) {
            let b = this.el;
            this.el = a;
            if (this.el != b) {
                this.c2("ActualSummaryLabelFontInfo", 3, b, this.el);
            }
        }
        get ev() {
            return this.er;
        }
        set ev(a) {
            let b = this.er;
            this.er = a;
            if (this.er != b) {
                this.c2("PaddingLeft", 6, b, this.er);
            }
        }
        get ex() {
            return this.et;
        }
        set ex(a) {
            let b = this.et;
            this.et = a;
            if (this.et != b) {
                this.c2("PaddingTop", 6, b, this.et);
            }
        }
        get ew() {
            return this.es;
        }
        set ew(a) {
            let b = this.es;
            this.es = a;
            if (this.es != b) {
                this.c2("PaddingRight", 6, b, this.es);
            }
        }
        get eu() {
            return this.eq;
        }
        set eu(a) {
            let b = this.eq;
            this.eq = a;
            if (this.eq != b) {
                this.c2("PaddingBottom", 6, b, this.eq);
            }
        }
        cm(a, b, c) {
            return "summary";
        }
        l(a) {
            return new SummaryCellModel();
        }
        cy(a, b, c, d) {
            super.cy(a, b, c, d);
            let e = typeCast(DataSourceSpecialRow.$, d);
            let f = stringEmpty();
            let g = stringEmpty();
            let h = b.a0(a.k);
            if (h != null) {
                let i = e.getSummaryResults(h.hy);
                if (i.length > 0 && b.b7.i.count > 0) {
                    let j = b.b7.i.item(i[0].summaryIndex);
                    if (j.j != null) {
                        let k = this.u(j, i[0]);
                        f = j.ac != null ? j.ac : j.j.displayName;
                        g = k.d;
                    }
                }
            }
            let l = typeCast(SummaryCellModel.$, a);
            if (l != null) {
                l.ky = f;
                l.k0 = g;
                l.e5 = b.d9.getRowIndent(a.k.w);
                if (b.e0.o(l)) {
                    l.b8 = 1;
                }
                else {
                    l.b8 = 0;
                }
                if (b.aj.m(l)) {
                    l.by = 1;
                }
                else {
                    l.by = 0;
                }
            }
        }
        cw(a, b, c, d) {
            super.cw(a, b, c, d);
            let e = typeCast(SummaryCellModel.$, a);
            e.km = this.ff;
            e.ke = this.d0;
            e.k5 = this.fg;
            e.kr = this.en;
            e.fo = this.ev;
            e.fs = this.ex;
            e.fq = this.ew;
            e.fm = this.eu;
        }
        cz(a, b) {
            this.e8();
            this.e9();
            this.c8();
            this.df();
            this.dg();
            this.fa();
        }
        fh() {
            return GridStyleRepository.bd;
        }
        eg() {
            return GridStyleRepository.be;
        }
        c1(a, b) {
            switch (b.propertyName) {
                case "SummaryRootSelectedBackground":
                case "SummarySectionSelectedBackground":
                    this.e8();
                    break;
                case "SummaryRootBackground":
                case "SummarySectionBackground":
                    this.c8();
                    break;
                case "SummaryRootValueTextColor":
                case "SummarySectionValueTextColor":
                    this.df();
                    break;
                case "SummaryRootLabelTextColor":
                case "SummarySectionLabelTextColor":
                    this.e9();
                    break;
                case "SummaryRootLabelTextStyle":
                case "SummarySectionLabelTextStyle":
                    this.fa();
                    break;
                case "SummaryRootValueTextStyle":
                case "SummarySectionValueTextStyle":
                    this.dg();
                    break;
            }
        }
        e8() {
            if (this.fi == null) {
                this.ff = this.ee();
            }
            else {
                this.ff = this.fi;
            }
        }
        e9() {
        }
        dg() {
        }
        fa() {
        }
        c3(a, b, c, d) {
            super.c3(a, b, c, d);
            switch (a) {
                case "SelectedBackground":
                    this.e8();
                    break;
                case "SummaryLabelTextColor":
                    this.e9();
                    break;
                case "SummaryNameFontInfo":
                    this.fa();
                    break;
            }
        }
        af() {
            return GridStyleRepository.j;
        }
        eo() {
            return GridStyleRepository.i;
        }
    }
    SummaryRow.$t = /*@__PURE__*/ markType(SummaryRow, 'SummaryRow', DefinitionBase.$);
    return SummaryRow;
})();
/**
 * @hidden
 */
let SummaryRowRoot = /*@__PURE__*/ (() => {
    class SummaryRowRoot extends SummaryRow {
        cm(a, b, c) {
            return "summaryRowRoot";
        }
        eb() {
            return GridStyleRepository.a6;
        }
        c8() {
            if (this.d7 == null) {
                if (this.grid != null && this.grid.vg != null) {
                    this.d0 = this.grid.vg;
                    return;
                }
                this.d0 = this.eb();
            }
            else {
                this.d0 = this.d7;
            }
        }
        e8() {
            if (this.fi == null) {
                if (this.grid != null && this.grid.vi != null) {
                    this.ff = this.grid.vi;
                }
                else {
                    this.ff = this.ee();
                }
            }
            else {
                this.ff = this.fi;
            }
        }
        e9() {
            if (this.fj == null) {
                if (this.grid != null && this.grid.vh != null) {
                    this.fg = this.grid.vh;
                }
                else {
                    this.fg = this.fh();
                }
            }
            else {
                this.fg = this.fj;
            }
        }
        df() {
            if (this.ek == null) {
                if (this.grid != null && this.grid.vj != null) {
                    this.d6 = this.grid.vj;
                }
                else {
                    this.d6 = this.eg();
                }
            }
            else {
                this.d6 = this.ek;
            }
        }
        fa() {
            if (this.summaryNameTextStyle == null) {
                if (this.grid != null && this.grid.ft != null) {
                    this.en = this.grid.ft;
                }
                else {
                    this.en = this.eo();
                }
            }
            else {
                this.en = this.summaryNameTextStyle;
            }
        }
    }
    SummaryRowRoot.$t = /*@__PURE__*/ markType(SummaryRowRoot, 'SummaryRowRoot', SummaryRow.$);
    return SummaryRowRoot;
})();
/**
 * @hidden
 */
let SummaryRowSection = /*@__PURE__*/ (() => {
    class SummaryRowSection extends SummaryRow {
        cm(a, b, c) {
            return "summaryRowSection";
        }
        eb() {
            return GridStyleRepository.a9;
        }
        c8() {
            if (this.d7 == null) {
                if (this.grid != null && this.grid.vk != null) {
                    this.d0 = this.grid.vk;
                    return;
                }
                this.d0 = this.eb();
            }
            else {
                this.d0 = this.d7;
            }
        }
        e8() {
            if (this.fi == null) {
                if (this.grid != null && this.grid.vm != null) {
                    this.ff = this.grid.vm;
                }
                else {
                    this.ff = this.ee();
                }
            }
            else {
                this.ff = this.fi;
            }
        }
        e9() {
            if (this.fj == null) {
                if (this.grid != null && this.grid.vl != null) {
                    this.fg = this.grid.vl;
                }
                else {
                    this.fg = this.fh();
                }
            }
            else {
                this.fg = this.fj;
            }
        }
        df() {
            if (this.ek == null) {
                if (this.grid != null && this.grid.vn != null) {
                    this.d6 = this.grid.vn;
                }
                else {
                    this.d6 = this.eg();
                }
            }
            else {
                this.d6 = this.ek;
            }
        }
        fa() {
            if (this.summaryNameTextStyle == null) {
                if (this.grid != null && this.grid.fv != null) {
                    this.en = this.grid.fv;
                }
                else {
                    this.en = this.eo();
                }
            }
            else {
                this.en = this.summaryNameTextStyle;
            }
        }
    }
    SummaryRowSection.$t = /*@__PURE__*/ markType(SummaryRowSection, 'SummaryRowSection', SummaryRow.$);
    return SummaryRowSection;
})();
/**
 * @hidden
 */
let TemplateColumn = /*@__PURE__*/ (() => {
    class TemplateColumn extends Column {
        constructor() {
            super();
            this.cellUpdating = null;
            this.ga = false;
        }
        l(a) {
            return new TemplateCellModel();
        }
        cm(a, b, c) {
            let d = "template-" + this.g2;
            return d;
        }
        cy(a, b, c, d) {
            super.cy(a, b, c, d);
            let e = a;
            e.ks = c;
        }
        cw(a, b, c, d) {
            super.cw(a, b, c, d);
        }
        jp(a, b) {
            if (this.cellUpdating != null) {
                this.cellUpdating(this, ((() => {
                    let $ret = new TemplateCellUpdatingEventArgs();
                    $ret.cellInfo = a;
                    $ret.content = b;
                    return $ret;
                })()));
            }
        }
        c3(a, b, c, d) {
            switch (a) {
                case "IsEditable":
                    this.ga = false;
                    break;
            }
            super.c3(a, b, c, d);
        }
    }
    TemplateColumn.$t = /*@__PURE__*/ markType(TemplateColumn, 'TemplateColumn', Column.$);
    return TemplateColumn;
})();
/**
 * @hidden
 */
let TemplateCellUpdatingEventArgs = /*@__PURE__*/ (() => {
    class TemplateCellUpdatingEventArgs extends EventArgs {
        constructor() {
            super(...arguments);
            this._cellInfo = null;
            this._content = null;
        }
        get cellInfo() {
            return this._cellInfo;
        }
        set cellInfo(a) {
            this._cellInfo = a;
        }
        get content() {
            return this._content;
        }
        set content(a) {
            this._content = a;
        }
    }
    TemplateCellUpdatingEventArgs.$t = /*@__PURE__*/ markType(TemplateCellUpdatingEventArgs, 'TemplateCellUpdatingEventArgs', EventArgs.$);
    return TemplateCellUpdatingEventArgs;
})();
/**
 * @hidden
 */
let TextColumn = /*@__PURE__*/ (() => {
    class TextColumn extends Column {
        constructor() {
            super(...arguments);
            this.jr = null;
        }
        get ju() {
            return this.jr;
        }
        set ju(a) {
            let b = this.jr;
            this.jr = a;
            if (this.jr != b) {
                this.c2("FormatString", 8, b, this.jr);
            }
        }
        get jp() {
            return this.fc;
        }
        set jp(a) {
            this.fc = a;
        }
        get jq() {
            return this.g4;
        }
        set jq(a) {
            this.g4 = a;
        }
        get js() {
            return this.hu;
        }
        set js(a) {
            this.hu = a;
        }
        get jo() {
            return this.em;
        }
        set jo(a) {
            this.em = a;
        }
        l(a) {
            return new TextCellModel();
        }
        cy(a, b, c, d) {
            super.cy(a, b, c, d);
            let e = a;
            if (c != null) {
                e.ks = this.jt(c);
            }
            else {
                e.ks = null;
            }
        }
        cw(a, b, c, d) {
            super.cw(a, b, c, d);
            let e = a;
        }
        jt(a) {
            if (typeof a === 'string') {
                return a;
            }
            return null;
        }
        cm(a, b, c) {
            return "text";
        }
    }
    TextColumn.$t = /*@__PURE__*/ markType(TextColumn, 'TextColumn', Column.$);
    return TextColumn;
})();
/**
 * @hidden
 */
let TextHeader = /*@__PURE__*/ (() => {
    class TextHeader extends Header {
        constructor() {
            super();
            this.c = 0;
            this.h = 1;
        }
        l(a) {
            let b = new TextHeaderCellModel();
            return b;
        }
        cm(a, b, c) {
            return "textHeader";
        }
        cw(a, b, c, d) {
            super.cw(a, b, c, d);
            let e = a;
            let f = b.a0(a.k);
            e.kv = f.ex;
            e.ld = f.je;
            e.kx = f.e1;
        }
        cy(a, b, c, d) {
            super.cy(a, b, c, d);
            let e = a;
            let f = b.a0(a.k);
            e.ks = f.hh;
            e.ip = e.ks;
            e.m = f.e6;
            e.k1 = f.f3;
            e.kz = this.en;
        }
    }
    TextHeader.$t = /*@__PURE__*/ markType(TextHeader, 'TextHeader', Header.$);
    return TextHeader;
})();
/**
 * @hidden
 */
let GridEffect = /*@__PURE__*/ (() => {
    class GridEffect extends Base {
        constructor() {
            super();
            this.s = 0;
            this.u = 0;
            this.br = "";
            this.af = false;
            this.ac = false;
            this.onFinished = null;
            this.onCanceled = null;
            this.a3 = 0;
            this.a1 = 0;
            this.h = null;
            this.a7 = -1;
            this.a8 = -1;
            this.a2 = 300;
            this.j = null;
            this.a4 = 0;
            this.c = null;
            this.a = null;
            this.a6 = -1;
            this.ad = false;
            this.ab = false;
            this.bk = -1;
            this.bm = null;
            this.bn = null;
            this.w = null;
            this.p = null;
            this.aa = false;
            this.n = null;
            this.ae = false;
            this.ay = null;
            this.az = 1;
            this.a5 = -1;
            this.b = null;
            this.ax = new Dictionary$2(CellPath.$, Number_$type, 0);
        }
        bu() {
            if (this.onFinished != null) {
                this.onFinished(this);
            }
        }
        bt(a) {
            if (this.onCanceled != null) {
                this.onCanceled(this, a);
            }
        }
        get t() {
            return this.s;
        }
        set t(a) {
            this.s = a;
        }
        am(a) {
            if (a == null) {
                return false;
            }
            if (a.s != this.s) {
                return false;
            }
            if (!this.af) {
                return true;
            }
            if (a.u != this.u) {
                return false;
            }
            if (a.br != this.br) {
                return false;
            }
            return true;
        }
        get v() {
            return this.u;
        }
        set v(a) {
            this.u = a;
        }
        get bs() {
            return this.br;
        }
        set bs(a) {
            this.br = a;
        }
        get as() {
            return this.af;
        }
        set as(a) {
            this.af = a;
        }
        get ap() {
            return this.ac;
        }
        set ap(a) {
            this.ac = a;
        }
        get ba() {
            return this.a3;
        }
        set ba(a) {
            this.a3 = a;
            this.a1 = a;
        }
        get i() {
            return this.h;
        }
        set i(a) {
            this.h = a;
        }
        get bi() {
            return this.a7;
        }
        set bi(a) {
            this.a7 = a;
        }
        get bj() {
            return this.a8;
        }
        set bj(a) {
            this.a8 = a;
        }
        get a9() {
            return this.a2;
        }
        set a9(a) {
            this.a2 = a;
        }
        get k() {
            return this.j;
        }
        set k(a) {
            this.j = a;
        }
        get bg() {
            return this.a4;
        }
        set bg(a) {
            this.a4 = a;
        }
        get g() {
            return this.c;
        }
        set g(a) {
            this.c = a;
        }
        get e() {
            return this.a;
        }
        set e(a) {
            this.a = a;
        }
        get bh() {
            return this.a6;
        }
        set bh(a) {
            this.a6 = a;
        }
        get aq() {
            return this.ad;
        }
        set aq(a) {
            this.ad = a;
        }
        get ao() {
            return this.ab;
        }
        set ao(a) {
            this.ab = a;
        }
        get bl() {
            return this.bk;
        }
        set bl(a) {
            this.bk = a;
        }
        get bo() {
            return this.bm;
        }
        set bo(a) {
            this.bm = a;
        }
        get bq() {
            return this.bn;
        }
        set bq(a) {
            this.bn = a;
        }
        get x() {
            return this.w;
        }
        set x(a) {
            this.w = a;
        }
        get q() {
            return this.p;
        }
        set q(a) {
            this.p = a;
        }
        get al() {
            return this.aa;
        }
        set al(a) {
            this.aa = a;
        }
        get o() {
            return this.n;
        }
        set o(a) {
            this.n = a;
        }
        get ar() {
            return this.ae;
        }
        set ar(a) {
            this.ae = a;
        }
        bx(a) {
            this.ba = a.l;
            this.bg = a.m;
            this.bi = a.n;
            this.bj = a.o;
            this.aq = a.e;
            this.q = this.r(a.c);
        }
        r(a) {
            switch (a) {
                case 0: return null;
                case 1: return EasingFunctions.cubicEase;
                case 3: return EasingFunctions.circleEase;
                case 2: return EasingFunctions.exponentialEase;
            }
            return null;
        }
        au(a, b, c, d) {
            if (this.ar && this.an(d)) {
                return false;
            }
            let e = this.a0(d);
            let f = 1;
            if (this.a3 > 0) {
                f = e / this.a3;
            }
            let g = false;
            if (this.w == null) {
                return true;
            }
            if (f >= 1) {
                f = 1;
                g = true;
            }
            if (this.p != null) {
                f = this.p(f);
            }
            let h = this.bp(this.bm, b, a, a.o);
            this.w(f, h, this.bn, a, b);
            return g;
        }
        av(a, b, c, d) {
            if (this.ar && this.an(d)) {
                return false;
            }
            let e = this.a0(d);
            let f = 1;
            if (this.a3 > 0) {
                f = e / this.a3;
            }
            let g = false;
            if (this.w == null) {
                return true;
            }
            if (f >= 1) {
                f = 1;
                g = true;
            }
            if (this.p != null) {
                f = this.p(f);
            }
            let h = this.bp(this.bm, b, a, a);
            this.w(f, h, this.bn, a, b);
            return g;
        }
        a0(a) {
            let b = (a - this.bk);
            if (this.a4 > 0) {
                if (b < this.a4) {
                    b = 0;
                }
                else {
                    b -= this.a4;
                }
            }
            return b;
        }
        an(a) {
            let b = (a - this.bk);
            if (this.a4 > 0) {
                if (b < this.a4) {
                    return true;
                }
            }
            return false;
        }
        bz(a, b, c, d) {
            let e = this.bb(b, a);
            if (this.f == null) {
                return;
            }
            let f = this.bb(b, this.f);
            let g = f / this.a6;
            if (g > 5) {
                g = 5;
            }
            if (g == this.az) {
                return;
            }
            let h = g / this.az;
            this.az = g;
            let i = truncate(Math.round(this.a1 * h));
            if (i <= 0) {
                let j = 0;
                j += 1;
            }
            {
                this.a1 = i;
            }
        }
        at(a, b, c, d) {
            let e = false;
            this.bz(a.k, b, c, d);
            if (this.ar && this.an(d)) {
                return false;
            }
            let f = this.a0(d);
            let g = this.bf(b, c, a.k, d);
            let h = this.bc(b, c, a.k, d);
            if (h < 300) {
                let i = 0;
                i += 1;
            }
            let j = f - g;
            if (j < 0) {
                j = 0;
            }
            let k = 1;
            if (h > 0) {
                k = j / h;
            }
            if (k >= 1) {
                k = 1;
                e = true;
            }
            if (this.p != null) {
                k = this.p(k);
            }
            let l = this.bp(this.bm, b, a, a.k);
            this.w(k, l, this.bn, a, b);
            return e;
        }
        by(a, b, c) {
            if (this.ay == null) {
                this.ay = new Dictionary$2(Base.$, Base.$, 0);
            }
            this.ay.item(c, a);
        }
        bp(a, b, c, d) {
            if (this.al) {
                if (this.ay == null) {
                    this.ay = new Dictionary$2(Base.$, Base.$, 0);
                }
                if (this.ay.containsKey(d)) {
                    return this.ay.item(d);
                }
                let e = this.o(c, b);
                this.ay.item(d, e);
                return e;
            }
            else {
                return this.bm;
            }
        }
        aw(a, b, c, d) {
            if (this.ar && this.an(d)) {
                return false;
            }
            let e = this.a0(d);
            let f = 1;
            if (this.a3 > 0) {
                f = e / this.a3;
            }
            let g = false;
            if (this.w == null) {
                return true;
            }
            if (f >= 1) {
                f = 1;
                g = true;
            }
            if (this.p != null) {
                f = this.p(f);
            }
            this.w(f, this.bm, this.bn, a, b);
            return g;
        }
        ag(a, b) {
            return false;
        }
        ah(a, b) {
            return false;
        }
        ai(a, b) {
            return false;
        }
        aj(a, b) {
            return false;
        }
        bv(a) {
        }
        bw(a) {
        }
        get f() {
            return this.b;
        }
        bf(a, b, c, d) {
            if (c == null) {
                return 0;
            }
            let e = this.bb(a, c);
            let f = this.bd(a, b, c, d);
            let g = this.a3;
            if (this.ad) {
                g = truncate(((f / this.a6) * g));
            }
            let h = this.a7;
            if (h == -1) {
                h = truncate((g / f));
                if ((g - truncate((f * h))) < this.a2) {
                    h = truncate(((g - this.a2) / f));
                }
                if (h < 0) {
                    h = 0;
                }
            }
            let i = h * e;
            if (this.h != null) {
                i = this.h(this.c, this.a6, c);
            }
            let j = this.a1;
            if (i < (j * -1)) {
                i = (j * -1);
            }
            if (i > (j)) {
                i = j - this.a2;
            }
            if (this.ad && this.a0(d) > i && c != null && !this.ax.containsKey(c)) {
                this.ax.addItem(c, f);
            }
            return i;
        }
        bd(a, b, c, d) {
            if (this.f == null || !this.ad) {
                return this.a6;
            }
            if (this.ax.containsKey(c)) {
                return this.ax.item(c);
            }
            let e = this.bb(a, this.f);
            return e;
        }
        bb(a, b) {
            if (b == null) {
                return 0;
            }
            let c = this.be(a, b);
            if (this.a6 == -1) {
                this.a6 = this.be(a, this.a) + 1;
            }
            if (this.ab) {
                c = ((this.a6 - 1) - c);
            }
            let d = c;
            if (d > this.a6 && d > this.a5) {
                this.a5 = d;
                this.b = b;
            }
            return d;
        }
        be(a, b) {
            return 0;
        }
        bc(a, b, c, d) {
            let e = this.a1;
            if (this.j != null) {
                if (this.a6 == -1) {
                    this.a6 = this.be(a, this.a) + 1;
                }
                e = this.j(this.c, this.a6, c);
            }
            else {
                if (this.a8 == -1) {
                    if (this.ad) {
                        let f = this.bd(a, b, c, d);
                        e = this.a3;
                        e = truncate(((f / this.a6) * e));
                        e = e - this.bf(a, b, c, d);
                    }
                    else {
                        if (this.ab) {
                            e = this.a3 - this.bf(a, b, this.d(a), d);
                        }
                        else {
                            e = this.a3 - this.bf(a, b, this.a, d);
                        }
                    }
                }
                else {
                    e = this.a8;
                }
            }
            return e;
        }
        d(a) {
            return this.c;
        }
        y(a, b) {
            if (b.x == a.x) {
                if (b.w <= a.w) {
                    a = a.aa();
                    a.w += 1;
                }
            }
            return a;
        }
        z(a, b) {
            if (b.x == a.x) {
                if (b.w < a.w) {
                    a = a.aa();
                    a.w -= 1;
                }
            }
            return a;
        }
        ak(a, b, c) {
            let d = this.a0(c);
            return d >= this.a1;
        }
    }
    GridEffect.$t = /*@__PURE__*/ markType(GridEffect, 'GridEffect');
    return GridEffect;
})();
/**
 * @hidden
 */
let ColumnEffect = /*@__PURE__*/ (() => {
    class ColumnEffect extends GridEffect {
        constructor() {
            super(...arguments);
            this.b0 = 0;
        }
        ah(a, b) {
            if (this.b0 == a.o) {
                return true;
            }
            return false;
        }
    }
    ColumnEffect.$t = /*@__PURE__*/ markType(ColumnEffect, 'ColumnEffect', GridEffect.$);
    return ColumnEffect;
})();
/**
 * @hidden
 */
let SpacerEffect = /*@__PURE__*/ (() => {
    class SpacerEffect extends GridEffect {
        constructor() {
            super(...arguments);
            this.b0 = 0;
        }
        aj(a, b) {
            return a.o == this.b0;
        }
    }
    SpacerEffect.$t = /*@__PURE__*/ markType(SpacerEffect, 'SpacerEffect', GridEffect.$);
    return SpacerEffect;
})();
/**
 * @hidden
 */
let ColumnCellsEffect = /*@__PURE__*/ (() => {
    class ColumnCellsEffect extends GridEffect {
        constructor() {
            super(...arguments);
            this.b2 = 0;
            this.b1 = 0;
            this.b0 = 0;
        }
        ag(a, b) {
            if (this.b2 == -300) {
                if (a.as) {
                    return true;
                }
            }
            if (this.b2 == -400) {
                if (a.az == -400) {
                    return true;
                }
            }
            if (this.b1 >= 0) {
                if (this.b1 == a.az && this.b0 == a.b) {
                    return true;
                }
            }
            else {
                let c = b.g(this.b2);
                if (c == null) {
                    return false;
                }
                if (a.az == c.m && c.c == a.b) {
                    return true;
                }
            }
            return false;
        }
        d(a) {
            if (a.ci > 0) {
                let b = this.g;
                let c = new CellPath(0, b.b, b.az, -100, -100);
                return c;
            }
            else {
                return this.g;
            }
        }
        be(a, b) {
            let c = this.g;
            let d = this.e;
            let e = b;
            if (e == null) {
                return 0;
            }
            if (e.g) {
                return 0;
            }
            let f = 0;
            if (a.ci > 0) {
                f++;
            }
            if (c == null) {
                return 0;
            }
            if (e.av && e.i) {
                if (d == null) {
                    return 0;
                }
                return (d.w - c.w) + f - e.o;
            }
            if (e.x == c.x) {
                return (e.w - c.w) + f;
            }
            let g = f;
            let h = c.x;
            if (e.x > c.x) {
                while (h <= e.x) {
                    if (h == c.x) {
                        g += (a.bv._inner[h].m - 1) - c.w;
                        if (a.bv._inner[h].d > 0) {
                            g++;
                        }
                    }
                    else if (h == e.x) {
                        if (a.bv._inner[h].g > 0) {
                            g++;
                        }
                        g += (e.w + 1);
                    }
                    else {
                        if (a.bv._inner[h].g > 0) {
                            g++;
                        }
                        g += a.bv._inner[h].m;
                        if (a.bv._inner[h].d > 0) {
                            g++;
                        }
                    }
                    h++;
                }
            }
            else if (e.x < c.x) {
                while (h >= e.x) {
                    if (h == c.x) {
                        g -= c.w;
                        if (a.bv._inner[h].d > 0) {
                            g++;
                        }
                    }
                    else if (h == e.x) {
                        if (a.bv._inner[h].d > 0) {
                            g--;
                        }
                        g -= (a.bv._inner[h].m - e.w);
                    }
                    else {
                        if (a.bv._inner[h].g > 0) {
                            g--;
                        }
                        g -= a.bv._inner[h].m;
                        if (a.bv._inner[h].d > 0) {
                            g--;
                        }
                    }
                    h--;
                }
            }
            return g;
        }
    }
    ColumnCellsEffect.$t = /*@__PURE__*/ markType(ColumnCellsEffect, 'ColumnCellsEffect', GridEffect.$);
    return ColumnCellsEffect;
})();
/**
 * @hidden
 */
let CellEffect = /*@__PURE__*/ (() => {
    class CellEffect extends GridEffect {
        constructor() {
            super(...arguments);
            this.b4 = 0;
            this.b3 = 0;
            this.b1 = 0;
            this.b0 = null;
            this.b2 = false;
        }
        ag(a, b) {
            if (this.b0.w == a.w) {
                if (this.b4 == -400) {
                    if (a.az == -400) {
                        return true;
                    }
                }
                if (this.b3 >= 0) {
                    if (this.b3 == a.az && this.b1 == a.b) {
                        return true;
                    }
                }
                else {
                    let c = b.g(this.b4);
                    if (c == null) {
                        return false;
                    }
                    if (a.az == c.m && c.c == a.b) {
                        return true;
                    }
                }
            }
            return false;
        }
        bv(a) {
            this.b0 = this.y(this.b0, a);
        }
        bw(a) {
            this.b0 = this.z(this.b0, a);
        }
    }
    CellEffect.$t = /*@__PURE__*/ markType(CellEffect, 'CellEffect', GridEffect.$);
    return CellEffect;
})();
/**
 * @hidden
 */
let CellPositionEffect = /*@__PURE__*/ (() => {
    class CellPositionEffect extends CellEffect {
        ag(a, b) {
            return this.b0.equals(a);
        }
        bv(a) {
            this.b0 = this.y(this.b0, a);
        }
        bw(a) {
            this.b0 = this.z(this.b0, a);
        }
    }
    CellPositionEffect.$t = /*@__PURE__*/ markType(CellPositionEffect, 'CellPositionEffect', CellEffect.$);
    return CellPositionEffect;
})();
/**
 * @hidden
 */
let RowEffect = /*@__PURE__*/ (() => {
    class RowEffect extends GridEffect {
        constructor() {
            super(...arguments);
            this.b0 = null;
        }
        ai(a, b) {
            if (this.b0.equals(a)) {
                return true;
            }
            return false;
        }
        bv(a) {
            this.b0 = this.y(this.b0, a);
        }
        bw(a) {
            this.b0 = this.z(this.b0, a);
        }
    }
    RowEffect.$t = /*@__PURE__*/ markType(RowEffect, 'RowEffect', GridEffect.$);
    return RowEffect;
})();
/**
 * @hidden
 */
let RowCellsEffect = /*@__PURE__*/ (() => {
    class RowCellsEffect extends GridEffect {
        constructor() {
            super(...arguments);
            this.b0 = null;
        }
        ag(a, b) {
            if (this.b0.x == a.x && this.b0.w == a.w && this.b0.b == a.b) {
                return true;
            }
            return false;
        }
        bv(a) {
            this.b0 = this.y(this.b0, a);
        }
        bw(a) {
            this.b0 = this.z(this.b0, a);
        }
        be(a, b) {
            if (this.g == null || b.au) {
                return 0;
            }
            if (b.as) {
                return this.be(a, this.e);
            }
            let c = a.br._inner[this.g.az].n;
            let d = a.br._inner[b.az].n;
            if (b.d == 0) {
                d = a.br._inner[b.az].n - a.co;
            }
            else if (b.d == 2) {
                d = a.br._inner[b.az].n - (a.co + a.cr);
            }
            return d - c;
        }
    }
    RowCellsEffect.$t = /*@__PURE__*/ markType(RowCellsEffect, 'RowCellsEffect', GridEffect.$);
    return RowCellsEffect;
})();
/**
 * @hidden
 */
let GridEffectManager = /*@__PURE__*/ (() => {
    class GridEffectManager extends Base {
        constructor(a, b) {
            super();
            this.b = null;
            this.k = new List$1(ColumnEffect.$, 0);
            this.j = new List$1(ColumnCellsEffect.$, 0);
            this.m = new List$1(RowEffect.$, 0);
            this.l = new List$1(RowCellsEffect.$, 0);
            this.i = new List$1(CellEffect.$, 0);
            this.n = new List$1(SpacerEffect.$, 0);
            this.q = -30;
            this.o = -1;
            this.a = null;
            this.b = a;
            this.a = b;
        }
        get c() {
            return this.b;
        }
        ae(a) {
            for (let b = 0; b < this.l.count; b++) {
                this.l._inner[b].bv(a);
            }
            for (let c = 0; c < this.m.count; c++) {
                this.m._inner[c].bv(a);
            }
            for (let d = 0; d < this.i.count; d++) {
                this.i._inner[d].bv(a);
            }
        }
        af(a) {
            for (let b = this.l.count - 1; b >= 0; b--) {
                if (a.equals(this.l._inner[b].b0)) {
                    this.aj(this.l._inner[b].b0, false, this.l._inner[b]);
                }
                else {
                    this.l._inner[b].bw(a);
                }
            }
            for (let c = this.m.count - 1; c >= 0; c--) {
                if (a.equals(this.m._inner[c].b0)) {
                    this.ak(this.m._inner[c].b0, false, this.m._inner[c]);
                }
                else {
                    this.m._inner[c].bw(a);
                }
            }
            for (let d = this.i.count - 1; d >= 0; d--) {
                if (a.equals(this.i._inner[d].b0)) {
                    this.ag(this.i._inner[d].b0, false, this.i._inner[d]);
                }
                else {
                    this.i._inner[d].bw(a);
                }
            }
        }
        ad() {
            let a = this.k.count > 0;
            this.a.ip = true;
            this.an(false);
            if (a) {
                let b = this.a.model.absoluteWidth;
                this.a.e6.q(this.a, this.a.model, truncate(this.a.jm));
                this.d();
                if (b != this.a.model.absoluteWidth) {
                    this.a.externalGrid.onContentSizeChanged();
                }
            }
            this.a.ip = false;
            this.a.renderingEngine.invalidateVisibility(() => this.a.fc.l(this.a));
            this.a.renderingEngine.refresh(this.a.model, true);
        }
        d() {
            let a = this.k.count > 0;
            let b = this.p();
            let c = this.a.model;
            let d = this.a.de;
            this.f(b, c, d);
            return a;
        }
        ac() {
            let a = this.p();
            let b = this.a.model;
            let c = this.a.de;
            this.g(a, b, c);
        }
        ab() {
            let a = this.p();
            let b = this.a.model;
            let c = this.a.de;
            this.e(a, b, c);
        }
        an(a) {
            let b = this.p();
            if ((b - this.q < 15) && !a) {
                this.b.requestFrame(this.o);
                return;
            }
            let c = this.a.model;
            let d = this.a.de;
            let e = true;
            if (!this.f(b, c, d)) {
                e = false;
            }
            if (!this.h(b, c, d)) {
                e = false;
            }
            if (!this.g(b, c, d)) {
                e = false;
            }
            if (!this.e(b, c, d)) {
                e = false;
            }
            if (e && this.k.count == 0 && this.j.count == 0 && this.i.count == 0 && this.m.count == 0 && this.l.count == 0 && this.n.count == 0) {
                this.am();
            }
            else {
                this.b.requestFrame(this.o);
            }
        }
        p() {
            let a = dateNow();
            return a.getTime();
        }
        am() {
            this.b.teardownTicking(this.o);
            this.o = -1;
        }
        aa() {
            if (this.o == -1) {
                this.o = this.b.setupTicking(runOn(this, this.ad));
                this.b.requestFrame(this.o);
            }
        }
        u(a, b) {
            b.b0 = a.o;
            b.bl = this.p();
            this.ai(a.o, true, b);
            this.k.add(b);
            this.aa();
        }
        ai(a, b, c) {
            for (let d = this.k.count - 1; d >= 0; d--) {
                if (this.k._inner[d].b0 == a && this.k._inner[d].am(c)) {
                    if (b) {
                        this.k._inner[d].bt(c);
                    }
                    this.k.removeAt(d);
                }
            }
        }
        z(a, b) {
            b.b0 = a.o;
            b.bl = this.p();
            this.al(a, true, b);
            this.n.add(b);
            this.aa();
        }
        al(a, b, c) {
            for (let d = this.n.count - 1; d >= 0; d--) {
                if (this.n._inner[d].b0 == a.o && this.n._inner[d].am(c)) {
                    if (b) {
                        this.n._inner[d].bt(c);
                    }
                    this.n.removeAt(d);
                }
            }
        }
        t(a, b) {
            b.b2 = a.o;
            b.bl = this.p();
            this.ah(a.o, true, b);
            this.j.add(b);
            this.aa();
        }
        x(a) {
            a.b2 = -300;
            a.bl = this.p();
            this.ah(-300, true, a);
            this.j.add(a);
            this.aa();
        }
        y(a) {
            a.b2 = -400;
            a.bl = this.p();
            this.ah(-400, true, a);
            this.j.add(a);
            this.aa();
        }
        ah(a, b, c) {
            for (let d = this.j.count - 1; d >= 0; d--) {
                if (this.j._inner[d].b2 == a && this.j._inner[d].am(c)) {
                    if (b) {
                        this.j._inner[d].bt(c);
                    }
                    this.j.removeAt(d);
                }
            }
        }
        w(a, b) {
            b.b0 = a;
            b.bl = this.p();
            this.ak(a, true, b);
            this.m.add(b);
            this.aa();
        }
        ak(a, b, c) {
            for (let d = this.m.count - 1; d >= 0; d--) {
                if (this.m._inner[d].b0.equals(a) && this.m._inner[d].am(c)) {
                    if (b) {
                        this.m._inner[d].bt(c);
                    }
                    this.m.removeAt(d);
                }
            }
        }
        v(a, b) {
            b.b0 = a;
            b.bl = this.p();
            this.aj(a, true, b);
            this.l.add(b);
            this.aa();
        }
        aj(a, b, c) {
            for (let d = this.l.count - 1; d >= 0; d--) {
                if (this.l._inner[d].b0.equals(a) && this.l._inner[d].am(c)) {
                    if (b) {
                        this.l._inner[d].bt(c);
                    }
                    this.l.removeAt(d);
                }
            }
        }
        r(a, b, c) {
            b.b4 = c;
            b.b0 = a;
            b.bl = this.p();
            b.b2 = true;
            this.ag(a, true, b);
            this.i.add(b);
            this.aa();
        }
        s(a, b) {
            b.b0 = a;
            b.bl = this.p();
            b.b2 = false;
            this.ag(a, true, b);
            this.i.add(b);
            this.aa();
        }
        ag(a, b, c) {
            for (let d = this.i.count - 1; d >= 0; d--) {
                if (this.i._inner[d].b0.equals(a) && this.i._inner[d].am(c)) {
                    if (b) {
                        this.i._inner[d].bt(c);
                    }
                    this.i.removeAt(d);
                }
            }
        }
        f(a, b, c) {
            let d = true;
            let e;
            let f;
            let g = new List$1(ColumnEffect.$, 0);
            for (let h = 0; h < this.k.count; h++) {
                if (b.g(this.k._inner[h].b0) == null) {
                    this.ai(this.k._inner[h].b0, false, this.k._inner[h]);
                }
            }
            for (let i = 0; i < b.br.count; i++) {
                e = b.br._inner[i];
                for (let j = 0; j < this.k.count; j++) {
                    f = this.k._inner[j];
                    if (f.ah(e, b)) {
                        if (!f.au(e, b, c, a)) {
                            d = false;
                        }
                        else {
                            g.add(f);
                        }
                    }
                }
            }
            for (let k = 0; k < g.count; k++) {
                this.ai(g._inner[k].b0, false, g._inner[k]);
                g._inner[k].bu();
            }
            return d;
        }
        h(a, b, c) {
            let d = true;
            let e = b.bw;
            let f = new List$1(GridColumnSpacer.$, 0);
            let g = new List$1(SpacerEffect.$, 0);
            for (let h = 0; h < e.count; h++) {
                let i = e._inner[h];
                for (let j = 0; j < i.count; j++) {
                    let k = i._inner[j];
                    for (let l = 0; l < this.n.count; l++) {
                        if (this.n._inner[l].aj(k, b)) {
                            if (!this.n._inner[l].av(k, b, c, a)) {
                                d = false;
                            }
                            else {
                                f.add(k);
                                g.add(this.n._inner[l]);
                            }
                        }
                    }
                }
            }
            for (let m = 0; m < f.count; m++) {
                this.al(f._inner[m], false, g._inner[m]);
                g._inner[m].bu();
            }
            return d;
        }
        g(a, b, c) {
            let d = true;
            let e = new CellPath(1, 0, 0, 0);
            let f;
            for (let g = 0; g < this.m.count; g++) {
                f = this.m._inner[g];
                e.b = f.b0.b;
                e.w = f.b0.w;
                e.x = f.b0.x;
                if (!f.aw(b.bv._inner[e.x], b, c, a)) {
                    d = false;
                }
            }
            return d;
        }
        e(a, b, c) {
            let d = true;
            if (this.j.count == 0 && this.l.count == 0 && this.i.count == 0) {
                return true;
            }
            for (let e = 0; e < this.j.count; e++) {
                this.j._inner[e].b1 = -1;
                let f = b.g(this.j._inner[e].b2);
                if (f != null) {
                    this.j._inner[e].b1 = f.m;
                    this.j._inner[e].b0 = f.c;
                }
                this.j._inner[e].ap = true;
            }
            for (let g = 0; g < this.l.count; g++) {
                this.l._inner[g].ap = true;
            }
            for (let h = 0; h < this.i.count; h++) {
                this.i._inner[h].b3 = -1;
                if (this.i._inner[h].b2) {
                    let i = b.g(this.i._inner[h].b4);
                    if (i != null) {
                        this.i._inner[h].b3 = i.m;
                        this.i._inner[h].b1 = i.c;
                    }
                }
                this.i._inner[h].ap = true;
            }
            for (let j = 0; j < b.bu.count; j++) {
                let k = b.bu._inner[j];
                for (let l = 0; l < k.o.count; l++) {
                    if (k.p._inner[l]) {
                        continue;
                    }
                    let m = k.o._inner[l];
                    for (let n = 0; n < this.j.count; n++) {
                        let o = this.j._inner[n];
                        if (o.ag(m, b)) {
                            if (!o.at(k.q._inner[l], b, c, a)) {
                                o.ap = false;
                            }
                        }
                    }
                    for (let p = 0; p < this.l.count; p++) {
                        let q = this.l._inner[p];
                        if (q.ag(m, b)) {
                            if (!q.at(k.q._inner[l], b, c, a)) {
                                q.ap = false;
                            }
                        }
                    }
                    for (let r = 0; r < this.i.count; r++) {
                        let s = this.i._inner[r];
                        if (s.ag(m, b)) {
                            if (!s.at(k.q._inner[l], b, c, a)) {
                                s.ap = false;
                            }
                        }
                    }
                }
            }
            let t = new List$1(ColumnCellsEffect.$, 0);
            for (let u = 0; u < this.j.count; u++) {
                if (this.j._inner[u].ak(b, c, a) && this.j._inner[u].ap) {
                    t.add(this.j._inner[u]);
                }
                else {
                    d = false;
                }
            }
            let v = new List$1(RowCellsEffect.$, 0);
            for (let w = 0; w < this.l.count; w++) {
                if (this.l._inner[w].ak(b, c, a) && this.l._inner[w].ap) {
                    v.add(this.l._inner[w]);
                }
                else {
                    d = false;
                }
            }
            let x = new List$1(CellEffect.$, 0);
            for (let y = 0; y < this.i.count; y++) {
                if (this.i._inner[y].ak(b, c, a) && this.i._inner[y].ap) {
                    x.add(this.i._inner[y]);
                }
                else {
                    d = false;
                }
            }
            for (let z = 0; z < t.count; z++) {
                this.ah(t._inner[z].b2, false, t._inner[z]);
                t._inner[z].bu();
            }
            for (let aa = 0; aa < v.count; aa++) {
                this.aj(v._inner[aa].b0, false, v._inner[aa]);
                v._inner[aa].bu();
            }
            for (let ab = 0; ab < x.count; ab++) {
                this.ag(x._inner[ab].b0, false, x._inner[ab]);
                x._inner[ab].bu();
            }
            return d;
        }
    }
    GridEffectManager.$t = /*@__PURE__*/ markType(GridEffectManager, 'GridEffectManager');
    return GridEffectManager;
})();
/**
 * @hidden
 */
let GridLayerController = /*@__PURE__*/ (() => {
    class GridLayerController extends Base {
        constructor() {
            super(...arguments);
            this.e = new RecyclingManager();
        }
        a(a, b) {
            let c = b.bu;
            let d = c.count;
            for (let e = 0; e < d; e++) {
                let f = c._inner[e].b(a);
                if (f != undefined) {
                    return f;
                }
            }
            return null;
        }
        b(a, b, c, d, e, f, g, h) {
            let i = this.a(a, c);
            if (i == null) {
                let j = null;
                let k = null;
                let l = false;
                let m = -1;
                if (a.ag) {
                    m = b.d9.getDataRow(a);
                    k = b.d9.resolveValueForPath(b, a);
                    if (k == null && b.d9.isPlaceholderValue(a)) {
                        l = true;
                    }
                }
                let n = b.nc(a, b, k, m);
                j = this.e.a(n);
                if (j == null) {
                    j = b.ao(a, n);
                }
                else {
                    j.jr();
                }
                let o = a;
                if (j.k != null) {
                    o = j.k;
                }
                if (c.bh.d(o)) {
                    c.bh.item(o).remove(j);
                    if (c.bh.item(o).count == 0) {
                        c.bh.f(o);
                    }
                }
                d.s(a, j);
                j.q = d;
                j.k = a;
                j.v = e;
                j.ej = m;
                j.a6 = f;
                j.a7 = g;
                j.a2 = h;
                j.x = a.d;
                let p = false;
                let q = false;
                let r = 0;
                let s = j.k.az;
                let t = (s >= 0 && c.br._inner[s].n == 0) || a.au;
                if (t) {
                    r = b.d9.getRowIndent(j.k.w);
                    let u = b.d9.getRowType(j.k.w);
                    if (u == 1 && b.hs) {
                        if (b.iv) {
                            if (a.az == -401 || (a.az == -400 && c.cf == 0)) {
                                p = b.hs;
                                q = b.actualDataSource.getIsRowExpandedAtIndex(j.k.w);
                            }
                        }
                        else {
                            p = b.hs;
                            q = b.actualDataSource.getIsRowExpandedAtIndex(j.k.w);
                        }
                    }
                }
                j.ar = p;
                j.az = q;
                j.e5 = r;
                b.rx(j, k, b.d9.resolveRow(m));
                if (l) {
                    j.cb = 1;
                }
                return j;
            }
            else {
                this.g(a, c, d);
                i.v = e;
                let v = i.k.a5;
                i.k = a;
                i.a6 = f;
                i.a7 = g;
                i.a2 = h;
                i.x = a.d;
                if (a.a5 != v && a.w >= 0 && a.az >= 0) {
                    i.a9 = b.e0.o(i);
                    i.b8 = i.a9 ? 1 : 0;
                    i.b3 = b.d5.c(a.w) ? 1 : 0;
                }
                let w = false;
                let x = false;
                let y = 0;
                let z = i.k.az;
                let aa = (z >= 0 && c.br._inner[z].n == 0) || a.au;
                if (aa) {
                    y = b.d9.getRowIndent(i.k.w);
                    let ab = b.d9.getRowType(i.k.w);
                    if (ab == 1 && b.hs) {
                        if (b.iv) {
                            if (a.az == -401 || (a.az == -400 && c.cf == 0)) {
                                w = b.hs;
                                x = b.actualDataSource.getIsRowExpandedAtIndex(i.k.w);
                            }
                        }
                        else {
                            w = b.hs;
                            x = b.actualDataSource.getIsRowExpandedAtIndex(i.k.w);
                        }
                    }
                }
                i.ar = w;
                i.az = x;
                i.e5 = y;
                return i;
            }
        }
        d(a, b) {
            for (let c = 0; c < b.bu.count; c++) {
                if (b.bu._inner[c].d(a)) {
                    return b.bu._inner[c];
                }
            }
            return null;
        }
        g(a, b, c) {
            let d = this.d(a, b);
            if (d == null || d == c) {
                return;
            }
            let e = d.item(a);
            d.f(a);
            c.s(a, e);
            e.q = c;
        }
        f(a, b, c) {
            if (c == null) {
                c = this.d(a, b);
            }
            if (c == null) {
                return;
            }
            let d = c.item(a);
            c.f(a);
            let e = null;
            if (b.bh.d(a)) {
                e = b.bh.item(a);
                if (e.count == 1) {
                    let f = a.aa();
                    b.bh.f(a);
                    b.bh.s(f, e);
                }
            }
            else {
                e = new List$1(CellModel.$, 0);
                b.bh.s(a, e);
            }
            e.add(d);
        }
        i(a, b) {
            let c = this.d(a, b);
            if (c == null) {
                return;
            }
            let d = this.c(a, b);
            this.f(a, b, c);
            this.e.c(d);
        }
        j(a, b, c) {
            if (b == null) {
                return;
            }
            let d = b.item(a);
            this.f(a, c, b);
            this.e.c(d);
        }
        c(a, b) {
            for (let c = 0; c < b.bu.count; c++) {
                if (b.bu._inner[c].d(a)) {
                    return b.bu._inner[c].item(a);
                }
            }
            return null;
        }
        h(a, b, c, d, e, f) {
            if (a.k.h) {
                a.cc = c + a.b4 + (a.b5 * b.br._inner[a.k.az].k);
            }
            else {
                a.cc = c + a.b4 + (a.b5 * a.gf);
            }
            a.cd = d + a.b9 + (a.ca * a.e0);
            a.f2 = truncate(Math.round(a.cc));
            a.f4 = truncate(Math.round(a.cd));
            a.gf = truncate(e);
            a.e0 = truncate(f);
        }
    }
    GridLayerController.$t = /*@__PURE__*/ markType(GridLayerController, 'GridLayerController');
    return GridLayerController;
})();
/**
 * @hidden
 */
let VisibilityEngine = /*@__PURE__*/ (() => {
    class VisibilityEngine extends Base {
        constructor() {
            super();
            this.d = null;
            this.c = null;
            this.f = false;
            this.j = 0;
            this.e = false;
        }
        get k() {
            return this.j;
        }
        set k(a) {
            this.j = a;
        }
        v() {
            this.e = true;
        }
        l(a) {
            let b = false;
            if (this.e) {
                this.e = false;
                b = true;
            }
            this.m(a, a.model, a.e6, b);
        }
        m(a, b, c, d) {
            a.p5();
            let e = b.actualVisibleRegion;
            if (e.isEmpty) {
                return;
            }
            if (e.width == 0 || e.height == 0) {
                return;
            }
            if (b.br.count == 0) {
                return;
            }
            if (a.d9 == null) {
                return;
            }
            let f = this.a(a, b, c, e);
            for (let g = 0; g < b.bx.count; g++) {
                let h = b.bx._inner[g];
                let i = c.k(h, a, b);
                b.br._inner[h].l = i;
            }
            b.cp = 0;
            b.cv = 0;
            b.b7 = 0;
            b.bf = f.b;
            b.be = f.a;
            b.cn = f.k;
            b.cq = f.m;
            b.co = f.l;
            b.cr = f.n;
            a.sb();
            this.d = f.b;
            this.c = f.a;
            let j = a.de;
            a.ip = true;
            this.u(a, b, f, j);
            if (b.bx.count == 0) {
                return;
            }
            this.n(a, b, f, j);
            f.j += b.ch;
            if (this.c.w == -1) {
                return;
            }
            this.h(a, b, b.actualVisibleRegion, f, false);
            this.o(a, b, f, j);
            a.c9.ab();
            a.ip = false;
        }
        a(a, b, c, d) {
            let e;
            e = new CalculationParameters();
            e.j = d.top;
            e.g = d.bottom;
            e.h = d.left;
            e.i = d.right;
            if (this.k > 0) {
                let f = this.k * a.kl;
                e.j = Math.max(e.j - f, 0);
                e.g = Math.min(e.g + f, b.absoluteHeight);
                e.h = Math.max(e.h - f, 0);
                e.i = Math.min(e.i + f, b.absoluteWidth);
            }
            e.o = a.inset;
            e.d = Math.max(e.h, a.inset.c);
            e.f = Math.min(e.i, b.absoluteWidth - a.inset.d);
            e.e = e.f - e.d;
            e.b = c.b(e.j + b.cl + b.cm, b);
            e.a = c.b(e.g, b);
            e.k = 0;
            e.m = 0;
            b.bx.clear();
            let g = b.cf + truncate(a.inset.c);
            let h = g;
            let i = 0;
            let j = 0;
            let k = b.cg;
            for (let l = 0; l < b.br.count; l++) {
                let m = b.br._inner[l];
                let n = b.bw._inner[l];
                let o = b.br._inner[l].d == 0;
                if (o) {
                    g += truncate(Math.round(n.ad(-1)));
                    if (m.a != 6) {
                        g += (m.k) + a.model.cc - truncate(Math.round(m.f(b)));
                    }
                }
                if (m.a == 3) {
                    continue;
                }
                if (b.br._inner[l].d == 1) {
                    b.bx.insert(i, l);
                    i++;
                }
                else if (b.br._inner[l].d == 2) {
                    b.bx.insert(b.bx.count, l);
                    j++;
                    if (m.a == 6) {
                        k -= m.k;
                    }
                }
                else {
                    if (g >= e.d + b.cf && h <= e.f - k) {
                        b.bx.insert(b.bx.count - j, l);
                    }
                    else if (b.br._inner[l].a == 2 || b.br._inner[l].a == 1 || b.br._inner[l].a == 6) {
                        b.bx.insert(b.bx.count - j, l);
                    }
                    else if (g < e.d + b.cf) {
                        e.l++;
                    }
                    else if (h > e.f - b.cg) {
                        e.n++;
                    }
                }
                if (o) {
                    h = g;
                    g += truncate(Math.round(n.af(-1)));
                }
            }
            if (b.bx.count > 0) {
                e.k = b.bx._inner[0];
                e.m = b.bx._inner[b.bx.count - 1];
            }
            return e;
        }
        u(a, b, c, d) {
            let e = this.d.x;
            let f = this.c.x;
            let g = this.d.w;
            let h = this.c.w;
            let i = 0;
            let j = 0;
            let k = 0;
            let l = false;
            let m = false;
            let n = false;
            let o = false;
            let p = false;
            let q = false;
            let r = a.kk == 0;
            let s = a.lg == 0;
            let t = null;
            let u = a.d9.getStickyRows();
            if (u != null) {
                for (let v = 0; v < u.length; v++) {
                    if (t == null) {
                        t = new HashSet$1(Number_$type, 0);
                    }
                    t.add_1(u[v]);
                }
            }
            for (let w = 0; w < b.bu.count; w++) {
                let x = b.bu._inner[w];
                x.g = true;
                for (let y = 0; y < x.o.count; y++) {
                    if (x.p._inner[y]) {
                        continue;
                    }
                    let z = x.o._inner[y];
                    m = false;
                    l = false;
                    i = z.x;
                    j = z.w;
                    k = z.az;
                    m = z.as || z.j || z.au || z.al || z.an || z.ak || z.am;
                    p = z.ap || z.al || z.an;
                    o = z.g;
                    n = t != null && t.contains(j);
                    q = z.d != 0;
                    if ((j == -1000 && k == -1000) || (j == -1001 && k == -1001)) {
                        continue;
                    }
                    if (b.bx.count == 0) {
                        l = true;
                    }
                    if (z.as && s) {
                        l = true;
                    }
                    if (z.g && r) {
                        l = true;
                    }
                    if (z.ap && (a.dragger == null || !a.dragger.isDragActive)) {
                        l = true;
                    }
                    if ((z.al || z.ak) && b.cf == 0) {
                        l = true;
                    }
                    if ((z.an || z.am) && b.cg == 0) {
                        l = true;
                    }
                    if (!m && !b.bx.contains(k)) {
                        l = true;
                    }
                    else if (!o && (i < e || i > f)) {
                        l = true;
                    }
                    else {
                        if (!n && !p && !z.al && !z.an && !z.ak && !z.am) {
                            if (i == e && j < g) {
                                l = true;
                            }
                            if (i == f && j > h) {
                                l = true;
                            }
                        }
                    }
                    if (!a.iv && (z.az == -401 || z.az == -402)) {
                        l = true;
                    }
                    if (!l) {
                        let aa = a.d9.getRowType(j);
                        let ab = a.d9.isRowSpanning(aa) && a.dy != 1;
                        if (!z.as && !z.ap && !z.al && !z.an && !z.ak && !z.am) {
                            if (b.bn && (aa == 1 || aa == 2)) {
                                l = true;
                            }
                            else if ((ab && !m) || (m && !ab)) {
                                l = true;
                            }
                            else if ((z.at && aa != 5) || (z.aq && aa != 4) || (!z.at && aa == 5) || (!z.aq && aa == 4)) {
                                l = true;
                            }
                        }
                        else if ((aa == 4 && !z.ar) || (aa != 4 && z.ar)) {
                            l = true;
                        }
                    }
                    if (l) {
                        a.de.j(z, x, b);
                    }
                }
                x.g = false;
            }
            b.bn = false;
        }
        t(a, b, c) {
            let d = c.b;
            let e = c.a;
            let f = e.x;
            let g = new CellPath(1, 0, 0, 0);
            for (let h = d.x; h <= f; h++) {
                this.q(h, a, b, c, g);
            }
        }
        q(a, b, c, d, e) {
            let f = d.b;
            let g = d.a;
            let h = c.bv;
            let i = b.de;
            let j = g.x;
            let k = d.d;
            let l = d.f;
            let m = d.e;
            let n = h._inner[a];
            let o = a == j ? g.w : n.m - 1;
            if (o == -201) {
                o = n.m - 1;
            }
            let p = 0;
            if (f.x == a) {
                p = f.w == -200 ? 0 : f.w;
            }
            if (p == -201) {
                let q = new CellPath(1, 0, a, -200);
                this.ab(q, c, k, n.i + n.l() - n.d, m, a, false, b);
                e.x = a;
                e.w = -201;
                e.az = 0;
                return;
            }
            if (n.g > 0) {
                this.s(a, b, c, d, e, f, n, p);
            }
            if (n.d > 0) {
                this.r(a, b, c, d, e, i, j, n);
            }
            e.x = a;
        }
        i(a, b, c) {
            let d = this.a(a, b, a.e6, c);
            return this.h(a, b, c, d, true);
        }
        h(a, b, c, d, e) {
            let f = d.a;
            let g = d.b;
            let h = d.a.x;
            let i = d.b.x;
            let j = new CellPath(1, 0, 0, 0);
            let k = b.bv._inner[0];
            let l = a.d9.getStickyRowsInRange(g.w, f.w);
            let m = -1;
            let n = -1;
            let o = -1;
            let p = -1;
            let q = false;
            let r = a.lg;
            let s = a.dy == 3;
            let t = new Dictionary$2(Number_$type, PinnedRowInfo.$, 0);
            let u = new List$1(PinnedRowInfo.$, 0);
            b.cu = 0;
            if (l != null && ((a.a7.i.count > 0 && a.hu) || a.a7.i.count == 0)) {
                let v = c.top + b.ci;
                let w = c.bottom;
                for (let x = 0; x < l.length; x++) {
                    let y = l[x];
                    let z = a.d9.getRowType(y);
                    let aa = y * k.k() + k.i;
                    let ab = new PinnedRowInfo();
                    ab.b = b;
                    ab.a = z;
                    ab.k = k.e(y);
                    ab.i = k.j(y);
                    ab.n = a.d9.getStickRowPriority(y);
                    ab.m = y;
                    ab.l = aa;
                    ab.e = (x == l.length - 1) || l[x + 1] != y + 1;
                    ab.f = z == 5 && (x == l.length - 1);
                    t.addItem(y, ab);
                    if (x == 0) {
                        if (ab.a != 4) {
                            if (ab.l <= v) {
                                ab.l += (v - ab.l);
                                p = x;
                            }
                            else if (ab.j > c.bottom) {
                                ab.l += (c.bottom - ab.j);
                                q = true;
                            }
                        }
                        else {
                            if (ab.j > c.bottom) {
                                ab.l += (c.bottom - ab.j);
                                ab.h = true;
                                q = true;
                            }
                        }
                        continue;
                    }
                    let ac = l[x - 1];
                    let ad = a.d9.getStickRowPriority(ac);
                    let ae = a.d9.getStickRowPriority(y);
                    let af = t.item(ac);
                    let ag = a.d9.isExclusivelySticky(y);
                    let ah = x - 1 == p;
                    af.f = (z != 5 && af.a == 5) || (z == 5 && x == l.length - 1);
                    let ai = ((() => {
                        let $ret = new PushRowSettings();
                        $ret.a = l;
                        $ret.d = t;
                        $ret.c = true;
                        $ret.b = ag;
                        return $ret;
                    })());
                    if (ab.a != 4) {
                        if (ab.l <= af.j && ah) {
                            p = x;
                            let aj = this.b(x - 1, x, x, ai);
                            if (!aj.b) {
                                ab.l = aj.a.j;
                            }
                        }
                        if (ab.a == 2) {
                            let ak = a.d9.getRootSummaryRowCount();
                            let al = c.bottom - ak * k.k();
                            if (ab.j > al) {
                                ab.l -= ab.j - al;
                                ab.h = true;
                                q = true;
                                ai.c = false;
                                let am = this.b(x - 1, x, x, ai);
                                if (!am.b) {
                                    ab.l = am.a.j;
                                }
                            }
                        }
                        else if (s && ab.a == 5) {
                            let an = a.d9.getRootSummaryRowCount();
                            let ao = c.bottom - an * k.k();
                            if (ab.j > ao) {
                                ab.l -= ab.j - ao;
                                ab.h = true;
                                q = true;
                                ai.c = false;
                                let ap = this.b(x - 1, x, x, ai);
                                if (!ap.b) {
                                    ab.l = ap.a.j;
                                }
                            }
                        }
                    }
                    if (z == 4) {
                        ab.l += (c.bottom - ab.j);
                        ab.h = true;
                        b.b7++;
                        q = true;
                        this.y(a, x - 1, x, 4, l, t);
                    }
                }
                for (let aq = 0; aq < l.length; aq++) {
                    for (let ar = aq + 1; ar < l.length; ar++) {
                        let as = t.item(l[aq]);
                        let at = t.item(l[ar]);
                        if (at.l < as.j) {
                            at.g = true;
                            at.d = Math.round(at.j) <= Math.round(as.j);
                        }
                        else {
                            break;
                        }
                    }
                }
                for (let au = 0; au <= p; au++) {
                    let av = l[au];
                    let aw = t.item(av).l;
                    let ax = t.item(av).j;
                    let ay = t.item(av).k;
                    let az = t.item(av).g;
                    let a0 = t.item(av).d;
                    m = av;
                    let a1 = false;
                    let a2 = false;
                    let a3 = false;
                    if (t.item(av).a == 3) {
                        a1 = true;
                        a2 = true;
                    }
                    if (t.item(av).a == 3 && t.item(av).e) {
                        a3 = true;
                    }
                    u.add(t.item(av));
                    if (!e) {
                        this.p(a, b, d, j, a.de, av, aw, ay, true, a1, a2, a3, az, a0);
                    }
                }
                if (q) {
                    let a4 = 0;
                    for (let a5 = 0; a5 < l.length; a5++) {
                        let a6 = l[a5];
                        if (!t.item(a6).h) {
                            continue;
                        }
                        if (o == -1) {
                            o = a6;
                        }
                        let a7 = t.item(a6).l;
                        let a8 = t.item(a6).j;
                        let a9 = t.item(a6).k;
                        let ba = t.item(a6).g;
                        let bb = t.item(a6).d;
                        n = a6;
                        let bc = t.item(a6).a == 3 && t.item(a6).e;
                        let bd = t.item(a6).a == 3;
                        if (!e) {
                            j.i = true;
                            j.o = (b.cp - 1) - a4;
                            this.p(a, b, d, j, a.de, a6, a7, a9, true, bd, bd, bc, ba, bb);
                            j.i = false;
                            j.o = -1;
                        }
                        a4++;
                    }
                }
            }
            for (let be = Math.max(m + 1, g.w); be <= f.w; be++) {
                if (o != -1 && n != -1) {
                    if (be >= o && be <= n) {
                        continue;
                    }
                }
                let bf = k.f(be);
                bf += k.i;
                let bg = k.e(be);
                let bh = false;
                let bi = false;
                let bj = false;
                let bk = a.d9.getRowType(be);
                if (bk == 3) {
                    bj = true;
                    bi = true;
                }
                if (bk == 0 && a.d9.isRowPinned(be)) {
                    bi = true;
                }
                if (bk == 3) {
                    if (t.containsKey(be) && t.item(be).e) {
                        bh = true;
                    }
                }
                if (!e) {
                    this.p(a, b, d, j, a.de, be, bf, bg, false, bi, bj, bh, false, false);
                }
            }
            return u;
        }
        y(a, b, c, d, e, f) {
            if (b < 0) {
                return;
            }
            let g = e[b];
            let h = e[c];
            if (f.item(g).a == d) {
                if (f.item(g).j > f.item(h).l) {
                    f.item(g).l -= f.item(g).j - f.item(h).l;
                    f.item(g).h = true;
                    this.y(a, b - 1, b, d, e, f);
                }
            }
        }
        b(a, b, c, d) {
            let e = d.a[a];
            let f = d.a[b];
            let g = d.a[c];
            let h = d.d;
            let i = h.item(e).n;
            let j = h.item(f).n;
            let k = h.item(g).n;
            let l = true;
            if (f == 12) {
                let m = 0;
            }
            d.e++;
            if (h.item(f).l < h.item(e).j) {
                if (j > i || (j == i && d.b)) {
                    let n = h.item(f).l - h.item(e).j;
                    let o = this.g(n, a, c, d);
                    let p = null;
                    while (o && a > 0) {
                        a = a - 1;
                        p = this.b(a, c, c, d);
                        o = p.b;
                    }
                    if (p == null) {
                        p = ((() => {
                            let $ret = new PushRowResult();
                            $ret.b = o;
                            $ret.a = h.item(d.a[a]);
                            return $ret;
                        })());
                    }
                    return p;
                }
                else if (j == i && !d.b) {
                    return ((() => {
                        let $ret = new PushRowResult();
                        $ret.b = false;
                        $ret.a = h.item(e);
                        return $ret;
                    })());
                }
                else if (j < i) {
                    if (k >= i) {
                        if (!l) {
                            let q = h.item(f).l - h.item(e).j;
                            return ((() => {
                                let $ret = new PushRowResult();
                                $ret.b = this.g(q, a, c, d);
                                $ret.a = h.item(e);
                                return $ret;
                            })());
                        }
                        else {
                            if (h.item(g).l < h.item(e).j) {
                                let r = h.item(g).l - h.item(e).j;
                                return ((() => {
                                    let $ret = new PushRowResult();
                                    $ret.b = this.g(r, a, c, d);
                                    $ret.a = h.item(e);
                                    return $ret;
                                })());
                            }
                        }
                        return ((() => {
                            let $ret = new PushRowResult();
                            $ret.b = true;
                            $ret.a = h.item(e);
                            return $ret;
                        })());
                    }
                    return ((() => {
                        let $ret = new PushRowResult();
                        $ret.b = false;
                        $ret.a = h.item(e);
                        return $ret;
                    })());
                }
            }
            return ((() => {
                let $ret = new PushRowResult();
                $ret.b = true;
                $ret.a = h.item(e);
                return $ret;
            })());
        }
        g(a, b, c, d) {
            let e = d.a[b];
            d.d.item(e).l += a;
            d.d.item(e).h = !d.c;
            if (b > 0) {
                let f = this.b(b - 1, b, c, d);
                if (!d.b || !d.c) {
                    if (!f.b) {
                        let g = d.a[b - 1];
                        d.d.item(e).l = d.d.item(g).j;
                        return false;
                    }
                }
            }
            return true;
        }
        p(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
            d.w = f;
            d.d = 0;
            d.ao = m;
            d.af = n;
            let o = b.br;
            let p = c.d;
            let q = c.f;
            let r = c.e;
            let s = a.lg;
            let t = a.d9.getRowType(f);
            d.aq = t == 4;
            d.at = t == 5;
            let u = false;
            if (t != 0) {
                u = a.d9.isRowSpanning(t) && a.dy != 1;
            }
            if (u) {
                let v = a.iv ? b.cf : 0;
                let w = a.iv ? b.cg : 0;
                let x = p;
                let y = r;
                if (v > 0) {
                    d.az = -401;
                    y = b.cf;
                    this.z(x, y, g, h, d.aa(), b, p, q, a, i, j, k, l, t);
                }
                d.az = -400;
                x = p + v;
                y = r - v - w;
                this.z(x, y, g, h, d.aa(), b, p, q, a, i, j, k, l, t);
                if (w > 0) {
                    d.az = -402;
                    x = q - b.cg;
                    y = b.cg;
                    this.z(x, y, g, h, d.aa(), b, p, q, a, i, j, k, l, t);
                }
            }
            else {
                for (let z = 0; z < b.bx.count; z++) {
                    let aa = b.bx._inner[z];
                    let ab = o._inner[aa];
                    d.az = ab.m;
                    d.a5 = ab.n;
                    d.d = ab.d;
                    let ac = d.aa();
                    this.z(c.o.c + ab.l, ab.k, g, h, ac, b, p, q, a, i, j, k, l, t);
                }
            }
            let ad = t != 4 && t != 2 && (t != 5 || a.dy != 3);
            if (ad && i) {
                b.cv = truncate(Math.round((g + h + a.lh) - c.j));
            }
            let ae = t == 4 || (t == 5 && a.dy == 3);
            if (ae && i && g < c.g) {
                b.cu += truncate(h) + a.lh;
            }
            if (s > 0) {
                if (ad && i) {
                    b.cv = truncate(Math.round((g + h + a.lh + s) - c.j));
                }
                if (ae && i && g < c.g) {
                    b.cu += s;
                }
                d.d = 0;
                d.az = -300;
                d.ar = t == 4;
                this.ad(c, d.aa(), b, p, r, g + h + a.lh, s, a, i, j, k, l, t);
            }
        }
        r(a, b, c, d, e, f, g, h) {
            let i = d.d;
            let j = d.f;
            let k = d.e;
            e.x = a;
            e.w = -201;
            e.az = 0;
            let l = new CellPath(1, e.az, e.x, e.w);
            let m = h.i + h.l() - h.d;
            let n = m;
            if (a == g) {
                n = d.g - h.d;
                if (n < (h.i + h.g)) {
                    n = (h.i + h.g);
                }
                this.ac(l, c, i, Math.min(m, n), k, a, false, true, b);
            }
            else {
                this.ab(l, c, i, Math.min(m, n), k, a, false, b);
            }
        }
        s(a, b, c, d, e, f, g, h) {
            let i = d.d;
            let j = d.f;
            let k = d.e;
            e.x = a;
            e.w = -200;
            e.az = 0;
            let l = new CellPath(1, e.az, e.x, e.w);
            if (a == f.x) {
                if (h == g.m - 1) {
                    let m = g.j(h);
                    let n = g.f(h) + g.i;
                    let o = (n + m) - g.g;
                    this.ac(l, c, i, Math.min(o, d.j), k, a, true, true, b);
                }
                else {
                    this.ac(l, c, i, Math.max(g.i, d.j - b.inset.e), k, a, true, true, b);
                }
            }
            else {
                this.ab(l, c, i, g.i, k, a, true, b);
            }
        }
        n(a, b, c, d) {
            let e = b.br;
            let f = a.inset;
            let g = f.e;
            if (b.ci > 0) {
                let h = Math.max(c.j, g);
                b.bj = this.f;
                if (this.f) {
                    h = g;
                }
                for (let i = 0; i < b.bx.count; i++) {
                    let j = b.bx._inner[i];
                    let k = e._inner[j];
                    let l = new CellPath(1, k.m, -100, -100);
                    l.d = k.d;
                    this.aa(l, b, h, c.d, c.f, a);
                    if (a.hv) {
                        let m = new CellPath(1, k.m, -100, -101);
                        m.d = k.d;
                        let n = a.km(a.la);
                        let o = a.la + n * 2;
                        let p = c.o.c + b.br._inner[l.az].l + b.br._inner[l.az].k - a.la - n;
                        this.ae(m, b, h, p, o, b.cl, c.d, c.f, a);
                    }
                }
                if (b.cm > 0) {
                    let q = new CellPath(1, -300, -100, -100);
                    this.ad(c, q, b, c.d, c.e, 0, b.cm, a, false, false, false, false, 0);
                }
            }
            if (a.bu == 0 && a.dragger != null && a.dragger.isDragActive && a.dragger.dragType == 1) {
                let r = new CellPath(1, -400, 0, -102);
                this.ae(r, b, Math.max(c.j, g), a.ld, a.kp, b.by, c.h, c.i, a);
            }
            if (a.bg != 1 && a.dragger != null && a.dragger.isDragActive && a.dragger.dragType == 2) {
                let s = new CellPath(1, -400, 0, -102);
                this.ae(s, b, c.j, a.ld, a.kn, b.by, c.h, c.i, a);
            }
        }
        o(a, b, c, d) {
            if (b.cd > -1) {
                b.b4 = c.d + a.e6.k(b.cd, a, b) - a.lc;
            }
            else {
                b.b4 = b.cf;
            }
            if (b.ce > -1) {
                let e = b.br._inner[b.ce].l - a.lc;
                if (c.i >= b.absoluteWidth) {
                    b.b5 = e + a.inset.c;
                }
                else {
                    b.b5 = e - (b.absoluteWidth - c.i - a.inset.c - a.inset.d);
                }
            }
            let f = Math.max(c.j - b.ci, a.inset.e);
            let g = c.j;
            let h = b.b7 * (a.kl + a.lg + a.lh);
            let i = c.g - h;
            let j = Math.min(b.absoluteHeight - h, c.g - h);
            let k = Math.max(0, j - g);
            let l = new CellPath(1, 0, 0, 0);
            if (b.cf > 0) {
                l.az = -500;
                if (b.ci > 0) {
                    l.w = -100;
                    this.ae(l.aa(), b, f, b.b4, a.lc, b.ci, c.d, c.i, a);
                }
                l.w = -103;
                this.ae(l.aa(), b, g, b.b4, a.lc, k, c.d, c.i, a);
                if (b.b7 > 0) {
                    l.w = -104;
                    this.ae(l.aa(), b, i, b.b4, a.lc, h, c.d, c.i, a);
                }
            }
            if (b.cg > 0) {
                l.az = -501;
                if (b.ci > 0) {
                    l.w = -100;
                    this.ae(l.aa(), b, f, b.b5, a.lc, b.ci, c.d, c.i, a);
                }
                l.w = -103;
                this.ae(l.aa(), b, g, b.b5, a.lc, k, c.d, c.i, a);
                if (b.b7 > 0) {
                    l.w = -104;
                    this.ae(l.aa(), b, i, b.b5, a.lc, h, c.d, c.i, a);
                }
            }
        }
        w(a, b, c, d, e, f, g, h, i) {
            this.x(a, b, c, d, e, f, g, h, i, false, false, false);
        }
        x(a, b, c, d, e, f, g, h, i, j, k, l) {
            let m = a.de.b(c, a, b, d, e, j, k, l);
            a.de.h(m, b, f, g, h, i);
            if (a.cb.j) {
                if (a.cb.a == null && a.cb.n == m.k.w && a.cb.m == m.k.az) {
                    a.cb.u(m);
                }
            }
            else {
                if (a.ar != null && a.ar.az == m.k.az && a.ar.w == m.k.w) {
                    a.ix(m);
                }
            }
        }
        z(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
            let o = f.al;
            let p = e.d;
            let q = e.d != 0;
            let r = i.e6;
            let s = 1;
            if (n == 1) {
                s = 2;
            }
            if (n == 2) {
                s = 3;
            }
            if (e.az == -400 || e.az == -401 || e.az == -402) {
                if (n == 1 || n == 2) {
                    if (!e.af) {
                        o = j && !e.ao ? f.a3 : f.a6;
                    }
                    else {
                        o = f.al;
                    }
                }
            }
            else {
                if (f.br._inner[e.az].a == 1 || f.br._inner[e.az].a == 2 || f.br._inner[e.az].a == 3) {
                    if (j) {
                        o = n != 4 ? f.a1 : f.a9;
                    }
                    else {
                        o = q ? f.as : f.a7;
                    }
                }
                else if (f.br._inner[e.az].a == 6) {
                    q = e.d != 0 || i.columns._inner[e.az].fj != 0;
                    if (j) {
                        o = n != 4 ? f.a2 : f.bc;
                    }
                    else {
                        o = q ? f.av : f.ba;
                    }
                }
                else {
                    if (j) {
                        o = n != 4 ? (q ? f.aq : f.a0) : (q ? f.ap : f.az);
                    }
                    else {
                        o = q ? f.an : f.al;
                    }
                }
            }
            if (p == 1) {
                let t = f.br._inner[e.az].l;
                a = g + t;
            }
            else if (p == 2) {
                let u = f.br._inner[e.az].l;
                if (h >= f.absoluteWidth) {
                    a = u + i.inset.c;
                }
                else {
                    a = u - (f.absoluteWidth - h - i.inset.c - i.inset.d);
                }
            }
            this.x(i, f, e, o, s, a, c, b, d, k, l, m);
        }
        aa(a, b, c, d, e, f) {
            let g = a.d == 0 ? b.az : b.ap;
            if (b.br._inner[a.az].a == 1 || b.br._inner[a.az].a == 2 || b.br._inner[a.az].a == 3) {
                g = a.d == 0 ? b.a9 : b.au;
            }
            if (b.br._inner[a.az].a == 6) {
                g = a.d == 0 && f.columns._inner[a.az].fj == 0 ? b.bc : b.ax;
            }
            let h = b.br._inner[a.az].l + f.inset.c;
            let i = b.br._inner[a.az].k;
            if (a.d == 1) {
                h = d + b.br._inner[a.az].l;
            }
            else if (a.d == 2) {
                let j = b.br._inner[a.az].l;
                if (e >= b.absoluteWidth) {
                    h = j + f.inset.c;
                }
                else {
                    h = j - (b.absoluteWidth - e - f.inset.c - f.inset.d);
                }
            }
            this.w(f, b, a, g, 0, h, c, i, b.cl);
        }
        ae(a, b, c, d, e, f, g, h, i) {
            let j = b.bd;
            if (a.h) {
                j = a.d == 0 ? b.ay : b.ao;
                if (b.br._inner[a.az].a == 1 || b.br._inner[a.az].a == 2 || b.br._inner[a.az].a == 3) {
                    j = a.d == 0 ? b.a8 : b.at;
                }
                if (b.br._inner[a.az].a == 6) {
                    j = a.d == 0 && i.columns._inner[a.az].fj == 0 ? b.bb : b.aw;
                }
                if (a.d == 1) {
                    d += g - i.inset.c;
                }
                else if (a.d == 2) {
                    if (h < b.absoluteWidth) {
                        d -= b.absoluteWidth - h - i.inset.d;
                    }
                }
            }
            if (!i.iv) {
                if ((a.al || a.an) && a.w != -104) {
                    j = b.ar;
                }
            }
            this.w(i, b, a, j, 5, d, c, e, f);
        }
        ab(a, b, c, d, e, f, g, h) {
            this.ac(a, b, c, d, e, f, g, false, h);
        }
        ac(a, b, c, d, e, f, g, h, i) {
            let j = g ? b.bv._inner[f].g : b.bv._inner[f].d;
            let k = 3;
            let l = b.a6;
            if (g) {
                k = 2;
            }
            if (h) {
                l = b.a6;
            }
            this.w(i, b, a, l, k, c, d, e, j);
        }
        ad(a, b, c, d, e, f, g, h, i, j, k, l, m) {
            let n = 0;
            let o = c.al;
            if (i) {
                if (m == 1 || m == 2) {
                    o = !b.ao ? c.a3 : c.a6;
                }
                else if (m == 4) {
                    o = c.a5;
                }
                else {
                    o = c.aq;
                }
            }
            else {
                if (m == 1 || m == 2) {
                    o = c.a6;
                }
            }
            if (b.g) {
                let p = h.inset;
                let q = p.e;
                let r = Math.max(a.j, q);
                n = r + c.cl;
                if (this.f) {
                    n = a.o.e + c.cl;
                }
                o = c.ay;
            }
            else {
                let s = c.bv._inner[b.x];
                n = f;
            }
            this.x(h, c, b, o, 4, d, n, e, g, j, k, l);
        }
    }
    VisibilityEngine.$t = /*@__PURE__*/ markType(VisibilityEngine, 'VisibilityEngine');
    return VisibilityEngine;
})();
/**
 * @hidden
 */
let PinnedRowInfo = /*@__PURE__*/ (() => {
    class PinnedRowInfo extends Base {
        constructor() {
            super(...arguments);
            this.m = 0;
            this.o = null;
            this.l = 0;
            this.k = 0;
            this.i = 0;
            this.e = false;
            this.c = false;
            this.a = 0;
            this.f = false;
            this.n = 0;
            this.g = false;
            this.d = false;
            this.b = null;
        }
        get j() {
            return this.l + this.i;
        }
        get h() {
            return this.c;
        }
        set h(a) {
            let b = this.c;
            this.c = a;
            if (this.c != b) {
                if (this.b != null) {
                    this.b.cp = Math.min(0, this.c ? this.b.cp + 1 : this.b.cp - 1);
                }
            }
        }
        toString() {
            return EnumUtil.getName(DataSourceRowType_$type, this.a) + "(" + this.n + ") " + this.j;
        }
    }
    PinnedRowInfo.$t = /*@__PURE__*/ markType(PinnedRowInfo, 'PinnedRowInfo');
    return PinnedRowInfo;
})();
/**
 * @hidden
 */
let PushRowSettings = /*@__PURE__*/ (() => {
    class PushRowSettings extends Base {
        constructor() {
            super(...arguments);
            this.a = null;
            this.d = null;
            this.b = false;
            this.c = false;
            this.e = 0;
        }
    }
    PushRowSettings.$t = /*@__PURE__*/ markType(PushRowSettings, 'PushRowSettings');
    return PushRowSettings;
})();
/**
 * @hidden
 */
let PushRowResult = /*@__PURE__*/ (() => {
    class PushRowResult extends Base {
        constructor() {
            super(...arguments);
            this.b = false;
            this.a = null;
        }
    }
    PushRowResult.$t = /*@__PURE__*/ markType(PushRowResult, 'PushRowResult');
    return PushRowResult;
})();
/**
 * @hidden
 */
let ICellRenderingEngine_$type = /*@__PURE__*/ new Type(null, 'ICellRenderingEngine');
/**
 * @hidden
 */
let SpatialEngine = /*@__PURE__*/ (() => {
    class SpatialEngine extends Base {
        constructor() {
            super(...arguments);
            this.f = new List$1(ColumnInfo.$, 0);
            this.c = new Dictionary$2(Number_$type, ColumnInfo.$, 0);
            this.d = new List$1(Number_$type, 0);
            this.e = new List$1(Number_$type, 0);
            this.a = new GridColumnSpacerCollection();
        }
        r(a, b, c) {
            b.absoluteHeight = 0;
            b.absoluteWidth = 0;
            b.absoluteHeight = truncate(a.inset.e);
            b.ch = truncate(a.inset.e);
            b.bv.clear();
            this.c.clear();
            for (let d = 0; d < a.model.br.count; d++) {
                this.c.addItem(a.model.br._inner[d].o, a.model.br._inner[d]);
            }
            b.c1();
            b.cf = 0;
            b.cg = 0;
            b.cd = -1;
            b.ce = -1;
            a.model.cc = a.kq;
            if (a.d9 == null) {
                return;
            }
            let e = a.d9.getSectionCount();
            e = Math.max(1, e);
            a.model.cm = a.kk > 0 ? a.lg : 0;
            a.model.ci = a.kk + a.model.cm;
            a.model.cl = a.kk;
            a.model.absoluteHeight += a.model.ci;
            a.model.ch += a.model.ci;
            a.model.b0 = a.inset.c;
            a.model.b1 = a.inset.d;
            a.model.b2 = a.inset.e;
            a.model.bz = a.inset.b;
            for (let f = 0; f < e; f++) {
                let g = new SectionInfo();
                g.h = f;
                g.i = b.absoluteHeight;
                g.m = a.d9.getRowCount();
                g.g = a.lk;
                g.d = a.li;
                g.o = a.lg;
                g.p = a.lh;
                g.n = a.kl;
                g.q = g.m * g.n;
                a.model.absoluteHeight += g.l();
                a.model.bv.add(g);
            }
            let h = a.defaultColumnWidth;
            let i = 0;
            let j = a.defaultColumnWidth;
            let k = a.jn;
            this.f.clear();
            this.d.clear();
            this.e.clear();
            for (i = 0; i < a.actualColumns.count; i++) {
                let l = new ColumnInfo();
                if (this.c.containsKey(a.actualColumns._inner[i].g2)) {
                    l = this.c.item(a.actualColumns._inner[i].g2);
                }
                l.m = i;
                let m = a.actualColumns._inner[i];
                l.p = m.hy;
                l.o = m.g2;
                if (m.e8 == 3) {
                    l.h = -1;
                }
                if (m.e8 == 5) {
                    l.h = 0;
                }
                l.a = m.e8;
                let n = null;
                h = m.width;
                if (n == null) {
                    n = (h == null) ? j : h;
                }
                let o = 0;
                if (!isNaN_(k)) {
                    o = k;
                }
                if (!isNaN_(n.e) && n.e > 0) {
                    o = Math.max(o, n.e);
                }
                if (!isNaN_(m.gm)) {
                    o = m.gm;
                }
                l.b = n;
                l.i = o;
                l.d = m.fk;
                l.n = i;
                if (l.d == 1) {
                    this.d.add(i);
                }
                if (l.d == 2) {
                    this.e.add(i);
                }
                if (m.e8 != 2 && m.e8 != 3) {
                    if (m.fk == 0) {
                        if (b.cd == -1) {
                            b.cd = i;
                        }
                    }
                    if (b.ce == -1 && m.fk == 2) {
                        b.ce = i;
                    }
                }
                a.model.cy(l);
            }
            this.s(b);
            this.c.clear();
            a.model.cf = 0;
            a.model.cg = 0;
            this.q(a, b, c);
            a.c9.ac();
            a.model.absoluteHeight += truncate(a.inset.b);
        }
        s(a) {
            if (this.d.count > 0 || this.e.count > 0) {
                for (let b = 0; b < a.br.count; b++) {
                    a.br._inner[b].n = this.m(a.br._inner[b].d, b, a);
                }
            }
        }
        q(a, b, c) {
            b.absoluteWidth = 0;
            b.cj = 0;
            b.cf = 0;
            b.cg = 0;
            let d = a.model.cc;
            let e = a.model.cc;
            let f = 0;
            let g = new List$1(ColumnInfo.$, 0);
            let h = b.bw;
            for (let i of fromEnum(b.br)) {
                if (i.b.c) {
                    f += i.b.f * this.g(i);
                    g.add(i);
                }
                else {
                    i.k = truncate((Math.max(DeviceUtils.g(i.b.f), i.i)));
                    if (i.a != 3) {
                        if (i.a == 6) {
                            e += i.k + a.model.cc;
                        }
                        else {
                            e += i.k + a.model.cc - truncate(Math.round(i.f(b)));
                        }
                        b.cj += i.k + a.model.cc;
                        if (i.d == 1) {
                            b.cf += i.k + b.cc - truncate(Math.round(i.f(b)));
                        }
                        if (i.d == 2) {
                            b.cg += i.k + b.cc - truncate(Math.round(i.f(b)));
                        }
                    }
                    if (i.a == 6) {
                        d += i.k + a.model.cc;
                    }
                    else {
                        d += i.k + a.model.cc - truncate(Math.round(i.f(b)));
                    }
                }
            }
            b.cf = Math.max(0, b.cf - b.cc);
            if (f > 0) {
                let j = e;
                e = SpatialEngine.p(a, b, c, d, e, f, g);
            }
            a.model.absoluteWidth = e;
            a.model.absoluteWidth += truncate((a.inset.c + a.inset.d));
            a.model.cj += truncate((a.inset.c + a.inset.d));
        }
        g(a) {
            if (a.a == 6) {
                return 1;
            }
            if (a.a == 3) {
                return 0;
            }
            let b = 1 - Math.max(0, Math.min(1, Math.abs(a.h)));
            return b;
        }
        static p(a, b, c, d, e, f, g) {
            c -= d;
            c -= truncate((a.inset.c + a.inset.d));
            c -= (g.count * a.model.cc);
            c -= a.model.cs + a.model.ct;
            let h = 0;
            let i = (c) / f;
            if (i < 0) {
                i = 0;
            }
            if (c < 0) {
                c = 0;
            }
            let j = false;
            let k = new HashSet$1(ColumnInfo.$, 0);
            while (f > 0 && !j) {
                j = true;
                for (let l of fromEnum(g)) {
                    if (k.contains(l)) {
                        continue;
                    }
                    if (l.i > i * l.b.f) {
                        j = false;
                        if (l.a != 3) {
                            f--;
                        }
                        k.add_1(l);
                        l.k = truncate(l.i);
                        if (l.a != 6) {
                            if (l.a != 3) {
                                e += (l.k) + a.model.cc - truncate(Math.round(l.f(b)));
                                b.cj += l.k + a.model.cc;
                            }
                            if (l.a == 6) {
                                let m = (l.k) + a.model.cc;
                                d += m;
                                c -= m;
                            }
                            else {
                                let n = (l.k) + a.model.cc - truncate(Math.round(l.f(b)));
                                d += n;
                                c -= n;
                            }
                        }
                        else {
                            e += l.k;
                            b.cj += l.k + a.model.cc;
                        }
                    }
                }
                i = (c) / f;
            }
            if (c < 0) {
                c = 0;
            }
            let o = 0;
            for (let p of fromEnum(g)) {
                if (k.contains(p)) {
                    if (p.a != 3) {
                        if (p.d == 1) {
                            a.model.cf += p.k + a.model.cc;
                        }
                        if (p.d == 2) {
                            a.model.cg += p.k + a.model.cc;
                        }
                    }
                    continue;
                }
                let q = Math.max(p.i, i * p.b.f);
                let r = o + q;
                o += q;
                if (Math.round(r) >= r) {
                    p.k = truncate(Math.ceil(q));
                }
                else {
                    p.k = truncate(Math.floor(q));
                }
                e += a.model.cc;
                d += a.model.cc;
                h += a.model.cc;
                o += a.model.cc;
                b.cj += a.model.cc;
                if (p.a != 3) {
                    if (p.a == 6) {
                        e += p.k;
                    }
                    else {
                        e += p.k - truncate(Math.round(p.f(b)));
                    }
                    if (p.d == 1) {
                        a.model.cf += p.k + a.model.cc;
                    }
                    if (p.d == 2) {
                        a.model.cg += p.k + a.model.cc;
                    }
                    b.cj += p.k;
                }
                if (p.a == 6) {
                    d += p.k;
                    h += p.k;
                }
                else {
                    d += p.k - truncate(Math.round(p.f(b)));
                    h += p.k - truncate(Math.round(p.f(b)));
                }
            }
            a.model.cf = Math.max(0, a.model.cf - a.model.cc);
            if (h < c) {
                let s = (c - h - a.model.cc);
                g._inner[g.count - 1].k += s;
                e += s;
                d += s;
                b.cj += s;
            }
            if (h > c) {
                let t = (c - h - a.model.cc);
                g._inner[g.count - 1].k += t;
                e += t;
                d += t;
                b.cj += t;
            }
            return e;
        }
        k(a, b, c) {
            return this.l(a, c, false);
        }
        l(a, b, c) {
            let d = 0;
            if (b.br._inner[a].d == 1) {
                d += this.h(a, b.br._inner[a].o, 1, b);
            }
            if (b.br._inner[a].d == 0) {
                d += this.h(b.br.count, b.br._inner[a].o, 1, b);
                d += this.h(a, b.br._inner[a].o, 0, b);
            }
            if (b.br._inner[a].d == 2) {
                d += this.h(b.br.count, b.br._inner[a].o, 1, b);
                d += this.h(b.br.count, b.br._inner[a].o, 0, b);
                d += this.h(a, b.br._inner[a].o, 2, b);
            }
            d += truncate(Math.round(b.bw._inner[a].ad(b.br._inner[a].o)));
            if (!c) {
                d = truncate((d + Math.round(b.br._inner[a].e(b))));
            }
            return d;
        }
        h(a, b, c, d) {
            let e = 0;
            for (let f = 0; f < a; f++) {
                if (d.br._inner[f].d == c) {
                    e += truncate(Math.round(d.bw._inner[f].ad(b)));
                    if (d.br._inner[f].a != 6) {
                        e += (d.br._inner[f].k) + d.cc - truncate(Math.round(d.br._inner[f].f(d)));
                    }
                    e += truncate(Math.round(d.bw._inner[f].af(b)));
                }
            }
            return e;
        }
        m(a, b, c) {
            let d = b;
            if (a == 0) {
                let e = 0;
                for (let f = 0; f < b; f++) {
                    if (c.br._inner[f].d == 0) {
                        e++;
                    }
                }
                d = this.d.count + e;
            }
            if (a == 1) {
                let g = 0;
                for (let h = 0; h < this.d.count; h++) {
                    if (this.d._inner[h] < b) {
                        g++;
                    }
                }
                d = g;
            }
            if (a == 2) {
                let i = 0;
                for (let j = 0; j < this.e.count; j++) {
                    if (this.e._inner[j] > b) {
                        i++;
                    }
                }
                d = c.br.count - 1 - i;
            }
            return d;
        }
        j(a, b) {
            for (let c = 0; c < b.br.count; c++) {
                if (b.br._inner[c].n == a) {
                    return c;
                }
            }
            return -1;
        }
        n(a, b, c) {
            let d = c.br._inner[a].o;
            let e = truncate(b.inset.c) + c.cf + c.cc;
            let f = c.bw;
            let g = c.br;
            for (let h = 0; h < a; h++) {
                if (g._inner[h].d != 0) {
                    continue;
                }
                e += truncate(Math.round(f._inner[h].ad(d)));
                if (g._inner[h].a != 6) {
                    e += (g._inner[h].k) + b.model.cc - truncate(Math.round(g._inner[h].f(c)));
                }
                e += truncate(Math.round(f._inner[h].af(d)));
            }
            e += truncate(Math.round(f._inner[a].ad(d)));
            return (e);
        }
        o(a, b, c) {
            let d = 0;
            let e = 0;
            let f = truncate(b.inset.c);
            e += f;
            let g = c.bw;
            let h = c.br;
            let i = h.count;
            for (let j = 0; j < i; j++) {
                let k = h._inner[j];
                e += truncate(Math.round(g._inner[d].ad(-1)));
                if (k.a != 6) {
                    e += (k.k) + b.model.cc - truncate(Math.round(k.f(c)));
                }
                if (a <= e) {
                    return d;
                }
                e += truncate(Math.round(g._inner[d].af(-1)));
                d++;
            }
            let l = c.br.count - 1;
            if (d > l) {
                d = l;
            }
            return d;
        }
        b(a, b) {
            let c = b.bv.count;
            for (let d = 0; d < c; d++) {
                let e = b.bv._inner[d];
                let f = e.i;
                let g = f + e.l();
                if (a <= g) {
                    if (a < f) {
                        a = f;
                    }
                    return e.a(a);
                }
            }
            return new RowPath(b.bv.count - 1, b.bv._inner[b.bv.count - 1].m - 1);
        }
        v(a, b, c, d) {
            this.ab(a, b, d, false);
            for (let e = b + 1; e < d.br.count; e++) {
                this.aa(e, d, false, b);
            }
        }
        t(a, b, c) {
            for (let d = c.br.count - 1; d >= a; d--) {
                this.aa(d, c, true, a);
            }
        }
        x(a, b) {
            for (let c = 0; c < b.bu.count; c++) {
                let d = new List$1(CellModel.$, 0);
                let e = b.bu._inner[c];
                for (let f = 0; f < e.o.count; f++) {
                    if (e.p._inner[f]) {
                        continue;
                    }
                    let g = e.o._inner[f];
                    if (g.x > a.x || (g.x == a.x && g.w >= a.w)) {
                        d.add(e.q._inner[f]);
                    }
                }
                e.g = true;
                for (let h = 0; h < d.count; h++) {
                    let i = d._inner[h];
                    e.f(i.k);
                    i.k.w = i.k.w + 1;
                }
                for (let j = 0; j < d.count; j++) {
                    let k = d._inner[j];
                    e.s(k.k, k);
                }
                e.g = false;
            }
        }
        y(a, b, c) {
            for (let d = 0; d < c.bu.count; d++) {
                let e = new List$1(CellModel.$, 0);
                let f = c.bu._inner[d];
                let g = new List$1(CellPath.$, 0);
                for (let h = 0; h < f.o.count; h++) {
                    if (f.p._inner[h]) {
                        continue;
                    }
                    let i = f.o._inner[h];
                    if (i.x > b.x || (i.x == b.x && i.w > b.w)) {
                        e.add(f.q._inner[h]);
                    }
                    if (i.x == b.x && i.w == b.w) {
                        g.add(i);
                    }
                }
                f.g = true;
                for (let j = 0; j < g.count; j++) {
                    let k = g._inner[j];
                    a.j(k, f, c);
                }
                for (let l = 0; l < e.count; l++) {
                    let m = e._inner[l];
                    f.f(m.k);
                    m.k.w = m.k.w - 1;
                }
                for (let n = 0; n < e.count; n++) {
                    let o = e._inner[n];
                    f.s(o.k, o);
                }
                f.g = false;
            }
        }
        aa(a, b, c, d) {
            for (let e = 0; e < b.bu.count; e++) {
                let f = new List$1(CellModel.$, 0);
                let g = b.bu._inner[e];
                for (let h = 0; h < g.o.count; h++) {
                    if (g.p._inner[h]) {
                        continue;
                    }
                    let i = g.o._inner[h];
                    if (i.az == a && (i.ag || i.aj)) {
                        f.add(g.q._inner[h]);
                    }
                }
                g.g = true;
                for (let j = 0; j < f.count; j++) {
                    let k = f._inner[j];
                    g.f(k.k);
                    if (c) {
                        k.k.az = k.k.az + 1;
                    }
                    else {
                        k.k.az = k.k.az - 1;
                    }
                    g.s(k.k, k);
                }
                g.g = false;
            }
            let l = b.bw;
            if (c) {
                if (a == l.count - 1) {
                    l.add(new GridColumnSpacerCollection());
                }
                for (let m = l._inner[a].count - 1; m >= 0; m--) {
                    if (a != d || l._inner[a]._inner[m].d) {
                        l._inner[a + 1].add(l._inner[a]._inner[m]);
                        l._inner[a].removeAt(m);
                    }
                }
            }
            else {
                for (let n = l._inner[a].count - 1; n >= 0; n--) {
                    l._inner[a - 1].add(l._inner[a]._inner[n]);
                    l._inner[a].removeAt(n);
                }
            }
        }
        ab(a, b, c, d) {
            for (let e = 0; e < c.bu.count; e++) {
                let f = new List$1(CellModel.$, 0);
                let g = c.bu._inner[e];
                for (let h = 0; h < g.o.count; h++) {
                    if (g.p._inner[h]) {
                        continue;
                    }
                    let i = g.o._inner[h];
                    if (i.az == b && (i.ag || i.aj)) {
                        f.add(g.q._inner[h]);
                    }
                }
                g.g = true;
                for (let j = 0; j < f.count; j++) {
                    let k = f._inner[j];
                    if (d) {
                        g.f(k.k);
                        k.k.az = -800;
                        g.s(k.k, k);
                    }
                    else {
                        a.j(k.k, g, c);
                    }
                }
                g.g = false;
            }
            let l = c.bw;
            if (b < l.count) {
                for (let m = l._inner[b].count - 1; m >= 0; m--) {
                    this.a.add(l._inner[b]._inner[m]);
                    l._inner[b].removeAt(m);
                }
            }
        }
        z(a, b) {
            for (let c = 0; c < b.bu.count; c++) {
                let d = new List$1(CellModel.$, 0);
                let e = b.bu._inner[c];
                for (let f = 0; f < e.o.count; f++) {
                    if (e.p._inner[f]) {
                        continue;
                    }
                    let g = e.o._inner[f];
                    if (g.az == -800 && (g.ag || g.aj)) {
                        d.add(e.q._inner[f]);
                    }
                }
                e.g = true;
                for (let h = 0; h < d.count; h++) {
                    let i = d._inner[h];
                    e.f(i.k);
                    i.k.az = a;
                    e.s(i.k, i);
                }
                e.g = false;
            }
        }
        w(a, b) {
            for (let c = 0; c < b.br.count; c++) {
                this.ab(a, c, b, false);
            }
        }
        u(a, b, c, d, e) {
            this.ab(a, c, b, true);
            for (let f = c + 1; f < b.br.count; f++) {
                this.aa(f, b, false, c);
            }
            for (let g = b.br.count - 1; g >= d; g--) {
                this.aa(g, b, true, d);
            }
            this.z(d, b);
            let h = b.bw;
            for (let i = this.a.count - 1; i >= 0; i--) {
                h._inner[c].add(this.a._inner[i]);
                this.a.removeAt(i);
            }
        }
        i(a, b) {
            if (b == null) {
                return 0;
            }
            let c = 0;
            for (let d = 0; d < b.x; d++) {
                c += a.bv._inner[d].m;
            }
            c += b.w;
            return c;
        }
    }
    SpatialEngine.$t = /*@__PURE__*/ markType(SpatialEngine, 'SpatialEngine');
    return SpatialEngine;
})();
/**
 * @hidden
 */
let ColumnExchanger = /*@__PURE__*/ (() => {
    class ColumnExchanger extends Base {
        constructor(a, ..._rest) {
            super();
            this.c = null;
            this.a = null;
            this.b = 0;
            a = (a == void 0) ? 0 : a;
            switch (a) {
                case 0: break;
                case 1:
                    {
                        let c = _rest[0];
                        let d = _rest[1];
                        this.a = c;
                        this.b = d;
                    }
                    break;
            }
        }
    }
    ColumnExchanger.$t = /*@__PURE__*/ markType(ColumnExchanger, 'ColumnExchanger');
    return ColumnExchanger;
})();
/**
 * @hidden
 */
let ColumnExchangersCollection = /*@__PURE__*/ (() => {
    class ColumnExchangersCollection extends ObservableCollection$1 {
        constructor() {
            super(ColumnExchanger.$, 0);
        }
    }
    ColumnExchangersCollection.$t = /*@__PURE__*/ markType(ColumnExchangersCollection, 'ColumnExchangersCollection', /*@__PURE__*/ ObservableCollection$1.$.specialize(ColumnExchanger.$));
    return ColumnExchangersCollection;
})();
/**
 * @hidden
 */
let ResponsiveEngine = /*@__PURE__*/ (() => {
    class ResponsiveEngine extends Base {
        constructor(a) {
            super();
            this.c = null;
            this.l = 500;
            this.m = 200;
            this.k = dateMinValue();
            this.h = false;
            this.i = false;
            this.j = null;
            this.a = null;
            this.f = null;
            this.b = null;
            this.d = null;
            this.a = a;
            this.g = new ResponsiveStatesCollection();
            this.j = new List$1(Number_$type, 0);
            this.h = true;
            this.d = null;
        }
        get g() {
            return this.f;
        }
        set g(a) {
            this.f = a;
        }
        x(a) {
            if (this.b == a) {
                return;
            }
            this.d = a;
            if (this.h) {
            }
            else {
                this.w();
            }
        }
        y(a, b) {
            this.k = dateNow();
            if (this.h) {
                this.q();
                this.h = false;
            }
            else {
                this.w();
            }
        }
        w() {
            if (this.i) {
                return;
            }
            let a = this.n();
            this.i = true;
            this.a.delayedExecutionManager.executeIn(() => {
                if (!this.i) {
                    return;
                }
                this.i = false;
                if (this.n() < 1) {
                    this.q();
                }
                else {
                    this.w();
                }
            }, a);
        }
        q() {
            if (this.b != null) {
                return;
            }
            let a = null;
            if (this.g.count > 0) {
                a = this.e(this.a.jm);
            }
            if (a == this.c) {
                return;
            }
            if (this.c != null && a != null) {
                this.c.q();
                this.c = null;
            }
            if (a != null) {
                if (this.d != null) {
                    this.d = null;
                }
                this.b = a;
                this.c = a;
                this.c.l = 0;
                this.c.p();
                this.t(this.c);
                this.c.o();
            }
        }
        t(a) {
            if (a.c.count == a.l) {
                this.b = null;
                let b = this.e(this.a.jm);
                {
                    if (b != this.c) {
                        this.w();
                    }
                }
                return;
            }
            if (this.h) {
                this.u(a);
                this.c.l = this.c.l + 1;
                this.t(a);
            }
            else {
                this.a.delayedExecutionManager.executeIn(() => {
                    let c = this.a.ck;
                    c.animationCompleted = delegateCombine(c.animationCompleted, runOn(this, this.p));
                    let d = this.a.ck;
                    d.animationCanceled = delegateCombine(d.animationCanceled, runOn(this, this.o));
                    this.a.ck.ar();
                    this.u(a);
                    this.j = this.a.ck.m();
                    if (this.j.count == 0) {
                        this.r(-1);
                    }
                }, a.c._inner[0].i);
            }
        }
        u(a) {
            let b = a.c._inner[a.l];
            this.v(b.e);
            this.s(b.b);
        }
        o(a, b) {
            this.r(b.a);
        }
        p(a, b) {
            this.r(b.a);
        }
        r(a) {
            if (this.j.contains(a)) {
                this.j.remove(a);
            }
            if (this.j.count == 0) {
                let b = this.a.ck;
                b.animationCompleted = delegateRemove(b.animationCompleted, runOn(this, this.p));
                let c = this.a.ck;
                c.animationCanceled = delegateRemove(c.animationCanceled, runOn(this, this.o));
                this.c.l = this.c.l + 1;
                this.t(this.c);
            }
        }
        v(a) {
            for (let b = 0; b < a.count; b++) {
                let c = a._inner[b];
                let d = null;
                for (let e = 0; e < this.a.actualColumns.count; e++) {
                    if (this.a.actualColumns._inner[e].id == c.c) {
                        d = this.a.actualColumns._inner[e];
                        break;
                    }
                }
                if (d == null) {
                    for (let f = 0; f < this.a.actualColumns.count; f++) {
                        if (this.a.actualColumns._inner[f].hy == c.c) {
                            d = this.a.actualColumns._inner[f];
                            break;
                        }
                    }
                }
                if (d == null) {
                    continue;
                }
                let g = d.externalObject;
                this.a.propertySetter.setProperty(g, c.d, c.b);
            }
        }
        s(a) {
            for (let b = 0; b < a.count; b++) {
                let c = a._inner[b];
                if (c.a == null) {
                    continue;
                }
                if (c.b >= this.a.actualColumns.count) {
                    continue;
                }
                let d = this.a.actualColumns._inner[c.b];
                this.a.p2(c.a, d);
            }
        }
        e(a) {
            if (this.d != null) {
                return this.d;
            }
            for (let b = 0; b < this.g.count; b++) {
                let c = this.g._inner[b];
                if (a >= c.k && a <= c.j && !c.i) {
                    return c;
                }
            }
            return null;
        }
        n() {
            let a = timeSpanFromMilliseconds(this.m);
            let b = timeSpanFromMilliseconds(this.l);
            if (+(this.k) != +(dateMinValue())) {
                a = +(dateNow()) - +(this.k);
            }
            let c = truncate(timeSpanTotalMilliseconds(a));
            let d = (this.m - c);
            if (d < 1) {
                d = 0;
            }
            return d;
        }
    }
    ResponsiveEngine.$t = /*@__PURE__*/ markType(ResponsiveEngine, 'ResponsiveEngine');
    return ResponsiveEngine;
})();
/**
 * @hidden
 */
let ResponsivePhase = /*@__PURE__*/ (() => {
    class ResponsivePhase extends Base {
        constructor() {
            super(...arguments);
            this.j = null;
            this.k = null;
            this.i = 0;
            this.d = new ColumnPropertySettersCollection();
            this.a = new ColumnExchangersCollection();
        }
        get e() {
            return this.d;
        }
        get b() {
            return this.a;
        }
        g(a) {
            this.e.add(a);
            return this;
        }
        c() {
            let a = new ColumnPropertySetter(0);
            this.e.add(a);
            return a;
        }
        f(a) {
            this.b.add(a);
            return this;
        }
        h() {
            let a = new ColumnExchanger(0);
            this.b.add(a);
            return this;
        }
    }
    ResponsivePhase.$t = /*@__PURE__*/ markType(ResponsivePhase, 'ResponsivePhase');
    return ResponsivePhase;
})();
/**
 * @hidden
 */
let ResponsivePhasesCollection = /*@__PURE__*/ (() => {
    class ResponsivePhasesCollection extends ObservableCollection$1 {
        constructor() {
            super(ResponsivePhase.$, 0);
        }
    }
    ResponsivePhasesCollection.$t = /*@__PURE__*/ markType(ResponsivePhasesCollection, 'ResponsivePhasesCollection', /*@__PURE__*/ ObservableCollection$1.$.specialize(ResponsivePhase.$));
    return ResponsivePhasesCollection;
})();
/**
 * @hidden
 */
let ResponsiveState = /*@__PURE__*/ (() => {
    class ResponsiveState extends Base {
        constructor() {
            super(...arguments);
            this.m = null;
            this.n = null;
            this.k = 0;
            this.j = 0;
            this.stateEntering = null;
            this.stateEntered = null;
            this.stateExited = null;
            this.h = false;
            this.l = 0;
            this.b = new ResponsivePhasesCollection();
        }
        get i() {
            return this.h;
        }
        set i(a) {
            this.h = a;
        }
        get c() {
            return this.b;
        }
        d(a) {
            this.c.add(a);
            return this;
        }
        a() {
            let a = new ResponsivePhase();
            this.c.add(a);
            return a;
        }
        p() {
            if (this.stateEntering != null) {
                this.stateEntering(this, new ResponsiveStateEnteringEventArgs());
            }
        }
        o() {
            if (this.stateEntered != null) {
                this.stateEntered(this, new ResponsiveStateEnteredEventArgs());
            }
        }
        q() {
            if (this.stateExited != null) {
                this.stateExited(this, new ResponsiveStateExitedEventArgs());
            }
        }
    }
    ResponsiveState.$t = /*@__PURE__*/ markType(ResponsiveState, 'ResponsiveState');
    return ResponsiveState;
})();
/**
 * @hidden
 */
let ResponsiveStatesCollection = /*@__PURE__*/ (() => {
    class ResponsiveStatesCollection extends ObservableCollection$1 {
        constructor() {
            super(ResponsiveState.$, 0);
        }
    }
    ResponsiveStatesCollection.$t = /*@__PURE__*/ markType(ResponsiveStatesCollection, 'ResponsiveStatesCollection', /*@__PURE__*/ ObservableCollection$1.$.specialize(ResponsiveState.$));
    return ResponsiveStatesCollection;
})();
/**
 * @hidden
 */
let GridLayer = /*@__PURE__*/ (() => {
    class GridLayer extends FastIterationDictionary$2 {
        constructor(a) {
            super(CellPath.$, CellModel.$, 0);
            this.v = null;
            this.v = a;
        }
    }
    GridLayer.$t = /*@__PURE__*/ markType(GridLayer, 'GridLayer', /*@__PURE__*/ FastIterationDictionary$2.$.specialize(CellPath.$, CellModel.$));
    return GridLayer;
})();
/**
 * @hidden
 */
let ColumnInfo = /*@__PURE__*/ (() => {
    class ColumnInfo extends Base {
        constructor() {
            super();
            this.m = 0;
            this.n = 0;
            this.b = null;
            this.i = 0;
            this.k = 0;
            this.l = 0;
            this.p = null;
            this.o = 0;
            this.c = 0;
            this.g = 0;
            this.j = 0;
            this.h = 0;
            this.a = 0;
            this.d = 0;
            this.g = 0;
            this.h = 0;
            this.j = 0;
            this.i = 0;
        }
        e(a) {
            let b = this.h;
            if (this.a != 6) {
                if (b > 0 && b < 1) {
                    b = 0;
                }
                if (b >= 1) {
                    b = b - 1;
                }
            }
            return this.g + b * (this.k + a.cc);
        }
        f(a) {
            let b = Math.abs(this.g + this.h * (this.k + a.cc));
            if (b < (-1 * (this.k + a.cc))) {
                b = (-1 * (this.k + a.cc));
            }
            if (b > (this.k + a.cc)) {
                b = (this.k + a.cc);
            }
            return b;
        }
    }
    ColumnInfo.$t = /*@__PURE__*/ markType(ColumnInfo, 'ColumnInfo');
    return ColumnInfo;
})();
/**
 * @hidden
 */
let SectionInfo = /*@__PURE__*/ (() => {
    class SectionInfo extends Base {
        constructor() {
            super(...arguments);
            this.h = 0;
            this.m = 0;
            this.q = 0;
            this.o = 0;
            this.g = 0;
            this.d = 0;
            this.n = 0;
            this.p = 0;
            this.i = 0;
            this.b = null;
            this.c = null;
        }
        l() {
            return this.q + this.g + this.d + ((this.o + this.p) * this.m);
        }
        e(a) {
            if (a == -200) {
                return this.g;
            }
            if (a == -201) {
                return this.d;
            }
            if (this.b == null) {
                return this.n;
            }
            else {
                return this.b._inner[a];
            }
        }
        f(a) {
            if (this.c == null) {
                if (a == -200) {
                    return 0;
                }
                else if (a == -201) {
                    return this.l() - this.g;
                }
                return (a * this.k()) + this.g;
            }
            else {
                if (a == -200) {
                    return 0;
                }
                else if (a == -201) {
                    return this.l() - this.d;
                }
                return this.c._inner[a];
            }
        }
        k() {
            return this.n + this.p + this.o;
        }
        j(a) {
            if (this.c == null) {
                return this.n + this.p + this.o;
            }
            else {
                return this.b._inner[a] + this.o + this.p;
            }
        }
        a(a) {
            a -= this.i;
            if (a < this.g) {
                return new RowPath(this.h, -200);
            }
            else if (a > this.l() - this.d) {
                return new RowPath(this.h, -201);
            }
            a -= this.g;
            if (this.b == null) {
                let b = this.k();
                let c = truncate((a / b));
                if (c >= this.m) {
                    c = this.m - 1;
                }
                return new RowPath(this.h, c);
            }
            else {
                for (let d = 0; d < this.m; d++) {
                    let e = this.c._inner[d];
                    let f = this.j(d);
                    if (a >= e && a <= e + f) {
                        return new RowPath(this.h, d);
                    }
                }
            }
            return null;
        }
    }
    SectionInfo.$t = /*@__PURE__*/ markType(SectionInfo, 'SectionInfo');
    return SectionInfo;
})();
/**
 * @hidden
 */
let VisualModel = /*@__PURE__*/ (() => {
    class VisualModel extends Base {
        constructor() {
            super();
            this._actualVisibleRegion = null;
            this._absoluteWidth = 0;
            this._absoluteHeight = 0;
            this.ci = 0;
            this.cl = 0;
            this.cm = 0;
            this.ch = 0;
            this.cf = 0;
            this.cg = 0;
            this.cc = 0;
            this.cs = 0;
            this.ct = 0;
            this.b4 = 0;
            this.b5 = 0;
            this.cd = 0;
            this.ce = 0;
            this.cj = 0;
            this.cp = 0;
            this.b7 = 0;
            this.b0 = 0;
            this.b1 = 0;
            this.b2 = 0;
            this.bz = 0;
            this.ae = null;
            this.p = null;
            this.i = null;
            this.k = null;
            this.ah = null;
            this.s = null;
            this.o = null;
            this.j = null;
            this.ag = null;
            this.r = null;
            this.q = null;
            this.af = null;
            this.w = null;
            this.v = null;
            this.l = null;
            this.aj = null;
            this.u = null;
            this.t = null;
            this.ai = null;
            this.m = null;
            this.x = null;
            this.n = null;
            this.y = null;
            this.z = null;
            this.aa = null;
            this.ab = null;
            this.ac = null;
            this.ad = null;
            this.ak = null;
            this.c = null;
            this.bg = null;
            this.bv = null;
            this.br = null;
            this.bl = false;
            this.bn = false;
            this.bk = false;
            this.bq = new List$1(GridColumnSpacerCollection.$, 0);
            this.bo = null;
            this.bf = null;
            this.be = null;
            this.cx = -1;
            this.f = null;
            this.bp = null;
            this.bx = null;
            this.cn = 0;
            this.cq = 0;
            this.co = 0;
            this.cr = 0;
            this.bj = false;
            this.cv = 0;
            this.cw = 0;
            this.cu = 0;
            this.actualVisibleRegion = Rect.empty;
            this.ae = new GridLayer("SubContentLayer");
            this.i = new GridLayer("ContentLayer");
            this.ah = new GridLayer("SuperContentLayer");
            this.j = new GridLayer("DecoratorLayer");
            this.x = new GridLayer("PinnedRowsLayer");
            this.y = new GridLayer("PinnedRowsSubLayer");
            this.z = new GridLayer("PinnedRowsSuperLayer");
            this.aa = new GridLayer("PinnedSectionLayer");
            this.ab = new GridLayer("PinnedSectionSubLayer");
            this.ac = new GridLayer("PinnedSectionSuperLayer");
            this.ad = new GridLayer("SectionLayer");
            this.ag = new GridLayer("SubHeaderLayer");
            this.w = new GridLayer("HeaderLayer");
            this.v = new GridLayer("HeaderDecoratorLayer");
            this.aj = new GridLayer("SuperHeaderLayer");
            this.ak = new GridLayer("VerticalSeparatorLayer");
            this.af = new GridLayer("SubHeaderDecoratorLayer");
            this.ai = new GridLayer("SuperHeaderDecoratorLayer");
            this.k = new GridLayer("FixedContentLayer");
            this.m = new GridLayer("FixedHeaderLayer");
            this.n = new GridLayer("FixedPinnedRowsLayer");
            this.o = new GridLayer("FixedSeparatorLayer");
            this.p = new GridLayer("FixedSubContentLayer");
            this.r = new GridLayer("FixedSubHeaderLayer");
            this.s = new GridLayer("FixedSuperContentLayer");
            this.u = new GridLayer("FixedSuperHeaderLayer");
            this.q = new GridLayer("FixedSubHeaderDecoratorLayer");
            this.u = new GridLayer("FixedSuperHeaderLayer");
            this.t = new GridLayer("FixedSuperHeaderDecoratorLayer");
            this.l = new GridLayer("FixedHeaderDecoratorLayer");
            this.bg = new FastIterationDictionary$2(CellPath.$, List$1.$.specialize(CellModel.$), 0);
            this.c2();
            this.bv = new List$1(SectionInfo.$, 0);
            this.br = new List$1(ColumnInfo.$, 0);
            this.bo = new Dictionary$2(Number_$type, Number_$type, 0);
            this.bx = new List$1(Number_$type, 0);
        }
        get actualVisibleRegion() {
            return this._actualVisibleRegion;
        }
        set actualVisibleRegion(a) {
            this._actualVisibleRegion = a;
        }
        get absoluteWidth() {
            return this._absoluteWidth;
        }
        set absoluteWidth(a) {
            this._absoluteWidth = a;
        }
        get absoluteHeight() {
            return this._absoluteHeight;
        }
        set absoluteHeight(a) {
            this._absoluteHeight = a;
        }
        get b8() {
            return truncate(this.actualVisibleRegion.top);
        }
        get b3() {
            return truncate(this.actualVisibleRegion.left);
        }
        get b6() {
            return truncate(this.actualVisibleRegion.right);
        }
        get by() {
            return truncate(this.actualVisibleRegion.height);
        }
        get b9() {
            return truncate(this.actualVisibleRegion.width);
        }
        get a7() {
            return this.ae;
        }
        set a7(a) {
            this.ae = a;
            this.c2();
        }
        get as() {
            return this.p;
        }
        set as(a) {
            this.p = a;
            this.c2();
        }
        get al() {
            return this.i;
        }
        set al(a) {
            this.i = a;
            this.c2();
        }
        get an() {
            return this.k;
        }
        set an(a) {
            this.k = a;
            this.c2();
        }
        get ba() {
            return this.ah;
        }
        set ba(a) {
            this.ah = a;
            this.c2();
        }
        get av() {
            return this.s;
        }
        set av(a) {
            this.s = a;
            this.c2();
        }
        get ar() {
            return this.o;
        }
        set ar(a) {
            this.o = a;
            this.c2();
        }
        get am() {
            return this.j;
        }
        set am(a) {
            this.j = a;
            this.c2();
        }
        get a9() {
            return this.ag;
        }
        set a9(a) {
            this.ag = a;
            this.c2();
        }
        get au() {
            return this.r;
        }
        set au(a) {
            this.r = a;
            this.c2();
        }
        get at() {
            return this.q;
        }
        set at(a) {
            this.q = a;
            this.c2();
        }
        get a8() {
            return this.af;
        }
        set a8(a) {
            this.af = a;
            this.c2();
        }
        get az() {
            return this.w;
        }
        set az(a) {
            this.w = a;
            this.c2();
        }
        get ay() {
            return this.v;
        }
        set ay(a) {
            this.v = a;
            this.c2();
        }
        get ao() {
            return this.l;
        }
        set ao(a) {
            this.l = a;
            this.c2();
        }
        get bc() {
            return this.aj;
        }
        set bc(a) {
            this.aj = a;
            this.c2();
        }
        get ax() {
            return this.u;
        }
        set ax(a) {
            this.u = a;
            this.c2();
        }
        get aw() {
            return this.t;
        }
        set aw(a) {
            this.t = a;
            this.c2();
        }
        get bb() {
            return this.ai;
        }
        set bb(a) {
            this.ai = a;
            this.c2();
        }
        get ap() {
            return this.m;
        }
        set ap(a) {
            this.m = a;
            this.c2();
        }
        get a0() {
            return this.x;
        }
        set a0(a) {
            this.x = a;
            this.c2();
        }
        get aq() {
            return this.n;
        }
        set aq(a) {
            this.n = a;
            this.c2();
        }
        get a1() {
            return this.y;
        }
        set a1(a) {
            this.y = a;
            this.c2();
        }
        get a2() {
            return this.z;
        }
        set a2(a) {
            this.z = a;
            this.c2();
        }
        get a3() {
            return this.aa;
        }
        set a3(a) {
            this.aa = a;
            this.c2();
        }
        get a4() {
            return this.ab;
        }
        set a4(a) {
            this.ab = a;
            this.c2();
        }
        get a5() {
            return this.ac;
        }
        set a5(a) {
            this.ac = a;
            this.c2();
        }
        get a6() {
            return this.ad;
        }
        set a6(a) {
            this.ad = a;
            this.c2();
        }
        get bd() {
            return this.ak;
        }
        set bd(a) {
            this.ak = a;
            this.c2();
        }
        e(a, b) {
            a += this.actualVisibleRegion.left;
            b += this.actualVisibleRegion.top;
            let c = this.bu;
            let d = c.count;
            for (let e = d - 1; e >= 0; e--) {
                if (c._inner[e] == this.al) {
                    break;
                }
                let f = c._inner[e].q;
                let g = c._inner[e].q.count;
                let h = c._inner[e].p;
                for (let i = 0; i < g; i++) {
                    if (h._inner[i]) {
                        continue;
                    }
                    let j = f._inner[i];
                    if (a >= j.cc && a <= j.cc + j.gf && b >= j.cd && b <= j.cd + j.e0) {
                        this.c = j;
                        return j;
                    }
                }
            }
            if (this.c != null) {
                let k = this.c;
                if (a >= k.cc && a <= k.cc + k.gf && b >= k.cd && b <= k.cd + k.e0) {
                    this.c = k;
                    return k;
                }
            }
            c = this.bu;
            d = c.count;
            for (let l = d - 1; l >= 0; l--) {
                let m = c._inner[l].q;
                let n = c._inner[l].q.count;
                let o = c._inner[l].p;
                for (let p = 0; p < n; p++) {
                    if (o._inner[p]) {
                        continue;
                    }
                    let q = m._inner[p];
                    if (a >= q.cc && a <= q.cc + q.gf && b >= q.cd && b <= q.cd + q.e0) {
                        this.c = q;
                        return q;
                    }
                }
            }
            return null;
        }
        get bh() {
            return this.bg;
        }
        set bh(a) {
            this.bg = a;
        }
        get bw() {
            while (this.bq.count < this.br.count) {
                this.bq.add(new GridColumnSpacerCollection());
            }
            return this.bq;
        }
        set bw(a) {
            this.bq = a;
        }
        bm() {
            if (this.bf != null && this.be != null && this.bf.w >= 0 && this.be.w >= 0) {
                return true;
            }
            return false;
        }
        g(a) {
            if (a == this.cx) {
                return this.f;
            }
            let b = null;
            if (this.bo.containsKey(a)) {
                b = this.br._inner[this.bo.item(a)];
            }
            this.cx = a;
            this.f = b;
            return b;
        }
        cy(a) {
            this.br.add(a);
            this.bo.addItem(a.o, this.br.count - 1);
        }
        c2() {
            this.bp = new List$1(GridLayer.$, 0);
            this.bp.add(this.a7);
            this.bp.add(this.al);
            this.bp.add(this.ba);
            this.bp.add(this.am);
            this.bp.add(this.a1);
            this.bp.add(this.a0);
            this.bp.add(this.a2);
            this.bp.add(this.as);
            this.bp.add(this.an);
            this.bp.add(this.av);
            this.bp.add(this.aq);
            this.bp.add(this.ar);
            this.bp.add(this.a6);
            this.bp.add(this.a4);
            this.bp.add(this.a3);
            this.bp.add(this.a5);
            this.bp.add(this.a9);
            this.bp.add(this.a8);
            this.bp.add(this.az);
            this.bp.add(this.ay);
            this.bp.add(this.bc);
            this.bp.add(this.bb);
            this.bp.add(this.au);
            this.bp.add(this.at);
            this.bp.add(this.ap);
            this.bp.add(this.ao);
            this.bp.add(this.ax);
            this.bp.add(this.aw);
            this.bp.add(this.bd);
        }
        get bu() {
            return this.bp;
        }
        bi() {
            for (let a = 0; a < this.bp.count; a++) {
                for (let b = 0; b < this.bp._inner[a].o.count; b++) {
                    if (this.bp._inner[a].p._inner[b]) {
                        continue;
                    }
                    let c = this.bp._inner[a].o._inner[b];
                    let d = this.bp._inner[a].q._inner[b];
                    if (c != d.k) {
                        return false;
                    }
                }
            }
            return true;
        }
        c1() {
            this.f = null;
            this.cx = -1;
            this.br.clear();
            this.bo.clear();
        }
        c0() {
            this.c1();
            this.bv.clear();
            this.a7.u();
            this.al.u();
            this.ba.u();
            this.am.u();
            this.a1.u();
            this.a0.u();
            this.a2.u();
            this.as.u();
            this.an.u();
            this.av.u();
            this.aq.u();
            this.ar.u();
            this.a6.u();
            this.a4.u();
            this.a3.u();
            this.a5.u();
            this.a9.u();
            this.a8.u();
            this.az.u();
            this.ay.u();
            this.bc.u();
            this.bb.u();
            this.au.u();
            this.at.u();
            this.ap.u();
            this.ao.u();
            this.ax.u();
            this.aw.u();
            this.bd.u();
        }
        b() {
            let a = new VisualModelExport();
            a.ae = new RectData(this.actualVisibleRegion.x, this.actualVisibleRegion.y, this.actualVisibleRegion.width, this.actualVisibleRegion.height);
            a.ah = this.absoluteWidth;
            a.ag = this.absoluteHeight;
            a.au = this.cl;
            a.an = this.ci;
            a.am = this.ch;
            a.ak = this.cf;
            a.al = this.cg;
            a.ai = this.cc;
            a.aq = this.cs;
            a.ar = this.ct;
            a.as = this.b8;
            a.ap = this.b3;
            a.ao = this.by;
            a.at = this.b9;
            a.x = this.a(this.a7);
            a.a = this.a(this.al);
            a.aa = this.a(this.ba);
            a.b = this.a(this.am);
            a.r = this.a(this.a1);
            a.q = this.a(this.a0);
            a.s = this.a(this.a2);
            a.h = this.a(this.as);
            a.c = this.a(this.an);
            a.k = this.a(this.av);
            a.f = this.a(this.aq);
            a.g = this.a(this.ar);
            a.w = this.a(this.a6);
            a.u = this.a(this.a4);
            a.t = this.a(this.a3);
            a.v = this.a(this.a5);
            a.z = this.a(this.a9);
            a.y = this.a(this.a8);
            a.o = this.a(this.az);
            a.n = this.a(this.ay);
            a.ac = this.a(this.bc);
            a.ab = this.a(this.bb);
            a.j = this.a(this.au);
            a.i = this.a(this.at);
            a.e = this.a(this.ap);
            a.d = this.a(this.ao);
            a.m = this.a(this.ax);
            a.l = this.a(this.aw);
            a.ad = this.a(this.bd);
            a.ax();
            return a;
        }
        a(a) {
            let b = new GridLayerExport(a.v);
            let c = a == this.az;
            for (let d of fromEnum(a.n)) {
                let e = d.b(null);
                if (this.bj && c) {
                    e.s += this.b8;
                }
                b.e(e);
            }
            return b;
        }
        h(a, b, c, d, e) {
            let f = new GridColumnSpacer();
            f.i = c;
            f.j = c;
            f.f = d;
            f.n = b.o;
            f.d = e;
            this.bw._inner[a].add(f);
            return f;
        }
        cz(a) {
            let b = this.bw;
            for (let c = 0; c < b.count; c++) {
                let d = b._inner[c];
                for (let e = d.count - 1; e >= 0; e--) {
                    if (d._inner[e].o == a.o) {
                        d.removeAt(e);
                    }
                }
            }
        }
        bt(a) {
            let b = new List$1(GridColumnSpacer.$, 0);
            let c = this.bw;
            for (let d = 0; d < c.count; d++) {
                let e = c._inner[d];
                for (let f = e.count - 1; f >= 0; f--) {
                    if (e._inner[f].n == a.o) {
                        b.add(e._inner[f]);
                    }
                }
            }
            return b;
        }
        bs(a) {
            let b = new List$1(CellModel.$, 0);
            for (let c = 0; c < this.bu.count; c++) {
                let d = new List$1(CellModel.$, 0);
                let e = this.bu._inner[c];
                for (let f = 0; f < e.o.count; f++) {
                    if (e.p._inner[f]) {
                        continue;
                    }
                    let g = e.q._inner[f];
                    if (g.k.az == a.m && g.k.b == a.c) {
                        b.add(g);
                    }
                }
            }
            return b;
        }
        d(a, b) {
            for (let c = 0; c < this.bu.count; c++) {
                let d = this.bu._inner[c];
                for (let e = 0; e < d.o.count; e++) {
                    if (d.p._inner[e]) {
                        continue;
                    }
                    let f = d.q._inner[e];
                    if (f.k.az == a && f.k.w == b) {
                        return f;
                    }
                }
            }
            return null;
        }
        ck() {
            let a = 0;
            for (let b = 0; b < this.bv.count; b++) {
                a += this.bv._inner[b].m;
            }
            return a;
        }
    }
    VisualModel.$t = /*@__PURE__*/ markType(VisualModel, 'VisualModel');
    return VisualModel;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let SelectAllCheckboxChangedEventArgs = /*@__PURE__*/ (() => {
    class SelectAllCheckboxChangedEventArgs extends Base {
        constructor() {
            super(...arguments);
            this.a = false;
        }
    }
    SelectAllCheckboxChangedEventArgs.$t = /*@__PURE__*/ markType(SelectAllCheckboxChangedEventArgs, 'SelectAllCheckboxChangedEventArgs');
    return SelectAllCheckboxChangedEventArgs;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let CheckboxListView = /*@__PURE__*/ (() => {
    class CheckboxListView extends Base {
        constructor() {
            super();
            this.d = new Dictionary$2(DomWrapper_$type, Checkbox.$, 0);
            this.h = null;
            this.a = null;
            this.g = null;
            this.b = null;
            this.e = null;
            this.c = false;
            this.f = null;
        }
        l() {
        }
        k(a) {
            if (a == null) {
                this.e = null;
                this.d.clear();
                return;
            }
            this.e = a;
            this.t();
            this.aa();
            this.q();
            let b = Math.round(a.rootWrapper.width());
            let c = Math.round(a.rootWrapper.height());
            this.e.rootWrapper.setStyleProperty("position", "relative");
        }
        t() {
            if (this.e != null) {
                this.b.b9(this.e);
            }
        }
        q() {
            if (this.e != null) {
                let a = this.e.rootWrapper.getChildAt(3);
                a.setStyleProperty("width", "100%");
                a.setStyleProperty("margin", "4px 0px 4px 0px");
                if (this.b.ag == false) {
                    a.setStyleProperty("height", "calc(100% - 50px");
                }
                else {
                    a.setStyleProperty("height", "calc(100% - 75px");
                }
            }
        }
        m(a, b, c) {
            let d = null;
            if (a.getChildCount() == 0) {
                d = new Checkbox();
                let e = this.e.getSubRenderer(a);
                d.provideContainer(e);
                this.d.addItem(a, d);
                d.d = this.b.l;
                d.t = true;
                d.change = delegateCombine(d.change, runOn(this, this.i));
                let f = this.e.createElement("div");
                a.setStyleProperty("display", "flex");
                a.setStyleProperty("height", "100%");
                a.setStyleProperty("align-items", "center");
                switch (this.b.n) {
                    case 1:
                        a.setStyleProperty("margin-top", "-4px");
                        break;
                    case 2:
                        a.setStyleProperty("margin-top", "-1px");
                        break;
                    case 3:
                        a.setStyleProperty("margin-top", "1px");
                        break;
                }
                a.append(f);
            }
            else {
                d = this.d.item(a);
            }
            if (d != null) {
                let g = d.u;
                try {
                    d.u = true;
                    d.a5 = b;
                    if (c) {
                        if (this.b.p == 0) {
                            d.checked = false;
                        }
                        else {
                            d.checked = true;
                        }
                    }
                    else {
                        if (this.b.p == 0) {
                            d.checked = true;
                        }
                        else {
                            d.checked = false;
                        }
                    }
                }
                finally {
                    d.u = g;
                }
            }
        }
        v() {
            if (this.d != null) {
                for (let a of fromEnum(this.d)) {
                    let b = a.value;
                    b.d = this.b.l;
                }
            }
            if (this.a != null) {
                this.a.d = this.b.l;
            }
        }
        u() {
        }
        i(a, b) {
            let c = a;
            let d = parseInt(c.a5.toString());
            let e = c.checked;
            if (e == true) {
                if (this.b.p == 0) {
                    this.b.b3(d);
                }
                else {
                    this.b.bd(d);
                }
            }
            else {
                if (this.b.p == 0) {
                    this.b.bd(d);
                }
                else {
                    this.b.b3(d);
                }
            }
            this.b.bq(d, e);
            this.z(false);
        }
        j() {
        }
        r(a, b) {
            for (let c of fromEnum(this.d)) {
                let d = c.value;
                let e = parseInt(d.a5.toString());
                if (e == a) {
                    d.checked = b;
                    this.b.bq(e, b);
                }
            }
            this.z();
        }
        s(a) {
            for (let b of fromEnum(this.d)) {
                let c = b.value;
                c.checked = a;
            }
        }
        o(a) {
            this.h = a;
            if (null != this.h) {
                this.h.setStyleProperty("margin", "5px 0px 4px 0px");
            }
        }
        aa() {
            let a = this.e;
            if (null == a || null == this.h) {
                return;
            }
            let b = a.createElement("div");
            let c = a.getSubRenderer(b);
            this.a = new Checkbox();
            this.a.provideContainer(c);
            this.a.d = this.b.l;
            this.g = a.createElement("label");
            this.g.setRawText(this.b.a6);
            this.g.setStyleProperty("font-size", "13px");
            this.h.setStyleProperty("display", "flex");
            this.h.setStyleProperty("flex-direction", "row");
            this.h.setStyleProperty("font-family", "'Segoe UI', Verdana");
            this.h.setStyleProperty("align-items", "center");
            this.h.append(b);
            this.h.append(this.g);
            this.ab();
            this.y();
            let d = this.a;
            d.change = delegateCombine(d.change, runOn(this, this.p));
            this.a.t = true;
        }
        y() {
            if (null != this.g) {
                this.g.setRawText(this.b.a6);
                NativeUI.n(this.g, this.b.cf);
            }
        }
        ab() {
            if (null != this.g) {
                let a = this.b.ag ? "flex" : "none";
                this.h.setStyleProperty("display", a);
            }
        }
        z(a = true) {
            let b = this.c;
            this.c = true;
            let c = this.a.u;
            this.a.u = a;
            try {
                if (this.b.ae) {
                    this.a.indeterminate = true;
                    return;
                }
                this.a.indeterminate = false;
                if (this.b.p == 0) {
                    this.a.checked = this.b.g.count == 0;
                }
                else {
                    this.a.checked = this.b.g.count != 0;
                }
            }
            finally {
                this.a.u = c;
                this.c = b;
            }
        }
        p(a, b) {
            if (this.c || b.isIndeterminate) {
                return;
            }
            if (b.isChecked) {
                this.b.b5();
                this.b.bw(b.isChecked);
            }
            else {
                this.b.bh();
                this.b.bw(b.isChecked);
            }
        }
        x() {
            let a = this.e;
            if (null == a) {
                return;
            }
            let b = a.rootWrapper;
            if (null != b) {
                NativeUI.n(b, this.b.cl);
                NativeUI.j(b, this.b.cg);
            }
        }
        w(a) {
            if (this.f != null) {
                NativeUI.s(this.f, a);
            }
        }
        n(a) {
            this.f = a;
        }
    }
    CheckboxListView.$t = /*@__PURE__*/ markType(CheckboxListView, 'CheckboxListView');
    return CheckboxListView;
})();
/**
 * @hidden
 */
let CheckboxList = /*@__PURE__*/ (() => {
    class CheckboxList extends Base {
        constructor() {
            super();
            this.q = null;
            this.h = null;
            this.i = null;
            this.x = null;
            this.d = null;
            this.aa = false;
            this.c = null;
            this.s = null;
            this.t = null;
            this.ab = false;
            this.f = new GridSelectedKeysCollection();
            this.a = null;
            this.propertyChanged = null;
            this.checkedChanged = null;
            this.ak = null;
            this.am = null;
            this.ao = null;
            this.an = null;
            this.u = 3;
            this.ah = -1;
            this.y = null;
            this.o = 1;
            this.k = 1;
            this.m = 2;
            this.a5 = "(Select All)";
            this.cd = null;
            this.cb = CheckboxList.ci;
            this.af = true;
            this.cc = CheckboxList.ch;
            this.ce = CheckboxList.ci;
            this.selectAllCheckboxChanged = null;
            this.ai = -1;
            let a = this.f;
            a.collectionChanged = delegateCombine(a.collectionChanged, runOn(this, this.by));
            this.d = new FilterFactory();
            let b = new CheckboxListView();
            b.b = this;
            this.q = b;
            this.q.l();
        }
        get e() {
            if (this.h == null) {
                return null;
            }
            return this.h.actualDataSource;
        }
        get g() {
            return this.f;
        }
        get b() {
            return this.a;
        }
        set b(a) {
            let b = this.a;
            this.a = a;
            if (b != this.a) {
                this.bu("PrimaryKey", b, this.a);
            }
        }
        by(a, b) {
            if (this.e == null || this.e.actualSchema == null || this.aa) {
                return;
            }
            switch (b.action) {
                case 0:
                    for (let c = 0; c < b.newItems.count; c++) {
                        this.bs(b.newItems.item(c));
                    }
                    break;
                case 1:
                    for (let d = 0; d < b.oldItems.count; d++) {
                        this.bt(b.oldItems.item(d));
                    }
                    break;
                case 2:
                    for (let e = 0; e < b.oldItems.count; e++) {
                        this.bt(b.oldItems.item(e));
                    }
                    for (let f = 0; f < b.newItems.count; f++) {
                        this.bs(b.newItems.item(f));
                    }
                    break;
                case 4:
                    this.q.s(this.p == 0);
                    for (let g = 0; g < this.g.ae.count; g++) {
                        this.bs(this.g.ae._inner[g]);
                    }
                    break;
            }
        }
        bs(a) {
            let b = this.e.indexOfKey(a.value);
            if (b >= 0) {
                this.q.r(b, this.p == 1);
            }
        }
        bt(a) {
            let b = this.e.indexOfKey(a.value);
            if (b >= 0) {
                this.q.r(b, this.p == 0);
            }
        }
        bq(a, b) {
            if (this.checkedChanged != null && this.ab == false) {
                this.checkedChanged(this, ((() => {
                    let $ret = new CheckedChangedEventArgs();
                    $ret.b = a;
                    $ret.a = b;
                    return $ret;
                })()));
            }
        }
        notifySizeChanged() {
            this.q.j();
        }
        destroy() {
            if (this.h != null) {
                let a = this.h;
                a.cellClicked = delegateRemove(a.cellClicked, runOn(this, this.bj));
            }
            if (this.s != null) {
                let b = this.s;
                b.change = delegateRemove(b.change, runOn(this, this.bk));
            }
            this.provideContainer(null, null, null);
            if (this.i != null) {
                let c = this.i;
                c.cellUpdating = delegateRemove(c.cellUpdating, runOn(this, this.bg));
            }
        }
        provideContainer(a, b, c) {
            this.h = b;
            if (null != this.h) {
                this.h.k6 = 0;
                this.h.lg = 0;
                this.h.g3 = false;
                this.h.ch = 0;
                this.h.cf = 0;
                let d = this.h;
                d.cellClicked = delegateCombine(d.cellClicked, runOn(this, this.bj));
                if (this.ak != null) {
                    this.h.itemsSource = this.ak;
                    this.bf();
                    this.bx();
                }
                if (this.am != null) {
                    this.bx();
                    this.b8();
                }
            }
            this.q.o(c);
            this.q.k(a);
        }
        provideSelectAllSection(a) {
            this.q.o(a);
        }
        bj(a, b) {
            if (b.cellInfo.k.az == 0) {
                return;
            }
            let c = b.cellInfo.k.w;
            if (-1 == c) {
                return;
            }
            let d = this.j(b.cellInfo.gp);
            if (this.g.contains(d)) {
                this.g.remove(d);
            }
            else {
                this.g.add(d);
            }
        }
        bg(a, b) {
            let c = b.cellInfo.k.w;
            if (-1 == c) {
                return;
            }
            let d = false;
            if (b.cellInfo.gp != null) {
                let e = this.j(b.cellInfo.gp);
                if (this.g.contains(e)) {
                    d = true;
                }
            }
            this.q.m(b.content.element, c, d);
        }
        br(a) {
            if (this.am != null) {
                let b = this.d.property(this.am).cast(enumGetBox(DataSourceSchemaPropertyType_$type, 0)).toLower();
                let c = b.contains(a);
                if (!this.h.v.j.contains(this.c)) {
                    this.c = c;
                    this.h.v.add(this.c);
                }
                else {
                    let d = this.h.v.j.indexOf(this.c);
                    this.h.v.j.item(d, this.c = c);
                }
            }
        }
        get itemsSource() {
            return this.ak;
        }
        set itemsSource(a) {
            let b = this.ak;
            this.ak = a;
            if (b != this.ak) {
                this.bu("ItemsSource", b, this.ak);
            }
        }
        get at() {
            return this.am;
        }
        set at(a) {
            let b = this.am;
            this.am = a;
            if (b != this.am) {
                this.bu("DataMemberPath", b, this.am);
            }
        }
        get a9() {
            return this.ao;
        }
        set a9(a) {
            let b = this.ao;
            this.ao = a;
            if (b != this.ao) {
                this.bu("SelectedMemberPath", b, this.ao);
            }
        }
        get ax() {
            return this.an;
        }
        set ax(a) {
            let b = this.an;
            this.an = a;
            if (b != this.an) {
                this.bu("FilterPlaceholderText", b, this.an);
            }
        }
        get v() {
            return this.u;
        }
        set v(a) {
            let b = this.u;
            this.u = a;
            if (b != this.u) {
                this.bu("SearchInputType", enumGetBox(InputGroupDisplayType_$type, b), enumGetBox(InputGroupDisplayType_$type, this.u));
            }
        }
        get aj() {
            return this.ah;
        }
        set aj(a) {
            let b = this.ah;
            this.ah = a;
            if (b != this.ah) {
                this.bu("RowHeight", b, this.ah);
            }
        }
        get z() {
            return this.y;
        }
        set z(a) {
            let b = this.y;
            this.y = a;
            if (b != this.y) {
                this.bu("CellTextStyle", b, this.y);
            }
        }
        get p() {
            return this.o;
        }
        set p(a) {
            let b = this.o;
            this.o = a;
            if (b != this.o) {
                this.bu("IndexType", enumGetBox(CheckboxListIndexType_$type, b), enumGetBox(CheckboxListIndexType_$type, this.o));
            }
        }
        get l() {
            return this.k;
        }
        set l(a) {
            let b = this.k;
            this.k = a;
            if (b != this.k) {
                this.bu("BaseTheme", enumGetBox(BaseControlTheme_$type, b), enumGetBox(BaseControlTheme_$type, this.k));
            }
        }
        get n() {
            return this.m;
        }
        set n(a) {
            let b = this.m;
            this.m = a;
            if (b != this.m) {
                this.bu("Density", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, this.m));
            }
        }
        bu(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            this.bz(a, b, c);
        }
        bz(a, b, c) {
            switch (a) {
                case "ItemsSource":
                    if (this.h != null) {
                        this.p = 1;
                        if (c != null) {
                            this.h.a7.m();
                            this.h.b4.m();
                            this.h.v.clear();
                            this.h.b7.m();
                        }
                        if (this.h.actualDataSource != null) {
                            let d = this.h.actualDataSource;
                            d.schemaChanged = delegateRemove(d.schemaChanged, runOn(this, this.bv));
                        }
                        this.h.itemsSource = this.ak;
                        this.bf();
                        if (this.h.actualDataSource != null) {
                            let e = this.h.actualDataSource;
                            e.schemaChanged = delegateCombine(e.schemaChanged, runOn(this, this.bv));
                        }
                        this.ab = true;
                        this.bx();
                        this.ab = false;
                        this.q.z();
                    }
                    break;
                case "DataMemberPath":
                case "SelectedMemberPath":
                    if (this.h != null) {
                        if (this.am != null) {
                            this.bx();
                            this.b8();
                        }
                    }
                    break;
                case "PrimaryKey":
                    if (this.h != null) {
                        this.h.l = this.b;
                    }
                    break;
                case "SelectAllCaptionTextColor":
                    this.cf = null != this.cj ? this.cj : CheckboxList.ci;
                    break;
                case "SelectAllCaption":
                case "ActualSelectAllCaptionTextColor":
                    this.q.y();
                    break;
                case "showSelectAll":
                    this.q.ab();
                    this.q.q();
                    break;
                case "FilterPlaceholderText":
                    if (this.s != null) {
                        this.s.b7 = this.ax;
                    }
                    break;
                case "SearchInputType":
                    if (this.t != null) {
                        this.t.k = this.v;
                    }
                    break;
                case "RowHeight":
                    if (this.h != null) {
                        this.h.le = this.aj;
                    }
                    break;
                case "CellTextStyle":
                    if (this.h != null) {
                        this.h.fp = this.z;
                    }
                    break;
                case "BackgroundColor":
                case "TextColor":
                    let f = this.h;
                    if (null != f) {
                        f.uu = this.cl;
                        f.us = this.cg;
                    }
                    this.q.x();
                    break;
                case "BaseTheme":
                    this.b7();
                    break;
                case "Density":
                    this.b6();
                    break;
            }
        }
        b6() {
            if (this.h != null) {
                this.h.fg = this.n;
            }
            if (this.t != null) {
                this.t.h = this.n;
            }
            this.q.u();
        }
        b7() {
            if (this.t != null) {
                this.t.d = this.l;
            }
            this.q.v();
        }
        bv(a, b) {
            this.ab = true;
            this.bf();
            if (b.schema != null) {
                this.bx();
                for (let c = 0; c < this.g.count; c++) {
                    this.bs(this.g._inner[c]);
                }
                this.q.z();
            }
            this.ab = false;
        }
        bx() {
            if (this.x == null && this.ao != null && this.ao != "") {
                this.x = new FastReflectionHelper(false, this.ao);
            }
            if (this.ak != null && this.x != null && this.h.actualDataSource.actualSchema != null) {
                this.x.propertyName = this.ao;
                let a = this.h.actualDataSource.actualCount;
                for (let b = 0; b < a; b++) {
                    let c = this.h.actualDataSource.getItemAtIndex(b);
                    let d = this.x.getPropertyValue(c);
                    if (d == true) {
                        let e = this.j(c);
                        if (!this.g.contains(e)) {
                            this.g.add(e);
                        }
                    }
                }
            }
        }
        b8() {
            this.h.actualColumns.clear();
            this.h.l = this.b;
            this.h.hu = false;
            this.h.le = this.aj;
            this.h.us = this.cg;
            this.h.ut = this.cg;
            this.h.fg = this.n;
            this.h.vx = new Thickness(0, 0);
            if (this.z != null) {
                this.h.fp = this.z;
            }
            let a = new TemplateColumn();
            if (this.ao == null) {
                this.ao = "";
            }
            a.hy = this.ao;
            a.id = "CheckboxColumn";
            let b = new ColumnWidth();
            b.f = 28;
            a.width = b;
            a.gy = 0;
            a.gz = 0;
            a.cellUpdating = delegateCombine(a.cellUpdating, runOn(this, this.bg));
            this.h.columns.add(a);
            this.i = a;
            let c = this.h.actualDataSource.resolveSchemaPropertyType(this.am);
            let d;
            switch (c) {
                case 8:
                case 9:
                    d = new DateTimeColumn();
                    break;
                case 1:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 10:
                    d = new NumericColumn();
                    break;
                case 2:
                case 11:
                case 0:
                default:
                    d = new TextColumn();
                    break;
            }
            d.hy = this.am;
            d.id = "DataColumn";
            d.gy = 0;
            d.e = 0;
            this.h.columns.add(d);
        }
        updateHrMargin(a) {
            this.q.w(a);
        }
        provideHrElement(a) {
            this.q.n(a);
        }
        b9(a) {
            let b = a.rootWrapper.getChildAt(0);
            b.setStyleProperty("display", "flex");
            this.t = new InputGroup();
            let c = a.getSubRenderer(b);
            this.t.provideContainer(c);
            this.t.k = this.v;
            this.t.d = this.l;
            this.t.h = this.n;
            let d = a.createElement("div");
            let e = a.getSubRenderer(d);
            let f = new Prefix();
            f.provideContainer(e);
            let g = a.createElement("div");
            let h = a.getSubRenderer(g);
            let i = new Icon();
            i.provideContainer(h);
            i.fill = CheckboxList.ck;
            i.svgPath = CheckboxList.a4;
            f.appendContentChild(g);
            this.t.appendContentChild(d);
            this.t.inputs.add(f);
            let j = a.createElement("div");
            let k = a.getSubRenderer(j);
            this.s = new Input();
            this.s.provideContainer(k);
            this.s.b0 = "text";
            if (this.ax != null) {
                this.s.b7 = this.ax;
            }
            let l = this.s;
            l.changing = delegateCombine(l.changing, runOn(this, this.bk));
            this.t.appendContentChild(j);
            this.t.inputs.add(this.s);
        }
        bk(a, b) {
            let c = b.value.toLowerCase();
            this.br(c);
        }
        j(a) {
            if (this.b == null) {
                return PrimaryKeyValue.createIdentityKey(a);
            }
            let b = new Array(this.b.length);
            let c = new Array(this.b.length);
            for (let d = 0; d < b.length; d++) {
                b[d] = this.b[d];
                c[d] = this.e.getItemProperty(a, b[d]);
            }
            return new PrimaryKeyValue(b, c);
        }
        b3(a) {
            this.aa = true;
            let b = this.e.getItemAtIndex(a);
            let c = this.j(b);
            this.g.remove(c);
            this.aa = false;
        }
        bd(a) {
            this.aa = true;
            let b = this.e.getItemAtIndex(a);
            let c = this.j(b);
            this.g.add(c);
            this.aa = false;
        }
        b5() {
            this.p = 0;
            this.g.clear();
            this.bl();
            this.q.z();
        }
        bh() {
            this.p = 1;
            this.g.clear();
            this.bl();
            this.q.z();
        }
        bo(a, b, c) {
            if (this.h != null) {
                this.h.qp(a, b, c);
            }
        }
        bl() {
            if (this.h != null) {
                this.h.qj();
            }
        }
        bm(a, b) {
            if (this.h != null) {
                this.h.ql(a, b);
            }
            ;
        }
        bn(a, b) {
            if (this.h != null) {
                this.h.qm(a, b);
            }
            ;
        }
        be(a) {
            let b = null;
            if (this.b == null || this.b.length == 0) {
                b = new PrimaryKeyValue(null, a);
            }
            else if (this.b.length == a.length) {
                b = new PrimaryKeyValue(this.b, a);
            }
            else {
                throw new ArgumentException(1, "value length must match PrimaryKey length");
            }
            if (b != null) {
                this.g.add(b);
            }
        }
        b4(a) {
            let b = null;
            if (this.b == null || this.b.length == 0) {
                b = new PrimaryKeyValue(null, a);
            }
            else if (this.b.length == a.length) {
                b = new PrimaryKeyValue(this.b, a);
            }
            else {
                throw new ArgumentException(1, "value length must match PrimaryKey length");
            }
            if (this.g.contains(b)) {
                this.g.remove(b);
            }
        }
        get a6() {
            return this.a5;
        }
        set a6(a) {
            if (a == this.a5) {
                return;
            }
            let b = this.a5;
            this.a5 = a;
            this.bu("SelectAllCaption", b, this.a5);
        }
        get cj() {
            return this.cd;
        }
        set cj(a) {
            let b = this.cd;
            this.cd = a;
            if (b != this.cd) {
                this.bu("SelectAllCaptionTextColor", b, a);
            }
        }
        get cf() {
            return this.cb;
        }
        set cf(a) {
            let b = this.cb;
            this.cb = a;
            if (b != this.cb) {
                this.bu("ActualSelectAllCaptionTextColor", b, a);
            }
        }
        get ae() {
            if (-1 == this.ai) {
                return false;
            }
            let a = this.g.count;
            if (0 == a) {
                return false;
            }
            if (a == this.ai) {
                return false;
            }
            return true;
        }
        get ag() {
            return this.af;
        }
        set ag(a) {
            if (a == this.af) {
                return;
            }
            let b = this.af;
            this.af = a;
            this.bu("showSelectAll", b, this.af);
        }
        get cg() {
            return this.cc;
        }
        set cg(a) {
            let b = this.cc;
            this.cc = a;
            if (b != this.cc) {
                this.bu("BackgroundColor", b, a);
            }
        }
        get cl() {
            return this.ce;
        }
        set cl(a) {
            let b = this.ce;
            this.ce = a;
            if (b != this.ce) {
                this.bu("TextColor", b, a);
            }
        }
        bw(a) {
            if (this.selectAllCheckboxChanged != null) {
                this.selectAllCheckboxChanged(this, ((() => {
                    let $ret = new SelectAllCheckboxChangedEventArgs();
                    $ret.a = a;
                    return $ret;
                })()));
            }
        }
        ad() {
            if (-1 == this.ai) {
                return true;
            }
            let a = this.g.count;
            switch (this.p) {
                case 0: return this.ai == a;
                case 1: return 0 == a;
                default: return false;
            }
        }
        ac() {
            if (-1 == this.ai) {
                return false;
            }
            let a = this.g.count;
            switch (this.p) {
                case 0: return 0 == a;
                case 1: return this.ai == a;
                default: return false;
            }
        }
        bf() {
            let a = this.h.actualDataSource;
            if (null != a) {
                if (null == a.actualSchema) {
                    this.ai = -1;
                    return;
                }
                let b = a.actualCount;
                this.ai = b;
            }
            else {
                this.ai = -1;
            }
        }
    }
    CheckboxList.$t = /*@__PURE__*/ markType(CheckboxList, 'CheckboxList', Base.$, [INotifyPropertyChanged_$type]);
    CheckboxList.ck = /*@__PURE__*/ BrushUtil.g(255, 24, 29, 31);
    CheckboxList.a4 = "M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z";
    CheckboxList.ch = /*@__PURE__*/ BrushUtil.g(255, 248, 248, 248);
    CheckboxList.ci = /*@__PURE__*/ BrushUtil.g(255, 24, 29, 31);
    return CheckboxList;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/**
 * Represents info about the current cell.
*/
class IgrCellInfo {
    constructor() {
        this._onChanged = [];
        this._changed = false;
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    createImplementation() {
        return null;
    }
    get i() {
        return this._implementation;
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    onImplementationCreated() {
    }
    addOnChangedListener(listener) {
        if (this._onChanged.length == 0) {
            this.i.propertyChanged = delegateCombine(this.i.propertyChanged, runOn(this, this._implementation_propertyChanged));
            this.i.cellReconciling = delegateCombine(this.i.cellReconciling, runOn(this, this._implementation_cellReconciling));
        }
        this._onChanged.push(listener);
    }
    removeOnChangedListener(listener) {
        let ind = this._onChanged.indexOf(listener);
        if (ind < 0) {
            return;
        }
        this._onChanged.splice(ind, 1);
        if (this._onChanged.length == 0) {
            this.i.propertyChanged = delegateRemove(this.i.propertyChanged, runOn(this, this._implementation_propertyChanged));
            this.i.cellReconciling = delegateRemove(this.i.cellReconciling, runOn(this, this._implementation_cellReconciling));
        }
    }
    _implementation_propertyChanged(sender, args) {
        this._changed = true;
    }
    _implementation_cellReconciling(model) {
        if (this._changed && this._onChanged !== null && this._onChanged.length > 0) {
            this._changed = false;
            for (let i = 0; i < this._onChanged.length; i++) {
                this._onChanged[i]();
            }
        }
        this._changed = false;
    }
    get resolvedTextAlign() {
        switch (this.horizontalAlignment) {
            case CellContentHorizontalAlignment.Center:
                return "center";
            case CellContentHorizontalAlignment.Left:
                return "left";
            case CellContentHorizontalAlignment.Right:
                return "right";
            case CellContentHorizontalAlignment.Stretch:
                return "center";
        }
        return "left";
    }
    get resolvedContentOpacity() {
        let virtualPercent = Math.min(1.0, Math.max(0.0, this.virtualizationPercentage));
        let opacity = this.contentOpacity * (1.0 - virtualPercent);
        return opacity;
    }
    /**
 * Gets the style key of the current cell, used for recycling.
*/
    get styleKey() {
        return this.i.i0;
    }
    set styleKey(v) {
        this.i.i0 = v;
    }
    /**
     * Gets the absolute data row for the current cell.
    */
    get dataRow() {
        return this.i.ej;
    }
    set dataRow(v) {
        this.i.ej = +v;
    }
    /**
     * Gets if the position of the cell is dirty.
    */
    get isPositionDirty() {
        return this.i.a5;
    }
    set isPositionDirty(v) {
        this.i.a5 = ensureBool(v);
    }
    /**
     * Gets if the size of the cell is dirty.
    */
    get isSizeDirty() {
        return this.i.ba;
    }
    set isSizeDirty(v) {
        this.i.ba = ensureBool(v);
    }
    /**
     * Gets if the content of the cell is dirty.
    */
    get isContentDirty() {
        return this.i.as;
    }
    set isContentDirty(v) {
        this.i.as = ensureBool(v);
    }
    /**
     * Gets if the content of the cell is dirty.
    */
    get isBorderDirty() {
        return this.i.aq;
    }
    set isBorderDirty(v) {
        this.i.aq = ensureBool(v);
    }
    /**
     * Gets if the layer of the cell is dirty.
    */
    get isLayerDirty() {
        return this.i.a3;
    }
    set isLayerDirty(v) {
        this.i.a3 = ensureBool(v);
    }
    /**
     * Gets if the layer of the cell is dirty.
    */
    get isStateDirty() {
        return this.i.bb;
    }
    set isStateDirty(v) {
        this.i.bb = ensureBool(v);
    }
    /**
     * Gets if the data of the cell is dirty.
    */
    get isDataDirty() {
        return this.i.au;
    }
    set isDataDirty(v) {
        this.i.au = ensureBool(v);
    }
    /**
     * Gets if placeholder content is needed when virtualized.
    */
    get isPlaceholdContentNeeded() {
        return this.i.a4;
    }
    set isPlaceholdContentNeeded(v) {
        this.i.a4 = ensureBool(v);
    }
    /**
     * Gets the action manager to propagate actions back to the grid.
    */
    get actionManager() {
        return this.i.c;
    }
    set actionManager(v) {
        this.i.c = v;
    }
    /**
     * Gets if this cell belongs to a row that has been marked as pinned.
    */
    get isRowPinned() {
        return this.i.a6;
    }
    set isRowPinned(v) {
        this.i.a6 = ensureBool(v);
    }
    /**
     * Gets if this cell belongs to a row that will stick to the top of the grid.
    */
    get isRowSticky() {
        return this.i.a7;
    }
    set isRowSticky(v) {
        this.i.a7 = ensureBool(v);
    }
    /**
     * Gets if this cell is the last row that can stick to the top of the grid.
    */
    get isLastStickyRow() {
        return this.i.a2;
    }
    set isLastStickyRow(v) {
        this.i.a2 = ensureBool(v);
    }
    /**
     * Gets the indent level of the cell.
    */
    get indent() {
        return this.i.e5;
    }
    set indent(v) {
        this.i.e5 = +v;
    }
    get rowItem() {
        return this.i.gp;
    }
    set rowItem(v) {
        this.i.gp = v;
    }
    /**
     * Gets the X position of the cell within the content.
    */
    get x() {
        return this.i.cc;
    }
    set x(v) {
        this.i.cc = +v;
    }
    /**
     * Gets the Y position of the cell within the content.
    */
    get y() {
        return this.i.cd;
    }
    set y(v) {
        this.i.cd = +v;
    }
    /**
     * Gets the pixel snapped X position of the cell within the content.
    */
    get snappedX() {
        return this.i.f2;
    }
    set snappedX(v) {
        this.i.f2 = +v;
    }
    /**
     * Gets the snapped Y position of the cell within the content.
    */
    get snappedY() {
        return this.i.f4;
    }
    set snappedY(v) {
        this.i.f4 = +v;
    }
    /**
     * Gets or sets the opacity for cells that have unsaved edits.
    */
    get editOpacity() {
        return this.i.b2;
    }
    set editOpacity(v) {
        this.i.b2 = +v;
    }
    /**
     * Gets or sets the opacity of the content of the cell.
    */
    get contentOpacity() {
        return this.i.b1;
    }
    set contentOpacity(v) {
        this.i.b1 = +v;
    }
    /**
     * Gets the actual content opacity of the cell.
    */
    get actualContentOpacity() {
        return this.i.bz;
    }
    set actualContentOpacity(v) {
        this.i.bz = +v;
    }
    /**
     * Gets or sets the opacity of the cell.
    */
    get opacity() {
        return this.i.b6;
    }
    set opacity(v) {
        this.i.b6 = +v;
    }
    /**
     * Gets the actual opacity of the cell.
    */
    get actualOpacity() {
        return this.i.b0;
    }
    set actualOpacity(v) {
        this.i.b0 = +v;
    }
    /**
     * Gets the height of the cell.
    */
    get height() {
        return this.i.e0;
    }
    set height(v) {
        this.i.e0 = +v;
    }
    /**
     * Gets the width of the cell.
    */
    get width() {
        return this.i.gf;
    }
    set width(v) {
        this.i.gf = +v;
    }
    /**
     * Gets if the cell is selected.
    */
    get isSelected() {
        return this.i.a9;
    }
    set isSelected(v) {
        this.i.a9 = ensureBool(v);
    }
    /**
     * Gets the amount that the cell is selected. This is a value between 0 and 1.
    */
    get selectedStatus() {
        return this.i.b8;
    }
    set selectedStatus(v) {
        this.i.b8 = +v;
    }
    /**
     * Gets the amount that the cell is activated. This is a value between 0 and 1.
    */
    get activationStatus() {
        return this.i.by;
    }
    set activationStatus(v) {
        this.i.by = +v;
    }
    /**
     * Gets the amount that the cell is hovered. This is a value between 0 and 1.
    */
    get hoverStatus() {
        return this.i.b3;
    }
    set hoverStatus(v) {
        this.i.b3 = +v;
    }
    /**
     * Gets or sets the horiztonal alignment of the cell content.
    */
    get horizontalAlignment() {
        return this.i.f;
    }
    set horizontalAlignment(v) {
        this.i.f = ensureEnum(CellContentHorizontalAlignment_$type, v);
    }
    /**
     * Gets or sets the vertical alignment of the cell content.
    */
    get verticalAlignment() {
        return this.i.h;
    }
    set verticalAlignment(v) {
        this.i.h = ensureEnum(CellContentVerticalAlignment_$type, v);
    }
    /**
     * Gets or sets the background color of the cell.
    */
    get background() {
        return brushToString(this.i.ke);
    }
    set background(v) {
        this.i.ke = stringToBrush(v);
    }
    /**
     * Gets or sets the border color of the cell.
    */
    get border() {
        return brushToString(this.i.kf);
    }
    set border(v) {
        this.i.kf = stringToBrush(v);
    }
    /**
     * Gets the actual background color of the cell
    */
    get actualBackground() {
        return brushToString(this.i.kb);
    }
    set actualBackground(v) {
        this.i.kb = stringToBrush(v);
    }
    /**
     * Gets the actual background color of the cell
    */
    get actualBorder() {
        return brushToString(this.i.kc);
    }
    set actualBorder(v) {
        this.i.kc = stringToBrush(v);
    }
    /**
     * Gets the actual background color of the cell
    */
    get activationBorder() {
        return brushToString(this.i.ka);
    }
    set activationBorder(v) {
        this.i.ka = stringToBrush(v);
    }
    /**
     * Gets or sets the error border color of the cell.
    */
    get errorBorder() {
        return brushToString(this.i.kh);
    }
    set errorBorder(v) {
        this.i.kh = stringToBrush(v);
    }
    /**
     * Gets or sets the selected background color of the cell.
    */
    get selectedBackground() {
        return brushToString(this.i.km);
    }
    set selectedBackground(v) {
        this.i.km = stringToBrush(v);
    }
    /**
     * Gets or sets the hover background color of the cell.
    */
    get hoverBackground() {
        return brushToString(this.i.kj);
    }
    set hoverBackground(v) {
        this.i.kj = stringToBrush(v);
    }
    /**
     * Gets or sets the color for the sort indicator icon.
    */
    get sortIndicatorColor() {
        return brushToString(this.i.kn);
    }
    set sortIndicatorColor(v) {
        this.i.kn = stringToBrush(v);
    }
    /**
     * Gets or sets the background color for the cell when it is stuck to the top of the grid as a pinned row.
    */
    get stickyRowBackground() {
        return brushToString(this.i.ko);
    }
    set stickyRowBackground(v) {
        this.i.ko = stringToBrush(v);
    }
    /**
     * Gets or sets the background color for the cell that has been marked as pinned.
    */
    get pinnedRowBackground() {
        return brushToString(this.i.kl);
    }
    set pinnedRowBackground(v) {
        this.i.kl = stringToBrush(v);
    }
    /**
     * Gets or sets the color for the last row in the sticky row area.
    */
    get lastStickyRowBackground() {
        return brushToString(this.i.kk);
    }
    set lastStickyRowBackground(v) {
        this.i.kk = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for displaying text.
    */
    get pinnedRowOpacity() {
        return this.i.b7;
    }
    set pinnedRowOpacity(v) {
        this.i.b7 = +v;
    }
    /**
     * Gets or sets the original value for the cell, before processing.
    */
    get originalValue() {
        return this.i.go;
    }
    set originalValue(v) {
        this.i.go = v;
    }
    /**
     * Gets or sets the text value, if any, which was rendered by a text cell.
    */
    get renderValue() {
        return this.i.ip;
    }
    set renderValue(v) {
        this.i.ip = v;
    }
    /**
     * Gets or sets the color of the text for the cell, if any.
    */
    get textColor() {
        return brushToString(this.i.kp);
    }
    set textColor(v) {
        this.i.kp = stringToBrush(v);
    }
    /**
     * Gets the actual color of the text for the cell, if any.
    */
    get actualTextColor() {
        return brushToString(this.i.kd);
    }
    set actualTextColor(v) {
        this.i.kd = stringToBrush(v);
    }
    /**
     * Gets or sets the text color for cells in deleted rows.
    */
    get deletedTextColor() {
        return brushToString(this.i.kg);
    }
    set deletedTextColor(v) {
        this.i.kg = stringToBrush(v);
    }
    get font() {
        if (this.i.af == null) {
            return null;
        }
        return this.i.af.fontString;
    }
    set font(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.af = fi;
    }
    get actualFont() {
        if (this.i.ad == null) {
            return null;
        }
        return this.i.ad.fontString;
    }
    set actualFont(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.ad = fi;
    }
    /**
     * Gets or sets the line break mode to use if text is present in the cell.
    */
    get lineBreakMode() {
        return this.i.z;
    }
    set lineBreakMode(v) {
        this.i.z = ensureEnum(TextCellLineBreakMode_$type, v);
    }
    /**
     * Gets or sets the virtualization percentage value. This is between 0 an 1, and indicates how virtual the content is at present.
    */
    get virtualizationPercentage() {
        return this.i.cb;
    }
    set virtualizationPercentage(v) {
        this.i.cb = +v;
    }
    /**
     * Gets or sets the left padding to use for the content.
    */
    get paddingLeft() {
        return this.i.fo;
    }
    set paddingLeft(v) {
        this.i.fo = +v;
    }
    /**
     * Gets or sets the top padding to use for the content.
    */
    get paddingTop() {
        return this.i.fs;
    }
    set paddingTop(v) {
        this.i.fs = +v;
    }
    /**
     * Gets or sets the right padding to use for the content.
    */
    get paddingRight() {
        return this.i.fq;
    }
    set paddingRight(v) {
        this.i.fq = +v;
    }
    /**
     * Gets or sets the bottom padding to use for the content.
    */
    get paddingBottom() {
        return this.i.fm;
    }
    set paddingBottom(v) {
        this.i.fm = +v;
    }
    /**
     * Gets or sets the left padding to use for the content.
    */
    get actualPaddingLeft() {
        return this.i.d1;
    }
    set actualPaddingLeft(v) {
        this.i.d1 = +v;
    }
    /**
     * Gets or sets the top padding to use for the content.
    */
    get actualPaddingTop() {
        return this.i.d5;
    }
    set actualPaddingTop(v) {
        this.i.d5 = +v;
    }
    /**
     * Gets or sets the right padding to use for the content.
    */
    get actualPaddingRight() {
        return this.i.d3;
    }
    set actualPaddingRight(v) {
        this.i.d3 = +v;
    }
    /**
     * Gets or sets the bottom padding to use for the content.
    */
    get actualPaddingBottom() {
        return this.i.dz;
    }
    set actualPaddingBottom(v) {
        this.i.dz = +v;
    }
    /**
     * Gets or sets the left border to use for the content.
    */
    get borderLeftWidth() {
        return this.i.eb;
    }
    set borderLeftWidth(v) {
        this.i.eb = +v;
    }
    /**
     * Gets or sets the top border to use for the content.
    */
    get borderTopWidth() {
        return this.i.eg;
    }
    set borderTopWidth(v) {
        this.i.eg = +v;
    }
    /**
     * Gets or sets the right border to use for the content.
    */
    get borderRightWidth() {
        return this.i.ee;
    }
    set borderRightWidth(v) {
        this.i.ee = +v;
    }
    /**
     * Gets or sets the bottom border to use for the content.
    */
    get borderBottomWidth() {
        return this.i.d9;
    }
    set borderBottomWidth(v) {
        this.i.d9 = +v;
    }
    /**
     * Gets or sets the left activation border to use for the content.
    */
    get activationBorderLeftWidth() {
        return this.i.dd;
    }
    set activationBorderLeftWidth(v) {
        this.i.dd = +v;
    }
    /**
     * Gets or sets the top activation border to use for the content.
    */
    get activationBorderTopWidth() {
        return this.i.di;
    }
    set activationBorderTopWidth(v) {
        this.i.di = +v;
    }
    /**
     * Gets or sets the right activation border to use for the content.
    */
    get activationBorderRightWidth() {
        return this.i.dg;
    }
    set activationBorderRightWidth(v) {
        this.i.dg = +v;
    }
    /**
     * Gets or sets the bottom activation border to use for the content.
    */
    get activationBorderBottomWidth() {
        return this.i.db;
    }
    set activationBorderBottomWidth(v) {
        this.i.db = +v;
    }
    /**
     * Gets or sets the left error border to use for the content.
    */
    get errorBorderLeftWidth() {
        return this.i.er;
    }
    set errorBorderLeftWidth(v) {
        this.i.er = +v;
    }
    /**
     * Gets or sets the top error border to use for the content.
    */
    get errorBorderTopWidth() {
        return this.i.ew;
    }
    set errorBorderTopWidth(v) {
        this.i.ew = +v;
    }
    /**
     * Gets or sets the right error border to use for the content.
    */
    get errorBorderRightWidth() {
        return this.i.eu;
    }
    set errorBorderRightWidth(v) {
        this.i.eu = +v;
    }
    /**
     * Gets or sets the bottom error border to use for the content.
    */
    get errorBorderBottomWidth() {
        return this.i.ep;
    }
    set errorBorderBottomWidth(v) {
        this.i.ep = +v;
    }
    /**
     * Gets or sets the actual left border to use for the content.
    */
    get actualBorderLeftWidth() {
        return this.i.dp;
    }
    set actualBorderLeftWidth(v) {
        this.i.dp = +v;
    }
    /**
     * Gets or sets the actual top border to use for the content.
    */
    get actualBorderTopWidth() {
        return this.i.du;
    }
    set actualBorderTopWidth(v) {
        this.i.du = +v;
    }
    /**
     * Gets or sets the actual right border to use for the content.
    */
    get actualBorderRightWidth() {
        return this.i.ds;
    }
    set actualBorderRightWidth(v) {
        this.i.ds = +v;
    }
    /**
     * Gets or sets the actual bottom border to use for the content.
    */
    get actualBorderBottomWidth() {
        return this.i.dm;
    }
    set actualBorderBottomWidth(v) {
        this.i.dm = +v;
    }
    /**
     * Gets the current sort direction for the column containing the cell.
    */
    get sortDirection() {
        return this.i.m;
    }
    set sortDirection(v) {
        this.i.m = ensureEnum(ColumnSortDirection_$type, v);
    }
    /**
     * Gets the expansion state of the cell.
    */
    get isExpanded() {
        return this.i.az;
    }
    set isExpanded(v) {
        this.i.az = ensureBool(v);
    }
    /**
     * Gets if the cell needs to display an expansion indicator.
    */
    get isCollapsable() {
        return this.i.ar;
    }
    set isCollapsable(v) {
        this.i.ar = ensureBool(v);
    }
    /**
     * Gets the fixed column position of this cell.
    */
    get pinned() {
        return this.i.x;
    }
    set pinned(v) {
        this.i.x = ensureEnum(PinnedPositions_$type, v);
    }
    get editFont() {
        if (this.i.ae == null) {
            return null;
        }
        return this.i.ae.fontString;
    }
    set editFont(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.ae = fi;
    }
    /**
     * Gets whether the cell has been edited.
    */
    get isEdited() {
        return this.i.ay;
    }
    set isEdited(v) {
        this.i.ay = ensureBool(v);
    }
    /**
     * Gets whether the cell is part of a deleted row.
    */
    get isDeleted() {
        return this.i.av;
    }
    set isDeleted(v) {
        this.i.av = ensureBool(v);
    }
    /**
     * Gets or sets the error message for the cell.
    */
    get editError() {
        return this.i.hl;
    }
    set editError(v) {
        this.i.hl = v;
    }
    /**
     * Gets whether the cell is in edit mode.
    */
    get isInEditMode() {
        return this.i.a1;
    }
    set isInEditMode(v) {
        this.i.a1 = ensureBool(v);
    }
    get editID() {
        return this.i.en;
    }
    set editID(v) {
        this.i.en = +v;
    }
    findByName(name) {
        return null;
    }
    isCustomFieldDirty(propertyName) {
        let iv = this.i.at(propertyName);
        return (iv);
    }
    /**
     * Gets if a named property is dirty.
    
    * @param propertyId  * The property id to check.
    */
    isDirtyById(propertyId_) {
        let iv = this.i.ax(propertyId_);
        return (iv);
    }
    /**
     * Gets if a named property is dirty.
    
    * @param propertyName  * The property name to check.
    */
    isDirty(propertyName) {
        let iv = this.i.aw(propertyName);
        return (iv);
    }
    setNamedValue(valueName, value) {
        this.i.jt(valueName, value);
    }
    /**
     * Returns if there is a named value stored for the cell.
    
    * @param valueName  * The name of the value to check.
    */
    hasNamedValue(valueName) {
        let iv = this.i.ap(valueName);
        return (iv);
    }
    /**
     * Removes a named value from the cell.
    
    * @param valueName  * The name of the value to remove.
    */
    removeNamedValue(valueName) {
        this.i.jq(valueName);
    }
    /**
     * Gets a named value from the cell.
    
    * @param valueName  * The name of the value to get.
    */
    getNamedValue(valueName) {
        let iv = this.i.gm(valueName);
        return (iv);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/**
 * Backing information about a date time cell for the grid.
*/
class IgrDateTimeCellInfo extends IgrCellInfo {
    createImplementation() {
        return new DateTimeCellModel();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor() {
        super();
    }
    /**
     * Sets or gets the DateTime value for the cell.
    */
    get dateTimeValue() {
        return this.i.k0;
    }
    set dateTimeValue(v) {
        this.i.k0 = v;
    }
    /**
     * The format string to apply to the value
    */
    get formatStringOverride() {
        return this.i.lh;
    }
    set formatStringOverride(v) {
        this.i.lh = v;
    }
    get formatSpecifiers() {
        return this.i.kr;
    }
    set formatSpecifiers(v) {
        this.i.kr = v;
    }
    /**
     * The format options to apply to the value
    */
    get formatOverride() {
        return this.i.la;
    }
    set formatOverride(v) {
        this.i.la = v;
    }
    /**
     * Sets or gets the simple DateTimeFormat to use for the cell.
    */
    get dateTimeFormat() {
        return this.i.kw;
    }
    set dateTimeFormat(v) {
        this.i.kw = ensureEnum(DateTimeFormats_$type, v);
    }
    /**
     * Sets or gets whether the value to use is a DateTimeOffset value.
    */
    get isOffsetValue() {
        return this.i.ky;
    }
    set isOffsetValue(v) {
        this.i.ky = ensureBool(v);
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.formatSpecifiers != null && arrayFindByName(this.formatSpecifiers, name)) {
            return arrayFindByName(this.formatSpecifiers, name);
        }
        return null;
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/**
 * Backing information for an image cell in the grid.
*/
class IgrImageCellInfo extends IgrCellInfo {
    createImplementation() {
        return new ImageCellModel();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor() {
        super();
    }
    /**
     * Sets or gets the resource path to use to get the image for the cell.
    */
    get imagePath() {
        return this.i.ky;
    }
    set imagePath(v) {
        this.i.ky = v;
    }
    /**
     * Sets or gets the image stretching behavior for the image.
    */
    get imageStretchOption() {
        return this.i.kt;
    }
    set imageStretchOption(v) {
        this.i.kt = ensureEnum(ImageStretchOptions_$type, v);
    }
    /**
     * Sets or gets the image resource type. Indicates which type of resource should be fetched and how ImagePath should be interpreted.
    */
    get imageResourceType() {
        return this.i.kr;
    }
    set imageResourceType(v) {
        this.i.kr = ensureEnum(ImageResourceType_$type, v);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/**
 * Backing information for a numeric cell in the grid.
*/
class IgrNumericCellInfo extends IgrCellInfo {
    createImplementation() {
        return new NumericCellModel();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor() {
        super();
    }
    /**
     * Sets or gets the numeric value to use for the cell.
    */
    get numericValue() {
        return this.i.kz;
    }
    set numericValue(v) {
        this.i.kz = +v;
    }
    /**
     * Sets or gets whether there is a decimal numeric value to use for the cell.
    */
    get hasDecimalValue() {
        return this.i.kv;
    }
    set hasDecimalValue(v) {
        this.i.kv = ensureBool(v);
    }
    /**
     * The format string to apply to the value
    */
    get formatStringOverride() {
        return this.i.lt;
    }
    set formatStringOverride(v) {
        this.i.lt = v;
    }
    get formatSpecifiers() {
        return this.i.kr;
    }
    set formatSpecifiers(v) {
        this.i.kr = v;
    }
    /**
     * The format options to apply to the value
    */
    get formatOverride() {
        return this.i.ll;
    }
    set formatOverride(v) {
        this.i.ll = v;
    }
    /**
     * Sets or gets the text prepended to a negative numeric value
    */
    get negativePrefix() {
        return this.i.lz;
    }
    set negativePrefix(v) {
        this.i.lz = v;
    }
    /**
     * Sets or gets the text prepended to a positive numeric value
    */
    get positivePrefix() {
        return this.i.l4;
    }
    set positivePrefix(v) {
        this.i.l4 = v;
    }
    /**
     * Sets or gets the text appended to a negative numeric value
    */
    get negativeSuffix() {
        return this.i.l1;
    }
    set negativeSuffix(v) {
        this.i.l1 = v;
    }
    /**
     * Sets or gets the text appended to a positive numeric value
    */
    get positiveSuffix() {
        return this.i.l6;
    }
    set positiveSuffix(v) {
        this.i.l6 = v;
    }
    /**
     * The maximum number of decimal places to display when formatting
    */
    get maxFractionDigits() {
        return this.i.k7;
    }
    set maxFractionDigits(v) {
        this.i.k7 = +v;
    }
    /**
     * The minimum number of decimal places to display when formatting
    */
    get minFractionDigits() {
        return this.i.k9;
    }
    set minFractionDigits(v) {
        this.i.k9 = +v;
    }
    /**
     * The minimum number of integer digits to display when formatting
    */
    get minIntegerDigits() {
        return this.i.lb;
    }
    set minIntegerDigits(v) {
        this.i.lb = +v;
    }
    /**
     * Sets or gets if the grouping separator is shown
    */
    get showGroupingSeparator() {
        return this.i.kx;
    }
    set showGroupingSeparator(v) {
        this.i.kx = ensureBool(v);
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.formatSpecifiers != null && arrayFindByName(this.formatSpecifiers, name)) {
            return arrayFindByName(this.formatSpecifiers, name);
        }
        return null;
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/**
 * Represents backing information for the row separators.
*/
class IgrRowSeparatorInfo extends IgrCellInfo {
    createImplementation() {
        return new RowSeparatorModel();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor() {
        super();
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/**
 * Backing information for a section header cell in the grid.
*/
class IgrSectionHeaderCellInfo extends IgrCellInfo {
    createImplementation() {
        return new SectionHeaderCellModel();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor() {
        super();
    }
    /**
     * Sets or gets the resolved text for the section header cell.
    */
    get resolvedText() {
        return this.i.k6;
    }
    set resolvedText(v) {
        this.i.k6 = v;
    }
    /**
     * Sets or gets the resolved summary text for the section header cell.
    */
    get resolvedSummaryText() {
        return this.i.k4;
    }
    set resolvedSummaryText(v) {
        this.i.k4 = v;
    }
    /**
     * Sets or gets how summaries are displayed in the section header cell.
    */
    get summaryDisplayMode() {
        return this.i.kv;
    }
    set summaryDisplayMode(v) {
        this.i.kv = ensureEnum(GroupSummaryDisplayMode_$type, v);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/**
 * Represents backing information for a template cell.
*/
class IgrTemplateCellInfo extends IgrCellInfo {
    createImplementation() {
        return new TemplateCellModel();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor() {
        super();
    }
    /**
     * Sets or gets the value to provide to the template.
    */
    get value() {
        return this.i.ks;
    }
    set value(v) {
        this.i.ks = v;
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let TemplateHeaderCellModelExport = /*@__PURE__*/ (() => {
    class TemplateHeaderCellModelExport extends CellModelExport {
        constructor() {
            super(...arguments);
            this.ae = null;
        }
        get_ac() {
            return "TemplateHeaderCell";
        }
        ad(a) {
            super.ad(a);
        }
    }
    TemplateHeaderCellModelExport.$t = /*@__PURE__*/ markType(TemplateHeaderCellModelExport, 'TemplateHeaderCellModelExport', CellModelExport.$);
    return TemplateHeaderCellModelExport;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let TemplateHeaderCellModel = /*@__PURE__*/ (() => {
    class TemplateHeaderCellModel extends TemplateCellModel {
        constructor() {
            super(...arguments);
            this.ku = false;
        }
        get kv() {
            return this.ku;
        }
        set kv(a) {
            let b = this.ku;
            this.ku = a;
            if (this.ku != b) {
                this.jm("IsFilterUIVisible", TemplateHeaderCellModel.kw, b, this.ku);
            }
        }
        ju(a, b) {
            super.ju(a, b);
            if (a == "IsFilterUIVisible") {
                this.kv = b;
            }
        }
        gn(a) {
            if (a == "IsFilterUIVisible") {
                return this.kv;
            }
            return super.gn(a);
        }
        b(a) {
            if (a == null) {
                a = new TemplateHeaderCellModelExport();
            }
            a = super.b(a);
            let b = a;
            b.ae = this.ks;
            return b;
        }
    }
    TemplateHeaderCellModel.$t = /*@__PURE__*/ markType(TemplateHeaderCellModel, 'TemplateHeaderCellModel', TemplateCellModel.$);
    TemplateHeaderCellModel.kw = /*@__PURE__*/ CellModel.ez("IsFilterUIVisible");
    return TemplateHeaderCellModel;
})();

/**
 * Backing information for the template header cells.
*/
class IgrTemplateHeaderCellInfo extends IgrTemplateCellInfo {
    createImplementation() {
        return new TemplateHeaderCellModel();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor() {
        super();
    }
    /**
     * Sets or gets whether the filter UI should be visible in the header.
    */
    get isFilterUIVisible() {
        return this.i.kv;
    }
    set isFilterUIVisible(v) {
        this.i.kv = ensureBool(v);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let TemplateSectionHeaderCellModel = /*@__PURE__*/ (() => {
    class TemplateSectionHeaderCellModel extends SectionHeaderCellModel {
    }
    TemplateSectionHeaderCellModel.$t = /*@__PURE__*/ markType(TemplateSectionHeaderCellModel, 'TemplateSectionHeaderCellModel', SectionHeaderCellModel.$);
    return TemplateSectionHeaderCellModel;
})();

/**
 * Backing information for a template section header cell in the grid.
*/
class IgrTemplateSectionHeaderCellInfo extends IgrSectionHeaderCellInfo {
    createImplementation() {
        return new TemplateSectionHeaderCellModel();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor() {
        super();
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/**
 * Backing information for a text cell in the grid.
*/
class IgrTextCellInfo extends IgrCellInfo {
    createImplementation() {
        return new TextCellModel();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor() {
        super();
    }
    /**
     * Sets or gets the text value for the cell.
    */
    get textValue() {
        return this.i.ks;
    }
    set textValue(v) {
        this.i.ks = v;
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/**
 * Backing information for a text header cell.
*/
class IgrTextHeaderCellInfo extends IgrTextCellInfo {
    createImplementation() {
        return new TextHeaderCellModel();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor() {
        super();
    }
    /**
     * Sets or gets whether the filter UI should be visible in the header.
    */
    get isColumnOptionsEnabled() {
        return this.i.k1;
    }
    set isColumnOptionsEnabled(v) {
        this.i.k1 = ensureBool(v);
    }
    get sortIndicatorStyle() {
        return this.i.kz;
    }
    set sortIndicatorStyle(v) {
        this.i.kz = ensureEnum(SortIndicatorStyle_$type, v);
    }
    /**
     * Gets or sets the alignment of the column options icon within the header cell.
    */
    get columnOptionsIconAlignment() {
        return this.i.kv;
    }
    set columnOptionsIconAlignment(v) {
        this.i.kv = ensureEnum(ColumnOptionsIconAlignment_$type, v);
    }
    /**
     * Gets or sets the color for the column options icon in the header.
    */
    get columnOptionsIconColor() {
        return brushToString(this.i.ld);
    }
    set columnOptionsIconColor(v) {
        this.i.ld = stringToBrush(v);
    }
    /**
     * Gets or sets how the column option icon will behave in the header.
    */
    get columnOptionsIconBehavior() {
        return this.i.kx;
    }
    set columnOptionsIconBehavior(v) {
        this.i.kx = ensureEnum(ColumnOptionsIconBehavior_$type, v);
    }
}

/**
 * Information about the data binding taking place.
*/
class IgrDataBindingEventArgs {
    createImplementation() {
        return new DataBindingEventArgs();
    }
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    /**
     * The backing information for the current cell.
    */
    get cellInfo() {
        if (this.i.cellInfo == null) {
            return null;
        }
        if (!this.i.cellInfo.externalObject) {
            let ext = null;
            switch (this.i.cellInfo.$type.name) {
                case "DateTimeCellModel":
                    ext = new IgrDateTimeCellInfo();
                    break;
                case "ImageCellModel":
                    ext = new IgrImageCellInfo();
                    break;
                case "NumericCellModel":
                    ext = new IgrNumericCellInfo();
                    break;
                case "RowSeparatorModel":
                    ext = new IgrRowSeparatorInfo();
                    break;
                case "SectionHeaderCellModel":
                    ext = new IgrSectionHeaderCellInfo();
                    break;
                case "TemplateCellModel":
                    ext = new IgrTemplateCellInfo();
                    break;
                case "TemplateHeaderCellModel":
                    ext = new IgrTemplateHeaderCellInfo();
                    break;
                case "TemplateSectionHeaderCellModel":
                    ext = new IgrTemplateSectionHeaderCellInfo();
                    break;
                case "TextCellModel":
                    ext = new IgrTextCellInfo();
                    break;
                case "TextHeaderCellModel":
                    ext = new IgrTextHeaderCellInfo();
                    break;
            }
            ext._implementation = this.i.cellInfo;
            this.i.cellInfo.externalObject = ext;
        }
        return this.i.cellInfo.externalObject;
    }
    /**
 * The resolved value for the cell.
*/
    get resolvedValue() {
        return this.i.resolvedValue;
    }
    set resolvedValue(v) {
        this.i.resolvedValue = v;
    }
    /**
     * The data for the row in which the cell is contained.
    */
    get rowObject() {
        return this.i.rowObject;
    }
    set rowObject(v) {
        this.i.rowObject = v;
    }
}

/**
 * Information about the style request for a cell.
*/
class IgrCellStyleRequestedEventArgs {
    createImplementation() {
        return new CellStyleRequestedEventArgs();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    /**
     * The proposed style key for the cell. Used for recycling the cell.
    */
    get styleKey() {
        return this.i.styleKey;
    }
    set styleKey(v) {
        this.i.styleKey = v;
    }
    /**
     * The resolved value for the cell.
    */
    get resolvedValue() {
        return this.i.resolvedValue;
    }
    set resolvedValue(v) {
        this.i.resolvedValue = v;
    }
    /**
     * The row number for the cell.
    */
    get rowNumber() {
        return this.i.rowNumber;
    }
    set rowNumber(v) {
        this.i.rowNumber = +v;
    }
}

/**
 * Base class for various definition types for the grid.
*/
class IgrDefinitionBase extends Component {
    constructor(props) {
        super(props);
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        this._renderer = null;
        this._dataBinding = null;
        this._dataBinding_wrapped = null;
        this._dataBound = null;
        this._dataBound_wrapped = null;
        this._cellStyleKeyRequested = null;
        this._cellStyleKeyRequested_wrapped = null;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    createImplementation() {
        return null;
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    } /**
                                 * @hidden
                                 */
    static _createFromInternal(internal) {
        if (!internal) {
            return null;
        }
        if (!internal.$type) {
            return null;
        }
        let name = internal.$type.name;
        let externalName = "Igr" + name;
        if (!TypeRegistrar.isRegistered(externalName)) {
            return null;
        }
        return TypeRegistrar.create(externalName);
    }
    componentDidMount() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    onImplementationCreated() {
    }
    get hasUserValues() {
        return this._hasUserValues;
    }
    __m(propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    }
    _styling(container, component, parent) {
        this._stylingContainer = container;
        this._stylingParent = component;
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        let grid = component._grid;
        var prev;
        if (grid) {
            prev = grid.columnPropertyUpdatingAnimationMode;
            grid.columnPropertyUpdatingAnimationMode = ColumnPropertyUpdatingAnimationMode.None;
        }
        let genericPrefix = "";
        let typeName = this.i.$type.name;
        let lowerTypeName = typeName.toLowerCase();
        if (lowerTypeName.indexOf("column") >= 0) {
            genericPrefix = "column";
        }
        else if (lowerTypeName.indexOf("sectionheader") >= 0) {
            genericPrefix = "section-header";
        }
        else if (lowerTypeName.indexOf("sectionfooter") >= 0) {
            genericPrefix = "section-footer";
        }
        else if (lowerTypeName.indexOf("rowseparator") >= 0) {
            genericPrefix = "row-separator";
        }
        else if (lowerTypeName.indexOf("summaryrowroot") >= 0) {
            genericPrefix = "summary-row-root";
        }
        else if (lowerTypeName.indexOf("summaryrowsection") >= 0) {
            genericPrefix = "summary-row-section";
        }
        else if (lowerTypeName.indexOf("headerseparator") >= 0) {
            genericPrefix = "header-separator";
        }
        else {
            genericPrefix = "header";
        }
        let additionalPrefixes = [];
        let prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        if (parent) {
            let parentTypeName = parent.i.$type.name;
            if (parentTypeName == "Grid") {
                parentTypeName = "DataGrid";
            }
            let parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (grid) {
            grid.columnPropertyUpdatingAnimationMode = prev;
        }
        this._inStyling = false;
    }
    _provideRenderer(renderer) {
        this._renderer = renderer;
    }
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    render() {
        return null;
    }
    /**
 * Gets or sets the background color to use.
*/
    get background() {
        return brushToString(this.i.d7);
    }
    set background(v) {
        this.i.d7 = stringToBrush(v);
    }
    /**
     * Gets or sets the background color to use.
    */
    get border() {
        return brushToString(this.i.d8);
    }
    set border(v) {
        this.i.d8 = stringToBrush(v);
    }
    /**
     * Gets or sets the background color to use.
    */
    get activationBorder() {
        return brushToString(this.i.dy);
    }
    set activationBorder(v) {
        this.i.dy = stringToBrush(v);
    }
    /**
     * Gets or sets the error border color to use.
    */
    get errorBorder() {
        return brushToString(this.i.d9);
    }
    set errorBorder(v) {
        this.i.d9 = stringToBrush(v);
    }
    /**
     * Gets the actual border color that will be used.
    */
    get actualBorder() {
        return brushToString(this.i.d1);
    }
    set actualBorder(v) {
        this.i.d1 = stringToBrush(v);
    }
    /**
     * Gets or sets the amount of left border to use for the cell content for this column.
    */
    get borderLeftWidth() {
        return this.i.be;
    }
    set borderLeftWidth(v) {
        this.i.be = +v;
    }
    /**
     * Gets or sets the amount of top border to use for the cell content for this column.
    */
    get borderTopWidth() {
        return this.i.bg;
    }
    set borderTopWidth(v) {
        this.i.bg = +v;
    }
    /**
     * Gets or sets the amount of right border to use for the cell content of this column.
    */
    get borderRightWidth() {
        return this.i.bf;
    }
    set borderRightWidth(v) {
        this.i.bf = +v;
    }
    /**
     * Gets or sets the amount of bottom border to use for the cell content of this column.
    */
    get borderBottomWidth() {
        return this.i.bd;
    }
    set borderBottomWidth(v) {
        this.i.bd = +v;
    }
    /**
     * Gets or sets the amount of left activation border to use for the cell content for this column.
    */
    get activationBorderLeftWidth() {
        return this.i.ba;
    }
    set activationBorderLeftWidth(v) {
        this.i.ba = +v;
    }
    /**
     * Gets or sets the amount of top activation border to use for the cell content for this column.
    */
    get activationBorderTopWidth() {
        return this.i.bc;
    }
    set activationBorderTopWidth(v) {
        this.i.bc = +v;
    }
    /**
     * Gets or sets the amount of right activation border to use for the cell content of this column.
    */
    get activationBorderRightWidth() {
        return this.i.bb;
    }
    set activationBorderRightWidth(v) {
        this.i.bb = +v;
    }
    /**
     * Gets or sets the amount of bottom activation border to use for the cell content of this column.
    */
    get activationBorderBottomWidth() {
        return this.i.a9;
    }
    set activationBorderBottomWidth(v) {
        this.i.a9 = +v;
    }
    get errorBorderLeftWidth() {
        return this.i.bi;
    }
    set errorBorderLeftWidth(v) {
        this.i.bi = +v;
    }
    get errorBorderTopWidth() {
        return this.i.bk;
    }
    set errorBorderTopWidth(v) {
        this.i.bk = +v;
    }
    get errorBorderRightWidth() {
        return this.i.bj;
    }
    set errorBorderRightWidth(v) {
        this.i.bj = +v;
    }
    get errorBorderBottomWidth() {
        return this.i.bh;
    }
    set errorBorderBottomWidth(v) {
        this.i.bh = +v;
    }
    /**
     * Gets the actual background color that will be used.
    */
    get actualBackground() {
        return brushToString(this.i.d0);
    }
    set actualBackground(v) {
        this.i.d0 = stringToBrush(v);
    }
    /**
     * Gets the actual background color that will be used.
    */
    get actualActivationBorder() {
        return brushToString(this.i.dz);
    }
    set actualActivationBorder(v) {
        this.i.dz = stringToBrush(v);
    }
    /**
     * Gets the actual error border color that will be used.
    */
    get actualErrorBorder() {
        return brushToString(this.i.d2);
    }
    set actualErrorBorder(v) {
        this.i.d2 = stringToBrush(v);
    }
    /**
     * Gets or sets the background color for content that sticks to the top of the grid.
    */
    get stickyRowBackground() {
        return brushToString(this.i.ej);
    }
    set stickyRowBackground(v) {
        this.i.ej = stringToBrush(v);
    }
    /**
     * Gets the actual background color for content that sticks to the top of the grid.
    */
    get actualStickyRowBackground() {
        return brushToString(this.i.d5);
    }
    set actualStickyRowBackground(v) {
        this.i.d5 = stringToBrush(v);
    }
    /**
     * Gets or sets the background color for cells belonging to rows marked as pinned.
    */
    get pinnedRowBackground() {
        return brushToString(this.i.ei);
    }
    set pinnedRowBackground(v) {
        this.i.ei = stringToBrush(v);
    }
    /**
     * Gets the actual background color for cells belonging to rows marked as pinned.
    */
    get actualPinnedRowBackground() {
        return brushToString(this.i.d4);
    }
    set actualPinnedRowBackground(v) {
        this.i.d4 = stringToBrush(v);
    }
    /**
     * Gets or sets the color for the last row in the sticky row area.
    */
    get lastStickyRowBackground() {
        return brushToString(this.i.eh);
    }
    set lastStickyRowBackground(v) {
        this.i.eh = stringToBrush(v);
    }
    /**
     * Gets the actual color for the last row in the sticky row area.
    */
    get actualLastStickyRowBackground() {
        return brushToString(this.i.d3);
    }
    set actualLastStickyRowBackground(v) {
        this.i.d3 = stringToBrush(v);
    }
    /**
     * Gets or sets the opacity of the content.
    */
    get contentOpacity() {
        return this.i.au;
    }
    set contentOpacity(v) {
        this.i.au = +v;
    }
    /**
     * Gets or sets the horizontal alignment to use for the cell content.
    */
    get horizontalAlignment() {
        return this.i.e;
    }
    set horizontalAlignment(v) {
        this.i.e = ensureEnum(CellContentHorizontalAlignment_$type, v);
    }
    /**
     * Gets or sets the vertical alignment to use for the cell content.
    */
    get verticalAlignment() {
        return this.i.j;
    }
    set verticalAlignment(v) {
        this.i.j = ensureEnum(CellContentVerticalAlignment_$type, v);
    }
    /**
     * Gets or sets the line breaking mode to use if text is present in the cell.
    */
    get lineBreakMode() {
        return this.i.y;
    }
    set lineBreakMode(v) {
        this.i.y = ensureEnum(TextCellLineBreakMode_$type, v);
    }
    /**
     * Gets the actual line break mode which will be used if text is present in the cell.
    */
    get actualLineBreakMode() {
        return this.i.x;
    }
    set actualLineBreakMode(v) {
        this.i.x = ensureEnum(TextCellLineBreakMode_$type, v);
    }
    /**
     * Gets or sets the color to use for displaying text.
    */
    get textColor() {
        return brushToString(this.i.ek);
    }
    set textColor(v) {
        this.i.ek = stringToBrush(v);
    }
    /**
     * Gets the actual color used for displaying text.
    */
    get actualTextColor() {
        return brushToString(this.i.d6);
    }
    set actualTextColor(v) {
        this.i.d6 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for displaying text.
    */
    get pinnedRowOpacity() {
        return this.i.aw;
    }
    set pinnedRowOpacity(v) {
        this.i.aw = +v;
    }
    /**
     * Gets or sets the color to use for displaying text.
    */
    get actualPinnedRowOpacity() {
        return this.i.at;
    }
    set actualPinnedRowOpacity(v) {
        this.i.at = +v;
    }
    get textStyle() {
        if (this.i.textStyle == null) {
            return null;
        }
        return this.i.textStyle.fontString;
    }
    set textStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.textStyle = fi;
    }
    findByName(name) {
        return null;
    }
    setNamedValue(valueName, animationType, value) {
        this.i.c6(valueName, (animationType == null ? null : animationType), value);
    }
    /**
     * Returns if this definition has named value.
    
    */
    hasNamedValues() {
        let iv = this.i.ai();
        return (iv);
    }
    /**
     * Returns if this definition has a named value with a given name.
    
    * @param valueName  * The named value name to check for.
    */
    hasNamedValue(valueName) {
        let iv = this.i.ah(valueName);
        return (iv);
    }
    /**
     * Removes the named value from this definition by name.
    
    * @param valueName  * The named value name to remove.
    */
    removeNamedValue(valueName) {
        this.i.c4(valueName);
    }
    /**
     * Gets the value for a named value from this definition.
    
    * @param valueName  * The named value name to check for.
    */
    getNamedValue(valueName) {
        let iv = this.i.bn(valueName);
        return (iv);
    }
    /**
     * Called when a cell is data binding.
    */
    get dataBinding() {
        return this._dataBinding;
    }
    set dataBinding(ev) {
        if (this._dataBinding_wrapped !== null) {
            this.i.dataBinding = delegateRemove(this.i.dataBinding, this._dataBinding_wrapped);
            this._dataBinding_wrapped = null;
            this._dataBinding = null;
        }
        this._dataBinding = ev;
        this._dataBinding_wrapped = (o, e) => {
            let outerArgs = new IgrDataBindingEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeDataBinding) {
                this.beforeDataBinding(this, outerArgs);
            }
            if (this._dataBinding) {
                this._dataBinding(this, outerArgs);
            }
        };
        this.i.dataBinding = delegateCombine(this.i.dataBinding, this._dataBinding_wrapped);
    }
    /**
     * Called when a cell has been data bound.
    */
    get dataBound() {
        return this._dataBound;
    }
    set dataBound(ev) {
        if (this._dataBound_wrapped !== null) {
            this.i.dataBound = delegateRemove(this.i.dataBound, this._dataBound_wrapped);
            this._dataBound_wrapped = null;
            this._dataBound = null;
        }
        this._dataBound = ev;
        this._dataBound_wrapped = (o, e) => {
            let outerArgs = new IgrDataBindingEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeDataBound) {
                this.beforeDataBound(this, outerArgs);
            }
            if (this._dataBound) {
                this._dataBound(this, outerArgs);
            }
        };
        this.i.dataBound = delegateCombine(this.i.dataBound, this._dataBound_wrapped);
    }
    /**
     * Called when the style key for a cell is needed. Used for recycling the cell.
    */
    get cellStyleKeyRequested() {
        return this._cellStyleKeyRequested;
    }
    set cellStyleKeyRequested(ev) {
        if (this._cellStyleKeyRequested_wrapped !== null) {
            this.i.cellStyleKeyRequested = delegateRemove(this.i.cellStyleKeyRequested, this._cellStyleKeyRequested_wrapped);
            this._cellStyleKeyRequested_wrapped = null;
            this._cellStyleKeyRequested = null;
        }
        this._cellStyleKeyRequested = ev;
        this._cellStyleKeyRequested_wrapped = (o, e) => {
            let outerArgs = new IgrCellStyleRequestedEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeCellStyleKeyRequested) {
                this.beforeCellStyleKeyRequested(this, outerArgs);
            }
            if (this._cellStyleKeyRequested) {
                this._cellStyleKeyRequested(this, outerArgs);
            }
        };
        this.i.cellStyleKeyRequested = delegateCombine(this.i.cellStyleKeyRequested, this._cellStyleKeyRequested_wrapped);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/**
 * Used to configure the appearance of the section header cells.
*/
class IgrSectionHeader extends IgrDefinitionBase {
    constructor(props) {
        super(props);
    }
    createImplementation() {
        return new SectionHeader();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    get selectedBackground() {
        return brushToString(this.i.fe);
    }
    set selectedBackground(v) {
        this.i.fe = stringToBrush(v);
    }
    get actualSelectedBackground() {
        return brushToString(this.i.fd);
    }
    set actualSelectedBackground(v) {
        this.i.fd = stringToBrush(v);
    }
    /**
     * Gets or sets the amount of left padding to use for the cell content for this column.
    */
    get paddingLeft() {
        return this.i.ex;
    }
    set paddingLeft(v) {
        this.i.ex = +v;
    }
    /**
     * Gets or sets the amount of top padding to use for the cell content for this column.
    */
    get paddingTop() {
        return this.i.ez;
    }
    set paddingTop(v) {
        this.i.ez = +v;
    }
    /**
     * Gets or sets the amount of right padding to use for the cell content of this column.
    */
    get paddingRight() {
        return this.i.ey;
    }
    set paddingRight(v) {
        this.i.ey = +v;
    }
    /**
     * Gets or sets the amount of bottom padding to use for the cell content of this column.
    */
    get paddingBottom() {
        return this.i.ew;
    }
    set paddingBottom(v) {
        this.i.ew = +v;
    }
    get isCollapsable() {
        return this.i.eq;
    }
    set isCollapsable(v) {
        this.i.eq = ensureBool(v);
    }
    get summaryDisplayMode() {
        return this.i.en;
    }
    set summaryDisplayMode(v) {
        this.i.en = ensureEnum(GroupSummaryDisplayMode_$type, v);
    }
}

class IgrSummaryRow extends IgrDefinitionBase {
    constructor(props) {
        super(props);
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    /**
     * Gets or sets the background color for summary cells when selected.
    */
    get selectedBackground() {
        return brushToString(this.i.fi);
    }
    set selectedBackground(v) {
        this.i.fi = stringToBrush(v);
    }
    /**
     * Gets the actual background color for summary cells when selected.
    */
    get actualSelectedBackground() {
        return brushToString(this.i.ff);
    }
    set actualSelectedBackground(v) {
        this.i.ff = stringToBrush(v);
    }
    /**
     * Gets or sets the text color for the summary labels.
    */
    get summaryLabelTextColor() {
        return brushToString(this.i.fj);
    }
    set summaryLabelTextColor(v) {
        this.i.fj = stringToBrush(v);
    }
    /**
     * Gets the actual text color for the summary labels.
    */
    get actualSummaryLabelTextColor() {
        return brushToString(this.i.fg);
    }
    set actualSummaryLabelTextColor(v) {
        this.i.fg = stringToBrush(v);
    }
    /**
     * Gets or sets the text style for the summary labels.
    */
    get summaryNameTextStyle() {
        if (this.i.summaryNameTextStyle == null) {
            return null;
        }
        return this.i.summaryNameTextStyle.fontString;
    }
    set summaryNameTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.summaryNameTextStyle = fi;
    }
    /**
     * Gets or sets the amount of left padding to use for the cell content for this column.
    */
    get paddingLeft() {
        return this.i.ev;
    }
    set paddingLeft(v) {
        this.i.ev = +v;
    }
    /**
     * Gets or sets the amount of top padding to use for the cell content for this column.
    */
    get paddingTop() {
        return this.i.ex;
    }
    set paddingTop(v) {
        this.i.ex = +v;
    }
    /**
     * Gets or sets the amount of right padding to use for the cell content of this column.
    */
    get paddingRight() {
        return this.i.ew;
    }
    set paddingRight(v) {
        this.i.ew = +v;
    }
    /**
     * Gets or sets the amount of bottom padding to use for the cell content of this column.
    */
    get paddingBottom() {
        return this.i.eu;
    }
    set paddingBottom(v) {
        this.i.eu = +v;
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

class IgrSummaryRowRoot extends IgrSummaryRow {
    constructor(props) {
        super(props);
    }
    createImplementation() {
        return new SummaryRowRoot();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

class IgrSummaryRowSection extends IgrSummaryRow {
    constructor(props) {
        super(props);
    }
    createImplementation() {
        return new SummaryRowSection();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
}

/**
 * Represents a width of a column.
*/
class IgrColumnWidth {
    createImplementation() {
        return new ColumnWidth();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    /**
     * Gets or sets whether to use star sizing for the column's width
    */
    get isStarSized() {
        return this.i.c;
    }
    set isStarSized(v) {
        this.i.c = ensureBool(v);
    }
    /**
     * Gets or sets the fixed width or the proportional width of the column, depending on whether this width is a star width.
    */
    get value() {
        return this.i.f;
    }
    set value(v) {
        this.i.f = +v;
    }
    /**
     * Gets or sets a minimum width to use when star sizing.
    */
    get minimumWidth() {
        return this.i.e;
    }
    set minimumWidth(v) {
        this.i.e = +v;
    }
    findByName(name) {
        return null;
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/**
 * Information about the cell in context.
*/
class IgrGridCellEventArgs {
    createImplementation() {
        return new GridCellEventArgs();
    }
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    /**
     * The backing information for the current cell.
    */
    get cellInfo() {
        if (this.i.cellInfo == null) {
            return null;
        }
        if (!this.i.cellInfo.externalObject) {
            let ext = null;
            switch (this.i.cellInfo.$type.name) {
                case "DateTimeCellModel":
                    ext = new IgrDateTimeCellInfo();
                    break;
                case "ImageCellModel":
                    ext = new IgrImageCellInfo();
                    break;
                case "NumericCellModel":
                    ext = new IgrNumericCellInfo();
                    break;
                case "RowSeparatorModel":
                    ext = new IgrRowSeparatorInfo();
                    break;
                case "SectionHeaderCellModel":
                    ext = new IgrSectionHeaderCellInfo();
                    break;
                case "TemplateCellModel":
                    ext = new IgrTemplateCellInfo();
                    break;
                case "TemplateHeaderCellModel":
                    ext = new IgrTemplateHeaderCellInfo();
                    break;
                case "TemplateSectionHeaderCellModel":
                    ext = new IgrTemplateSectionHeaderCellInfo();
                    break;
                case "TextCellModel":
                    ext = new IgrTextCellInfo();
                    break;
                case "TextHeaderCellModel":
                    ext = new IgrTextHeaderCellInfo();
                    break;
            }
            ext._implementation = this.i.cellInfo;
            this.i.cellInfo.externalObject = ext;
        }
        return this.i.cellInfo.externalObject;
    }
    /**
 * Gets the grid owning the cell.
*/
    get grid() {
        if (this.i.grid == null) {
            return null;
        }
        return this.i.grid.externalObject;
    }
    set grid(v) {
        v == null ? this.i.grid = null : this.i.grid = v.i;
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/**
 * Column animation settings for the grid.
*/
class IgrGridColumnAnimationSettings {
    createImplementation() {
        return new GridColumnAnimationSettings();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    findByName(name) {
        return null;
    }
}

/**
 * Represents a base class used to configure the appearance of the column header cells.
*/
class IgrHeader extends IgrDefinitionBase {
    constructor(props) {
        super(props);
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    /**
     * Gets or sets the color to use for the sort indicator icon
    */
    get sortIndicatorColor() {
        return brushToString(this.i.fb);
    }
    set sortIndicatorColor(v) {
        this.i.fb = stringToBrush(v);
    }
    /**
     * Gets the actual background color that is used for the cells when they are selected
    */
    get actualSortIndicatorColor() {
        return brushToString(this.i.e9);
    }
    set actualSortIndicatorColor(v) {
        this.i.e9 = stringToBrush(v);
    }
    get sortIndicatorStyle() {
        return this.i.eo;
    }
    set sortIndicatorStyle(v) {
        this.i.eo = ensureEnum(SortIndicatorStyle_$type, v);
    }
    get actualSortIndicatorStyle() {
        return this.i.en;
    }
    set actualSortIndicatorStyle(v) {
        this.i.en = ensureEnum(SortIndicatorStyle_$type, v);
    }
    /**
     * Gets or sets the amount of left padding to use for the cell content.
    */
    get paddingLeft() {
        return this.i.eu;
    }
    set paddingLeft(v) {
        this.i.eu = +v;
    }
    /**
     * Gets or sets the amount of top padding to use for the cell content.
    */
    get paddingTop() {
        return this.i.ew;
    }
    set paddingTop(v) {
        this.i.ew = +v;
    }
    /**
     * Gets or sets the amount of right padding to use for the cell content.
    */
    get paddingRight() {
        return this.i.ev;
    }
    set paddingRight(v) {
        this.i.ev = +v;
    }
    /**
     * Gets or sets the amount of bottom padding to use for the cell content.
    */
    get paddingBottom() {
        return this.i.et;
    }
    set paddingBottom(v) {
        this.i.et = +v;
    }
}

/**
 * A column in the data grid.
*/
class IgrColumn extends IgrDefinitionBase {
    constructor(props) {
        super(props);
        this._actualHeaderTextChange = null;
        this._actualHeaderTextChange_wrapped = null;
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    /**
     * Gets or sets the amount of left padding to use for the cell content for this column.
    */
    get paddingLeft() {
        return this.i.gy;
    }
    set paddingLeft(v) {
        this.i.gy = +v;
    }
    /**
     * Gets or sets the amount of top padding to use for the cell content for this column.
    */
    get paddingTop() {
        return this.i.g0;
    }
    set paddingTop(v) {
        this.i.g0 = +v;
    }
    /**
     * Gets or sets the amount of right padding to use for the cell content of this column.
    */
    get paddingRight() {
        return this.i.gz;
    }
    set paddingRight(v) {
        this.i.gz = +v;
    }
    /**
     * Gets or sets the amount of bottom padding to use for the cell content of this column.
    */
    get paddingBottom() {
        return this.i.gx;
    }
    set paddingBottom(v) {
        this.i.gx = +v;
    }
    /**
     * Gets or sets an unique name of the Column
    */
    get name() {
        return this.i.id;
    }
    set name(v) {
        this.i.id = v;
    }
    /**
     * Gets or sets the key used for the column binding
    */
    get field() {
        return this.i.hy;
    }
    set field(v) {
        this.i.hy = v;
    }
    /**
     * Gets or sets the text displayed in the header of the column
    */
    get headerText() {
        return this.i.h2;
    }
    set headerText(v) {
        this.i.h2 = v;
    }
    /**
     * Gets the actual text displayed in the header of the column
    */
    get actualHeaderText() {
        return this.i.hh;
    }
    set actualHeaderText(v) {
        this.i.hh = v;
    }
    /**
     * Gets or sets the background color to use for the cells when they are selected
    */
    get selectedBackground() {
        return brushToString(this.i.jn);
    }
    set selectedBackground(v) {
        this.i.jn = stringToBrush(v);
    }
    /**
     * Gets the actual background color that is used for the cells when they are selected
    */
    get actualSelectedBackground() {
        return brushToString(this.i.jh);
    }
    set actualSelectedBackground(v) {
        this.i.jh = stringToBrush(v);
    }
    /**
     * Gets or sets the background color to use for the cells when the row is hovered.
    */
    get rowHoverBackground() {
        return brushToString(this.i.jm);
    }
    set rowHoverBackground(v) {
        this.i.jm = stringToBrush(v);
    }
    /**
     * Gets the actual background color that is used for the cells when they are hovered.
    */
    get actualHoverBackground() {
        return brushToString(this.i.jg);
    }
    set actualHoverBackground(v) {
        this.i.jg = stringToBrush(v);
    }
    /**
     * Gets or sets the animation settings to use for this column.
    */
    get animationSettings() {
        if (this.i.fe == null) {
            return null;
        }
        if (!this.i.fe.externalObject) {
            let e = new IgrGridColumnAnimationSettings();
            e._implementation = this.i.fe;
            this.i.fe.externalObject = e;
        }
        return this.i.fe.externalObject;
    }
    set animationSettings(v) {
        v == null ? this.i.fe = null : this.i.fe = v.i;
    }
    /**
     * Gets or sets the width to use for this column.
    */
    get width() {
        if (this.i.width == null) {
            return null;
        }
        if (!this.i.width.externalObject) {
            let e = new IgrColumnWidth();
            e._implementation = this.i.width;
            this.i.width.externalObject = e;
        }
        return this.i.width.externalObject;
    }
    set width(v) {
        if (typeof v == "string") {
            let int = ColumnWidth.parse(v);
            let ext = new IgrColumnWidth();
            ext._implementation = int;
            v = ext;
        }
        v == null ? this.i.width = null : this.i.width = v.i;
    }
    /**
     * Gets or sets the minimum width to use for this column. Overrides the DefaultColumnMinWidth from the grid, if set.
    */
    get minWidth() {
        return this.i.gm;
    }
    set minWidth(v) {
        this.i.gm = +v;
    }
    /**
     * Gets whether this column was projected from markup/templates and is constrained.
    */
    get isFromMarkup() {
        return this.i.gc;
    }
    set isFromMarkup(v) {
        this.i.gc = ensureBool(v);
    }
    /**
     * Gets whether this column was auto generated.
    */
    get isAutoGenerated() {
        return this.i.f8;
    }
    set isAutoGenerated(v) {
        this.i.f8 = ensureBool(v);
    }
    /**
     * Gets or sets a filter to apply on the values of this column
    */
    get filter() {
        return this.i.eo;
    }
    set filter(v) {
        this.i.eo = v;
    }
    /**
     * Gets or sets the header definition for this column.
    */
    get header() {
        if (this.i.header == null) {
            return null;
        }
        if (!this.i.header.externalObject) {
            let e = IgrHeader._createFromInternal(this.i.header);
            if (e) {
                e._implementation = this.i.header;
            }
            this.i.header.externalObject = e;
        }
        return this.i.header.externalObject;
    }
    set header(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.header = null : this.i.header = v.i;
    }
    /**
     * Gets or sets whether filtering is enabled for this column.
    */
    get isFilteringEnabled() {
        return this.i.gb;
    }
    set isFilteringEnabled(v) {
        this.i.gb = ensureBool(v);
    }
    /**
     * Gets or sets whether resizing is enabled for this column.
    */
    get isResizingEnabled() {
        return this.i.ge;
    }
    set isResizingEnabled(v) {
        this.i.ge = ensureBool(v);
    }
    /**
     * Gets or sets whether or not a column is hidden from the grid
    */
    get isHidden() {
        return this.i.gd;
    }
    set isHidden(v) {
        this.i.gd = ensureBool(v);
    }
    /**
     * Gets or sets if a column should be removed from the grid when it is fully hidden
    */
    get shouldRemoveWhenHidden() {
        return this.i.gg;
    }
    set shouldRemoveWhenHidden(v) {
        this.i.gg = ensureBool(v);
    }
    /**
     * Gets the current sort direction (None, Ascending, Descending) for this column.
    */
    get sortDirection() {
        return this.i.e6;
    }
    set sortDirection(v) {
        this.i.e6 = ensureEnum(ColumnSortDirection_$type, v);
    }
    /**
     * Gets or sets the current fixed position for this column.
    */
    get pinned() {
        return this.i.fk;
    }
    set pinned(v) {
        this.i.fk = ensureEnum(PinnedPositions_$type, v);
    }
    /**
     * Gets the actual column options icon alignment for this column.
    */
    get actualColumnOptionsIconAlignment() {
        return this.i.ex;
    }
    set actualColumnOptionsIconAlignment(v) {
        this.i.ex = ensureEnum(ColumnOptionsIconAlignment_$type, v);
    }
    /**
     * Gets or sets whether the column options icon is aligned opposite the header text or not.
    */
    get columnOptionsIconAlignment() {
        return this.i.ey;
    }
    set columnOptionsIconAlignment(v) {
        this.i.ey = ensureEnum(ColumnOptionsIconAlignment_$type, v);
    }
    /**
     * Gets the actual column options icon color for this column.
    */
    get actualColumnOptionsIconColor() {
        return brushToString(this.i.je);
    }
    set actualColumnOptionsIconColor(v) {
        this.i.je = stringToBrush(v);
    }
    /**
     * Gets or sets the column options icon color for this column.
    */
    get columnOptionsIconColor() {
        return brushToString(this.i.ji);
    }
    set columnOptionsIconColor(v) {
        this.i.ji = stringToBrush(v);
    }
    /**
     * Gets or sets how the column option icon will behave in the column header.
    */
    get columnOptionsIconBehavior() {
        return this.i.e2;
    }
    set columnOptionsIconBehavior(v) {
        this.i.e2 = ensureEnum(ColumnOptionsIconBehavior_$type, v);
    }
    /**
     * Gets or sets how the column option icon will behave in the column header.
    */
    get actualColumnOptionsIconBehavior() {
        return this.i.e1;
    }
    set actualColumnOptionsIconBehavior(v) {
        this.i.e1 = ensureEnum(ColumnOptionsIconBehavior_$type, v);
    }
    /**
     * Gets the actual state of the column options for this column.
    */
    get actualIsColumnOptionsEnabled() {
        return this.i.f3;
    }
    set actualIsColumnOptionsEnabled(v) {
        this.i.f3 = ensureBool(v);
    }
    /**
     * Gets or sets the preferred state of the column options for this column. If the feature is disabled at the grid level
     * then it will be disabled for the column regardless of what this is set to.
    */
    get isColumnOptionsEnabled() {
        return this.i.f9;
    }
    set isColumnOptionsEnabled(v) {
        this.i.f9 = ensureBool(v);
    }
    /**
     * Gets or sets if the column is editable.
    */
    get isEditable() {
        return this.i.ga;
    }
    set isEditable(v) {
        this.i.ga = ensureBool(v);
    }
    /**
     * Gets or sets the text color used for deleted rows.
    */
    get deletedTextColor() {
        return brushToString(this.i.jj);
    }
    set deletedTextColor(v) {
        this.i.jj = stringToBrush(v);
    }
    /**
     * Gets the actual text color used for deleted rows.
    */
    get actualDeletedTextColor() {
        return brushToString(this.i.jf);
    }
    set actualDeletedTextColor(v) {
        this.i.jf = stringToBrush(v);
    }
    /**
     * Gets or sets the opacity to use for unsaved edited cell values.
    */
    get editOpacity() {
        return this.i.gl;
    }
    set editOpacity(v) {
        this.i.gl = +v;
    }
    /**
     * Gets the actual opacity for unsaved edited cell values.
    */
    get actualEditOpacity() {
        return this.i.gk;
    }
    set actualEditOpacity(v) {
        this.i.gk = +v;
    }
    /**
     * Gets or sets the font style to use for unsaved cell edits.
    */
    get textEditStyle() {
        if (this.i.textEditStyle == null) {
            return null;
        }
        return this.i.textEditStyle.fontString;
    }
    set textEditStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.textEditStyle = fi;
    }
    /**
     * Gets the actual font style used for unsaved cell edits.
    */
    get actualEditFontInfo() {
        if (this.i.fp == null) {
            return null;
        }
        return this.i.fp.fontString;
    }
    set actualEditFontInfo(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.fp = fi;
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.animationSettings && this.animationSettings.name && this.animationSettings.name == name) {
            return this.animationSettings;
        }
        if (this.width && this.width.name && this.width.name == name) {
            return this.width;
        }
        if (this.header && this.header.name && this.header.name == name) {
            return this.header;
        }
        return null;
    }
    _styling(container, component, parent) {
        super._styling(container, component, parent);
        this._inStyling = true;
        if (this.header && this.header._styling) {
            this.header._styling(container, component, this);
        }
        this._inStyling = false;
    }
    /**
     * Get the unique key used to identify this column.
    
    */
    getUniqueKey() {
        let iv = this.i.h0();
        return (iv);
    }
    setNamedHeaderValue(valueName, animationType, value) {
        this.i.iu(valueName, (animationType == null ? null : animationType), value);
    }
    /**
     * Returns if the column has named header values.
    
    */
    hasNamedHeaderValues() {
        let iv = this.i.f6();
        return (iv);
    }
    /**
     * Returns if there is a named header value with a given name.
    
    * @param valueName  * The named value to check for.
    */
    hasNamedHeaderValue(valueName) {
        let iv = this.i.f5(valueName);
        return (iv);
    }
    /**
     * Removes a named header value with the given name from the named header values for this column.
    
    * @param valueName  * The named header value to remove.
    */
    removeNamedHeaderValue(valueName) {
        this.i.it(valueName);
    }
    /**
     * Gets the value of a named header value for this column by name.
    
    * @param valueName  * Name of the named header value to retrieve.
    */
    getNamedHeaderValue(valueName) {
        let iv = this.i.g5(valueName);
        return (iv);
    }
    get actualHeaderTextChange() {
        return this._actualHeaderTextChange;
    }
    set actualHeaderTextChange(ev) {
        if (this._actualHeaderTextChange_wrapped !== null) {
            this.i.propertyChanged = delegateRemove(this.i.propertyChanged, this._actualHeaderTextChange_wrapped);
            this._actualHeaderTextChange_wrapped = null;
            this._actualHeaderTextChange = null;
        }
        this._actualHeaderTextChange = ev;
        this._actualHeaderTextChange_wrapped = (o, e) => {
            let ext = this.actualHeaderText;
            if (this.beforeActualHeaderTextChange) {
                this.beforeActualHeaderTextChange(this, ext);
            }
            if (this._actualHeaderTextChange) {
                this._actualHeaderTextChange(this, ext);
            }
        };
        this.i.propertyChanged = delegateCombine(this.i.propertyChanged, this._actualHeaderTextChange_wrapped);
    }
}

class IgrGridColumnCollection extends IgCollection {
    constructor(list) {
        super();
        if (!IgrColumn.$type) {
            IgrColumn.$type = markType(IgrColumn, "IgrColumn");
        }
        if (list) {
            for (let i = 0; i < list.length; i++) {
                this.add(list[i]);
            }
        }
    }
    _createInnerColl() {
        if (!IgrColumn.$type) {
            IgrColumn.$type = markType(IgrColumn, "IgrColumn");
        }
        let coll = new SyncableObservableCollection$2(IgrColumn.$type, Column.$type, 0);
        coll.compare = (ext, int) => {
            let comp = ext;
            if (comp._implementation) {
                comp = comp._implementation;
            }
            if (comp.equals) {
                return comp.equals(int);
            }
            return comp === int;
        };
        coll.createTo = (ext) => {
            return ext._implementation;
        };
        coll.createFrom = (int) => {
            let ext = int.externalObject;
            if (!ext) {
                ext = IgrColumn._createFromInternal(int);
                if (ext) {
                    ext._implementation = int;
                }
            }
            return ext;
        };
        return coll;
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/**
 * Information about the generated columns.
*/
class IgrGridColumnsAutoGeneratedEventArgs {
    constructor() {
        this._columns = null;
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    createImplementation() {
        return new GridColumnsAutoGeneratedEventArgs();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    get columns() {
        if (this._columns === null) {
            let coll = new IgrGridColumnCollection();
            let innerColl = this.i.columns;
            if (!innerColl) {
                innerColl = new GridColumnCollection();
            }
            this._columns = coll._fromInner(innerColl);
            this.i.columns = innerColl;
        }
        return this._columns;
    }
    set columns(v) {
        if (this._columns !== null) {
            this._columns._setSyncTarget(null);
            this._columns = null;
        }
        let coll = new IgrGridColumnCollection();
        this._columns = coll._fromOuter(v);
        let syncColl = new SyncableObservableCollection$1(Column.$type);
        let innerColl = this.i.columns;
        if (!innerColl) {
            innerColl = new GridColumnCollection();
        }
        syncColl._inner = innerColl;
        syncColl.clear();
        this._columns._setSyncTarget(syncColl);
        this.i.columns = innerColl;
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/**
 * Information about the generated columns.
*/
class IgrGridColumnsChangedEventArgs {
    constructor() {
        this._columns = null;
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    createImplementation() {
        return new GridColumnsChangedEventArgs();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    get columns() {
        if (this._columns === null) {
            let coll = new IgrGridColumnCollection();
            let innerColl = this.i.columns;
            if (!innerColl) {
                innerColl = new GridColumnCollection();
            }
            this._columns = coll._fromInner(innerColl);
            this.i.columns = innerColl;
        }
        return this._columns;
    }
    set columns(v) {
        if (this._columns !== null) {
            this._columns._setSyncTarget(null);
            this._columns = null;
        }
        let coll = new IgrGridColumnCollection();
        this._columns = coll._fromOuter(v);
        let syncColl = new SyncableObservableCollection$1(Column.$type);
        let innerColl = this.i.columns;
        if (!innerColl) {
            innerColl = new GridColumnCollection();
        }
        syncColl._inner = innerColl;
        syncColl.clear();
        this._columns._setSyncTarget(syncColl);
        this.i.columns = innerColl;
    }
}

class IgrGridSelectedItemsCollection extends IgCollection {
    constructor(list) {
        super();
        if (list) {
            for (let i = 0; i < list.length; i++) {
                this.add(list[i]);
            }
        }
    }
    _createInnerColl() {
        let coll = new SyncableObservableCollection$2(Base.$type, Base.$type, 0);
        coll.compare = (ext, int) => {
            let comp = ext;
            if (comp.equals) {
                return comp.equals(int);
            }
            return comp === int;
        };
        coll.createTo = (ext) => {
            return ext;
        };
        coll.createFrom = (int) => {
            return int;
        };
        return coll;
    }
}

/**
 * Information about the changing selected items in the grid.
*/
class IgrGridSelectedItemsChangedEventArgs {
    constructor() {
        this._currentItems = null;
        this._addedItems = null;
        this._removedItems = null;
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    createImplementation() {
        return new GridSelectedItemsChangedEventArgs();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    /**
     * The items added to the selection.
    */
    get currentItems() {
        if (this._currentItems === null) {
            let coll = new IgrGridSelectedItemsCollection();
            let innerColl = this.i.currentItems;
            if (!innerColl) {
                innerColl = new GridSelectedItemsCollection();
            }
            this._currentItems = coll._fromInner(innerColl);
            this.i.currentItems = innerColl;
        }
        return this._currentItems;
    }
    set currentItems(v) {
        if (this._currentItems !== null) {
            this._currentItems._setSyncTarget(null);
            this._currentItems = null;
        }
        let coll = new IgrGridSelectedItemsCollection();
        this._currentItems = coll._fromOuter(v);
        let syncColl = new SyncableObservableCollection$1(Base.$type);
        let innerColl = this.i.currentItems;
        if (!innerColl) {
            innerColl = new GridSelectedItemsCollection();
        }
        syncColl._inner = innerColl;
        syncColl.clear();
        this._currentItems._setSyncTarget(syncColl);
        this.i.currentItems = innerColl;
    }
    /**
     * The items added to the selection.
    */
    get addedItems() {
        if (this._addedItems === null) {
            let coll = new IgrGridSelectedItemsCollection();
            let innerColl = this.i.addedItems;
            if (!innerColl) {
                innerColl = new GridSelectedItemsCollection();
            }
            this._addedItems = coll._fromInner(innerColl);
            this.i.addedItems = innerColl;
        }
        return this._addedItems;
    }
    set addedItems(v) {
        if (this._addedItems !== null) {
            this._addedItems._setSyncTarget(null);
            this._addedItems = null;
        }
        let coll = new IgrGridSelectedItemsCollection();
        this._addedItems = coll._fromOuter(v);
        let syncColl = new SyncableObservableCollection$1(Base.$type);
        let innerColl = this.i.addedItems;
        if (!innerColl) {
            innerColl = new GridSelectedItemsCollection();
        }
        syncColl._inner = innerColl;
        syncColl.clear();
        this._addedItems._setSyncTarget(syncColl);
        this.i.addedItems = innerColl;
    }
    /**
     * The items removed from the selection.
    */
    get removedItems() {
        if (this._removedItems === null) {
            let coll = new IgrGridSelectedItemsCollection();
            let innerColl = this.i.removedItems;
            if (!innerColl) {
                innerColl = new GridSelectedItemsCollection();
            }
            this._removedItems = coll._fromInner(innerColl);
            this.i.removedItems = innerColl;
        }
        return this._removedItems;
    }
    set removedItems(v) {
        if (this._removedItems !== null) {
            this._removedItems._setSyncTarget(null);
            this._removedItems = null;
        }
        let coll = new IgrGridSelectedItemsCollection();
        this._removedItems = coll._fromOuter(v);
        let syncColl = new SyncableObservableCollection$1(Base.$type);
        let innerColl = this.i.removedItems;
        if (!innerColl) {
            innerColl = new GridSelectedItemsCollection();
        }
        syncColl._inner = innerColl;
        syncColl.clear();
        this._removedItems._setSyncTarget(syncColl);
        this.i.removedItems = innerColl;
    }
}

/**
 * A primary key value.
*/
class IgrPrimaryKeyValue {
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor(primaryKey = null, primaryKeyValue = null) {
        this._implementation = new PrimaryKeyValue(primaryKey, primaryKeyValue);
        this._implementation.externalObject = this;
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    static createIdentityKey(item) {
        let int = PrimaryKeyValue.createIdentityKey(item);
        let ext = new IgrPrimaryKeyValue(null, null);
        ext._provideImplementation(int);
        return ext;
    }
    /**
 * The primary key associated with this value.
*/
    get key() {
        return this.i.key;
    }
    set key(v) {
        this.i.key = v;
    }
    /**
     * The value of the keys for this primary key value.
    */
    get value() {
        return this.i.value;
    }
    set value(v) {
        this.i.value = v;
    }
    findByName(name) {
        return null;
    }
    /**
 * Determines if two primary key values are equal.

* @param other  * The other key value to check against.
*/
    equals(other) {
        let iv = this.i.equals(other);
        return (iv);
    }
}

class IgrGridSelectedKeysCollection extends IgCollection {
    constructor(list) {
        super();
        if (!IgrPrimaryKeyValue.$type) {
            IgrPrimaryKeyValue.$type = markType(IgrPrimaryKeyValue, "IgrPrimaryKeyValue");
        }
        if (list) {
            for (let i = 0; i < list.length; i++) {
                this.add(list[i]);
            }
        }
    }
    _createInnerColl() {
        if (!IgrPrimaryKeyValue.$type) {
            IgrPrimaryKeyValue.$type = markType(IgrPrimaryKeyValue, "IgrPrimaryKeyValue");
        }
        let coll = new SyncableObservableCollection$2(IgrPrimaryKeyValue.$type, PrimaryKeyValue.$type, 0);
        coll.compare = (ext, int) => {
            let comp = ext;
            if (comp._implementation) {
                comp = comp._implementation;
            }
            if (comp.equals) {
                return comp.equals(int);
            }
            return comp === int;
        };
        coll.createTo = (ext) => {
            return ext._implementation;
        };
        coll.createFrom = (int) => {
            let ext = int.externalObject;
            if (!ext) {
                ext = new IgrPrimaryKeyValue();
                if (ext) {
                    ext._implementation = int;
                }
            }
            return ext;
        };
        return coll;
    }
}

/**
 * Information about the change to the selected keys in the grid.
*/
class IgrGridSelectedKeysChangedEventArgs {
    constructor() {
        this._currentKeys = null;
        this._addedKeys = null;
        this._removedKeys = null;
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    createImplementation() {
        return new GridSelectedKeysChangedEventArgs();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    /**
     * All keys in the selection.
    */
    get currentKeys() {
        if (this._currentKeys === null) {
            let coll = new IgrGridSelectedKeysCollection();
            let innerColl = this.i.currentKeys;
            if (!innerColl) {
                innerColl = new GridSelectedKeysCollection();
            }
            this._currentKeys = coll._fromInner(innerColl);
            this.i.currentKeys = innerColl;
        }
        return this._currentKeys;
    }
    set currentKeys(v) {
        if (this._currentKeys !== null) {
            this._currentKeys._setSyncTarget(null);
            this._currentKeys = null;
        }
        let coll = new IgrGridSelectedKeysCollection();
        this._currentKeys = coll._fromOuter(v);
        let syncColl = new SyncableObservableCollection$1(PrimaryKeyValue.$type);
        let innerColl = this.i.currentKeys;
        if (!innerColl) {
            innerColl = new GridSelectedKeysCollection();
        }
        syncColl._inner = innerColl;
        syncColl.clear();
        this._currentKeys._setSyncTarget(syncColl);
        this.i.currentKeys = innerColl;
    }
    /**
     * The keys added to the selection.
    */
    get addedKeys() {
        if (this._addedKeys === null) {
            let coll = new IgrGridSelectedKeysCollection();
            let innerColl = this.i.addedKeys;
            if (!innerColl) {
                innerColl = new GridSelectedKeysCollection();
            }
            this._addedKeys = coll._fromInner(innerColl);
            this.i.addedKeys = innerColl;
        }
        return this._addedKeys;
    }
    set addedKeys(v) {
        if (this._addedKeys !== null) {
            this._addedKeys._setSyncTarget(null);
            this._addedKeys = null;
        }
        let coll = new IgrGridSelectedKeysCollection();
        this._addedKeys = coll._fromOuter(v);
        let syncColl = new SyncableObservableCollection$1(PrimaryKeyValue.$type);
        let innerColl = this.i.addedKeys;
        if (!innerColl) {
            innerColl = new GridSelectedKeysCollection();
        }
        syncColl._inner = innerColl;
        syncColl.clear();
        this._addedKeys._setSyncTarget(syncColl);
        this.i.addedKeys = innerColl;
    }
    /**
     * The keys removed from the selection.
    */
    get removedKeys() {
        if (this._removedKeys === null) {
            let coll = new IgrGridSelectedKeysCollection();
            let innerColl = this.i.removedKeys;
            if (!innerColl) {
                innerColl = new GridSelectedKeysCollection();
            }
            this._removedKeys = coll._fromInner(innerColl);
            this.i.removedKeys = innerColl;
        }
        return this._removedKeys;
    }
    set removedKeys(v) {
        if (this._removedKeys !== null) {
            this._removedKeys._setSyncTarget(null);
            this._removedKeys = null;
        }
        let coll = new IgrGridSelectedKeysCollection();
        this._removedKeys = coll._fromOuter(v);
        let syncColl = new SyncableObservableCollection$1(PrimaryKeyValue.$type);
        let innerColl = this.i.removedKeys;
        if (!innerColl) {
            innerColl = new GridSelectedKeysCollection();
        }
        syncColl._inner = innerColl;
        syncColl.clear();
        this._removedKeys._setSyncTarget(syncColl);
        this.i.removedKeys = innerColl;
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/**
 * An indentifier for a specific cell in the grid.
*/
class IgrCellKey {
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = new CellKey();
        this._implementation.externalObject = this;
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    /**
     * Gets or sets the primary key of the row associated with the cell.
    */
    get primaryKey() {
        if (this.i.primaryKey == null) {
            return null;
        }
        if (!this._primaryKey) {
            this._primaryKey = new IgrPrimaryKeyValue(this.i.primaryKey.key, this.i.primaryKey.value);
        }
        return this._primaryKey;
    }
    set primaryKey(v) {
        this.i.primaryKey = v.i;
    }
    /**
 * Gets or sets the row data object associated with the cell.
*/
    get rowItem() {
        return this.i.h;
    }
    set rowItem(v) {
        this.i.h = v;
    }
    /**
     * Gets or sets the column name associated with the cell.
     * All columns in the grid must have a unique name. That unique name is what is used for this property.
    */
    get columnUniqueKey() {
        return this.i.j;
    }
    set columnUniqueKey(v) {
        this.i.j = v;
    }
    /**
     * Gets or sets the resolved column object associated with this cell.
    */
    get resolvedColumn() {
        if (this.i.b == null) {
            return null;
        }
        if (!this.i.b.externalObject) {
            let e = IgrColumn._createFromInternal(this.i.b);
            if (e) {
                e._implementation = this.i.b;
            }
            this.i.b.externalObject = e;
        }
        return this.i.b.externalObject;
    }
    findByName(name) {
        if (this.primaryKey && this.primaryKey.name && this.primaryKey.name == name) {
            return this.primaryKey;
        }
        return null;
    }
}

class IgrGridSelectedCellsCollection extends IgCollection {
    constructor(list) {
        super();
        if (!IgrCellKey.$type) {
            IgrCellKey.$type = markType(IgrCellKey, "IgrCellKey");
        }
        if (list) {
            for (let i = 0; i < list.length; i++) {
                this.add(list[i]);
            }
        }
    }
    _createInnerColl() {
        if (!IgrCellKey.$type) {
            IgrCellKey.$type = markType(IgrCellKey, "IgrCellKey");
        }
        let coll = new SyncableObservableCollection$2(IgrCellKey.$type, CellKey.$type, 0);
        coll.compare = (ext, int) => {
            let comp = ext;
            if (comp._implementation) {
                comp = comp._implementation;
            }
            if (comp.equals) {
                return comp.equals(int);
            }
            return comp === int;
        };
        coll.createTo = (ext) => {
            return ext._implementation;
        };
        coll.createFrom = (int) => {
            let ext = int.externalObject;
            if (!ext) {
                ext = new IgrCellKey();
                if (ext) {
                    ext._implementation = int;
                }
            }
            return ext;
        };
        return coll;
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/**
 * Information about the change to the selected cells in the grid.
*/
class IgrGridSelectedCellsChangedEventArgs {
    constructor() {
        this._currentCells = null;
        this._addedCells = null;
        this._removedCells = null;
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    createImplementation() {
        return new GridSelectedCellsChangedEventArgs();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    /**
     * The current cells in the selection.
    */
    get currentCells() {
        if (this._currentCells === null) {
            let coll = new IgrGridSelectedCellsCollection();
            let innerColl = this.i.currentCells;
            if (!innerColl) {
                innerColl = new GridSelectedCellsCollection();
            }
            this._currentCells = coll._fromInner(innerColl);
            this.i.currentCells = innerColl;
        }
        return this._currentCells;
    }
    set currentCells(v) {
        if (this._currentCells !== null) {
            this._currentCells._setSyncTarget(null);
            this._currentCells = null;
        }
        let coll = new IgrGridSelectedCellsCollection();
        this._currentCells = coll._fromOuter(v);
        let syncColl = new SyncableObservableCollection$1(CellKey.$type);
        let innerColl = this.i.currentCells;
        if (!innerColl) {
            innerColl = new GridSelectedCellsCollection();
        }
        syncColl._inner = innerColl;
        syncColl.clear();
        this._currentCells._setSyncTarget(syncColl);
        this.i.currentCells = innerColl;
    }
    /**
     * The cells added to the selection.
    */
    get addedCells() {
        if (this._addedCells === null) {
            let coll = new IgrGridSelectedCellsCollection();
            let innerColl = this.i.addedCells;
            if (!innerColl) {
                innerColl = new GridSelectedCellsCollection();
            }
            this._addedCells = coll._fromInner(innerColl);
            this.i.addedCells = innerColl;
        }
        return this._addedCells;
    }
    set addedCells(v) {
        if (this._addedCells !== null) {
            this._addedCells._setSyncTarget(null);
            this._addedCells = null;
        }
        let coll = new IgrGridSelectedCellsCollection();
        this._addedCells = coll._fromOuter(v);
        let syncColl = new SyncableObservableCollection$1(CellKey.$type);
        let innerColl = this.i.addedCells;
        if (!innerColl) {
            innerColl = new GridSelectedCellsCollection();
        }
        syncColl._inner = innerColl;
        syncColl.clear();
        this._addedCells._setSyncTarget(syncColl);
        this.i.addedCells = innerColl;
    }
    /**
     * The cells removed from the selection.
    */
    get removedCells() {
        if (this._removedCells === null) {
            let coll = new IgrGridSelectedCellsCollection();
            let innerColl = this.i.removedCells;
            if (!innerColl) {
                innerColl = new GridSelectedCellsCollection();
            }
            this._removedCells = coll._fromInner(innerColl);
            this.i.removedCells = innerColl;
        }
        return this._removedCells;
    }
    set removedCells(v) {
        if (this._removedCells !== null) {
            this._removedCells._setSyncTarget(null);
            this._removedCells = null;
        }
        let coll = new IgrGridSelectedCellsCollection();
        this._removedCells = coll._fromOuter(v);
        let syncColl = new SyncableObservableCollection$1(CellKey.$type);
        let innerColl = this.i.removedCells;
        if (!innerColl) {
            innerColl = new GridSelectedCellsCollection();
        }
        syncColl._inner = innerColl;
        syncColl.clear();
        this._removedCells._setSyncTarget(syncColl);
        this.i.removedCells = innerColl;
    }
}

/**
 * An indentifier for a specific cell in the grid.
*/
class IgrCellRange {
    createImplementation() {
        return new CellRange();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    /**
     * Gets or sets the start column of the range.
    */
    get startColumn() {
        return this.i.k;
    }
    set startColumn(v) {
        this.i.k = +v;
    }
    /**
     * Gets or sets the end column of the range.
    */
    get endColumn() {
        return this.i.i;
    }
    set endColumn(v) {
        this.i.i = +v;
    }
    /**
     * Gets or sets the start row of the range.
    */
    get startRow() {
        return this.i.l;
    }
    set startRow(v) {
        this.i.l = +v;
    }
    /**
     * Gets or sets the end row of the range.
    */
    get endRow() {
        return this.i.j;
    }
    set endRow(v) {
        this.i.j = +v;
    }
    findByName(name) {
        return null;
    }
}

class IgrGridSelectedCellRangesCollection extends IgCollection {
    constructor(list) {
        super();
        if (!IgrCellRange.$type) {
            IgrCellRange.$type = markType(IgrCellRange, "IgrCellRange");
        }
        if (list) {
            for (let i = 0; i < list.length; i++) {
                this.add(list[i]);
            }
        }
    }
    _createInnerColl() {
        if (!IgrCellRange.$type) {
            IgrCellRange.$type = markType(IgrCellRange, "IgrCellRange");
        }
        let coll = new SyncableObservableCollection$2(IgrCellRange.$type, CellRange.$type, 0);
        coll.compare = (ext, int) => {
            let comp = ext;
            if (comp._implementation) {
                comp = comp._implementation;
            }
            if (comp.equals) {
                return comp.equals(int);
            }
            return comp === int;
        };
        coll.createTo = (ext) => {
            return ext._implementation;
        };
        coll.createFrom = (int) => {
            let ext = int.externalObject;
            if (!ext) {
                ext = new IgrCellRange();
                if (ext) {
                    ext._implementation = int;
                }
            }
            return ext;
        };
        return coll;
    }
}

/**
 * Information about the change to the selected cell ranges in the grid.
*/
class IgrGridSelectedCellRangesChangedEventArgs {
    constructor() {
        this._currentRanges = null;
        this._addedRanges = null;
        this._removedRanges = null;
        this._updatedRanges = null;
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    createImplementation() {
        return new GridSelectedCellRangesChangedEventArgs();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    /**
     * The cell ranges currently in the selection.
    */
    get currentRanges() {
        if (this._currentRanges === null) {
            let coll = new IgrGridSelectedCellRangesCollection();
            let innerColl = this.i.currentRanges;
            if (!innerColl) {
                innerColl = new GridSelectedCellRangesCollection();
            }
            this._currentRanges = coll._fromInner(innerColl);
            this.i.currentRanges = innerColl;
        }
        return this._currentRanges;
    }
    set currentRanges(v) {
        if (this._currentRanges !== null) {
            this._currentRanges._setSyncTarget(null);
            this._currentRanges = null;
        }
        let coll = new IgrGridSelectedCellRangesCollection();
        this._currentRanges = coll._fromOuter(v);
        let syncColl = new SyncableObservableCollection$1(CellRange.$type);
        let innerColl = this.i.currentRanges;
        if (!innerColl) {
            innerColl = new GridSelectedCellRangesCollection();
        }
        syncColl._inner = innerColl;
        syncColl.clear();
        this._currentRanges._setSyncTarget(syncColl);
        this.i.currentRanges = innerColl;
    }
    /**
     * The cell ranges added to the selection.
    */
    get addedRanges() {
        if (this._addedRanges === null) {
            let coll = new IgrGridSelectedCellRangesCollection();
            let innerColl = this.i.addedRanges;
            if (!innerColl) {
                innerColl = new GridSelectedCellRangesCollection();
            }
            this._addedRanges = coll._fromInner(innerColl);
            this.i.addedRanges = innerColl;
        }
        return this._addedRanges;
    }
    set addedRanges(v) {
        if (this._addedRanges !== null) {
            this._addedRanges._setSyncTarget(null);
            this._addedRanges = null;
        }
        let coll = new IgrGridSelectedCellRangesCollection();
        this._addedRanges = coll._fromOuter(v);
        let syncColl = new SyncableObservableCollection$1(CellRange.$type);
        let innerColl = this.i.addedRanges;
        if (!innerColl) {
            innerColl = new GridSelectedCellRangesCollection();
        }
        syncColl._inner = innerColl;
        syncColl.clear();
        this._addedRanges._setSyncTarget(syncColl);
        this.i.addedRanges = innerColl;
    }
    /**
     * The cell ranges removed from the selection.
    */
    get removedRanges() {
        if (this._removedRanges === null) {
            let coll = new IgrGridSelectedCellRangesCollection();
            let innerColl = this.i.removedRanges;
            if (!innerColl) {
                innerColl = new GridSelectedCellRangesCollection();
            }
            this._removedRanges = coll._fromInner(innerColl);
            this.i.removedRanges = innerColl;
        }
        return this._removedRanges;
    }
    set removedRanges(v) {
        if (this._removedRanges !== null) {
            this._removedRanges._setSyncTarget(null);
            this._removedRanges = null;
        }
        let coll = new IgrGridSelectedCellRangesCollection();
        this._removedRanges = coll._fromOuter(v);
        let syncColl = new SyncableObservableCollection$1(CellRange.$type);
        let innerColl = this.i.removedRanges;
        if (!innerColl) {
            innerColl = new GridSelectedCellRangesCollection();
        }
        syncColl._inner = innerColl;
        syncColl.clear();
        this._removedRanges._setSyncTarget(syncColl);
        this.i.removedRanges = innerColl;
    }
    /**
     * The cell ranges that have been updated by the grid.
    */
    get updatedRanges() {
        if (this._updatedRanges === null) {
            let coll = new IgrGridSelectedCellRangesCollection();
            let innerColl = this.i.updatedRanges;
            if (!innerColl) {
                innerColl = new GridSelectedCellRangesCollection();
            }
            this._updatedRanges = coll._fromInner(innerColl);
            this.i.updatedRanges = innerColl;
        }
        return this._updatedRanges;
    }
    set updatedRanges(v) {
        if (this._updatedRanges !== null) {
            this._updatedRanges._setSyncTarget(null);
            this._updatedRanges = null;
        }
        let coll = new IgrGridSelectedCellRangesCollection();
        this._updatedRanges = coll._fromOuter(v);
        let syncColl = new SyncableObservableCollection$1(CellRange.$type);
        let innerColl = this.i.updatedRanges;
        if (!innerColl) {
            innerColl = new GridSelectedCellRangesCollection();
        }
        syncColl._inner = innerColl;
        syncColl.clear();
        this._updatedRanges._setSyncTarget(syncColl);
        this.i.updatedRanges = innerColl;
    }
}

/**
 * Represents an element in the current sort applied to a data source or provider. Changes to this object are not observed or expected after it is initially assigned to a collection.
*/
class IgrColumnSortDescription {
    createImplementation() {
        return new ColumnSortDescription(0);
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    /**
     * Gets or sets the property being sorted.
    */
    get field() {
        return this.i.f;
    }
    set field(v) {
        this.i.f = v;
    }
    /**
     * Gets or sets the direction to sort based on the property.
    */
    get sortDirection() {
        return this.i.c;
    }
    set sortDirection(v) {
        this.i.c = ensureEnum(ListSortDirection_$type, v);
    }
    findByName(name) {
        return null;
    }
    /**
     * Returns if the SortDescription is equal to another.
    
    * @param other  * The SortDescription to compare to.
    */
    equals(other) {
        let iv = this.i.equals(other);
        return (iv);
    }
}

/**
 * Represents a collection of sort elements that are applied to a data source or provider.
*/
class IgrColumnSortDescriptionCollection {
    createImplementation() {
        return new ColumnSortDescriptionCollection();
    }
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    item(index, value) {
        let int = null;
        if (value !== undefined) {
            int = this.i.set(index, value == null ? null : value.i);
        }
        else {
            int = this.i.get(index);
        }
        let ext = null;
        if (int != null) {
            ext = int.externalObject;
            if (!ext) {
                ext = new IgrColumnSortDescription();
                ext._implementation = int;
                int.externalObject = ext;
            }
        }
        return ext;
    }
    get count() {
        return this.i.size();
    }
    toArray() {
        let arr = [];
        for (let i = 0; i < this.count; i++) {
            arr[i] = this.item(i);
        }
        return arr;
    }
    *[Symbol.iterator]() {
        for (let i = 0; i < this.count; i++) {
            let item = this.item(i);
            if (item.externalObject) {
                item = item.externalObject;
            }
            yield item;
        }
    }
    findByName(name) {
        return null;
    }
    add(item) {
        let iv = this.i.g((item == null ? null : item.i));
        return (iv);
    }
    insert(index, item) {
        this.i.n(index, (item == null ? null : item.i));
    }
    clear() {
        this.i.m();
    }
    indexOf(item) {
        let iv = this.i.j((item == null ? null : item.i));
        return (iv);
    }
    remove(item) {
        let iv = this.i.h((item == null ? null : item.i));
        return (iv);
    }
    removeAt(index) {
        let iv = this.i.d(index);
        return (iv == null ? null : iv.externalObject);
    }
}

/**
 * Information about the current sorting applied to the grid.
*/
class IgrGridSortDescriptionsChangedEventArgs {
    createImplementation() {
        return new GridSortDescriptionsChangedEventArgs();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    get sortDescriptions() {
        if (this.i.sortDescriptions == null) {
            return null;
        }
        if (!this.i.sortDescriptions.externalObject) {
            let e = new IgrColumnSortDescriptionCollection();
            e._implementation = this.i.sortDescriptions;
            this.i.sortDescriptions.externalObject = e;
        }
        return this.i.sortDescriptions.externalObject;
    }
    set sortDescriptions(v) {
        v == null ? this.i.sortDescriptions = null : this.i.sortDescriptions = v.i;
    }
}

class IgrFormatGroupTextEventArgs {
    createImplementation() {
        return new FormatGroupTextEventArgs();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    /**
     * Gets the group name.
    */
    get groupName() {
        return this.i.d;
    }
    set groupName(v) {
        this.i.d = v;
    }
    /**
     * Gets the original value before formatting.
    */
    get groupValue() {
        return this.i.a;
    }
    set groupValue(v) {
        this.i.a = v;
    }
    /**
     * Gets the group value as text, formatted based on the GroupDescription's ValueFormat.
    */
    get formattedValue() {
        return this.i.c;
    }
    set formattedValue(v) {
        this.i.c = v;
    }
    /**
     * Gets or sets the final text that will be displayed in the group header.
    */
    get formattedText() {
        return this.i.b;
    }
    set formattedText(v) {
        this.i.b = v;
    }
}

/**
 * Represents an element in the current grouping applied to a data source or provider. Changes to this object are not observed or expected after it is initially assigned to a collection.
*/
class IgrColumnGroupDescription extends IgrColumnSortDescription {
    constructor() {
        super();
        this._formatText = null;
        this._formatText_wrapped = null;
    }
    createImplementation() {
        return new ColumnGroupDescription(0);
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    /**
     * Gets or sets the format string for the group value.
    */
    get valueFormat() {
        return this.i.x;
    }
    set valueFormat(v) {
        this.i.x = v;
    }
    /**
     * Gets or sets the format specifiers to use with the ValueFormat string.
    */
    get valueFormatSpecifiers() {
        return this.i.j;
    }
    set valueFormatSpecifiers(v) {
        this.i.j = v;
    }
    /**
     * Gets or sets the display format for the group text in the group header.
    */
    get displayFormat() {
        return this.i.u;
    }
    set displayFormat(v) {
        this.i.u = v;
    }
    /**
     * Gets or sets the format specifiers to use with the DisplayFormat string.
    */
    get displayFormatSpecifiers() {
        return this.i.i;
    }
    set displayFormatSpecifiers(v) {
        this.i.i = v;
    }
    /**
     * Gets or sets an INTL.DateTimeFormat or INTL.NumericFormat to use to format the value.
    */
    get formatOverride() {
        return this.i.q;
    }
    set formatOverride(v) {
        this.i.q = v;
    }
    /**
     * Gets or sets the display text for the group name.
    */
    get displayName() {
        return this.i.v;
    }
    set displayName(v) {
        this.i.v = v;
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.valueFormatSpecifiers != null && arrayFindByName(this.valueFormatSpecifiers, name)) {
            return arrayFindByName(this.valueFormatSpecifiers, name);
        }
        if (this.displayFormatSpecifiers != null && arrayFindByName(this.displayFormatSpecifiers, name)) {
            return arrayFindByName(this.displayFormatSpecifiers, name);
        }
        return null;
    }
    /**
     * Called when the value is being formatted.
    */
    get formatText() {
        return this._formatText;
    }
    set formatText(ev) {
        if (this._formatText_wrapped !== null) {
            this.i.formatText = delegateRemove(this.i.formatText, this._formatText_wrapped);
            this._formatText_wrapped = null;
            this._formatText = null;
        }
        this._formatText = ev;
        this._formatText_wrapped = (o, e) => {
            let outerArgs = new IgrFormatGroupTextEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeFormatText) {
                this.beforeFormatText(this, outerArgs);
            }
            if (this._formatText) {
                this._formatText(this, outerArgs);
            }
        };
        this.i.formatText = delegateCombine(this.i.formatText, this._formatText_wrapped);
    }
}

/**
 * Represents a collection of grouping elements that are applied to a data source or provider.
*/
class IgrColumnGroupDescriptionCollection {
    createImplementation() {
        return new ColumnGroupDescriptionCollection();
    }
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    item(index, value) {
        let int = null;
        if (value !== undefined) {
            int = this.i.set(index, value == null ? null : value.i);
        }
        else {
            int = this.i.get(index);
        }
        let ext = null;
        if (int != null) {
            ext = int.externalObject;
            if (!ext) {
                ext = new IgrColumnGroupDescription();
                ext._implementation = int;
                int.externalObject = ext;
            }
        }
        return ext;
    }
    get count() {
        return this.i.size();
    }
    toArray() {
        let arr = [];
        for (let i = 0; i < this.count; i++) {
            arr[i] = this.item(i);
        }
        return arr;
    }
    *[Symbol.iterator]() {
        for (let i = 0; i < this.count; i++) {
            let item = this.item(i);
            if (item.externalObject) {
                item = item.externalObject;
            }
            yield item;
        }
    }
    findByName(name) {
        return null;
    }
    add(item) {
        let iv = this.i.g((item == null ? null : item.i));
        return (iv);
    }
    insert(index, item) {
        this.i.n(index, (item == null ? null : item.i));
    }
    clear() {
        this.i.m();
    }
    indexOf(item) {
        let iv = this.i.j((item == null ? null : item.i));
        return (iv);
    }
    remove(item) {
        let iv = this.i.h((item == null ? null : item.i));
        return (iv);
    }
    removeAt(index) {
        let iv = this.i.d(index);
        return (iv == null ? null : iv.externalObject);
    }
}

/**
 * Information about the current grouping applied to the grid.
*/
class IgrGridGroupDescriptionsChangedEventArgs {
    createImplementation() {
        return new GridGroupDescriptionsChangedEventArgs();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    get groupDescriptions() {
        if (this.i.groupDescriptions == null) {
            return null;
        }
        if (!this.i.groupDescriptions.externalObject) {
            let e = new IgrColumnGroupDescriptionCollection();
            e._implementation = this.i.groupDescriptions;
            this.i.groupDescriptions.externalObject = e;
        }
        return this.i.groupDescriptions.externalObject;
    }
    set groupDescriptions(v) {
        v == null ? this.i.groupDescriptions = null : this.i.groupDescriptions = v.i;
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let CurrentRendererSettings = /*@__PURE__*/ (() => {
    class CurrentRendererSettings extends Base {
        constructor() {
            super(...arguments);
            this.a = null;
            this.c = 0;
            this.d = 0;
            this.b = false;
        }
    }
    CurrentRendererSettings.$t = /*@__PURE__*/ markType(CurrentRendererSettings, 'CurrentRendererSettings');
    return CurrentRendererSettings;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let DataGridCellLayoutPanel = /*@__PURE__*/ (() => {
    class DataGridCellLayoutPanel extends Base {
        constructor(a, b, c) {
            super();
            this.e = null;
            this.l = false;
            this.r = null;
            this._element = null;
            this.g = null;
            this.j = false;
            this._rootElement = null;
            this.n = false;
            this.h = null;
            this.m = false;
            this._requestAnimationFrame = null;
            this.v = 0;
            this.p = -1;
            this.o = -1;
            this.k = false;
            this.q = 0;
            this.c = null;
            this.a = null;
            this.d = null;
            this.b = null;
            this.q = c;
            this.r = a;
            this.requestAnimationFrame = this.r.getRequestAnimationFrame();
            this.element = this.r.createElement("div");
            this.element.setRawStyleProperty("position", "relative");
            this.element.setRawStyleProperty("box-sizing", "border-box");
            this.refresh(this.e, false);
            this.g = b;
            this.j = false;
        }
        get element() {
            return this._element;
        }
        set element(a) {
            this._element = a;
        }
        get s() {
            return this.r;
        }
        get f() {
            return this.e;
        }
        get rootElement() {
            return this._rootElement;
        }
        set rootElement(a) {
            this._rootElement = a;
        }
        refresh(a, b) {
            this.e = a;
            this.aq(b);
        }
        viewportChanged() {
            this.aq(true);
        }
        invalidateVisibility(a) {
            this.h = a;
            this.n = true;
        }
        get initialRefreshFinished() {
            return this.j;
        }
        ae(a, b, c, d) {
            this.aq(true);
        }
        ap(a) {
            let b = this.g.b(this.r, a);
            if (b.isCanvasBased) {
                let c = b.nativeCell.ac = false;
            }
            else {
                let d = b.nativeCell.z;
                d.setRawStyleProperty("top", "-1000px");
                d.setRawStyleProperty("left", "-1000px");
                if (a.k.d != 0) {
                    d.setRawStyleProperty("clip", "auto");
                }
                this.ah(a, d);
            }
        }
        aq(a) {
            if (a) {
                this.l = true;
                this.x();
                return;
            }
            if (this.m) {
                return;
            }
            if (this.l) {
                return;
            }
            this.l = true;
            this.aa(runOn(this, this.x));
        }
        get requestAnimationFrame() {
            return this._requestAnimationFrame;
        }
        set requestAnimationFrame(a) {
            this._requestAnimationFrame = a;
        }
        aa(a) {
            this.requestAnimationFrame(a);
        }
        x() {
            if (!this.l) {
                return;
            }
            this.l = false;
            if (this.n) {
                this.n = false;
                this.h();
            }
            if (this.e == null) {
                return;
            }
            if (Rect.l_op_Equality(this.e.actualVisibleRegion, null) || this.e.actualVisibleRegion.isEmpty) {
                return;
            }
            this.j = true;
            if (this.p != this.e.absoluteWidth) {
                this.element.setRawStyleProperty("width", this.e.absoluteWidth + "px");
            }
            if (this.o != this.e.absoluteHeight) {
                this.element.setRawStyleProperty("height", this.e.absoluteHeight + "px");
            }
            this.p = this.e.absoluteWidth;
            this.o = this.e.absoluteHeight;
            let a = this.e.actualVisibleRegion.top;
            let b = this.e.actualVisibleRegion.left;
            let c = this.e.bu;
            let d = c.count;
            let e = this.e.bh;
            let f = this.e.bh.o;
            let g = f.count;
            let h = this.e.bh.p;
            for (let i = 0; i < g; i++) {
                if (h._inner[i]) {
                    continue;
                }
                let j = e.item(f._inner[i]);
                for (let k = 0; k < j.count; k++) {
                    let l = j._inner[k];
                    this.ap(l);
                }
            }
            e.u();
            let m = false;
            let n = this.v;
            let o = true;
            let p = false;
            for (let q = 0; q < d; q++) {
                let r = c._inner[q].q;
                let s = c._inner[q].q.count;
                let t = c._inner[q].p;
                for (let u = 0; u < s; u++) {
                    if (t._inner[u]) {
                        continue;
                    }
                    let v = r._inner[u];
                    let w = this.g.b(this.r, v);
                    if (!w.isCanvasBased) {
                        o = false;
                    }
                    else {
                        p = true;
                    }
                    if (v.a3) {
                        m = true;
                    }
                    if (v.t == 1 && v.gj != n) {
                        m = true;
                    }
                }
            }
            if (p) {
                this.z();
            }
            if (m) {
                if (this.v == 0x7FFFFFFFFFFFFFFF - 1) {
                    this.v = 0;
                }
                else {
                    this.v++;
                }
                n = this.v;
            }
            let x = 0;
            let y = new CurrentRendererSettings();
            let z = this.q;
            this.m = true;
            for (let aa = 0; aa < d; aa++) {
                let ab = c._inner[aa].q;
                let ac = c._inner[aa].q.count;
                let ad = c._inner[aa].p;
                for (let ae = 0; ae < ac; ae++) {
                    if (ad._inner[ae]) {
                        continue;
                    }
                    let af = ab._inner[ae];
                    let ag = this.g.b(this.r, af);
                    if (ag.isCanvasBased) {
                        let ah = y.a;
                        this.au(y, aa, af, this.e, x, m, o);
                        if (y.a != ah && m) {
                            x++;
                        }
                    }
                    let ai = ag.isCanvasBased;
                    let aj = null;
                    if (!ai) {
                        aj = ag.nativeCell.z;
                        if (af.t == 0) {
                            this.element.append(aj);
                            this.af(af, aj);
                        }
                    }
                    if (af.t == 1) {
                        if (ai) {
                            let ak = af.r.nativeCell;
                            ak.ac = true;
                        }
                    }
                    af.t = 2;
                    let al = (af.f2 + intDivide(af.gf, 2));
                    let am = (af.f4 + intDivide(af.e0, 2));
                    let an = (al - b) / this.e.actualVisibleRegion.width;
                    let ao = (am - a) / this.e.actualVisibleRegion.height;
                    if (af.a5) {
                        if (!ai) {
                            aj.setRawPosition(af.cc, af.cd);
                        }
                    }
                    if (!ai) {
                        if (af.k.d != 0) {
                            if (this.e.bk) {
                                aj.setRawStyleProperty("clip", this.w(af.k.d, af.cc, af.cd));
                            }
                            else {
                                aj.setRawStyleProperty("clip", "auto");
                            }
                        }
                        else {
                            aj.setRawStyleProperty("clip", "auto");
                        }
                    }
                    af.jg();
                    if (ai) {
                        let ap = af.r.nativeCell;
                        ap.ch(z);
                    }
                    af.r.modelUpdated(af);
                    if (ai && y.b) {
                        let aq = y.a;
                        aq.z();
                        if (af.k.d != 0 && this.e.bk) {
                            aq.ae(this.av(af.k.d));
                        }
                        let ar = af.r.nativeCell;
                        ar.bz(aq, y.c, y.d, af.cc, af.cd, z);
                        aq.y();
                    }
                    af.i9();
                    if (m) {
                        af.gj = n;
                        if (!ai) {
                            aj.setRawStyleProperty("z-index", x.toString());
                        }
                        x++;
                    }
                    this.ag(af, aj);
                }
            }
            this.m = false;
            if (y.a != null && this.q != 1) {
                y.a.y();
            }
            this.al();
        }
        al() {
        }
        z() {
            if (!this.k) {
                this.k = true;
                let a = this.r.rootWrapper;
                let b = (window.navigator.msPointerEnabled && MSGesture !== undefined);
                let c = (window.PointerEvent || window.navigator.pointerEnabled);
                let d = (window.TouchEvent);
                if ((b || c)) {
                    a.listen("pointerdown", runOn(this, this.am));
                    a.listen("pointerup", runOn(this, this.ao));
                    a.listen("pointermove", runOn(this, this.an));
                }
                else {
                    a.listen("mousedown", runOn(this, this.ab));
                    a.listen("mouseup", runOn(this, this.ad));
                    a.listen("mousemove", runOn(this, this.ac));
                    a.listen("touchstart", runOn(this, this.ar));
                    a.listen("touchend", runOn(this, this.at));
                    a.listen("touchmove", runOn(this, this.as));
                }
                a.listen("dblclick", runOn(this, this.y));
            }
        }
        ab(a) {
            this.ak(a, false);
        }
        ad(a) {
            this.ai(a, false);
        }
        ac(a) {
            this.aj(a, false);
        }
        y(a) {
            if (this.e == null) {
                return;
            }
            let b = this.r.rootWrapper.getOffset();
            let c = this.e.e(a.pageX - b.left, a.pageY - b.top);
            if (c == null) {
                return;
            }
            if (c.r != null) {
                if (c.r.isCanvasBased && c.r.nativeCell != null) {
                    c.r.nativeCell.onDoubleClick(a);
                }
            }
        }
        am(e_) {
            let a = (e_.originalEvent.pointerType);
            if (a == "touch") {
                this.ar(e_);
            }
            else {
                this.ab(e_);
            }
        }
        an(e_) {
            let a = (e_.originalEvent.pointerType);
            if (a == "touch") {
                this.as(e_);
            }
            else {
                this.ac(e_);
            }
        }
        ao(e_) {
            let a = (e_.originalEvent.pointerType);
            if (a == "touch") {
                this.at(e_);
            }
            else {
                this.ad(e_);
            }
        }
        ar(a) {
            this.ak(a, true);
        }
        ak(a, b) {
            if (this.e == null) {
                return;
            }
            let c = this.r.rootWrapper.getOffset();
            let d = this.e.e(a.pageX - c.left, a.pageY - c.top);
            if (d == null) {
                return;
            }
            if (d.r != null) {
                if (d.r.isCanvasBased && d.r.nativeCell != null) {
                    d.r.nativeCell.onContactStarted(a, b);
                }
            }
        }
        as(a) {
            this.aj(a, true);
        }
        aj(a, b) {
            if (this.e == null) {
                return;
            }
            let c = this.r.rootWrapper.getOffset();
            let d = this.e.e(a.pageX - c.left, a.pageY - c.top);
            if (d == null) {
                return;
            }
            if (d.r != null) {
                if (d.r.isCanvasBased && d.r.nativeCell != null) {
                    d.r.nativeCell.onContactMoved(a, b);
                }
            }
        }
        at(a) {
            this.ai(a, true);
        }
        ai(a, b) {
            if (this.e == null) {
                return;
            }
            let c = this.r.rootWrapper.getOffset();
            let d = this.e.e(a.pageX - c.left, a.pageY - c.top);
            if (d == null) {
                return;
            }
            if (d.r != null) {
                if (d.r.isCanvasBased && d.r.nativeCell != null) {
                    d.r.nativeCell.onContactCompleted(a, b);
                }
            }
        }
        au(a, b, c, d, e, f, g) {
            if (g) {
                b = 0;
            }
            if (this.c == null) {
                this.c = new Array(d.bu.count);
                this.a = new Array(d.bu.count);
                this.d = new Array(d.bu.count);
                this.b = new Array(d.bu.count);
                for (let h = 0; h < d.bu.count; h++) {
                    this.c[h] = null;
                    this.a[h] = null;
                    this.d[h] = -1;
                    this.b[h] = -1;
                }
            }
            if (this.c[b] == null) {
                let i = this.r.createElement("canvas");
                this.a[b] = i;
                i.setRawStyleProperty("position", "absolute");
                i.setRawStyleProperty("z-index", e.toString());
                this.element.append(i);
                let j = this.r.get2DCanvasContext(i);
                let k = ((() => {
                    let $ret = new CanvasViewRenderer();
                    $ret.h$d = j;
                    return $ret;
                })());
                this.c[b] = new RenderingContext(k, j);
            }
            if (a.a != this.c[b]) {
                a.a = this.c[b];
                a.b = true;
                a.c = d.actualVisibleRegion.left;
                a.d = d.actualVisibleRegion.top;
                let l = d.actualVisibleRegion.width * this.q;
                let m = d.actualVisibleRegion.height * this.q;
                if (l != this.d[b] || m != this.b[b]) {
                    this.a[b].setRawSize(d.actualVisibleRegion.width, d.actualVisibleRegion.height);
                    this.a[b].setAttribute("width", l + "px");
                    this.a[b].setAttribute("height", m + "px");
                    this.d[b] = l;
                    this.b[b] = m;
                }
                if (f) {
                    this.a[b].setRawStyleProperty("z-index", e.toString());
                }
                a.a.k(0, 0, d.actualVisibleRegion.width, d.actualVisibleRegion.height);
                this.a[b].setRawPosition(a.c, a.d);
            }
        }
        av(a) {
            let b = this.e.b8;
            let c = this.e.b3 + this.e.b0;
            let d = this.e.cf;
            let e = this.e.by;
            if (a == 2) {
                c = Math.min(this.e.cj, this.e.b6) - this.e.cg - this.e.b1;
                d = this.e.cg;
            }
            return new Rect(0, c, b, d, e);
        }
        w(a, b, c) {
            if (a != 0) {
                let d = this.av(a);
                let e = d.x - b;
                let f = d.y - c;
                let g = e + d.width;
                let h = f + d.height;
                return "rect(" + f + "px," + g + "px," + h + "px," + e + "px)";
            }
            return "auto";
        }
        af(a, b) {
        }
        ah(a, b) {
        }
        ag(a, b) {
        }
    }
    DataGridCellLayoutPanel.$t = /*@__PURE__*/ markType(DataGridCellLayoutPanel, 'DataGridCellLayoutPanel', Base.$, [ICellRenderingEngine_$type]);
    return DataGridCellLayoutPanel;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridExternalWrapper = /*@__PURE__*/ (() => {
    class GridExternalWrapper extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.a = a;
        }
        get renderer() {
            let grid_ = this.a;
            return (grid_._renderer);
        }
        onContentSizeChanged() {
            let grid_ = this.a;
            grid_.refreshContentSize();
        }
        createLocalDataSource(a) {
            let b = new LocalDataSource();
            b.dataSource = a;
            return b;
        }
        createTextColumn(a) {
            if (TypeRegistrar.isRegistered("IgxTextColumnComponent")) {
                let column_ = TypeRegistrar.create("IgxTextColumnComponent");
                let b = (column_._implementation);
                b.hy = a;
                return b;
            }
            return null;
        }
        createNumericColumn(a) {
            if (TypeRegistrar.isRegistered("IgxNumericColumnComponent")) {
                let column_ = TypeRegistrar.create("IgxNumericColumnComponent");
                let b = (column_._implementation);
                b.hy = a;
                return b;
            }
            return null;
        }
        createDateTimeColumn(a) {
            if (TypeRegistrar.isRegistered("IgxDateTimeColumnComponent")) {
                let column_ = TypeRegistrar.create("IgxDateTimeColumnComponent");
                let b = (column_._implementation);
                b.hy = a;
                return b;
            }
            return null;
        }
        createImageColumn(a) {
            if (TypeRegistrar.isRegistered("IgxImageColumnComponent")) {
                let column_ = TypeRegistrar.create("IgxImageColumnComponent");
                let b = (column_._implementation);
                b.hy = a;
                return b;
            }
            return null;
        }
        createTemplateColumn(a) {
            if (TypeRegistrar.isRegistered("IgxTemplateColumnComponent")) {
                let column_ = TypeRegistrar.create("IgxTemplateColumnComponent");
                let b = (column_._implementation);
                b.hy = a;
                return b;
            }
            return null;
        }
        createComboBoxColumn(a) {
            if (TypeRegistrar.isRegistered("IgxComboBoxColumnComponent")) {
                let column_ = TypeRegistrar.create("IgxComboBoxColumnComponent");
                let b = (column_._implementation);
                b.hy = a;
                return b;
            }
            return null;
        }
        focusScroller() {
            let grid_ = this.a;
            grid_._focusScroller();
        }
        insertExternalColumnAtIndex(index_, column_) {
            let grid_ = this.a;
            grid_._insertExternalColumnAtIndex(index_, column_);
        }
        removeExternalColumn(column_) {
            let grid_ = this.a;
            grid_._removeExternalColumn(column_);
        }
        setDefaultCursor() {
            let grid_ = this.a;
            grid_._setDefaultCursor();
        }
        setResizeCursor() {
            let grid_ = this.a;
            grid_._setResizeCursor();
        }
        setHandCursor() {
            let grid_ = this.a;
            grid_._setHandCursor();
        }
        setBorder(a, b, c, d, e, f, g, h, i) {
            let grid_ = this.a;
            let color_ = a._fill;
            let borderLeft_ = b;
            let borderTop_ = c;
            let borderRight_ = d;
            let borderBottom_ = e;
            let topLeftRadius_ = f;
            let topRightRadius_ = g;
            let botLeftRadius_ = h;
            let botRightRadius_ = i;
            grid_._setBorder(color_, borderLeft_, borderTop_, borderRight_, borderBottom_, topLeftRadius_, topRightRadius_, botLeftRadius_, botRightRadius_);
        }
        setScrollerVerticalTrackInset(a) {
            this.a._setScrollerVerticalTrackInset(a);
        }
        ensureColumnsAreManual() {
            let grid_ = this.a;
            grid_._ensureColumnsAreManual();
        }
    }
    GridExternalWrapper.$t = /*@__PURE__*/ markType(GridExternalWrapper, 'GridExternalWrapper', Base.$, [IExternalGrid_$type]);
    return GridExternalWrapper;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let BrowserTickProvider = /*@__PURE__*/ (() => {
    class BrowserTickProvider extends Base {
        constructor(a) {
            super();
            this.e = 0;
            this.c = null;
            this._requestAnimationFrame = null;
            this.d = new List$1(Delegate_$type, 0);
            this.b = false;
            this.requestAnimationFrame = a.getRequestAnimationFrame();
            this.c = new Dictionary$2(Number_$type, Delegate_$type, 0);
        }
        get requestAnimationFrame() {
            return this._requestAnimationFrame;
        }
        set requestAnimationFrame(a) {
            this._requestAnimationFrame = a;
        }
        f() {
            this.b = false;
            this.d.clear();
            for (let a of fromEnum(this.c.values)) {
                this.d.add(a);
            }
            for (let b = 0; b < this.d.count; b++) {
                this.d._inner[b]();
            }
            this.d.clear();
        }
        setupTicking(a) {
            let b = this.e;
            this.e++;
            this.c.item(b, a);
            return b;
        }
        requestFrame(a) {
            if (this.b) {
                return;
            }
            this.b = true;
            this.requestAnimationFrame(runOn(this, this.f));
        }
        teardownTicking(a) {
            if (this.c.containsKey(a)) {
                this.c.removeItem(a);
            }
        }
    }
    BrowserTickProvider.$t = /*@__PURE__*/ markType(BrowserTickProvider, 'BrowserTickProvider', Base.$, [ITickProvider_$type]);
    return BrowserTickProvider;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let BrowserPixelConverter = /*@__PURE__*/ (() => {
    class BrowserPixelConverter extends Base {
        devicePixelsToPixel(a) {
            return a;
        }
    }
    BrowserPixelConverter.$t = /*@__PURE__*/ markType(BrowserPixelConverter, 'BrowserPixelConverter', Base.$, [IPlatformPixelConverter_$type]);
    return BrowserPixelConverter;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let INativeCell_$type = /*@__PURE__*/ new Type(null, 'INativeCell');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let CanvasPlaceholderView = /*@__PURE__*/ (() => {
    class CanvasPlaceholderView extends Base {
        constructor() {
            super();
            this.f = null;
            this.j = new Color();
            this.g = 1;
            this.a = true;
            this.c = 0;
            this.b = 0;
            this.k = new Color();
        }
        get l() {
            return this.j;
        }
        set l(a) {
            this.j = a;
            this.i();
        }
        get h() {
            return this.g;
        }
        set h(a) {
            this.a = true;
            this.g = a;
            this.i();
        }
        get e() {
            return this.c;
        }
        set e(a) {
            this.c = a;
            this.i();
        }
        get d() {
            return this.b;
        }
        set d(a) {
            this.b = a;
            this.i();
        }
        i() {
            let a = this.e;
            let b = this.d;
            this.k = Color.u(truncate((this.j.l * this.g)), this.j.o, this.j.n, this.j.m);
        }
    }
    CanvasPlaceholderView.$t = /*@__PURE__*/ markType(CanvasPlaceholderView, 'CanvasPlaceholderView');
    return CanvasPlaceholderView;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let CanvasGridCellBase = /*@__PURE__*/ (() => {
    class CanvasGridCellBase extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.r = true;
            this.o = true;
            this.k = null;
            this.bk = null;
            this.bx = null;
            this.l = false;
            this.ao = 1;
            this.as = 5;
            this.au = 5;
            this.at = 5;
            this.ar = 5;
            this.cu = null;
            this.ag = 0;
            this.ai = 0;
            this.ah = 0;
            this.af = 0;
            this.c2 = new Rectangle();
            this.cy = new Line();
            this.c1 = new Line();
            this.cz = new Line();
            this.cx = new Line();
            this.c0 = new Line();
            this.ay = 0;
            this.a0 = 0;
            this.a1 = 0;
            this.a2 = 0;
            this.bm = null;
            this.j = null;
            this.ak = 0;
            this.aj = 0;
            this.am = 0;
            this.al = 0;
            this.t = true;
            this.az = NaN;
            this.ct = new TextBlock();
            this.cw = Color.u(255, 0, 0, 0);
            this.s = true;
            this.aq = 0;
            this.a3 = 0;
            this.cv = Color.u(255, 255, 255, 255);
            this.m = false;
            this.g = null;
            this.c = 0;
            this.e = 0;
            this.bw = 1;
            this.q = false;
            this.ax = 0;
            this.aw = 0;
            this.i = ((() => {
                let $ret = new FontInfo();
                $ret.n = "Verdana";
                $ret.d = 12;
                return $ret;
            })());
            this.p = true;
            this.bp = -1;
            this.bu = 0;
            this.bv = 0;
            this.n = false;
            this.bn = 0;
            this.b = 0;
            this.ap = NaN;
            this.h = null;
            this.br = -1;
            this.an = NaN;
            this.f = 1;
            this.av = 1;
            this.bk = a;
        }
        get y() {
            return this.o;
        }
        set y(a) {
            this.o = a;
        }
        ci(a) {
            this.k = a;
        }
        b3() {
            this.o = true;
            if (this.k != null) {
                this.k();
            }
        }
        get isCanvasBased() {
            return true;
        }
        get bl() {
            return this.bk;
        }
        ck(a) {
            this.bx = a;
            this.o = true;
            this.r = true;
        }
        get templateContext() {
            return this.j.g();
        }
        get u() {
            return this.l;
        }
        set u(a) {
            this.l = a;
        }
        get_aa() {
            return false;
        }
        get aa() {
            return this.get_aa();
        }
        ca(a, b, c, d, e) {
            this.o = true;
            this.cu = a;
            this.ag = b;
            this.ai = c;
            this.ah = d;
            this.af = e;
            this.r = true;
        }
        cb(a) {
            this.o = true;
            this.ao = a;
            this.ct._opacity = this.ao;
        }
        get ba() {
            return this.as;
        }
        get bc() {
            return this.au;
        }
        get bb() {
            return this.at;
        }
        get a9() {
            return this.ar;
        }
        get a5() {
            return this.ag;
        }
        get a7() {
            return this.ai;
        }
        get a6() {
            return this.ah;
        }
        get a4() {
            return this.af;
        }
        get be() {
            return this.ay;
        }
        get bg() {
            return this.a0;
        }
        get bh() {
            return this.a2;
        }
        get_ab() {
            return false;
        }
        get ab() {
            return this.get_ab();
        }
        bz(a, b, c, d, e, f) {
            let g = true;
            let h = true;
            let i = false;
            if (this.ab) {
                g = false;
                h = false;
                i = false;
            }
            this.b0(a, b, c, d, e, f, g, h, i);
        }
        get resized() {
            return this.t;
        }
        ensureCorrectSize() {
            this.t = this.v(this.av);
            return this.t;
        }
        b0(a, b, c, d, e, f, g, h, i) {
            if (!this.s) {
                return;
            }
            if (this.bw != 1) {
                a.ad(this.bw);
            }
            this.av = f;
            if (!i) {
                this.b1();
                this.ensureCorrectSize();
            }
            if (this.y || this.t || i) {
                this.y = false;
                let j = this.j;
                if (this.p || this.t || (this.i != null && this.i.g != this.bp)) {
                    this.p = false;
                    this.bp = this.i.g;
                    j.ac(this.i);
                }
                if (f != 1) {
                    this.j.z();
                    this.j.aa(f, f);
                }
                if (g) {
                    this.b4();
                }
                if (h) {
                    this.b5(this.j);
                }
                if (f != 1) {
                    this.j.y();
                }
            }
            if (!i) {
                let k = Math.round((d - b) * f);
                let l = Math.round((e - c) * f);
                if (this.ak == this.am && this.aj == this.al) {
                    a.m(this.bm.getNativeElement(), 1, k, l, this.ak, this.aj);
                }
                else {
                    a.n(this.bm.getNativeElement(), 1, 0, 0, this.ak, this.aj, k, l, this.ak, this.aj);
                }
            }
            if (this.bw != 1) {
                a.ad(1);
            }
        }
        b4() {
            if (!this.m) {
                this.j.k(0, 0, this.am, this.al);
            }
            this.c2.n = 0;
            this.c2.o = 0;
            this.c2.width = this.a3;
            this.c2.height = this.aq;
            this.j.v(this.c2);
            if (this.cu != null) {
                if (this.ag > 0) {
                    this.cy.am = 0;
                    this.cy.ak = this.ag / 2;
                    this.cy.an = this.aq;
                    this.cy.al = this.ag / 2;
                    this.cy._stroke = this.cu;
                    this.cy.ac = this.ag;
                    this.j.r(this.cy);
                }
                if (this.ah > 0) {
                    this.cz.am = 0;
                    this.cz.ak = Math.max(0, (this.a3 - (this.ah / 2)));
                    this.cz.an = this.aq;
                    this.cz.al = Math.max(0, (this.a3 - (this.ah / 2)));
                    this.cz._stroke = this.cu;
                    this.cz.ac = this.ah;
                    this.j.r(this.cz);
                }
                if (this.ai > 0) {
                    this.c1.am = this.ai / 2;
                    this.c1.ak = this.ag;
                    this.c1.an = this.ai / 2;
                    this.c1.al = Math.max(0, (this.a3 - (this.ah / 2)));
                    this.c1._stroke = this.cu;
                    this.c1.ac = this.ai;
                    this.j.r(this.c1);
                }
                if (this.af > 0) {
                    this.cx.am = Math.max(0, this.aq - (this.af / 2));
                    this.cx.ak = this.ag;
                    this.cx.an = Math.max(0, this.aq - (this.af / 2));
                    this.cx.al = Math.max(0, (this.a3 - (this.ah / 2)));
                    this.cx._stroke = this.cu;
                    this.cx.ac = this.af;
                    this.j.r(this.cx);
                }
            }
        }
        ch(a) {
            this.av = a;
        }
        renderStandardContent() {
            this.b0(this.j, 0, 0, 0, 0, this.av, false, true, true);
        }
        renderStandardBackground() {
            this.b0(this.j, 0, 0, 0, 0, this.av, true, false, true);
        }
        b5(a) {
            if (this.r) {
                this.cs();
                this.r = false;
            }
            if (this.ct.ak != null) {
                this.ct.n = this.ay;
                this.ct.o = this.a1;
                this.j.w(this.ct);
                if (this.q) {
                    this.c0.ac = 1;
                    this.c0.ak = this.ay;
                    this.c0.am = this.a2 - 2;
                    this.c0.al = this.ay + (this.a0 - this.ay);
                    this.c0.an = this.a2 - 2;
                    this.c0._stroke = this.ct.am;
                    this.j.r(this.c0);
                }
            }
        }
        b1() {
            if (this.bm == null) {
                this.bm = this.bk.createElement("canvas");
                let a = this.bk.get2DCanvasContext(this.bm);
                let b = ((() => {
                    let $ret = new CanvasViewRenderer();
                    $ret.h$d = a;
                    return $ret;
                })());
                this.j = new RenderingContext(b, a);
                this.r = true;
            }
        }
        v(a) {
            let b = Math.round(this.a3 * a);
            let c = Math.round(this.aq * a);
            this.ak = b;
            this.aj = c;
            let d = this.bd(b);
            let e = this.bd(c);
            if (d != this.am || e != this.al) {
                this.bm.setAttribute("width", d + "px");
                this.bm.setAttribute("height", e + "px");
                this.am = d;
                this.al = e;
                this.ak = b;
                this.aj = c;
                return true;
            }
            return false;
        }
        bd(a) {
            return a;
        }
        cg(a, b, c, d) {
            this.o = true;
            this.as = a;
            this.au = b;
            this.at = c;
            this.ar = d;
            this.r = true;
        }
        get bf() {
            return this.az;
        }
        set bf(a) {
            this.az = a;
        }
        cl(a) {
            this.o = true;
            this.cw = a;
            this.ct.am = ((() => {
                let $ret = new Brush();
                $ret.color = this.cw;
                return $ret;
            })());
        }
        get_z() {
            return false;
        }
        get z() {
            return this.get_z();
        }
        get ac() {
            return this.s;
        }
        set ac(a) {
            this.o = true;
            this.s = a;
        }
        get a8() {
            return this.aq;
        }
        get bj() {
            return this.a3;
        }
        cd(a) {
            this.o = true;
            this.aq = a;
            this.c2.height = this.aq;
        }
        cn(a) {
            this.o = true;
            this.a3 = a;
            this.c2.width = this.a3;
            this.r = true;
        }
        by() {
            if (!this.aa) {
                return;
            }
            this.l = true;
            this.g = new CanvasPlaceholderView();
            this.c = 0;
            this.e = 1;
            this.g.l = Color.u(120, 120, 120, 120);
            this.g.h = 0;
        }
        b9(a) {
            this.o = true;
            this.cv = a;
            this.m = this.cv.l == 255;
            this.c2._fill = ((() => {
                let $ret = new Brush();
                $ret.color = this.cv;
                return $ret;
            })());
        }
        cf(a) {
            this.o = true;
            this.bw = a;
        }
        cj(a) {
            this.q = a;
            this.o = true;
        }
        cr(a) {
            if (!this.aa) {
                return;
            }
            this.o = true;
            this.g.h = (a * 0.20000000298023224);
        }
        b2(a, b, c, d) {
            if (this.g != null) {
                let e = this.ax;
                let f = this.aw;
                if (this.e == 1) {
                    b = truncate((b + (d / 2) - (f / 2)));
                }
                else if (this.e == 2) {
                    b = truncate((b + (d) - (f)));
                }
                if (this.c == 1) {
                    a = truncate((a + (c / 2) - (e / 2)));
                }
                else if (this.c == 2) {
                    a = truncate((a + (c) - (e)));
                }
            }
        }
        cc(a) {
            this.i = a;
            this.p = true;
            this.o = true;
            this.r = true;
        }
        cq(a) {
            if (!this.aa) {
                return;
            }
            this.o = true;
            let b = DeviceUtils.f(12);
            if (a.af != null && !isNaN_(a.af.d)) {
                b = a.af.d;
            }
            if (this.aw != b) {
                this.aw = b;
            }
            let c = a.gf * 0.2;
            let d = a.e0 * 0.6;
            if (this.ax >= c && this.ax <= d) {
                return;
            }
            let e = (CanvasGridCellBase.bt.nextDouble() * (d - c) + c);
            if (this.ax != e) {
                this.ax = e;
            }
        }
        co(a, b) {
            if (!this.aa) {
                return;
            }
            this.o = true;
            this.c = a;
            this.e = b;
        }
        cp(a) {
            if (!this.aa) {
                return;
            }
            this.o = true;
        }
        b8(a) {
            this.a = a;
        }
        get d() {
            return this.b;
        }
        ce(a) {
            this.b = a;
            this.o = true;
            this.r = true;
        }
        cs() {
            if (this.bx == null) {
                return;
            }
            if (this.j == null) {
                return;
            }
            if (this.p || (this.i != null && this.i.g != this.bp)) {
                this.p = false;
                this.bp = this.i.g;
                this.j.ac(this.i);
            }
            let a;
            if (this.h != this.i || this.br != this.i.g) {
                this.h = this.i;
                this.br = this.i.g;
                this.ap = FontUtil.getCurrentFontHeight(this.bk, this.i);
            }
            a = this.ap;
            let b = 0;
            let c = 0;
            let d = this.a3;
            let e = this.aq;
            d -= (this.ag + this.as + this.ah + this.at);
            e -= (this.ai + this.au + this.af + this.ar);
            d = Math.max(d, 0);
            e = Math.max(e, 0);
            let f = d;
            if (!isNaN_(this.az) && this.az < d) {
                f = this.az;
            }
            let g = this.bi(this.ct, this.bx, f, this.j);
            switch (this.b) {
                case 0:
                    b = this.as + this.ag;
                    break;
                case 3:
                case 1:
                    b = this.as + this.ag + ((d / 2) - (g / 2));
                    break;
                case 2:
                    b = Math.max(0, (this.a3 - (this.at + this.ah))) - g;
                    break;
            }
            switch (this.f) {
                case 0:
                    c = this.au + this.ai;
                    break;
                case 3:
                case 1:
                    c = this.au + this.ai + ((e / 2) - (a / 2));
                    break;
                case 2:
                    c = Math.max(0, (this.aq - (this.ar + this.af))) - a;
                    break;
            }
            this.ay = b;
            this.a0 = this.ay + g;
            this.a1 = c;
            this.a2 = this.a1 + (a / 2);
            this.o = true;
        }
        bi(a, b, c, d) {
            let e = b;
            let f = e.length;
            let g = ("\u2026");
            if (isNaN_(this.an)) {
                this.an = d.f(g);
            }
            if (c <= this.an) {
                a.ak = g;
                return this.an;
            }
            let h = d.f(e);
            if (h <= c) {
                a.ak = b;
                return h;
            }
            let i = c / h;
            let j = truncate(Math.ceil(f * i));
            let k = e.substr(0, j) + g;
            let l = d.f(k);
            if (l > c) {
                f = j;
            }
            else {
                j = j + 1;
                k = e.substr(0, j) + g;
                l = d.f(k);
                if (l > c) {
                    f = j;
                }
            }
            while (h > c && f > 0) {
                f--;
                e = e.substr(0, f) + g;
                h = d.f(e);
            }
            a.ak = e;
            return h;
        }
        cm(a) {
            this.f = a;
            this.o = true;
            this.r = true;
        }
        ae(a) {
            return a.isClickActionDesired;
        }
        onContactStarted(a, b) {
            if (this.a != null && this.ae(this.a)) {
                this.bu = a.pageX;
                this.bv = a.pageY;
                this.a.mouseDownCell(this.bu, this.bv);
            }
        }
        onContactMoved(a, b) {
            if (this.a != null && this.ae(this.a)) {
                let c = a.pageX;
                let d = a.pageY;
                if (this.a.isMouseDown) {
                    if (b) {
                        if (PointUtil.equals(this.a.mousePosition, null) || Math.abs(c - this.a.mousePosition.x) > CanvasGridCellBase.bq || Math.abs(d - this.a.mousePosition.y) > CanvasGridCellBase.bq) {
                            this.a.mouseUpCell(c, d);
                        }
                        else {
                            a.stopPropagation();
                        }
                    }
                    else {
                        if (PointUtil.equals(this.a.mousePosition, null)) {
                            this.a.mouseUpCell(c, d);
                        }
                        else {
                            if (Math.abs(c - this.a.mousePosition.x) > CanvasGridCellBase.bo || Math.abs(d - this.a.mousePosition.y) > CanvasGridCellBase.bo) {
                                this.a.isControlPressed = a.ctrlKey;
                                this.a.dragStarted();
                            }
                        }
                    }
                }
            }
        }
        onContactCompleted(a, b) {
            if (this.a != null && this.ae(this.a)) {
                let c = a.pageX;
                let d = a.pageY;
                if (PointUtil.equals(this.a.mousePosition, null) || Math.abs(c - this.a.mousePosition.x) > CanvasGridCellBase.bq || Math.abs(d - this.a.mousePosition.y) > CanvasGridCellBase.bq || this.a.isDrag) {
                    this.a.mouseUpCell(c, d);
                }
                if (this.a.isCellDown()) {
                    this.a.isControlPressed = a.ctrlKey;
                    this.a.isShiftPressed = a.shiftKey;
                    this.a.clickCell(a.which == 1);
                    this.a.mouseUpCell(a.pageX, a.pageY);
                }
            }
        }
        onDoubleClick(a) {
            this.a.doubleClicked();
        }
    }
    CanvasGridCellBase.$t = /*@__PURE__*/ markType(CanvasGridCellBase, 'CanvasGridCellBase', Base.$, [INativeCell_$type]);
    CanvasGridCellBase.bt = /*@__PURE__*/ new Random(0);
    CanvasGridCellBase.bq = 10;
    CanvasGridCellBase.bo = 3;
    return CanvasGridCellBase;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let CanvasTextCell = /*@__PURE__*/ (() => {
    class CanvasTextCell extends CanvasGridCellBase {
        constructor(a) {
            super(a);
            this.ce(0);
            this.cm(1);
        }
        get_aa() {
            return true;
        }
    }
    CanvasTextCell.$t = /*@__PURE__*/ markType(CanvasTextCell, 'CanvasTextCell', CanvasGridCellBase.$);
    return CanvasTextCell;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let CanvasCellPresenterBase = /*@__PURE__*/ (() => {
    class CanvasCellPresenterBase extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.a = a;
        }
        modelUpdated(a) {
            this.b(a);
        }
        b(a) {
            this.a.b8(a.c);
            if (a.ax(CellModel.d2) || a.ax(CellModel.d6) || a.ax(CellModel.d4) || a.ax(CellModel.d0)) {
                this.a.cg(a.d1, a.d5, a.d3, a.dz);
            }
            if (a.aq) {
                this.a.ca(a.kc, a.dp, a.du, a.ds, a.dm);
            }
            if (a.ba) {
                this.a.cd(a.e0);
                this.a.cn(a.gf);
            }
            if (a.as) {
                if (a.a4 && !this.a.u) {
                    this.a.by();
                }
                if (a.ax(CellModel.dl)) {
                    this.a.b9(a.kb.color);
                }
                if (a.ax(CellModel.dy)) {
                    this.a.cf(a.b0);
                }
            }
            if (a.ba && a.a4) {
                this.a.cq(a);
            }
        }
        c(a, b, c) {
            if (c == 0) {
                return a.color;
            }
            if (c == 1) {
                return b.color;
            }
            let d = BrushUtil.k(a, c, b, 0);
            return d.color;
        }
        get nativeCell() {
            return this.a;
        }
        get isCanvasBased() {
            return true;
        }
    }
    CanvasCellPresenterBase.$t = /*@__PURE__*/ markType(CanvasCellPresenterBase, 'CanvasCellPresenterBase', Base.$, [ICellPresenter_$type]);
    return CanvasCellPresenterBase;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let CanvasContentCellModelHelper = /*@__PURE__*/ (() => {
    class CanvasContentCellModelHelper extends Base {
        static e(a) {
            if (a == null) {
                return CanvasContentCellModelHelper.d;
            }
            return a.color;
        }
        static a(a, b, c) {
            if (b.as) {
                if (b.ax(CellModel.ei) || b.ax(CellModel.dw) || b.ax(CellModel.ge) || b.aw("IsRowPinned") || b.aw("IsRowSticky") || b.aw("PinnedRowOpacity")) {
                    let d = Math.min(1, Math.max(0, b.cb));
                    let e = b.bz * (1 - d);
                    c.cb(e);
                    if (b.a4) {
                        c.cr(b.bz * d);
                    }
                }
                if (b.ax(CellModel.d7)) {
                    CanvasContentCellModelHelper.c(c, b.kd);
                    if (b.a4) {
                        c.cp(b.kd);
                    }
                }
                if (b.ax(CellModel.fi)) {
                }
                if (b.ax(CellModel.e2) || b.ax(CellModel.gd)) {
                    let f = b.f;
                    let g = b.h;
                    c.ce(f);
                    c.cm(g);
                    if (b.a4) {
                        c.co(f, g);
                    }
                }
                if (b.aw("ActualFontInfo")) {
                    CanvasContentCellModelHelper.b(a, c, b.af);
                }
                if (b.aw("IsEdited") || b.aw("IsDeleted")) {
                    if (b.ay || b.av) {
                        if (b.av) {
                            c.cj(true);
                        }
                        else {
                            c.cj(false);
                        }
                    }
                    else {
                        c.cj(false);
                    }
                }
            }
        }
        static b(a, b, c) {
            if (c == null) {
                c = FontUtil.getDefaultFont(a);
            }
            b.cc(c);
        }
        static c(a, b) {
            let c = CanvasContentCellModelHelper.e(b);
            a.cl(c);
        }
    }
    CanvasContentCellModelHelper.$t = /*@__PURE__*/ markType(CanvasContentCellModelHelper, 'CanvasContentCellModelHelper');
    CanvasContentCellModelHelper.d = /*@__PURE__*/ Color.u(0, 0, 0, 0);
    return CanvasContentCellModelHelper;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let CanvasTextCellPresenter = /*@__PURE__*/ (() => {
    class CanvasTextCellPresenter extends CanvasCellPresenterBase {
        constructor(a) {
            super(a);
        }
        get d() {
            return this.a;
        }
        b(a) {
            super.b(a);
            let b = a;
            if (a.as) {
                if (a.ax(TextCellModel.kq) || a.ax(CellModel.fl)) {
                    if (b.ks != null) {
                        b.ip = b.ks;
                    }
                    else {
                        if (b.go == null) {
                            b.ip = "";
                        }
                        else {
                            b.ip = b.go.toString();
                        }
                    }
                    this.d.ck(b.ip);
                }
                CanvasContentCellModelHelper.a(this.a.bl, b, this.a);
            }
        }
    }
    CanvasTextCellPresenter.$t = /*@__PURE__*/ markType(CanvasTextCellPresenter, 'CanvasTextCellPresenter', CanvasCellPresenterBase.$);
    return CanvasTextCellPresenter;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let CanvasNumericCell = /*@__PURE__*/ (() => {
    class CanvasNumericCell extends CanvasTextCell {
        constructor(a) {
            super(a);
            this.ce(2);
            this.cm(1);
        }
    }
    CanvasNumericCell.$t = /*@__PURE__*/ markType(CanvasNumericCell, 'CanvasNumericCell', CanvasTextCell.$);
    return CanvasNumericCell;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let NumericCellFormatter = /*@__PURE__*/ (() => {
    class NumericCellFormatter extends Base {
        static c() {
            if (NumericCellFormatter.a != null) {
                return NumericCellFormatter.a;
            }
            let a = "";
            let b = 1.1;
            let c = b.toLocaleString();
            let d = false;
            for (let e = 0; e < c.length; e++) {
                if (c.charAt(e) == '1') {
                    d = !d;
                }
                if (c.charAt(e) != '1' && d) {
                    a += c.charAt(e);
                }
            }
            NumericCellFormatter.a = a;
            return NumericCellFormatter.a;
        }
        static b(a) {
            if (a.ks != null) {
                return a.ks.i(a.kz);
            }
            let b = a.kz;
            let c = a.kz;
            let d = 10;
            let e = 0;
            let f = "0";
            if (isNaN_(a.kz)) {
                return "";
            }
            let g = 0;
            if (a.kz >= 0) {
                g = a.kz - Math.floor(a.kz);
            }
            else {
                g = Math.abs(a.kz - Math.ceil(a.kz));
            }
            let h = 0;
            if (a.kz >= 0) {
                h = a.kz - g;
            }
            else {
                h = a.kz + g;
            }
            let i = Math.abs(h);
            let j = g.toString();
            if (g == 0) {
                j = "";
            }
            else {
                j = j.substr(2);
            }
            let k = Math.round(i).toString();
            d = a.k7;
            e = a.k9;
            if (e < 0) {
                e = 0;
            }
            if (d < 0) {
                d = 10;
            }
            if (e > d) {
                d = e;
            }
            if (j.length > d) {
                let l = Math.round(g * (Math.pow(10, d))) / (Math.pow(10, d));
                j = (l).toString();
                if (l == 1) {
                    if (a.kz >= 0) {
                        h += 1;
                        i += 1;
                    }
                    else {
                        h -= 1;
                        i += 1;
                    }
                    j = "";
                    k = Math.round(i).toString();
                }
                else if (l == 0) {
                    j = "";
                }
                else {
                    j = j.substr(2);
                }
            }
            let m = k.length;
            let n = Math.max(0, a.lb - k.length);
            let o = Math.max(0, a.k9 - j.length);
            let p = false;
            if (k.charAt(0) == '1') {
                p = true;
            }
            for (let q = 0; q < n; q++) {
                let r = "0";
                if (a.kx) {
                    if (p) {
                        r = "9";
                    }
                    else {
                        r = "1";
                    }
                }
                k = r + k;
            }
            for (let s = 0; s < o; s++) {
                j = j + "0";
            }
            if (d == 0) {
                j = "";
            }
            if (a.kx && k.length > 0) {
                let t = parseInt(k);
                let u = t.toLocaleString();
                let v = '1';
                if (p) {
                    v = '9';
                }
                let w = true;
                let x = "";
                for (let y = 0; y < u.length; y++) {
                    if (u.charAt(y) == v && w) {
                        x += "0";
                    }
                    else {
                        x += u.charAt(y);
                        if (isDigit(u.charAt(y)) && u.charAt(y) != v) {
                            w = false;
                        }
                    }
                }
                k = x;
            }
            if (h < 0) {
                k = "-" + k;
            }
            let z = k;
            if (j.length > 0) {
                z += NumericCellFormatter.c() + j;
            }
            if (b >= 0) {
                if (!stringIsNullOrEmpty(a.l4)) {
                    z = a.l4 + z;
                }
                if (!stringIsNullOrEmpty(a.l6)) {
                    z += a.l6;
                }
            }
            else {
                if (!stringIsNullOrEmpty(a.lz)) {
                    z = a.lz + z;
                }
                if (!stringIsNullOrEmpty(a.l1)) {
                    z += a.l1;
                }
            }
            return z;
        }
    }
    NumericCellFormatter.$t = /*@__PURE__*/ markType(NumericCellFormatter, 'NumericCellFormatter');
    NumericCellFormatter.a = null;
    return NumericCellFormatter;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let CanvasNumericCellPresenter = /*@__PURE__*/ (() => {
    class CanvasNumericCellPresenter extends CanvasCellPresenterBase {
        constructor(a) {
            super(a);
        }
        get d() {
            return this.a;
        }
        b(a) {
            super.b(a);
            let b = a;
            if (a.as) {
                if (a.ax(NumericCellModel.lf) || b.kw()) {
                    b.ip = this.e(b);
                    this.d.ck(b.ip);
                }
                CanvasContentCellModelHelper.a(this.a.bl, b, this.a);
            }
        }
        e(a) {
            if (a.ll != null) {
                let val_ = a.kz;
                let override_ = a.ll;
                return (override_.format(val_));
            }
            return NumericCellFormatter.b(a);
        }
    }
    CanvasNumericCellPresenter.$t = /*@__PURE__*/ markType(CanvasNumericCellPresenter, 'CanvasNumericCellPresenter', CanvasCellPresenterBase.$);
    return CanvasNumericCellPresenter;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let CanvasDateTimeCell = /*@__PURE__*/ (() => {
    class CanvasDateTimeCell extends CanvasTextCell {
        constructor(a) {
            super(a);
        }
    }
    CanvasDateTimeCell.$t = /*@__PURE__*/ markType(CanvasDateTimeCell, 'CanvasDateTimeCell', CanvasTextCell.$);
    return CanvasDateTimeCell;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let CanvasDateTimeCellPresenter = /*@__PURE__*/ (() => {
    class CanvasDateTimeCellPresenter extends CanvasCellPresenterBase {
        constructor(a) {
            super(a);
        }
        get d() {
            return this.a;
        }
        b(a) {
            super.b(a);
            let b = a;
            if (a.as) {
                if (a.ax(DateTimeCellModel.k2) || a.ax(DateTimeCellModel.k3) || a.ax(DateTimeCellModel.k1)) {
                    this.e(b);
                    this.d.ck(b.ip);
                }
                CanvasContentCellModelHelper.a(this.a.bl, b, this.a);
            }
        }
        e(a) {
            a.ip = a.le(a.k0);
            if (a.ip == stringEmpty() && a.go != null) {
                a.ip = a.go.toString();
            }
        }
    }
    CanvasDateTimeCellPresenter.$t = /*@__PURE__*/ markType(CanvasDateTimeCellPresenter, 'CanvasDateTimeCellPresenter', CanvasCellPresenterBase.$);
    return CanvasDateTimeCellPresenter;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let SortIndicatorRenderCompletedEventArgs = /*@__PURE__*/ (() => {
    class SortIndicatorRenderCompletedEventArgs extends EventArgs {
    }
    SortIndicatorRenderCompletedEventArgs.$t = /*@__PURE__*/ markType(SortIndicatorRenderCompletedEventArgs, 'SortIndicatorRenderCompletedEventArgs', EventArgs.$);
    return SortIndicatorRenderCompletedEventArgs;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridSortIndicatorView = /*@__PURE__*/ (() => {
    class GridSortIndicatorView extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.d = new List$1(Path.$, 0);
            this.i = 0;
            this.h = 0;
            this.b = 0;
            this.m = null;
            this.c = null;
            this.l = null;
            this.f = 0;
            this.e = 0;
            this.g = 1;
            this.k = 0;
            this.j = 0;
            this.a = a;
        }
        t() {
            if (this.m == null || this.c == null) {
                return;
            }
            if (this.i != this.k || this.h != this.j || this.b != this.a.f) {
                this.d.clear();
                switch (this.a.f) {
                    case 0:
                        this.n();
                        break;
                    case 1:
                        this.o();
                        break;
                    case 2:
                        this.p();
                        break;
                }
                this.i = this.k;
                this.h = this.j;
                this.b = this.a.f;
            }
            switch (this.a.f) {
                case 0:
                    this.v();
                    break;
                case 1:
                    this.w();
                    break;
                case 2:
                    this.x();
                    break;
            }
            let a = Math.round(this.k * this.g);
            let b = Math.round(this.j * this.g);
            if (this.f != a || this.e != b) {
                this.m.setAttribute("width", a.toString());
                this.m.setAttribute("height", b.toString());
                this.m.setStyleProperty("width", this.k.toString() + "px");
                this.m.setStyleProperty("height", this.j.toString() + "px");
                this.m.setStyleProperty("top", "0px");
                this.m.setStyleProperty("left", "0px");
                this.f = truncate(Math.round(a));
                this.e = truncate(Math.round(b));
            }
            if (this.c.d && this.g != 1) {
                this.c.z();
                this.c.aa(this.g, this.g);
            }
            this.c.k(0, 0, this.k, this.j);
            this.c.z();
            this.c.aa(this.a.v(), this.a.v());
            for (let c = 0; c < this.d.count; c++) {
                this.c.j(this.d._inner[c].j);
                let d = this.y();
                if (this.a.a0 != null) {
                    d = this.a.a0;
                }
                this.d._inner[c]._stroke = d;
                this.c.s(this.d._inner[c]);
            }
            this.c.y();
            if (this.c.d && this.g != 1) {
                this.c.y();
            }
            this.a.at();
        }
        u() {
            this.t();
        }
        n() {
            this.a.an(this.k, this.j, this.d);
        }
        v() {
            if (this.d.count != 1) {
                return;
            }
            this.d._inner[0]._opacity = this.a.r;
            let a = { $type: Point_$type, x: this.k / 2, y: this.j / 2 };
            let b = new TransformGroup();
            b.j.add(((() => {
                let $ret = new TranslateTransform();
                $ret.j = -a.x;
                $ret.k = -a.y;
                return $ret;
            })()));
            b.j.add(((() => {
                let $ret = new RotateTransform();
                $ret.j = this.a.q;
                return $ret;
            })()));
            b.j.add(((() => {
                let $ret = new TranslateTransform();
                $ret.j = a.x;
                $ret.k = a.y;
                return $ret;
            })()));
            this.d._inner[0].j = b;
        }
        o() {
            this.a.ao(this.k, this.j, this.d);
        }
        w() {
            if (this.d.count != 4) {
                return;
            }
            this.d._inner[0]._opacity = this.a.r;
            this.d._inner[1]._opacity = this.a.r;
            this.d._inner[2]._opacity = this.a.x;
            this.d._inner[3]._opacity = this.a.x;
        }
        p() {
            this.a.ap(this.k, this.j, this.d);
        }
        x() {
            this.d._inner[0]._opacity = this.a.r;
            this.d._inner[1]._opacity = this.a.x;
        }
        r(a) {
            if (a == null) {
                this.m = null;
                this.l = null;
                this.c = null;
                return;
            }
            this.g = (isNaN_(this.a.w) ? this.a.p : this.a.w);
            let b = a;
            this.l = b;
            this.a.j.u(this.l);
            this.a.i.u(this.l);
            this.l.rootWrapper.addClass("ui-radialgauge-container");
            let c = this.g;
            let d = Math.round(b.rootWrapper.width());
            let e = Math.round(b.rootWrapper.height());
            let f = d * c;
            let g = e * c;
            this.l.rootWrapper.setStyleProperty("position", "relative");
            let h = this.l.createElement("canvas");
            h.setStyleProperty("position", "absolute");
            this.l.append(h);
            this.f = truncate(Math.round(f));
            this.e = truncate(Math.round(g));
            h.setAttribute("width", f.toString());
            h.setAttribute("height", g.toString());
            h.setStyleProperty("width", d.toString() + "px");
            h.setStyleProperty("height", e.toString() + "px");
            this.k = d;
            this.j = e;
            this.m = h;
            let i = this.l.get2DCanvasContext(this.m);
            this.c = new RenderingContext(new CanvasViewRenderer(), i);
            if (isNaN_(this.a.w)) {
                this.a.p = window.devicePixelRatio;
                this.g = this.a.p;
            }
            this.t();
        }
        s(a, b) {
            if (isNaN_(this.a.w)) {
                this.a.p = window.devicePixelRatio;
                this.g = this.a.p;
            }
            this.k = a;
            this.j = b;
            this.t();
        }
        q() {
            if (isNaN_(this.a.w)) {
                this.a.p = window.devicePixelRatio;
                if (this.g != this.a.p) {
                    this.g = this.a.p;
                    this.t();
                }
            }
        }
        y() {
            return GridStyleRepository.bl;
        }
    }
    GridSortIndicatorView.$t = /*@__PURE__*/ markType(GridSortIndicatorView, 'GridSortIndicatorView');
    return GridSortIndicatorView;
})();
/**
 * @hidden
 */
let GridSortIndicator = /*@__PURE__*/ (() => {
    class GridSortIndicator extends Base {
        constructor() {
            super();
            this.ab = null;
            this.a = 0;
            this.az = null;
            this.k = true;
            this.propertyChanged = null;
            this.g = null;
            this.h = null;
            this.o = NaN;
            this.m = 1;
            this.e = 0;
            this.n = 0;
            this.q = 0;
            this.x = 0;
            this.t = 0;
            this.s = 0;
            this.z = 0;
            this.y = 0;
            this.u = 0;
            this.aa = 0;
            this.c = null;
            this.renderCompleted = null;
            this.r = 0;
            this.x = 0.5;
            this.q = 180;
            this.c = new GridSortIndicatorView(this);
            this.g = new DoubleAnimator(0, 1, 400);
            this.h = new DoubleAnimator(0, 1, 400);
            this.g.b = EasingFunctions.cubicEase;
            this.h.b = EasingFunctions.cubicEase;
            let a = this.g;
            a.propertyChanged = delegateCombine(a.propertyChanged, runOn(this, this.al));
            let b = this.h;
            b.propertyChanged = delegateCombine(b.propertyChanged, runOn(this, this.am));
        }
        get ac() {
            return this.ab;
        }
        set ac(a) {
            this.ab = a;
        }
        get b() {
            return this.a;
        }
        set b(a) {
            let b = this.a;
            this.a = a;
            if (b != this.a) {
                this.as("SortDirection", enumGetBox(ColumnSortDirection_$type, b), enumGetBox(ColumnSortDirection_$type, this.a));
            }
        }
        get a0() {
            return this.az;
        }
        set a0(a) {
            let b = this.az;
            this.az = a;
            if (b != this.az) {
                this.as("IconColor", b, this.az);
            }
        }
        get l() {
            return this.k;
        }
        set l(a) {
            let b = this.k;
            this.k = a;
            if (b != this.k) {
                this.as("IsAnimationEnabled", b, this.k);
            }
        }
        get i() {
            return this.g;
        }
        get j() {
            return this.h;
        }
        get w() {
            return this.o;
        }
        set w(a) {
            let b = this.o;
            this.o = a;
            this.as("PixelScalingRatio", b, this.o);
        }
        get p() {
            return this.m;
        }
        set p(a) {
            let b = this.m;
            this.m = a;
            this.as("ActualPixelScalingRatio", b, this.m);
        }
        get f() {
            return this.e;
        }
        set f(a) {
            let b = this.e;
            this.e = a;
            if (b != this.e) {
                this.as("SortIndicatorStyle", enumGetBox(SortIndicatorStyle_$type, b), enumGetBox(SortIndicatorStyle_$type, this.e));
            }
        }
        as(a, b, c) {
            this.aw(a, b, c);
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
        }
        get r() {
            return this.n;
        }
        set r(a) {
            let b = this.n;
            this.n = a;
            if (b != a) {
                this.as("CurrentOpacity", b, a);
            }
        }
        aw(a, b, c) {
            switch (a) {
                case "PixelScalingRatio":
                    this.p = this.w;
                    break;
                case "ActualPixelScalingRatio":
                    this.c.u();
                    break;
                case "IconColor":
                    this.c.u();
                    break;
                case "SortIndicatorStyle":
                    switch (this.f) {
                        case 0:
                            this.au(this.b, false);
                            break;
                        case 1:
                        case 2:
                            this.av(this.b, false);
                            break;
                    }
                    break;
                case "SortDirection":
                    switch (this.f) {
                        case 0:
                            this.au(EnumUtil.getEnumValue(ColumnSortDirection_$type, c), this.l);
                            break;
                        case 1:
                        case 2:
                            this.av(EnumUtil.getEnumValue(ColumnSortDirection_$type, c), this.l);
                            break;
                    }
                    break;
            }
        }
        am(a, b) {
            switch (this.f) {
                case 0:
                    this.r = this.t + this.h.o * (this.z - this.t);
                    break;
                case 1:
                case 2:
                    this.r = this.t + this.h.o * (this.z - this.t);
                    this.x = this.u + this.h.o * (this.aa - this.u);
                    break;
            }
            this.c.u();
        }
        al(a, b) {
            this.q = this.s + this.g.o * (this.y - this.s);
            this.c.u();
        }
        au(a, b) {
            this.t = this.r;
            this.s = this.q;
            if (this.l || this.g.f() || this.h.f()) {
                this.g.w();
                this.h.w();
            }
            if (a == 0) {
                this.z = 0;
                this.y = 180;
            }
            else {
                this.z = 1;
                if (a == 1) {
                    this.y = 180;
                }
                else {
                    this.y = 0;
                }
            }
            if (b) {
                this.g.v();
                this.h.v();
            }
            else {
                this.q = this.y;
                this.r = this.z;
                this.c.u();
            }
        }
        av(a, b) {
            this.t = this.r;
            this.u = this.x;
            if (this.l || this.h.f()) {
                this.h.w();
            }
            switch (a) {
                case 0:
                    this.z = 0.4;
                    this.aa = 0.4;
                    break;
                case 1:
                    this.z = 1;
                    this.aa = 0.2;
                    break;
                case 2:
                    this.z = 0.2;
                    this.aa = 1;
                    break;
            }
            if (b) {
                this.h.v();
            }
            else {
                this.r = this.z;
                this.x = this.aa;
                this.c.u();
            }
        }
        v() {
            switch (this.f) {
                case 0: return 1;
                case 1: return 0.71;
                case 2: return 1;
            }
            return 1;
        }
        ax(a) {
            this.c.r(a);
        }
        ay(a) {
            this.j.u(a);
            this.i.u(a);
        }
        ad() {
            return this.c.m.getNativeElement();
        }
        ar(a, b) {
            this.c.s(a, b);
        }
        aq() {
            this.c.q();
        }
        an(a, b, c) {
            let d = Math.min(a, b);
            let e = { $type: Point_$type, x: a / 2, y: b / 2 };
            let f = d * 0.5;
            let g = f / 2;
            let h = f / 2.5;
            let i = g / 2;
            let j = new PathFigure();
            j._startPoint = { $type: Point_$type, x: e.x, y: e.y - g };
            let k = new LineSegment(1);
            k.c = { $type: Point_$type, x: e.x, y: e.y + g };
            j._segments.add(k);
            let l = new PathFigure();
            l._startPoint = { $type: Point_$type, x: e.x - h, y: e.y };
            let m = new LineSegment(1);
            m.c = { $type: Point_$type, x: e.x, y: e.y + g };
            let n = new LineSegment(1);
            n.c = { $type: Point_$type, x: e.x + h, y: e.y };
            l._segments.add(m);
            l._segments.add(n);
            let o = new PathGeometry();
            o.c.add(j);
            o.c.add(l);
            let p = new Path();
            p.ak = o;
            p._stroke = this.c.y();
            p.ac = 1.5;
            p.aj = 2;
            c.add(p);
        }
        ao(a, b, c) {
            let d = Geometry.a("M3.792172, 7.800278 L7.983785, 3.635676 L12.148387, 7.800278L12.148387, 7.800278");
            let e = Geometry.a("M7.97027972,4.10930186 L7.97027972,13.8116223 L7.97027972,4.10930186 Z");
            let f = Geometry.a("M11.851613, 16.199722 L16.043224, 20.364325  L20.207829, 16.199722");
            let g = Geometry.a("M16.043224,10.1883777 L16.043224,19.8906981 L16.043224,10.1883777 Z");
            c.add(((() => {
                let $ret = new Path();
                $ret.ak = d;
                $ret.aj = 2;
                $ret.stroke = this.c.y();
                $ret.ac = 2;
                return $ret;
            })()));
            c.add(((() => {
                let $ret = new Path();
                $ret.ak = e;
                $ret.aj = 2;
                $ret.stroke = this.c.y();
                $ret.ac = 2;
                return $ret;
            })()));
            c.add(((() => {
                let $ret = new Path();
                $ret.ak = f;
                $ret.aj = 2;
                $ret.stroke = this.c.y();
                $ret.ac = 2;
                return $ret;
            })()));
            c.add(((() => {
                let $ret = new Path();
                $ret.ak = g;
                $ret.aj = 2;
                $ret.stroke = this.c.y();
                $ret.ac = 2;
                return $ret;
            })()));
        }
        ap(a, b, c) {
            let d = { $type: Point_$type, x: a / 2, y: b / 2 };
            let e = { $type: Point_$type, x: d.x - 3.5, y: d.y - 1.5 };
            let f = { $type: Point_$type, x: d.x - 3.5, y: d.y + 1.5 };
            let g = Geometry.a("M" + e.x.toString() + ", " + e.y.toString() + " l 3.5,-3.5 3.5,3.5");
            let h = Geometry.a("M" + f.x.toString() + ", " + f.y.toString() + " l 3.5,3.5 3.5,-3.5");
            c.add(((() => {
                let $ret = new Path();
                $ret.ak = g;
                $ret.aj = 2;
                $ret.stroke = this.c.y();
                $ret.ac = 2;
                return $ret;
            })()));
            c.add(((() => {
                let $ret = new Path();
                $ret.ak = h;
                $ret.aj = 2;
                $ret.stroke = this.c.y();
                $ret.ac = 2;
                return $ret;
            })()));
        }
        at() {
            if (this.renderCompleted != null) {
                this.renderCompleted(this, new SortIndicatorRenderCompletedEventArgs());
            }
        }
    }
    GridSortIndicator.$t = /*@__PURE__*/ markType(GridSortIndicator, 'GridSortIndicator', Base.$, [INotifyPropertyChanged_$type]);
    return GridSortIndicator;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let CanvasTextHeaderCell = /*@__PURE__*/ (() => {
    class CanvasTextHeaderCell extends CanvasGridCellBase {
        constructor(a) {
            super(a);
            this.c3 = null;
            this.c6 = null;
            this.c5 = null;
            this.ce(0);
            this.cm(1);
            this.c3 = new GridSortIndicator();
            let b = a.createElement("div");
            b.setRawStyleProperty("display", "inline-block");
            b.setRawStyleProperty("width", "16px");
            b.setRawStyleProperty("height", "16px");
            this.c6 = b;
            let c = a.getSubRenderer(this.c6);
            this.c3.ax(c);
            this.c3.w = window.devicePixelRatio;
            let d = this.c3;
            d.renderCompleted = delegateCombine(d.renderCompleted, (d, e) => this.b3());
            this.c3.ar(16, 16);
            this.c5 = this.c3.ad();
        }
        get c4() {
            return this.c3;
        }
        c7(a) {
            this.c4.b = a;
            this.b3();
        }
        b5(a) {
            super.b5(a);
            let b = this.bg + 5;
            if (this.d == 2) {
                b = this.be - 21;
            }
            a.m(this.c5, 1, b, this.bh - 8, 16, 16);
        }
        get_z() {
            return true;
        }
    }
    CanvasTextHeaderCell.$t = /*@__PURE__*/ markType(CanvasTextHeaderCell, 'CanvasTextHeaderCell', CanvasGridCellBase.$);
    return CanvasTextHeaderCell;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let CanvasTextHeaderCellPresenter = /*@__PURE__*/ (() => {
    class CanvasTextHeaderCellPresenter extends CanvasCellPresenterBase {
        constructor(a) {
            super(a);
            this.e = null;
        }
        get d() {
            return this.a;
        }
        f() {
            if (this.e != null) {
                this.e();
            }
        }
        b(a) {
            super.b(a);
            let b = a;
            if (a.as) {
                if (a.ax(TextCellModel.kq)) {
                    b.ip = b.ks;
                    this.d.ck(b.ip);
                }
                if (a.ax(CellModel.f6)) {
                    if (a.bb) {
                        this.d.c4.l = false;
                    }
                    if (this.e == null) {
                        let c = a.o;
                        this.e = () => c.sk();
                    }
                    this.d.c7(a.m);
                    this.d.ci(runOn(this, this.f));
                    if (a.bb) {
                        this.d.c4.l = true;
                    }
                }
                if (a.ax(CellModel.f7)) {
                    if (a.bb) {
                        this.d.c4.l = false;
                    }
                    this.d.c4.a0 = a.kn;
                    if (a.bb) {
                        this.d.c4.l = true;
                    }
                }
                if (a.aw("SortIndicatorStyle")) {
                    this.d.c4.f = b.kz;
                }
                CanvasContentCellModelHelper.a(this.a.bl, b, this.a);
            }
        }
    }
    CanvasTextHeaderCellPresenter.$t = /*@__PURE__*/ markType(CanvasTextHeaderCellPresenter, 'CanvasTextHeaderCellPresenter', CanvasCellPresenterBase.$);
    return CanvasTextHeaderCellPresenter;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let CanvasRowSeparatorCell = /*@__PURE__*/ (() => {
    class CanvasRowSeparatorCell extends CanvasGridCellBase {
        constructor(a) {
            super(a);
        }
    }
    CanvasRowSeparatorCell.$t = /*@__PURE__*/ markType(CanvasRowSeparatorCell, 'CanvasRowSeparatorCell', CanvasGridCellBase.$);
    return CanvasRowSeparatorCell;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let CanvasRowSeparatorCellPresenter = /*@__PURE__*/ (() => {
    class CanvasRowSeparatorCellPresenter extends CanvasCellPresenterBase {
        constructor(a) {
            super(a);
        }
        get d() {
            return this.a;
        }
    }
    CanvasRowSeparatorCellPresenter.$t = /*@__PURE__*/ markType(CanvasRowSeparatorCellPresenter, 'CanvasRowSeparatorCellPresenter', CanvasCellPresenterBase.$);
    return CanvasRowSeparatorCellPresenter;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let CanvasImageCell = /*@__PURE__*/ (() => {
    class CanvasImageCell extends CanvasGridCellBase {
        constructor(a) {
            super(a);
            this.c3 = 1;
            this.c4 = 3;
            this.c8 = null;
            this.c5 = 1;
            this.c7 = null;
            this.c7 = a.createElement("img");
        }
        get c6() {
            return this.c5;
        }
        set c6(a) {
            this.c5 = a;
        }
        db(a, b) {
            this.c9();
            this.c7.setRawStyleProperty("opacity", "0");
            if (a == null || a.length == 0) {
                this.da(this.c7);
                return;
            }
            if (Base.equalsStatic(a, this.c8)) {
                return;
            }
            this.de(a, b);
        }
        da(a) {
            a.setAttribute("src", "");
        }
        de(a, b) {
            this.c8 = a;
            this.c7.setAttribute("src", a);
        }
        c9() {
            this.da(this.c7);
            this.c8 = "";
        }
        dc(a) {
            this.y = true;
            this.c3 = a;
        }
        dd(a) {
            this.y = true;
            this.c4 = a;
        }
        get_aa() {
            return true;
        }
    }
    CanvasImageCell.$t = /*@__PURE__*/ markType(CanvasImageCell, 'CanvasImageCell', CanvasGridCellBase.$);
    return CanvasImageCell;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let CanvasImageCellPresenter = /*@__PURE__*/ (() => {
    class CanvasImageCellPresenter extends CanvasCellPresenterBase {
        constructor(a) {
            super(a);
        }
        get d() {
            return this.a;
        }
        b(a) {
            super.b(a);
            let b = a;
            if (a.as) {
                if (a.ax(CellModel.ei) || a.ax(CellModel.ge)) {
                    let c = Math.min(1, Math.max(0, a.cb));
                    let d = a.b1 * (1 - c);
                    this.d.c6 = d;
                }
                if (b.ax(ImageCellModel.ku) || b.ax(ImageCellModel.kv)) {
                    this.e(b.ky, b.kr);
                }
                if (b.ax(ImageCellModel.kw) || b.ax(ImageCellModel.e2) || b.ax(ImageCellModel.gd)) {
                    this.f(b.kt, b.f, b.h);
                }
                if (b.ax(ImageCellModel.f8)) {
                    if (a.t == 1) {
                        this.d.c9();
                    }
                    else if (a.t == 2) {
                        this.e(b.ky, b.kr);
                    }
                }
            }
        }
        f(a, b, c) {
        }
        e(a, b) {
            let c = a.toLowerCase();
            if (b == 0) {
                b = 4;
            }
            if (stringStartsWith(c, "http") || b == 4) {
                this.d.db(a, 4);
            }
            if (stringStartsWith(c, "asset") || b == 2) {
                let d = a;
                if (stringStartsWith(c, "asset")) {
                    d = a.substr(8);
                }
                this.d.db(d, 2);
            }
            if (stringStartsWith(c, "drawable") || b == 1) {
                let e = a;
                if (stringStartsWith(c, "drawable")) {
                    e = a.substr(11);
                }
                this.d.db(e, 1);
            }
            if (stringStartsWith(c, "nativeresource") || b == 1) {
                let f = a;
                if (stringStartsWith(c, "nativeresource")) {
                    f = a.substr(17);
                }
                this.d.db(f, 1);
            }
            if (stringStartsWith(c, "embeddedresource") || b == 3) {
                let g = a;
                if (stringStartsWith(c, "embeddedresource")) {
                    g = a.substr(19);
                }
                this.d.db(g, 3);
            }
        }
    }
    CanvasImageCellPresenter.$t = /*@__PURE__*/ markType(CanvasImageCellPresenter, 'CanvasImageCellPresenter', CanvasCellPresenterBase.$);
    return CanvasImageCellPresenter;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let CanvasTemplateCellContainer = /*@__PURE__*/ (() => {
    class CanvasTemplateCellContainer extends Base {
        constructor(a) {
            super();
            this.d = null;
            this.c = null;
            this._opacity = 0;
            this.c = a;
        }
        get isCanvasBased() {
            return true;
        }
        get opacity() {
            return this._opacity;
        }
        set opacity(a) {
            this._opacity = a;
        }
    }
    CanvasTemplateCellContainer.$t = /*@__PURE__*/ markType(CanvasTemplateCellContainer, 'CanvasTemplateCellContainer');
    return CanvasTemplateCellContainer;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let CanvasTemplateCell = /*@__PURE__*/ (() => {
    class CanvasTemplateCell extends CanvasGridCellBase {
        constructor(a) {
            super(a);
            this.c3 = null;
            this.c3 = new CanvasTemplateCellContainer(a);
        }
        get c4() {
            return this.c3;
        }
        get_aa() {
            return true;
        }
        c5() {
            this.b1();
        }
    }
    CanvasTemplateCell.$t = /*@__PURE__*/ markType(CanvasTemplateCell, 'CanvasTemplateCell', CanvasGridCellBase.$);
    return CanvasTemplateCell;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let CanvasTemplateCellPresenter = /*@__PURE__*/ (() => {
    class CanvasTemplateCellPresenter extends CanvasCellPresenterBase {
        constructor(a, b) {
            super(a);
            this.d = null;
            this.d = b;
        }
        get e() {
            return this.a;
        }
        b(a) {
            super.b(a);
            let b = a;
            let c = this.d.actualColumns._inner[a.k.az];
            if (a.ax(CellModel.ei) || a.ax(CellModel.ge)) {
                let d = Math.min(1, Math.max(0, a.cb));
                let e = a.b1 * (1 - d);
                this.e.c4.opacity = e;
            }
            this.e.c5();
            c.jp(a, this.e);
        }
    }
    CanvasTemplateCellPresenter.$t = /*@__PURE__*/ markType(CanvasTemplateCellPresenter, 'CanvasTemplateCellPresenter', CanvasCellPresenterBase.$);
    return CanvasTemplateCellPresenter;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let CanvasTemplateHeaderCell = /*@__PURE__*/ (() => {
    class CanvasTemplateHeaderCell extends CanvasGridCellBase {
        constructor(a) {
            super(a);
            this.c3 = null;
            this.c3 = new CanvasTemplateCellContainer(a);
        }
        get c4() {
            return this.c3;
        }
        get_z() {
            return true;
        }
        c5() {
            this.b1();
        }
    }
    CanvasTemplateHeaderCell.$t = /*@__PURE__*/ markType(CanvasTemplateHeaderCell, 'CanvasTemplateHeaderCell', CanvasGridCellBase.$);
    return CanvasTemplateHeaderCell;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let CanvasTemplateHeaderCellPresenter = /*@__PURE__*/ (() => {
    class CanvasTemplateHeaderCellPresenter extends CanvasCellPresenterBase {
        constructor(a, b) {
            super(a);
            this.d = null;
            this.d = b;
        }
        get e() {
            return this.a;
        }
        b(a) {
            super.b(a);
            let b = this.d.actualColumns._inner[a.k.az];
            let c = b.header;
            if (a.ax(CellModel.ei) || a.ax(CellModel.ge)) {
                let d = Math.min(1, Math.max(0, a.cb));
                let e = a.b1 * (1 - d);
            }
            let f = a;
            this.e.c5();
            c.fd(f, this.e);
        }
    }
    CanvasTemplateHeaderCellPresenter.$t = /*@__PURE__*/ markType(CanvasTemplateHeaderCellPresenter, 'CanvasTemplateHeaderCellPresenter', CanvasCellPresenterBase.$);
    return CanvasTemplateHeaderCellPresenter;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let CanvasSectionHeaderCell = /*@__PURE__*/ (() => {
    class CanvasSectionHeaderCell extends CanvasGridCellBase {
        constructor(a) {
            super(a);
            this.ce(0);
            this.cm(1);
        }
        get_aa() {
            return true;
        }
    }
    CanvasSectionHeaderCell.$t = /*@__PURE__*/ markType(CanvasSectionHeaderCell, 'CanvasSectionHeaderCell', CanvasGridCellBase.$);
    return CanvasSectionHeaderCell;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let CanvasSectionHeaderCellPresenter = /*@__PURE__*/ (() => {
    class CanvasSectionHeaderCellPresenter extends CanvasCellPresenterBase {
        constructor(a) {
            super(a);
        }
        get d() {
            return this.a;
        }
        b(a) {
            super.b(a);
            let b = a;
            if (a.as) {
                if (a.ax(SectionHeaderCellModel.kw) || a.ax(SectionHeaderCellModel.ky)) {
                    if (b.ks == null || (b.ks.length == 0 && b.k6 == null)) {
                        if (b.go == null) {
                            b.ip = "";
                        }
                        else {
                            b.ip = b.go.toString();
                        }
                    }
                    else {
                        if (b.k4 != null && b.kv == 0) {
                            b.ip = b.k6 + "    " + b.k4;
                        }
                        else {
                            b.ip = b.k6;
                        }
                    }
                    this.d.ck(b.ip);
                }
                CanvasContentCellModelHelper.a(this.a.bl, b, this.a);
            }
        }
    }
    CanvasSectionHeaderCellPresenter.$t = /*@__PURE__*/ markType(CanvasSectionHeaderCellPresenter, 'CanvasSectionHeaderCellPresenter', CanvasCellPresenterBase.$);
    return CanvasSectionHeaderCellPresenter;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let CanvasVerticalSeparatorCell = /*@__PURE__*/ (() => {
    class CanvasVerticalSeparatorCell extends CanvasGridCellBase {
        constructor(a) {
            super(a);
        }
    }
    CanvasVerticalSeparatorCell.$t = /*@__PURE__*/ markType(CanvasVerticalSeparatorCell, 'CanvasVerticalSeparatorCell', CanvasGridCellBase.$);
    return CanvasVerticalSeparatorCell;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let CanvasVerticalSeparatorCellPresenter = /*@__PURE__*/ (() => {
    class CanvasVerticalSeparatorCellPresenter extends CanvasCellPresenterBase {
        constructor(a) {
            super(a);
        }
        get d() {
            return this.a;
        }
    }
    CanvasVerticalSeparatorCellPresenter.$t = /*@__PURE__*/ markType(CanvasVerticalSeparatorCellPresenter, 'CanvasVerticalSeparatorCellPresenter', CanvasCellPresenterBase.$);
    return CanvasVerticalSeparatorCellPresenter;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let CanvasSummaryCell = /*@__PURE__*/ (() => {
    class CanvasSummaryCell extends CanvasGridCellBase {
        constructor(a) {
            super(a);
            this.db = null;
            this.dg = new TextBlock();
            this.c7 = 0;
            this.c8 = 0;
            this.c6 = 0;
            this.c3 = null;
            this.da = 0;
            this.c4 = false;
            this.c5 = true;
            this.c9 = 0;
            this.ce(2);
        }
        cn(a) {
            super.cn(a);
            this.bf = intDivide(a, 2);
            this.c5 = true;
        }
        de(a) {
            this.c3 = a;
            this.c4 = true;
            this.y = true;
            this.c5 = true;
        }
        dc(a) {
            this.db = a;
            this.dg.ak = this.db;
            this.y = true;
            this.c5 = true;
        }
        dd(a) {
            this.y = true;
            this.dg.am = ((() => {
                let $ret = new Brush();
                $ret.color = a;
                return $ret;
            })());
        }
        df(a) {
            if (this.dg.ak == null) {
                return;
            }
            if (a == null) {
                return;
            }
            if (this.c4 || (this.c3 != null && this.c3.g != this.da)) {
                this.c4 = false;
                this.da = this.c3.g;
                a.ac(this.c3);
                this.c6 = FontUtil.getCurrentFontHeight(this.bl, this.c3);
            }
            let b = this.bj;
            let c = this.a8;
            b -= (this.a5 + this.ba + this.a6 + this.bb);
            c -= (this.a7 + this.bc + this.a4 + this.a9);
            b = Math.max(b, 0);
            c = Math.max(c, 0);
            this.c9 = this.bi(this.dg, this.db, b / 2, a);
            this.c7 = this.ba + this.a5;
            this.c8 = this.bc + this.a7 + ((c / 2) - (this.c6 / 2));
        }
        b5(a) {
            if (this.dg.ak != null) {
                if (this.c5) {
                    this.df(a);
                    this.c5 = false;
                }
                this.dg.n = this.c7;
                this.dg.o = this.c8;
                a.w(this.dg);
            }
            super.b5(a);
        }
        get_aa() {
            return false;
        }
    }
    CanvasSummaryCell.$t = /*@__PURE__*/ markType(CanvasSummaryCell, 'CanvasSummaryCell', CanvasGridCellBase.$);
    return CanvasSummaryCell;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let CanvasSummaryCellPresenter = /*@__PURE__*/ (() => {
    class CanvasSummaryCellPresenter extends CanvasCellPresenterBase {
        constructor(a) {
            super(a);
        }
        get d() {
            return this.a;
        }
        b(a) {
            super.b(a);
            let b = a;
            if (a.as) {
                if (a.aw("ResolvedSummaryLabel") || a.aw("ResolvedSummaryValue")) {
                    this.d.dc(b.ky);
                    this.d.ck(b.k0);
                }
                if (a.aw("SummaryLabelTextColor")) {
                    let c = CanvasContentCellModelHelper.e(b.k5);
                    this.d.dd(c);
                }
                if (a.aw("FontInfo")) {
                    this.d.de(b.af);
                }
                CanvasContentCellModelHelper.a(this.a.bl, b, this.a);
            }
        }
    }
    CanvasSummaryCellPresenter.$t = /*@__PURE__*/ markType(CanvasSummaryCellPresenter, 'CanvasSummaryCellPresenter', CanvasCellPresenterBase.$);
    return CanvasSummaryCellPresenter;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridExpansionIndicatorView = /*@__PURE__*/ (() => {
    class GridExpansionIndicatorView extends Base {
        constructor(a) {
            super();
            this.k = null;
            this.f = 1;
            this.e = 0;
            this.d = 0;
            this.c = new List$1(Path.$, 0);
            this.m = null;
            this.b = null;
            this.l = null;
            this.j = 0;
            this.g = 0;
            this.i = 0;
            this.h = 0;
            this.a = null;
            this.a = a;
        }
        o(a) {
            if (a == null) {
                this.m = null;
                this.l = null;
                this.b = null;
                if (this.k != null) {
                    window.removeEventListener("resize", this.k, false);
                    this.k = null;
                }
                return;
            }
            this.f = (isNaN_(this.a.m) ? this.a.j : this.a.m);
            let b = a;
            this.l = b;
            this.a.c.u(this.l);
            this.l.rootWrapper.addClass("ui-expansion-indicator-container");
            let c = this.f;
            let d = Math.round(b.rootWrapper.width());
            let e = Math.round(b.rootWrapper.height());
            let f = d * c;
            let g = e * c;
            let h = this.l.createElement("canvas");
            h.setStyleProperty("position", "absolute");
            this.l.append(h);
            this.e = truncate(Math.round(f));
            this.d = truncate(Math.round(g));
            h.setAttribute("width", f.toString());
            h.setAttribute("height", g.toString());
            h.setStyleProperty("width", d.toString() + "px");
            h.setStyleProperty("height", e.toString() + "px");
            this.j = d;
            this.g = e;
            this.m = h;
            let i = this.l.get2DCanvasContext(this.m);
            this.b = new RenderingContext(new CanvasViewRenderer(), i);
            if (isNaN_(this.a.m)) {
                this.a.j = window.devicePixelRatio;
                this.f = this.a.j;
            }
            this.q();
        }
        p(a, b) {
            this.j = a;
            this.g = b;
            this.q();
        }
        s() {
            if (this.a.ae != null) {
                return this.a.ae;
            }
            return ((() => {
                let $ret = new Brush();
                $ret.color = Color.u(138, 0, 0, 0);
                return $ret;
            })());
        }
        r() {
            this.q();
        }
        n() {
            this.c.clear();
            this.a.x(this.j, this.g, this.c);
        }
        q() {
            if (this.m == null || this.b == null) {
                return;
            }
            if (this.i != this.j || this.h != this.g) {
                this.n();
                this.i = this.j;
                this.h = this.g;
            }
            if (this.c.count > 0) {
                let a = { $type: Point_$type, x: this.j / 2, y: this.g / 2 };
                let b = new TransformGroup();
                b.j.add(((() => {
                    let $ret = new TranslateTransform();
                    $ret.j = -a.x;
                    $ret.k = -a.y;
                    return $ret;
                })()));
                b.j.add(((() => {
                    let $ret = new RotateTransform();
                    $ret.j = this.a.k;
                    return $ret;
                })()));
                b.j.add(((() => {
                    let $ret = new TranslateTransform();
                    $ret.j = a.x;
                    $ret.k = a.y;
                    return $ret;
                })()));
                this.c._inner[0].j = b;
            }
            let c = Math.round(this.j * this.f);
            let d = Math.round(this.g * this.f);
            if (this.e != c || this.d != d) {
                this.m.setAttribute("width", c.toString());
                this.m.setAttribute("height", d.toString());
                this.m.setStyleProperty("width", this.j.toString() + "px");
                this.m.setStyleProperty("height", this.g.toString() + "px");
                this.m.setStyleProperty("top", "0px");
                this.m.setStyleProperty("left", "0px");
                this.e = truncate(Math.round(c));
                this.d = truncate(Math.round(d));
            }
            if (this.b.d && this.f != 1) {
                this.b.z();
                this.b.aa(this.f, this.f);
            }
            this.b.k(0, 0, this.j, this.g);
            this.b.z();
            for (let e = 0; e < this.c.count; e++) {
                this.b.j(this.c._inner[e].j);
                let f = this.s();
                if (this.a.ae != null) {
                    f = this.a.ae;
                }
                this.c._inner[e]._stroke = f;
                this.b.s(this.c._inner[e]);
            }
            this.b.y();
            if (this.b.d && this.f != 1) {
                this.b.y();
            }
        }
    }
    GridExpansionIndicatorView.$t = /*@__PURE__*/ markType(GridExpansionIndicatorView, 'GridExpansionIndicatorView');
    return GridExpansionIndicatorView;
})();
/**
 * @hidden
 */
let GridExpansionIndicator = /*@__PURE__*/ (() => {
    class GridExpansionIndicator extends Base {
        constructor() {
            super();
            this.a = null;
            this.o = null;
            this.e = false;
            this.ad = null;
            this.d = false;
            this.propertyChanged = null;
            this.b = null;
            this.i = NaN;
            this.h = 1;
            this.k = 0;
            this.l = 0;
            this.n = 0;
            this.k = 0;
            this.a = new GridExpansionIndicatorView(this);
            this.b = new DoubleAnimator(0, 1, 400);
            this.b.b = EasingFunctions.cubicEase;
            let a = this.b;
            a.propertyChanged = delegateCombine(a.propertyChanged, runOn(this, this.w));
        }
        get p() {
            return this.o;
        }
        set p(a) {
            this.o = a;
        }
        get g() {
            return this.e;
        }
        set g(a) {
            let b = this.e;
            this.e = a;
            if (b != this.e) {
                this.z("IsExpanded", b, this.e);
            }
        }
        get ae() {
            return this.ad;
        }
        set ae(a) {
            let b = this.ad;
            this.ad = a;
            if (b != this.ad) {
                this.z("IconColor", b, this.ad);
            }
        }
        get f() {
            return this.d;
        }
        set f(a) {
            let b = this.d;
            this.d = a;
            if (b != this.d) {
                this.z("IsAnimationEnabled", b, this.d);
            }
        }
        get c() {
            return this.b;
        }
        get m() {
            return this.i;
        }
        set m(a) {
            let b = this.i;
            this.i = a;
            this.z("PixelScalingRatio", b, this.i);
        }
        get j() {
            return this.h;
        }
        set j(a) {
            let b = this.h;
            this.h = a;
            this.z("ActualPixelScalingRatio", b, this.h);
        }
        z(a, b, c) {
            this.aa(a, b, c);
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
        }
        aa(a, b, c) {
            switch (a) {
                case "PixelScalingRatio":
                    this.j = this.m;
                    break;
                case "ActualPixelScalingRatio":
                    this.a.r();
                    break;
                case "IconColor":
                    this.a.r();
                    break;
                case "IsExpanded":
                    if (this.f || this.b.f()) {
                        this.b.w();
                    }
                    this.l = this.k;
                    this.n = this.g ? 90 : 0;
                    if (this.f) {
                        this.b.v();
                    }
                    else {
                        this.k = this.n;
                        this.a.r();
                    }
                    break;
            }
        }
        w(a, b) {
            this.k = this.l + this.b.o * (this.n - this.l);
            this.a.r();
        }
        x(a, b, c) {
            let d = Geometry.a("M 10.18 6.343 l 5.64 5.675 -5.64 5.639");
            c.add(((() => {
                let $ret = new Path();
                $ret.ak = d;
                $ret.aj = 2;
                $ret.stroke = this.a.s();
                $ret.ac = 2;
                return $ret;
            })()));
        }
        ab(a) {
            this.a.o(a);
        }
        ac(a) {
            this.c.u(a);
        }
        q() {
            return this.a.m.getNativeElement();
        }
        y(a, b) {
            this.a.p(a, b);
        }
    }
    GridExpansionIndicator.$t = /*@__PURE__*/ markType(GridExpansionIndicator, 'GridExpansionIndicator', Base.$, [INotifyPropertyChanged_$type]);
    return GridExpansionIndicator;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let PlaceholderView = /*@__PURE__*/ (() => {
    class PlaceholderView extends Base {
        constructor(a) {
            super();
            this.f = null;
            this.k = new Color();
            this.h = 1;
            this.a = true;
            this.c = 0;
            this.b = 0;
            this.g = null;
            this.f = a;
            this.g = this.f.createElement("div");
            this.g.setRawStyleProperty("position", "absolute");
            this.g.setRawStyleProperty("pointer-events", "none");
        }
        get l() {
            return this.k;
        }
        set l(a) {
            this.k = a;
            this.j();
        }
        get i() {
            return this.h;
        }
        set i(a) {
            this.a = true;
            this.h = a;
            this.j();
        }
        get e() {
            return this.c;
        }
        set e(a) {
            this.c = a;
            this.j();
        }
        get d() {
            return this.b;
        }
        set d(a) {
            this.b = a;
            this.j();
        }
        j() {
            let a = this.e;
            let b = this.d;
            let c = Color.u(truncate((this.k.l * this.h)), this.k.o, this.k.n, this.k.m);
            this.g.setRawStyleProperty("background-color", c.colorString);
            this.g.setRawStyleProperty("width", a + "px");
            this.g.setRawStyleProperty("height", b + "px");
        }
    }
    PlaceholderView.$t = /*@__PURE__*/ markType(PlaceholderView, 'PlaceholderView');
    return PlaceholderView;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridCellBase = /*@__PURE__*/ (() => {
    class GridCellBase extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.c = null;
            this.v = null;
            this.x = null;
            this.y = null;
            this.g = null;
            this.ak = 0;
            this.ah = 24;
            this.aj = 0;
            this.ai = 0;
            this.an = 0;
            this.k = false;
            this.l = false;
            this.i = false;
            this.ap = 0;
            this.ar = 0;
            this.aq = 0;
            this.ao = 0;
            this.ac = 0;
            this.ae = 0;
            this.ad = 0;
            this.ab = 0;
            this.b6 = null;
            this.al = 0;
            this.at = 0;
            this.am = 0;
            this.h = null;
            this.e = 0;
            this.f = 0;
            this.u = 0;
            this.t = 0;
            this.m = false;
            this.az = 0;
            this.a0 = 0;
            this.aa = 0;
            this.af = 0;
            this.j = false;
            this.v = a;
            this.x = this.v.createElement("div");
            this.x.setAttribute("tabindex", "-1");
            this.x.setRawStyleProperty("position", "absolute");
            this.x.setRawStyleProperty("overflow", "hidden");
            this.x.setRawStyleProperty("box-sizing", "border-box");
            this.x.setRawStyleProperty("outline", "none");
            let b = (window.navigator.msPointerEnabled && MSGesture !== undefined);
            let c = (window.PointerEvent || window.navigator.pointerEnabled);
            let d = (window.TouchEvent);
            if ((b || c)) {
                this.x.listen("pointerdown", runOn(this, this.bh));
                this.x.listen("pointerup", runOn(this, this.bl));
                this.x.listen("pointermove", runOn(this, this.bk));
                this.x.listen("pointerleave", runOn(this, this.bj));
                this.x.listen("pointerenter", runOn(this, this.bi));
            }
            else {
                this.x.listen("mousedown", runOn(this, this.a7));
                this.x.listen("mouseup", runOn(this, this.bb));
                this.x.listen("mousemove", runOn(this, this.ba));
                this.x.listen("mouseleave", runOn(this, this.a9));
                this.x.listen("touchstart", runOn(this, this.by));
                this.x.listen("touchend", runOn(this, this.b0));
                this.x.listen("touchmove", runOn(this, this.bz));
            }
        }
        get b() {
            return this.a;
        }
        get d() {
            return this.c;
        }
        get w() {
            return this.v;
        }
        get z() {
            return this.x;
        }
        get aw() {
            return this.ak;
        }
        get au() {
            return this.ai;
        }
        get av() {
            return this.aj;
        }
        get ax() {
            return this.an;
        }
        set ax(a) {
            let b = this.an;
            this.an = a;
            if (b != this.an) {
                this.bg("Indent", b, this.an);
            }
        }
        get o() {
            return this.k;
        }
        set o(a) {
            let b = this.k;
            this.k = a;
            if (b != this.k) {
                this.bg("IsCollapsable", b, this.k);
            }
        }
        get p() {
            return this.l;
        }
        set p(a) {
            let b = this.l;
            this.l = a;
            if (b != this.l) {
                this.bg("IsExpanded", b, this.l);
            }
        }
        a6() {
            this.aj = 10;
            this.ai = this.ax * 24;
            this.ak = 24;
            if (this.y == null) {
                this.y = this.v.createElement("div");
                this.y.setRawStyleProperty("display", "inline-block");
                this.y.setRawStyleProperty("vertical-align", "middle");
                this.y.setRawStyleProperty("width", this.ak + "px");
                this.y.setRawStyleProperty("height", this.ak + "px");
                this.y.setRawStyleProperty("cursor", "pointer");
                this.y.setRawStyleProperty("position", "absolute");
                this.y.setRawXPosition(this.ap + this.ai);
                this.y.setRawYPosition(intDivide(this.al, 2) - intDivide(this.ah, 2));
            }
            if (this.g == null) {
                let a = this.v.getSubRenderer(this.y);
                this.g = new GridExpansionIndicator();
                this.g.ab(a);
                this.g.y(24, 24);
            }
            if (this.y.parent() == null) {
                this.x.append(this.y);
            }
        }
        bm() {
            this.ak = 0;
            this.aj = 0;
            if (this.y != null) {
                if (this.y.parent() != null) {
                    this.y.remove();
                }
            }
        }
        get n() {
            return this.i;
        }
        set n(a) {
            this.i = a;
        }
        get_r() {
            return false;
        }
        get r() {
            return this.get_r();
        }
        bu(a, b, c, d) {
            this.ap = a;
            this.ar = b;
            this.aq = c;
            this.ao = d;
            this.x.setRawStyleProperty("padding-left", a.toString() + "px");
            this.x.setRawStyleProperty("padding-top", b.toString() + "px");
            this.x.setRawStyleProperty("padding-right", c.toString() + "px");
            this.x.setRawStyleProperty("padding-bottom", d.toString() + "px");
        }
        bp(a, b, c, d, e) {
            this.ac = b;
            this.ae = c;
            this.ad = d;
            this.ab = e;
            this.b6 = a;
            if (a == null) {
                this.x.setRawStyleProperty("border", "");
            }
            else {
                this.x.setRawStyleProperty("border-color", a._fill);
                this.x.setRawStyleProperty("border-left-width", b.toString() + "px");
                this.x.setRawStyleProperty("border-top-width", c.toString() + "px");
                this.x.setRawStyleProperty("border-right-width", d.toString() + "px");
                this.x.setRawStyleProperty("border-bottom-width", e.toString() + "px");
                this.x.setRawStyleProperty("border-style", "solid");
            }
        }
        get_q() {
            return false;
        }
        get q() {
            return this.get_q();
        }
        bq(a, b) {
            if (this.al != a || this.am != b) {
                let c = this.al;
                this.al = a;
                this.am = b;
                let d = Math.max(0, this.al - this.am);
                this.x.setRawStyleProperty("height", a.toString() + "px");
                this.x.setRawStyleProperty("line-height", d.toString() + "px");
                if (this.y != null) {
                    this.y.setRawYPosition(intDivide(this.al, 2) - intDivide(this.ak, 2));
                }
                this.bx(this.at, this.al, this.at, c);
            }
        }
        bw(a, b) {
            if (this.at != a) {
                let c = this.at;
                this.at = a;
                this.x.setRawStyleProperty("width", a.toString() + "px");
                this.bx(this.at, this.al, c, this.al);
            }
        }
        bx(a, b, c, d) {
        }
        a4() {
            if (!this.r) {
                return;
            }
            this.i = true;
            this.h = new PlaceholderView(this.v);
            this.e = 0;
            this.f = 1;
            this.h.l = Color.u(120, 120, 120, 120);
            this.h.i = 0;
            this.x.append(this.h.g);
        }
        bo(a) {
            this.x.setRawStyleProperty("background-color", a.colorString);
        }
        bt(a) {
            this.x.setRawStyleProperty("opacity", a.toString());
        }
        b5(a) {
            if (!this.r) {
                return;
            }
            this.h.i = (a * 0.20000000298023224);
        }
        b3(a, b, c, d) {
            if (this.h != null) {
                let e = this.u;
                let f = this.t;
                if (this.f == 1) {
                    b = truncate((b + (d / 2) - (f / 2)));
                }
                else if (this.f == 2) {
                    b = truncate((b + (d) - (f)));
                }
                if (this.e == 1) {
                    a = truncate((a + (c / 2) - (e / 2)));
                }
                else if (this.e == 2) {
                    a = truncate((a + (c) - (e)));
                }
                this.h.g.setRawXPosition(a);
                this.h.g.setRawYPosition(b);
            }
        }
        be(a, b, c) {
        }
        b4(a) {
            if (!this.r) {
                return;
            }
            let b = DeviceUtils.f(12);
            if (a.af != null && !isNaN_(a.af.d)) {
                b = a.af.d;
            }
            if (this.t != b) {
                this.t = b;
                this.h.d = (b);
            }
            let c = a.gf * 0.2;
            let d = a.e0 * 0.6;
            if (this.u >= c && this.u <= d && !this.m) {
                return;
            }
            this.m = false;
            let e = (GridCellBase.ay.nextDouble() * (d - c) + c);
            if (this.u != e) {
                this.u = e;
                this.h.e = e;
            }
            this.b3(this.ap + this.ai + this.ak, this.ar, this.at - (this.ap + this.aq), this.al - (this.ar + this.ao));
        }
        b1(a, b) {
            if (!this.r) {
                return;
            }
            this.e = a;
            this.f = b;
            this.m = true;
        }
        b2(a) {
            if (!this.r) {
                return;
            }
            if (a != null) {
                this.h.l = a.color;
            }
        }
        bn(a) {
            this.a = a;
        }
        bs(a) {
            this.c = a;
        }
        br(a, b) {
            switch (b) {
                case 0:
                    this.z.setRawStyleProperty("text-align", "left");
                    break;
                case 1:
                    this.z.setRawStyleProperty("text-align", "center");
                    break;
                case 2:
                    this.z.setRawStyleProperty("text-align", "right");
                    break;
                case 3:
                    this.z.setRawStyleProperty("text-align", "center");
                    break;
            }
        }
        bv(a, b) {
            switch (b) {
                case 0:
                    a.setRawStyleProperty("vertical-align", "top");
                    break;
                case 1:
                    a.setRawStyleProperty("vertical-align", "center");
                    break;
                case 2:
                    a.setRawStyleProperty("vertical-align", "bottom");
                    break;
                case 3:
                    a.setRawStyleProperty("vertical-align", "center");
                    break;
            }
        }
        s(a) {
            return a.isClickActionDesired;
        }
        a7(a) {
            this.onContactStarted(a, false);
        }
        bb(a) {
            this.onContactCompleted(a, false);
        }
        ba(a) {
            this.onContactMoved(a, false);
        }
        a9(a) {
            this.bd(a, false);
        }
        a8(a) {
            this.bc(a, false);
        }
        bh(e_) {
            let a = (e_.originalEvent.pointerType);
            if (a == "touch") {
                this.by(e_);
            }
            else {
                this.a7(e_);
            }
        }
        bk(e_) {
            let a = (e_.originalEvent.pointerType);
            if (a == "touch") {
                this.bz(e_);
            }
            else {
                this.ba(e_);
            }
        }
        bl(e_) {
            let a = (e_.originalEvent.pointerType);
            if (a == "touch") {
                this.b0(e_);
            }
            else {
                this.bb(e_);
            }
        }
        bj(e_) {
            let a = (e_.originalEvent.pointerType);
            if (a != "touch") {
                this.a9(e_);
            }
        }
        bi(e_) {
            let a = (e_.originalEvent.pointerType);
            if (a != "touch") {
                this.a8(e_);
            }
        }
        by(a) {
            this.onContactStarted(a, true);
        }
        bz(a) {
            this.onContactMoved(a, true);
        }
        b0(a) {
            this.onContactCompleted(a, true);
        }
        onContactStarted(e_, a) {
            let b = false;
            if (this.o) {
                let indicator_ = this.g.q();
                b = (e_.originalEvent.srcElement === indicator_ || e_.originalEvent.target === indicator_);
            }
            this.j = false;
            if (b) {
                this.j = true;
            }
            else {
                if (this.a != null && this.s(this.a)) {
                    this.az = e_.pageX;
                    this.a0 = e_.pageY;
                    this.a.mouseDownCell(this.az, this.a0);
                }
            }
        }
        onContactMoved(a, b) {
            if (this.a != null) {
                let c = a.pageX;
                let d = a.pageY;
                if (this.s(this.a)) {
                    if (this.a.isMouseDown) {
                        if (b) {
                            if (PointUtil.equals(this.a.mousePosition, null) || Math.abs(c - this.a.mousePosition.x) > GridCellBase.as || Math.abs(d - this.a.mousePosition.y) > GridCellBase.as) {
                                this.a.mouseUpCell(c, d);
                            }
                            else {
                                a.stopPropagation();
                            }
                        }
                        else {
                            if (PointUtil.equals(this.a.mousePosition, null)) {
                                this.a.mouseUpCell(c, d);
                            }
                            else {
                                if (Math.abs(c - this.a.mousePosition.x) > GridCellBase.ag || Math.abs(d - this.a.mousePosition.y) > GridCellBase.ag) {
                                    this.a.isControlPressed = a.ctrlKey;
                                    this.a.dragStarted();
                                }
                            }
                        }
                    }
                }
                if (this.a.isHoverActionDesired) {
                    this.a.mouseIsOver(c, d);
                }
            }
        }
        onContactCompleted(e_, a) {
            this.af++;
            window.setTimeout(() => this.af = 0, 250);
            let b = false;
            if (this.o) {
                let indicator_ = this.g.q();
                b = (e_.originalEvent.srcElement === indicator_ || e_.originalEvent.target === indicator_);
            }
            if (this.j && b) {
                this.b.clickExpansionIndicator();
            }
            else {
                if (this.a != null && this.s(this.a)) {
                    let c = e_.pageX;
                    let d = e_.pageY;
                    if (PointUtil.equals(this.a.mousePosition, null) || Math.abs(c - this.a.mousePosition.x) > GridCellBase.as || Math.abs(d - this.a.mousePosition.y) > GridCellBase.as || this.a.isDrag) {
                        this.a.mouseUpCell(c, d);
                    }
                    if (this.a.isCellDown()) {
                        this.a.isControlPressed = e_.ctrlKey;
                        this.a.isShiftPressed = e_.shiftKey;
                        if (this.af > 1) {
                            this.a.doubleClicked();
                        }
                        else {
                            this.a.clickCell(e_.which == 1);
                        }
                        this.a.mouseUpCell(e_.pageX, e_.pageY);
                    }
                }
            }
            this.j = false;
        }
        bd(a, b) {
            if (this.a != null && this.a.isLeaveActionDesired) {
                let c = a.pageX;
                let d = a.pageY;
                this.a.mouseLeaveCell(c, d);
            }
        }
        bc(a, b) {
            if (this.a != null && this.a.isEnterActionDesired) {
                let c = a.pageX;
                let d = a.pageY;
                this.a.mouseEnterCell(c, d);
            }
        }
        onDoubleClick(a) {
        }
        bg(a, b, c) {
            switch (a) {
                case "Indent":
                    this.ai = this.ax * 24;
                    this.aj = this.ax > 0 ? 10 : 0;
                    if (this.y != null) {
                        this.y.setRawXPosition(this.ap + this.ai);
                        this.y.setRawYPosition(intDivide(this.al, 2) - intDivide(this.ah, 2));
                    }
                    break;
                case "IsCollapsable":
                    if (this.o) {
                        this.a6();
                    }
                    else {
                        this.bm();
                    }
                    break;
                case "IsExpanded":
                    if (this.g != null) {
                        this.g.g = this.p;
                    }
                    break;
            }
        }
        bf() {
        }
        a5() {
            this.x.focus(true);
        }
    }
    GridCellBase.$t = /*@__PURE__*/ markType(GridCellBase, 'GridCellBase', Base.$, [INativeCell_$type]);
    GridCellBase.ay = /*@__PURE__*/ new Random(0);
    GridCellBase.as = 10;
    GridCellBase.ag = 3;
    return GridCellBase;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let EditorCell = /*@__PURE__*/ (() => {
    class EditorCell extends GridCellBase {
        constructor(a) {
            super(a);
            this.c1 = null;
            this.c0 = null;
            this.ct = null;
            this.cu = null;
            this.cf = null;
            this.ce = null;
            this.cv = null;
            this.cd = null;
            this.c5 = null;
            this.cw = null;
            this.cx = null;
            this.cy = null;
            this.cz = null;
            this.cg = null;
            this.cj = false;
            this.b9 = 0;
            this.c7 = null;
            this.ch = null;
            this.cb = 0;
            this.c6 = null;
            this.da = null;
            this.b7 = null;
            this.cl = true;
            this.cn = false;
            this.co = false;
            this.cm = false;
            this.ck = false;
            this.cs = false;
            this.z.setAttribute("tabindex", "-1");
            this.z.setStyleProperty("outline", "none");
            this.z.setStyleProperty("display", "flex");
            this.z.setStyleProperty("align-items", "center");
            this.z.listen("keydown", runOn(this, this.d1));
            this.z.listen("focusout", runOn(this, this.d0));
            this.z.listen("focusin", runOn(this, this.dz));
        }
        get ca() {
            return this.b9;
        }
        set ca(a) {
            let b = this.b9;
            this.b9 = a;
            if (b != this.b9) {
                this.bg("DataType", enumGetBox(DataSourceSchemaPropertyType_$type, b), enumGetBox(DataSourceSchemaPropertyType_$type, this.b9));
            }
        }
        get c9() {
            return this.c7;
        }
        set c9(a) {
            let b = this.c7;
            this.c7 = a;
            if (b != this.c7) {
                this.bg("Value", b, this.c7);
            }
        }
        get ci() {
            return this.ch;
        }
        set ci(a) {
            let b = this.ch;
            this.ch = a;
            if (b != this.ch) {
                this.bg("FontInfo", b, this.ch);
            }
        }
        get cc() {
            return this.cb;
        }
        set cc(a) {
            let b = this.cb;
            this.cb = a;
            if (b != this.cb) {
                this.bg("EditorType", enumGetBox(EditorType_$type, b), enumGetBox(EditorType_$type, this.cb));
            }
        }
        get c8() {
            return this.c6;
        }
        set c8(a) {
            let b = this.c6;
            this.c6 = a;
            if (b != this.c6) {
                this.bg("ComboItemsSource", b, this.c6);
            }
        }
        get dc() {
            return this.da;
        }
        set dc(a) {
            let b = this.da;
            this.da = a;
            if (b != this.da) {
                this.bg("ComboTextField", b, this.da);
            }
        }
        get b8() {
            return this.b7;
        }
        set b8(a) {
            let b = this.b7;
            this.b7 = a;
            if (b != this.b7) {
                this.bg("ComboValueField", b, this.b7);
            }
        }
        get cr() {
            return this.cl;
        }
        set cr(a) {
            let b = this.cl;
            this.cl = a;
            if (b != this.cl) {
                this.bg("IsHidden", b, this.cl);
            }
        }
        c4(a) {
            if (this.cx == null) {
                this.cx = this.w.createElement("div");
                let b = this.w.getSubRenderer(this.cx);
                this.cg = new Popup();
                this.cg.provideRenderer(b);
                this.cz = this.w.createElement("div");
                this.cz.setStyleProperty("background-color", "rgba(0,0,0,0.7)");
                this.cz.setStyleProperty("color", "#fff");
                this.cz.setStyleProperty("padding", "5px");
                this.cz.setStyleProperty("outline", "none");
                this.cz.setAttribute("tabindex", "-1");
                this.cy = this.w.createElement("div");
                this.cy.setStyleProperty("white-space", "pre");
                if (this.ci != null) {
                    this.cy.setStyleProperty("font", this.ci.fontString);
                }
                this.cz.append(this.cy);
                this.cg.appendPopupContent(this.cz);
            }
            let c = null;
            switch (a) {
                case 0:
                    c = this.c3();
                    break;
                case 1:
                    c = this.c2();
                    break;
            }
            return c;
        }
        c3() {
            if (this.c1 != null) {
                this.du();
                this.dw();
                return this.c1;
            }
            this.c1 = this.w.createElement("div");
            this.c1.setRawStyleProperty("display", "flex");
            this.c1.setRawStyleProperty("width", "100%");
            this.c1.setRawStyleProperty("margin-top", "-10px");
            this.c1.setRawStyleProperty("height", "38px");
            this.ct = this.w.getSubRenderer(this.c1);
            this.cf = new InputGroup();
            this.cf.provideContainer(this.ct);
            this.cf.k = 0;
            this.cf.d = this.d.getTheme();
            this.cf.h = 3;
            this.c0 = this.w.createElement("div");
            this.c0.setRawStyleProperty("width", "100%");
            this.cu = this.w.getSubRenderer(this.c0);
            this.ce = new Input();
            this.ce.provideContainer(this.cu);
            this.ce.b0 = "text";
            let a = this.ce;
            a.changing = delegateCombine(a.changing, runOn(this, this.dy));
            this.ck = true;
            this.cf.appendContentChild(this.c0);
            this.cf.inputs.add(this.ce);
            return this.c1;
        }
        c2() {
            if (this.cv != null) {
                this.dr();
                this.du();
                this.dw();
                return this.cv;
            }
            this.cv = this.w.createElement("div");
            this.cv.setRawStyleProperty("margin-top", "-10px");
            this.cv.setRawStyleProperty("height", "38px");
            this.cv.setRawStyleProperty("width", "100%");
            this.w.getPortal(this.cv, "MultiColumnComboBox", (a) => {
                this.cd = a.componentRef;
                this.cd.height = "100%";
                this.cd.density = 3;
                this.cd.baseTheme = this.d.getTheme();
                this.cd.labelVisible = false;
                this.cd.columnHeadersVisible = false;
                this.cd.rowSeparatorsVisible = false;
                this.dr();
                this.d3();
                this.du();
                this.dw();
                this.c5 = this.cd.i;
                this.c5.valueChanged = delegateCombine(this.c5.valueChanged, runOn(this, this.onComboValueChanged));
                this.c5.textChanged = delegateCombine(this.c5.textChanged, runOn(this, this.onComboTextChanged));
                this.c5.gotFocus = delegateCombine(this.c5.gotFocus, runOn(this, this.onComboGotFocus));
                this.c5.lostFocus = delegateCombine(this.c5.lostFocus, runOn(this, this.onComboLostFocus));
                this.ck = true;
            }, false);
            return this.cv;
        }
        dx(a, b) {
            if (b.g != b.d || b.h != b.e) {
                if (this.cd != null) {
                    this.cd.closeUp();
                }
                this.dm();
            }
        }
        dk() {
            if (!this.ck) {
                if (this.c5 != null) {
                    this.c5.valueChanged = delegateCombine(this.c5.valueChanged, runOn(this, this.onComboValueChanged));
                    this.c5.textChanged = delegateCombine(this.c5.textChanged, runOn(this, this.onComboTextChanged));
                    this.c5.gotFocus = delegateCombine(this.c5.gotFocus, runOn(this, this.onComboGotFocus));
                    this.c5.lostFocus = delegateCombine(this.c5.lostFocus, runOn(this, this.onComboLostFocus));
                }
                if (this.ce != null) {
                    let a = this.ce;
                    a.changing = delegateCombine(a.changing, runOn(this, this.dy));
                }
                this.ck = true;
            }
        }
        dl() {
            if (this.ck) {
                if (this.c5 != null) {
                    this.c5.valueChanged = delegateRemove(this.c5.valueChanged, runOn(this, this.onComboValueChanged));
                    this.c5.textChanged = delegateRemove(this.c5.textChanged, runOn(this, this.onComboTextChanged));
                    this.c5.gotFocus = delegateRemove(this.c5.gotFocus, runOn(this, this.onComboGotFocus));
                    this.c5.lostFocus = delegateRemove(this.c5.lostFocus, runOn(this, this.onComboLostFocus));
                }
                if (this.ce != null) {
                    let a = this.ce;
                    a.changing = delegateRemove(a.changing, runOn(this, this.dy));
                }
                this.ck = false;
            }
        }
        d2(a) {
            this.cn = false;
            this.co = false;
            this.cm = false;
            if (!a) {
                this.co = true;
                if (this.cc == 0) {
                    if (this.ce != null) {
                        this.ce.ck();
                        if (this.ce.b0 != "date") {
                            window.setTimeout(() => this.ce.db(), 0);
                        }
                    }
                }
                else if (this.cc == 1) {
                    if (this.cd != null) {
                        if (this.cd.value == null && this.cd.text != "") {
                            this.cd.text = "";
                        }
                        this.cd.focus();
                        this.cd.select();
                    }
                }
            }
        }
        d3() {
            if (this.cc == 0) {
                if (this.ce != null) {
                    if (this.c9 != null) {
                        if (this.ca == 8) {
                            let a = this.c9;
                            let b = dateGetMonth(a) < 10 ? "0" + dateGetMonth(a) : dateGetMonth(a).toString();
                            let c = a.getDate() < 10 ? "0" + a.getDate() : a.getDate().toString();
                            this.ce.cf = null;
                            this.ce.cf = a.getFullYear() + "-" + b + "-" + c;
                        }
                        else {
                            this.ce.cf = null;
                            this.ce.cf = this.c9.toString();
                        }
                        this.b.updateCellEditValue(this.ce.cf);
                    }
                    else {
                        this.ce.cf = null;
                    }
                }
            }
            else if (this.cc == 1) {
                if (this.cd != null) {
                    if (this.c9 == null) {
                        this.cd.text = " ";
                    }
                    this.cd.value = this.c9;
                }
            }
        }
        du() {
            if (this.cc == 0) {
                switch (this.ca) {
                    case 10:
                    case 6:
                    case 5:
                    case 1:
                    case 3:
                    case 4:
                    case 7:
                        this.ce.b0 = "number";
                        break;
                    case 8:
                        this.ce.b0 = "date";
                        break;
                    default:
                        this.ce.b0 = "text";
                        break;
                }
            }
        }
        dv() {
            this.cj = true;
            this.z.removeChildren();
            this.cw = this.c4(this.cc);
            this.z.append(this.cw);
            this.cj = false;
        }
        dr() {
            if (this.cd != null) {
                this.dl();
                this.cd.dataSource = this.c8;
                this.cd.textField = this.dc;
                this.cd.valueField = this.b8;
                if (this.dc != null) {
                    this.cd.fields = [this.dc];
                }
                else if (this.b8 != null && this.b8.length > 0) {
                    this.cd.fields = [this.b8[0]];
                }
                else {
                    let a = typeCast(IDataSource_$type, this.c8);
                    if (a != null && a.actualSchema != null) {
                        this.cd.fields = [a.actualSchema.propertyNames[0]];
                    }
                    else {
                        let b = (Array.isArray(this.c8));
                        if (b) {
                            let c = (Object.keys(this.c8[0]));
                            if (c.length > 0) {
                                this.cd.fields = [c[0]];
                            }
                        }
                    }
                }
                this.dk();
            }
        }
        dw() {
            if (this.ci != null) {
                if (this.cc == 0) {
                    if (this.ce != null) {
                        this.ce.ac = this.ci;
                    }
                }
                else if (this.cc == 1) {
                    if (this.cd != null) {
                        this.cd.textStyle = this.ci.fontString;
                    }
                }
                this.cy.setStyleProperty("font", this.ci.fontString);
            }
        }
        dn() {
            if (this.cr) {
                this.dl();
            }
            else {
                this.dk();
            }
        }
        d4(a, b, c, d, e) {
            if (!stringIsNullOrWhiteSpace(a)) {
                this.cy.setRawText(a);
                this.d5();
            }
        }
        d5() {
            let rect_ = this.z.getNativeElement().getBoundingClientRect();
            let a = new Rect(4);
            a.left = (rect_.left + window.pageXOffset);
            a.top = (rect_.top + window.pageYOffset);
            a.right = (rect_.right + window.pageXOffset);
            a.bottom = (rect_.bottom + window.pageYOffset);
            this.cg.showRelativeToExclusionRect(a, 1, 0);
        }
        dm() {
            if (this.cg.t) {
                this.cg.an();
            }
        }
        bf() {
            if (this.cw == null) {
                this.dv();
                this.d.setViewportChangedHandler(runOn(this, this.dx));
            }
        }
        bg(a, b, c) {
            super.bg(a, b, c);
            switch (a) {
                case "EditorType":
                    this.dv();
                    break;
                case "ComboItemsSource":
                case "ComboTextField":
                case "ComboValueField":
                    this.dr();
                    break;
                case "DataType":
                    this.du();
                    break;
                case "Value":
                    this.d3();
                    break;
                case "FontInfo":
                    this.dw();
                    break;
                case "IsHidden":
                    this.dn();
                    break;
            }
        }
        onComboValueChanged(a, b) {
            this.d6();
        }
        onComboTextChanged(a, b) {
            this.d6();
        }
        d6() {
            if (this.co && this.cc == 1) {
                if (this.cd.value != null) {
                    this.b.updateCellEditValue(this.cd.value);
                }
                else if (this.cd.value == null && stringIsNullOrWhiteSpace(this.cd.text)) {
                    this.b.updateCellEditValue(null);
                }
                else {
                    this.b.updateCellEditValue(this.c9);
                }
            }
        }
        dy(a, b) {
            let c = b.value;
            if (this.ca == 8) {
                let d = b.value.split('-');
                let e = parseInt(d[0]);
                let f = parseInt(d[1]);
                let g = parseInt(d[2]);
                c = dateFromValues(e, f, g, 0, 0, 0, 0);
            }
            this.b.updateCellEditValue(c);
        }
        d1(a) {
            switch (BaseDOMEventProxy.cu(a)) {
                case 14:
                case 16:
                case 15:
                case 17:
                    a.stopPropagation();
                    break;
            }
        }
        cq(a) {
            if (a != null && this.cg != null && this.cg.t) {
                let b = this.cz.getNativeElement();
                return b.contains(a);
            }
            return false;
        }
        cp(a) {
            if (a != null) {
                let b = this.z.getNativeElement();
                return b.contains(a);
            }
            return false;
        }
        d0(a) {
            if (!this.cj) {
                let b = (a.originalEvent.relatedTarget);
                if (this.cm && !this.cp(b) && !this.cq(b)) {
                    this.b.editorCellLostFocus();
                    this.dm();
                }
            }
        }
        dz(a) {
            if (this.cn && !this.cg.t) {
                this.d5();
            }
        }
        onComboLostFocus(a) {
            this.cm = true;
        }
        onComboGotFocus(a) {
            this.cm = false;
        }
        onContactStarted(a, b) {
            a.stopPropagation();
        }
        onContactCompleted(a, b) {
            a.stopPropagation();
        }
        onDoubleClick(a) {
            a.stopPropagation();
        }
    }
    EditorCell.$t = /*@__PURE__*/ markType(EditorCell, 'EditorCell', GridCellBase.$);
    return EditorCell;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let CellPresenterBase = /*@__PURE__*/ (() => {
    class CellPresenterBase extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.a = a;
        }
        modelUpdated(a) {
            this.b(a);
        }
        b(a) {
            this.a.bn(a.c);
            this.a.bs(a.d);
            this.a.bf();
            if (a.ax(CellModel.d2) || a.ax(CellModel.d6) || a.ax(CellModel.d4) || a.ax(CellModel.d0)) {
                this.a.bu(a.d1, a.d5, a.d3, a.dz);
            }
            if (a.aq) {
                this.a.bp(a.kc, a.dp, a.du, a.ds, a.dm);
                if (a.ax(CellModel.dk)) {
                    if (!a.a1 && a.o.g1 && a.a0 && a.by == 1) {
                        this.a.a5();
                    }
                }
            }
            if (a.ba) {
                this.a.bq(a.e0, (a.d5 + a.dz + a.du + a.dm));
                this.a.bw(a.gf, (a.d1 + a.d3 + a.dp + a.ds));
            }
            if (a.as) {
                if (a.a4 && !this.a.n) {
                    this.a.a4();
                }
                if (a.ax(CellModel.dl)) {
                    this.a.bo(a.kb.color);
                }
                if (a.ax(CellModel.dy)) {
                    this.a.bt(a.b0);
                }
                if (a.aw("IsCollapsable")) {
                    this.a.o = a.ar;
                    this.a.ax = a.e5;
                    this.a.p = a.az;
                    this.a.bw(a.gf, (a.d1 + a.d3 + a.dp + a.ds));
                }
                if (a.aw("Indent")) {
                    this.a.ax = a.e5;
                    this.a.bw(a.gf, (a.d1 + a.d3 + a.dp + a.ds));
                }
                if (a.aw("IsExpanded")) {
                    this.a.p = a.az;
                }
            }
            if (a.ba && a.a4) {
                this.a.b4(a);
            }
        }
        c(a, b, c) {
            if (c == 0) {
                return a.color;
            }
            if (c == 1) {
                return b.color;
            }
            let d = BrushUtil.k(a, c, b, 0);
            return d.color;
        }
        get nativeCell() {
            return this.a;
        }
        get isCanvasBased() {
            return false;
        }
    }
    CellPresenterBase.$t = /*@__PURE__*/ markType(CellPresenterBase, 'CellPresenterBase', Base.$, [ICellPresenter_$type]);
    return CellPresenterBase;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let EditorCellPresenter = /*@__PURE__*/ (() => {
    class EditorCellPresenter extends CellPresenterBase {
        constructor(a) {
            super(a);
        }
        get d() {
            return this.a;
        }
        b(a) {
            super.b(a);
            let b = a;
            if (b.as) {
                if (b.ax(EditorCellModel.k5) || b.ax(EditorCellModel.k3) || b.ax(EditorCellModel.k4) || b.ax(EditorCellModel.k6)) {
                    this.d.cc = b.kx;
                    this.d.c8 = b.ld;
                    this.d.dc = b.lj;
                    this.d.b8 = b.kr;
                }
                if (b.ax(EditorCellModel.k2)) {
                    this.d.ca = b.kt;
                }
                if (b.ax(EditorCellModel.k8)) {
                    this.d.c9 = b.le;
                }
                if (b.ax(EditorCellModel.k7)) {
                    this.d.d2(b.kv == null);
                }
                if (b.ax(CellModel.ey)) {
                    this.d.ci = b.af;
                }
                if (b.ax(EditorCellModel.k9)) {
                    if (stringIsNullOrWhiteSpace(b.lp)) {
                        this.d.cn = false;
                        this.d.dm();
                    }
                    else {
                        this.d.cn = true;
                        this.d.d4(b.lp, b.cc, b.cd, b.gf, b.e0);
                    }
                }
                if (b.ax(EditorCellModel.la)) {
                    this.d.cr = b.kz;
                }
            }
        }
    }
    EditorCellPresenter.$t = /*@__PURE__*/ markType(EditorCellPresenter, 'EditorCellPresenter', CellPresenterBase.$);
    return EditorCellPresenter;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let EditorRowCell = /*@__PURE__*/ (() => {
    class EditorRowCell extends GridCellBase {
        constructor(a) {
            super(a);
            this.z.setRawStyleProperty("pointer-events", "none");
        }
    }
    EditorRowCell.$t = /*@__PURE__*/ markType(EditorRowCell, 'EditorRowCell', GridCellBase.$);
    return EditorRowCell;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let EditorRowCellPresenter = /*@__PURE__*/ (() => {
    class EditorRowCellPresenter extends CellPresenterBase {
        constructor(a) {
            super(a);
        }
        get d() {
            return this.a;
        }
        b(a) {
            super.b(a);
        }
    }
    EditorRowCellPresenter.$t = /*@__PURE__*/ markType(EditorRowCellPresenter, 'EditorRowCellPresenter', CellPresenterBase.$);
    return EditorRowCellPresenter;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let TextCell = /*@__PURE__*/ (() => {
    class TextCell extends GridCellBase {
        constructor(a) {
            super(a);
            this.b7 = null;
            this.ca = -1;
            this.b9 = -1;
            this.b7 = a.createElement("span");
            this.z.setRawStyleProperty("text-align", "left");
            this.b7.setRawStyleProperty("display", "inline-block");
            this.b7.setRawStyleProperty("line-height", "normal");
            this.b7.setRawStyleProperty("vertical-align", "middle");
            this.b7.setRawStyleProperty("overflow", "hidden");
            this.b7.setRawStyleProperty("white-space", "nowrap");
            this.b7.setRawStyleProperty("text-overflow", "ellipsis");
            this.z.setRawStyleProperty("vertical-align", "middle");
            this.z.append(this.b7);
        }
        get b8() {
            return this.b7;
        }
        bw(a, b) {
            super.bw(a, b);
            let c = Math.max(0, a - b - (this.au + this.aw + this.av));
            if (this.ca != c) {
                this.ca = c;
                this.b7.setRawStyleProperty("max-width", c.toString() + "px");
            }
        }
        bq(a, b) {
            super.bq(a, b);
            let c = Math.max(0, a - b);
            if (this.b9 != c) {
                this.b9 = c;
                this.b7.setRawStyleProperty("max-height", c.toString() + "px");
            }
        }
        get_r() {
            return true;
        }
        bg(a, b, c) {
            super.bg(a, b, c);
            if (a == "Indent" || a == "IsCollapsable") {
                this.b7.setRawStyleProperty("margin-left", this.au + this.aw + this.av + "px");
            }
        }
    }
    TextCell.$t = /*@__PURE__*/ markType(TextCell, 'TextCell', GridCellBase.$);
    return TextCell;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let ContentCellModelHelper = /*@__PURE__*/ (() => {
    class ContentCellModelHelper extends Base {
        static g(a) {
            if (a == null) {
                return ContentCellModelHelper.f;
            }
            return a.color;
        }
        static c(a, b, c) {
            switch (c) {
                case 0:
                    a.setRawStyleProperty("text-align", "left");
                    break;
                case 1:
                    a.setRawStyleProperty("text-align", "center");
                    break;
                case 2:
                    a.setRawStyleProperty("text-align", "right");
                    break;
                case 3:
                    a.setRawStyleProperty("text-align", "center");
                    break;
            }
        }
        static e(a, b, c) {
            switch (c) {
                case 0:
                    b.setRawStyleProperty("vertical-align", "top");
                    break;
                case 1:
                    b.setRawStyleProperty("vertical-align", "center");
                    break;
                case 2:
                    b.setRawStyleProperty("vertical-align", "bottom");
                    break;
                case 3:
                    b.setRawStyleProperty("vertical-align", "center");
                    break;
            }
        }
        static a(a, b, c, d, e) {
            if (b.as) {
                if (b.ax(CellModel.ei) || b.ax(CellModel.dw) || b.ax(CellModel.ge) || b.aw("IsRowPinned") || b.aw("IsRowSticky") || b.aw("PinnedRowOpacity")) {
                    let f = Math.min(1, Math.max(0, b.cb));
                    let g = b.bz * (1 - f);
                    d.setRawStyleProperty("opacity", g.toString());
                    if (b.a4) {
                        e.b5(b.bz * f);
                    }
                }
                if (b.ax(CellModel.d7)) {
                    ContentCellModelHelper.d(d, b.kd);
                    if (b.a4) {
                        e.b2(b.kd);
                    }
                }
                if (b.ax(CellModel.fi)) {
                    switch (b.z) {
                        case 0:
                            d.setRawStyleProperty("white-space", "nowrap");
                            d.setRawStyleProperty("text-overflow", "ellipsis");
                            break;
                        case 3:
                        case 2:
                            d.setRawStyleProperty("white-space", "pre-wrap");
                            d.setRawStyleProperty("text-overflow", "ellipsis");
                            break;
                        case 1:
                            d.setRawStyleProperty("white-space", "nowrap");
                            d.setRawStyleProperty("text-overflow", "clip");
                            break;
                    }
                }
                if (b.ax(CellModel.e2) || b.ax(CellModel.gd)) {
                    let h = b.f;
                    let i = b.h;
                    ContentCellModelHelper.c(c, d, h);
                    e.be(c, d, h);
                    ContentCellModelHelper.e(c, d, i);
                    if (b.a4) {
                        e.b1(h, i);
                    }
                }
                if (b.aw("ActualFontInfo")) {
                    ContentCellModelHelper.b(a, d, b.ad);
                }
                if (b.aw("IsEdited") || b.aw("IsDeleted")) {
                    if (b.ay || b.av) {
                        if (b.av) {
                            d.setRawStyleProperty("text-decoration", "line-through");
                        }
                        else {
                            d.setRawStyleProperty("text-decoration", "none");
                        }
                    }
                    else {
                        d.setRawStyleProperty("text-decoration", "none");
                    }
                }
            }
        }
        static b(a, b, c) {
            if (c == null) {
                c = FontUtil.getDefaultFont(a);
            }
            b.setRawStyleProperty("font", c.fontString);
        }
        static d(a, b) {
            let c = ContentCellModelHelper.g(b);
            a.setRawStyleProperty("color", c.colorString);
        }
    }
    ContentCellModelHelper.$t = /*@__PURE__*/ markType(ContentCellModelHelper, 'ContentCellModelHelper');
    ContentCellModelHelper.f = /*@__PURE__*/ Color.u(0, 0, 0, 0);
    return ContentCellModelHelper;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let TextCellPresenter = /*@__PURE__*/ (() => {
    class TextCellPresenter extends CellPresenterBase {
        constructor(a) {
            super(a);
        }
        get d() {
            return this.a;
        }
        b(a) {
            super.b(a);
            let b = a;
            if (a.as) {
                if (a.ax(TextCellModel.kq) || a.ax(CellModel.fl)) {
                    if (b.ks != null) {
                        b.ip = b.ks;
                    }
                    else {
                        if (b.go == null) {
                            b.ip = "";
                        }
                        else {
                            b.ip = b.go.toString();
                        }
                    }
                    this.d.b8.setRawText(b.ip);
                }
                ContentCellModelHelper.a(this.a.w, b, this.a.z, this.d.b8, this.a);
            }
        }
    }
    TextCellPresenter.$t = /*@__PURE__*/ markType(TextCellPresenter, 'TextCellPresenter', CellPresenterBase.$);
    return TextCellPresenter;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let NumericCell = /*@__PURE__*/ (() => {
    class NumericCell extends TextCell {
        constructor(a) {
            super(a);
            this.br(this.b8, 2);
            this.bv(this.b8, 1);
        }
        bg(a, b, c) {
            super.bg(a, b, c);
            if (a == "Indent" || a == "IsCollapsable") {
                this.b8.setRawStyleProperty("margin-left", this.au + this.aw + this.av + "px");
            }
        }
    }
    NumericCell.$t = /*@__PURE__*/ markType(NumericCell, 'NumericCell', TextCell.$);
    return NumericCell;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let NumericCellPresenter = /*@__PURE__*/ (() => {
    class NumericCellPresenter extends CellPresenterBase {
        constructor(a) {
            super(a);
        }
        get d() {
            return this.a;
        }
        b(a) {
            super.b(a);
            let b = a;
            if (a.as) {
                if (a.ax(NumericCellModel.lf) || b.kw()) {
                    b.ip = this.e(b);
                    this.d.b8.setRawText(b.ip);
                }
                ContentCellModelHelper.a(this.a.w, b, this.a.z, this.d.b8, this.a);
            }
        }
        e(a) {
            if (a.ll != null) {
                let val_ = a.kz;
                let override_ = a.ll;
                return (override_.format(val_));
            }
            return NumericCellFormatter.b(a);
        }
    }
    NumericCellPresenter.$t = /*@__PURE__*/ markType(NumericCellPresenter, 'NumericCellPresenter', CellPresenterBase.$);
    return NumericCellPresenter;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let DateTimeCell = /*@__PURE__*/ (() => {
    class DateTimeCell extends TextCell {
        constructor(a) {
            super(a);
        }
    }
    DateTimeCell.$t = /*@__PURE__*/ markType(DateTimeCell, 'DateTimeCell', TextCell.$);
    return DateTimeCell;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let DateTimeCellPresenter = /*@__PURE__*/ (() => {
    class DateTimeCellPresenter extends CellPresenterBase {
        constructor(a) {
            super(a);
        }
        get d() {
            return this.a;
        }
        b(a) {
            super.b(a);
            let b = a;
            if (a.as) {
                if (a.ax(DateTimeCellModel.k2) || a.ax(DateTimeCellModel.k3) || a.ax(DateTimeCellModel.k1) || a.ax(DateTimeCellModel.fl)) {
                    this.e(b);
                    this.d.b8.setRawText(b.ip);
                }
                ContentCellModelHelper.a(this.a.w, b, this.a.z, this.d.b8, this.a);
            }
        }
        e(a) {
            a.ip = a.le(a.k0);
            if (a.ip == stringEmpty() && a.go != null) {
                a.ip = a.go.toString();
            }
        }
    }
    DateTimeCellPresenter.$t = /*@__PURE__*/ markType(DateTimeCellPresenter, 'DateTimeCellPresenter', CellPresenterBase.$);
    return DateTimeCellPresenter;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridFilterDialogOpeningEventArgs = /*@__PURE__*/ (() => {
    class GridFilterDialogOpeningEventArgs extends Base {
        constructor() {
            super(...arguments);
            this.a = null;
        }
    }
    GridFilterDialogOpeningEventArgs.$t = /*@__PURE__*/ markType(GridFilterDialogOpeningEventArgs, 'GridFilterDialogOpeningEventArgs');
    return GridFilterDialogOpeningEventArgs;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridFilterDialogFilterChangeEventArgs = /*@__PURE__*/ (() => {
    class GridFilterDialogFilterChangeEventArgs extends Base {
        constructor() {
            super(...arguments);
            this.a = null;
        }
    }
    GridFilterDialogFilterChangeEventArgs.$t = /*@__PURE__*/ markType(GridFilterDialogFilterChangeEventArgs, 'GridFilterDialogFilterChangeEventArgs');
    return GridFilterDialogFilterChangeEventArgs;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let ColumnFilterCondition = /*@__PURE__*/ (() => {
    class ColumnFilterCondition extends Base {
        b() {
            return false;
        }
        a(a, b) {
            return null;
        }
    }
    ColumnFilterCondition.$t = /*@__PURE__*/ markType(ColumnFilterCondition, 'ColumnFilterCondition');
    return ColumnFilterCondition;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let ColumnFilterConditionCollection = /*@__PURE__*/ (() => {
    class ColumnFilterConditionCollection extends ObservableCollection$1 {
        constructor() {
            super(ColumnFilterCondition.$, 0);
        }
    }
    ColumnFilterConditionCollection.$t = /*@__PURE__*/ markType(ColumnFilterConditionCollection, 'ColumnFilterConditionCollection', /*@__PURE__*/ ObservableCollection$1.$.specialize(ColumnFilterCondition.$));
    return ColumnFilterConditionCollection;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let ColumnFilterConditionGroup = /*@__PURE__*/ (() => {
    class ColumnFilterConditionGroup extends ColumnFilterCondition {
        constructor() {
            super();
            this.f = false;
            this.e = null;
            this.e = new ColumnFilterConditionCollection();
            this.f = false;
        }
        b() {
            return true;
        }
        equals(a) {
            if (a == null) {
                return false;
            }
            if (!(typeCast(ColumnFilterConditionGroup.$, a) !== null)) {
                return false;
            }
            let b = a;
            if (b.g != this.g) {
                return false;
            }
            for (let c = 0; c < this.g; c++) {
                if (!Base.equalsStatic(this.item(c), b.item(c))) {
                    return false;
                }
            }
            return true;
        }
        get g() {
            return this.e.count;
        }
        h(a) {
            this.e.add(a);
        }
        j(a) {
            this.e.remove(a);
        }
        k(a) {
            this.e.removeAt(a);
        }
        item(a, b) {
            if (arguments.length === 2) {
                this.e._inner[a] = b;
                return b;
            }
            else {
                return this.e._inner[a];
            }
        }
        i() {
            this.e.clear();
        }
        c() {
            let a = new Array(this.e.count);
            for (let b = 0; b < this.e.count; b++) {
                a[b] = this.e._inner[b];
            }
            return a;
        }
        a(a, b) {
            if (this.e.count == 0) {
                return null;
            }
            let c = this.e._inner[this.e.count - 1].a(a, b);
            for (let d = this.e.count - 2; d >= 0; d--) {
                if (this.f) {
                    c = FilterFactory.instance.or(this.e._inner[d].a(a, b), c);
                }
                else {
                    c = FilterFactory.instance.and(this.e._inner[d].a(a, b), c);
                }
            }
            return c;
        }
    }
    ColumnFilterConditionGroup.$t = /*@__PURE__*/ markType(ColumnFilterConditionGroup, 'ColumnFilterConditionGroup', ColumnFilterCondition.$);
    return ColumnFilterConditionGroup;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridFilterDialogViewModelRow = /*@__PURE__*/ (() => {
    class GridFilterDialogViewModelRow extends Base {
        constructor() {
            super(...arguments);
            this.c = null;
            this.b = null;
            this.k = null;
            this.a = null;
            this.g = null;
            this.h = null;
            this.propertyChanged = null;
        }
        get f() {
            return this.c;
        }
        set f(a) {
            let b = this.c;
            this.c = a;
            if (b != this.c) {
                this.m("OperatorTypes");
            }
        }
        m(a) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
        }
        get e() {
            return this.b;
        }
        set e(a) {
            let b = this.b;
            this.b = a;
            if (b != this.b) {
                this.m("Operators");
            }
        }
        get l() {
            return this.k;
        }
        set l(a) {
            let b = this.k;
            this.k = a;
            if (b != this.k) {
                this.m("CurrentOperator");
            }
        }
        get d() {
            return this.a;
        }
        set d(a) {
            let b = this.a;
            this.a = a;
            if (b != this.a) {
                this.m("OperandNumber");
            }
        }
        get i() {
            return this.g;
        }
        set i(a) {
            let b = this.g;
            this.g = a;
            if (b != this.g) {
                this.m("Operand1");
            }
        }
        get j() {
            return this.h;
        }
        set j(a) {
            let b = this.h;
            this.h = a;
            if (b != this.h) {
                this.m("Operand2");
            }
        }
    }
    GridFilterDialogViewModelRow.$t = /*@__PURE__*/ markType(GridFilterDialogViewModelRow, 'GridFilterDialogViewModelRow', Base.$, [INotifyPropertyChanged_$type]);
    return GridFilterDialogViewModelRow;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridFilterDialogViewModelGrouping = /*@__PURE__*/ (() => {
    class GridFilterDialogViewModelGrouping extends Base {
        constructor() {
            super(...arguments);
            this.c = 0;
            this.b = 0;
            this.a = false;
        }
    }
    GridFilterDialogViewModelGrouping.$t = /*@__PURE__*/ markType(GridFilterDialogViewModelGrouping, 'GridFilterDialogViewModelGrouping');
    return GridFilterDialogViewModelGrouping;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridFilterDialogViewModelGroupingLevel = /*@__PURE__*/ (() => {
    class GridFilterDialogViewModelGroupingLevel extends ObservableCollection$1 {
        constructor() {
            super(GridFilterDialogViewModelGrouping.$, 0);
        }
    }
    GridFilterDialogViewModelGroupingLevel.$t = /*@__PURE__*/ markType(GridFilterDialogViewModelGroupingLevel, 'GridFilterDialogViewModelGroupingLevel', /*@__PURE__*/ ObservableCollection$1.$.specialize(GridFilterDialogViewModelGrouping.$));
    return GridFilterDialogViewModelGroupingLevel;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * Identifies the operator type of a column comparison condition.
 */
var ColumnComparisonConditionOperatorType = /*@__PURE__*/ (function (ColumnComparisonConditionOperatorType) {
    ColumnComparisonConditionOperatorType[ColumnComparisonConditionOperatorType["Contains"] = 0] = "Contains";
    ColumnComparisonConditionOperatorType[ColumnComparisonConditionOperatorType["DoesNotContain"] = 1] = "DoesNotContain";
    ColumnComparisonConditionOperatorType[ColumnComparisonConditionOperatorType["DoesNotEndWith"] = 2] = "DoesNotEndWith";
    ColumnComparisonConditionOperatorType[ColumnComparisonConditionOperatorType["DoesNotStartWith"] = 3] = "DoesNotStartWith";
    ColumnComparisonConditionOperatorType[ColumnComparisonConditionOperatorType["EndsWith"] = 4] = "EndsWith";
    ColumnComparisonConditionOperatorType[ColumnComparisonConditionOperatorType["Equals"] = 5] = "Equals";
    ColumnComparisonConditionOperatorType[ColumnComparisonConditionOperatorType["GreaterThan"] = 6] = "GreaterThan";
    ColumnComparisonConditionOperatorType[ColumnComparisonConditionOperatorType["GreaterThanOrEqualTo"] = 7] = "GreaterThanOrEqualTo";
    ColumnComparisonConditionOperatorType[ColumnComparisonConditionOperatorType["LessThan"] = 8] = "LessThan";
    ColumnComparisonConditionOperatorType[ColumnComparisonConditionOperatorType["LessThanOrEqualTo"] = 9] = "LessThanOrEqualTo";
    ColumnComparisonConditionOperatorType[ColumnComparisonConditionOperatorType["NotEquals"] = 10] = "NotEquals";
    ColumnComparisonConditionOperatorType[ColumnComparisonConditionOperatorType["StartsWith"] = 11] = "StartsWith";
    ColumnComparisonConditionOperatorType[ColumnComparisonConditionOperatorType["IsNotNull"] = 12] = "IsNotNull";
    ColumnComparisonConditionOperatorType[ColumnComparisonConditionOperatorType["IsNull"] = 13] = "IsNull";
    return ColumnComparisonConditionOperatorType;
})({});
/**
 * @hidden
 */
let ColumnComparisonConditionOperatorType_$type = /*@__PURE__*/ markEnum('ColumnComparisonConditionOperatorType', 'Contains,0|DoesNotContain,1|DoesNotEndWith,2|DoesNotStartWith,3|EndsWith,4|Equals,5|GreaterThan,6|GreaterThanOrEqualTo,7|LessThan,8|LessThanOrEqualTo,9|NotEquals,10|StartsWith,11|IsNotNull,12|IsNull,13');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let ColumnComparisonFilterCondition = /*@__PURE__*/ (() => {
    class ColumnComparisonFilterCondition extends ColumnFilterCondition {
        constructor() {
            super();
            this.e = 0;
            this.j = null;
            this.g = false;
            this.g = true;
        }
        static c(a) {
            let b = new List$1(ColumnComparisonConditionOperatorType_$type, 0);
            switch (a) {
                case 11: break;
                case 2: break;
                case 10:
                case 6:
                case 5:
                case 1:
                case 3:
                case 8:
                    b.add(6);
                    b.add(7);
                    b.add(8);
                    b.add(9);
                    break;
                case 0:
                    b.add(11);
                    b.add(3);
                    b.add(4);
                    b.add(2);
                    b.add(0);
                    b.add(1);
                    b.add(6);
                    b.add(7);
                    b.add(8);
                    b.add(9);
                    break;
            }
            b.add(5);
            b.add(10);
            b.add(12);
            b.add(13);
            return b.toArray();
        }
        equals(a) {
            if (a == null) {
                return false;
            }
            if (!(typeCast(ColumnComparisonFilterCondition.$, a) !== null)) {
                return false;
            }
            let b = a;
            if (b.e != this.e) {
                return false;
            }
            if (!Base.equalsStatic(b.j, this.j)) {
                return false;
            }
            if (!Base.equalsStatic(b.g, this.g)) {
                return false;
            }
            return true;
        }
        a(a, b) {
            switch (this.e) {
                case 0:
                    {
                        if (this.j == null) {
                            return null;
                        }
                        let c = FilterFactory.instance.property(a);
                        let d = FilterFactory.instance.literal(this.j);
                        c = ColumnComparisonFilterCondition.f(b, c);
                        if (null == c) {
                            return null;
                        }
                        if (!this.g) {
                            c = c.toLower();
                            d = d.toLower();
                        }
                        return c.contains(d);
                    }
                case 1:
                    {
                        if (this.j == null) {
                            return null;
                        }
                        let e = FilterFactory.instance.property(a);
                        let f = FilterFactory.instance.literal(this.j);
                        e = ColumnComparisonFilterCondition.f(b, e);
                        if (null == e) {
                            return null;
                        }
                        if (!this.g) {
                            e = e.toLower();
                            f = f.toLower();
                        }
                        return e.contains(f).not();
                    }
                case 2:
                    {
                        if (this.j == null) {
                            return null;
                        }
                        let g = FilterFactory.instance.property(a);
                        let h = FilterFactory.instance.literal(this.j);
                        g = ColumnComparisonFilterCondition.f(b, g);
                        if (null == g) {
                            return null;
                        }
                        if (!this.g) {
                            g = g.toLower();
                            h = h.toLower();
                        }
                        return g.endsWith(h).not();
                    }
                case 3:
                    {
                        if (this.j == null) {
                            return null;
                        }
                        let i = FilterFactory.instance.property(a);
                        let j = FilterFactory.instance.literal(this.j);
                        i = ColumnComparisonFilterCondition.f(b, i);
                        if (null == i) {
                            return null;
                        }
                        if (!this.g) {
                            i = i.toLower();
                            j = j.toLower();
                        }
                        return i.startsWith(j).not();
                    }
                case 4:
                    {
                        if (this.j == null) {
                            return null;
                        }
                        let k = FilterFactory.instance.property(a);
                        let l = FilterFactory.instance.literal(this.j);
                        k = ColumnComparisonFilterCondition.f(b, k);
                        if (null == k) {
                            return null;
                        }
                        if (!this.g) {
                            k = k.toLower();
                            l = l.toLower();
                        }
                        return k.endsWith(l);
                    }
                case 5:
                    {
                        let m = FilterFactory.instance.property(a);
                        let n = FilterFactory.instance.literal(this.i(this.j, b));
                        if (b == 0 && !this.g) {
                            m = m.toLower();
                            n = n.toLower();
                        }
                        return m.isEqualTo(n);
                    }
                case 6:
                    {
                        let o = FilterFactory.instance.property(a);
                        let p = FilterFactory.instance.literal(this.i(this.j, b));
                        if (b == 0 && !this.g) {
                            o = o.toLower();
                            p = p.toLower();
                        }
                        return o.isGreaterThan(p);
                    }
                case 7:
                    {
                        let q = FilterFactory.instance.property(a);
                        let r = FilterFactory.instance.literal(this.i(this.j, b));
                        if (b == 0 && !this.g) {
                            q = q.toLower();
                            r = r.toLower();
                        }
                        return q.isGreaterThanOrEqualTo(r);
                    }
                case 8:
                    {
                        let s = FilterFactory.instance.property(a);
                        let t = FilterFactory.instance.literal(this.i(this.j, b));
                        if (b == 0 && !this.g) {
                            s = s.toLower();
                            t = t.toLower();
                        }
                        return s.isLessThan(t);
                    }
                case 9:
                    {
                        let u = FilterFactory.instance.property(a);
                        let v = FilterFactory.instance.literal(this.i(this.j, b));
                        if (b == 0 && !this.g) {
                            u = u.toLower();
                            v = v.toLower();
                        }
                        return u.isLessThanOrEqualTo(v);
                    }
                case 10:
                    {
                        let w = FilterFactory.instance.property(a);
                        let x = FilterFactory.instance.literal(this.i(this.j, b));
                        if (b == 0 && !this.g) {
                            w = w.toLower();
                            x = x.toLower();
                        }
                        return w.isNotEqualTo(x);
                    }
                case 11:
                    {
                        if (this.j == null) {
                            return null;
                        }
                        let y = FilterFactory.instance.property(a);
                        let z = FilterFactory.instance.literal(this.j);
                        y = ColumnComparisonFilterCondition.f(b, y);
                        if (null == y) {
                            return null;
                        }
                        if (!this.g) {
                            y = y.toLower();
                            z = z.toLower();
                        }
                        return y.startsWith(z);
                    }
                case 12:
                    {
                        let aa = FilterFactory.instance.property(a);
                        let ab = FilterFactory.instance.literal(null);
                        return aa.isNotEqualTo(ab);
                    }
                case 13:
                    {
                        let ac = FilterFactory.instance.property(a);
                        let ad = FilterFactory.instance.literal(null);
                        return ac.isEqualTo(ad);
                    }
            }
            return null;
        }
        static f(a, b) {
            switch (a) {
                case 9:
                case 8:
                case 2:
                case 11: return null;
                case 10:
                case 6:
                case 5:
                case 1:
                case 3:
                case 4:
                case 7: return b.cast(enumGetBox(DataSourceSchemaPropertyType_$type, 0));
                case 0: break;
                default: break;
            }
            return b;
        }
        static h(a) {
            if (a == 12 || a == 13) {
                return 0;
            }
            else {
                return 1;
            }
        }
        static d(a) {
            let b = new Array(a.length);
            for (let c = 0; c < a.length; c++) {
                b[c] = ColumnComparisonFilterCondition.h(a[c]);
            }
            return b;
        }
        i(value_, a) {
            if (value_ == null) {
                return null;
            }
            switch (a) {
                case 2: return (!!value_);
                case 10: return (+value_);
                case 8:
                    if (typeCast(Date_$type, value_) !== null) {
                        return value_;
                    }
                    if (typeof value_ === 'string') {
                        let b;
                        if (((() => { let c = dateTryParse(value_, b); b = c.p1; return c.ret; })())) {
                            return b;
                        }
                        else {
                            return null;
                        }
                    }
                    return (new Date(+value_));
                case 6: return (+value_);
                case 5: return (+value_);
                case 1: return (+value_);
                case 3: return (+value_);
                case 11: return value_;
                case 4: return (+value_);
                case 7: return (+value_);
                case 0: return value_ != null ? value_.toString() : value_;
            }
            return value_;
        }
    }
    ColumnComparisonFilterCondition.$t = /*@__PURE__*/ markType(ColumnComparisonFilterCondition, 'ColumnComparisonFilterCondition', ColumnFilterCondition.$);
    return ColumnComparisonFilterCondition;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let FilterDialogRenderCompletedEventArgs = /*@__PURE__*/ (() => {
    class FilterDialogRenderCompletedEventArgs extends EventArgs {
    }
    FilterDialogRenderCompletedEventArgs.$t = /*@__PURE__*/ markType(FilterDialogRenderCompletedEventArgs, 'FilterDialogRenderCompletedEventArgs', EventArgs.$);
    return FilterDialogRenderCompletedEventArgs;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridFilterDialogViewModelGroupingLevelCollection = /*@__PURE__*/ (() => {
    class GridFilterDialogViewModelGroupingLevelCollection extends ObservableCollection$1 {
        constructor() {
            super(GridFilterDialogViewModelGroupingLevel.$, 0);
        }
    }
    GridFilterDialogViewModelGroupingLevelCollection.$t = /*@__PURE__*/ markType(GridFilterDialogViewModelGroupingLevelCollection, 'GridFilterDialogViewModelGroupingLevelCollection', /*@__PURE__*/ ObservableCollection$1.$.specialize(GridFilterDialogViewModelGroupingLevel.$));
    return GridFilterDialogViewModelGroupingLevelCollection;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridFilterDialogView = /*@__PURE__*/ (() => {
    class GridFilterDialogView extends Base {
        constructor(a) {
            super();
            this.b = null;
            this.q = null;
            this.ad = new Path();
            this.j = 0;
            this.i = 0;
            this.o = null;
            this.d = null;
            this.m = null;
            this.n = null;
            this.p = null;
            this.g = 0;
            this.f = 0;
            this.h = 1;
            this.l = 0;
            this.k = 0;
            this.e = false;
            this.c = null;
            this.b = a;
        }
        aa() {
            if (this.j != this.l || this.i != this.k) {
                this.v();
                this.j = this.l;
                this.j = this.k;
                this.o.setStyleProperty("width", this.l.toString() + "px");
                this.o.setStyleProperty("height", this.k.toString() + "px");
            }
            let a = Math.round(this.b.af * this.h);
            let b = Math.round(this.b.af * this.h);
            if (this.g != a || this.f != b) {
                this.o.setAttribute("width", a.toString());
                this.o.setAttribute("height", b.toString());
                this.g = truncate(Math.round(a));
                this.f = truncate(Math.round(b));
            }
            this.z();
            this.ad._fill = this.b.bp != null ? this.b.bp : GridStyleRepository.az;
            if (this.d.d && this.h != 1) {
                this.d.z();
                this.d.aa(this.h, this.h);
            }
            this.d.k(0, 0, this.l, this.k);
            this.d.s(this.ad);
            if (this.d.d && this.h != 1) {
                this.d.y();
            }
            this.b.bb();
        }
        v() {
            this.b.a6(this.l, this.k, this.ad);
        }
        u() {
            if (KeyFrameAnimationFactory.h == null) {
                KeyFrameAnimationFactory.h = this.m;
            }
        }
        a(a) {
            return new AnimationKeyFrameEffect(0, this.m.rootWrapper, 0, null, a);
        }
        x(a, b, c) {
            if (a == null) {
                if (this.o != null) {
                    this.o.destroy();
                }
                this.o = null;
                this.m = null;
                this.n = null;
                this.d = null;
                return;
            }
            this.h = (isNaN_(this.b.ae) ? this.b.ad : this.b.ae);
            let d = a;
            this.m = d;
            this.n = c;
            this.p = b;
            this.m.rootWrapper.addClass("ig-filter-icon");
            this.m.rootWrapper.setStyleProperty("cursor", "pointer");
            this.q = this.m.rootWrapper;
            let e = this.h;
            let f = Math.round(d.rootWrapper.width());
            let g = Math.round(d.rootWrapper.height());
            let h = this.b.af * e;
            let i = this.b.af * e;
            let j = this.m.createElement("canvas");
            j.setStyleProperty("position", "absolute");
            j.setStyleProperty("left", "0");
            j.setStyleProperty("top", "0");
            this.m.append(j);
            this.g = truncate(Math.round(h));
            this.f = truncate(Math.round(i));
            j.setAttribute("width", this.g.toString());
            j.setAttribute("height", this.g.toString());
            j.setStyleProperty("width", f.toString() + "px");
            j.setStyleProperty("height", g.toString() + "px");
            this.z();
            j.listen("mousedown", runOn(this, this.r));
            j.listen("mouseup", runOn(this, this.s));
            this.l = f;
            this.k = g;
            this.o = j;
            let k = this.m.get2DCanvasContext(this.o);
            this.d = new RenderingContext(new CanvasViewRenderer(), k);
            if (isNaN_(this.b.ae)) {
                this.b.ad = window.devicePixelRatio;
                this.h = this.b.ad;
            }
            this.aa();
        }
        z() {
            if (this.b.k == this.b.l) {
                this.m.rootWrapper.setStyleProperty("position", "relative");
                this.m.rootWrapper.setStyleProperty("left", "0px");
                this.m.rootWrapper.setStyleProperty("top", "0px");
                return;
            }
            this.m.rootWrapper.setStyleProperty("position", "absolute");
            if (this.b.l == 2) {
                this.m.rootWrapper.setStyleProperty("left", "unset");
                this.m.rootWrapper.setStyleProperty("right", this.b.aj + "px");
            }
            else {
                this.m.rootWrapper.setStyleProperty("left", this.b.ai + "px");
            }
            let a = intDivide(this.p.height(), 2) - (this.k / 2);
            this.m.rootWrapper.setStyleProperty("top", a + "px");
        }
        r(a) {
        }
        s(a) {
            if (a.button == 2) {
                return;
            }
            if (!this.e) {
                this.b.bd();
            }
            else {
                this.b.a2();
            }
        }
        ab() {
            this.aa();
        }
        y(a, b) {
            if (isNaN_(this.b.ae)) {
                this.b.ad = window.devicePixelRatio;
                this.h = this.b.ad;
            }
            this.l = a;
            this.k = b;
            this.aa();
        }
        w() {
            if (isNaN_(this.b.ae)) {
                this.b.ad = window.devicePixelRatio;
                if (this.h != this.b.ad) {
                    this.h = this.b.ad;
                    this.aa();
                    return;
                }
            }
            this.z();
        }
        ac(a) {
            this.e = true;
            let b = new GridFilterDialogPanel(this.b, this.o, this.m, this.n);
            b.a = this.b;
            b.s(a);
            this.c = b;
        }
        t() {
            this.e = false;
            if (this.c != null) {
                this.c.k();
                this.c.l();
                this.c = null;
            }
        }
    }
    GridFilterDialogView.$t = /*@__PURE__*/ markType(GridFilterDialogView, 'GridFilterDialogView');
    return GridFilterDialogView;
})();
/**
 * @hidden
 */
let GridFilterDialogPanel = /*@__PURE__*/ (() => {
    class GridFilterDialogPanel extends Base {
        constructor(a, b, c, d) {
            super();
            this.b = null;
            this.j = null;
            this.d = null;
            this.i = 264;
            this.a = null;
            this.h = null;
            this.f = null;
            this.e = null;
            this.g = null;
            this.b = a;
            let e = c.createElement("div");
            let f = c.getSubRenderer(e);
            e.setStyleProperty("position", "absolute");
            e.setStyleProperty("width", this.i + "px");
            e.setStyleProperty("top", "0px");
            e.setStyleProperty("left", "0px");
            e.setStyleProperty("display", "none");
            e.setStyleProperty("z-index", "10000");
            e.setStyleProperty("background-color", "#fff");
            e.setStyleProperty("border-radius", "3px");
            e.setStyleProperty("overflow", "auto");
            let g = ElevationHelper.e(12, this.b.bo, this.b.bn, this.b.bm);
            e.setStyleProperty("boxShadow", g);
            e.listen("mousedown", runOn(this, this.n));
            this.onDocumentKeyDown = this.onDocumentKeyDown.bind(this);
            this.onDocumentMouseClick = this.onDocumentMouseClick.bind(this);
            this.h = b;
            this.f = f;
            this.g = e;
            this.e = d;
        }
        n(a) {
            a.stopPropagation();
        }
        onDocumentKeyDown(a) {
            if (BaseDOMEventProxy.cu(a) == 8) {
                this.b.a2();
            }
        }
        onDocumentMouseClick(e_) {
            let filterIconCanvas_ = this.b.aq();
            let a = (e_.srcElement === filterIconCanvas_ || e_.target === filterIconCanvas_);
            if (!a) {
                this.b.a2();
            }
        }
        onFilterApplyClick() {
            this.b.a2();
        }
        onFilterCancelClick() {
            this.b.a2();
        }
        s(a) {
            this.m();
            this.g.setStyleProperty("display", "block");
            this.f.appendToBody(this.g);
            if (this.j == null) {
                this.e.getPortal(this.g, "GridColumnOptions", (b) => {
                    this.d = b;
                    let comp_ = b.componentRef;
                    let col_ = a;
                    let displayDensity_ = a.grid.fg;
                    let buttonDensity_ = GridFilterDialogPanel.c(displayDensity_, true);
                    let filterListDensity_ = GridFilterDialogPanel.c(displayDensity_, true);
                    this.j = comp_.i;
                    let options_ = this.j;
                    options_.column = col_;
                    options_.density = displayDensity_;
                    options_.buttonDensity = buttonDensity_;
                    options_.filterListDensity = filterListDensity_;
                    options_.filterApplyButtonClick = delegateCombine(options_.filterApplyButtonClick, runOn(this, this.onFilterApplyClick));
                    options_.filterCancelButtonClick = delegateCombine(options_.filterCancelButtonClick, runOn(this, this.onFilterCancelClick));
                }, false);
            }
            document.addEventListener("keydown", this.onDocumentKeyDown, false);
            document.addEventListener("mousedown", this.onDocumentMouseClick, false);
        }
        m() {
            let a = this.h.width();
            let filterIcon_ = this.h.getNativeElement();
            let boundingRect_ = filterIcon_.getBoundingClientRect();
            let b = (boundingRect_.left);
            let c = (boundingRect_.right);
            let gridDiv_ = this.e.rootWrapper.getNativeElement();
            let gridBoundingRect_ = gridDiv_.getBoundingClientRect();
            let d = (gridBoundingRect_.right);
            let e = (window.innerWidth);
            let f = true;
            if (b > e - this.i - 10) {
                f = false;
            }
            if (f) {
                this.g.setStyleProperty("left", this.h.getOffset().left + "px");
            }
            else {
                let g = Math.max(10, this.h.getOffset().left - (this.i - a));
                this.g.setStyleProperty("left", g + "px");
            }
            this.g.setStyleProperty("top", (this.h.getOffset().top + this.h.outerHeight()) + "px");
        }
        k() {
            document.removeEventListener("keydown", this.onDocumentKeyDown, false);
            document.removeEventListener("mousedown", this.onDocumentMouseClick, false);
            let options_ = this.j;
            options_.filterApplyButtonClick = delegateRemove(options_.filterApplyButtonClick, runOn(this, this.onFilterApplyClick));
            options_.filterCancelButtonClick = delegateRemove(options_.filterCancelButtonClick, runOn(this, this.onFilterCancelClick));
            ;
            options_.column = null;
            this.g.setStyleProperty("display", "none");
            this.g.remove();
        }
        l() {
            this.f.destroy();
            this.g.unlistenAll();
            this.j = null;
            this.g = null;
            if (this.d != null) {
                this.d.destroy();
            }
        }
        static c(a, b) {
            switch (a) {
                case 1: return b ? 2 : 1;
                case 2: return b ? 3 : 1;
                case 3: return b ? 3 : 2;
                case 0: return a;
                default: return a;
            }
        }
    }
    GridFilterDialogPanel.$t = /*@__PURE__*/ markType(GridFilterDialogPanel, 'GridFilterDialogPanel');
    return GridFilterDialogPanel;
})();
/**
 * @hidden
 */
let GridFilterDialog = /*@__PURE__*/ (() => {
    class GridFilterDialog extends Base {
        constructor() {
            super();
            this.am = null;
            this.w = true;
            this.propertyChanged = null;
            this.ab = NaN;
            this.aa = 1;
            this.j = 2;
            this.i = 0;
            this.ag = 0;
            this.ah = 0;
            this.bl = null;
            this.ac = DeviceUtils.g(24);
            this.bo = null;
            this.bn = null;
            this.bm = null;
            this.m = null;
            this.u = null;
            this.v = false;
            this.f = null;
            this.dialogOpening = null;
            this.filterChanging = null;
            this.filterChanged = null;
            this.r = null;
            this.renderCompleted = null;
            this.r = new GridFilterDialogView(this);
            this.bo = BrushUtil.g(66, 0, 0, 0);
            this.bn = BrushUtil.g(30, 0, 0, 0);
            this.bm = BrushUtil.g(20, 0, 0, 0);
        }
        get an() {
            return this.am;
        }
        set an(a) {
            this.am = a;
        }
        get x() {
            return this.w;
        }
        set x(a) {
            let b = this.w;
            this.w = a;
            if (b != this.w) {
                this.ba("IsAnimationEnabled", b, this.w);
            }
        }
        get ae() {
            return this.ab;
        }
        set ae(a) {
            let b = this.ab;
            this.ab = a;
            this.ba("PixelScalingRatio", b, this.ab);
        }
        get ad() {
            return this.aa;
        }
        set ad(a) {
            let b = this.aa;
            this.aa = a;
            this.ba("ActualPixelScalingRatio", b, this.aa);
        }
        get l() {
            return this.j;
        }
        set l(a) {
            let b = this.j;
            this.j = a;
            if (b != this.j) {
                this.ba("IconHorizontalAlignment", enumGetBox(CellContentHorizontalAlignment_$type, b), enumGetBox(CellContentHorizontalAlignment_$type, this.j));
            }
        }
        get k() {
            return this.i;
        }
        set k(a) {
            let b = this.i;
            this.i = a;
            if (b != this.i) {
                this.ba("HeaderTextALignment", enumGetBox(CellContentHorizontalAlignment_$type, b), enumGetBox(CellContentHorizontalAlignment_$type, this.i));
            }
        }
        get ai() {
            return this.ag;
        }
        set ai(a) {
            let b = this.ag;
            this.ag = a;
            if (b != this.ag) {
                this.ba("CellPaddingLeft", b, this.ag);
            }
        }
        get aj() {
            return this.ah;
        }
        set aj(a) {
            let b = this.ah;
            this.ah = a;
            if (b != this.ah) {
                this.ba("CellPaddingRight", b, this.ah);
            }
        }
        get bp() {
            return this.bl;
        }
        set bp(a) {
            let b = this.bl;
            this.bl = a;
            if (b != this.bl) {
                this.ba("IconColor", b, this.bl);
            }
        }
        get af() {
            return this.ac;
        }
        set af(a) {
            let b = this.ac;
            this.ac = a;
            if (b != this.ac) {
                this.ba("ViewSize", b, this.ac);
            }
        }
        get y() {
            return this.r.e;
        }
        ba(a, b, c) {
            this.be(a, b, c);
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
        }
        be(a, b, c) {
            switch (a) {
                case "PixelScalingRatio":
                    this.ad = this.ae;
                    break;
                case "ActualPixelScalingRatio":
                    this.r.ab();
                    break;
                case "IconHorizontalAlignment":
                case "IconColor":
                case "HeaderTextALignment":
                case "CellPaddingLeft":
                case "CellPaddingRight":
                case "ViewSize":
                    this.r.ab();
                    break;
            }
        }
        bf(a, b, c) {
            this.r.x(a, b, c);
        }
        bd() {
            let a = null;
            let b = 0;
            if (this.dialogOpening != null) {
                let c = new GridFilterDialogOpeningEventArgs();
                this.dialogOpening(this, c);
                this.m = c.a;
            }
            this.bj(this.m);
            if (this.m != null) {
                let d = this.m;
                d.propertyChanged = delegateCombine(d.propertyChanged, runOn(this, this.a3));
            }
        }
        a3(a, b) {
            switch (b.propertyName) {
                case "IsHidden":
                    this.a2();
                    break;
            }
        }
        bj(a) {
            this.r.ac(a);
        }
        a9() {
        }
        a4() {
            this.r.u();
            if (this.u == null) {
                let a = new AnimationKeyFrameEffectTiming();
                a.g = 200;
                a.b = 0;
                this.u = KeyFrameAnimationFactory.f.c(this.r.a(a).m(new AnimationKeyFrameProperty(1, 0)).m(new AnimationKeyFrameProperty(1, 1)));
            }
        }
        bi() {
            if (this.filterChanged != null) {
                this.filterChanged(this, ((() => {
                    let $ret = new GridFilterDialogFilterChangeEventArgs();
                    $ret.a = this.f;
                    return $ret;
                })()));
            }
        }
        bh() {
            if (this.filterChanged != null) {
                this.filterChanged(this, ((() => {
                    let $ret = new GridFilterDialogFilterChangeEventArgs();
                    $ret.a = null;
                    return $ret;
                })()));
            }
        }
        bg(a, b) {
            let c = this.e(a);
            if (b) {
                if (this.filterChanged != null) {
                    this.filterChanged(this, ((() => {
                        let $ret = new GridFilterDialogFilterChangeEventArgs();
                        $ret.a = c;
                        return $ret;
                    })()));
                }
            }
            else {
                if (this.filterChanging != null) {
                    this.filterChanging(this, ((() => {
                        let $ret = new GridFilterDialogFilterChangeEventArgs();
                        $ret.a = c;
                        return $ret;
                    })()));
                }
            }
        }
        e(a) {
            let b = new ColumnFilterConditionGroup();
            b.f = a.k;
            let c = new Stack$1(ColumnFilterConditionGroup.$);
            let d = 0;
            let e = b;
            for (let f = 0; f < a.f.count; f++) {
                let g = this.h(d, c, a, f);
                while (g != null) {
                    e.h(g);
                    e = g;
                    d++;
                    g = this.h(d, c, a, f);
                }
                g = this.g(d, c, a, f);
                while (g != null) {
                    e = g;
                    d--;
                    g = this.g(d, c, a, f);
                }
                if (e == null) {
                    e = b;
                }
                if (this.z(a, a.f._inner[f])) {
                    continue;
                }
                e.h(this.d(a.f._inner[f]));
            }
            if (b.g == 0) {
                return null;
            }
            return b;
        }
        z(a, b) {
            let c = 0;
            for (let d = 0; d < b.e.length; d++) {
                if (b.e[d] == b.l) {
                    c = d;
                    break;
                }
            }
            if (b.d[c] > 0 && b.i == null) {
                return true;
            }
            if (a.a != 0 && b.d[c] > 0 && typeof b.i === 'string' && stringIsNullOrEmpty(b.i)) {
                return true;
            }
            return false;
        }
        g(a, b, c, d) {
            let e = this.al(c, d);
            if (a > e) {
                b.e();
                return b.d();
            }
            return null;
        }
        al(a, b) {
            let c = a.c(b);
            if (c == null) {
                return 0;
            }
            return a.e.indexOf(c);
        }
        h(a, b, c, d) {
            let e = this.al(c, d);
            if (a < e) {
                let f = c.b(d);
                let g = new ColumnFilterConditionGroup();
                g.f = f.a;
                b.h(g);
                return g;
            }
            return null;
        }
        d(a) {
            let b = new ColumnComparisonFilterCondition();
            b.e = this.c(a.l);
            b.j = a.i;
            return b;
        }
        c(a) {
            return EnumUtil.getEnumValue(ColumnComparisonConditionOperatorType_$type, EnumUtil.parse(ColumnComparisonConditionOperatorType_$type, a, true));
        }
        bc(a) {
            this.bg(a, false);
        }
        s(a, b) {
            let c = new GridFilterDialogViewModel();
            if (a != null) {
                this.a1(c, a, b);
            }
            else {
                let d = new GridFilterDialogViewModelRow();
                d.f = b;
                d.e = GridFilterDialog.a(b);
                d.d = GridFilterDialog.b(b);
                d.l = GridFilterDialog.au(b[0]);
                c.f.add(d);
            }
            return c;
        }
        a1(a, b, c) {
            if (b.b()) {
                let d = b;
                for (let e = 0; e < d.g; e++) {
                    let f = d.item(e);
                    this.a1(a, f, c);
                }
            }
            else {
                a.f.add(this.t(b, c));
            }
        }
        t(a, b) {
            let c = new GridFilterDialogViewModelRow();
            c.l = GridFilterDialog.au(a.e);
            c.f = b;
            c.e = GridFilterDialog.a(b);
            c.i = GridFilterDialog.ao(GridFilterDialog.ak(a.e), a.e, a);
            c.j = GridFilterDialog.ap(GridFilterDialog.ak(a.e), a.e, a);
            c.d = GridFilterDialog.b(b);
            return c;
        }
        static ak(a) {
            return ColumnComparisonFilterCondition.h(a);
        }
        static ao(a, b, c) {
            if (a == 0) {
                return "";
            }
            return c.j != null ? c.j.toString() : "";
        }
        static ap(a, b, c) {
            return "";
        }
        static b(a) {
            return ColumnComparisonFilterCondition.d(a);
        }
        static a(a) {
            let b = new Array(a.length);
            for (let c = 0; c < a.length; c++) {
                b[c] = EnumUtil.getName(ColumnComparisonConditionOperatorType_$type, a[c]);
            }
            return b;
        }
        static au(a) {
            return EnumUtil.getName(ColumnComparisonConditionOperatorType_$type, a);
        }
        a8(a, b) {
            this.r.y(a, b);
        }
        a7() {
            this.r.w();
        }
        a6(a, b, c) {
            let d = Geometry.a("M12 14c -1.1 0 -2 -0.9 -2 -2 s0.9 -2 2 -2 s2 0.9 2 2 S13.1 14 12 14 z M12 8c -1.1 0 -2 -0.9 -2 -2 s0.9 -2 2 -2 s2 0.9 2 2 S13.1 8 12 8z M12 16 c1.1 0 2 0.9 2 2s -0.9 2 -2 2 s-2 -0.9 -2 -2 S10.9 16 12 16z");
            c.ak = d;
            c._fill = this.bp == null ? GridStyleRepository.az : this.bp;
        }
        bk() {
            this.v = false;
            if (NativeUI.e(this.r.q) == 1) {
                return;
            }
            if (this.x) {
                this.a4();
                if (this.u.playbackRate < 0) {
                    this.u.reverse();
                }
                else {
                    this.u.play();
                }
                this.u.finished.f((a) => this.u.commitStyles());
            }
            else {
                NativeUI.t(this.r.q, 1);
            }
        }
        a5() {
            this.v = true;
            if (!this.y) {
                if (this.x) {
                    this.a4();
                    if (this.u.playbackRate < 0) {
                        this.u.play();
                    }
                    else {
                        this.u.reverse();
                    }
                    this.u.finished.f((a) => this.u.commitStyles());
                }
                else {
                    NativeUI.t(this.r.q, 0);
                }
                this.v = false;
            }
        }
        a2() {
            this.r.t();
            this.a9();
            if (this.v) {
                this.a5();
            }
            if (this.m != null) {
                let a = this.m;
                a.propertyChanged = delegateRemove(a.propertyChanged, runOn(this, this.a3));
                this.m = null;
            }
        }
        aq() {
            return this.r.o.getNativeElement();
        }
        bb() {
            if (this.renderCompleted != null) {
                this.renderCompleted(this, new FilterDialogRenderCompletedEventArgs());
            }
        }
    }
    GridFilterDialog.$t = /*@__PURE__*/ markType(GridFilterDialog, 'GridFilterDialog', Base.$, [INotifyPropertyChanged_$type]);
    return GridFilterDialog;
})();
/**
 * @hidden
 */
let GridFilterDialogViewModel = /*@__PURE__*/ (() => {
    class GridFilterDialogViewModel extends Base {
        constructor() {
            super();
            this.a = 0;
            this.e = null;
            this.k = false;
            this.m = 0;
            this.f = null;
            this.onModified = null;
            this.k = false;
            this.f = new GridFilterDialogViewModelRowCollection();
            this.f.ae = this;
            this.e = new GridFilterDialogViewModelGroupingLevelCollection();
            this.f.ag = runOn(this, this.u);
            let a = this.f;
            a.collectionChanged = delegateCombine(a.collectionChanged, runOn(this, this.t));
        }
        n() {
            let a = new GridFilterDialogViewModelRow();
            let b = ColumnComparisonFilterCondition.c(this.a);
            a.f = b;
            a.e = GridFilterDialog.a(b);
            a.d = GridFilterDialog.b(b);
            a.l = GridFilterDialog.au(b[0]);
            this.f.add(a);
        }
        u(a) {
            if (this.onModified != null) {
                this.onModified(this);
            }
        }
        t(a, b) {
            switch (b.action) {
                case 0:
                    if (b.newItems != null) {
                        for (let c = 0; c < b.newItems.count; c++) {
                            let d = b.newItems.item(c);
                            this.q(c + b.newStartingIndex, d);
                        }
                    }
                    break;
                case 1:
                    if (b.oldItems != null) {
                        for (let e = 0; e < b.oldItems.count; e++) {
                            this.r(b.oldStartingIndex);
                        }
                    }
                    break;
                case 2:
                    if (b.oldItems != null) {
                        for (let f = 0; f < b.oldItems.count; f++) {
                            this.r(b.oldStartingIndex);
                        }
                    }
                    if (b.newItems != null) {
                        for (let g = 0; g < b.newItems.count; g++) {
                            let h = b.newItems.item(g);
                            this.q(g + b.newStartingIndex, b.newItems.item(g));
                        }
                    }
                    break;
                case 4:
                    this.s();
                    break;
            }
            if (this.onModified != null) {
                this.onModified(this);
            }
        }
        r(a) {
            let b = this.c(a);
            if (b == null) {
                return;
            }
            let c = this.b(a);
            if (c == null) {
                return;
            }
            this.w(c, a);
            for (let d = b.indexOf(c) + 1; d < b.count; d++) {
                this.v(b._inner[d], -1);
            }
        }
        w(a, b) {
            a.b--;
        }
        s() {
            this.e.clear();
        }
        q(a, b) {
            let c = this.c(a);
            if (c == null) {
                return;
            }
            let d = this.b(a);
            if (d == null) {
                return;
            }
            this.p(d, a);
            for (let e = c.indexOf(d) + 1; e < c.count; e++) {
                this.v(c._inner[e], +1);
            }
        }
        v(a, b) {
            a.c += b;
            a.b -= b;
        }
        p(a, b) {
            a.b++;
        }
        b(a) {
            for (let b = this.e.count - 1; b >= 0; b--) {
                for (let c = 0; c < this.e._inner[b].count; c--) {
                    if (this.e._inner[b]._inner[c].c <= a && this.e._inner[b]._inner[c].b >= a) {
                        return this.e._inner[b]._inner[c];
                    }
                }
            }
            return null;
        }
        c(a) {
            for (let b = this.e.count - 1; b >= 0; b--) {
                for (let c = 0; c < this.e._inner[b].count; c--) {
                    if (this.e._inner[b]._inner[c].c <= a && this.e._inner[b]._inner[c].b >= a) {
                        return this.e._inner[b];
                    }
                }
            }
            return null;
        }
        h(a, b) {
            let c = this.d(a, b);
            if (this.i(c, a, b)) {
                if (this.e.count < this.m) {
                    return true;
                }
                else {
                    return false;
                }
            }
            return true;
        }
        i(a, b, c) {
            if (a == null) {
                return false;
            }
            for (let d = 0; d < a.count; d++) {
                if (this.j(a._inner[d], b, c)) {
                    return true;
                }
            }
            return false;
        }
        j(a, b, c) {
            if (c > a.c || b > a.b) {
                return false;
            }
            return true;
        }
        d(a, b) {
            if (this.e.count == 0) {
                return null;
            }
            for (let c = 0; c < this.e.count; c++) {
                if (!this.i(this.e._inner[c], a, b)) {
                    return this.e._inner[c];
                }
            }
            return this.e._inner[this.e.count - 1];
        }
        aa(a, b) {
            for (let c = 0; c < this.e.count; c++) {
                for (let d = 0; d < this.e._inner[c].count; d++) {
                    if (this.e._inner[c]._inner[d].c == a && this.e._inner[c]._inner[d].b == b) {
                        this.e._inner[c].removeAt(d);
                        break;
                    }
                }
            }
            this.x();
            if (this.onModified != null) {
                this.onModified(this);
            }
        }
        x() {
            for (let a = this.e.count - 1; a >= 0; a--) {
                let b = new List$1(GridFilterDialogViewModelGrouping.$, 0);
                for (let c = 0; c < this.e._inner[a].count; c++) {
                    let d = this.e._inner[a]._inner[c];
                    if (a > 0) {
                        if (!this.i(this.e._inner[a - 1], d.c, d.b)) {
                            b.add(d);
                        }
                    }
                }
                for (let e = 0; e < b.count; e++) {
                    this.e._inner[a].remove(b._inner[e]);
                    this.e._inner[a - 1].add(b._inner[e]);
                }
                if (this.e._inner[a].count == 0) {
                    this.e.removeAt(a);
                }
            }
            this.y();
        }
        y() {
            for (let a = this.e.count - 1; a >= 0; a--) {
                let b = new List$1(GridFilterDialogViewModelGrouping.$, 0);
                for (let c = 0; c < this.e._inner[a].count; c++) {
                    b.add(this.e._inner[a]._inner[c]);
                }
                b.aa((d, e) => Base.compareSimple(d.c, e.c));
                this.e._inner[a].clear();
                for (let d = 0; d < this.e._inner[a].count; d++) {
                    this.e._inner[a].add(b._inner[d]);
                }
            }
        }
        l(a, b) {
            for (let c = 0; c < this.e.count; c++) {
                for (let d = 0; d < this.e._inner[c].count; d++) {
                    if (this.e._inner[c]._inner[d].c == a && this.e._inner[c]._inner[d].b == b) {
                        return true;
                    }
                }
            }
            return false;
        }
        z(a, b) {
            for (let c = 0; c < this.e.count; c++) {
                for (let d = 0; d < this.e._inner[c].count; d++) {
                    if (this.e._inner[c]._inner[d].c == a && this.e._inner[c]._inner[d].b == b) {
                        this.e._inner[c]._inner[d].a = !this.e._inner[c]._inner[d].a;
                    }
                }
            }
            if (this.onModified != null) {
                this.onModified(this);
            }
        }
        o(a, b, c) {
            if (!this.h(a, b)) {
                return;
            }
            let d = this.d(a, b);
            let e = d;
            if (this.i(d, a, b)) {
                this.e.add(new GridFilterDialogViewModelGroupingLevel());
                e = this.d(a, b);
            }
            e.add(((() => {
                let $ret = new GridFilterDialogViewModelGrouping();
                $ret.c = a;
                $ret.b = b;
                $ret.a = c;
                return $ret;
            })()));
            this.y();
            if (this.onModified != null) {
                this.onModified(this);
            }
        }
    }
    GridFilterDialogViewModel.$t = /*@__PURE__*/ markType(GridFilterDialogViewModel, 'GridFilterDialogViewModel');
    return GridFilterDialogViewModel;
})();
/**
 * @hidden
 */
let GridFilterDialogViewModelRowCollection = /*@__PURE__*/ (() => {
    class GridFilterDialogViewModelRowCollection extends ObservableCollection$1 {
        constructor() {
            super(GridFilterDialogViewModelRow.$, 0);
            this.ae = null;
            this.af = null;
            this.collectionChanged = delegateCombine(this.collectionChanged, runOn(this, this.ah));
        }
        ah(a, b) {
            if (b.oldItems != null) {
                for (let c = 0; c < b.oldItems.count; c++) {
                    let d = b.oldItems.item(c);
                    d.propertyChanged = delegateRemove(d.propertyChanged, runOn(this, this.ai));
                }
            }
            if (b.newItems != null) {
                for (let e = 0; e < b.newItems.count; e++) {
                    let f = b.newItems.item(e);
                    f.propertyChanged = delegateCombine(f.propertyChanged, runOn(this, this.ai));
                }
            }
        }
        ai(a, b) {
            if (this.af != null) {
                this.af(this.ae);
            }
        }
        get ag() {
            return this.af;
        }
        set ag(a) {
            this.af = a;
        }
    }
    GridFilterDialogViewModelRowCollection.$t = /*@__PURE__*/ markType(GridFilterDialogViewModelRowCollection, 'GridFilterDialogViewModelRowCollection', /*@__PURE__*/ ObservableCollection$1.$.specialize(GridFilterDialogViewModelRow.$));
    return GridFilterDialogViewModelRowCollection;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let TextHeaderCell = /*@__PURE__*/ (() => {
    class TextHeaderCell extends GridCellBase {
        constructor(a) {
            super(a);
            this.ci = null;
            this.ce = null;
            this.cc = null;
            this.b8 = 0;
            this.b7 = 0;
            this.ca = 3;
            this.ck = null;
            this.cn = -1;
            this.cm = -1;
            this.cg = false;
            this.cj = null;
            this.ch = false;
            this.ci = a.createElement("span");
            this.z.setRawStyleProperty("text-align", "left");
            this.z.setRawStyleProperty("vertical-align", "middle");
            this.ci.setRawStyleProperty("display", "inline-block");
            this.ci.setRawStyleProperty("line-height", "normal");
            this.ci.setRawStyleProperty("vertical-align", "middle");
            this.ci.setRawStyleProperty("overflow", "hidden");
            this.ci.setRawStyleProperty("white-space", "nowrap");
            this.ci.setRawStyleProperty("text-overflow", "ellipsis");
            this.z.append(this.ci);
            let b = 18;
            let c = 18;
            let d = a.createElement("div");
            d.setAttribute("aria-hidden", "true");
            d.setRawStyleProperty("display", "none");
            d.setRawStyleProperty("vertical-align", "middle");
            d.setRawStyleProperty("width", b + "px");
            d.setRawStyleProperty("height", c + "px");
            this.cj = d;
            let e = a.getSubRenderer(d);
            this.cc = new GridFilterDialog();
            this.cc.bf(e, this.z, a);
            this.z.append(d);
            this.cc.a8(b, c);
            this.cc.af = 24;
            let f = this.cc.x;
            this.cc.x = false;
            this.cc.a5();
            this.cc.x = f;
            let g = 18;
            let h = 18;
            d = a.createElement("div");
            d.setAttribute("aria-hidden", "true");
            d.setRawStyleProperty("display", "inline-block");
            d.setRawStyleProperty("vertical-align", "middle");
            d.setRawStyleProperty("width", "0px");
            d.setRawStyleProperty("height", h + "px");
            d.setRawStyleProperty("margin", "0 0 0 5px");
            this.ck = d;
            e = a.getSubRenderer(d);
            this.ce = new GridSortIndicator();
            this.ce.l = false;
            this.ce.ax(e);
            this.z.append(d);
            this.ce.ar(g, h);
            let i = this.ce;
            i.propertyChanged = delegateCombine(i.propertyChanged, runOn(this, this.cq));
            let j = this.cc;
            j.dialogOpening = delegateCombine(j.dialogOpening, runOn(this, this.cr));
            let k = this.cc;
            k.filterChanging = delegateCombine(k.filterChanging, runOn(this, this.ct));
            let l = this.cc;
            l.filterChanged = delegateCombine(l.filterChanged, runOn(this, this.cs));
            this.z.listen("mouseenter", runOn(this, this.cx));
            this.z.listen("mouseleave", runOn(this, this.cw));
        }
        get cl() {
            return this.ci;
        }
        get cf() {
            return this.ce;
        }
        get cd() {
            return this.cc;
        }
        get cb() {
            return this.ca;
        }
        set cb(a) {
            let b = this.ca;
            this.ca = a;
            this.bg("ColumnOptionsIconBehavior", enumGetBox(ColumnOptionsIconBehavior_$type, b), enumGetBox(ColumnOptionsIconBehavior_$type, this.ca));
        }
        get b9() {
            return this.b8;
        }
        set b9(a) {
            let b = this.b8;
            this.b8 = a;
            this.bg("ColumnOptionsIconAlignment", enumGetBox(ColumnOptionsIconAlignment_$type, b), enumGetBox(ColumnOptionsIconAlignment_$type, this.b8));
        }
        s(a) {
            return true;
        }
        bw(a, b) {
            super.bw(a, b);
            a -= 21;
            if (this.ch) {
                a -= 15;
            }
            let c = Math.max(0, a - b);
            if (c != this.cn) {
                this.cn = c;
                this.ci.setRawStyleProperty("max-width", c.toString() + "px");
            }
        }
        bq(a, b) {
            super.bq(a, b);
            let c = Math.max(0, a - b);
            if (this.cm != c) {
                this.cm = c;
                this.ci.setRawStyleProperty("max-height", c.toString() + "px");
            }
        }
        bx(a, b, c, d) {
            this.cc.a7();
        }
        cq(a, b) {
            switch (b.propertyName) {
                case "CurrentOpacity":
                    if (this.cf.r > 0) {
                        this.ck.setRawStyleProperty("width", "18px");
                        if (this.b7 == 2) {
                            this.ck.setRawStyleProperty("margin", "0 5px 0 0");
                        }
                        else {
                            this.ck.setRawStyleProperty("margin", "0 0 0 5px");
                        }
                    }
                    else {
                        this.ck.setRawStyleProperty("width", "0px");
                        this.ck.setRawStyleProperty("margin", "0");
                    }
                    break;
            }
        }
        cx(a) {
            if (this.b.isGridDragging) {
                return;
            }
            switch (this.cb) {
                case 2:
                case 3:
                    this.cc.bk();
                    break;
            }
        }
        cw(a) {
            switch (this.cb) {
                case 2:
                case 3:
                    this.cc.a5();
                    break;
            }
        }
        cs(a, b) {
            this.b.columnFilterChanged(b.a);
        }
        ct(a, b) {
            this.b.columnFilterChanging(b.a);
        }
        cr(a, b) {
            if (this.b != null) {
                b.a = this.d.getColumn();
                this.b.cancelEditMode(false);
            }
        }
        be(a, b, c) {
            super.be(a, b, c);
            this.b7 = c;
            this.cc.k = c;
            if (c == 2) {
                this.z.removeChild(this.ck);
                this.z.removeChild(this.cj);
                this.ci.before(this.cj);
                this.cj.before(this.ck);
                if (this.b9 == 1) {
                    this.cj.setRawStyleProperty("margin", "0 5px 0 0");
                    this.cc.l = this.b7;
                }
                else {
                    this.cj.setRawStyleProperty("margin", "0");
                    this.cc.l = 0;
                }
            }
            else {
                this.z.removeChild(this.ck);
                this.z.removeChild(this.ci);
                this.cj.before(this.ci);
                this.cj.before(this.ck);
                if (this.b9 == 1) {
                    this.cj.setRawStyleProperty("margin", "0 0 0 5px");
                    this.cc.l = this.b7;
                }
                else {
                    this.cj.setRawStyleProperty("margin", "0");
                    this.cc.l = 2;
                }
            }
        }
        bu(a, b, c, d) {
            super.bu(a, b, c, d);
            this.cc.ai = a;
            this.cc.aj = c;
        }
        cv() {
            if (this.b9 == 2 || this.b9 == 0) {
                if (this.b7 == 2) {
                    this.cc.l = 0;
                }
                else {
                    this.cc.l = 2;
                }
            }
            else {
                this.cc.l = this.b7;
                if (this.b7 == 2) {
                    this.cj.setRawStyleProperty("margin", "0 5px 0 0");
                }
                else {
                    this.cj.setRawStyleProperty("margin", "0 0 0 5px");
                }
            }
        }
        cu() {
            switch (this.cb) {
                case 1:
                    this.cc.x = false;
                    this.cc.bk();
                    break;
                case 2:
                    this.cc.x = false;
                    break;
                case 3:
                    this.cc.x = true;
                    break;
            }
        }
        bg(a, b, c) {
            super.bg(a, b, c);
            switch (a) {
                case "ColumnOptionsIconAlignment":
                    this.cv();
                    break;
                case "ColumnOptionsIconBehavior":
                    this.cu();
                    break;
            }
        }
        onContactStarted(e_, a) {
            if (e_.button == 2) {
                return;
            }
            let filterIconCanvas_ = this.cc.aq();
            let b = (e_.originalEvent.srcElement === filterIconCanvas_ || e_.originalEvent.target === filterIconCanvas_);
            if (b) {
                this.cg = true;
                return;
            }
            if (this.cc.y) {
                this.cc.a2();
            }
            super.onContactStarted(e_, a);
        }
        onContactCompleted(e_, a) {
            if (!this.cg) {
                super.onContactCompleted(e_, a);
            }
            this.cg = false;
        }
        get_q() {
            return true;
        }
    }
    TextHeaderCell.$t = /*@__PURE__*/ markType(TextHeaderCell, 'TextHeaderCell', GridCellBase.$);
    return TextHeaderCell;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let TextHeaderCellPresenter = /*@__PURE__*/ (() => {
    class TextHeaderCellPresenter extends CellPresenterBase {
        constructor(a) {
            super(a);
        }
        get d() {
            return this.a;
        }
        b(a) {
            super.b(a);
            let b = a;
            if (a.as) {
                if (a.ax(TextCellModel.kq)) {
                    b.ip = b.ks;
                    this.d.cl.setRawText(b.ip);
                }
                if (a.ax(CellModel.f6)) {
                    let c = this.d.cf.l;
                    if (a.bb) {
                        this.d.cf.l = false;
                    }
                    this.d.cf.b = a.m;
                    if (a.bb) {
                        this.d.cf.l = c;
                    }
                }
                if (a.ax(CellModel.f7)) {
                    let d = this.d.cf.l;
                    if (a.bb) {
                        this.d.cf.l = false;
                    }
                    this.d.cf.a0 = a.kn;
                    if (a.bb) {
                        this.d.cf.l = d;
                    }
                }
                if (a.aw("IsColumnOptionsEnabled")) {
                    let e = b.k1;
                    if (e) {
                        e = this.e();
                    }
                    this.d.ch = e;
                    this.d.cj.setRawStyleProperty("display", e ? "inline-block" : "none");
                    this.a.bw(a.gf, (a.fo + a.fq + a.eb + a.ee));
                }
                if (a.aw("SortIndicatorStyle")) {
                    this.d.cf.f = b.kz;
                }
                if (a.aw("ColumnOptionsIconAlignment")) {
                    this.d.b9 = b.kv;
                }
                if (a.aw("ColumnOptionsIconBehavior")) {
                    this.d.cb = b.kx;
                }
                if (a.aw("ColumnOptionsIconColor")) {
                    this.d.cd.bp = b.ld;
                }
                ContentCellModelHelper.a(this.a.w, b, this.a.z, this.d.cl, this.a);
            }
        }
        e() {
            return TypeRegistrar.isRegistered("IgxGridColumnOptionsComponent");
        }
    }
    TextHeaderCellPresenter.$t = /*@__PURE__*/ markType(TextHeaderCellPresenter, 'TextHeaderCellPresenter', CellPresenterBase.$);
    return TextHeaderCellPresenter;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let RowSeparatorCell = /*@__PURE__*/ (() => {
    class RowSeparatorCell extends GridCellBase {
        constructor(a) {
            super(a);
        }
    }
    RowSeparatorCell.$t = /*@__PURE__*/ markType(RowSeparatorCell, 'RowSeparatorCell', GridCellBase.$);
    return RowSeparatorCell;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let RowSeparatorCellPresenter = /*@__PURE__*/ (() => {
    class RowSeparatorCellPresenter extends CellPresenterBase {
        constructor(a) {
            super(a);
        }
        get d() {
            return this.a;
        }
    }
    RowSeparatorCellPresenter.$t = /*@__PURE__*/ markType(RowSeparatorCellPresenter, 'RowSeparatorCellPresenter', CellPresenterBase.$);
    return RowSeparatorCellPresenter;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let ImageCell = /*@__PURE__*/ (() => {
    class ImageCell extends GridCellBase {
        constructor(a) {
            super(a);
            this.cd = null;
            this.b7 = 1;
            this.b8 = 3;
            this.cf = null;
            this.b9 = false;
            this.ca = 1;
            this.cc = null;
            this.cd = a.createElement("img");
            this.cd.listen("load", runOn(this, this.ci));
            this.cc = a.createElement("div");
            this.cc.setRawStyleProperty("background-size", "contain");
            this.cc.setRawStyleProperty("background-repeat", "no-repeat");
            this.cc.setRawStyleProperty("background-position", "center");
            this.cc.setRawStyleProperty("width", "100%");
            this.cc.setRawStyleProperty("height", "100%");
            this.z.setRawStyleProperty("text-align", "left");
            this.z.setRawStyleProperty("vertical-align", "middle");
            this.z.append(this.cc);
        }
        get ce() {
            return this.cd;
        }
        get cb() {
            return this.ca;
        }
        set cb(a) {
            this.ca = a;
        }
        ci(a) {
            this.b9 = false;
            if (!stringIsNullOrEmpty(this.cf)) {
                this.cc.setRawStyleProperty("opacity", "1");
                this.cc.setRawStyleProperty("background-image", "url(" + this.cf + ")");
            }
        }
        cj(a, b) {
            if (a == this.cf) {
                return;
            }
            this.cg();
            this.cc.setRawStyleProperty("opacity", "0");
            if (a == null || a.length == 0) {
                this.ch(this.cd);
                return;
            }
            if (Base.equalsStatic(a, this.cf)) {
                return;
            }
            this.cn(a, b);
            let img_ = this.cd.getNativeElement();
            if (img_ != null && (img_.complete)) {
                this.b9 = false;
                this.cd.setRawStyleProperty("opacity", "1");
                this.cc.setRawStyleProperty("background-image", "url(" + this.cf + ")");
            }
        }
        ch(a) {
            a.setAttribute("src", "");
            this.cc.setRawStyleProperty("background-image", "");
        }
        cm(a) {
            switch (a) {
                case 1:
                    this.cc.setRawStyleProperty("background-size", "100% 100%");
                    break;
                case 2:
                    this.cc.setRawStyleProperty("background-size", "auto");
                    break;
                case 0:
                    this.cc.setRawStyleProperty("background-size", "contain");
                    break;
            }
        }
        cn(a, b) {
            this.b9 = true;
            this.cf = a;
            this.ce.setAttribute("src", a);
        }
        cg() {
            if (this.b9) {
                this.ch(this.cd);
                this.cf = "";
            }
        }
        ck(a) {
            this.b7 = a;
        }
        cl(a) {
            this.b8 = a;
        }
        get_r() {
            return true;
        }
        bg(a, b, c) {
            super.bg(a, b, c);
            if (a == "Indent" || a == "IsCollapsable") {
                this.cc.setRawStyleProperty("margin-left", this.au + this.aw + this.av + "px");
            }
        }
    }
    ImageCell.$t = /*@__PURE__*/ markType(ImageCell, 'ImageCell', GridCellBase.$);
    return ImageCell;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let ImageCellPresenter = /*@__PURE__*/ (() => {
    class ImageCellPresenter extends CellPresenterBase {
        constructor(a) {
            super(a);
        }
        get d() {
            return this.a;
        }
        b(a) {
            super.b(a);
            let b = a;
            if (a.as) {
                if (a.ax(CellModel.ei) || a.ax(CellModel.ge)) {
                    let c = Math.min(1, Math.max(0, a.cb));
                    let d = a.b1 * (1 - c);
                    this.d.cb = d;
                }
                if (b.ax(ImageCellModel.ku) || b.ax(ImageCellModel.kv)) {
                    this.e(b.ky, b.kr);
                }
                if (b.ax(ImageCellModel.kw) || b.ax(ImageCellModel.e2) || b.ax(ImageCellModel.gd)) {
                    this.f(b.kt, b.f, b.h);
                }
                if (b.ax(ImageCellModel.f8)) {
                    if (a.t == 1) {
                        this.d.cg();
                    }
                    else if (a.t == 2) {
                        this.e(b.ky, b.kr);
                    }
                }
            }
        }
        f(a, b, c) {
            this.d.cm(a);
        }
        e(a, b) {
            let c = a.toLowerCase();
            if (b == 0) {
                b = 4;
            }
            if (stringStartsWith(c, "http") || b == 4) {
                this.d.cj(a, 4);
            }
            if (stringStartsWith(c, "asset") || b == 2) {
                let d = a;
                if (stringStartsWith(c, "asset")) {
                    d = a.substr(8);
                }
                this.d.cj(d, 2);
            }
            if (stringStartsWith(c, "drawable") || b == 1) {
                let e = a;
                if (stringStartsWith(c, "drawable")) {
                    e = a.substr(11);
                }
                this.d.cj(e, 1);
            }
            if (stringStartsWith(c, "nativeresource") || b == 1) {
                let f = a;
                if (stringStartsWith(c, "nativeresource")) {
                    f = a.substr(17);
                }
                this.d.cj(f, 1);
            }
            if (stringStartsWith(c, "embeddedresource") || b == 3) {
                let g = a;
                if (stringStartsWith(c, "embeddedresource")) {
                    g = a.substr(19);
                }
                this.d.cj(g, 3);
            }
        }
    }
    ImageCellPresenter.$t = /*@__PURE__*/ markType(ImageCellPresenter, 'ImageCellPresenter', CellPresenterBase.$);
    return ImageCellPresenter;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let TemplateCellContainer = /*@__PURE__*/ (() => {
    class TemplateCellContainer extends Base {
        constructor(a) {
            super();
            this.d = null;
            this._element = null;
            this.b = null;
            this.b = a;
            this.element = a.createElement("div");
        }
        get element() {
            return this._element;
        }
        set element(a) {
            this._element = a;
        }
        get isCanvasBased() {
            return false;
        }
    }
    TemplateCellContainer.$t = /*@__PURE__*/ markType(TemplateCellContainer, 'TemplateCellContainer');
    return TemplateCellContainer;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let TemplateCell = /*@__PURE__*/ (() => {
    class TemplateCell extends GridCellBase {
        constructor(a) {
            super(a);
            this.b7 = null;
            this.b7 = new TemplateCellContainer(a);
            this.b7.element.setRawStyleProperty("box-sizing", "border-box");
            this.z.append(this.b7.element);
        }
        get b8() {
            return this.b7;
        }
        get_r() {
            return true;
        }
        bg(a, b, c) {
            super.bg(a, b, c);
            if (a == "Indent" || a == "IsCollapsable") {
                this.b7.element.setRawStyleProperty("margin-left", this.au + this.aw + this.av + "px");
            }
        }
    }
    TemplateCell.$t = /*@__PURE__*/ markType(TemplateCell, 'TemplateCell', GridCellBase.$);
    return TemplateCell;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let TemplateCellPresenter = /*@__PURE__*/ (() => {
    class TemplateCellPresenter extends CellPresenterBase {
        constructor(a, b) {
            super(a);
            this.d = null;
            this.d = b;
        }
        get e() {
            return this.a;
        }
        b(a) {
            super.b(a);
            let b = a;
            let c = this.d.actualColumns._inner[a.k.az];
            if (a.ax(CellModel.ei) || a.ax(CellModel.ge)) {
                let d = Math.min(1, Math.max(0, a.cb));
                let e = a.b1 * (1 - d);
                this.e.b8.element.setRawStyleProperty("opacity", e.toString());
            }
            c.jp(a, this.e.b8);
        }
    }
    TemplateCellPresenter.$t = /*@__PURE__*/ markType(TemplateCellPresenter, 'TemplateCellPresenter', CellPresenterBase.$);
    return TemplateCellPresenter;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let TemplateHeaderCell = /*@__PURE__*/ (() => {
    class TemplateHeaderCell extends GridCellBase {
        constructor(a) {
            super(a);
            this.b7 = null;
            this.b7 = new TemplateCellContainer(a);
            this.z.append(this.b7.element);
        }
        get b8() {
            return this.b7;
        }
        get_q() {
            return true;
        }
    }
    TemplateHeaderCell.$t = /*@__PURE__*/ markType(TemplateHeaderCell, 'TemplateHeaderCell', GridCellBase.$);
    return TemplateHeaderCell;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let TemplateHeaderCellPresenter = /*@__PURE__*/ (() => {
    class TemplateHeaderCellPresenter extends CellPresenterBase {
        constructor(a, b) {
            super(a);
            this.d = null;
            this.d = b;
        }
        get e() {
            return this.a;
        }
        b(a) {
            super.b(a);
            let b = this.d.actualColumns._inner[a.k.az];
            let c = b.header;
            if (a.ax(CellModel.ei) || a.ax(CellModel.ge)) {
                let d = Math.min(1, Math.max(0, a.cb));
                let e = a.b1 * (1 - d);
                this.e.b8.element.setRawStyleProperty("opacity", e.toString());
            }
            let f = a;
            c.fd(f, this.e.b8);
        }
    }
    TemplateHeaderCellPresenter.$t = /*@__PURE__*/ markType(TemplateHeaderCellPresenter, 'TemplateHeaderCellPresenter', CellPresenterBase.$);
    return TemplateHeaderCellPresenter;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let SectionHeaderCell = /*@__PURE__*/ (() => {
    class SectionHeaderCell extends GridCellBase {
        constructor(a) {
            super(a);
            this.b7 = null;
            this.b7 = a.createElement("span");
            this.z.setRawStyleProperty("text-align", "left");
            this.z.setRawStyleProperty("vertical-align", "middle");
            this.z.setRawStyleProperty("overflow", "hidden");
            this.z.setRawStyleProperty("white-space", "nowrap");
            this.z.setRawStyleProperty("text-overflow", "ellipsis");
            this.z.append(this.b7);
        }
        get b8() {
            return this.b7;
        }
        get_r() {
            return true;
        }
        bg(a, b, c) {
            super.bg(a, b, c);
            if (a == "Indent") {
                this.b7.setRawStyleProperty("margin-left", this.au + this.aw + 10 + "px");
            }
            if (a == "IsCollapsable") {
                if (this.o) {
                    this.b7.setRawStyleProperty("margin-left", this.au + this.aw + 10 + "px");
                }
                else {
                    this.b7.setRawStyleProperty("margin-left", "0px");
                }
            }
        }
    }
    SectionHeaderCell.$t = /*@__PURE__*/ markType(SectionHeaderCell, 'SectionHeaderCell', GridCellBase.$);
    return SectionHeaderCell;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let SectionHeaderCellPresenter = /*@__PURE__*/ (() => {
    class SectionHeaderCellPresenter extends CellPresenterBase {
        constructor(a) {
            super(a);
        }
        get d() {
            return this.a;
        }
        b(a) {
            super.b(a);
            let b = a;
            if (a.as) {
                if (a.ax(SectionHeaderCellModel.kw) || a.ax(SectionHeaderCellModel.ky) || a.ax(SectionHeaderCellModel.kx) || a.ax(SectionHeaderCellModel.k0)) {
                    if (b.ks == null || (b.ks.length == 0 && b.k6 == null)) {
                        if (b.go == null) {
                            b.ip = "";
                        }
                        else {
                            b.ip = b.go.toString();
                        }
                    }
                    else {
                        if (b.k4 != null && b.kv == 0) {
                            b.ip = b.k6 + "    " + b.k4;
                        }
                        else {
                            b.ip = b.k6;
                        }
                    }
                    this.d.b8.setRawText(b.ip);
                }
                ContentCellModelHelper.a(this.a.w, b, this.a.z, this.d.b8, this.a);
            }
        }
    }
    SectionHeaderCellPresenter.$t = /*@__PURE__*/ markType(SectionHeaderCellPresenter, 'SectionHeaderCellPresenter', CellPresenterBase.$);
    return SectionHeaderCellPresenter;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let VerticalSeparatorCell = /*@__PURE__*/ (() => {
    class VerticalSeparatorCell extends GridCellBase {
        constructor(a) {
            super(a);
            this.z.setStyleProperty("background-clip", "padding-box");
        }
        bp(a, b, c, d, e) {
            if (a == null) {
                this.z.setRawStyleProperty("border", "");
            }
            else {
                this.z.setRawStyleProperty("border-color", a._fill);
                this.z.setRawStyleProperty("border-left-width", b == 1 ? "thin" : b.toString() + "px");
                this.z.setRawStyleProperty("border-top-width", c.toString() + "px");
                this.z.setRawStyleProperty("border-right-width", d == 1 ? "thin" : d.toString() + "px");
                this.z.setRawStyleProperty("border-bottom-width", e.toString() + "px");
                this.z.setRawStyleProperty("border-style", "solid");
            }
        }
    }
    VerticalSeparatorCell.$t = /*@__PURE__*/ markType(VerticalSeparatorCell, 'VerticalSeparatorCell', GridCellBase.$);
    return VerticalSeparatorCell;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let VerticalSeparatorCellPresenter = /*@__PURE__*/ (() => {
    class VerticalSeparatorCellPresenter extends CellPresenterBase {
        constructor(a) {
            super(a);
        }
        get d() {
            return this.a;
        }
    }
    VerticalSeparatorCellPresenter.$t = /*@__PURE__*/ markType(VerticalSeparatorCellPresenter, 'VerticalSeparatorCellPresenter', CellPresenterBase.$);
    return VerticalSeparatorCellPresenter;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let SummaryCell = /*@__PURE__*/ (() => {
    class SummaryCell extends GridCellBase {
        constructor(a) {
            super(a);
            this.b7 = null;
            this.b8 = null;
            this.b9 = null;
            this.cd = -1;
            this.cc = -1;
            this.z.setRawStyleProperty("vertical-align", "middle");
            this.b9 = a.createElement("div");
            this.b7 = a.createElement("span");
            this.b7.setRawStyleProperty("display", "inline-block");
            this.b7.setRawStyleProperty("width", "40%");
            this.b7.setRawStyleProperty("white-space", "nowrap");
            this.b7.setRawStyleProperty("text-overflow", "ellipsis");
            this.b7.setRawStyleProperty("vertical-align", "middle");
            this.b7.setRawStyleProperty("overflow", "hidden");
            this.b9.append(this.b7);
            this.b8 = a.createElement("span");
            this.b8.setRawStyleProperty("display", "inline-block");
            this.b8.setRawStyleProperty("width", "60%");
            this.b8.setRawStyleProperty("text-align", "right");
            this.b8.setRawStyleProperty("white-space", "nowrap");
            this.b8.setRawStyleProperty("text-overflow", "ellipsis");
            this.b8.setRawStyleProperty("vertical-align", "middle");
            this.b8.setRawStyleProperty("overflow", "hidden");
            this.b9.append(this.b8);
            this.z.append(this.b9);
        }
        get ca() {
            return this.b7;
        }
        get cb() {
            return this.b8;
        }
        bw(a, b) {
            super.bw(a, b);
            let c = Math.max(0, a - b);
            if (this.cd != c) {
                this.cd = c;
            }
        }
        bq(a, b) {
            super.bq(a, b);
            let c = Math.max(0, a - b);
            if (this.cc != c) {
                this.cc = c;
            }
        }
        get_r() {
            return false;
        }
        bg(a, b, c) {
            super.bg(a, b, c);
            if (a == "Indent" || a == "IsCollapsable") {
                this.b9.setRawStyleProperty("margin-left", this.au + this.aw + this.av + "px");
            }
        }
    }
    SummaryCell.$t = /*@__PURE__*/ markType(SummaryCell, 'SummaryCell', GridCellBase.$);
    return SummaryCell;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let SummaryCellPresenter = /*@__PURE__*/ (() => {
    class SummaryCellPresenter extends CellPresenterBase {
        constructor(a) {
            super(a);
        }
        get d() {
            return this.a;
        }
        b(a) {
            super.b(a);
            let b = a;
            if (a.as) {
                ContentCellModelHelper.a(this.a.w, b, this.a.z, this.d.ca, this.a);
                ContentCellModelHelper.a(this.a.w, b, this.a.z, this.d.cb, this.a);
                if (a.aw("ResolvedSummaryLabel") || a.aw("ResolvedSummaryValue")) {
                    if (b.ky != null) {
                        this.d.ca.setRawText(b.ky);
                    }
                    if (b.k0 != null) {
                        this.d.cb.setRawText(b.k0);
                    }
                }
                if (a.aw("SummaryLabelTextColor")) {
                    this.d.ca.setRawStyleProperty("color", b.k5._fill);
                }
                if (a.aw("SummaryLabelFontInfo")) {
                    let c = b.kr;
                    if (c == null) {
                        c = FontUtil.getDefaultFont(this.a.w);
                    }
                    this.d.ca.setRawStyleProperty("font", c.fontString);
                }
            }
        }
    }
    SummaryCellPresenter.$t = /*@__PURE__*/ markType(SummaryCellPresenter, 'SummaryCellPresenter', CellPresenterBase.$);
    return SummaryCellPresenter;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let DataGridPresenterManager = /*@__PURE__*/ (() => {
    class DataGridPresenterManager extends Base {
        constructor(a, b) {
            super();
            this.a = null;
            this.c = false;
            this.a = a;
            this.c = b;
        }
        b(a, b) {
            if (b.r != null) {
                return b.r;
            }
            if (this.c) {
                if (typeCast(TextCellModel.$, b) !== null) {
                    b.r = new CanvasTextCellPresenter(new CanvasTextCell(a));
                }
                if (typeCast(NumericCellModel.$, b) !== null) {
                    b.r = new CanvasNumericCellPresenter(new CanvasNumericCell(a));
                }
                if (typeCast(DateTimeCellModel.$, b) !== null) {
                    b.r = new CanvasDateTimeCellPresenter(new CanvasDateTimeCell(a));
                }
                if (typeCast(TextHeaderCellModel.$, b) !== null) {
                    b.r = new CanvasTextHeaderCellPresenter(new CanvasTextHeaderCell(a));
                }
                if (typeCast(RowSeparatorModel.$, b) !== null) {
                    b.r = new CanvasRowSeparatorCellPresenter(new CanvasRowSeparatorCell(a));
                }
                if (typeCast(ImageCellModel.$, b) !== null) {
                    b.r = new CanvasImageCellPresenter(new CanvasImageCell(a));
                }
                if (typeCast(TemplateCellModel.$, b) !== null) {
                    b.r = new CanvasTemplateCellPresenter(new CanvasTemplateCell(a), this.a);
                }
                if (typeCast(TemplateHeaderCellModel.$, b) !== null) {
                    b.r = new CanvasTemplateHeaderCellPresenter(new CanvasTemplateHeaderCell(a), this.a);
                }
                if (typeCast(SectionHeaderCellModel.$, b) !== null) {
                    b.r = new CanvasSectionHeaderCellPresenter(new CanvasSectionHeaderCell(a));
                }
                if (typeCast(VerticalSeparatorCellModel.$, b) !== null) {
                    b.r = new CanvasVerticalSeparatorCellPresenter(new CanvasVerticalSeparatorCell(a));
                }
                if (typeCast(SummaryCellModel.$, b) !== null) {
                    b.r = new CanvasSummaryCellPresenter(new CanvasSummaryCell(a));
                }
                if (typeCast(EditorCellModel.$, b) !== null) {
                    b.r = new EditorCellPresenter(new EditorCell(a));
                }
                if (typeCast(EditorRowCellModel.$, b) !== null) {
                    b.r = new EditorRowCellPresenter(new EditorRowCell(a));
                }
            }
            else {
                if (typeCast(TextCellModel.$, b) !== null) {
                    b.r = new TextCellPresenter(new TextCell(a));
                }
                if (typeCast(NumericCellModel.$, b) !== null) {
                    b.r = new NumericCellPresenter(new NumericCell(a));
                }
                if (typeCast(DateTimeCellModel.$, b) !== null) {
                    b.r = new DateTimeCellPresenter(new DateTimeCell(a));
                }
                if (typeCast(TextHeaderCellModel.$, b) !== null) {
                    b.r = new TextHeaderCellPresenter(new TextHeaderCell(a));
                }
                if (typeCast(RowSeparatorModel.$, b) !== null) {
                    b.r = new RowSeparatorCellPresenter(new RowSeparatorCell(a));
                }
                if (typeCast(ImageCellModel.$, b) !== null) {
                    b.r = new ImageCellPresenter(new ImageCell(a));
                }
                if (typeCast(TemplateCellModel.$, b) !== null) {
                    b.r = new TemplateCellPresenter(new TemplateCell(a), this.a);
                }
                if (typeCast(TemplateHeaderCellModel.$, b) !== null) {
                    b.r = new TemplateHeaderCellPresenter(new TemplateHeaderCell(a), this.a);
                }
                if (typeCast(SectionHeaderCellModel.$, b) !== null) {
                    b.r = new SectionHeaderCellPresenter(new SectionHeaderCell(a));
                }
                if (typeCast(VerticalSeparatorCellModel.$, b) !== null) {
                    b.r = new VerticalSeparatorCellPresenter(new VerticalSeparatorCell(a));
                }
                if (typeCast(SummaryCellModel.$, b) !== null) {
                    b.r = new SummaryCellPresenter(new SummaryCell(a));
                }
                if (typeCast(EditorCellModel.$, b) !== null) {
                    b.r = new EditorCellPresenter(new EditorCell(a));
                }
                if (typeCast(EditorRowCellModel.$, b) !== null) {
                    b.r = new EditorRowCellPresenter(new EditorRowCell(a));
                }
            }
            return b.r;
        }
    }
    DataGridPresenterManager.$t = /*@__PURE__*/ markType(DataGridPresenterManager, 'DataGridPresenterManager');
    return DataGridPresenterManager;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let IViewportManager_$type = /*@__PURE__*/ new Type(null, 'IViewportManager');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let DataGridViewportManager = /*@__PURE__*/ (() => {
    class DataGridViewportManager extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.a = a;
        }
        moveViewportTo(x_, y_) {
            let grid_ = this.a;
            if (grid_._scrollTo) {
                grid_._scrollTo(x_, y_);
            }
            else {
                grid_.scrollTo(x_, y_);
            }
            ;
        }
    }
    DataGridViewportManager.$t = /*@__PURE__*/ markType(DataGridViewportManager, 'DataGridViewportManager', Base.$, [IViewportManager_$type]);
    return DataGridViewportManager;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let IDelayedExecutionManager_$type = /*@__PURE__*/ new Type(null, 'IDelayedExecutionManager');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let DataGridDelayedExecutionManager = /*@__PURE__*/ (() => {
    class DataGridDelayedExecutionManager extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.a = a;
        }
        cancelPending(a) {
            this.a.clearTimeout(a);
        }
        executeIn(a, b) {
            return this.a.setTimeout(() => a(), b);
        }
    }
    DataGridDelayedExecutionManager.$t = /*@__PURE__*/ markType(DataGridDelayedExecutionManager, 'DataGridDelayedExecutionManager', Base.$, [IDelayedExecutionManager_$type]);
    return DataGridDelayedExecutionManager;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let IPropertySetter_$type = /*@__PURE__*/ new Type(null, 'IPropertySetter');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let DataGridPropertySetter = /*@__PURE__*/ (() => {
    class DataGridPropertySetter extends Base {
        setProperty(target_, propertyName_, value_) {
            if (target_ == null) {
                return;
            }
            target_[propertyName_] = value_;
        }
    }
    DataGridPropertySetter.$t = /*@__PURE__*/ markType(DataGridPropertySetter, 'DataGridPropertySetter', Base.$, [IPropertySetter_$type]);
    return DataGridPropertySetter;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let IDraggerView_$type = /*@__PURE__*/ new Type(null, 'IDraggerView');
/**
 * @hidden
 */
let IDragger_$type = /*@__PURE__*/ new Type(null, 'IDragger');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let DraggerView = /*@__PURE__*/ (() => {
    class DraggerView extends Base {
        constructor(a) {
            super();
            this._model = null;
            this.c = null;
            this.a = null;
            this.model = a;
        }
        get model() {
            return this._model;
        }
        set model(a) {
            this._model = a;
        }
        provideContainer(a) {
            if (a == null) {
                if (this.c != null) {
                    this.c = null;
                }
                if (this.a != null) {
                    this.a.ak = null;
                    this.a.aq();
                }
                return;
            }
            this.c = a;
            let b = Math.round(this.c.rootWrapper.width());
            let c = Math.round(this.c.rootWrapper.height());
            this.a = new CanvasGestureDOMEventProxy(this.c.rootWrapper, this.c, true);
            this.a.c2 = true;
            let d = this.a;
            d.onMouseOver = delegateCombine(d.onMouseOver, runOn(this, this.d));
            let e = this.a;
            e.onMouseUp = delegateCombine(e.onMouseUp, runOn(this, this.e));
            this.a.ak = runOn(this, this.b);
            this.model.viewportWidth = b;
            this.model.viewportHeight = c;
        }
        onDetachedFromUI() {
            if (this.a != null) {
                this.a.bb(this.c.rootWrapper, "");
            }
        }
        onAttachedToUI() {
            if (this.a != null) {
                this.a.ap(this.c.rootWrapper, "");
            }
        }
        b(a) {
            return this.model.isDragActive;
        }
        d(a, b, c) {
            this.f(a);
        }
        e(a) {
            this.g(a);
        }
        captureMouse() {
        }
        releaseMouse() {
        }
        transformPoint(a, b) {
            let c = BaseDOMEventProxy.cy(this.c.rootWrapper);
            let d = { $type: Point_$type, x: a - c.x, y: b - c.y };
            return d;
        }
        f(a) {
            this.model.onMouseMove(a.x, a.y);
        }
        g(a) {
            this.model.onMouseUp(a.x, a.y);
        }
        onViewportSizeChanged(a, b) {
            this.a.bf = new Rect(0, 0, 0, a, b);
        }
    }
    DraggerView.$t = /*@__PURE__*/ markType(DraggerView, 'DraggerView', Base.$, [IDraggerView_$type]);
    return DraggerView;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let DragSelectEventArgs = /*@__PURE__*/ (() => {
    class DragSelectEventArgs extends EventArgs {
        constructor() {
            super(...arguments);
            this._startX = 0;
            this._startY = 0;
            this._currentX = 0;
            this._currentY = 0;
            this._controlPressed = false;
        }
        get startX() {
            return this._startX;
        }
        set startX(a) {
            this._startX = a;
        }
        get startY() {
            return this._startY;
        }
        set startY(a) {
            this._startY = a;
        }
        get currentX() {
            return this._currentX;
        }
        set currentX(a) {
            this._currentX = a;
        }
        get currentY() {
            return this._currentY;
        }
        set currentY(a) {
            this._currentY = a;
        }
        get controlPressed() {
            return this._controlPressed;
        }
        set controlPressed(a) {
            this._controlPressed = a;
        }
    }
    DragSelectEventArgs.$t = /*@__PURE__*/ markType(DragSelectEventArgs, 'DragSelectEventArgs', EventArgs.$);
    return DragSelectEventArgs;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let Dragger = /*@__PURE__*/ (() => {
    class Dragger extends Base {
        constructor() {
            super(...arguments);
            this.l = null;
            this.d = false;
            this.c = null;
            this.b = 3;
            this.e = false;
            this.a = null;
            this.g = 0;
            this.f = 0;
            this.onDrag = null;
            this.onDragEnd = null;
            this.propertyChanged = null;
        }
        get view() {
            if (this.c == null) {
                this.c = new DraggerView(this);
            }
            return this.c;
        }
        set view(a) {
            this.c = a;
        }
        get dragType() {
            return this.b;
        }
        get isDragActive() {
            return this.e;
        }
        get cellPath() {
            return this.a;
        }
        get viewportWidth() {
            return this.g;
        }
        set viewportWidth(a) {
            let b = this.g;
            this.g = a;
            if (b != this.g) {
                this.j("ViewportWidth", b, this.g);
            }
        }
        get viewportHeight() {
            return this.f;
        }
        set viewportHeight(a) {
            let b = this.f;
            this.f = a;
            if (b != this.f) {
                this.j("ViewportHeight", b, this.f);
            }
        }
        j(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            this.k(a, b, c);
        }
        onDetachedFromUI() {
            this.view.onDetachedFromUI();
        }
        onAttachedToUI() {
            this.view.onAttachedToUI();
        }
        provideContainer(a) {
            this.view.provideContainer(a);
        }
        onMouseMove(a, b) {
            if (this.e) {
                if (this.onDrag != null) {
                    this.onDrag(this, ((() => {
                        let $ret = new DragSelectEventArgs();
                        $ret.startX = this.l.x;
                        $ret.startY = this.l.y;
                        $ret.currentX = a;
                        $ret.currentY = b;
                        $ret.controlPressed = this.d;
                        return $ret;
                    })()));
                }
            }
        }
        onMouseUp(a, b) {
            if (this.e) {
                this.view.releaseMouse();
                this.e = false;
                if (this.onDragEnd != null) {
                    this.onDragEnd(this, new DragSelectEventArgs());
                }
                this.b = 3;
            }
        }
        dragStart(a, b, c, d, e, f, g) {
            if (!this.e) {
                this.l = this.view.transformPoint(a + c, b + d);
                this.e = true;
                this.d = g;
                this.b = e;
                this.a = f;
                this.view.captureMouse();
            }
        }
        k(a, b, c) {
            switch (a) {
                case "ViewportWidth":
                case "ViewportHeight":
                    this.view.onViewportSizeChanged(this.g, this.f);
                    break;
            }
        }
    }
    Dragger.$t = /*@__PURE__*/ markType(Dragger, 'Dragger', Base.$, [IDragger_$type, INotifyPropertyChanged_$type]);
    return Dragger;
})();

let defaultFont = "\"Verdana\", Arial, sans-serif";
let DataGridStylingDefaults = {};

class IgrFormatSummaryTextEventArgs {
    createImplementation() {
        return new FormatSummaryTextEventArgs();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    /**
     * Gets the summary property name.
    */
    get field() {
        return this.i.c;
    }
    set field(v) {
        this.i.c = v;
    }
    /**
     * Gets the summary display name.
    */
    get displayName() {
        return this.i.b;
    }
    set displayName(v) {
        this.i.b = v;
    }
    /**
     * Gets the original value before formatting.
    */
    get summaryResult() {
        return this.i.a;
    }
    set summaryResult(v) {
        this.i.a = v;
    }
    /**
     * Gets or sets the summary value as formatted text.  Setting this property will only affect summary cells.
    */
    get formattedResult() {
        return this.i.d;
    }
    set formattedResult(v) {
        this.i.d = v;
    }
    /**
     * Gets or sets the final text that will be displayed in the group header.
    */
    get formattedText() {
        return this.i.e;
    }
    set formattedText(v) {
        this.i.e = v;
    }
}

/**
 * Represents a summary that is applied to a datasource. Changes to this object are not observed or expected after it is initially assigned to a collection.
*/
class IgrColumnSummaryDescription {
    constructor() {
        this._formatText = null;
        this._formatText_wrapped = null;
        this._provideCalculator = null;
        this._provideCalculator_wrapped = null;
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    createImplementation() {
        return new ColumnSummaryDescription(0);
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    get field() {
        return this.i.af;
    }
    set field(v) {
        this.i.af = v;
    }
    get operand() {
        return this.i.n;
    }
    set operand(v) {
        this.i.n = ensureEnum(SummaryOperand_$type, v);
    }
    /**
     * Gets or sets the name to use when displaying the calculator name.
    */
    get calculatorDisplayName() {
        return this.i.ac;
    }
    set calculatorDisplayName(v) {
        this.i.ac = v;
    }
    /**
     * Gets or sets the display name for the summary.
    */
    get displayName() {
        return this.i.ae;
    }
    set displayName(v) {
        this.i.ae = v;
    }
    /**
     * Gets or sets the format string for the summary value.
    */
    get valueFormat() {
        return this.i.ag;
    }
    set valueFormat(v) {
        this.i.ag = v;
    }
    /**
     * Gets or sets the format specifiers to use with the ValueFormat string.
    */
    get valueFormatSpecifiers() {
        return this.i.d;
    }
    set valueFormatSpecifiers(v) {
        this.i.d = v;
    }
    /**
     * Gets or sets the display format for the summary when in list display mode.
    */
    get displayFormat() {
        return this.i.ad;
    }
    set displayFormat(v) {
        this.i.ad = v;
    }
    /**
     * Gets or sets the format specifiers to use with the DisplayFormat string.
    */
    get displayFormatSpecifiers() {
        return this.i.c;
    }
    set displayFormatSpecifiers(v) {
        this.i.c = v;
    }
    /**
     * Gets or sets an INTL.DateTimeFormat or INTL.NumericFormat to use to format the value.
    */
    get formatOverride() {
        return this.i.w;
    }
    set formatOverride(v) {
        this.i.w = v;
    }
    /**
     * Gets or sets the minimum fraction digits. If FormatOverride is specificied this value is ignored.
    */
    get maxFractionDigits() {
        return this.i.u;
    }
    set maxFractionDigits(v) {
        this.i.u = +v;
    }
    findByName(name) {
        if (this.valueFormatSpecifiers != null && arrayFindByName(this.valueFormatSpecifiers, name)) {
            return arrayFindByName(this.valueFormatSpecifiers, name);
        }
        if (this.displayFormatSpecifiers != null && arrayFindByName(this.displayFormatSpecifiers, name)) {
            return arrayFindByName(this.displayFormatSpecifiers, name);
        }
        return null;
    }
    equals(other) {
        let iv = this.i.equals(other);
        return (iv);
    }
    /**
     * Called when the value is being formatted.
    */
    get formatText() {
        return this._formatText;
    }
    set formatText(ev) {
        if (this._formatText_wrapped !== null) {
            this.i.formatText = delegateRemove(this.i.formatText, this._formatText_wrapped);
            this._formatText_wrapped = null;
            this._formatText = null;
        }
        this._formatText = ev;
        this._formatText_wrapped = (o, e) => {
            let outerArgs = new IgrFormatSummaryTextEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeFormatText) {
                this.beforeFormatText(this, outerArgs);
            }
            if (this._formatText) {
                this._formatText(this, outerArgs);
            }
        };
        this.i.formatText = delegateCombine(this.i.formatText, this._formatText_wrapped);
    }
    /**
     * Called when the summary calculator is required.
    */
    get provideCalculator() {
        return this._provideCalculator;
    }
    set provideCalculator(ev) {
        if (this._provideCalculator_wrapped !== null) {
            this.i.provideCalculator = delegateRemove(this.i.provideCalculator, this._provideCalculator_wrapped);
            this._provideCalculator_wrapped = null;
            this._provideCalculator = null;
        }
        this._provideCalculator = ev;
        this._provideCalculator_wrapped = (o, e) => {
            let outerArgs = new IgrProvideCalculatorEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeProvideCalculator) {
                this.beforeProvideCalculator(this, outerArgs);
            }
            if (this._provideCalculator) {
                this._provideCalculator(this, outerArgs);
            }
        };
        this.i.provideCalculator = delegateCombine(this.i.provideCalculator, this._provideCalculator_wrapped);
    }
}

class IgrColumnSummaryDescriptionCollection {
    createImplementation() {
        return new ColumnSummaryDescriptionCollection();
    }
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    item(index, value) {
        let int = null;
        if (value !== undefined) {
            int = this.i.set(index, value == null ? null : value.i);
        }
        else {
            int = this.i.get(index);
        }
        let ext = null;
        if (int != null) {
            ext = int.externalObject;
            if (!ext) {
                ext = new IgrColumnSummaryDescription();
                ext._implementation = int;
                int.externalObject = ext;
            }
        }
        return ext;
    }
    get count() {
        return this.i.size();
    }
    toArray() {
        let arr = [];
        for (let i = 0; i < this.count; i++) {
            arr[i] = this.item(i);
        }
        return arr;
    }
    *[Symbol.iterator]() {
        for (let i = 0; i < this.count; i++) {
            let item = this.item(i);
            if (item.externalObject) {
                item = item.externalObject;
            }
            yield item;
        }
    }
    findByName(name) {
        return null;
    }
    add(item) {
        let iv = this.i.g((item == null ? null : item.i));
        return (iv);
    }
    insert(index, item) {
        this.i.n(index, (item == null ? null : item.i));
    }
    clear() {
        this.i.m();
    }
    indexOf(item) {
        let iv = this.i.j((item == null ? null : item.i));
        return (iv);
    }
    remove(item) {
        let iv = this.i.h((item == null ? null : item.i));
        return (iv);
    }
    removeAt(index) {
        let iv = this.i.d(index);
        return (iv == null ? null : iv.externalObject);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

class IgrColumnHiddenChangedEventArgs {
    createImplementation() {
        return new ColumnHiddenChangedEventArgs();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    get column() {
        if (this.i.a == null) {
            return null;
        }
        if (!this.i.a.externalObject) {
            let e = IgrColumn._createFromInternal(this.i.a);
            if (e) {
                e._implementation = this.i.a;
            }
            this.i.a.externalObject = e;
        }
        return this.i.a.externalObject;
    }
    set column(v) {
        v == null ? this.i.a = null : this.i.a = v.i;
    }
    get isHidden() {
        return this.i.b;
    }
    set isHidden(v) {
        this.i.b = ensureBool(v);
    }
}

class IgrGridFilterExpressionsEventArgs {
    createImplementation() {
        return new GridFilterExpressionsEventArgs();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    get filterExpressions() {
        if (this.i.a == null) {
            return null;
        }
        if (!this.i.a.externalObject) {
            let e = new IgrFilterExpressionCollection();
            e._implementation = this.i.a;
            this.i.a.externalObject = e;
        }
        return this.i.a.externalObject;
    }
    set filterExpressions(v) {
        v == null ? this.i.a = null : this.i.a = v.i;
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/**
 * Information about the entering action.
*/
class IgrResponsiveStateEnteringEventArgs {
    createImplementation() {
        return new ResponsiveStateEnteringEventArgs();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
}

/**
 * Information about the entered action.
*/
class IgrResponsiveStateEnteredEventArgs {
    createImplementation() {
        return new ResponsiveStateEnteredEventArgs();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
}

/**
 * Information about the exited state.
*/
class IgrResponsiveStateExitedEventArgs {
    createImplementation() {
        return new ResponsiveStateExitedEventArgs();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
}

/**
 * Describes a state that the grid can enter based on a set of responsive conditions.
*/
class IgrResponsiveState {
    constructor() {
        this._stateEntering = null;
        this._stateEntering_wrapped = null;
        this._stateEntered = null;
        this._stateEntered_wrapped = null;
        this._stateExited = null;
        this._stateExited_wrapped = null;
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    createImplementation() {
        return new ResponsiveState();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    /**
     * The name of the responsive state
    */
    get name() {
        return this.i.n;
    }
    set name(v) {
        this.i.n = v;
    }
    /**
     * Gets or sets the minimum width for which this state is active.
    */
    get minimumWidth() {
        return this.i.k;
    }
    set minimumWidth(v) {
        this.i.k = +v;
    }
    /**
     * Gets or sets the maximum width for which this state is active.
    */
    get maximumWidth() {
        return this.i.j;
    }
    set maximumWidth(v) {
        this.i.j = +v;
    }
    /**
     * Configures this responsive state to only be manually actived
    */
    get isManualState() {
        return this.i.i;
    }
    set isManualState(v) {
        this.i.i = ensureBool(v);
    }
    findByName(name) {
        return null;
    }
    /**
     * Adds a responsive phase to the state.
    
    * @param phase  * The phase to add.
    */
    addResponsivePhase(phase) {
        let iv = this.i.d((phase == null ? null : phase.i));
        return (iv == null ? null : iv.externalObject);
    }
    /**
     * Adds a responsive phase to the state and returns it.
    
    */
    responsivePhase() {
        let iv = this.i.a();
        return (iv == null ? null : iv.externalObject);
    }
    /**
     * Called when a state is being entered.
    */
    get stateEntering() {
        return this._stateEntering;
    }
    set stateEntering(ev) {
        if (this._stateEntering_wrapped !== null) {
            this.i.stateEntering = delegateRemove(this.i.stateEntering, this._stateEntering_wrapped);
            this._stateEntering_wrapped = null;
            this._stateEntering = null;
        }
        this._stateEntering = ev;
        this._stateEntering_wrapped = (o, e) => {
            let outerArgs = new IgrResponsiveStateEnteringEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeStateEntering) {
                this.beforeStateEntering(this, outerArgs);
            }
            if (this._stateEntering) {
                this._stateEntering(this, outerArgs);
            }
        };
        this.i.stateEntering = delegateCombine(this.i.stateEntering, this._stateEntering_wrapped);
    }
    /**
     * Called when a state is entered.
    */
    get stateEntered() {
        return this._stateEntered;
    }
    set stateEntered(ev) {
        if (this._stateEntered_wrapped !== null) {
            this.i.stateEntered = delegateRemove(this.i.stateEntered, this._stateEntered_wrapped);
            this._stateEntered_wrapped = null;
            this._stateEntered = null;
        }
        this._stateEntered = ev;
        this._stateEntered_wrapped = (o, e) => {
            let outerArgs = new IgrResponsiveStateEnteredEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeStateEntered) {
                this.beforeStateEntered(this, outerArgs);
            }
            if (this._stateEntered) {
                this._stateEntered(this, outerArgs);
            }
        };
        this.i.stateEntered = delegateCombine(this.i.stateEntered, this._stateEntered_wrapped);
    }
    /**
     * Called when a state is exited.
    */
    get stateExited() {
        return this._stateExited;
    }
    set stateExited(ev) {
        if (this._stateExited_wrapped !== null) {
            this.i.stateExited = delegateRemove(this.i.stateExited, this._stateExited_wrapped);
            this._stateExited_wrapped = null;
            this._stateExited = null;
        }
        this._stateExited = ev;
        this._stateExited_wrapped = (o, e) => {
            let outerArgs = new IgrResponsiveStateExitedEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeStateExited) {
                this.beforeStateExited(this, outerArgs);
            }
            if (this._stateExited) {
                this._stateExited(this, outerArgs);
            }
        };
        this.i.stateExited = delegateCombine(this.i.stateExited, this._stateExited_wrapped);
    }
}

class IgrResponsiveStatesCollection extends IgCollection {
    constructor(list) {
        super();
        if (!IgrResponsiveState.$type) {
            IgrResponsiveState.$type = markType(IgrResponsiveState, "IgrResponsiveState");
        }
        if (list) {
            for (let i = 0; i < list.length; i++) {
                this.add(list[i]);
            }
        }
    }
    _createInnerColl() {
        if (!IgrResponsiveState.$type) {
            IgrResponsiveState.$type = markType(IgrResponsiveState, "IgrResponsiveState");
        }
        let coll = new SyncableObservableCollection$2(IgrResponsiveState.$type, ResponsiveState.$type, 0);
        coll.compare = (ext, int) => {
            let comp = ext;
            if (comp._implementation) {
                comp = comp._implementation;
            }
            if (comp.equals) {
                return comp.equals(int);
            }
            return comp === int;
        };
        coll.createTo = (ext) => {
            return ext._implementation;
        };
        coll.createFrom = (int) => {
            let ext = int.externalObject;
            if (!ext) {
                ext = new IgrResponsiveState();
                if (ext) {
                    ext._implementation = int;
                }
            }
            return ext;
        };
        return coll;
    }
}

/**
 * Animation settings for the grid.
*/
class IgrGridAnimationSettings {
    createImplementation() {
        return new GridAnimationSettings();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    findByName(name) {
        return null;
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/**
 * Represents a Row separator, this is used to visually separate the rows in a grid
*/
class IgrRowSeparator extends IgrDefinitionBase {
    createImplementation() {
        return new RowSeparator();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/**
 * Represents a Header Row separator. This is used to visually separate the header row from the rest of the rows in a grid.
*/
class IgrHeaderRowSeparator extends IgrDefinitionBase {
    createImplementation() {
        return new HeaderRowSeparator();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
    }
}

class IgrGridCellPosition {
    createImplementation() {
        return new GridCellPosition();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    /**
     * Gets or sets the row position of the cell.
    */
    get rowIndex() {
        return this.i.b;
    }
    set rowIndex(v) {
        this.i.b = +v;
    }
    /**
     * Gets or sets the column position of the cell.  Can be null for spanning elements like section headers.
    */
    get columnUniqueKey() {
        return this.i.d;
    }
    set columnUniqueKey(v) {
        this.i.d = v;
    }
    findByName(name) {
        return null;
    }
}

/**
 * Information about the change to the selected cells in the grid.
*/
class IgrGridActiveCellChangedEventArgs {
    createImplementation() {
        return new GridActiveCellChangedEventArgs();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    /**
     * The new active cell.
    */
    get newActiveCell() {
        if (this.i.newActiveCell == null) {
            return null;
        }
        if (!this.i.newActiveCell.externalObject) {
            let e = new IgrGridCellPosition();
            e._implementation = this.i.newActiveCell;
            this.i.newActiveCell.externalObject = e;
        }
        return this.i.newActiveCell.externalObject;
    }
    set newActiveCell(v) {
        v == null ? this.i.newActiveCell = null : this.i.newActiveCell = v.i;
    }
    /**
     * The old active cell.
    */
    get oldActiveCell() {
        if (this.i.oldActiveCell == null) {
            return null;
        }
        if (!this.i.oldActiveCell.externalObject) {
            let e = new IgrGridCellPosition();
            e._implementation = this.i.oldActiveCell;
            this.i.oldActiveCell.externalObject = e;
        }
        return this.i.oldActiveCell.externalObject;
    }
    set oldActiveCell(v) {
        v == null ? this.i.oldActiveCell = null : this.i.oldActiveCell = v.i;
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let DataGridScrollerKeyboardListener = /*@__PURE__*/ (() => {
    class DataGridScrollerKeyboardListener extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.a = a;
        }
        onDownArrow(a, b) {
            return this.a.h8(a, b);
        }
        onEnd(a, b) {
            return this.a.h9(a, b);
        }
        onHome(a, b) {
            return this.a.id(a, b);
        }
        onLeftArrow(a, b) {
            return this.a.ie(a, b);
        }
        onPageDown(a, b) {
            return this.a.ig(a, b);
        }
        onPageUp(a, b) {
            return this.a.ih(a, b);
        }
        onRightArrow(a, b) {
            return this.a.ii(a, b);
        }
        onTab(a, b) {
            return this.a.ij(a, b);
        }
        onUpArrow(a, b) {
            return this.a.ik(a, b);
        }
        onWheel() {
            this.a.sc();
        }
        onEnter(a, b) {
            return this.a.ia(a, b);
        }
        onEscape() {
            return this.a.ib();
        }
        onF2() {
            return this.a.ic();
        }
    }
    DataGridScrollerKeyboardListener.$t = /*@__PURE__*/ markType(DataGridScrollerKeyboardListener, 'DataGridScrollerKeyboardListener', Base.$, [IScrollerKeyboardListener_$type]);
    return DataGridScrollerKeyboardListener;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

class IgrHeaderSeparator extends IgrDefinitionBase {
    createImplementation() {
        return new HeaderSeparator();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

class IgrColumnResizingSeparator extends IgrDefinitionBase {
    createImplementation() {
        return new ColumnResizingSeparator();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

class IgrColumnMovingSeparator extends IgrDefinitionBase {
    createImplementation() {
        return new ColumnMovingSeparator();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
    }
    /**
     * Gets or sets the separator width for this column.
    */
    get separatorWidth() {
        return this.i.em;
    }
    set separatorWidth(v) {
        this.i.em = +v;
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

class IgrPinnedAreaSeparator extends IgrDefinitionBase {
    createImplementation() {
        return new PinnedAreaSeparator();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/**
 * Event arguments for the ColumnPinnedChanged event.
*/
class IgrColumnPinnedChangedEventArgs {
    createImplementation() {
        return new ColumnPinnedChangedEventArgs();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    /**
     * The column whose pinned state has changed.
    */
    get column() {
        if (this.i.a == null) {
            return null;
        }
        if (!this.i.a.externalObject) {
            let e = IgrColumn._createFromInternal(this.i.a);
            if (e) {
                e._implementation = this.i.a;
            }
            this.i.a.externalObject = e;
        }
        return this.i.a.externalObject;
    }
    set column(v) {
        v == null ? this.i.a = null : this.i.a = v.i;
    }
    /**
     * The new pinned state for the column.
    */
    get pinned() {
        return this.i.b;
    }
    set pinned(v) {
        this.i.b = ensureEnum(PinnedPositions_$type, v);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/**
 * Event arguments for the CellValueChanging event
*/
class IgrGridCellValueChangingEventArgs {
    createImplementation() {
        return new GridCellValueChangingEventArgs();
    }
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    /**
     * The backing information for the current cell.
    */
    get cellInfo() {
        if (this.i.cellInfo == null) {
            return null;
        }
        if (!this.i.cellInfo.externalObject) {
            let ext = null;
            switch (this.i.cellInfo.$type.name) {
                case "DateTimeCellModel":
                    ext = new IgrDateTimeCellInfo();
                    break;
                case "ImageCellModel":
                    ext = new IgrImageCellInfo();
                    break;
                case "NumericCellModel":
                    ext = new IgrNumericCellInfo();
                    break;
                case "RowSeparatorModel":
                    ext = new IgrRowSeparatorInfo();
                    break;
                case "SectionHeaderCellModel":
                    ext = new IgrSectionHeaderCellInfo();
                    break;
                case "TemplateCellModel":
                    ext = new IgrTemplateCellInfo();
                    break;
                case "TemplateHeaderCellModel":
                    ext = new IgrTemplateHeaderCellInfo();
                    break;
                case "TemplateSectionHeaderCellModel":
                    ext = new IgrTemplateSectionHeaderCellInfo();
                    break;
                case "TextCellModel":
                    ext = new IgrTextCellInfo();
                    break;
                case "TextHeaderCellModel":
                    ext = new IgrTextHeaderCellInfo();
                    break;
            }
            ext._implementation = this.i.cellInfo;
            this.i.cellInfo.externalObject = ext;
        }
        return this.i.cellInfo.externalObject;
    }
    /**
 * Gets the edit ID for this value change.
*/
    get editID() {
        return this.i.c;
    }
    set editID(v) {
        this.i.c = +v;
    }
    /**
     * Gets the column the cell belongs to.
    */
    get column() {
        if (this.i.b == null) {
            return null;
        }
        if (!this.i.b.externalObject) {
            let e = IgrColumn._createFromInternal(this.i.b);
            if (e) {
                e._implementation = this.i.b;
            }
            this.i.b.externalObject = e;
        }
        return this.i.b.externalObject;
    }
    set column(v) {
        v == null ? this.i.b = null : this.i.b = v.i;
    }
    /**
     * Gets the old cell value.
    */
    get oldValue() {
        return this.i.e;
    }
    set oldValue(v) {
        this.i.e = v;
    }
    /**
     * Gets the new cell value.
    */
    get newValue() {
        return this.i.d;
    }
    set newValue(v) {
        this.i.d = v;
    }
}

/**
 * Event arguments for the DataCommitting event.
*/
class IgrGridDataCommittingEventArgs {
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    /**
     * Gets a list of changes that are about to be committed.
    */
    get changes() {
        return this.i.a;
    }
    set changes(v) {
        this.i.a = v;
    }
    /**
     * The ID for the commit. Use this as the argument for the AcceptCommit or RejectCommit methods.
    */
    get commitID() {
        return this.i.b;
    }
    set commitID(v) {
        this.i.b = +v;
    }
}

/**
 * Event arguments for the DataCommitted event.
*/
class IgrGridDataCommittedEventArgs {
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    /**
     * Gets the ID for this commit.
    */
    get commitID() {
        return this.i.b;
    }
    set commitID(v) {
        this.i.b = +v;
    }
    /**
     * Gets a list of the changes that were committed.
    */
    get changes() {
        return this.i.a;
    }
    set changes(v) {
        this.i.a = v;
    }
}

/**
 * Event arguments for the SizeChanged event.
*/
class IgrGridSizeChangedEventArgs {
    createImplementation() {
        return new GridSizeChangedEventArgs();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    /**
     * The new width.
    */
    get width() {
        return this.i.b;
    }
    set width(v) {
        this.i.b = +v;
    }
    /**
     * The new height.
    */
    get height() {
        return this.i.a;
    }
    set height(v) {
        this.i.a = +v;
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/**
 * Event arguments for the GridColumnWidthChanged event.
*/
class IgrGridColumnWidthChangedEventArgs {
    createImplementation() {
        return new GridColumnWidthChangedEventArgs();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    /**
     * The column whose Width has changed
    */
    get column() {
        if (this.i.a == null) {
            return null;
        }
        if (!this.i.a.externalObject) {
            let e = IgrColumn._createFromInternal(this.i.a);
            if (e) {
                e._implementation = this.i.a;
            }
            this.i.a.externalObject = e;
        }
        return this.i.a.externalObject;
    }
    set column(v) {
        v == null ? this.i.a = null : this.i.a = v.i;
    }
    /**
     * The old column width.
    */
    get oldWidth() {
        if (this.i.b == null) {
            return null;
        }
        if (!this.i.b.externalObject) {
            let e = new IgrColumnWidth();
            e._implementation = this.i.b;
            this.i.b.externalObject = e;
        }
        return this.i.b.externalObject;
    }
    set oldWidth(v) {
        v == null ? this.i.b = null : this.i.b = v.i;
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let AccessibilityRow = /*@__PURE__*/ (() => {
    class AccessibilityRow extends Base {
        constructor() {
            super(...arguments);
            this.i = null;
            this.e = 0;
            this.d = 0;
            this.f = null;
            this.a = new FastIterationDictionary$2(Number_$type, CellModel.$, 0);
        }
        get c() {
            return this.e + 2;
        }
        get b() {
            return this.a;
        }
        j(a, b) {
            if (!this.b.d(a.k.az)) {
                this.b.s(a.k.az, a);
            }
            else if (this.b.item(a.k.az) != a) {
                this.b.item(a.k.az, a);
            }
            b.setAttribute("id", this.g(a));
            b.setAttribute("role", this.f);
            if (a.k.au) {
                b.setAttribute("aria-colindex", "1");
                b.setAttribute("aria-colspan", this.d.toString());
            }
            else {
                b.setAttribute("aria-colindex", (a.k.az + 1).toString());
            }
            if (a.b8 == 1) {
                b.setAttribute("aria-selected", "true");
            }
            else {
                b.setAttribute("aria-selected", "false");
            }
            if (a.k.g) {
                if (a.m == 1) {
                    b.setAttribute("aria-sort", "ascending");
                }
                else if (a.m == 2) {
                    b.setAttribute("aria-sort", "descending");
                }
                else {
                    b.setAttribute("aria-sort", "none");
                }
            }
            if (a.ar) {
                b.setAttribute("aria-expanded", a.az ? "true" : "false");
            }
        }
        h() {
            let a = "";
            for (let b = 0; b < this.d; b++) {
                if (this.b.d(b)) {
                    if (a.length > 0) {
                        a += " ";
                    }
                    let c = this.g(this.b.item(b));
                    a += c;
                }
            }
            if (a == "") {
                for (let d = 0; d < this.b.o.count; d++) {
                    let e = this.b.o._inner[d];
                    let f = this.b.item(e);
                    let g = this.g(f);
                    a += g;
                }
            }
            return a;
        }
        k() {
            this.b.u();
        }
        g(a) {
            if (a.k.ag || (a.k.aj && !a.k.h)) {
                if (a.k.au) {
                    return "cellid" + this.i + "r" + this.c + "span";
                }
                return "cellid" + this.i + "r" + this.c + "c" + a.k.az;
            }
            return null;
        }
        l(a, b) {
            a.getNativeElement().removeAttribute(b);
        }
    }
    AccessibilityRow.$t = /*@__PURE__*/ markType(AccessibilityRow, 'AccessibilityRow');
    return AccessibilityRow;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let DataGridAccessibilityLayoutPanel = /*@__PURE__*/ (() => {
    class DataGridAccessibilityLayoutPanel extends DataGridCellLayoutPanel {
        constructor(a, b, c) {
            super(a, b, c);
            this.a0 = new List$1(DomWrapper_$type, 0);
            this.a1 = new Stack$1(DomWrapper_$type);
            this.ay = new FastIterationDictionary$2(Number_$type, AccessibilityRow.$, 0);
            this.aw = null;
            this.a5 = null;
            this.a5 = DataGridAccessibilityLayoutPanel.a4.toString();
            DataGridAccessibilityLayoutPanel.a4++;
        }
        refresh(a, b) {
            super.refresh(a, b);
            if (this.rootElement != null) {
                let c = a.ck();
                let d = a.br.count;
                if (a.cl > 0) {
                    c++;
                }
                this.rootElement.setAttribute("role", "grid");
                this.rootElement.setAttribute("aria-rowcount", c.toString());
                this.rootElement.setAttribute("aria-colcount", d.toString());
                this.rootElement.setAttribute("aria-multiselectable", "true");
            }
        }
        af(a, b) {
            if (this.az(a)) {
                if (a.k.g) {
                    if (this.aw == null) {
                        this.aw = new AccessibilityRow();
                        this.aw.i = this.a5;
                        this.aw.e = -1;
                        this.aw.d = this.f.br.count;
                        this.aw.f = "columnheader";
                    }
                    this.aw.j(a, b);
                }
                else {
                    let c = a.k.g ? -1 : a.k.w;
                    let d = this.ax(c);
                    if (d == null) {
                        d = new AccessibilityRow();
                        d.i = this.a5;
                        d.e = c;
                        d.d = this.f.br.count;
                        d.f = "gridcell";
                        this.ay.s(c, d);
                    }
                    d.j(a, b);
                }
            }
        }
        ah(a, b) {
            if (this.az(a)) {
                this.a9(b, "id");
                this.a9(b, "role");
                this.a9(b, "aria-colindex");
                this.a9(b, "aria-selected");
                if (a.k.g) {
                    this.a9(b, "aria-sort");
                }
            }
        }
        ag(a, b) {
            if (this.az(a)) {
                this.af(a, b);
            }
        }
        al() {
            this.a6();
            if (this.aw != null) {
                this.a8(this.aw);
                this.aw.k();
            }
            let a = this.ay.q;
            for (let b = 0; b < a.count; b++) {
                let c = a._inner[b];
                this.a8(c);
                c.k();
            }
            this.aw = null;
            this.ay.u();
        }
        ax(a) {
            let b = this.ay.o;
            for (let c = 0; c < b.count; c++) {
                let d = b._inner[c];
                let e = this.ay.item(d);
                if (e != null && e.e == a) {
                    return e;
                }
            }
            return null;
        }
        a2() {
            if (this.a1.f > 0) {
                return this.a1.e();
            }
            return null;
        }
        a3(a) {
            for (let b = 0; b < this.a0.count; b++) {
                let c = parseInt(this.a0._inner[b].getAttribute("aria-rowindex"));
                if (c == a.c) {
                    return this.a0._inner[b];
                }
            }
            return null;
        }
        a8(a) {
            let b = this.a3(a);
            if (b != null) {
                b.setAttribute("aria-owns", a.h());
                return;
            }
            b = this.a2();
            if (b != null) {
                b.setAttribute("aria-rowindex", a.c.toString());
                b.setAttribute("aria-owns", a.h());
                this.a7(a, b);
                return;
            }
            b = this.s.createElement("div");
            b.setAttribute("role", "row");
            b.setAttribute("aria-rowindex", a.c.toString());
            b.setAttribute("aria-owns", a.h());
            this.a7(a, b);
        }
        a6() {
            for (let a = 0; a < this.a0.count; a++) {
                let b = this.a0._inner[a];
                let c = parseInt(b.getAttribute("aria-rowindex")) - 2;
                if (c != -1 && !this.ay.d(c)) {
                    b.remove();
                    this.a1.h(b);
                    this.a0.removeAt(a);
                    a--;
                }
            }
        }
        a7(a, b) {
            let c = -1;
            for (let d = 0; d < this.a0.count; d++) {
                let e = parseInt(this.a0._inner[d].getAttribute("aria-rowindex"));
                if (a.c < e) {
                    c = d;
                    break;
                }
            }
            if (c != -1) {
                let native_ = this.element.getNativeElement();
                native_.insertBefore(b.getNativeElement(), this.a0._inner[c].getNativeElement());
                this.a0.insert(c, b);
            }
            else {
                this.element.append(b);
                this.a0.add(b);
            }
        }
        az(a) {
            return a.k.ag || (a.k.aj && !a.k.h);
        }
        a9(a, b) {
            a.getNativeElement().removeAttribute(b);
        }
    }
    DataGridAccessibilityLayoutPanel.$t = /*@__PURE__*/ markType(DataGridAccessibilityLayoutPanel, 'DataGridAccessibilityLayoutPanel', DataGridCellLayoutPanel.$);
    DataGridAccessibilityLayoutPanel.a4 = 0;
    return DataGridAccessibilityLayoutPanel;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

class IgrGridCellEditStartedEventArgs {
    createImplementation() {
        return new GridCellEditStartedEventArgs();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    /**
     * Gets the column of the cell that started editing.
    */
    get column() {
        if (this.i.a == null) {
            return null;
        }
        if (!this.i.a.externalObject) {
            let e = IgrColumn._createFromInternal(this.i.a);
            if (e) {
                e._implementation = this.i.a;
            }
            this.i.a.externalObject = e;
        }
        return this.i.a.externalObject;
    }
    set column(v) {
        v == null ? this.i.a = null : this.i.a = v.i;
    }
    /**
     * Gets the row index of the cell that started editing.
    */
    get row() {
        return this.i.b;
    }
    set row(v) {
        this.i.b = +v;
    }
    /**
     * Gets the row item.
    */
    get item() {
        return this.i.item;
    }
    set item(v) {
        this.i.item = v;
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

class IgrGridCellEditEndedEventArgs {
    createImplementation() {
        return new GridCellEditEndedEventArgs();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    /**
     * Gets the column of the cell that ended editing.
    */
    get column() {
        if (this.i.a == null) {
            return null;
        }
        if (!this.i.a.externalObject) {
            let e = IgrColumn._createFromInternal(this.i.a);
            if (e) {
                e._implementation = this.i.a;
            }
            this.i.a.externalObject = e;
        }
        return this.i.a.externalObject;
    }
    set column(v) {
        v == null ? this.i.a = null : this.i.a = v.i;
    }
    /**
     * Gets the row index of the cell that ended editing.
    */
    get row() {
        return this.i.b;
    }
    set row(v) {
        this.i.b = +v;
    }
    /**
     * Gets the row item.
    */
    get item() {
        return this.i.item;
    }
    set item(v) {
        this.i.item = v;
    }
}

class IgrGridRowEditStartedEventArgs {
    createImplementation() {
        return new GridRowEditStartedEventArgs();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    /**
     * Gets the row that started editing.
    */
    get row() {
        return this.i.a;
    }
    set row(v) {
        this.i.a = +v;
    }
    /**
     * Gets the row item.
    */
    get item() {
        return this.i.item;
    }
    set item(v) {
        this.i.item = v;
    }
}

class IgrGridRowEditEndedEventArgs {
    createImplementation() {
        return new GridRowEditEndedEventArgs();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    /**
     * Gets the row that ended editing.
    */
    get row() {
        return this.i.a;
    }
    set row(v) {
        this.i.a = +v;
    }
    /**
     * Gets the row item.
    */
    get item() {
        return this.i.item;
    }
    set item(v) {
        this.i.item = v;
    }
}

let GridStylingDefaults = {};
class IgrDataGrid extends Component {
    constructor(props) {
        super(props);
        this.contentColumns = [];
        /**
         * The columns actually present in the grid. Do not directly modify this array.
         * This array's contents can be modified by causing React to reproject the child content.
         * Or adding and removing columns from the manual columns collection on the columns property.
         */
        this.combinedColumns = [];
        this._columns = null;
        this._disableManualColumnSync = false;
        this._scrollerStyle = 1 /* Fading */;
        this._columnsAdapter = null;
        this._renderer = null;
        this._scroller = null;
        this._dragger = null;
        this._wrapper = null;
        this._grid = null;
        this._dataSource = null;
        this._insetLeft = 0;
        this._insetTop = 0;
        this._insetRight = 0;
        this._insetBottom = 0;
        this._selectedItems = null;
        this._selectedKeys = null;
        this._selectedCells = null;
        this._selectedCellRanges = null;
        this._pinnedItems = null;
        this._pinnedKeys = null;
        this._responsiveStates = null;
        this._actualColumns = null;
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        this._filterExpressionsChanging = null;
        this._filterExpressionsChanging_wrapped = null;
        this._filterExpressionsChanged = null;
        this._filterExpressionsChanged_wrapped = null;
        this._cellPreviewPointerDown = null;
        this._cellPreviewPointerDown_wrapped = null;
        this._cellPreviewPointerUp = null;
        this._cellPreviewPointerUp_wrapped = null;
        this._cellPointerDown = null;
        this._cellPointerDown_wrapped = null;
        this._cellPointerUp = null;
        this._cellPointerUp_wrapped = null;
        this._cellClicked = null;
        this._cellClicked_wrapped = null;
        this._sortDescriptionsChanged = null;
        this._sortDescriptionsChanged_wrapped = null;
        this._groupDescriptionsChanged = null;
        this._groupDescriptionsChanged_wrapped = null;
        this._columnHiddenChanged = null;
        this._columnHiddenChanged_wrapped = null;
        this._columnPinnedChanged = null;
        this._columnPinnedChanged_wrapped = null;
        this._cellValueChanging = null;
        this._cellValueChanging_wrapped = null;
        this._dataCommitted = null;
        this._dataCommitted_wrapped = null;
        this._dataCommitting = null;
        this._dataCommitting_wrapped = null;
        this._sizeChanged = null;
        this._sizeChanged_wrapped = null;
        this._actualColumnsChanged = null;
        this._actualColumnsChanged_wrapped = null;
        this._columnsAutoGenerated = null;
        this._columnsAutoGenerated_wrapped = null;
        this._selectedItemsChanged = null;
        this._selectedItemsChanged_wrapped = null;
        this._selectedKeysChanged = null;
        this._selectedKeysChanged_wrapped = null;
        this._selectedCellsChanged = null;
        this._selectedCellsChanged_wrapped = null;
        this._activeCellChanged = null;
        this._activeCellChanged_wrapped = null;
        this._selectedCellRangesChanged = null;
        this._selectedCellRangesChanged_wrapped = null;
        this._columnWidthChanged = null;
        this._columnWidthChanged_wrapped = null;
        this._cellEditStarted = null;
        this._cellEditStarted_wrapped = null;
        this._cellEditEnded = null;
        this._cellEditEnded_wrapped = null;
        this._rowEditStarted = null;
        this._rowEditStarted_wrapped = null;
        this._rowEditEnded = null;
        this._rowEditEnded_wrapped = null;
        this._actualPrimaryKeyChange = null;
        this._actualPrimaryKeyChange_wrapped = null;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._getMainRef = this._getMainRef.bind(this);
        this._getFilterDialog = this._getFilterDialog.bind(this);
        this._contentChildrenManager = new ContentChildrenManager((ch) => ch.props.name || ch.key || ch.props.field, (ch) => ch.name || ch.key || ch.field, () => this._updateContentChildren());
        let useCanvas = false;
        if (props.useCanvas) {
            this.useCanvas = true;
            useCanvas = true;
        }
        if (props.useAccessibility) {
            this.useAccessibility = true;
        }
        if (document) {
            this._container = document.createElement("div");
            this._container.style.display = "block";
            this._container.style.width = "100%";
            this._container.style.height = "100%";
            this._container.style.boxSizing = "border-box";
        }
        var root;
        root = this._container;
        this.requestRender = this.requestRender.bind(this);
        this._portalManager = new PortalManager("filterDialog", this.requestRender);
        this._portalManager.disableContentPortal = true;
        this._renderer = new ReactRenderer(root, document, true, DataGridStylingDefaults, this._portalManager);
        this._wrapper = this._renderer;
        this._implementation = new Grid();
        var grid = this.i;
        this._grid = grid;
        this._columnsAdapter = new CollectionAdapter(this.contentColumns, this.i.columns, this.combinedColumns, (c) => c.i, (i) => {
            i._provideRenderer(this._wrapper);
            if (this._container && this._container.parentElement) {
                i._styling(this._container, this, this);
            }
        }, (i) => { i._provideRenderer(null); }, (i) => { return i.name || i.field; });
        grid.externalGrid = new GridExternalWrapper(this);
        grid.tickProvider = new BrowserTickProvider(this._renderer);
        grid.platformPixelConverter = new BrowserPixelConverter();
        if (this.useAccessibility) {
            this._contentLayout = new DataGridAccessibilityLayoutPanel(this._renderer, new DataGridPresenterManager(this._grid, false), window.devicePixelRatio);
        }
        else {
            this._contentLayout = new DataGridCellLayoutPanel(this._renderer, new DataGridPresenterManager(this._grid, useCanvas), window.devicePixelRatio);
        }
        grid.renderingEngine = this._contentLayout;
        grid.viewportManager = new DataGridViewportManager(this);
        grid.delayedExecutionManager = new DataGridDelayedExecutionManager(this._renderer);
        grid.propertySetter = new DataGridPropertySetter();
        //grid.provideContainer(ren);
        let scroller = new Scroller();
        scroller.scrollbarStyle = this.scrollbarStyle;
        this._scroller = scroller;
        this._scroller.keyboardListener = new DataGridScrollerKeyboardListener(grid);
        scroller.provideContainer(this._renderer);
        this._content = (this._contentLayout.element.getNativeElement());
        scroller.provideContent(new ReactWrapper(this._content, this._renderer));
        scroller.onScrolling = () => this.onScroll();
        scroller.onScrollStart = () => this.onScrollStart();
        scroller.onScrollStop = () => this.onScrollStop();
        scroller.viewportWidth = this._container.clientWidth;
        scroller.viewportHeight = this._container.clientHeight;
        grid.dragger = new Dragger();
        grid.dragger.provideContainer(this._renderer);
        grid.dragger.viewportWidth = this._container.clientWidth;
        grid.dragger.viewportHeight = this._container.clientHeight;
        this.initializeProperties();
        scroller.verticalTrackStartInset = this.actualHeaderHeight;
        this._renderer.addSizeWatcher(() => {
            this.containerResized();
        });
    }
    _insertExternalColumnAtIndex(index, column) {
        //let contentCount = this.contentColumns.length;
        let contentCount = this._columnsAdapter.actualContent.length;
        this.columns.insert(index - contentCount, column);
    }
    _removeExternalColumn(column) {
        let ind = -1;
        for (let i = 0; i < this.columns.count; i++) {
            if (this.columns.item(i) === column) {
                ind = i;
                break;
            }
        }
        if (ind >= 0) {
            this.columns.removeAt(ind);
        }
    }
    _updateContentChildren() {
        this.contentColumns.length = 0;
        let contentChildrenActual = this._contentChildrenManager.contentChildrenActual;
        for (let i = 0; i < contentChildrenActual.length; i++) {
            if ((Column.$type).isAssignableFrom(contentChildrenActual[i].i.$type)) {
                if (!contentChildrenActual[i]._iniailizedMarkup) {
                    contentChildrenActual[i]._iniailizedMarkup = true;
                    contentChildrenActual[i].isFromMarkup = true;
                }
                this.contentColumns.push(contentChildrenActual[i]);
            }
        }
        if (this._columnsAdapter !== null) {
            this._columnsAdapter.notifyContentChanged();
        }
    }
    get actualDataSource() {
        return this.i.actualDataSource;
    }
    _getMainRef(ref) {
        this._elRef = ref;
        this.i.syncBorder();
        this._contentLayout.rootElement = this._elRef;
    }
    _getFilterDialog(ref) {
        this._filterDialogRef = ref;
    }
    _ensureColumnsAreManual() {
        this._disableManualColumnSync = true;
        this._columnsAdapter.shiftContentToManual(this.columns, (i) => i.isFromMarkup = false);
        this._disableManualColumnSync = false;
    }
    /**
     * A collection or manually added columns for the grid.
    */
    get columns() {
        if (this._columns === null) {
            let coll = new IgrGridColumnCollection();
            let inner = coll._innerColl;
            inner.addListener((sender, e) => {
                if (this._disableManualColumnSync) {
                    return;
                }
                switch (e.action) {
                    case NotifyCollectionChangedAction.Add:
                        this._columnsAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));
                        break;
                    case NotifyCollectionChangedAction.Remove:
                        this._columnsAdapter.removeManualItemAt(e.oldStartingIndex);
                        break;
                    case NotifyCollectionChangedAction.Replace:
                        this._columnsAdapter.removeManualItemAt(e.oldStartingIndex);
                        this._columnsAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));
                        break;
                    case NotifyCollectionChangedAction.Reset:
                        this._columnsAdapter.clearManualItems();
                        break;
                }
            });
            this._columns = coll;
        }
        return this._columns;
    }
    set height(value) {
        this._height = value;
        if (this._elRef) {
            this._elRef.style.height = value;
            this.containerResized();
        }
    }
    get height() {
        return this._height;
    }
    set width(value) {
        this._width = value;
        if (this._elRef) {
            this._elRef.style.width = value;
            this.containerResized();
        }
    }
    get width() {
        return this._width;
    }
    set useCanvas(value) {
        this._useCanvas = ensureBool(value);
    }
    get useCanvas() {
        return this._useCanvas;
    }
    set useAccessibility(value) {
        this._useAccessibility = ensureBool(value);
    }
    get useAccessibility() {
        return this._useAccessibility;
    }
    get scrollbarStyle() {
        return this._scrollerStyle;
    }
    set scrollbarStyle(style) {
        this._scrollerStyle = ensureEnum(ScrollbarStyle_$type, style);
        if (this._scroller) {
            this._scroller.scrollbarStyle = this._scrollerStyle;
        }
    }
    render() {
        // if (!this._childrenDiffer(this.props.children)) {
        // 	let div = React.createElement("div", {
        // 		ref: (ref) => {
        // 			this._elRef = ref;
        // 		},
        // 		children: this.props.children
        // 	});
        // 	return div;
        // } else {
        let children = this._contentChildrenManager.getChildren(this.props.children);
        this._portalManager.onRender(children);
        let div = createElement("div", {
            className: "ig-data-grid igr-data-grid",
            ref: this._getMainRef,
            style: { boxSizing: "border-box", overflow: "hidden" },
            children: children
        });
        return div;
        //}
    }
    componentDidMount() {
        this._elRef.style.width = this._width ? this._width : "";
        this._elRef.style.height = this._height ? this._height : "";
        this._elRef.appendChild(this._container);
        this.containerResized();
        this.initializeContent();
    }
    createImplementation() {
        let test = Grid;
        return new Grid();
    }
    ngOnInit() {
    }
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    requestRender() {
        this.setState({});
    }
    _focusScroller() {
        this._scroller.focus();
    }
    _setDefaultCursor() {
        if (this._elRef.style.cursor !== "") {
            this._elRef.style.cursor = "";
        }
    }
    _setResizeCursor() {
        if (this._elRef.style.cursor !== "col-resize") {
            this._elRef.style.cursor = "col-resize";
        }
    }
    _setHandCursor() {
        if (this._elRef.style.cursor !== "grabbing") {
            this._elRef.style.cursor = "grabbing";
        }
    }
    _setBorder(borderColor, borderLeft, borderTop, borderRight, borderBottom, radiusTopLeft, radiusTopRight, radiusBottomLeft, radiusBottomRight) {
        if (this._elRef) {
            if (borderLeft !== 0 || borderTop !== 0 || borderRight !== 0 || borderBottom !== 0) {
                this._elRef.style.borderStyle = "solid";
                this._elRef.style.borderColor = borderColor;
                this._elRef.style.borderTopWidth = borderTop + "px";
                this._elRef.style.borderRightWidth = borderRight + "px";
                this._elRef.style.borderBottomWidth = borderBottom + "px";
                this._elRef.style.borderLeftWidth = borderLeft + "px";
                this._elRef.style.borderTopLeftRadius = radiusTopLeft + "px";
                this._elRef.style.borderTopRightRadius = radiusTopRight + "px";
                this._elRef.style.borderBottomLeftRadius = radiusBottomLeft + "px";
                this._elRef.style.borderBottomRightRadius = radiusBottomRight + "px";
            }
            else {
                this._elRef.style.borderStyle = "none";
            }
        }
    }
    _setScrollerVerticalTrackInset(inset) {
        this._scroller.verticalTrackStartInset = inset;
    }
    initializeContent() {
        // supports themes or custom properties set in CSS 
        let prev = this._grid.columnPropertyUpdatingAnimationMode;
        this._grid.columnPropertyUpdatingAnimationMode = ColumnPropertyUpdatingAnimationMode.None;
        this._styling(this._container, this);
        this._grid.columnPropertyUpdatingAnimationMode = prev;
        this._updateContentChildren();
        prev = this._grid.columnPropertyUpdatingAnimationMode;
        this._grid.columnPropertyUpdatingAnimationMode = ColumnPropertyUpdatingAnimationMode.None;
        for (let i = 0; i < this.actualColumns.count; i++) {
            let c = this.actualColumns.item(i);
            c._styling(this._container, this, this);
        }
        this._grid.columnPropertyUpdatingAnimationMode = prev;
        this._grid.itemsSource = this._dataSource;
    }
    componentWillUnmount() {
        //this._grid.destroy();
        this._wrapper.destroy();
    }
    initializeProperties() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    containerResized() {
        var width = this._container.clientWidth;
        var height = this._container.clientHeight;
        this._scroller.viewportWidth = width;
        this._scroller.viewportHeight = height;
        this._grid.dragger.viewportWidth = width;
        this._grid.dragger.viewportHeight = height;
        this._grid.onSizeChanged(width, height);
        if (this._grid.model.actualVisibleRegion.isEmpty &&
            width > 0 && height > 0) {
            this._grid.setViewport(0, 0, width, height);
        }
        else {
            this.onScroll();
        }
    }
    ;
    refreshContentSize() {
        if (this._content != null) {
            var width = this._grid.model.absoluteWidth;
            var height = this._grid.model.absoluteHeight;
            if (this._scroller != null) {
                this._scroller.contentWidth = width;
                this._scroller.contentHeight = height;
            }
        }
    }
    onScroll() {
        let top = this._scroller.scrollTop;
        let left = this._scroller.scrollLeft;
        let width = this._scroller.viewportWidth;
        let height = this._scroller.viewportHeight;
        //console.log("top:" + top);
        this._grid.setViewport(left, top, left + width, top + height);
    }
    onScrollStart() {
        this._grid.notifyScrollStart();
    }
    onScrollStop() {
        this._grid.notifyScrollStop();
    }
    scrollTo(x, y) {
        this._scroller.scrollTo(x, y);
        //let width = this._scroller.viewportWidth;
        //let height = this._scroller.viewportHeight;
        //this._grid.setViewport(x, y, x + width, y + height);
    }
    set dataSource(value) {
        this._dataSource = value;
        if (this._grid != null) {
            this._grid.itemsSource = this._dataSource;
        }
    }
    get dataSource() {
        return this._dataSource;
    }
    forColumnsWithPropertyPath(propertyPath, callback) {
        for (let i = 0; i < this.i.actualColumns.count; i++) {
            let col = this.i.actualColumns.item(i).externalObject;
            if (col.field == propertyPath) {
                callback(col);
            }
        }
    }
    /**
     * Gets or sets the default column width to use if a column as no local width.
     * */
    get defaultColumnWidth() {
        let ext = this.i.defaultColumnWidth.externalObject;
        if (!ext) {
            ext = new IgrColumnWidth();
            ext._implementation = this.i.defaultColumnWidth;
        }
        return ext;
    }
    set defaultColumnWidth(value) {
        if (typeof value == "string") {
            let int = ColumnWidth.parse(value);
            let ext = new IgrColumnWidth();
            ext._implementation = int;
            value = ext;
        }
        this.i.defaultColumnWidth = value.i;
    }
    /**
     * Gets or sets the amount of left inset space to use around the grid content.
    */
    get insetLeft() {
        return this._insetLeft;
    }
    set insetLeft(v) {
        this._insetLeft = +v;
        let inset = new Thickness(1, this._insetLeft, this._insetTop, this._insetRight, this._insetBottom);
        this.i.inset = inset;
    }
    /**
     * Gets or sets the amount of top inset space to use around the grid content.
    */
    get insetTop() {
        return this._insetTop;
    }
    set insetTop(v) {
        this._insetTop = +v;
        let inset = new Thickness(1, this._insetLeft, this._insetTop, this._insetRight, this._insetBottom);
        this.i.inset = inset;
    }
    /**
     * Gets or sets the amount of right inset space to use around the grid content.
    */
    get insetRight() {
        return this._insetLeft;
    }
    set insetRight(v) {
        this._insetRight = +v;
        let inset = new Thickness(1, this._insetLeft, this._insetTop, this._insetRight, this._insetBottom);
        this.i.inset = inset;
    }
    /**
     * Gets or sets the amount of bottom inset space to use around the grid content.
    */
    get insetBottom() {
        return this._insetBottom;
    }
    set insetBottom(v) {
        this._insetBottom = +v;
        let inset = new Thickness(1, this._insetLeft, this._insetTop, this._insetRight, this._insetBottom);
        this.i.inset = inset;
    }
    /**
 * Gets or sets the type of column resizing to use.
*/
    get columnResizingMode() {
        return this.i.bu;
    }
    set columnResizingMode(v) {
        this.i.bu = ensureEnum(ColumnResizingMode_$type, v);
    }
    /**
     * Gets or sets the type column moving to use.
    */
    get columnMovingMode() {
        return this.i.bg;
    }
    set columnMovingMode(v) {
        this.i.bg = ensureEnum(ColumnMovingMode_$type, v);
    }
    /**
     * Gets or sets whether the row will highlight when hovered.
    */
    get isRowHoverEnabled() {
        return this.i.h4;
    }
    set isRowHoverEnabled(v) {
        this.i.h4 = ensureBool(v);
    }
    /**
     * Gets or sets the background color for rows when hovered.
    */
    get rowHoverBackground() {
        return brushToString(this.i.u7);
    }
    set rowHoverBackground(v) {
        this.i.u7 = stringToBrush(v);
    }
    /**
     * Gets or sets the border color for rows being edited.
    */
    get editRowBorder() {
        return brushToString(this.i.uz);
    }
    set editRowBorder(v) {
        this.i.uz = stringToBrush(v);
    }
    get editRowBorderWidthBottom() {
        return this.i.v0 ? this.i.v0.b : NaN;
    }
    set editRowBorderWidthBottom(v) {
        this.ensureEditRowBorderWidth();
        this.i.v0.b = +v;
        this.i.v0 = this.i.v0;
    }
    get editRowBorderWidthLeft() {
        return this.i.v0 ? this.i.v0.c : NaN;
    }
    set editRowBorderWidthLeft(v) {
        this.ensureEditRowBorderWidth();
        this.i.v0.c = +v;
        this.i.v0 = this.i.v0;
    }
    get editRowBorderWidthRight() {
        return this.i.v0 ? this.i.v0.d : NaN;
    }
    set editRowBorderWidthRight(v) {
        this.ensureEditRowBorderWidth();
        this.i.v0.d = +v;
        this.i.v0 = this.i.v0;
    }
    get editRowBorderWidthTop() {
        return this.i.v0 ? this.i.v0.e : NaN;
    }
    set editRowBorderWidthTop(v) {
        this.ensureEditRowBorderWidth();
        this.i.v0.e = +v;
        this.i.v0 = this.i.v0;
    }
    ensureEditRowBorderWidth() {
        if (this.i.v0) {
            return;
        }
        this.i.v0 = new Thickness(2);
    }
    /**
     * Gets or sets the header type used for sectioning off groups of rows.
    */
    get sectionHeader() {
        if (this.i.ey == null) {
            return null;
        }
        if (!this.i.ey.externalObject) {
            let e = IgrSectionHeader._createFromInternal(this.i.ey);
            if (e) {
                e._implementation = this.i.ey;
            }
            this.i.ey.externalObject = e;
        }
        return this.i.ey.externalObject;
    }
    set sectionHeader(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.ey = null : this.i.ey = v.i;
    }
    /**
     * Gets or sets the cell definition used for summary rows at the root level.
    */
    get summaryRowRoot() {
        if (this.i.e8 == null) {
            return null;
        }
        if (!this.i.e8.externalObject) {
            let e = IgrSummaryRowRoot._createFromInternal(this.i.e8);
            if (e) {
                e._implementation = this.i.e8;
            }
            this.i.e8.externalObject = e;
        }
        return this.i.e8.externalObject;
    }
    set summaryRowRoot(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.e8 = null : this.i.e8 = v.i;
    }
    /**
     * Gets or sets the cell definition used for summary rows at the section level.
    */
    get summaryRowSection() {
        if (this.i.fa == null) {
            return null;
        }
        if (!this.i.fa.externalObject) {
            let e = IgrSummaryRowSection._createFromInternal(this.i.fa);
            if (e) {
                e._implementation = this.i.fa;
            }
            this.i.fa.externalObject = e;
        }
        return this.i.fa.externalObject;
    }
    set summaryRowSection(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.fa = null : this.i.fa = v.i;
    }
    /**
     * Gets or sets the row seperator settings.
    */
    get rowSeparator() {
        if (this.i.eu == null) {
            return null;
        }
        if (!this.i.eu.externalObject) {
            let e = IgrRowSeparator._createFromInternal(this.i.eu);
            if (e) {
                e._implementation = this.i.eu;
            }
            this.i.eu.externalObject = e;
        }
        return this.i.eu.externalObject;
    }
    set rowSeparator(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.eu = null : this.i.eu = v.i;
    }
    /**
     * Gets or sets the header row seperator settings.
    */
    get headerRowSeparator() {
        if (this.i.d2 == null) {
            return null;
        }
        if (!this.i.d2.externalObject) {
            let e = IgrHeaderRowSeparator._createFromInternal(this.i.d2);
            if (e) {
                e._implementation = this.i.d2;
            }
            this.i.d2.externalObject = e;
        }
        return this.i.d2.externalObject;
    }
    set headerRowSeparator(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.d2 = null : this.i.d2 = v.i;
    }
    /**
     * Gets or sets the header seperator settings.
    */
    get headerSeparator() {
        if (this.i.d4 == null) {
            return null;
        }
        if (!this.i.d4.externalObject) {
            let e = IgrHeaderSeparator._createFromInternal(this.i.d4);
            if (e) {
                e._implementation = this.i.d4;
            }
            this.i.d4.externalObject = e;
        }
        return this.i.d4.externalObject;
    }
    set headerSeparator(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.d4 = null : this.i.d4 = v.i;
    }
    /**
     * Gets or sets the column resizing seperator settings.
    */
    get columnResizingSeparator() {
        if (this.i.bw == null) {
            return null;
        }
        if (!this.i.bw.externalObject) {
            let e = IgrColumnResizingSeparator._createFromInternal(this.i.bw);
            if (e) {
                e._implementation = this.i.bw;
            }
            this.i.bw.externalObject = e;
        }
        return this.i.bw.externalObject;
    }
    set columnResizingSeparator(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.bw = null : this.i.bw = v.i;
    }
    /**
     * Gets or sets the column resizing seperator settings.
    */
    get columnMovingSeparator() {
        if (this.i.bi == null) {
            return null;
        }
        if (!this.i.bi.externalObject) {
            let e = IgrColumnMovingSeparator._createFromInternal(this.i.bi);
            if (e) {
                e._implementation = this.i.bi;
            }
            this.i.bi.externalObject = e;
        }
        return this.i.bi.externalObject;
    }
    set columnMovingSeparator(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.bi = null : this.i.bi = v.i;
    }
    /**
     * Gets or sets the pinned area separator settings.
    */
    get pinnedAreaSeparator() {
        if (this.i.ei == null) {
            return null;
        }
        if (!this.i.ei.externalObject) {
            let e = IgrPinnedAreaSeparator._createFromInternal(this.i.ei);
            if (e) {
                e._implementation = this.i.ei;
            }
            this.i.ei.externalObject = e;
        }
        return this.i.ei.externalObject;
    }
    set pinnedAreaSeparator(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.ei = null : this.i.ei = v.i;
    }
    /**
     * Gets or sets the desired properties the grid will automatically generate columns for.
    */
    get autoGenerateDesiredProperties() {
        return this.i.f;
    }
    set autoGenerateDesiredProperties(v) {
        this.i.f = v;
    }
    /**
     * Gets or sets the desired properties for the data source to load. If specified the data source may decide to constrain the properties it fetches to these properties and must make sure that at least those properties are loaded, rather than the default behavior for that data source.
    */
    get dataSourceDesiredProperties() {
        return this.i.g;
    }
    set dataSourceDesiredProperties(v) {
        this.i.g = v;
    }
    /**
     * Gets or sets the display density to use for the grid.
    */
    get density() {
        return this.i.fg;
    }
    set density(v) {
        this.i.fg = ensureEnum(ControlDisplayDensity_$type, v);
    }
    /**
     * Gets the actual height for the rows in the grid.
    */
    get actualRowHeight() {
        return this.i.kl;
    }
    set actualRowHeight(v) {
        this.i.kl = +v;
    }
    /**
     * Gets or sets the height to use for the rows in the grid. If not set the grid will
     * use the default value for the set display density.
    */
    get rowHeight() {
        return this.i.le;
    }
    set rowHeight(v) {
        this.i.le = +v;
    }
    /**
     * Gets or sets the default minimum width to use on all columns. Ignored if NaN.
    */
    get defaultColumnMinWidth() {
        return this.i.jn;
    }
    set defaultColumnMinWidth(v) {
        this.i.jn = +v;
    }
    /**
     * Gets the height used for the header row.
    */
    get actualHeaderHeight() {
        return this.i.kk;
    }
    set actualHeaderHeight(v) {
        this.i.kk = +v;
    }
    /**
     * Gets or sets the height to use for the header row.
    */
    get headerHeight() {
        return this.i.k6;
    }
    set headerHeight(v) {
        this.i.k6 = +v;
    }
    /**
     * Returns/sets the action to take when a column header is clicked.
    */
    get headerClickAction() {
        return this.i.d0;
    }
    set headerClickAction(v) {
        this.i.d0 = ensureEnum(HeaderClickAction_$type, v);
    }
    /**
     * Gets or sets the type of edit mode
    */
    get editMode() {
        return this.i.cf;
    }
    set editMode(v) {
        this.i.cf = ensureEnum(EditModeType_$type, v);
    }
    /**
     * Gets or sets the type of click action required to enter edit mode.
    */
    get editModeClickAction() {
        return this.i.cd;
    }
    set editModeClickAction(v) {
        this.i.cd = ensureEnum(EditModeClickAction_$type, v);
    }
    /**
     * Configures whether or not the grid will autogenerate columns when the data source is set.
    */
    get autoGenerateColumns() {
        return this.i.g3;
    }
    set autoGenerateColumns(v) {
        this.i.g3 = ensureBool(v);
    }
    /**
     * Sets or gets the height to use for the row separators.
    */
    get rowSeparatorHeight() {
        return this.i.lg;
    }
    set rowSeparatorHeight(v) {
        this.i.lg = +v;
    }
    /**
     * Configures whether or not place holders are used for cells who do not have their data yet.
    */
    get isPlaceholderRenderingEnabled() {
        return this.i.hy;
    }
    set isPlaceholderRenderingEnabled(v) {
        this.i.hy = ensureBool(v);
    }
    /**
     * Sets or gets the Column Adding Animation mode to use.
    */
    get columnAddingAnimationMode() {
        return this.i.bz;
    }
    set columnAddingAnimationMode(v) {
        this.i.bz = ensureEnum(ColumnShowingAnimationMode_$type, v);
    }
    /**
     * Sets or gets the Column Property Updating Animation mode to use.
    */
    get columnPropertyUpdatingAnimationMode() {
        return this.i.columnPropertyUpdatingAnimationMode;
    }
    set columnPropertyUpdatingAnimationMode(v) {
        this.i.columnPropertyUpdatingAnimationMode = ensureEnum(ColumnPropertyUpdatingAnimationMode_$type, v);
    }
    /**
     * Sets or gets the cell data loaded animation mode to use.
    */
    get cellDataLoadedAnimationMode() {
        return this.i.al;
    }
    set cellDataLoadedAnimationMode(v) {
        this.i.al = ensureEnum(CellDataLoadedAnimationMode_$type, v);
    }
    /**
     * Sets or gets the row selection animation mode to use.
    */
    get rowSelectionAnimationMode() {
        return this.i.es;
    }
    set rowSelectionAnimationMode(v) {
        this.i.es = ensureEnum(RowSelectionAnimationMode_$type, v);
    }
    /**
     * Sets or gets the row hover animation mode to use.
    */
    get rowHoverAnimationMode() {
        return this.i.ep;
    }
    set rowHoverAnimationMode(v) {
        this.i.ep = ensureEnum(RowHoverAnimationMode_$type, v);
    }
    /**
     * Sets or gets the cell selection animation mode to use.
    */
    get cellSelectionAnimationMode() {
        return this.i.aw;
    }
    set cellSelectionAnimationMode(v) {
        this.i.aw = ensureEnum(CellSelectionAnimationMode_$type, v);
    }
    /**
     * Sets or gets the default animation settings for the grid.
    */
    get animationSettings() {
        if (this.i.cm == null) {
            return null;
        }
        if (!this.i.cm.externalObject) {
            let e = new IgrGridAnimationSettings();
            e._implementation = this.i.cm;
            this.i.cm.externalObject = e;
        }
        return this.i.cm.externalObject;
    }
    set animationSettings(v) {
        v == null ? this.i.cm = null : this.i.cm = v.i;
    }
    /**
     * Sets or gets the column resizing animation mode to use. Only applies when resizing in Deferred mode.
    */
    get columnResizingAnimationMode() {
        return this.i.br;
    }
    set columnResizingAnimationMode(v) {
        this.i.br = ensureEnum(ColumnResizingAnimationMode_$type, v);
    }
    /**
     * Sets or gets the column showing animation mode to use.
    */
    get columnShowingAnimationMode() {
        return this.i.b0;
    }
    set columnShowingAnimationMode(v) {
        this.i.b0 = ensureEnum(ColumnShowingAnimationMode_$type, v);
    }
    /**
     * Sets or gets the column moving animation mode to use.
    */
    get columnMovingAnimationMode() {
        return this.i.bd;
    }
    set columnMovingAnimationMode(v) {
        this.i.bd = ensureEnum(ColumnMovingAnimationMode_$type, v);
    }
    /**
     * Sets or gets the column hiding animation mode to use.
    */
    get columnHidingAnimationMode() {
        return this.i.ba;
    }
    set columnHidingAnimationMode(v) {
        this.i.ba = ensureEnum(ColumnHidingAnimationMode_$type, v);
    }
    /**
     * Sets or gets the column exchanging animation mode to use.
    */
    get columnExchangingAnimationMode() {
        return this.i.a4;
    }
    set columnExchangingAnimationMode(v) {
        this.i.a4 = ensureEnum(ColumnExchangingAnimationMode_$type, v);
    }
    /**
     * Sets or gets the grid selection mode.
    */
    get selectionMode() {
        return this.i.dt;
    }
    set selectionMode(v) {
        this.i.dt = ensureEnum(GridSelectionMode_$type, v);
    }
    /**
     * Sets or gets the grid selection mode.
    */
    get activationMode() {
        return this.i.ch;
    }
    set activationMode(v) {
        this.i.ch = ensureEnum(GridActivationMode_$type, v);
    }
    /**
     * Sets or gets how selection behaves in the grid.
    */
    get selectionBehavior() {
        return this.i.dr;
    }
    set selectionBehavior(v) {
        this.i.dr = ensureEnum(GridSelectionBehavior_$type, v);
    }
    /**
     * Gets which items are currently selected in the grid. Collection can be updated to programatically select items.
    */
    get selectedItems() {
        if (this._selectedItems === null) {
            let coll = new IgrGridSelectedItemsCollection();
            let innerColl = this.i.ad;
            if (!innerColl) {
                innerColl = new GridSelectedItemsCollection();
            }
            this._selectedItems = coll._fromInner(innerColl);
        }
        return this._selectedItems;
    }
    set selectedItems(v) {
        if (this._selectedItems !== null) {
            this._selectedItems._setSyncTarget(null);
            this._selectedItems = null;
        }
        let coll = new IgrGridSelectedItemsCollection();
        this._selectedItems = coll._fromOuter(v);
        let syncColl = new SyncableObservableCollection$1(Base.$type);
        let innerColl = this.i.ad;
        if (!innerColl) {
            innerColl = new GridSelectedItemsCollection();
        }
        syncColl._inner = innerColl;
        syncColl.clear();
        this._selectedItems._setSyncTarget(syncColl);
    }
    /**
     * Gets which primary key values are currently selected in the grid. Collection can be updated to programatically select items.
    */
    get selectedKeys() {
        if (this._selectedKeys === null) {
            let coll = new IgrGridSelectedKeysCollection();
            let innerColl = this.i.ah;
            if (!innerColl) {
                innerColl = new GridSelectedKeysCollection();
            }
            this._selectedKeys = coll._fromInner(innerColl);
        }
        return this._selectedKeys;
    }
    set selectedKeys(v) {
        if (this._selectedKeys !== null) {
            this._selectedKeys._setSyncTarget(null);
            this._selectedKeys = null;
        }
        let coll = new IgrGridSelectedKeysCollection();
        this._selectedKeys = coll._fromOuter(v);
        let syncColl = new SyncableObservableCollection$1(PrimaryKeyValue.$type);
        let innerColl = this.i.ah;
        if (!innerColl) {
            innerColl = new GridSelectedKeysCollection();
        }
        syncColl._inner = innerColl;
        syncColl.clear();
        this._selectedKeys._setSyncTarget(syncColl);
    }
    /**
     * Gets which cells are currently selected in the grid. Collection can be updated to programatically select cells.
    */
    get selectedCells() {
        if (this._selectedCells === null) {
            let coll = new IgrGridSelectedCellsCollection();
            let innerColl = this.i.dm;
            if (!innerColl) {
                innerColl = new GridSelectedCellsCollection();
            }
            this._selectedCells = coll._fromInner(innerColl);
        }
        return this._selectedCells;
    }
    set selectedCells(v) {
        if (this._selectedCells !== null) {
            this._selectedCells._setSyncTarget(null);
            this._selectedCells = null;
        }
        let coll = new IgrGridSelectedCellsCollection();
        this._selectedCells = coll._fromOuter(v);
        let syncColl = new SyncableObservableCollection$1(CellKey.$type);
        let innerColl = this.i.dm;
        if (!innerColl) {
            innerColl = new GridSelectedCellsCollection();
        }
        syncColl._inner = innerColl;
        syncColl.clear();
        this._selectedCells._setSyncTarget(syncColl);
    }
    /**
     * Gets which cell ranges are currently selected in the grid. Collection can be updated to programatically select cells.
    */
    get selectedCellRanges() {
        if (this._selectedCellRanges === null) {
            let coll = new IgrGridSelectedCellRangesCollection();
            let innerColl = this.i.dj;
            if (!innerColl) {
                innerColl = new GridSelectedCellRangesCollection();
            }
            this._selectedCellRanges = coll._fromInner(innerColl);
        }
        return this._selectedCellRanges;
    }
    set selectedCellRanges(v) {
        if (this._selectedCellRanges !== null) {
            this._selectedCellRanges._setSyncTarget(null);
            this._selectedCellRanges = null;
        }
        let coll = new IgrGridSelectedCellRangesCollection();
        this._selectedCellRanges = coll._fromOuter(v);
        let syncColl = new SyncableObservableCollection$1(CellRange.$type);
        let innerColl = this.i.dj;
        if (!innerColl) {
            innerColl = new GridSelectedCellRangesCollection();
        }
        syncColl._inner = innerColl;
        syncColl.clear();
        this._selectedCellRanges._setSyncTarget(syncColl);
    }
    /**
     * Gets which items are currently pinned in the grid. Collection can be updated to programatically pin items.
    */
    get pinnedItems() {
        if (this._pinnedItems === null) {
            let coll = new IgrGridSelectedItemsCollection();
            let innerColl = this.i.ac;
            if (!innerColl) {
                innerColl = new GridSelectedItemsCollection();
            }
            this._pinnedItems = coll._fromInner(innerColl);
        }
        return this._pinnedItems;
    }
    set pinnedItems(v) {
        if (this._pinnedItems !== null) {
            this._pinnedItems._setSyncTarget(null);
            this._pinnedItems = null;
        }
        let coll = new IgrGridSelectedItemsCollection();
        this._pinnedItems = coll._fromOuter(v);
        let syncColl = new SyncableObservableCollection$1(Base.$type);
        let innerColl = this.i.ac;
        if (!innerColl) {
            innerColl = new GridSelectedItemsCollection();
        }
        syncColl._inner = innerColl;
        syncColl.clear();
        this._pinnedItems._setSyncTarget(syncColl);
    }
    /**
     * Gets which primary keys are currently pinned in the grid. Collection can be updated to programatically pin items.
    */
    get pinnedKeys() {
        if (this._pinnedKeys === null) {
            let coll = new IgrGridSelectedKeysCollection();
            let innerColl = this.i.ag;
            if (!innerColl) {
                innerColl = new GridSelectedKeysCollection();
            }
            this._pinnedKeys = coll._fromInner(innerColl);
        }
        return this._pinnedKeys;
    }
    set pinnedKeys(v) {
        if (this._pinnedKeys !== null) {
            this._pinnedKeys._setSyncTarget(null);
            this._pinnedKeys = null;
        }
        let coll = new IgrGridSelectedKeysCollection();
        this._pinnedKeys = coll._fromOuter(v);
        let syncColl = new SyncableObservableCollection$1(PrimaryKeyValue.$type);
        let innerColl = this.i.ag;
        if (!innerColl) {
            innerColl = new GridSelectedKeysCollection();
        }
        syncColl._inner = innerColl;
        syncColl.clear();
        this._pinnedKeys._setSyncTarget(syncColl);
    }
    /**
     * Gets or sets whether to show the column options UI in the headers for columns.
    */
    get isColumnOptionsEnabled() {
        return this.i.hn;
    }
    set isColumnOptionsEnabled(v) {
        this.i.hn = ensureBool(v);
    }
    /**
     * Gets or sets if group rows will stick to the top of the grid.
    */
    get isGroupRowSticky() {
        return this.i.hu;
    }
    set isGroupRowSticky(v) {
        this.i.hu = ensureBool(v);
    }
    /**
     * Gets or sets if header separators are rendered.
    */
    get isHeaderSeparatorVisible() {
        return this.i.hv;
    }
    set isHeaderSeparatorVisible(v) {
        this.i.hv = ensureBool(v);
    }
    /**
     * Gets or sets the default background color to use for content cells when a row is in a selected state
    */
    get cellSelectedBackground() {
        return brushToString(this.i.ut);
    }
    set cellSelectedBackground(v) {
        this.i.ut = stringToBrush(v);
    }
    /**
     * Gets or sets the default background color to use for section header cells when a row is in a selected state
    */
    get sectionHeaderSelectedBackground() {
        return brushToString(this.i.vd);
    }
    set sectionHeaderSelectedBackground(v) {
        this.i.vd = stringToBrush(v);
    }
    /**
     * Gets or sets the default background color to use for summary cells at the root level.
    */
    get summaryRootBackground() {
        return brushToString(this.i.vg);
    }
    set summaryRootBackground(v) {
        this.i.vg = stringToBrush(v);
    }
    /**
     * Gets or sets the default background color to use for summary cells at the section level.
    */
    get summarySectionBackground() {
        return brushToString(this.i.vk);
    }
    set summarySectionBackground(v) {
        this.i.vk = stringToBrush(v);
    }
    /**
     * Gets or sets the default opacity to use for pinned rows
    */
    get pinnedRowOpacity() {
        return this.i.jp;
    }
    set pinnedRowOpacity(v) {
        this.i.jp = +v;
    }
    /**
     * Gets or sets the font to use for cells that have been edited.
    */
    get editTextStyle() {
        if (this.i.fq == null) {
            return null;
        }
        return this.i.fq.fontString;
    }
    set editTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.fq = fi;
    }
    /**
     * Gets or sets the default opacity for unsaved cell edits.
    */
    get editOpacity() {
        return this.i.jo;
    }
    set editOpacity(v) {
        this.i.jo = +v;
    }
    /**
     * Gets or sets the text color for unsaved deleted rows.
    */
    get deletedTextColor() {
        return brushToString(this.i.uy);
    }
    set deletedTextColor(v) {
        this.i.uy = stringToBrush(v);
    }
    /**
     * Gets or sets the default color to use for sticky rows
    */
    get stickyRowBackground() {
        return brushToString(this.i.vf);
    }
    set stickyRowBackground(v) {
        this.i.vf = stringToBrush(v);
    }
    /**
     * Gets or sets the default color to use for pinned rows
    */
    get pinnedRowBackground() {
        return brushToString(this.i.u6);
    }
    set pinnedRowBackground(v) {
        this.i.u6 = stringToBrush(v);
    }
    /**
     * Gets or sets the default color to use for the last sticky row
    */
    get lastStickyRowBackground() {
        return brushToString(this.i.u5);
    }
    set lastStickyRowBackground(v) {
        this.i.u5 = stringToBrush(v);
    }
    /**
     * Gets or sets the position of the active cell.
    */
    get activeCell() {
        if (this.i.cw == null) {
            return null;
        }
        if (!this.i.cw.externalObject) {
            let e = new IgrGridCellPosition();
            e._implementation = this.i.cw;
            this.i.cw.externalObject = e;
        }
        return this.i.cw.externalObject;
    }
    set activeCell(v) {
        v == null ? this.i.cw = null : this.i.cw = v.i;
    }
    /**
     * Gets or sets the default background color to use for content cells
    */
    get cellBackground() {
        return brushToString(this.i.us);
    }
    set cellBackground(v) {
        this.i.us = stringToBrush(v);
    }
    /**
     * Gets or sets the default text color to use for content cells
    */
    get cellTextColor() {
        return brushToString(this.i.uu);
    }
    set cellTextColor(v) {
        this.i.uu = stringToBrush(v);
    }
    /**
     * Gets or sets the default text color to use for content cells
    */
    get headerSortIndicatorColor() {
        return brushToString(this.i.u3);
    }
    set headerSortIndicatorColor(v) {
        this.i.u3 = stringToBrush(v);
    }
    /**
     * Gets or sets the default render style for sort indicators in header cells.
    */
    get headerSortIndicatorStyle() {
        return this.i.e2;
    }
    set headerSortIndicatorStyle(v) {
        this.i.e2 = ensureEnum(SortIndicatorStyle_$type, v);
    }
    /**
     * Gets or sets the font to use for content cells
    */
    get cellTextStyle() {
        if (this.i.fp == null) {
            return null;
        }
        return this.i.fp.fontString;
    }
    set cellTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.fp = fi;
    }
    /**
     * Gets or sets the default background color to use for section header cells
    */
    get sectionHeaderBackground() {
        return brushToString(this.i.vc);
    }
    set sectionHeaderBackground(v) {
        this.i.vc = stringToBrush(v);
    }
    /**
     * Gets or sets the default text color to use for section header cells
    */
    get sectionHeaderTextColor() {
        return brushToString(this.i.ve);
    }
    set sectionHeaderTextColor(v) {
        this.i.ve = stringToBrush(v);
    }
    /**
     * Gets or sets the font to use for section header cells
    */
    get sectionHeaderTextStyle() {
        if (this.i.fs == null) {
            return null;
        }
        return this.i.fs.fontString;
    }
    set sectionHeaderTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.fs = fi;
    }
    /**
     * Gets or sets the font to use for summary labels at the root level.
    */
    get summaryRootLabelTextStyle() {
        if (this.i.ft == null) {
            return null;
        }
        return this.i.ft.fontString;
    }
    set summaryRootLabelTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.ft = fi;
    }
    /**
     * Gets or sets the font to use for summary labels at the section level.
    */
    get summarySectionLabelTextStyle() {
        if (this.i.fv == null) {
            return null;
        }
        return this.i.fv.fontString;
    }
    set summarySectionLabelTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.fv = fi;
    }
    /**
     * Gets or sets the default text color to use for summary cells at the root level.
    */
    get summaryRootValueTextColor() {
        return brushToString(this.i.vj);
    }
    set summaryRootValueTextColor(v) {
        this.i.vj = stringToBrush(v);
    }
    /**
     * Gets or sets the font to use for summary values at the root level.
    */
    get summaryRootValueTextStyle() {
        if (this.i.fu == null) {
            return null;
        }
        return this.i.fu.fontString;
    }
    set summaryRootValueTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.fu = fi;
    }
    /**
     * Gets or sets the font to use for summary values at the section level.
    */
    get summarySectionValueTextStyle() {
        if (this.i.fw == null) {
            return null;
        }
        return this.i.fw.fontString;
    }
    set summarySectionValueTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.fw = fi;
    }
    /**
     * Gets or sets the default text color to use for summary cells at the section level.
    */
    get summarySectionValueTextColor() {
        return brushToString(this.i.vn);
    }
    set summarySectionValueTextColor(v) {
        this.i.vn = stringToBrush(v);
    }
    /**
     * Gets or sets the default text color to use for summary labels in summary cells at the root level.
    */
    get summaryRootLabelTextColor() {
        return brushToString(this.i.vh);
    }
    set summaryRootLabelTextColor(v) {
        this.i.vh = stringToBrush(v);
    }
    /**
     * Gets or sets the default text color to use for summary labels in summary cells at the section level.
    */
    get summarySectionLabelTextColor() {
        return brushToString(this.i.vl);
    }
    set summarySectionLabelTextColor(v) {
        this.i.vl = stringToBrush(v);
    }
    /**
     * Gets or sets the default background color to use for summary cells at the root level.
    */
    get summaryRootSelectedBackground() {
        return brushToString(this.i.vi);
    }
    set summaryRootSelectedBackground(v) {
        this.i.vi = stringToBrush(v);
    }
    /**
     * Gets or sets the default background color to use for summary cells at the section level.
    */
    get summarySectionSelectedBackground() {
        return brushToString(this.i.vm);
    }
    set summarySectionSelectedBackground(v) {
        this.i.vm = stringToBrush(v);
    }
    /**
     * Gets or sets the width of the pinned area separators.
    */
    get pinnedAreaSeparatorWidth() {
        return this.i.lc;
    }
    set pinnedAreaSeparatorWidth(v) {
        this.i.lc = +v;
    }
    /**
     * Gets or sets the width of the header separators.
    */
    get headerSeparatorWidth() {
        return this.i.la;
    }
    set headerSeparatorWidth(v) {
        this.i.la = +v;
    }
    /**
     * Gets or sets the default background color to use for header separators.
    */
    get headerSeparatorBackground() {
        return brushToString(this.i.u2);
    }
    set headerSeparatorBackground(v) {
        this.i.u2 = stringToBrush(v);
    }
    /**
     * Gets or sets the default background color to use for header cells
    */
    get headerBackground() {
        return brushToString(this.i.u0);
    }
    set headerBackground(v) {
        this.i.u0 = stringToBrush(v);
    }
    /**
     * Gets or sets the default text color to use for header cells
    */
    get headerTextColor() {
        return brushToString(this.i.u4);
    }
    set headerTextColor(v) {
        this.i.u4 = stringToBrush(v);
    }
    /**
     * Gets or sets the font to use for header cells
    */
    get headerTextStyle() {
        if (this.i.fr == null) {
            return null;
        }
        return this.i.fr.fontString;
    }
    set headerTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.fr = fi;
    }
    /**
     * Gets or sets the default background color to use for row separators
    */
    get rowSeparatorBackground() {
        return brushToString(this.i.u8);
    }
    set rowSeparatorBackground(v) {
        this.i.u8 = stringToBrush(v);
    }
    get headerRowSeparatorBackground() {
        return brushToString(this.i.u1);
    }
    set headerRowSeparatorBackground(v) {
        this.i.u1 = stringToBrush(v);
    }
    /**
     * Gets or sets the default sticky row background color to use for row separators
    */
    get rowSeparatorStickyRowBackground() {
        return brushToString(this.i.vb);
    }
    set rowSeparatorStickyRowBackground(v) {
        this.i.vb = stringToBrush(v);
    }
    /**
     * Gets or sets the default last sticky row background color to use for row separators
    */
    get rowSeparatorLastStickyRowBackground() {
        return brushToString(this.i.u9);
    }
    set rowSeparatorLastStickyRowBackground(v) {
        this.i.u9 = stringToBrush(v);
    }
    /**
     * Gets or sets the pinned row background color to use for row separators
    */
    get rowSeparatorPinnedRowBackground() {
        return brushToString(this.i.va);
    }
    set rowSeparatorPinnedRowBackground(v) {
        this.i.va = stringToBrush(v);
    }
    /**
     * Sets or gets the width to use for the column resizing separator.
    */
    get columnResizingSeparatorWidth() {
        return this.i.kp;
    }
    set columnResizingSeparatorWidth(v) {
        this.i.kp = +v;
    }
    /**
     * Sets or gets the width to use for the column resizing separator.
    */
    get columnMovingSeparatorWidth() {
        return this.i.kn;
    }
    set columnMovingSeparatorWidth(v) {
        this.i.kn = +v;
    }
    /**
     * Gets or sets the default background color to use for column resizing separator.
    */
    get columnResizingSeparatorBackground() {
        return brushToString(this.i.ux);
    }
    set columnResizingSeparatorBackground(v) {
        this.i.ux = stringToBrush(v);
    }
    /**
     * Gets or sets the default background color to use for column moving separator.
    */
    get columnMovingSeparatorBackground() {
        return brushToString(this.i.uv);
    }
    set columnMovingSeparatorBackground(v) {
        this.i.uv = stringToBrush(v);
    }
    /**
     * Gets or sets if the section header content should be shifted into the normal column scrollable area when there are pinned columns
    */
    get shiftSectionContent() {
        return this.i.iv;
    }
    set shiftSectionContent(v) {
        this.i.iv = ensureBool(v);
    }
    /**
     * Gets or sets the column options icon alignment in header cells.
    */
    get columnOptionsIconAlignment() {
        return this.i.bk;
    }
    set columnOptionsIconAlignment(v) {
        this.i.bk = ensureEnum(ColumnOptionsIconAlignment_$type, v);
    }
    /**
     * Gets or sets the column options icon color in header cells.
    */
    get columnOptionsIconColor() {
        return brushToString(this.i.uw);
    }
    set columnOptionsIconColor(v) {
        this.i.uw = stringToBrush(v);
    }
    /**
     * Gets or sets how the column options icon will behave inside header cells.
    */
    get columnOptionsIconBehavior() {
        return this.i.bm;
    }
    set columnOptionsIconBehavior(v) {
        this.i.bm = ensureEnum(ColumnOptionsIconBehavior_$type, v);
    }
    /**
     * Gets or sets the border color around the grid.
    */
    get border() {
        return brushToString(this.i.border);
    }
    set border(v) {
        this.i.border = stringToBrush(v);
    }
    /**
     * Gets the actual border width.
    */
    get actualBorderWidth() {
        return this.i.vw;
    }
    set actualBorderWidth(v) {
        this.i.vw = v;
    }
    get borderWidthBottom() {
        return this.i.vx ? this.i.vx.b : NaN;
    }
    set borderWidthBottom(v) {
        this.ensureBorderWidth();
        this.i.vx.b = +v;
        this.i.vx = this.i.vx;
    }
    get borderWidthLeft() {
        return this.i.vx ? this.i.vx.c : NaN;
    }
    set borderWidthLeft(v) {
        this.ensureBorderWidth();
        this.i.vx.c = +v;
        this.i.vx = this.i.vx;
    }
    get borderWidthRight() {
        return this.i.vx ? this.i.vx.d : NaN;
    }
    set borderWidthRight(v) {
        this.ensureBorderWidth();
        this.i.vx.d = +v;
        this.i.vx = this.i.vx;
    }
    get borderWidthTop() {
        return this.i.vx ? this.i.vx.e : NaN;
    }
    set borderWidthTop(v) {
        this.ensureBorderWidth();
        this.i.vx.e = +v;
        this.i.vx = this.i.vx;
    }
    ensureBorderWidth() {
        if (this.i.vx) {
            return;
        }
        this.i.vx = new Thickness(2);
    }
    /**
     * Gets or sets if the grid should notify on programmatic selection changes as well as changes from the UI.
    */
    get notifyOnAllSelectionChanges() {
        return this.i.h7;
    }
    set notifyOnAllSelectionChanges(v) {
        this.i.h7 = ensureBool(v);
    }
    get cornerRadiusBottomRight() {
        return this.i.ts ? this.i.ts.b : NaN;
    }
    set cornerRadiusBottomRight(v) {
        this.ensureCornerRadius();
        this.i.ts.b = +v;
        this.i.ts = this.i.ts;
    }
    get cornerRadiusBottomLeft() {
        return this.i.ts ? this.i.ts.a : NaN;
    }
    set cornerRadiusBottomLeft(v) {
        this.ensureCornerRadius();
        this.i.ts.a = +v;
        this.i.ts = this.i.ts;
    }
    get cornerRadiusTopLeft() {
        return this.i.ts ? this.i.ts.c : NaN;
    }
    set cornerRadiusTopLeft(v) {
        this.ensureCornerRadius();
        this.i.ts.c = +v;
        this.i.ts = this.i.ts;
    }
    get cornerRadiusTopRight() {
        return this.i.ts ? this.i.ts.d : NaN;
    }
    set cornerRadiusTopRight(v) {
        this.ensureCornerRadius();
        this.i.ts.d = +v;
        this.i.ts = this.i.ts;
    }
    ensureCornerRadius() {
        if (this.i.ts) {
            return;
        }
        this.i.ts = new CornerRadius(2);
    }
    get actualCornerRadiusBottomRight() {
        return this.i.tq ? this.i.tq.b : NaN;
    }
    set actualCornerRadiusBottomRight(v) {
        this.ensureActualCornerRadius();
        this.i.tq.b = +v;
        this.i.tq = this.i.tq;
    }
    get actualCornerRadiusBottomLeft() {
        return this.i.tq ? this.i.tq.a : NaN;
    }
    set actualCornerRadiusBottomLeft(v) {
        this.ensureActualCornerRadius();
        this.i.tq.a = +v;
        this.i.tq = this.i.tq;
    }
    get actualCornerRadiusTopLeft() {
        return this.i.tq ? this.i.tq.c : NaN;
    }
    set actualCornerRadiusTopLeft(v) {
        this.ensureActualCornerRadius();
        this.i.tq.c = +v;
        this.i.tq = this.i.tq;
    }
    get actualCornerRadiusTopRight() {
        return this.i.tq ? this.i.tq.d : NaN;
    }
    set actualCornerRadiusTopRight(v) {
        this.ensureActualCornerRadius();
        this.i.tq.d = +v;
        this.i.tq = this.i.tq;
    }
    ensureActualCornerRadius() {
        if (this.i.tq) {
            return;
        }
        this.i.tq = new CornerRadius(2);
    }
    /**
     * Gets or sets whether the active cell style will be applied to cells when made active.
    */
    get isActiveCellStyleEnabled() {
        return this.i.he;
    }
    set isActiveCellStyleEnabled(v) {
        this.i.he = ensureBool(v);
    }
    /**
     * A set of states that can be applied to the columns of the grid based on available space.
    */
    get responsiveStates() {
        if (this._responsiveStates === null) {
            let coll = new IgrResponsiveStatesCollection();
            let innerColl = this.i.en;
            if (!innerColl) {
                innerColl = new ResponsiveStatesCollection();
            }
            this._responsiveStates = coll._fromInner(innerColl);
        }
        return this._responsiveStates;
    }
    set responsiveStates(v) {
        if (this._responsiveStates !== null) {
            this._responsiveStates._setSyncTarget(null);
            this._responsiveStates = null;
        }
        let coll = new IgrResponsiveStatesCollection();
        this._responsiveStates = coll._fromOuter(v);
        let syncColl = new SyncableObservableCollection$1(ResponsiveState.$type);
        let innerColl = this.i.en;
        if (!innerColl) {
            innerColl = new ResponsiveStatesCollection();
        }
        syncColl._inner = innerColl;
        syncColl.clear();
        this._responsiveStates._setSyncTarget(syncColl);
    }
    /**
     * Gets the region of the grid that is visible.
    */
    get actualVisibleRegion() {
        return fromRect(this.i.vp);
    }
    /**
     * Gets the current sort that is applied to the grid. Collection can be updated to modify the sort for the grid. Once sort descriptions are in this collection, the grid will no longer listen for changes on their properties.
    */
    get sortDescriptions() {
        if (this.i.b4 == null) {
            return null;
        }
        if (!this.i.b4.externalObject) {
            let e = new IgrColumnSortDescriptionCollection();
            e._implementation = this.i.b4;
            this.i.b4.externalObject = e;
        }
        return this.i.b4.externalObject;
    }
    /**
     * Gets the current grouping that is applied to the grid. Collection can be updated to modify the grouping for the grid. Once grouping descriptions are in this collection, the grid will no longer listen for changes on their properties.
    */
    get groupDescriptions() {
        if (this.i.a7 == null) {
            return null;
        }
        if (!this.i.a7.externalObject) {
            let e = new IgrColumnGroupDescriptionCollection();
            e._implementation = this.i.a7;
            this.i.a7.externalObject = e;
        }
        return this.i.a7.externalObject;
    }
    /**
     * Gets the current filter that is applied to the grid. Collection can be updated to modify the filter for the grid. Once filter expresisons are in this collection, the grid will no longer listen for changes on their properties.
    */
    get filterExpressions() {
        if (this.i.v == null) {
            return null;
        }
        if (!this.i.v.externalObject) {
            let e = new IgrFilterExpressionCollection();
            e._implementation = this.i.v;
            this.i.v.externalObject = e;
        }
        return this.i.v.externalObject;
    }
    /**
     * Gets the current summaries that are applied to the grid.
    */
    get summaryDescriptions() {
        if (this.i.b7 == null) {
            return null;
        }
        if (!this.i.b7.externalObject) {
            let e = new IgrColumnSummaryDescriptionCollection();
            e._implementation = this.i.b7;
            this.i.b7.externalObject = e;
        }
        return this.i.b7.externalObject;
    }
    /**
     * Gets or sets the scope which summaries are calculated for.
    */
    get summaryScope() {
        return this.i.t;
    }
    set summaryScope(v) {
        this.i.t = ensureEnum(DataSourceSummaryScope_$type, v);
    }
    /**
     * Gets or sets whether group headers are collapsable.
    */
    get isGroupCollapsable() {
        return this.i.hs;
    }
    set isGroupCollapsable(v) {
        this.i.hs = ensureBool(v);
    }
    /**
     * Gets or sets how group headers are displayed when there are multiple groups defined in the grid.
    */
    get groupHeaderDisplayMode() {
        return this.i.r;
    }
    set groupHeaderDisplayMode(v) {
        this.i.r = ensureEnum(DataSourceSectionHeaderDisplayMode_$type, v);
    }
    /**
     * Gets or sets whether groups are expanded or collapsed by default.
    */
    get isGroupExpandedDefault() {
        return this.i.ht;
    }
    set isGroupExpandedDefault(v) {
        this.i.ht = ensureBool(v);
    }
    /**
     * Gets or sets the display mode summaries will use inside groups.
    */
    get groupSummaryDisplayMode() {
        return this.i.dy;
    }
    set groupSummaryDisplayMode(v) {
        this.i.dy = ensureEnum(GroupSummaryDisplayMode_$type, v);
    }
    /**
     * Gets or sets whether to automatically accept edits or require explicit acceptance or rejections of edits
     * when handling the CellValueChanging or DataCommitting events.
     * When True, nothing is required on the part of the developer in order for edits to be accepted. In
     * order to validate and reject a user cell edit you must explicitly handle the CellValueChanging event
     * and call the RejectEdit method using the edit ID provided by the event. In order to reject a whole
     * commit you need to handle the DataComitting event and explicitly call the RejectCommit method using
     * the commit ID provided by the event.
     * When False, cell edits are not immediately accepted until you explicitly call the AcceptEdit method
     * using the edit ID provided by the CellValueChanging event. If you do not handle this event then edits
     * will be auto accepted.
    */
    get autoAcceptEdits() {
        return this.i.g2;
    }
    set autoAcceptEdits(v) {
        this.i.g2 = ensureBool(v);
    }
    /**
     * Sets or gets the user provided primary key to assume for the data. Certain functionality of the grid requires a way to uniquely identify items in order to work correctly.
     * If a primary key cannot be inferred from the data source, you may need to provide one here.
    */
    get primaryKey() {
        return this.i.l;
    }
    set primaryKey(v) {
        this.i.l = v;
    }
    /**
     * Gets either the inferred primary key from the data source, or the user provided primary key, if present. Represents the actual primary key that the grid will use in operations that require it.
    */
    get actualPrimaryKey() {
        return this.i.e;
    }
    set actualPrimaryKey(v) {
        this.i.e = v;
    }
    get actualColumns() {
        if (this._actualColumns === null) {
            let coll = new IgrGridColumnCollection();
            let innerColl = this.i.actualColumns;
            if (!innerColl) {
                innerColl = new GridColumnCollection();
            }
            this._actualColumns = coll._fromInner(innerColl);
        }
        return this._actualColumns;
    }
    set actualColumns(v) {
        if (this._actualColumns !== null) {
            this._actualColumns._setSyncTarget(null);
            this._actualColumns = null;
        }
        let coll = new IgrGridColumnCollection();
        this._actualColumns = coll._fromOuter(v);
        let syncColl = new SyncableObservableCollection$1(Column.$type);
        let innerColl = this.i.actualColumns;
        if (!innerColl) {
            innerColl = new GridColumnCollection();
        }
        syncColl._inner = innerColl;
        syncColl.clear();
        this._actualColumns._setSyncTarget(syncColl);
    }
    /**
     * Sets or gets whether the grid will react to sort changes.
    */
    get reactsToSortChanges() {
        return this.i.io;
    }
    set reactsToSortChanges(v) {
        this.i.io = ensureBool(v);
    }
    /**
     * Sets or gets whether the grid will react to group changes.
    */
    get reactsToGroupChanges() {
        return this.i.im;
    }
    set reactsToGroupChanges(v) {
        this.i.im = ensureBool(v);
    }
    /**
     * Sets or gets whether the grid will react to filter changes.
    */
    get reactsToFilterChanges() {
        return this.i.il;
    }
    set reactsToFilterChanges(v) {
        this.i.il = ensureBool(v);
    }
    /**
     * Gets whether an undo can be performed.
    */
    get canUndo() {
        return this.i.g9;
    }
    /**
     * Gets whether a redo can be performed.
    */
    get canRedo() {
        return this.i.g8;
    }
    /**
     * Gets whether a commit can be performed. False if there are any errors present
     * on any pending transactions.
    */
    get canCommit() {
        return this.i.g5;
    }
    findByName(name) {
        if (this.sectionHeader && this.sectionHeader.name && this.sectionHeader.name == name) {
            return this.sectionHeader;
        }
        if (this.summaryRowRoot && this.summaryRowRoot.name && this.summaryRowRoot.name == name) {
            return this.summaryRowRoot;
        }
        if (this.summaryRowSection && this.summaryRowSection.name && this.summaryRowSection.name == name) {
            return this.summaryRowSection;
        }
        if (this.rowSeparator && this.rowSeparator.name && this.rowSeparator.name == name) {
            return this.rowSeparator;
        }
        if (this.headerRowSeparator && this.headerRowSeparator.name && this.headerRowSeparator.name == name) {
            return this.headerRowSeparator;
        }
        if (this.headerSeparator && this.headerSeparator.name && this.headerSeparator.name == name) {
            return this.headerSeparator;
        }
        if (this.columnResizingSeparator && this.columnResizingSeparator.name && this.columnResizingSeparator.name == name) {
            return this.columnResizingSeparator;
        }
        if (this.columnMovingSeparator && this.columnMovingSeparator.name && this.columnMovingSeparator.name == name) {
            return this.columnMovingSeparator;
        }
        if (this.pinnedAreaSeparator && this.pinnedAreaSeparator.name && this.pinnedAreaSeparator.name == name) {
            return this.pinnedAreaSeparator;
        }
        if (this.animationSettings && this.animationSettings.name && this.animationSettings.name == name) {
            return this.animationSettings;
        }
        if (this.selectedKeys != null && this.selectedKeys.findByName && this.selectedKeys.findByName(name)) {
            return this.selectedKeys.findByName(name);
        }
        if (this.selectedCells != null && this.selectedCells.findByName && this.selectedCells.findByName(name)) {
            return this.selectedCells.findByName(name);
        }
        if (this.selectedCellRanges != null && this.selectedCellRanges.findByName && this.selectedCellRanges.findByName(name)) {
            return this.selectedCellRanges.findByName(name);
        }
        if (this.pinnedKeys != null && this.pinnedKeys.findByName && this.pinnedKeys.findByName(name)) {
            return this.pinnedKeys.findByName(name);
        }
        if (this.activeCell && this.activeCell.name && this.activeCell.name == name) {
            return this.activeCell;
        }
        if (this.responsiveStates != null && this.responsiveStates.findByName && this.responsiveStates.findByName(name)) {
            return this.responsiveStates.findByName(name);
        }
        if (this.sortDescriptions != null && this.sortDescriptions.findByName && this.sortDescriptions.findByName(name)) {
            return this.sortDescriptions.findByName(name);
        }
        if (this.groupDescriptions != null && this.groupDescriptions.findByName && this.groupDescriptions.findByName(name)) {
            return this.groupDescriptions.findByName(name);
        }
        if (this.filterExpressions != null && this.filterExpressions.findByName && this.filterExpressions.findByName(name)) {
            return this.filterExpressions.findByName(name);
        }
        if (this.summaryDescriptions != null && this.summaryDescriptions.findByName && this.summaryDescriptions.findByName(name)) {
            return this.summaryDescriptions.findByName(name);
        }
        if (this.actualColumns != null && this.actualColumns.findByName && this.actualColumns.findByName(name)) {
            return this.actualColumns.findByName(name);
        }
        if (this.columns != null && this.columns.findByName && this.columns.findByName(name)) {
            return this.columns.findByName(name);
        }
        return null;
    }
    get hasUserValues() {
        return this._hasUserValues;
    }
    __m(propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    }
    _styling(container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        let genericPrefix = "";
        let typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("DataGrid");
        let additionalPrefixes = [];
        let prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        let b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            let basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            let parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            let parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this.sectionHeader && this.sectionHeader._styling) {
            this.sectionHeader._styling(container, component, this);
        }
        if (this.summaryRowRoot && this.summaryRowRoot._styling) {
            this.summaryRowRoot._styling(container, component, this);
        }
        if (this.summaryRowSection && this.summaryRowSection._styling) {
            this.summaryRowSection._styling(container, component, this);
        }
        if (this.rowSeparator && this.rowSeparator._styling) {
            this.rowSeparator._styling(container, component, this);
        }
        if (this.headerRowSeparator && this.headerRowSeparator._styling) {
            this.headerRowSeparator._styling(container, component, this);
        }
        if (this.headerSeparator && this.headerSeparator._styling) {
            this.headerSeparator._styling(container, component, this);
        }
        if (this.columnResizingSeparator && this.columnResizingSeparator._styling) {
            this.columnResizingSeparator._styling(container, component, this);
        }
        if (this.columnMovingSeparator && this.columnMovingSeparator._styling) {
            this.columnMovingSeparator._styling(container, component, this);
        }
        if (this.pinnedAreaSeparator && this.pinnedAreaSeparator._styling) {
            this.pinnedAreaSeparator._styling(container, component, this);
        }
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    }
    getHitCell(x, y) {
        let iv = this.i.ap(x, y);
        return (iv == null ? null : iv.externalObject);
    }
    /**
     * Forces a refresh of the grid content.
    
    */
    refresh() {
        this.i.sk();
    }
    /**
     * Makes sure pending work has completed if the grid need to be synchronously examined.
    
    */
    flush() {
        this.i.p4();
    }
    notifyScrollStart() {
        this.i.notifyScrollStart();
    }
    notifyScrollStop() {
        this.i.notifyScrollStop();
    }
    exchangeColumn(newColumn, oldColumn) {
        this.i.p2((newColumn == null ? null : newColumn.i), (oldColumn == null ? null : oldColumn.i));
    }
    pinColumn(column, position) {
        this.i.sd((column == null ? null : column.i), (position == null ? null : position));
    }
    moveColumn(oldIndex, newIndex) {
        this.i.qf(oldIndex, newIndex);
    }
    /**
     * Moves a column to the left, if possible.
    
    * @param columnIndex  * The index of the column to move.
    */
    moveColumnLeft(columnIndex) {
        this.i.qg(columnIndex);
    }
    /**
     * Moves a column to the right, if possible.
    
    * @param columnIndex  * The index of the column to move.
    */
    moveColumnRight(columnIndex) {
        this.i.qh(columnIndex);
    }
    /**
     * Returns true if a column can be moved to the left of it's current position; otherwise false.
    
    * @param columnIndex  * The index of the column.
    */
    canMoveColumnLeft(columnIndex) {
        let iv = this.i.g6(columnIndex);
        return (iv);
    }
    /**
     * Returns true if a column can be moved to the right of it's current position; otherwise false.
    
    * @param columnIndex  * The index of the column.
    */
    canMoveColumnRight(columnIndex) {
        let iv = this.i.g7(columnIndex);
        return (iv);
    }
    /**
     * Exports visual information about the current state of the grid.
    
    */
    exportVisualModel() {
        let iv = this.i.lp();
        return (iv);
    }
    /**
     * Returns a serialized copy of the exported visual model
    
    */
    exportSerializedVisualModel() {
        let iv = this.i.nb();
        return (iv);
    }
    /**
     * Scrolls the grid to given row, by index
    
    * @param rowNumber  * The row index to scroll to.
    */
    scrollToRowByIndex(rowNumber) {
        this.i.s2(rowNumber);
    }
    /**
     * Scrolls the grid so that a row is the last visible, by index.
    
    * @param rowNumber  * The row index to scroll to.
    */
    scrollToLastRowByIndex(rowNumber) {
        this.i.s1(rowNumber);
    }
    /**
     * Scrolls to an item, if found.
    
    * @param item  * The item to scroll to.
    */
    scrollToItem(item) {
        let iv = this.i.it(item);
        return (iv);
    }
    scrollToPrimaryKey(key) {
        let iv = this.i.iu(key);
        return (iv);
    }
    /**
     * Scrolls the grid to given column, by index
    
    * @param columnNumber  * The column number to scroll to.
    */
    scrollToColumnByIndex(columnNumber) {
        this.i.sz(columnNumber);
    }
    /**
     * Gets the last visible index in the grid.
    
    */
    getLastVisibleIndex() {
        let iv = this.i.k2();
        return (iv);
    }
    /**
     * Gets the first visible index in the grid.
    
    */
    getFirstVisibleIndex() {
        let iv = this.i.ky();
        return (iv);
    }
    /**
     * Invalidates the bound data for the rows currently visible.
    
    */
    invalidateVisibleRows() {
        this.i.qe();
    }
    /**
     * Manually set the active responsive state of the grid.
    
    * @param name
    */
    setActiveResponsiveState(name) {
        this.i.s7(name);
    }
    notifySetItem(index, oldItem, newItem) {
        this.i.qp(index, oldItem, newItem);
    }
    /**
     * Manually notifies the grid's data source that the data it has bound to has been cleared and needs to be re-examined.
     * This should not be called if the data that the grid is bound to is already observable.
    
    */
    notifyClearItems() {
        this.i.qj();
    }
    notifyInsertItem(index, newItem) {
        this.i.ql(index, newItem);
    }
    notifyRemoveItem(index, oldItem) {
        this.i.qm(index, oldItem);
    }
    /**
     * Returns the data index of an item within the bound data source.
    
    * @param item  * The item from which to get the index.
    */
    dataIndexOfItem(item) {
        let iv = this.i.kr(item);
        return (iv);
    }
    dataIndexOfPrimaryKey(key) {
        let iv = this.i.ks(key);
        return (iv);
    }
    /**
     * Resolves the value of a specific cell.
    
    * @param cellKey  * The cell to resolve.
    */
    resolveCellValue(cellKey) {
        let iv = this.i.ls((cellKey == null ? null : cellKey.i));
        return (iv);
    }
    resolveCellValueFromPosition(row, column) {
        let iv = this.i.lt(row, column);
        return (iv);
    }
    /**
     * Gets the column that appears at the index specified. This is not the columns actual index in the
     * column's collection but the index for how it appears visually in the grid.
    
    * @param index  * The rendered index of the column.
    */
    getColumnAtRenderedIndex(index) {
        let iv = this.i.az(index);
        return (iv == null ? null : iv.externalObject);
    }
    /**
     * Gets the summary results for root level.
    
    */
    getRootSummaryResults() {
        let iv = this.i.j();
        return (iv);
    }
    /**
     * Gets the summary results for a specific section.
    
    */
    getSectionSummaryResults(sectionIndex) {
        let iv = this.i.k(sectionIndex);
        return (iv);
    }
    /**
     * Commits any edits that may exist in the datasource.
    
    */
    commitEdits() {
        this.i.px();
    }
    /**
     * Cancels any edits that may exist in the datasource.
    
    */
    cancelEdits() {
        this.i.pp();
    }
    /**
     * Accepts a specific commit to the datasource.
    
    * @param commitID  * The ID of the commit provided by the Committing event.
    */
    acceptCommit(commitID) {
        this.i.pi(commitID);
    }
    /**
     * Rejects a specific commit.
    
    * @param commitID  * The ID of the commit provided by the Committing event.
    */
    rejectCommit(commitID) {
        this.i.sn(commitID);
    }
    /**
     * Undo the last edit.
    
    */
    undo() {
        this.i.tf();
    }
    /**
     * Redo the last edit.
    
    */
    redo() {
        this.i.sj();
    }
    updatePropertyAtKey(key, propertyPath, value) {
        this.i.tk(key, propertyPath, value);
    }
    removeItemByKey(key) {
        this.i.ss(key);
    }
    /**
     * Removes an item by its instance.
    
    * @param item  * The item instance to remove.
    */
    removeItem(item) {
        this.i.sr(item);
    }
    /**
     * Accept a pending edit turning it into a real edit.
    
    * @param editID  * The ID of the edit. Provided by the CellValueChanging event.
    */
    acceptEdit(editID) {
        this.i.pj(editID);
    }
    /**
     * Reject a pending edit.
    
    * @param editID  * The ID of the edit. Provided by the CellValueChanging event.
    */
    rejectEdit(editID) {
        this.i.so(editID);
    }
    setEditError(editID, errorMessage) {
        this.i.s9(editID, errorMessage);
    }
    get filterExpressionsChanging() {
        return this._filterExpressionsChanging;
    }
    set filterExpressionsChanging(ev) {
        if (this._filterExpressionsChanging_wrapped !== null) {
            this.i.filterExpressionsChanging = delegateRemove(this.i.filterExpressionsChanging, this._filterExpressionsChanging_wrapped);
            this._filterExpressionsChanging_wrapped = null;
            this._filterExpressionsChanging = null;
        }
        this._filterExpressionsChanging = ev;
        this._filterExpressionsChanging_wrapped = (o, e) => {
            let outerArgs = new IgrGridFilterExpressionsEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeFilterExpressionsChanging) {
                this.beforeFilterExpressionsChanging(this, outerArgs);
            }
            if (this._filterExpressionsChanging) {
                this._filterExpressionsChanging(this, outerArgs);
            }
        };
        this.i.filterExpressionsChanging = delegateCombine(this.i.filterExpressionsChanging, this._filterExpressionsChanging_wrapped);
    }
    get filterExpressionsChanged() {
        return this._filterExpressionsChanged;
    }
    set filterExpressionsChanged(ev) {
        if (this._filterExpressionsChanged_wrapped !== null) {
            this.i.filterExpressionsChanged = delegateRemove(this.i.filterExpressionsChanged, this._filterExpressionsChanged_wrapped);
            this._filterExpressionsChanged_wrapped = null;
            this._filterExpressionsChanged = null;
        }
        this._filterExpressionsChanged = ev;
        this._filterExpressionsChanged_wrapped = (o, e) => {
            let outerArgs = new IgrGridFilterExpressionsEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeFilterExpressionsChanged) {
                this.beforeFilterExpressionsChanged(this, outerArgs);
            }
            if (this._filterExpressionsChanged) {
                this._filterExpressionsChanged(this, outerArgs);
            }
        };
        this.i.filterExpressionsChanged = delegateCombine(this.i.filterExpressionsChanged, this._filterExpressionsChanged_wrapped);
    }
    /**
     * Previews that a pointer is down on a cell.
    */
    get cellPreviewPointerDown() {
        return this._cellPreviewPointerDown;
    }
    set cellPreviewPointerDown(ev) {
        if (this._cellPreviewPointerDown_wrapped !== null) {
            this.i.cellPreviewPointerDown = delegateRemove(this.i.cellPreviewPointerDown, this._cellPreviewPointerDown_wrapped);
            this._cellPreviewPointerDown_wrapped = null;
            this._cellPreviewPointerDown = null;
        }
        this._cellPreviewPointerDown = ev;
        this._cellPreviewPointerDown_wrapped = (o, e) => {
            let outerArgs = new IgrGridCellEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeCellPreviewPointerDown) {
                this.beforeCellPreviewPointerDown(this, outerArgs);
            }
            if (this._cellPreviewPointerDown) {
                this._cellPreviewPointerDown(this, outerArgs);
            }
        };
        this.i.cellPreviewPointerDown = delegateCombine(this.i.cellPreviewPointerDown, this._cellPreviewPointerDown_wrapped);
    }
    /**
     * Previews that a pointer is up on a cell.
    */
    get cellPreviewPointerUp() {
        return this._cellPreviewPointerUp;
    }
    set cellPreviewPointerUp(ev) {
        if (this._cellPreviewPointerUp_wrapped !== null) {
            this.i.cellPreviewPointerUp = delegateRemove(this.i.cellPreviewPointerUp, this._cellPreviewPointerUp_wrapped);
            this._cellPreviewPointerUp_wrapped = null;
            this._cellPreviewPointerUp = null;
        }
        this._cellPreviewPointerUp = ev;
        this._cellPreviewPointerUp_wrapped = (o, e) => {
            let outerArgs = new IgrGridCellEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeCellPreviewPointerUp) {
                this.beforeCellPreviewPointerUp(this, outerArgs);
            }
            if (this._cellPreviewPointerUp) {
                this._cellPreviewPointerUp(this, outerArgs);
            }
        };
        this.i.cellPreviewPointerUp = delegateCombine(this.i.cellPreviewPointerUp, this._cellPreviewPointerUp_wrapped);
    }
    /**
     * Indicates a pointer is down on a cell.
    */
    get cellPointerDown() {
        return this._cellPointerDown;
    }
    set cellPointerDown(ev) {
        if (this._cellPointerDown_wrapped !== null) {
            this.i.cellPointerDown = delegateRemove(this.i.cellPointerDown, this._cellPointerDown_wrapped);
            this._cellPointerDown_wrapped = null;
            this._cellPointerDown = null;
        }
        this._cellPointerDown = ev;
        this._cellPointerDown_wrapped = (o, e) => {
            let outerArgs = new IgrGridCellEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeCellPointerDown) {
                this.beforeCellPointerDown(this, outerArgs);
            }
            if (this._cellPointerDown) {
                this._cellPointerDown(this, outerArgs);
            }
        };
        this.i.cellPointerDown = delegateCombine(this.i.cellPointerDown, this._cellPointerDown_wrapped);
    }
    /**
     * Indicates a pointer is up on a cell.
    */
    get cellPointerUp() {
        return this._cellPointerUp;
    }
    set cellPointerUp(ev) {
        if (this._cellPointerUp_wrapped !== null) {
            this.i.cellPointerUp = delegateRemove(this.i.cellPointerUp, this._cellPointerUp_wrapped);
            this._cellPointerUp_wrapped = null;
            this._cellPointerUp = null;
        }
        this._cellPointerUp = ev;
        this._cellPointerUp_wrapped = (o, e) => {
            let outerArgs = new IgrGridCellEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeCellPointerUp) {
                this.beforeCellPointerUp(this, outerArgs);
            }
            if (this._cellPointerUp) {
                this._cellPointerUp(this, outerArgs);
            }
        };
        this.i.cellPointerUp = delegateCombine(this.i.cellPointerUp, this._cellPointerUp_wrapped);
    }
    /**
     * Called when a cell is clicked.
    */
    get cellClicked() {
        return this._cellClicked;
    }
    set cellClicked(ev) {
        if (this._cellClicked_wrapped !== null) {
            this.i.cellClicked = delegateRemove(this.i.cellClicked, this._cellClicked_wrapped);
            this._cellClicked_wrapped = null;
            this._cellClicked = null;
        }
        this._cellClicked = ev;
        this._cellClicked_wrapped = (o, e) => {
            let outerArgs = new IgrGridCellEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeCellClicked) {
                this.beforeCellClicked(this, outerArgs);
            }
            if (this._cellClicked) {
                this._cellClicked(this, outerArgs);
            }
        };
        this.i.cellClicked = delegateCombine(this.i.cellClicked, this._cellClicked_wrapped);
    }
    /**
     * Called when sorting has changed.
    */
    get sortDescriptionsChanged() {
        return this._sortDescriptionsChanged;
    }
    set sortDescriptionsChanged(ev) {
        if (this._sortDescriptionsChanged_wrapped !== null) {
            this.i.sortDescriptionsChanged = delegateRemove(this.i.sortDescriptionsChanged, this._sortDescriptionsChanged_wrapped);
            this._sortDescriptionsChanged_wrapped = null;
            this._sortDescriptionsChanged = null;
        }
        this._sortDescriptionsChanged = ev;
        this._sortDescriptionsChanged_wrapped = (o, e) => {
            let outerArgs = new IgrGridSortDescriptionsChangedEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeSortDescriptionsChanged) {
                this.beforeSortDescriptionsChanged(this, outerArgs);
            }
            if (this._sortDescriptionsChanged) {
                this._sortDescriptionsChanged(this, outerArgs);
            }
        };
        this.i.sortDescriptionsChanged = delegateCombine(this.i.sortDescriptionsChanged, this._sortDescriptionsChanged_wrapped);
    }
    /**
     * Called when grouping has changed.
    */
    get groupDescriptionsChanged() {
        return this._groupDescriptionsChanged;
    }
    set groupDescriptionsChanged(ev) {
        if (this._groupDescriptionsChanged_wrapped !== null) {
            this.i.groupDescriptionsChanged = delegateRemove(this.i.groupDescriptionsChanged, this._groupDescriptionsChanged_wrapped);
            this._groupDescriptionsChanged_wrapped = null;
            this._groupDescriptionsChanged = null;
        }
        this._groupDescriptionsChanged = ev;
        this._groupDescriptionsChanged_wrapped = (o, e) => {
            let outerArgs = new IgrGridGroupDescriptionsChangedEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeGroupDescriptionsChanged) {
                this.beforeGroupDescriptionsChanged(this, outerArgs);
            }
            if (this._groupDescriptionsChanged) {
                this._groupDescriptionsChanged(this, outerArgs);
            }
        };
        this.i.groupDescriptionsChanged = delegateCombine(this.i.groupDescriptionsChanged, this._groupDescriptionsChanged_wrapped);
    }
    /**
     * Called when a column is hidden or unhidden.
    */
    get columnHiddenChanged() {
        return this._columnHiddenChanged;
    }
    set columnHiddenChanged(ev) {
        if (this._columnHiddenChanged_wrapped !== null) {
            this.i.columnHiddenChanged = delegateRemove(this.i.columnHiddenChanged, this._columnHiddenChanged_wrapped);
            this._columnHiddenChanged_wrapped = null;
            this._columnHiddenChanged = null;
        }
        this._columnHiddenChanged = ev;
        this._columnHiddenChanged_wrapped = (o, e) => {
            let outerArgs = new IgrColumnHiddenChangedEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeColumnHiddenChanged) {
                this.beforeColumnHiddenChanged(this, outerArgs);
            }
            if (this._columnHiddenChanged) {
                this._columnHiddenChanged(this, outerArgs);
            }
        };
        this.i.columnHiddenChanged = delegateCombine(this.i.columnHiddenChanged, this._columnHiddenChanged_wrapped);
    }
    /**
     * Called when a column is pinned or unpinned.
    */
    get columnPinnedChanged() {
        return this._columnPinnedChanged;
    }
    set columnPinnedChanged(ev) {
        if (this._columnPinnedChanged_wrapped !== null) {
            this.i.columnPinnedChanged = delegateRemove(this.i.columnPinnedChanged, this._columnPinnedChanged_wrapped);
            this._columnPinnedChanged_wrapped = null;
            this._columnPinnedChanged = null;
        }
        this._columnPinnedChanged = ev;
        this._columnPinnedChanged_wrapped = (o, e) => {
            let outerArgs = new IgrColumnPinnedChangedEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeColumnPinnedChanged) {
                this.beforeColumnPinnedChanged(this, outerArgs);
            }
            if (this._columnPinnedChanged) {
                this._columnPinnedChanged(this, outerArgs);
            }
        };
        this.i.columnPinnedChanged = delegateCombine(this.i.columnPinnedChanged, this._columnPinnedChanged_wrapped);
    }
    /**
     * Called when a cell has been edited.
    */
    get cellValueChanging() {
        return this._cellValueChanging;
    }
    set cellValueChanging(ev) {
        if (this._cellValueChanging_wrapped !== null) {
            this.i.cellValueChanging = delegateRemove(this.i.cellValueChanging, this._cellValueChanging_wrapped);
            this._cellValueChanging_wrapped = null;
            this._cellValueChanging = null;
        }
        this._cellValueChanging = ev;
        this._cellValueChanging_wrapped = (o, e) => {
            let outerArgs = new IgrGridCellValueChangingEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeCellValueChanging) {
                this.beforeCellValueChanging(this, outerArgs);
            }
            if (this._cellValueChanging) {
                this._cellValueChanging(this, outerArgs);
            }
        };
        this.i.cellValueChanging = delegateCombine(this.i.cellValueChanging, this._cellValueChanging_wrapped);
    }
    /**
     * Called when edits have been committed to the datasource.
    */
    get dataCommitted() {
        return this._dataCommitted;
    }
    set dataCommitted(ev) {
        if (this._dataCommitted_wrapped !== null) {
            this.i.dataCommitted = delegateRemove(this.i.dataCommitted, this._dataCommitted_wrapped);
            this._dataCommitted_wrapped = null;
            this._dataCommitted = null;
        }
        this._dataCommitted = ev;
        this._dataCommitted_wrapped = (o, e) => {
            let outerArgs = new IgrGridDataCommittedEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeDataCommitted) {
                this.beforeDataCommitted(this, outerArgs);
            }
            if (this._dataCommitted) {
                this._dataCommitted(this, outerArgs);
            }
        };
        this.i.dataCommitted = delegateCombine(this.i.dataCommitted, this._dataCommitted_wrapped);
    }
    /**
     * Called when edits are about to be committed to the datasource.
    */
    get dataCommitting() {
        return this._dataCommitting;
    }
    set dataCommitting(ev) {
        if (this._dataCommitting_wrapped !== null) {
            this.i.dataCommitting = delegateRemove(this.i.dataCommitting, this._dataCommitting_wrapped);
            this._dataCommitting_wrapped = null;
            this._dataCommitting = null;
        }
        this._dataCommitting = ev;
        this._dataCommitting_wrapped = (o, e) => {
            let outerArgs = new IgrGridDataCommittingEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeDataCommitting) {
                this.beforeDataCommitting(this, outerArgs);
            }
            if (this._dataCommitting) {
                this._dataCommitting(this, outerArgs);
            }
        };
        this.i.dataCommitting = delegateCombine(this.i.dataCommitting, this._dataCommitting_wrapped);
    }
    /**
     * Called when the grids size has changed.
    */
    get sizeChanged() {
        return this._sizeChanged;
    }
    set sizeChanged(ev) {
        if (this._sizeChanged_wrapped !== null) {
            this.i.sizeChanged = delegateRemove(this.i.sizeChanged, this._sizeChanged_wrapped);
            this._sizeChanged_wrapped = null;
            this._sizeChanged = null;
        }
        this._sizeChanged = ev;
        this._sizeChanged_wrapped = (o, e) => {
            let outerArgs = new IgrGridSizeChangedEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeSizeChanged) {
                this.beforeSizeChanged(this, outerArgs);
            }
            if (this._sizeChanged) {
                this._sizeChanged(this, outerArgs);
            }
        };
        this.i.sizeChanged = delegateCombine(this.i.sizeChanged, this._sizeChanged_wrapped);
    }
    get actualColumnsChanged() {
        return this._actualColumnsChanged;
    }
    set actualColumnsChanged(ev) {
        if (this._actualColumnsChanged_wrapped !== null) {
            this.i.actualColumnsChanged = delegateRemove(this.i.actualColumnsChanged, this._actualColumnsChanged_wrapped);
            this._actualColumnsChanged_wrapped = null;
            this._actualColumnsChanged = null;
        }
        this._actualColumnsChanged = ev;
        this._actualColumnsChanged_wrapped = (o, e) => {
            let outerArgs = new IgrGridColumnsChangedEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeActualColumnsChanged) {
                this.beforeActualColumnsChanged(this, outerArgs);
            }
            if (this._actualColumnsChanged) {
                this._actualColumnsChanged(this, outerArgs);
            }
        };
        this.i.actualColumnsChanged = delegateCombine(this.i.actualColumnsChanged, this._actualColumnsChanged_wrapped);
    }
    /**
     * Called when the columns are autogenerated.
    */
    get columnsAutoGenerated() {
        return this._columnsAutoGenerated;
    }
    set columnsAutoGenerated(ev) {
        if (this._columnsAutoGenerated_wrapped !== null) {
            this.i.columnsAutoGenerated = delegateRemove(this.i.columnsAutoGenerated, this._columnsAutoGenerated_wrapped);
            this._columnsAutoGenerated_wrapped = null;
            this._columnsAutoGenerated = null;
        }
        this._columnsAutoGenerated = ev;
        this._columnsAutoGenerated_wrapped = (o, e) => {
            let outerArgs = new IgrGridColumnsAutoGeneratedEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeColumnsAutoGenerated) {
                this.beforeColumnsAutoGenerated(this, outerArgs);
            }
            if (this._columnsAutoGenerated) {
                this._columnsAutoGenerated(this, outerArgs);
            }
        };
        this.i.columnsAutoGenerated = delegateCombine(this.i.columnsAutoGenerated, this._columnsAutoGenerated_wrapped);
    }
    /**
     * Called when the selected items change.
    */
    get selectedItemsChanged() {
        return this._selectedItemsChanged;
    }
    set selectedItemsChanged(ev) {
        if (this._selectedItemsChanged_wrapped !== null) {
            this.i.selectedItemsChanged = delegateRemove(this.i.selectedItemsChanged, this._selectedItemsChanged_wrapped);
            this._selectedItemsChanged_wrapped = null;
            this._selectedItemsChanged = null;
        }
        this._selectedItemsChanged = ev;
        this._selectedItemsChanged_wrapped = (o, e) => {
            let outerArgs = new IgrGridSelectedItemsChangedEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeSelectedItemsChanged) {
                this.beforeSelectedItemsChanged(this, outerArgs);
            }
            if (this._selectedItemsChanged) {
                this._selectedItemsChanged(this, outerArgs);
            }
        };
        this.i.selectedItemsChanged = delegateCombine(this.i.selectedItemsChanged, this._selectedItemsChanged_wrapped);
    }
    /**
     * Called when the selected keys change.
    */
    get selectedKeysChanged() {
        return this._selectedKeysChanged;
    }
    set selectedKeysChanged(ev) {
        if (this._selectedKeysChanged_wrapped !== null) {
            this.i.selectedKeysChanged = delegateRemove(this.i.selectedKeysChanged, this._selectedKeysChanged_wrapped);
            this._selectedKeysChanged_wrapped = null;
            this._selectedKeysChanged = null;
        }
        this._selectedKeysChanged = ev;
        this._selectedKeysChanged_wrapped = (o, e) => {
            let outerArgs = new IgrGridSelectedKeysChangedEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeSelectedKeysChanged) {
                this.beforeSelectedKeysChanged(this, outerArgs);
            }
            if (this._selectedKeysChanged) {
                this._selectedKeysChanged(this, outerArgs);
            }
        };
        this.i.selectedKeysChanged = delegateCombine(this.i.selectedKeysChanged, this._selectedKeysChanged_wrapped);
    }
    /**
     * Called when the selected cells change.
    */
    get selectedCellsChanged() {
        return this._selectedCellsChanged;
    }
    set selectedCellsChanged(ev) {
        if (this._selectedCellsChanged_wrapped !== null) {
            this.i.selectedCellsChanged = delegateRemove(this.i.selectedCellsChanged, this._selectedCellsChanged_wrapped);
            this._selectedCellsChanged_wrapped = null;
            this._selectedCellsChanged = null;
        }
        this._selectedCellsChanged = ev;
        this._selectedCellsChanged_wrapped = (o, e) => {
            let outerArgs = new IgrGridSelectedCellsChangedEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeSelectedCellsChanged) {
                this.beforeSelectedCellsChanged(this, outerArgs);
            }
            if (this._selectedCellsChanged) {
                this._selectedCellsChanged(this, outerArgs);
            }
        };
        this.i.selectedCellsChanged = delegateCombine(this.i.selectedCellsChanged, this._selectedCellsChanged_wrapped);
    }
    /**
     * Called when the active cell changes.
    */
    get activeCellChanged() {
        return this._activeCellChanged;
    }
    set activeCellChanged(ev) {
        if (this._activeCellChanged_wrapped !== null) {
            this.i.activeCellChanged = delegateRemove(this.i.activeCellChanged, this._activeCellChanged_wrapped);
            this._activeCellChanged_wrapped = null;
            this._activeCellChanged = null;
        }
        this._activeCellChanged = ev;
        this._activeCellChanged_wrapped = (o, e) => {
            let outerArgs = new IgrGridActiveCellChangedEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeActiveCellChanged) {
                this.beforeActiveCellChanged(this, outerArgs);
            }
            if (this._activeCellChanged) {
                this._activeCellChanged(this, outerArgs);
            }
        };
        this.i.activeCellChanged = delegateCombine(this.i.activeCellChanged, this._activeCellChanged_wrapped);
    }
    /**
     * Called when the selected cell ranges changed.
    */
    get selectedCellRangesChanged() {
        return this._selectedCellRangesChanged;
    }
    set selectedCellRangesChanged(ev) {
        if (this._selectedCellRangesChanged_wrapped !== null) {
            this.i.selectedCellRangesChanged = delegateRemove(this.i.selectedCellRangesChanged, this._selectedCellRangesChanged_wrapped);
            this._selectedCellRangesChanged_wrapped = null;
            this._selectedCellRangesChanged = null;
        }
        this._selectedCellRangesChanged = ev;
        this._selectedCellRangesChanged_wrapped = (o, e) => {
            let outerArgs = new IgrGridSelectedCellRangesChangedEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeSelectedCellRangesChanged) {
                this.beforeSelectedCellRangesChanged(this, outerArgs);
            }
            if (this._selectedCellRangesChanged) {
                this._selectedCellRangesChanged(this, outerArgs);
            }
        };
        this.i.selectedCellRangesChanged = delegateCombine(this.i.selectedCellRangesChanged, this._selectedCellRangesChanged_wrapped);
    }
    /**
     * Called when a column's Width property has changed.
    */
    get columnWidthChanged() {
        return this._columnWidthChanged;
    }
    set columnWidthChanged(ev) {
        if (this._columnWidthChanged_wrapped !== null) {
            this.i.columnWidthChanged = delegateRemove(this.i.columnWidthChanged, this._columnWidthChanged_wrapped);
            this._columnWidthChanged_wrapped = null;
            this._columnWidthChanged = null;
        }
        this._columnWidthChanged = ev;
        this._columnWidthChanged_wrapped = (o, e) => {
            let outerArgs = new IgrGridColumnWidthChangedEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeColumnWidthChanged) {
                this.beforeColumnWidthChanged(this, outerArgs);
            }
            if (this._columnWidthChanged) {
                this._columnWidthChanged(this, outerArgs);
            }
        };
        this.i.columnWidthChanged = delegateCombine(this.i.columnWidthChanged, this._columnWidthChanged_wrapped);
    }
    get cellEditStarted() {
        return this._cellEditStarted;
    }
    set cellEditStarted(ev) {
        if (this._cellEditStarted_wrapped !== null) {
            this.i.cellEditStarted = delegateRemove(this.i.cellEditStarted, this._cellEditStarted_wrapped);
            this._cellEditStarted_wrapped = null;
            this._cellEditStarted = null;
        }
        this._cellEditStarted = ev;
        this._cellEditStarted_wrapped = (o, e) => {
            let outerArgs = new IgrGridCellEditStartedEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeCellEditStarted) {
                this.beforeCellEditStarted(this, outerArgs);
            }
            if (this._cellEditStarted) {
                this._cellEditStarted(this, outerArgs);
            }
        };
        this.i.cellEditStarted = delegateCombine(this.i.cellEditStarted, this._cellEditStarted_wrapped);
    }
    get cellEditEnded() {
        return this._cellEditEnded;
    }
    set cellEditEnded(ev) {
        if (this._cellEditEnded_wrapped !== null) {
            this.i.cellEditEnded = delegateRemove(this.i.cellEditEnded, this._cellEditEnded_wrapped);
            this._cellEditEnded_wrapped = null;
            this._cellEditEnded = null;
        }
        this._cellEditEnded = ev;
        this._cellEditEnded_wrapped = (o, e) => {
            let outerArgs = new IgrGridCellEditEndedEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeCellEditEnded) {
                this.beforeCellEditEnded(this, outerArgs);
            }
            if (this._cellEditEnded) {
                this._cellEditEnded(this, outerArgs);
            }
        };
        this.i.cellEditEnded = delegateCombine(this.i.cellEditEnded, this._cellEditEnded_wrapped);
    }
    get rowEditStarted() {
        return this._rowEditStarted;
    }
    set rowEditStarted(ev) {
        if (this._rowEditStarted_wrapped !== null) {
            this.i.rowEditStarted = delegateRemove(this.i.rowEditStarted, this._rowEditStarted_wrapped);
            this._rowEditStarted_wrapped = null;
            this._rowEditStarted = null;
        }
        this._rowEditStarted = ev;
        this._rowEditStarted_wrapped = (o, e) => {
            let outerArgs = new IgrGridRowEditStartedEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeRowEditStarted) {
                this.beforeRowEditStarted(this, outerArgs);
            }
            if (this._rowEditStarted) {
                this._rowEditStarted(this, outerArgs);
            }
        };
        this.i.rowEditStarted = delegateCombine(this.i.rowEditStarted, this._rowEditStarted_wrapped);
    }
    get rowEditEnded() {
        return this._rowEditEnded;
    }
    set rowEditEnded(ev) {
        if (this._rowEditEnded_wrapped !== null) {
            this.i.rowEditEnded = delegateRemove(this.i.rowEditEnded, this._rowEditEnded_wrapped);
            this._rowEditEnded_wrapped = null;
            this._rowEditEnded = null;
        }
        this._rowEditEnded = ev;
        this._rowEditEnded_wrapped = (o, e) => {
            let outerArgs = new IgrGridRowEditEndedEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeRowEditEnded) {
                this.beforeRowEditEnded(this, outerArgs);
            }
            if (this._rowEditEnded) {
                this._rowEditEnded(this, outerArgs);
            }
        };
        this.i.rowEditEnded = delegateCombine(this.i.rowEditEnded, this._rowEditEnded_wrapped);
    }
    get actualPrimaryKeyChange() {
        return this._actualPrimaryKeyChange;
    }
    set actualPrimaryKeyChange(ev) {
        if (this._actualPrimaryKeyChange_wrapped !== null) {
            this.i.propertyChanged = delegateRemove(this.i.propertyChanged, this._actualPrimaryKeyChange_wrapped);
            this._actualPrimaryKeyChange_wrapped = null;
            this._actualPrimaryKeyChange = null;
        }
        this._actualPrimaryKeyChange = ev;
        this._actualPrimaryKeyChange_wrapped = (o, e) => {
            let ext = this.actualPrimaryKey;
            if (this.beforeActualPrimaryKeyChange) {
                this.beforeActualPrimaryKeyChange(this, ext);
            }
            if (this._actualPrimaryKeyChange) {
                this._actualPrimaryKeyChange(this, ext);
            }
        };
        this.i.propertyChanged = delegateCombine(this.i.propertyChanged, this._actualPrimaryKeyChange_wrapped);
    }
}

class IgrCheckedChangedEventArgs {
    createImplementation() {
        return new CheckedChangedEventArgs();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    get index() {
        return this.i.b;
    }
    set index(v) {
        this.i.b = +v;
    }
    get isChecked() {
        return this.i.a;
    }
    set isChecked(v) {
        this.i.a = ensureBool(v);
    }
}

class IgrSelectAllCheckboxChangedEventArgs {
    createImplementation() {
        return new SelectAllCheckboxChangedEventArgs();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    get isChecked() {
        return this.i.a;
    }
    set isChecked(v) {
        this.i.a = ensureBool(v);
    }
}

class IgrCheckboxList extends Component {
    constructor(props) {
        super(props);
        this._dataSource = null;
        this._wrapper = null;
        this._implementation = null;
        this._keys = null;
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        this._checkedChanged = null;
        this._checkedChanged_wrapped = null;
        this._selectAllCheckboxChanged = null;
        this._selectAllCheckboxChanged_wrapped = null;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._getMainRef = this._getMainRef.bind(this);
        this._getGridRef = this._getGridRef.bind(this);
        this._getSelectAllSection = this._getSelectAllSection.bind(this);
        this._getFilterHr = this._getFilterHr.bind(this);
        this._implementation = this.createImplementation();
        var checkboxList = this.i;
        this._checkboxList = checkboxList;
        checkboxList.notifySizeChanged();
        if (props) {
            this.initializeProperties();
        }
    }
    set height(value) {
        this._height = value;
        if (this._elRef) {
            this._elRef.style.height = value;
            this._checkboxList.notifySizeChanged();
        }
    }
    get height() {
        return this._height;
    }
    set width(value) {
        this._width = value;
        if (this._elRef) {
            this._elRef.style.height = value;
            this._checkboxList.notifySizeChanged();
        }
    }
    get width() {
        return this._width;
    }
    set dataSource(value) {
        this._dataSource = value;
        if (this._checkboxList != null) {
            this._checkboxList.itemsSource = this._dataSource;
        }
    }
    get dataSource() {
        return this._dataSource;
    }
    _getMainRef(ref) {
        this._elRef = ref;
        this.verifyReferences();
    }
    _getGridRef(ref) {
        this._gridRef = ref;
        this.verifyReferences();
    }
    _getSelectAllSection(ref) {
        this._selectAllSectionRef = ref;
        this.verifyReferences();
    }
    _getFilterHr(ref) {
        this._filterHrRef = ref;
        this.verifyReferences();
    }
    verifyReferences() {
        if (this._elRef != null &&
            this._gridRef != null &&
            this._filterHrRef != null &&
            this._selectAllSectionRef != null) {
            this._renderer = new ReactRenderer(this._elRef, document, false, null);
            var selectAllSectionWrapper = this._renderer.getWrapper(this._selectAllSectionRef);
            this._checkboxList.provideContainer(this._renderer, this._gridRef.i, selectAllSectionWrapper);
            var filterHr = this._renderer.getWrapper(this._filterHrRef);
            filterHr.setStyleProperty("margin", "3px 0px");
            filterHr.setStyleProperty("border-top", "1px solid #dde2eb");
            filterHr.setStyleProperty("border-left", "0px");
            filterHr.setStyleProperty("border-right", "0px");
            filterHr.setStyleProperty("border-bottom", "0px");
            this._checkboxList.provideHrElement(filterHr);
        }
    }
    render() {
        let children = [];
        //let filterContainerChildren: any[] = [];
        let filterContainer = createElement("div", {
            key: "filterContainer"
            //children: filterContainerChildren
        });
        children.push(filterContainer);
        let filterHr = createElement("hr", {
            ref: this._getFilterHr,
            key: "filterHr"
            //children: filterContainerChildren
        });
        children.push(filterHr);
        /*let filter = React.createElement("input", {
            ref: this._getFilterRef,
            type: "text",
            key: "checkboxListFilterInput"
        });
        filterContainerChildren.push(filter);*/
        let selectAllSection = createElement("div", {
            ref: this._getSelectAllSection,
            key: "selectAllSection"
        });
        children.push(selectAllSection);
        let grid = createElement(IgrDataGrid, {
            ref: this._getGridRef,
            key: "checkboxListGrid",
            scrollbarStyle: "Default",
            headerHeight: 0
        });
        children.push(grid);
        let div = createElement("div", {
            className: "ig-checkbox-list igr-checkbox-list",
            ref: this._getMainRef,
            children: children
        });
        return div;
    }
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    initializeProperties() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    // supports angular themes or custom properties set in CSS
    updateStyle() {
        this._styling(this._elRef, this);
    }
    componentWillUnmount() {
        if (this._checkboxList)
            this._checkboxList.destroy();
        if (this._renderer)
            this._renderer.destroy();
    }
    componentDidMount() {
        this._elRef.style.width = this._width ? this._width : "";
        this._elRef.style.height = this._height ? this._height : "";
        this._checkboxList.notifySizeChanged();
        this.initializeContent();
    }
    initializeContent() {
        this.updateStyle();
        this.i.notifySizeChanged();
    }
    createImplementation() {
        return new CheckboxList();
    }
    get i() {
        return this._implementation;
    }
    /**
     * Gets the collection responsible for selection in the CheckboxList. Selection is determined by two factors:
     * whether everything is selected or deselected and the values present in this collection. If everything is
     * selected then any items in this collection will be deselected. If everything is deselected then any items in
     * this collection will be selected. The CheckboxList defaults all items as deselected. This state can change
     * when you use the SelectAll and DeselectAll methods.
    */
    get keys() {
        if (this._keys === null) {
            let coll = new IgrGridSelectedKeysCollection();
            let innerColl = this.i.g;
            if (!innerColl) {
                innerColl = new GridSelectedKeysCollection();
            }
            this._keys = coll._fromInner(innerColl);
        }
        return this._keys;
    }
    set keys(v) {
        if (this._keys !== null) {
            this._keys._setSyncTarget(null);
            this._keys = null;
        }
        let coll = new IgrGridSelectedKeysCollection();
        this._keys = coll._fromOuter(v);
        let syncColl = new SyncableObservableCollection$1(PrimaryKeyValue.$type);
        let innerColl = this.i.g;
        if (!innerColl) {
            innerColl = new GridSelectedKeysCollection();
        }
        syncColl._inner = innerColl;
        syncColl.clear();
        this._keys._setSyncTarget(syncColl);
    }
    /**
     * Gets or sets the primary key to use for the CheckboxList.
    */
    get primaryKey() {
        return this.i.b;
    }
    set primaryKey(v) {
        this.i.b = v;
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get dataMemberPath() {
        return this.i.at;
    }
    set dataMemberPath(v) {
        this.i.at = v;
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get selectedMemberPath() {
        return this.i.a9;
    }
    set selectedMemberPath(v) {
        this.i.a9 = v;
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get filterPlaceholderText() {
        return this.i.ax;
    }
    set filterPlaceholderText(v) {
        this.i.ax = v;
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get searchInputType() {
        return this.i.v;
    }
    set searchInputType(v) {
        this.i.v = ensureEnum(InputGroupDisplayType_$type, v);
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get rowHeight() {
        return this.i.aj;
    }
    set rowHeight(v) {
        this.i.aj = +v;
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get cellTextStyle() {
        if (this.i.z == null) {
            return null;
        }
        return this.i.z.fontString;
    }
    set cellTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.z = fi;
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get indexType() {
        return this.i.p;
    }
    set indexType(v) {
        this.i.p = ensureEnum(CheckboxListIndexType_$type, v);
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get baseTheme() {
        return this.i.l;
    }
    set baseTheme(v) {
        this.i.l = ensureEnum(BaseControlTheme_$type, v);
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get density() {
        return this.i.n;
    }
    set density(v) {
        this.i.n = ensureEnum(ControlDisplayDensity_$type, v);
    }
    /**
     * Gets / sets the caption of the "Select All" checkbox.
    */
    get selectAllCaption() {
        return this.i.a6;
    }
    set selectAllCaption(v) {
        this.i.a6 = v;
    }
    /**
     * Gets or sets the color to use for the "Select All" label.
    */
    get selectAllCaptionTextColor() {
        return brushToString(this.i.cj);
    }
    set selectAllCaptionTextColor(v) {
        this.i.cj = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the actual header selectAllCaption text.
    */
    get actualSelectAllCaptionTextColor() {
        return brushToString(this.i.cf);
    }
    set actualSelectAllCaptionTextColor(v) {
        this.i.cf = stringToBrush(v);
    }
    /**
     * Gets / sets whether the "Select all" checkbox is visible.
    */
    get showSelectAll() {
        return this.i.ag;
    }
    set showSelectAll(v) {
        this.i.ag = ensureBool(v);
    }
    /**
     * Gets or sets the color to use for the background of the component.
    */
    get backgroundColor() {
        return brushToString(this.i.cg);
    }
    set backgroundColor(v) {
        this.i.cg = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the text of the component.
    */
    get textColor() {
        return brushToString(this.i.cl);
    }
    set textColor(v) {
        this.i.cl = stringToBrush(v);
    }
    findByName(name) {
        if (this.keys != null && this.keys.findByName && this.keys.findByName(name)) {
            return this.keys.findByName(name);
        }
        return null;
    }
    get hasUserValues() {
        return this._hasUserValues;
    }
    __m(propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    }
    _styling(container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        let genericPrefix = "";
        let typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("CheckboxList");
        let additionalPrefixes = [];
        let prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        let b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            let basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            let parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            let parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    }
    /**
 * selects all the items in the checkbox list.

*/
    selectAll() {
        this.i.b5();
    }
    /**
     * Deselects all the items in the checkbox list.
    
    */
    deselectAll() {
        this.i.bh();
    }
    notifySetItem(index, oldItem, newItem) {
        this.i.bo(index, oldItem, newItem);
    }
    /**
     * Manually notifies the checkboxlist's grid that the data it has bound to has been cleared and needs to be re-examined.
     * This should not be called if the data that the grid is bound to is already observable.
    
    */
    notifyClearItems() {
        this.i.bl();
    }
    notifyInsertItem(index, newItem) {
        this.i.bm(index, newItem);
    }
    notifyRemoveItem(index, oldItem) {
        this.i.bn(index, oldItem);
    }
    addKeyValue(value) {
        this.i.be(value);
    }
    removeKeyValue(value) {
        this.i.b4(value);
    }
    /**
     * Returns true if no items are selected / checked; otherwise false.
    
    */
    isNothingSelected() {
        let iv = this.i.ad();
        return (iv);
    }
    /**
     * Returns true if all of the items are selected / checked; otherwise false.
    
    */
    isEverythingSelected() {
        let iv = this.i.ac();
        return (iv);
    }
    /**
     * Called when a checkbox is checked or unchecked.
    */
    get checkedChanged() {
        return this._checkedChanged;
    }
    set checkedChanged(ev) {
        if (this._checkedChanged_wrapped !== null) {
            this.i.checkedChanged = delegateRemove(this.i.checkedChanged, this._checkedChanged_wrapped);
            this._checkedChanged_wrapped = null;
            this._checkedChanged = null;
        }
        this._checkedChanged = ev;
        this._checkedChanged_wrapped = (o, e) => {
            let outerArgs = new IgrCheckedChangedEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeCheckedChanged) {
                this.beforeCheckedChanged(this, outerArgs);
            }
            if (this._checkedChanged) {
                this._checkedChanged(this, outerArgs);
            }
        };
        this.i.checkedChanged = delegateCombine(this.i.checkedChanged, this._checkedChanged_wrapped);
    }
    /**
     * Called when the SelectAll checkbox is checked or unchecked.
    */
    get selectAllCheckboxChanged() {
        return this._selectAllCheckboxChanged;
    }
    set selectAllCheckboxChanged(ev) {
        if (this._selectAllCheckboxChanged_wrapped !== null) {
            this.i.selectAllCheckboxChanged = delegateRemove(this.i.selectAllCheckboxChanged, this._selectAllCheckboxChanged_wrapped);
            this._selectAllCheckboxChanged_wrapped = null;
            this._selectAllCheckboxChanged = null;
        }
        this._selectAllCheckboxChanged = ev;
        this._selectAllCheckboxChanged_wrapped = (o, e) => {
            let outerArgs = new IgrSelectAllCheckboxChangedEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeSelectAllCheckboxChanged) {
                this.beforeSelectAllCheckboxChanged(this, outerArgs);
            }
            if (this._selectAllCheckboxChanged) {
                this._selectAllCheckboxChanged(this, outerArgs);
            }
        };
        this.i.selectAllCheckboxChanged = delegateCombine(this.i.selectAllCheckboxChanged, this._selectAllCheckboxChanged_wrapped);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/**
 * Represents a class used to configure the appearance of a text column header cells.
*/
class IgrTextHeader extends IgrHeader {
    createImplementation() {
        return new TextHeader();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrTextHeaderModule {
    static register() {
        TypeRegistrar.registerCons("IgrTextHeader", IgrTextHeader);
        TypeRegistrar.register("TextHeader", TextHeader.$type);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrSectionHeaderModule {
    static register() {
        TypeRegistrar.registerCons("IgrSectionHeader", IgrSectionHeader);
        TypeRegistrar.register("SectionHeader", SectionHeader.$type);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrRowSeparatorModule {
    static register() {
        TypeRegistrar.registerCons("IgrRowSeparator", IgrRowSeparator);
        TypeRegistrar.register("RowSeparator", RowSeparator.$type);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrHeaderSeparatorModule {
    static register() {
        TypeRegistrar.registerCons("IgrHeaderSeparator", IgrHeaderSeparator);
        TypeRegistrar.register("HeaderSeparator", HeaderSeparator.$type);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrColumnResizingSeparatorModule {
    static register() {
        TypeRegistrar.registerCons("IgrColumnResizingSeparator", IgrColumnResizingSeparator);
        TypeRegistrar.register("ColumnResizingSeparator", ColumnResizingSeparator.$type);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrColumnMovingSeparatorModule {
    static register() {
        TypeRegistrar.registerCons("IgrColumnMovingSeparator", IgrColumnMovingSeparator);
        TypeRegistrar.register("ColumnMovingSeparator", ColumnMovingSeparator.$type);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrSummaryRowRootModule {
    static register() {
        TypeRegistrar.registerCons("IgrSummaryRowRoot", IgrSummaryRowRoot);
        TypeRegistrar.register("SummaryRowRoot", SummaryRowRoot.$type);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrSummaryRowSectionModule {
    static register() {
        TypeRegistrar.registerCons("IgrSummaryRowSection", IgrSummaryRowSection);
        TypeRegistrar.register("SummaryRowSection", SummaryRowSection.$type);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrColumnWidthModule {
    static register() {
        TypeRegistrar.registerCons("IgrColumnWidth", IgrColumnWidth);
        TypeRegistrar.register("ColumnWidth", ColumnWidth.$type);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrColumnSortDescriptionModule {
    static register() {
        TypeRegistrar.registerCons("IgrColumnSortDescription", IgrColumnSortDescription);
        TypeRegistrar.register("ColumnSortDescription", ColumnSortDescription.$type);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrColumnGroupDescriptionModule {
    static register() {
        TypeRegistrar.registerCons("IgrColumnGroupDescription", IgrColumnGroupDescription);
        TypeRegistrar.register("ColumnGroupDescription", ColumnGroupDescription.$type);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrColumnSummaryDescriptionModule {
    static register() {
        TypeRegistrar.registerCons("IgrColumnSummaryDescription", IgrColumnSummaryDescription);
        TypeRegistrar.register("ColumnSummaryDescription", ColumnSummaryDescription.$type);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrPrimaryKeyValueModule {
    static register() {
        TypeRegistrar.registerCons("IgrPrimaryKeyValue", IgrPrimaryKeyValue);
        TypeRegistrar.register("PrimaryKeyValue", PrimaryKeyValue.$type);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrCellKeyModule {
    static register() {
        TypeRegistrar.registerCons("IgrCellKey", IgrCellKey);
        TypeRegistrar.register("CellKey", CellKey.$type);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrCellRangeModule {
    static register() {
        TypeRegistrar.registerCons("IgrCellRange", IgrCellRange);
        TypeRegistrar.register("CellRange", CellRange.$type);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrGridCellPositionModule {
    static register() {
        TypeRegistrar.registerCons("IgrGridCellPosition", IgrGridCellPosition);
        TypeRegistrar.register("GridCellPosition", GridCellPosition.$type);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrDataGridCoreModule {
    static register() {
        IgrTextHeaderModule.register();
        IgrSectionHeaderModule.register();
        IgrRowSeparatorModule.register();
        IgrHeaderSeparatorModule.register();
        IgrColumnResizingSeparatorModule.register();
        IgrColumnMovingSeparatorModule.register();
        IgrSummaryRowRootModule.register();
        IgrSummaryRowSectionModule.register();
        IgrColumnWidthModule.register();
        IgrColumnSortDescriptionModule.register();
        IgrColumnGroupDescriptionModule.register();
        IgrColumnSummaryDescriptionModule.register();
        IgrPrimaryKeyValueModule.register();
        IgrCellKeyModule.register();
        IgrCellRangeModule.register();
        IgrGridCellPositionModule.register();
        IgrLocalDataSourceModule.register();
        IgrNumberFormatSpecifierModule.register();
        IgrDateTimeFormatSpecifierModule.register();
        TypeRegistrar.registerCons('IgrDataGrid', IgrDataGrid);
    }
}

/**
 * Represents a Text grid column, used to allow the developer to display a formatted text in a cell.
*/
class IgrTextColumn extends IgrColumn {
    createImplementation() {
        return new TextColumn();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
    }
    /**
     * Gets or sets the editor type used for editing cells in this column.
    */
    get editorType() {
        return this.i.jp;
    }
    set editorType(v) {
        this.i.jp = ensureEnum(EditorType_$type, v);
    }
    /**
     * Gets or sets the ComboBox data source.
    */
    get editorDataSource() {
        return this.i.jq;
    }
    set editorDataSource(v) {
        this.i.jq = v;
    }
    /**
     * Gets or sets the ComboBox text field.
    */
    get editorTextField() {
        return this.i.js;
    }
    set editorTextField(v) {
        this.i.js = v;
    }
    /**
     * Gets or sets the ComboBox value field.
    */
    get editorValueField() {
        return this.i.jo;
    }
    set editorValueField(v) {
        this.i.jo = v;
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrTextColumnModule {
    static register() {
        TypeRegistrar.registerCons("IgrTextColumn", IgrTextColumn);
        TypeRegistrar.register("TextColumn", TextColumn.$type);
    }
}

/**
 * Represents a Numeric grid column, used to allow the developer to display a formatted number in a cell.
*/
class IgrNumericColumn extends IgrColumn {
    createImplementation() {
        return new NumericColumn();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
    }
    /**
     * Gets or sets the string to prefix a negative value. If FormatString is specificied this value is ignored.
    */
    get negativePrefix() {
        return this.i.kh;
    }
    set negativePrefix(v) {
        this.i.kh = v;
    }
    /**
     * Gets or sets the string to prefix a positive value. If FormatString is specificied this value is ignored.
    */
    get positivePrefix() {
        return this.i.kl;
    }
    set positivePrefix(v) {
        this.i.kl = v;
    }
    /**
     * Gets or sets the string to suffix a negative value. If FormatString is specificied this value is ignored.
    */
    get negativeSuffix() {
        return this.i.kj;
    }
    set negativeSuffix(v) {
        this.i.kj = v;
    }
    /**
     * Gets or sets the string to suffix a positive value. If FormatString is specificied this value is ignored.
    */
    get positiveSuffix() {
        return this.i.kn;
    }
    set positiveSuffix(v) {
        this.i.kn = v;
    }
    /**
     * Gets or sets the maximum fraction digits. If FormatString is specificied this value is ignored.
    */
    get maxFractionDigits() {
        return this.i.jy;
    }
    set maxFractionDigits(v) {
        this.i.jy = +v;
    }
    /**
     * Gets or sets the minimum fraction digits. If FormatString is specificied this value is ignored.
    */
    get minFractionDigits() {
        return this.i.jz;
    }
    set minFractionDigits(v) {
        this.i.jz = +v;
    }
    /**
     * Gets or sets the minimum integer digits. If FormatString is specificied this value is ignored.
    */
    get minIntegerDigits() {
        return this.i.j0;
    }
    set minIntegerDigits(v) {
        this.i.j0 = +v;
    }
    /**
     * Gets or sets whether to show a grouping separator. If FormatString is specificied this value is ignored.
    */
    get showGroupingSeparator() {
        return this.i.jt;
    }
    set showGroupingSeparator(v) {
        this.i.jt = ensureBool(v);
    }
    /**
     * Gets or sets the format string to apply to the value. If set, the other value formatting properties on this column are ignored.
    */
    get formatString() {
        return this.i.kc;
    }
    set formatString(v) {
        this.i.kc = v;
    }
    get formatSpecifiers() {
        return this.i.jq;
    }
    set formatSpecifiers(v) {
        this.i.jq = v;
    }
    /**
     * Gets or sets the INTL NumericFormat object to use for formatting the date values.
    */
    get formatOverride() {
        return this.i.j3;
    }
    set formatOverride(v) {
        this.i.j3 = v;
    }
    /**
     * Gets or sets the editor type used for editing cells in this column.
    */
    get editorType() {
        return this.i.jr;
    }
    set editorType(v) {
        this.i.jr = ensureEnum(EditorType_$type, v);
    }
    /**
     * Gets or sets the ComboBox data source.
    */
    get editorDataSource() {
        return this.i.j2;
    }
    set editorDataSource(v) {
        this.i.j2 = v;
    }
    /**
     * Gets or sets the ComboBox text field.
    */
    get editorTextField() {
        return this.i.j9;
    }
    set editorTextField(v) {
        this.i.j9 = v;
    }
    /**
     * Gets or sets the ComboBox value field.
    */
    get editorValueField() {
        return this.i.jp;
    }
    set editorValueField(v) {
        this.i.jp = v;
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.formatSpecifiers != null && arrayFindByName(this.formatSpecifiers, name)) {
            return arrayFindByName(this.formatSpecifiers, name);
        }
        return null;
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrNumericColumnModule {
    static register() {
        TypeRegistrar.registerCons("IgrNumericColumn", IgrNumericColumn);
        TypeRegistrar.register("NumericColumn", NumericColumn.$type);
    }
}

/**
 * A column for displaying date/time values.
*/
class IgrDateTimeColumn extends IgrColumn {
    createImplementation() {
        return new DateTimeColumn();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
    }
    /**
     * Gets or sets the date time format to use for this column. If FormatString is specificied this value is ignored.
    */
    get dateTimeFormat() {
        return this.i.jt;
    }
    set dateTimeFormat(v) {
        this.i.jt = ensureEnum(DateTimeFormats_$type, v);
    }
    /**
     * Gets or sets the format string to apply to the value. If set, the other value formatting properties on this column are ignored.
    */
    get formatString() {
        return this.i.j4;
    }
    set formatString(v) {
        this.i.j4 = v;
    }
    get formatSpecifiers() {
        return this.i.jq;
    }
    set formatSpecifiers(v) {
        this.i.jq = v;
    }
    /**
     * Gets or sets the INTL DateTimeFormat object to use for formatting the date values.
    */
    get formatOverride() {
        return this.i.jy;
    }
    set formatOverride(v) {
        this.i.jy = v;
    }
    /**
     * Gets or sets the editor type used for editing cells in this column.
    */
    get editorType() {
        return this.i.ju;
    }
    set editorType(v) {
        this.i.ju = ensureEnum(EditorType_$type, v);
    }
    /**
     * Gets or sets the ComboBox data source.
    */
    get editorDataSource() {
        return this.i.jx;
    }
    set editorDataSource(v) {
        this.i.jx = v;
    }
    /**
     * Gets or sets the ComboBox text field.
    */
    get editorTextField() {
        return this.i.j1;
    }
    set editorTextField(v) {
        this.i.j1 = v;
    }
    /**
     * Gets or sets the ComboBox value field.
    */
    get editorValueField() {
        return this.i.jp;
    }
    set editorValueField(v) {
        this.i.jp = v;
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.formatSpecifiers != null && arrayFindByName(this.formatSpecifiers, name)) {
            return arrayFindByName(this.formatSpecifiers, name);
        }
        return null;
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrDateTimeColumnModule {
    static register() {
        TypeRegistrar.registerCons("IgrDateTimeColumn", IgrDateTimeColumn);
        TypeRegistrar.register("DateTimeColumn", DateTimeColumn.$type);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/**
 * Information about the cell that has content which is being created or updated.
*/
class IgrTemplateCellUpdatingEventArgs {
    createImplementation() {
        return new TemplateCellUpdatingEventArgs();
    }
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    get isCanvasBased() {
        return this.i.content.isCanvasBased;
    }
    /**
     * The host in which to add or update content if this is a DOM based cell.
    */
    get content() {
        if (this.isCanvasBased) {
            return null;
        }
        else {
            return this.i.content.element.getNativeElement();
        }
    }
    ensureCorrectSize() {
        return this.i.content.ensureCorrectSize();
    }
    get context() {
        if (this.isCanvasBased) {
            return this.i.content.templateContext;
        }
        else {
            return null;
        }
    }
    renderStandardBackground() {
        this.i.content.renderStandardBackground();
    }
    renderStandardContent() {
        this.i.content.renderStandardContent();
    }
    /**
     * The backing information for the current cell.
    */
    get cellInfo() {
        if (this.i.cellInfo == null) {
            return null;
        }
        if (!this.i.cellInfo.externalObject) {
            let ext = null;
            switch (this.i.cellInfo.$type.name) {
                case "DateTimeCellModel":
                    ext = new IgrDateTimeCellInfo();
                    break;
                case "ImageCellModel":
                    ext = new IgrImageCellInfo();
                    break;
                case "NumericCellModel":
                    ext = new IgrNumericCellInfo();
                    break;
                case "RowSeparatorModel":
                    ext = new IgrRowSeparatorInfo();
                    break;
                case "SectionHeaderCellModel":
                    ext = new IgrSectionHeaderCellInfo();
                    break;
                case "TemplateCellModel":
                    ext = new IgrTemplateCellInfo();
                    break;
                case "TemplateHeaderCellModel":
                    ext = new IgrTemplateHeaderCellInfo();
                    break;
                case "TemplateSectionHeaderCellModel":
                    ext = new IgrTemplateSectionHeaderCellInfo();
                    break;
                case "TextCellModel":
                    ext = new IgrTextCellInfo();
                    break;
                case "TextHeaderCellModel":
                    ext = new IgrTextHeaderCellInfo();
                    break;
            }
            ext._implementation = this.i.cellInfo;
            this.i.cellInfo.externalObject = ext;
        }
        return this.i.cellInfo.externalObject;
    }
}

/**
 * A column with customizable content.
*/
class IgrTemplateColumn extends IgrColumn {
    constructor(props) {
        super(props);
        this._templateCells = [];
        this._activeCellContent = new Map();
        this._activeCellContentElements = new Map();
        this._templateCellInitialData = new Map();
        this._templateCellInitialTemplate = new Map();
        this._currCellInfo = null;
        this._template = null;
        this._templateSelector = null;
        this._hasSelector = false;
        this._selectorStyles = new Map();
        this._selectorTemplates = new Map();
        this._keyCount = 0;
        this._cellUpdating = null;
        this._cellUpdating_wrapped = null;
        this.cellInfoChanged = this.cellInfoChanged.bind(this);
        this._templateRef = this._templateRef.bind(this);
    }
    createImplementation() {
        return new TemplateColumn();
    }
    get i() {
        return this._implementation;
    }
    beforeStyleKeyRequested(s, e) {
        if (this.template == null && this.templateSelector == null) {
            return;
        }
        if (!this._hasSelector) {
            return;
        }
        var selector = this._templateSelector;
        if (selector == null) {
            return;
        }
        var actualTemplate = this._templateSelector(this, e.resolvedValue);
        if (actualTemplate == null) {
            return;
        }
        let key;
        if (this._selectorStyles.has(actualTemplate)) {
            key = this._selectorStyles.get(actualTemplate);
            e.styleKey = key;
        }
        else {
            if (this._selectorStyles.size < 1000) {
                key = "template_" + this.field + "_" + this._keyCount;
                this._selectorStyles.set(actualTemplate, key);
                this._selectorTemplates[key] = actualTemplate;
                this._keyCount++;
                e.styleKey = key;
            }
        }
    }
    render() {
        // if (!this._childrenDiffer(this.props.children)) {
        // 	let div = React.createElement("div", {
        // 		ref: (ref) => {
        // 			this._elRef = ref;
        // 		},
        // 		children: this.props.children
        // 	});
        // 	return div;
        // } else {
        let children = [];
        if (this._templateCells && this._templateCells.length > 0) {
            for (let i = 0; i < this._templateCells.length; i++) {
                let t = this._templateCells[i];
                if (this._activeCellContentElements.has(t)) {
                    children.push(this._activeCellContentElements.get(t));
                }
                else {
                    let tEle = createElement(IgrTemplateContainer, {
                        ref: this._templateRef,
                        key: this._templateCells[i].key,
                        owner: this._templateCells[i],
                        omitContainer: true
                    });
                    let portal = createPortal(tEle, t, this._templateCells[i].key);
                    this._activeCellContentElements.set(t, portal);
                    children.push(portal);
                }
            }
        }
        else {
            return null;
        }
        let div = createElement("div", {
            children: children
        });
        return div;
        //}
    }
    _templateRef(t) {
        if (t === null) {
            return;
        }
        if (t.currentOwner) {
            if (this._templateCellInitialTemplate.has(t.currentOwner)) {
                t.template = this._templateCellInitialTemplate.get(t.currentOwner);
                this._templateCellInitialTemplate.delete(t.currentOwner);
            }
            if (this._templateCellInitialData.has(t.currentOwner)) {
                t.dataContext = this._templateCellInitialData.get(t.currentOwner);
                this._templateCellInitialTemplate.delete(t.currentOwner);
            }
        }
        this._activeCellContent.set(t.currentOwner, t);
    }
    beforeCellUpdating(s, e) {
        if (this.template == null && this.templateSelector == null) {
            return;
        }
        let info = e.cellInfo;
        let existingView;
        if (!info.isContentDirty &&
            !info.isDataDirty &&
            !info.isSizeDirty) {
            return;
        }
        var actualTemplate = this._template;
        if (this._hasSelector) {
            if (this._selectorTemplates.has(info.styleKey)) {
                actualTemplate = this._selectorTemplates.get(info.styleKey);
            }
        }
        var internalContent = e.content;
        if (internalContent == null) {
            return;
        }
        if (this._activeCellContent.has(internalContent)) {
            var templateView = this._activeCellContent.get(internalContent);
            templateView.dataContext = info;
            this.updateCellInfo(info);
            if (templateView.template != actualTemplate) {
                templateView.template = actualTemplate;
            }
            else {
                existingView = templateView;
            }
        }
        else {
            this._templateCells.push(internalContent);
            this._templateCellInitialData.set(internalContent, info);
            this.updateCellInfo(info);
            this._templateCellInitialTemplate.set(internalContent, actualTemplate);
            this.updateTemplates();
        }
    }
    updateCellInfo(info) {
        let oldInfo = this._currCellInfo;
        if (oldInfo != null) {
            oldInfo.removeOnChangedListener(this.cellInfoChanged);
        }
        this._currCellInfo = info;
        if (this._currCellInfo != null) {
            this._currCellInfo.addOnChangedListener(this.cellInfoChanged);
        }
    }
    cellInfoChanged() {
        this.updateTemplates();
    }
    dummyStyleKeyRequested(s, e) {
    }
    dummyCellUpdating(s, e) {
    }
    get hasTemplate() {
        return this._template != null || this._templateSelector != null;
    }
    get template() {
        return this._template;
    }
    set template(value) {
        let oldValue = this.hasTemplate;
        this._template = value;
        this.ensureTemplateEvents(oldValue);
        this.onTemplateChanged();
    }
    get templateSelector() {
        return this._templateSelector;
    }
    set templateSelector(value) {
        let oldValue = this.hasTemplate;
        this._templateSelector = value;
        this._hasSelector = this._templateSelector != null;
        this.ensureTemplateEvents(oldValue);
        this.onTemplateChanged();
    }
    onTemplateChanged() {
        this._selectorStyles.clear();
        this._selectorTemplates.clear();
        this._keyCount = 0;
    }
    updateTemplates() {
        this.setState({});
    }
    ensureTemplateEvents(oldValue) {
        if (this.hasTemplate && !oldValue) {
            if (!this.cellStyleKeyRequested) {
                this.cellStyleKeyRequested = this.dummyStyleKeyRequested;
                this._styleKeyRequested = null;
            }
            if (!this.cellUpdating) {
                this.cellUpdating = this.dummyCellUpdating;
                this._cellUpdating = null;
            }
        }
        if (!this.hasTemplate && oldValue) {
            if (!this.cellStyleKeyRequested) {
                this.cellStyleKeyRequested = null;
            }
            if (!this.cellUpdating) {
                this.cellUpdating = null;
            }
        }
    }
    /**
     * Called when the cell content is being created or updated.
    */
    get cellUpdating() {
        return this._cellUpdating;
    }
    set cellUpdating(ev) {
        if (this._cellUpdating_wrapped !== null) {
            this.i.cellUpdating = delegateRemove(this.i.cellUpdating, this._cellUpdating_wrapped);
            this._cellUpdating_wrapped = null;
            this._cellUpdating = null;
        }
        this._cellUpdating = ev;
        this._cellUpdating_wrapped = (o, e) => {
            let outerArgs = new IgrTemplateCellUpdatingEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeCellUpdating) {
                this.beforeCellUpdating(this, outerArgs);
            }
            if (this._cellUpdating) {
                this._cellUpdating(this, outerArgs);
            }
        };
        this.i.cellUpdating = delegateCombine(this.i.cellUpdating, this._cellUpdating_wrapped);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrTemplateColumnModule {
    static register() {
        TypeRegistrar.registerCons("IgrTemplateColumn", IgrTemplateColumn);
        TypeRegistrar.register("TemplateColumn", TemplateColumn.$type);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrCheckboxListModule {
    static register() {
        IgrDataGridCoreModule.register();
        IgrTextColumnModule.register();
        IgrNumericColumnModule.register();
        IgrDateTimeColumnModule.register();
        IgrTemplateColumnModule.register();
        IgrCheckboxModule.register();
        IgrInputGroupModule.register();
        TypeRegistrar.registerCons('IgrCheckboxList', IgrCheckboxList);
        TypeRegistrar.registerCons('IgrCheckboxList', IgrCheckboxList);
        TypeRegistrar.register('CheckboxList', CheckboxList.$type);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let ColumnChooserInfo = /*@__PURE__*/ (() => {
    class ColumnChooserInfo extends Base {
        constructor() {
            super();
            this.columnName = null;
            this.isNotHidden = false;
        }
    }
    ColumnChooserInfo.$t = /*@__PURE__*/ markType(ColumnChooserInfo, 'ColumnChooserInfo');
    return ColumnChooserInfo;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let ColumnChooserView = /*@__PURE__*/ (() => {
    class ColumnChooserView extends Base {
        constructor() {
            super();
            this.d = null;
            this.c = null;
            this.e = null;
            this.a = null;
            this.b = null;
        }
        h() {
        }
        g(a) {
            if (a == null) {
                this.b = null;
                return;
            }
            this.b = a;
            this.e = this.b.rootWrapper.getChildAt(0);
            this.e.setStyleProperty("margin", "4px 0px 4px 0px");
            this.k();
            this.j();
            let b = Math.round(a.rootWrapper.width());
            let c = Math.round(a.rootWrapper.height());
            this.b.rootWrapper.setStyleProperty("position", "relative");
            this.i();
        }
        i() {
            if (this.b != null) {
                this.b.rootWrapper.setStyleProperty("background-color", this.a.ao._fill);
            }
        }
        j() {
            if (this.b != null) {
                let a = this.b.rootWrapper.getChildAt(1);
                a.setStyleProperty("width", "100%");
                if (this.a.t != null) {
                    a.setStyleProperty("height", "calc(100% - 25px");
                }
                else {
                    a.setStyleProperty("height", "calc(100% - 5px");
                }
            }
        }
        k() {
            if (this.e != null && this.a.t != null) {
                this.e.setText(this.a.t);
                this.e.setStyleProperty("font", "16px \"Segoe UI\", Verdana");
            }
            this.l();
            this.m();
            this.j();
        }
        l() {
            if (this.e != null && this.a.ap != null) {
                this.e.setStyleProperty("color", this.a.ap._fill);
            }
        }
        m() {
            if (this.e != null && this.a.j != null) {
                this.e.setStyleProperty("font", this.a.j.fontString);
            }
        }
        f() {
        }
    }
    ColumnChooserView.$t = /*@__PURE__*/ markType(ColumnChooserView, 'ColumnChooserView');
    return ColumnChooserView;
})();
/**
 * @hidden
 */
let ColumnChooser = /*@__PURE__*/ (() => {
    class ColumnChooser extends Base {
        constructor() {
            super();
            this.c = null;
            this.h = null;
            this.propertyChanged = null;
            this.k = false;
            this.a = null;
            this.m = null;
            this.i = null;
            this.an = BrushUtil.g(255, 0, 153, 255);
            this.l = "Filter columns list ...";
            this.d = 1;
            this.f = 2;
            this.am = BrushUtil.g(255, 248, 248, 248);
            this.k = false;
            let a = new ColumnChooserView();
            a.a = this;
            this.c = a;
            this.c.h();
        }
        notifySizeChanged() {
            this.c.f();
        }
        destroy() {
            if (this.h != null) {
                let a = this.h;
                a.checkedChanged = delegateRemove(a.checkedChanged, runOn(this, this.aa));
                let b = this.h;
                b.selectAllCheckboxChanged = delegateRemove(b.selectAllCheckboxChanged, runOn(this, this.ab));
            }
            this.provideContainer(null, null);
            if (this.a != null) {
                let c = this.a.actualColumns;
                c.collectionChanged = delegateRemove(c.collectionChanged, runOn(this, this.x));
                let d = this.a;
                d.columnHiddenChanged = delegateRemove(d.columnHiddenChanged, runOn(this, this.ak));
            }
        }
        provideContainer(a, b) {
            this.h = b;
            if (this.h != null) {
                let c = this.h;
                c.checkedChanged = delegateCombine(c.checkedChanged, runOn(this, this.aa));
                let d = this.h;
                d.selectAllCheckboxChanged = delegateCombine(d.selectAllCheckboxChanged, runOn(this, this.ab));
            }
            this.y();
            this.c.g(a);
        }
        get b() {
            return this.a;
        }
        set b(a) {
            let b = this.a;
            this.a = a;
            if (b != this.a) {
                this.ae("TargetGrid", b, this.a);
            }
        }
        get t() {
            return this.m;
        }
        set t(a) {
            let b = this.m;
            this.m = a;
            if (b != this.m) {
                this.ae("Title", b, this.m);
            }
        }
        get j() {
            return this.i;
        }
        set j(a) {
            let b = this.i;
            this.i = a;
            if (b != this.i) {
                this.ae("TitleStyle", b, this.i);
            }
        }
        get ap() {
            return this.an;
        }
        set ap(a) {
            let b = this.an;
            this.an = a;
            if (b != this.an) {
                this.ae("TitleColor", b, this.an);
            }
        }
        get q() {
            return this.l;
        }
        set q(a) {
            let b = this.l;
            this.l = a;
            if (b != this.l) {
                this.ae("FilterPlaceholderText", b, this.l);
            }
        }
        get e() {
            return this.d;
        }
        set e(a) {
            let b = this.d;
            this.d = a;
            if (b != this.d) {
                this.ae("BaseTheme", enumGetBox(BaseControlTheme_$type, b), enumGetBox(BaseControlTheme_$type, this.d));
            }
        }
        get g() {
            return this.f;
        }
        set g(a) {
            let b = this.f;
            this.f = a;
            if (b != this.f) {
                this.ae("Density", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, this.f));
            }
        }
        get ao() {
            return this.am;
        }
        set ao(a) {
            let b = this.am;
            this.am = a;
            if (b != this.am) {
                this.ae("BackgroundColor", b, this.am);
            }
        }
        ae(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            this.af(a, b, c);
        }
        af(a, b, c) {
            switch (a) {
                case "TargetGrid":
                    if (b != null) {
                        let d = b.actualColumns;
                        d.collectionChanged = delegateRemove(d.collectionChanged, runOn(this, this.x));
                        let e = b;
                        e.columnHiddenChanged = delegateRemove(e.columnHiddenChanged, runOn(this, this.ak));
                    }
                    if (this.a != null) {
                        let f = this.a.actualColumns;
                        f.collectionChanged = delegateCombine(f.collectionChanged, runOn(this, this.x));
                        let g = this.a;
                        g.columnHiddenChanged = delegateCombine(g.columnHiddenChanged, runOn(this, this.ak));
                    }
                    this.y();
                    break;
                case "Title":
                    this.c.k();
                    break;
                case "TitleStyle":
                    this.c.m();
                    break;
                case "TitleColor":
                    this.c.l();
                    break;
                case "FilterPlaceholderText":
                    if (this.h != null) {
                        this.h.ax = this.q;
                    }
                    break;
                case "BaseTheme":
                    this.ai();
                    break;
                case "Density":
                    this.ah();
                    break;
                case "BackgroundColor":
                    if (this.h != null) {
                        this.h.cg = this.ao;
                    }
                    this.c.i();
                    break;
            }
        }
        ai() {
            if (this.h != null) {
                this.h.l = this.e;
            }
        }
        ah() {
            if (this.h != null) {
                this.h.n = this.g;
            }
        }
        ak(a, b) {
            if (this.k == false) {
                this.y();
            }
            this.k = false;
        }
        x(a, b) {
            this.y();
        }
        y() {
            if (this.a != null && this.h != null) {
                this.h.l = this.e;
                this.h.n = this.g;
                this.h.cg = this.ao;
                let a;
                let b = new ObservableCollection$1(ColumnChooserInfo.$, 0);
                for (let c of fromEnum(this.a.actualColumns)) {
                    a = new ColumnChooserInfo();
                    let d = c.hy;
                    if (c.h2 != null) {
                        d = c.h2;
                    }
                    a.columnName = d;
                    a.isNotHidden = !c.gd;
                    b.add(a);
                }
                if (this.q != null) {
                    this.h.ax = this.q;
                }
                this.h.itemsSource = b;
                let e = "";
                let f = "";
                e = "columnName";
                f = "isNotHidden";
                this.h.a9 = f;
                this.h.at = e;
                this.h.ag = true;
            }
        }
        al(a) {
            if (this.h != null) {
                this.h.updateHrMargin(a);
            }
        }
        aj() {
            this.h.b5();
            if (this.a != null) {
                for (let a of fromEnum(this.a.actualColumns)) {
                    this.k = true;
                    a.gd = false;
                }
            }
        }
        ac() {
            this.h.bh();
            if (this.a != null) {
                for (let a of fromEnum(this.a.actualColumns)) {
                    this.k = true;
                    a.gd = true;
                }
            }
        }
        ab(a, b) {
            this.k = true;
            if (b.a) {
                this.aj();
            }
            else {
                this.ac();
            }
        }
        aa(a, b) {
            this.k = true;
            let c = this.h.h.actualDataSource.getItemAtIndex(b.b);
            let d = this.a.actualColumns.count;
            for (let e = 0; e < d; e++) {
                if (this.a.actualColumns._inner[e].hy == c.columnName || this.a.actualColumns._inner[e].id == c.columnName || this.a.actualColumns._inner[e].h2 == c.columnName) {
                    this.a.actualColumns._inner[e].gd = !b.a;
                }
            }
        }
    }
    ColumnChooser.$t = /*@__PURE__*/ markType(ColumnChooser, 'ColumnChooser', Base.$, [INotifyPropertyChanged_$type]);
    return ColumnChooser;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*@__PURE__*/ IgrCheckboxListModule.register();
class IgrColumnChooser extends Component {
    constructor(props) {
        super(props);
        this._wrapper = null;
        this._implementation = null;
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._getMainRef = this._getMainRef.bind(this);
        this._getCheckboxListRef = this._getCheckboxListRef.bind(this);
        /*this._getShowAllRef = this._getShowAllRef.bind(this);
        this._getHideAllRef = this._getHideAllRef.bind(this);*/
        this._implementation = this.createImplementation();
        var columnChooser = this.i;
        this._columnChooser = columnChooser;
        columnChooser.notifySizeChanged();
        if (props) {
            this.initializeProperties();
        }
    }
    set height(value) {
        this._height = value;
        if (this._elRef) {
            this._elRef.style.height = value;
            this._columnChooser.notifySizeChanged();
        }
    }
    get height() {
        return this._height;
    }
    set width(value) {
        this._width = value;
        if (this._elRef) {
            this._elRef.style.height = value;
            this._columnChooser.notifySizeChanged();
        }
    }
    get width() {
        return this._width;
    }
    _getMainRef(ref) {
        this._elRef = ref;
        if (this._elRef != null && this._checkboxListRef != null) {
            this._renderer = new ReactRenderer(this._elRef, document, false, null);
            this._columnChooser.provideContainer(this._renderer, this._checkboxListRef.i);
        }
    }
    _getCheckboxListRef(ref) {
        this._checkboxListRef = ref;
        if (this._elRef != null && this._checkboxListRef != null) {
            this._renderer = new ReactRenderer(this._elRef, document, false, null);
            this._columnChooser.provideContainer(this._renderer, this._checkboxListRef.i);
        }
    }
    render() {
        let children = [];
        let title = createElement("span", {
            key: "titleSpan"
        });
        children.push(title);
        let checkboxList = createElement(IgrCheckboxList, {
            ref: this._getCheckboxListRef,
            key: "checkboxList"
        });
        children.push(checkboxList);
        let div = createElement("div", {
            className: "ig-column-chooser igr-column-chooser",
            ref: this._getMainRef,
            children: children
        });
        return div;
    }
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    initializeProperties() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    // supports angular themes or custom properties set in CSS
    updateStyle() {
        this._styling(this._elRef, this);
    }
    componentWillUnmount() {
        this._columnChooser.destroy();
        if (this._renderer) {
            this._renderer.destroy();
        }
    }
    componentDidMount() {
        this._elRef.style.width = this._width ? this._width : "";
        this._elRef.style.height = this._height ? this._height : "";
        this._columnChooser.notifySizeChanged();
        this.initializeContent();
    }
    initializeContent() {
        this.updateStyle();
        this.i.notifySizeChanged();
    }
    createImplementation() {
        return new ColumnChooser();
    }
    get i() {
        return this._implementation;
    }
    /**
 * Gets or Sets the property name that contains the values.
*/
    get targetGrid() {
        if (this.i.b == null) {
            return null;
        }
        return this.i.b.externalObject;
    }
    set targetGrid(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.b = null : this.i.b = v.i;
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get title() {
        return this.i.t;
    }
    set title(v) {
        this.i.t = v;
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get titleStyle() {
        if (this.i.j == null) {
            return null;
        }
        return this.i.j.fontString;
    }
    set titleStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.j = fi;
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get titleColor() {
        return brushToString(this.i.ap);
    }
    set titleColor(v) {
        this.i.ap = stringToBrush(v);
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get filterPlaceholderText() {
        return this.i.q;
    }
    set filterPlaceholderText(v) {
        this.i.q = v;
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get baseTheme() {
        return this.i.e;
    }
    set baseTheme(v) {
        this.i.e = ensureEnum(BaseControlTheme_$type, v);
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get density() {
        return this.i.g;
    }
    set density(v) {
        this.i.g = ensureEnum(ControlDisplayDensity_$type, v);
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get backgroundColor() {
        return brushToString(this.i.ao);
    }
    set backgroundColor(v) {
        this.i.ao = stringToBrush(v);
    }
    findByName(name) {
        if (this.targetGrid && this.targetGrid.name && this.targetGrid.name == name) {
            return this.targetGrid;
        }
        return null;
    }
    get hasUserValues() {
        return this._hasUserValues;
    }
    __m(propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    }
    _styling(container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        let genericPrefix = "";
        let typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("ColumnChooser");
        let additionalPrefixes = [];
        let prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        let b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            let basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            let parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            let parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this.targetGrid && this.targetGrid._styling) {
            this.targetGrid._styling(container, component, this);
        }
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrColumnChooserModule {
    static register() {
        IgrCheckboxListModule.register();
        IgrButtonModule.register();
        TypeRegistrar.registerCons('IgrColumnChooser', IgrColumnChooser);
        TypeRegistrar.registerCons('IgrColumnChooser', IgrColumnChooser);
        TypeRegistrar.register('ColumnChooser', ColumnChooser.$type);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let ColumnPinningInfo = /*@__PURE__*/ (() => {
    class ColumnPinningInfo extends Base {
        constructor() {
            super();
            this.columnName = null;
            this.isPinned = false;
        }
    }
    ColumnPinningInfo.$t = /*@__PURE__*/ markType(ColumnPinningInfo, 'ColumnPinningInfo');
    return ColumnPinningInfo;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let ColumnPinningView = /*@__PURE__*/ (() => {
    class ColumnPinningView extends Base {
        constructor() {
            super();
            this.c = null;
            this.a = null;
            this.b = null;
        }
        f() {
        }
        e(a) {
            if (a == null) {
                this.b = null;
                return;
            }
            this.b = a;
            let b = Math.round(a.rootWrapper.width());
            let c = Math.round(a.rootWrapper.height());
            this.b.rootWrapper.setStyleProperty("position", "relative");
            this.g();
            this.c = this.b.rootWrapper.getChildAt(0);
            this.c.setStyleProperty("margin", "4px 0px 4px 0px");
            this.i();
            this.h();
        }
        g() {
            if (this.b != null) {
                this.b.rootWrapper.setStyleProperty("background-color", this.a.al._fill);
            }
        }
        i() {
            if (this.c != null && this.a.t != null) {
                this.c.setText(this.a.t);
                this.c.setStyleProperty("font", "16px \"Segoe UI\", Verdana");
            }
            this.j();
            this.k();
            this.h();
        }
        j() {
            if (this.c != null && this.a.am != null) {
                this.c.setStyleProperty("color", this.a.am._fill);
            }
        }
        k() {
            if (this.c != null && this.a.j != null) {
                this.c.setStyleProperty("font", this.a.j.fontString);
            }
        }
        h() {
            if (this.b != null) {
                let a = this.b.rootWrapper.getChildAt(1);
                a.setStyleProperty("width", "100%");
                if (this.a.t != null) {
                    a.setStyleProperty("height", "calc(100% - 25px");
                }
                else {
                    a.setStyleProperty("height", "calc(100% - 5px");
                }
            }
        }
        d() {
        }
    }
    ColumnPinningView.$t = /*@__PURE__*/ markType(ColumnPinningView, 'ColumnPinningView');
    return ColumnPinningView;
})();
/**
 * @hidden
 */
let ColumnPinning = /*@__PURE__*/ (() => {
    class ColumnPinning extends Base {
        constructor() {
            super();
            this.c = null;
            this.h = null;
            this.propertyChanged = null;
            this.k = false;
            this.a = null;
            this.m = null;
            this.i = null;
            this.ak = BrushUtil.g(255, 0, 153, 255);
            this.l = "Filter columns list ...";
            this.d = 1;
            this.f = 2;
            this.aj = BrushUtil.g(255, 248, 248, 248);
            this.k = false;
            let a = new ColumnPinningView();
            a.a = this;
            this.c = a;
            this.c.f();
        }
        ai(a) {
            if (this.h != null) {
                this.h.updateHrMargin(a);
            }
        }
        notifySizeChanged() {
            this.c.d();
        }
        destroy() {
            if (this.h != null) {
                let a = this.h;
                a.checkedChanged = delegateRemove(a.checkedChanged, runOn(this, this.ac));
            }
            this.provideContainer(null, null);
            if (this.a != null) {
                let b = this.a.actualColumns;
                b.collectionChanged = delegateRemove(b.collectionChanged, runOn(this, this.x));
                let c = this.a;
                c.columnPinnedChanged = delegateRemove(c.columnPinnedChanged, runOn(this, this.ah));
            }
        }
        provideContainer(a, b) {
            this.h = b;
            if (this.h != null) {
                let c = this.h;
                c.checkedChanged = delegateCombine(c.checkedChanged, runOn(this, this.ac));
            }
            this.y();
            this.c.e(a);
        }
        get b() {
            return this.a;
        }
        set b(a) {
            let b = this.a;
            this.a = a;
            if (b != this.a) {
                this.ab("TargetGrid", b, this.a);
            }
        }
        get t() {
            return this.m;
        }
        set t(a) {
            let b = this.m;
            this.m = a;
            if (b != this.m) {
                this.ab("Title", b, this.m);
            }
        }
        get j() {
            return this.i;
        }
        set j(a) {
            let b = this.i;
            this.i = a;
            if (b != this.i) {
                this.ab("TitleStyle", b, this.i);
            }
        }
        get am() {
            return this.ak;
        }
        set am(a) {
            let b = this.ak;
            this.ak = a;
            if (b != this.ak) {
                this.ab("TitleColor", b, this.ak);
            }
        }
        get q() {
            return this.l;
        }
        set q(a) {
            let b = this.l;
            this.l = a;
            if (b != this.l) {
                this.ab("FilterPlaceholderText", b, this.l);
            }
        }
        get e() {
            return this.d;
        }
        set e(a) {
            let b = this.d;
            this.d = a;
            if (b != this.d) {
                this.ab("BaseTheme", enumGetBox(BaseControlTheme_$type, b), enumGetBox(BaseControlTheme_$type, this.d));
            }
        }
        get g() {
            return this.f;
        }
        set g(a) {
            let b = this.f;
            this.f = a;
            if (b != this.f) {
                this.ab("Density", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, this.f));
            }
        }
        get al() {
            return this.aj;
        }
        set al(a) {
            let b = this.aj;
            this.aj = a;
            if (b != this.aj) {
                this.ab("BackgroundColor", b, this.aj);
            }
        }
        ab(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            this.ad(a, b, c);
        }
        ad(a, b, c) {
            switch (a) {
                case "TargetGrid":
                    if (b != null) {
                        let d = b.actualColumns;
                        d.collectionChanged = delegateRemove(d.collectionChanged, runOn(this, this.x));
                        let e = b;
                        e.columnPinnedChanged = delegateRemove(e.columnPinnedChanged, runOn(this, this.ah));
                    }
                    if (this.a != null) {
                        let f = this.a.actualColumns;
                        f.collectionChanged = delegateCombine(f.collectionChanged, runOn(this, this.x));
                        let g = this.a;
                        g.columnPinnedChanged = delegateCombine(g.columnPinnedChanged, runOn(this, this.ah));
                    }
                    this.y();
                    break;
                case "Title":
                    this.c.i();
                    break;
                case "TitleStyle":
                    this.c.k();
                    break;
                case "TitleColor":
                    this.c.j();
                    break;
                case "FilterPlaceholderText":
                    if (this.h != null) {
                        this.h.ax = this.q;
                    }
                    break;
                case "BaseTheme":
                    this.ag();
                    break;
                case "Density":
                    this.af();
                    break;
                case "BackgroundColor":
                    if (this.h != null) {
                        this.h.cg = this.al;
                    }
                    this.c.g();
                    break;
            }
        }
        ag() {
            if (this.h != null) {
                this.h.l = this.e;
            }
        }
        af() {
            if (this.h != null) {
                this.h.n = this.g;
            }
        }
        ah(a, b) {
            if (this.k == false) {
                this.y();
            }
            this.k = false;
        }
        x(a, b) {
            this.y();
        }
        y() {
            if (this.a != null && this.h != null) {
                this.h.l = this.e;
                this.h.n = this.g;
                this.h.cg = this.al;
                let a;
                let b = new ObservableCollection$1(ColumnPinningInfo.$, 0);
                for (let c of fromEnum(this.a.actualColumns)) {
                    a = new ColumnPinningInfo();
                    let d = c.hy;
                    if (c.h2 != null) {
                        d = c.h2;
                    }
                    a.columnName = d;
                    if (c.fk == 1) {
                        a.isPinned = true;
                    }
                    else {
                        a.isPinned = false;
                    }
                    b.add(a);
                }
                this.h.ag = false;
                if (this.q != null) {
                    this.h.ax = this.q;
                }
                this.h.itemsSource = b;
                let e = "";
                let f = "";
                e = "columnName";
                f = "isPinned";
                this.h.a9 = f;
                this.h.at = e;
            }
        }
        ac(a, b) {
            this.k = true;
            let c = this.h.h.actualDataSource.getItemAtIndex(b.b);
            let d = this.a.actualColumns.count;
            for (let e = 0; e < d; e++) {
                if (this.a.actualColumns._inner[e].hy == c.columnName || this.a.actualColumns._inner[e].id == c.columnName || this.a.actualColumns._inner[e].h2 == c.columnName) {
                    if (this.a.actualColumns._inner[e].fk == 0) {
                        this.a.actualColumns._inner[e].fk = 1;
                    }
                    else if (this.a.actualColumns._inner[e].fk == 2) {
                        this.a.actualColumns._inner[e].fk = 1;
                    }
                    else {
                        this.a.actualColumns._inner[e].fk = 0;
                    }
                    break;
                }
            }
        }
    }
    ColumnPinning.$t = /*@__PURE__*/ markType(ColumnPinning, 'ColumnPinning', Base.$, [INotifyPropertyChanged_$type]);
    return ColumnPinning;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*@__PURE__*/ IgrCheckboxListModule.register();
class IgrColumnPinning extends Component {
    constructor(props) {
        super(props);
        this._wrapper = null;
        this._implementation = null;
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._getMainRef = this._getMainRef.bind(this);
        this._getCheckboxListRef = this._getCheckboxListRef.bind(this);
        this._implementation = this.createImplementation();
        var columnPinning = this.i;
        this._columnPinning = columnPinning;
        columnPinning.notifySizeChanged();
        if (props) {
            this.initializeProperties();
        }
    }
    set height(value) {
        this._height = value;
        if (this._elRef) {
            this._elRef.style.height = value;
            this._columnPinning.notifySizeChanged();
        }
    }
    get height() {
        return this._height;
    }
    set width(value) {
        this._width = value;
        if (this._elRef) {
            this._elRef.style.height = value;
            this._columnPinning.notifySizeChanged();
        }
    }
    get width() {
        return this._width;
    }
    _getMainRef(ref) {
        this._elRef = ref;
        if (this._elRef != null && this._checkboxListRef != null) {
            this._renderer = new ReactRenderer(this._elRef, document, false, null);
            this._columnPinning.provideContainer(this._renderer, this._checkboxListRef.i);
        }
    }
    _getCheckboxListRef(ref) {
        this._checkboxListRef = ref;
        if (this._elRef != null && this._checkboxListRef != null) {
            this._renderer = new ReactRenderer(this._elRef, document, false, null);
            this._columnPinning.provideContainer(this._renderer, this._checkboxListRef.i);
        }
    }
    render() {
        let children = [];
        let title = createElement("span", {
            key: "titleSpan"
        });
        children.push(title);
        let checkboxList = createElement(IgrCheckboxList, {
            ref: this._getCheckboxListRef,
            key: "checkboxList"
        });
        children.push(checkboxList);
        let div = createElement("div", {
            className: "ig-column-pinning igr-column-pinning",
            ref: this._getMainRef,
            children: children
        });
        return div;
    }
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    initializeProperties() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    // supports angular themes or custom properties set in CSS
    updateStyle() {
        this._styling(this._elRef, this);
    }
    componentWillUnmount() {
        this._columnPinning.destroy();
        if (this._renderer) {
            this._renderer.destroy();
        }
    }
    componentDidMount() {
        this._elRef.style.width = this._width ? this._width : "";
        this._elRef.style.height = this._height ? this._height : "";
        this._columnPinning.notifySizeChanged();
        this.initializeContent();
    }
    initializeContent() {
        this.updateStyle();
        this.i.notifySizeChanged();
    }
    createImplementation() {
        return new ColumnPinning();
    }
    get i() {
        return this._implementation;
    }
    /**
 * Gets or Sets the property name that contains the values.
*/
    get targetGrid() {
        if (this.i.b == null) {
            return null;
        }
        return this.i.b.externalObject;
    }
    set targetGrid(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.b = null : this.i.b = v.i;
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get title() {
        return this.i.t;
    }
    set title(v) {
        this.i.t = v;
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get titleStyle() {
        if (this.i.j == null) {
            return null;
        }
        return this.i.j.fontString;
    }
    set titleStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.j = fi;
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get titleColor() {
        return brushToString(this.i.am);
    }
    set titleColor(v) {
        this.i.am = stringToBrush(v);
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get filterPlaceholderText() {
        return this.i.q;
    }
    set filterPlaceholderText(v) {
        this.i.q = v;
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get baseTheme() {
        return this.i.e;
    }
    set baseTheme(v) {
        this.i.e = ensureEnum(BaseControlTheme_$type, v);
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get density() {
        return this.i.g;
    }
    set density(v) {
        this.i.g = ensureEnum(ControlDisplayDensity_$type, v);
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get backgroundColor() {
        return brushToString(this.i.al);
    }
    set backgroundColor(v) {
        this.i.al = stringToBrush(v);
    }
    findByName(name) {
        if (this.targetGrid && this.targetGrid.name && this.targetGrid.name == name) {
            return this.targetGrid;
        }
        return null;
    }
    get hasUserValues() {
        return this._hasUserValues;
    }
    __m(propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    }
    _styling(container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        let genericPrefix = "";
        let typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("ColumnPinning");
        let additionalPrefixes = [];
        let prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        let b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            let basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            let parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            let parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this.targetGrid && this.targetGrid._styling) {
            this.targetGrid._styling(container, component, this);
        }
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrColumnPinningModule {
    static register() {
        IgrCheckboxListModule.register();
        TypeRegistrar.registerCons('IgrColumnPinning', IgrColumnPinning);
        TypeRegistrar.registerCons('IgrColumnPinning', IgrColumnPinning);
        TypeRegistrar.register('ColumnPinning', ColumnPinning.$type);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/**
 * Represents an Image grid column, used to allow the developer to display an image in a cell.
*/
class IgrImageColumn extends IgrColumn {
    createImplementation() {
        return new ImageColumn();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
    }
    /**
     * Gets or sets the stretch option to use when rendering images
    */
    get imageStretchOption() {
        return this.i.jt;
    }
    set imageStretchOption(v) {
        this.i.jt = ensureEnum(ImageStretchOptions_$type, v);
    }
    /**
     * Gets or sets the editor type used for editing cells in this column.
    */
    get editorType() {
        return this.i.jp;
    }
    set editorType(v) {
        this.i.jp = ensureEnum(EditorType_$type, v);
    }
    /**
     * Gets or sets the ComboBox data source.
    */
    get editorDataSource() {
        return this.i.ju;
    }
    set editorDataSource(v) {
        this.i.ju = v;
    }
    /**
     * Gets or sets the ComboBox text field.
    */
    get editorTextField() {
        return this.i.jv;
    }
    set editorTextField(v) {
        this.i.jv = v;
    }
    /**
     * Gets or sets the ComboBox value field.
    */
    get editorValueField() {
        return this.i.jo;
    }
    set editorValueField(v) {
        this.i.jo = v;
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrImageColumnModule {
    static register() {
        TypeRegistrar.registerCons("IgrImageColumn", IgrImageColumn);
        TypeRegistrar.register("ImageColumn", ImageColumn.$type);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let TemplateHeaderCellUpdatingEventArgs = /*@__PURE__*/ (() => {
    class TemplateHeaderCellUpdatingEventArgs extends EventArgs {
        constructor() {
            super(...arguments);
            this._cellInfo = null;
            this._content = null;
        }
        get cellInfo() {
            return this._cellInfo;
        }
        set cellInfo(a) {
            this._cellInfo = a;
        }
        get content() {
            return this._content;
        }
        set content(a) {
            this._content = a;
        }
    }
    TemplateHeaderCellUpdatingEventArgs.$t = /*@__PURE__*/ markType(TemplateHeaderCellUpdatingEventArgs, 'TemplateHeaderCellUpdatingEventArgs', EventArgs.$);
    return TemplateHeaderCellUpdatingEventArgs;
})();

/**
 * Information about the header cell that has content which is being created or updated.
*/
class IgrTemplateHeaderCellUpdatingEventArgs {
    createImplementation() {
        return new TemplateHeaderCellUpdatingEventArgs();
    }
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    get isCanvasBased() {
        return this.i.content.isCanvasBased;
    }
    /**
     * The host in which to add or update content if this is a DOM based cell.
    */
    get content() {
        if (this.isCanvasBased) {
            return null;
        }
        else {
            return this.i.content.element.getNativeElement();
        }
    }
    get context() {
        if (this.isCanvasBased) {
            return this.i.content.templateContext;
        }
        else {
            return null;
        }
    }
    ensureCorrectSize() {
        return this.i.content.ensureCorrectSize();
    }
    renderStandardBackground() {
        this.i.content.renderStandardBackground();
    }
    renderStandardContent() {
        this.i.content.renderStandardContent();
    }
    /**
     * The backing information for the current cell.
    */
    get cellInfo() {
        if (this.i.cellInfo == null) {
            return null;
        }
        if (!this.i.cellInfo.externalObject) {
            let ext = null;
            switch (this.i.cellInfo.$type.name) {
                case "DateTimeCellModel":
                    ext = new IgrDateTimeCellInfo();
                    break;
                case "ImageCellModel":
                    ext = new IgrImageCellInfo();
                    break;
                case "NumericCellModel":
                    ext = new IgrNumericCellInfo();
                    break;
                case "RowSeparatorModel":
                    ext = new IgrRowSeparatorInfo();
                    break;
                case "SectionHeaderCellModel":
                    ext = new IgrSectionHeaderCellInfo();
                    break;
                case "TemplateCellModel":
                    ext = new IgrTemplateCellInfo();
                    break;
                case "TemplateHeaderCellModel":
                    ext = new IgrTemplateHeaderCellInfo();
                    break;
                case "TemplateSectionHeaderCellModel":
                    ext = new IgrTemplateSectionHeaderCellInfo();
                    break;
                case "TextCellModel":
                    ext = new IgrTextCellInfo();
                    break;
                case "TextHeaderCellModel":
                    ext = new IgrTextHeaderCellInfo();
                    break;
            }
            ext._implementation = this.i.cellInfo;
            this.i.cellInfo.externalObject = ext;
        }
        return this.i.cellInfo.externalObject;
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let TemplateHeader = /*@__PURE__*/ (() => {
    class TemplateHeader extends Header {
        constructor() {
            super();
            this.cellUpdating = null;
        }
        l(a) {
            return new TemplateHeaderCellModel();
        }
        cm(a, b, c) {
            let d = "template-header-" + a.az.toString();
            return d;
        }
        cy(a, b, c, d) {
            super.cy(a, b, c, d);
            let e = a;
            let f = b.a0(a.k);
            e.ks = f.hh;
            e.m = f.e6;
            e.kv = f.f3;
        }
        fd(a, b) {
            if (this.cellUpdating != null) {
                this.cellUpdating(this, ((() => {
                    let $ret = new TemplateHeaderCellUpdatingEventArgs();
                    $ret.cellInfo = a;
                    $ret.content = b;
                    return $ret;
                })()));
            }
        }
    }
    TemplateHeader.$t = /*@__PURE__*/ markType(TemplateHeader, 'TemplateHeader', Header.$);
    return TemplateHeader;
})();

/**
 * A type of header with customizable content.
*/
class IgrTemplateHeader extends IgrHeader {
    constructor(props) {
        super(props);
        this._cellUpdating = null;
        this._cellUpdating_wrapped = null;
    }
    createImplementation() {
        return new TemplateHeader();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    /**
     * Called when the header cell content is being created or updated.
    */
    get cellUpdating() {
        return this._cellUpdating;
    }
    set cellUpdating(ev) {
        if (this._cellUpdating_wrapped !== null) {
            this.i.cellUpdating = delegateRemove(this.i.cellUpdating, this._cellUpdating_wrapped);
            this._cellUpdating_wrapped = null;
            this._cellUpdating = null;
        }
        this._cellUpdating = ev;
        this._cellUpdating_wrapped = (o, e) => {
            let outerArgs = new IgrTemplateHeaderCellUpdatingEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeCellUpdating) {
                this.beforeCellUpdating(this, outerArgs);
            }
            if (this._cellUpdating) {
                this._cellUpdating(this, outerArgs);
            }
        };
        this.i.cellUpdating = delegateCombine(this.i.cellUpdating, this._cellUpdating_wrapped);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrTemplateHeaderModule {
    static register() {
        TypeRegistrar.registerCons("IgrTemplateHeader", IgrTemplateHeader);
        TypeRegistrar.register("TemplateHeader", TemplateHeader.$type);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/**
 * A combobox column.
*/
class IgrComboBoxColumn extends IgrColumn {
    createImplementation() {
        return new ComboBoxColumn();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
    }
    /**
     * Gets the actual data source that is being used by the combo. If a collection was provided for the combobox data, an implicit LocalDataSource is created, and this is available via this property.
    */
    get actualDataSource() {
        return this.i.jq;
    }
    set actualDataSource(v) {
        this.i.jq = v;
    }
    /**
     * Gets or sets the ComboBox data source.
    */
    get dataSource() {
        return this.i.jr;
    }
    set dataSource(v) {
        this.i.jr = v;
    }
    /**
     * Gets or sets the ComboBox text field.
    */
    get textField() {
        return this.i.jv;
    }
    set textField(v) {
        this.i.jv = v;
    }
    /**
     * Gets or sets the ComboBox value field.
    */
    get valueField() {
        return this.i.jo;
    }
    set valueField(v) {
        this.i.jo = v;
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrComboBoxColumnModule {
    static register() {
        TypeRegistrar.registerCons("IgrComboBoxColumn", IgrComboBoxColumn);
        TypeRegistrar.register("ComboBoxColumn", ComboBoxColumn.$type);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrDataGridAllColumnsModule {
    static register() {
        IgrNumericColumnModule.register();
        IgrDateTimeColumnModule.register();
        IgrImageColumnModule.register();
        IgrTemplateColumnModule.register();
        IgrTemplateContentModule.register();
        IgrTextColumnModule.register();
        IgrTemplateHeaderModule.register();
        IgrComboBoxColumnModule.register();
        IgrDataGridCoreModule.register();
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridColumnOptionsViewBase = /*@__PURE__*/ (() => {
    class GridColumnOptionsViewBase extends Base {
        constructor() {
            super(...arguments);
            this.d = null;
            this.f = null;
            this.a = null;
        }
        get g() {
            return this.f;
        }
        get b() {
            return this.a;
        }
        get e() {
            return this.d;
        }
        c() {
            let a = this.f.outerWidth();
            let b = this.f.outerHeight();
            let c = new SizeData(a, b);
            return c;
        }
        k() {
        }
        m() {
            let a = this.g;
            if (null != a) {
                NativeUI.j(a, this.b.bk);
                NativeUI.n(a, this.b.bn);
            }
        }
        l(a) {
            if (a == null) {
                this.d = null;
                this.f = null;
                this.k();
                return;
            }
            this.d = a;
            let b = this.d.rootWrapper;
            this.h(b);
        }
        h(a) {
            this.f = a;
            this.k();
            this.m();
        }
        i(a) {
            this.a = a;
        }
        j() {
        }
    }
    GridColumnOptionsViewBase.$t = /*@__PURE__*/ markType(GridColumnOptionsViewBase, 'GridColumnOptionsViewBase');
    return GridColumnOptionsViewBase;
})();
/**
 * @hidden
 */
let GridColumnOptionsUtilities = /*@__PURE__*/ (() => {
    class GridColumnOptionsUtilities extends Base {
        static d(a, b, c, d, e, f, g = false) {
            let h = a.createElement("label");
            e = a.createElement("input");
            e.setAttribute("type", "checkbox");
            if (!stringIsNullOrEmpty(b)) {
                e.setAttribute("id", b);
            }
            if (!stringIsNullOrEmpty(d)) {
                e.setAttribute("AccessKey", d);
            }
            f = a.createElement("text");
            f.setRawText(c);
            if (g) {
                h.append(f);
                h.append(e);
            }
            else {
                h.append(e);
                h.append(f);
            }
            return {
                ret: h,
                p4: e,
                p5: f
            };
        }
        static e(a, b, c, d, e, f) {
            let g = a.createElement("label");
            f = a.createElement("input");
            f.setAttribute("name", c);
            f.setAttribute("type", "radio");
            f.setAttribute("id", b);
            g.append(f);
            let h = a.createElement("text");
            h.setRawText(d);
            f.setAttribute("AccessKey", e);
            g.append(h);
            return {
                ret: g,
                p5: f
            };
        }
        static f(a, b, c, d, e, f, g, h, i = true, j = false) {
            let k;
            return {
                ret: ((() => { let l = GridColumnOptionsUtilities.g(a, b, 0, c, d, e, f, g, h, k, i, j); f = l.p6; g = l.p7; h = l.p8; k = l.p9; return l.ret; })()),
                p5: f,
                p6: g,
                p7: h
            };
        }
        static g(a, b, c, d, e, f, g, h, i, j, k = true, l = false, m = true) {
            let n = a.createElement("div");
            let o = a.getSubRenderer(n);
            g = new Button();
            g.provideContainer(o);
            g.s = c;
            g.h = d;
            g.d = e;
            let p = null != b;
            j = null;
            if (p) {
                j = a.createElement("div");
                j.setStyleProperty("display", "inline-block");
                h = new Icon();
                let q = a.getSubRenderer(j);
                h.provideContainer(q);
                h.svgPath = b;
                j.setStyleProperty("width", stringFormat("{0}px", f.width.toString()));
                j.setStyleProperty("height", stringFormat("{0}px", f.height.toString()));
                if (m) {
                    if (k) {
                        j.setStyleProperty("margin-right", "7px");
                    }
                    else {
                        j.setStyleProperty("margin-left", "7px");
                    }
                }
            }
            else {
                h = null;
            }
            i = o.createElement("label");
            i.setStyleProperty("display", "inline-block");
            i.setStyleProperty("margin", "0px");
            let r = a.createElement("div");
            r.setStyleProperty("display", "flex");
            r.setStyleProperty("flex-direction", "row");
            r.setStyleProperty("flex-wrap", "no-wrap");
            r.setStyleProperty("align-items", "center");
            if (k) {
                if (p) {
                    r.append(j);
                }
                r.append(i);
            }
            else {
                r.append(i);
                if (p) {
                    r.append(j);
                }
            }
            if (l) {
                r.setStyleProperty("justify-content", "space-between");
                g.hg = "1";
                n.setStyleProperty("display", "flex");
                n.setStyleProperty("flex-direction", "column");
                n.setStyleProperty("align-items", "stretch");
                g.gb = "flex";
                g.he = "column";
                g.fv = "stretch";
            }
            g.appendButtonContent(r);
            return {
                ret: n,
                p6: g,
                p7: h,
                p8: i,
                p9: j
            };
        }
        static h(a, b, c, d, e, f) {
            let g = a.createElement("div");
            let h = a.getSubRenderer(g);
            f = new ButtonGroup();
            f.k = d;
            f.g = e;
            f.provideContainer(h);
            f.p = 0;
            for (let i of fromEnum(b)) {
                f.buttons.add(i);
            }
            let j = g.getChildAt(0);
            for (let k of fromEnum(c)) {
                j.append(k);
            }
            return {
                ret: g,
                p5: f
            };
        }
        static b(a) {
            let b = a.getNativeElement();
            return b.checked;
        }
        static i(a, b) {
            let c = a.getNativeElement();
            c.checked = b;
        }
        static a(a) {
            switch (a) {
                case 0: return 1;
                case 1: return 2;
                default: return 1;
            }
        }
        static c(a) {
            switch (a) {
                case 1: return 0;
                case 2: return 1;
                case 0:
                default: return 0;
            }
        }
        static j(a, b, c = "block") {
            let d = b ? c : "none";
            a.setStyleProperty("display", d);
        }
        static l(a, b) {
            if (null != a) {
                a.d = b.i;
                a.h = b.p;
                a.v = b.z;
            }
        }
        static k(a, b) {
            if (null != a) {
                a.g = b.i;
                a.k = b.p;
            }
        }
    }
    GridColumnOptionsUtilities.$t = /*@__PURE__*/ markType(GridColumnOptionsUtilities, 'GridColumnOptionsUtilities');
    return GridColumnOptionsUtilities;
})();
/**
 * @hidden
 */
let GridColumnOptionsBase = /*@__PURE__*/ (() => {
    class GridColumnOptionsBase extends Base {
        constructor() {
            super();
            this.d = null;
            this.propertyChanged = null;
            this.ac = null;
            this.ae = null;
            this.e = null;
            this.ah = false;
            this.bi = GridColumnOptionsBase.bl;
            this.h = 0;
            this.g = 1;
            this.n = 0;
            this.l = 0;
            this.x = null;
            this.v = null;
            this.a = null;
            this.o = 0;
            this.m = 2;
            this.y = null;
            this.w = null;
            this.bj = GridColumnOptionsBase.bm;
            let a = this.f();
            this.e = a;
            this.onViewInitialized();
            a.i(this);
        }
        a8(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            this.ba(a, b, c);
        }
        get ad() {
            if (null == this.ac) {
                this.ac = new FontInfo();
                this.ac.n = "'Segoe UI', Verdana";
                this.ac.d = 12;
            }
            return this.ac;
        }
        get af() {
            if (null == this.ae) {
                this.ae = new FontInfo();
                this.ae.n = "'Segoe UI', Verdana";
                this.ae.d = 14;
            }
            return this.ae;
        }
        get ai() {
            return this.ah;
        }
        set ai(a) {
            let b = this.ah;
            this.ah = a;
            if (b != this.ah) {
                this.a8("AutoSize", b, this.ah);
            }
        }
        get bk() {
            return this.bi;
        }
        set bk(a) {
            let b = this.bi;
            this.bi = a;
            if (b != this.bi) {
                this.a8("BackgroundColor", b, a);
            }
        }
        get j() {
            return this.h;
        }
        set j(a) {
            let b = this.h;
            this.h = a;
            if (b != this.h) {
                this.a8("BaseTheme", enumGetBox(BaseControlTheme_$type, b), enumGetBox(BaseControlTheme_$type, a));
            }
        }
        get i() {
            return this.g;
        }
        set i(a) {
            let b = this.g;
            this.g = a;
            if (b != this.g) {
                this.a8("ActualBaseTheme", enumGetBox(BaseControlTheme_$type, b), enumGetBox(BaseControlTheme_$type, a));
            }
        }
        get buttonDensity() {
            return this.n;
        }
        set buttonDensity(a) {
            let b = this.n;
            this.n = a;
            if (b != this.n) {
                this.a8("ButtonDensity", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, a));
            }
        }
        get p() {
            return this.l;
        }
        set p(a) {
            let b = this.l;
            this.l = a;
            if (b != this.l) {
                this.a8("ActualButtonDensity", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, a));
            }
        }
        get ab() {
            return this.x;
        }
        set ab(a) {
            let b = this.x;
            this.x = a;
            if (b != this.x) {
                this.a8("ButtonTextStyle", b, this.x);
            }
        }
        get z() {
            return this.v;
        }
        set z(a) {
            let b = this.v;
            this.v = a;
            if (this.v != b) {
                this.a8("ActualButtonTextStyle", b, this.v);
            }
        }
        get column() {
            return this.a;
        }
        set column(a) {
            let b = this.a;
            if (b != a) {
                this.a1(false);
                this.a = a;
                this.a8("Column", b, this.a);
                this.a1(true);
            }
        }
        get density() {
            return this.o;
        }
        set density(a) {
            let b = this.o;
            this.o = a;
            if (b != this.o) {
                this.a8("Density", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, a));
            }
        }
        get q() {
            return this.m;
        }
        set q(a) {
            let b = this.m;
            this.m = a;
            if (b != this.m) {
                this.a8("ActualDensity", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, a));
            }
        }
        get ag() {
            return this.y;
        }
        set ag(a) {
            let b = this.y;
            this.y = a;
            if (b != this.y) {
                this.a8("LabelTextStyle", b, this.y);
            }
        }
        get aa() {
            return this.w;
        }
        set aa(a) {
            let b = this.w;
            this.w = a;
            if (this.w != b) {
                this.a8("ActualLabelTextStyle", b, this.w);
            }
        }
        get c() {
            let a = this.column;
            if (null == a) {
                return null;
            }
            return a.grid;
        }
        get bn() {
            return this.bj;
        }
        set bn(a) {
            let b = this.bj;
            this.bj = a;
            if (b != this.bj) {
                this.a8("TextColor", b, a);
            }
        }
        a3() {
            this.bg(this.d, this.c);
            this.e.m();
        }
        a4(a, b) {
            let c = this.column;
            if (null == c) {
                return;
            }
        }
        a5(a, b) {
        }
        a6(a, b) {
        }
        a7(a, b) {
        }
        onViewInitialized() {
        }
        ba(a, b, c) {
            switch (a) {
                case "Column":
                    this.a3();
                    break;
                case "LabelTextStyle":
                    this.bh();
                    break;
                case "ButtonTextStyle":
                    this.be();
                    break;
                case "BackgroundColor":
                case "TextColor":
                    this.e.m();
                    break;
                case "ButtonDensity":
                case "Density":
                    this.q = this.density == 0 ? 2 : this.density;
                    this.p = this.buttonDensity == 0 ? this.q : this.buttonDensity;
                    break;
                case "BaseTheme":
                    this.i = this.j == 0 ? 1 : this.j;
                    break;
            }
        }
        be() {
            this.z = (null == this.ab) ? this.ad : this.ab;
        }
        bg(a, b) {
            if (a != b) {
                this.bf(a, b);
            }
        }
        bf(a, b) {
            if (null != a) {
                this.a2(a, false);
            }
            if (null != b) {
                this.a2(b, true);
            }
            this.d = b;
        }
        bh() {
            this.aa = (null == this.ag) ? this.af : this.ag;
        }
        a1(a) {
            let b = this.column;
            if (null == b) {
                return;
            }
            if (a) {
                b.propertyChanged = delegateCombine(b.propertyChanged, runOn(this, this.a4));
            }
            else {
                b.propertyChanged = delegateRemove(b.propertyChanged, runOn(this, this.a4));
            }
        }
        a2(a, b) {
            if (b) {
                a.propertyChanged = delegateCombine(a.propertyChanged, runOn(this, this.a7));
                let c = a.actualColumns;
                c.collectionChanged = delegateCombine(c.collectionChanged, runOn(this, this.a5));
                a.a7.l(runOn(this, this.a6));
            }
            else {
                a.propertyChanged = delegateRemove(a.propertyChanged, runOn(this, this.a7));
                let d = a.actualColumns;
                d.collectionChanged = delegateRemove(d.collectionChanged, runOn(this, this.a5));
                a.a7.o(runOn(this, this.a6));
            }
        }
        bd(a) {
            GridColumnOptionsUtilities.l(a, this);
        }
        bc(a) {
            GridColumnOptionsUtilities.k(a, this);
        }
        destroy() {
            this.provideRenderer(null);
        }
        provideRenderer(a) {
            this.e.l(a);
        }
    }
    GridColumnOptionsBase.$t = /*@__PURE__*/ markType(GridColumnOptionsBase, 'GridColumnOptionsBase', Base.$, [INotifyPropertyChanged_$type]);
    GridColumnOptionsBase.bl = /*@__PURE__*/ BrushUtil.g(255, 248, 248, 248);
    GridColumnOptionsBase.bm = /*@__PURE__*/ BrushUtil.g(255, 24, 29, 31);
    return GridColumnOptionsBase;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridColumnOptionsSectionBase = /*@__PURE__*/ (() => {
    class GridColumnOptionsSectionBase extends GridColumnOptionsBase {
        constructor() {
            super();
            this.bh();
            this.be();
        }
        ba(a, b, c) {
            super.ba(a, b, c);
            switch (a) {
                case "ActualLabelTextStyle":
                case "ActualBaseTheme":
                case "ActualButtonDensity":
                case "ActualButtonTextStyle":
                case "ActualDensity":
                    this.e.m();
                    break;
            }
        }
    }
    GridColumnOptionsSectionBase.$t = /*@__PURE__*/ markType(GridColumnOptionsSectionBase, 'GridColumnOptionsSectionBase', GridColumnOptionsBase.$);
    return GridColumnOptionsSectionBase;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridColumnOptionsSimpleSectionBase = /*@__PURE__*/ (() => {
    class GridColumnOptionsSimpleSectionBase extends GridColumnOptionsSectionBase {
        constructor() {
            super();
            this.br = null;
            this.bp = true;
        }
        get bs() {
            if (null == this.br) {
                return this.bu;
            }
            return this.br;
        }
        set bs(a) {
            let b = this.bs;
            if (0 == StringComparer.b.compare(a, b)) {
                return;
            }
            this.br = a;
            this.a8("Caption", b, this.br);
        }
        get bq() {
            return this.bp;
        }
        set bq(a) {
            let b = this.bq;
            if (a == b) {
                return;
            }
            this.bp = a;
            this.a8("ShowCaption", b, this.bp);
        }
        ba(a, b, c) {
            super.ba(a, b, c);
            switch (a) {
                case "ShowCaption":
                case "Caption":
                    this.e.m();
                    break;
            }
        }
    }
    GridColumnOptionsSimpleSectionBase.$t = /*@__PURE__*/ markType(GridColumnOptionsSimpleSectionBase, 'GridColumnOptionsSimpleSectionBase', GridColumnOptionsSectionBase.$);
    return GridColumnOptionsSimpleSectionBase;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridColumnGroupOptionsView = /*@__PURE__*/ (() => {
    class GridColumnGroupOptionsView extends GridColumnOptionsViewBase {
        constructor() {
            super(...arguments);
            this.s = null;
            this.p = null;
            this.r = null;
            this.o = null;
            this.t = null;
            this.q = false;
        }
        get n() {
            return this.b;
        }
        x() {
            if (null == this.p) {
                return;
            }
            this.q = true;
            try {
                let a = this.n.bz;
                if (a) {
                    this.p.svgPath = GridColumnGroupOptionsView.v;
                }
                else {
                    this.p.svgPath = GridColumnGroupOptionsView.u;
                }
            }
            finally {
                this.q = false;
            }
        }
        k() {
            super.k();
            if (null == this.g || null == this.e) {
                return;
            }
            let a = this.e;
            let b = this.n;
            let c = this.g;
            this.r = ((() => { let d = GridColumnOptionsUtilities.g(a, GridColumnGroupOptionsView.u, 1, b.p, b.j, new Size(1, 24, 24), this.o, this.p, this.s, this.t, false, true, false); this.o = d.p6; this.p = d.p7; this.s = d.p8; this.t = d.p9; return d.ret; })());
            let d = this.o;
            d.clicked = delegateCombine(d.clicked, runOn(this, this.w));
            c.append(this.r);
        }
        m() {
            super.m();
            this.x();
            let a = this.n;
            if (null != this.s) {
                this.s.setRawText(this.n.bs);
                let b = this.n.bq;
                GridColumnOptionsUtilities.j(this.s, b, "inline-block");
                if (b) {
                    this.o.s = 1;
                    this.o.fv = "stretch";
                    this.t.setStyleProperty("justify-content", "space-between");
                }
                else {
                    this.o.s = 4;
                    this.o.fv = "center";
                    this.t.setStyleProperty("justify-content", "center");
                }
                this.s.setStyleProperty("font", a.aa.fontString);
            }
            a.bd(this.o);
        }
        w(a, b) {
            if (this.q) {
                return;
            }
            let c = this.n.bz;
            this.n.bz = !c;
        }
    }
    GridColumnGroupOptionsView.$t = /*@__PURE__*/ markType(GridColumnGroupOptionsView, 'GridColumnGroupOptionsView', GridColumnOptionsViewBase.$);
    GridColumnGroupOptionsView.u = "M9,19v-2h11v2H9z M9,15v-2h11v2H9z M9,11V9h11v2H9z M7,7V5h13v2H7z M4,5h2v2H4V5z";
    GridColumnGroupOptionsView.v = "M16.8,18.3H9.6v-2h5.2l-2-2H9.6v-2h1.2L3.4,4.9l1.4-1.4l15.6,15.6L19,20.5L16.8,18.3z M20.6,14.3h-2.2l-2-2h4.2V14.3  L20.6,14.3z M20.6,10.3h-6.2l-2-2h8.2L20.6,10.3L20.6,10.3L20.6,10.3z M20.6,6.3H10.4l-2-2h12.2L20.6,6.3L20.6,6.3L20.6,6.3z";
    return GridColumnGroupOptionsView;
})();
/**
 * @hidden
 */
let GridColumnGroupOptions = /*@__PURE__*/ (() => {
    class GridColumnGroupOptions extends GridColumnOptionsSimpleSectionBase {
        constructor() {
            super();
        }
        f() {
            return new GridColumnGroupOptionsView();
        }
        get_bu() {
            return "Group Column";
        }
        get bu() {
            return this.get_bu();
        }
        bo() {
            if (null == this.column) {
                return false;
            }
            if (null == this.c) {
                return false;
            }
            return true;
        }
        bf(a, b) {
            if (null != a) {
                a.groupDescriptionsChanged = delegateRemove(a.groupDescriptionsChanged, runOn(this, this.b0));
            }
            if (null != b) {
                b.groupDescriptionsChanged = delegateCombine(b.groupDescriptionsChanged, runOn(this, this.b0));
            }
        }
        ba(a, b, c) {
            super.ba(a, b, c);
        }
        get bz() {
            let a;
            let b = this.bx(a);
            a = b.p0;
            return a != -1;
        }
        set bz(a) {
            if (a) {
                this.b1();
            }
            else {
                this.b2();
            }
        }
        get by() {
            return this.e;
        }
        bx(a) {
            let b = this.column;
            return {
                ret: ((() => { let c = GridColumnGroupOptions.bw(b, a); a = c.p1; return c.ret; })()),
                p0: a
            };
        }
        static bw(a, b) {
            if (null != a) {
                let c = a.grid;
                if (null != c) {
                    let d = a.hy;
                    let e = c.a7.i;
                    for (let f = 0; f < e.count; f++) {
                        let g = e.item(f);
                        let h = g.f;
                        if (0 == StringComparer.b.compare(d, h)) {
                            b = f;
                            return {
                                ret: g,
                                p1: b
                            };
                        }
                    }
                }
            }
            b = -1;
            return {
                ret: null,
                p1: b
            };
        }
        b1() {
            let a = this.c;
            let b = this.column;
            if (null != a && null != b) {
                let c = new ColumnGroupDescription(1, b.hy);
                let d = b.e6;
                let e = d != 0 ? GridColumnOptionsUtilities.c(d) : 0;
                c.c = e;
                a.a7.g(c);
                b.e6 = 0;
            }
        }
        b2() {
            let a = this.c;
            let b = this.column;
            if (null != a && null != b) {
                let c;
                let d = ((() => { let e = this.bx(c); c = e.p0; return e.ret; })());
                if (c != -1) {
                    a.a7.d(c);
                }
            }
        }
        b0(a, b) {
            this.by.m();
        }
    }
    GridColumnGroupOptions.$t = /*@__PURE__*/ markType(GridColumnGroupOptions, 'GridColumnGroupOptions', GridColumnOptionsSimpleSectionBase.$);
    return GridColumnGroupOptions;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridColumnSortOptionsView = /*@__PURE__*/ (() => {
    class GridColumnSortOptionsView extends GridColumnOptionsViewBase {
        constructor() {
            super(...arguments);
            this.v = null;
            this.u = null;
            this.z = null;
            this.q = null;
            this.w = null;
            this.o = null;
            this.p = null;
            this.r = null;
            this.s = null;
            this.t = false;
        }
        get n() {
            return this.b;
        }
        x() {
            let a = this.e;
            let b = this.n;
            let c = a.createElement("div");
            let d = new List$1(DomWrapper_$type, 0);
            let e = ((() => { let f = GridColumnOptionsUtilities.f(a, GridColumnSortOptionsView.ab, b.p, b.j, new Size(1, 18, 18), this.o, this.r, this.u, true, true); this.o = f.p5; this.r = f.p6; this.u = f.p7; return f.ret; })());
            let f = ((() => { let g = GridColumnOptionsUtilities.f(a, GridColumnSortOptionsView.aa, b.p, b.j, new Size(1, 18, 18), this.p, this.s, this.z, true, true); this.p = g.p5; this.s = g.p6; this.z = g.p7; return g.ret; })());
            d.add(e);
            d.add(f);
            let g = [this.o, this.p];
            let h = ((() => { let i = GridColumnOptionsUtilities.h(a, g, d, b.p, b.j, this.q); this.q = i.p5; return i.ret; })());
            let i = this.q;
            i.selectionChanged = delegateCombine(i.selectionChanged, runOn(this, this.ac));
            c.append(h);
            return c;
        }
        y() {
            let a = this.e.createElement("label");
            return a;
        }
        ad() {
            if (null == this.q) {
                return;
            }
            this.t = true;
            try {
                let a = this.n.bw;
                switch (a) {
                    case 0:
                        this.q.d = [];
                        break;
                    case 1:
                        this.q.d = [0];
                        break;
                    case 2:
                        this.q.d = [1];
                        break;
                }
            }
            finally {
                this.t = false;
            }
        }
        k() {
            super.k();
            if (null == this.g || null == this.e) {
                return;
            }
            this.w = this.y();
            this.v = this.x();
            let a = this.g;
            a.setStyleProperty("display", "flex");
            a.setStyleProperty("flex-direction", "row");
            a.setStyleProperty("flex-wrap", "no-wrap");
            a.setStyleProperty("justify-content", "space-between");
            a.setStyleProperty("align-items", "center");
            a.append(this.w);
            a.append(this.v);
        }
        m() {
            super.m();
            this.ad();
            let a = this.n;
            if (null != this.w) {
                this.w.setRawText(a.bs);
                if (a.bq) {
                    this.g.setStyleProperty("display", "flex");
                    this.w.setStyleProperty("display", "inline-block");
                }
                else {
                    this.g.setStyleProperty("display", "block");
                    this.w.setStyleProperty("display", "none");
                }
                this.w.setStyleProperty("font", a.aa.fontString);
            }
            if (null != this.u) {
                this.u.setRawText(this.n.bz);
            }
            if (null != this.z) {
                this.z.setRawText(this.n.b3);
            }
            a.bd(this.o);
            a.bd(this.p);
            a.bc(this.q);
            let b = a.bw == 1;
            let c = a.bw == 2;
        }
        ac(a, b) {
            if (this.t) {
                return;
            }
            let c;
            if (null == this.q || null == this.q.d || 0 == this.q.d.length) {
                c = 0;
            }
            else {
                if (this.q.d.length > 1) {
                }
                let d = this.q.d[0];
                switch (d) {
                    case 0:
                        c = 1;
                        break;
                    case 1:
                        c = 2;
                        break;
                    default:
                        c = 0;
                        break;
                }
            }
            this.n.bw = c;
        }
    }
    GridColumnSortOptionsView.$t = /*@__PURE__*/ markType(GridColumnSortOptionsView, 'GridColumnSortOptionsView', GridColumnOptionsViewBase.$);
    GridColumnSortOptionsView.ab = "M4 12l1.41 1.41L11 7.83V20h2V7.83l5.58 5.59L20 12l-8-8-8 8z";
    GridColumnSortOptionsView.aa = "M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z";
    return GridColumnSortOptionsView;
})();
/**
 * @hidden
 */
let GridColumnSortOptions = /*@__PURE__*/ (() => {
    class GridColumnSortOptions extends GridColumnOptionsSimpleSectionBase {
        constructor() {
            super();
            this.by = "Asc";
            this.b2 = "Desc";
        }
        f() {
            return new GridColumnSortOptionsView();
        }
        get_bu() {
            return "Sort";
        }
        get bu() {
            return this.get_bu();
        }
        bo() {
            if (null == this.column) {
                return false;
            }
            let a = this.c;
            if (null == a) {
                return true;
            }
            switch (a.d0) {
                case 1:
                case 3:
                case 0:
                case 2: return true;
                case 4: return false;
                default: break;
            }
            return true;
        }
        a4(a, b) {
            super.a4(a, b);
            let c = this.column;
            if (null == c) {
                return;
            }
            switch (b.propertyName) {
                case "SortDirection":
                    this.bx.m();
                    break;
            }
        }
        a6(a, b) {
            super.a6(a, b);
            this.bx.m();
        }
        ba(a, b, c) {
            super.ba(a, b, c);
            switch (a) {
                case "AscendingCaption":
                case "DescendingCaption":
                    this.bx.m();
                    break;
            }
        }
        get bx() {
            return this.e;
        }
        get bz() {
            return this.by;
        }
        set bz(a) {
            if (0 == StringComparer.b.compare(a, this.by)) {
                return;
            }
            let b = this.by;
            this.by = a;
            this.a8("AscendingCaption", b, this.by);
        }
        get b3() {
            return this.b2;
        }
        set b3(a) {
            if (0 == StringComparer.b.compare(a, this.b2)) {
                return;
            }
            let b = this.b2;
            this.b2 = a;
            this.a8("DescendingCaption", b, this.b2);
        }
        get bw() {
            let a = this.column;
            if (null != a) {
                let b;
                let c = ((() => { let d = GridColumnGroupOptions.bw(a, b); b = d.p1; return d.ret; })());
                if (null != c) {
                    let d = GridColumnOptionsUtilities.a(c.c);
                    return d;
                }
                return a.e6;
            }
            return 0;
        }
        set bw(a) {
            let b = this.column;
            if (null != b) {
                let c;
                let d = ((() => { let e = GridColumnGroupOptions.bw(b, c); c = e.p1; return e.ret; })());
                if (null != d) {
                    let e = b.grid;
                    if (e != null) {
                        let f = a != 0 ? GridColumnOptionsUtilities.c(a) : 0;
                        d.c = f;
                        e.a7.d(c);
                        e.a7.n(c, d);
                    }
                    return;
                }
                b.e6 = a;
            }
        }
    }
    GridColumnSortOptions.$t = /*@__PURE__*/ markType(GridColumnSortOptions, 'GridColumnSortOptions', GridColumnOptionsSimpleSectionBase.$);
    return GridColumnSortOptions;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

class IgrGridColumnOptionsBase extends Component {
    constructor(props) {
        super(props);
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    createImplementation() {
        return null;
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    } /**
                                 * @hidden
                                 */
    static _createFromInternal(internal) {
        if (!internal) {
            return null;
        }
        if (!internal.$type) {
            return null;
        }
        let name = internal.$type.name;
        let externalName = "Igr" + name;
        if (!TypeRegistrar.isRegistered(externalName)) {
            return null;
        }
        return TypeRegistrar.create(externalName);
    }
    onImplementationCreated() {
    }
    componentDidMount() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    render() {
        return null;
    }
    /**
     * Gets or sets the autoSize for which this AutoSizeOptions will apply.
    */
    get autoSize() {
        return this.i.ai;
    }
    set autoSize(v) {
        this.i.ai = ensureBool(v);
    }
    /**
     * Gets or sets the color to use for the background of the component.
    */
    get backgroundColor() {
        return brushToString(this.i.bk);
    }
    set backgroundColor(v) {
        this.i.bk = stringToBrush(v);
    }
    /**
     * Gets or sets the base built in theme to use for the component.
    */
    get baseTheme() {
        return this.i.j;
    }
    set baseTheme(v) {
        this.i.j = ensureEnum(BaseControlTheme_$type, v);
    }
    /**
     * Gets the actual display baseTheme to use for the component.
    */
    get actualBaseTheme() {
        return this.i.i;
    }
    set actualBaseTheme(v) {
        this.i.i = ensureEnum(BaseControlTheme_$type, v);
    }
    /**
     * Gets or sets the display Density to use for the buttons in the component.
    */
    get buttonDensity() {
        return this.i.buttonDensity;
    }
    set buttonDensity(v) {
        this.i.buttonDensity = ensureEnum(ControlDisplayDensity_$type, v);
    }
    /**
     * Gets the actual display buttonDensity to use for the component.
    */
    get actualButtonDensity() {
        return this.i.p;
    }
    set actualButtonDensity(v) {
        this.i.p = ensureEnum(ControlDisplayDensity_$type, v);
    }
    /**
     * Gets or sets the font to use for buttons.
    */
    get buttonTextStyle() {
        if (this.i.ab == null) {
            return null;
        }
        return this.i.ab.fontString;
    }
    set buttonTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.ab = fi;
    }
    /**
     * Gets or sets the column for which this ColumnOptions will apply.
    */
    get column() {
        if (this.i.column == null) {
            return null;
        }
        if (!this.i.column.externalObject) {
            let e = IgrColumn._createFromInternal(this.i.column);
            if (e) {
                e._implementation = this.i.column;
            }
            this.i.column.externalObject = e;
        }
        return this.i.column.externalObject;
    }
    set column(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.column = null : this.i.column = v.i;
    }
    /**
     * Gets or sets the display density to use for the component.
    */
    get density() {
        return this.i.density;
    }
    set density(v) {
        this.i.density = ensureEnum(ControlDisplayDensity_$type, v);
    }
    /**
     * Gets the actual display density to use for the component.
    */
    get actualDensity() {
        return this.i.q;
    }
    set actualDensity(v) {
        this.i.q = ensureEnum(ControlDisplayDensity_$type, v);
    }
    /**
     * Gets or sets the font to use for labels.
    */
    get labelTextStyle() {
        if (this.i.ag == null) {
            return null;
        }
        return this.i.ag.fontString;
    }
    set labelTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.ag = fi;
    }
    /**
     * Gets or sets the color to use for the text of the component.
    */
    get textColor() {
        return brushToString(this.i.bn);
    }
    set textColor(v) {
        this.i.bn = stringToBrush(v);
    }
    findByName(name) {
        if (this.column && this.column.name && this.column.name == name) {
            return this.column;
        }
        return null;
    }
    get hasUserValues() {
        return this._hasUserValues;
    }
    __m(propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    }
    _styling(container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        let genericPrefix = "";
        let typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("GridColumnOptionsBase");
        let additionalPrefixes = [];
        let prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        let b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            let basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            let parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            let parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this.column && this.column._styling) {
            this.column._styling(container, component, this);
        }
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    }
}

class IgrGridColumnOptionsSectionBase extends IgrGridColumnOptionsBase {
    constructor(props) {
        super(props);
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
}

class IgrGridColumnOptionsSimpleSectionBase extends IgrGridColumnOptionsSectionBase {
    constructor(props) {
        super(props);
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    get caption() {
        return this.i.bs;
    }
    set caption(v) {
        this.i.bs = v;
    }
    get showCaption() {
        return this.i.bq;
    }
    set showCaption(v) {
        this.i.bq = ensureBool(v);
    }
}

class IgrGridColumnSortOptions extends IgrGridColumnOptionsSimpleSectionBase {
    constructor(props) {
        super(props);
        this._reactRenderer = null;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._getMainRef = this._getMainRef.bind(this);
        if (document) {
            this._mainDiv = document.createElement("div");
            this._mainDiv.style.display = "block";
            this._mainDiv.style.width = "100%";
            this._mainDiv.style.height = "100%";
        }
        var ren = new ReactRenderer(this._mainDiv, document, true, DataGridStylingDefaults);
        this._reactRenderer = ren;
        var gridColumnSortOptions = this.i;
        gridColumnSortOptions.provideRenderer(ren);
        if (props) {
            this.initializeProperties();
        }
    }
    _getMainRef(ref) {
        this._elRef = ref;
    }
    render() {
        let children = [];
        Children.forEach(this.props.children, (ch) => {
            children.push(ch);
        });
        let div = createElement("div", {
            className: "ig-grid-column-sort-options igr-grid-column-sort-options",
            ref: this._getMainRef,
            children: children
        });
        return div;
    }
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    initializeProperties() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    // supports angular themes or custom properties set in CSS
    updateStyle() {
        this._styling(this._mainDiv, this);
    }
    componentWillUnmount() {
        this.i.destroy();
        this._reactRenderer.destroy();
    }
    componentDidMount() {
        this._elRef.appendChild(this._mainDiv);
        this.initializeContent();
    }
    initializeContent() {
        this._styling(this._mainDiv, this);
        this.updateStyle();
    }
    createImplementation() {
        return new GridColumnSortOptions();
    }
    get i() {
        return this._implementation;
    }
    get ascendingCaption() {
        return this.i.bz;
    }
    set ascendingCaption(v) {
        this.i.bz = v;
    }
    get descendingCaption() {
        return this.i.b3;
    }
    set descendingCaption(v) {
        this.i.b3 = v;
    }
    get sortDirection() {
        return this.i.bw;
    }
    set sortDirection(v) {
        this.i.bw = ensureEnum(ColumnSortDirection_$type, v);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrGridColumnSortOptionsModule {
    static register() {
        TypeRegistrar.registerCons('IgrGridColumnSortOptions', IgrGridColumnSortOptions);
        TypeRegistrar.registerCons('IgrGridColumnSortOptions', IgrGridColumnSortOptions);
        TypeRegistrar.register('GridColumnSortOptions', GridColumnSortOptions.$type);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridColumnMoveOptionsView = /*@__PURE__*/ (() => {
    class GridColumnMoveOptionsView extends GridColumnOptionsViewBase {
        constructor() {
            super(...arguments);
            this.q = null;
            this.v = null;
            this.w = null;
            this.o = null;
            this.p = null;
            this.r = null;
        }
        get n() {
            return this.b;
        }
        s() {
            let a = this.e;
            let b = a.createElement("div");
            let c = a.createElement("div");
            b.append(c);
            c.setStyleProperty("display", "flex");
            c.setStyleProperty("flexDirection", "row");
            c.setStyleProperty("flexWrap", "no-wrap");
            c.setStyleProperty("justify-content", "center");
            let d = ((() => { let e = this.u(true, this.v); this.v = e.p1; return e.ret; })());
            let e = ((() => { let f = this.u(false, this.w); this.w = f.p1; return f.ret; })());
            c.append(d);
            c.append(e);
            return b;
        }
        t() {
            let a = this.e.createElement("label");
            return a;
        }
        u(a, b) {
            let c = this.e;
            let d = this.n;
            let e = a ? GridColumnMoveOptionsView.x : GridColumnMoveOptionsView.y;
            let f;
            let g;
            let h;
            let i = ((() => { let j = GridColumnOptionsUtilities.g(c, e, 1, d.p, d.j, new Size(1, 18, 18), f, g, b, h, a, false); f = j.p6; g = j.p7; b = j.p8; h = j.p9; return j.ret; })());
            if (a) {
                this.o = f;
                f.clicked = delegateCombine(f.clicked, runOn(this, this.z));
            }
            else {
                this.p = f;
                f.clicked = delegateCombine(f.clicked, runOn(this, this.aa));
            }
            return {
                ret: i,
                p1: b
            };
        }
        k() {
            super.k();
            if (null == this.g || null == this.e) {
                return;
            }
            this.r = this.t();
            this.q = this.s();
            let a = this.g;
            a.setStyleProperty("display", "flex");
            a.setStyleProperty("flex-direction", "row");
            a.setStyleProperty("flex-wrap", "no-wrap");
            a.setStyleProperty("justify-content", "space-between");
            a.setStyleProperty("align-items", "center");
            a.append(this.r);
            a.append(this.q);
        }
        ab() {
            let a = this.n.by();
            let b = this.n.bz();
            if (null != this.o) {
                this.o.disabled = !a;
            }
            if (null != this.p) {
                this.p.disabled = !b;
            }
        }
        m() {
            super.m();
            let a = this.n;
            if (null != this.r) {
                this.r.setRawText(a.bs);
                let b = a.bq;
                if (a.bq) {
                    this.g.setStyleProperty("display", "flex");
                    this.r.setStyleProperty("display", "inline-block");
                }
                else {
                    this.g.setStyleProperty("display", "block");
                    this.r.setStyleProperty("display", "none");
                }
                this.r.setStyleProperty("font", a.aa.fontString);
            }
            if (null != this.v) {
                this.v.setRawText(this.n.b1);
            }
            if (null != this.w) {
                this.w.setRawText(this.n.b5);
            }
            a.bd(this.o);
            a.bd(this.p);
        }
        z(a, b) {
            this.n.b9();
        }
        aa(a, b) {
            this.n.cb();
        }
    }
    GridColumnMoveOptionsView.$t = /*@__PURE__*/ markType(GridColumnMoveOptionsView, 'GridColumnMoveOptionsView', GridColumnOptionsViewBase.$);
    GridColumnMoveOptionsView.x = "M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z";
    GridColumnMoveOptionsView.y = "M12 4l-1.41 1.41L16.17 11H4v2h12.17l-5.58 5.59L12 20l8-8z";
    return GridColumnMoveOptionsView;
})();
/**
 * @hidden
 */
let GridColumnMoveOptions = /*@__PURE__*/ (() => {
    class GridColumnMoveOptions extends GridColumnOptionsSimpleSectionBase {
        constructor() {
            super();
            this.b0 = "Left";
            this.b4 = "Right";
        }
        f() {
            return new GridColumnMoveOptionsView();
        }
        get_bu() {
            return "Move";
        }
        get bu() {
            return this.get_bu();
        }
        bo() {
            if (null == this.column) {
                return false;
            }
            let a = this.c;
            if (null == a) {
                return false;
            }
            switch (a.bg) {
                case 0: return true;
                case 1: return false;
                default: break;
            }
            return true;
        }
        a5(a, b) {
            super.a5(a, b);
            this.bw.ab();
        }
        a3() {
            super.a3();
            this.bw.ab();
        }
        a4(a, b) {
            super.a4(a, b);
            let c = this.column;
            if (null == c) {
                return;
            }
            switch (b.propertyName) {
                case "Pinned":
                    this.bw.ab();
                    break;
            }
        }
        ba(a, b, c) {
            super.ba(a, b, c);
            switch (a) {
                case "MoveLeftCaption":
                case "MoveRightCaption":
                    this.bw.m();
                    break;
            }
        }
        get bw() {
            return this.e;
        }
        get b1() {
            return this.b0;
        }
        set b1(a) {
            if (0 == StringComparer.b.compare(a, this.b0)) {
                return;
            }
            let b = this.b0;
            this.b0 = a;
            this.a8("MoveLeftCaption", b, this.b0);
        }
        get b5() {
            return this.b4;
        }
        set b5(a) {
            if (0 == StringComparer.b.compare(a, this.b4)) {
                return;
            }
            let b = this.b4;
            this.b4 = a;
            this.a8("MoveRightCaption", b, this.b4);
        }
        bx(a) {
            let b = this.column;
            if (null == b) {
                return false;
            }
            let c = b.grid;
            if (null == c) {
                return false;
            }
            let d = c.actualColumns;
            let e = d.indexOf(b);
            if (e < 0) {
                return false;
            }
            if (a) {
                return this.c.g6(e);
            }
            else {
                return this.c.g7(e);
            }
        }
        b8(a) {
            let b = this.column;
            if (null == b) {
                return;
            }
            let c = this.c;
            if (null == c) {
                return;
            }
            if (!this.bx(a)) {
                return;
            }
            let d = c.actualColumns;
            let e = d.indexOf(b);
            if (a) {
                c.qg(e);
            }
            else {
                c.qh(e);
            }
        }
        by() {
            return this.bx(true);
        }
        bz() {
            return this.bx(false);
        }
        b9() {
            this.b8(true);
        }
        cb() {
            this.b8(false);
        }
        ca(a, b) {
            this.b9();
        }
        cc(a, b) {
            this.cb();
        }
    }
    GridColumnMoveOptions.$t = /*@__PURE__*/ markType(GridColumnMoveOptions, 'GridColumnMoveOptions', GridColumnOptionsSimpleSectionBase.$);
    return GridColumnMoveOptions;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

class IgrGridColumnMoveOptions extends IgrGridColumnOptionsSimpleSectionBase {
    constructor(props) {
        super(props);
        this._reactRenderer = null;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._getMainRef = this._getMainRef.bind(this);
        if (document) {
            this._mainDiv = document.createElement("div");
            this._mainDiv.style.display = "block";
            this._mainDiv.style.width = "100%";
            this._mainDiv.style.height = "100%";
        }
        var ren = new ReactRenderer(this._mainDiv, document, true, DataGridStylingDefaults);
        this._reactRenderer = ren;
        var gridColumnMoveOptions = this.i;
        gridColumnMoveOptions.provideRenderer(ren);
        if (props) {
            this.initializeProperties();
        }
    }
    _getMainRef(ref) {
        this._elRef = ref;
    }
    render() {
        let children = [];
        Children.forEach(this.props.children, (ch) => {
            children.push(ch);
        });
        let div = createElement("div", {
            className: "ig-grid-column-move-options igr-grid-column-move-options",
            ref: this._getMainRef,
            children: children
        });
        return div;
    }
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    initializeProperties() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    // supports angular themes or custom properties set in CSS
    updateStyle() {
        this._styling(this._mainDiv, this);
    }
    componentWillUnmount() {
        this.i.destroy();
        this._reactRenderer.destroy();
    }
    componentDidMount() {
        this._elRef.appendChild(this._mainDiv);
        this.initializeContent();
    }
    initializeContent() {
        this._styling(this._mainDiv, this);
        this.updateStyle();
    }
    createImplementation() {
        return new GridColumnMoveOptions();
    }
    get i() {
        return this._implementation;
    }
    get moveLeftCaption() {
        return this.i.b1;
    }
    set moveLeftCaption(v) {
        this.i.b1 = v;
    }
    get moveRightCaption() {
        return this.i.b5;
    }
    set moveRightCaption(v) {
        this.i.b5 = v;
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrGridColumnMoveOptionsModule {
    static register() {
        TypeRegistrar.registerCons('IgrGridColumnMoveOptions', IgrGridColumnMoveOptions);
        TypeRegistrar.registerCons('IgrGridColumnMoveOptions', IgrGridColumnMoveOptions);
        TypeRegistrar.register('GridColumnMoveOptions', GridColumnMoveOptions.$type);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridColumnPinOptionsView = /*@__PURE__*/ (() => {
    class GridColumnPinOptionsView extends GridColumnOptionsViewBase {
        constructor() {
            super(...arguments);
            this.y = null;
            this.z = null;
            this.q = null;
            this.v = null;
            this.u = null;
            this.o = null;
            this.p = null;
            this.r = null;
            this.s = null;
            this.t = false;
        }
        get n() {
            return this.b;
        }
        w() {
            let a = this.e;
            let b = this.n;
            this.u = a.createElement("div");
            let c = new List$1(DomWrapper_$type, 0);
            let d = ((() => { let e = GridColumnOptionsUtilities.f(a, GridColumnPinOptionsView.aa, b.p, b.j, new Size(1, 18, 18), this.o, this.r, this.y, true, true); this.o = e.p5; this.r = e.p6; this.y = e.p7; return e.ret; })());
            let e = ((() => { let f = GridColumnOptionsUtilities.f(a, GridColumnPinOptionsView.ab, b.p, b.j, new Size(1, 18, 18), this.p, this.s, this.z, false, true); this.p = f.p5; this.s = f.p6; this.z = f.p7; return f.ret; })());
            c.add(d);
            c.add(e);
            let f = [this.o, this.p];
            let g = ((() => { let h = GridColumnOptionsUtilities.h(a, f, c, b.p, b.j, this.q); this.q = h.p5; return h.ret; })());
            let h = this.q;
            h.selectionChanged = delegateCombine(h.selectionChanged, runOn(this, this.ae));
            this.u.append(g);
            return this.u;
        }
        x() {
            let a = this.e.createElement("label");
            return a;
        }
        af() {
            if (null == this.r || null == this.s) {
                return;
            }
            let a = this.n.by;
            let t1 = a;
            L0: while (true) {
                switch (t1) {
                    case 0:
                        this.r.svgPath = GridColumnPinOptionsView.aa;
                        this.s.svgPath = GridColumnPinOptionsView.ab;
                        break;
                    case 1:
                        this.r.svgPath = GridColumnPinOptionsView.ac;
                        this.s.svgPath = GridColumnPinOptionsView.ab;
                        break;
                    case 2:
                        this.r.svgPath = GridColumnPinOptionsView.aa;
                        this.s.svgPath = GridColumnPinOptionsView.ad;
                        break;
                    default:
                        t1 = 0;
                        continue L0;
                }
                break;
            }
        }
        ag() {
            if (null == this.q) {
                return;
            }
            this.t = true;
            try {
                let a = this.n.by;
                switch (a) {
                    case 0:
                        this.q.d = [];
                        break;
                    case 1:
                        this.q.d = [0];
                        break;
                    case 2:
                        this.q.d = [1];
                        break;
                }
            }
            finally {
                this.t = false;
            }
        }
        k() {
            super.k();
            if (null == this.g || null == this.e) {
                return;
            }
            this.v = this.x();
            let a = this.w();
            let b = this.e;
            let c = this.g;
            c.setStyleProperty("display", "flex");
            c.setStyleProperty("flex-direction", "row");
            c.setStyleProperty("flex-wrap", "no-wrap");
            c.setStyleProperty("justify-content", "space-between");
            c.setStyleProperty("align-items", "center");
            c.append(this.v);
            c.append(a);
        }
        m() {
            super.m();
            this.ag();
            this.af();
            let a = this.n;
            if (null != this.v) {
                this.v.setRawText(a.bs);
                if (a.bq) {
                    this.g.setStyleProperty("display", "flex");
                    this.v.setStyleProperty("display", "inline-block");
                }
                else {
                    this.g.setStyleProperty("display", "block");
                    this.v.setStyleProperty("display", "none");
                }
                this.v.setStyleProperty("font", a.aa.fontString);
            }
            if (null != this.y) {
                this.y.setRawText(this.n.b0);
            }
            if (null != this.z) {
                this.z.setRawText(this.n.b4);
            }
            a.bd(this.o);
            a.bd(this.p);
            a.bc(this.q);
        }
        ae(a, b) {
            if (this.t) {
                return;
            }
            let c;
            if (null == this.q || null == this.q.d || 0 == this.q.d.length) {
                c = 0;
            }
            else {
                if (this.q.d.length > 1) {
                }
                let d = this.q.d[0];
                switch (d) {
                    case 0:
                        c = 1;
                        break;
                    case 1:
                        c = 2;
                        break;
                    default:
                        c = 0;
                        break;
                }
            }
            this.n.by = c;
            this.af();
        }
    }
    GridColumnPinOptionsView.$t = /*@__PURE__*/ markType(GridColumnPinOptionsView, 'GridColumnPinOptionsView', GridColumnOptionsViewBase.$);
    GridColumnPinOptionsView.aa = "M13.2,3.8l7.1,7.1l-2.8-0.1l-3.4,3.4l0.1,4.2l-3.5-3.5l-5.4,5.4l-1.4,0l0-1.4l5.4-5.4L5.7,9.8l4.2,0.1l3.4-3.4L13.2,3.8z";
    GridColumnPinOptionsView.ab = "M10.8,3.8l-7.1,7.1l2.8-0.1l3.4,3.4l-0.1,4.2l3.5-3.5l5.4,5.4l1.4,0l0-1.4l-5.4-5.4l3.5-3.5l-4.2,0.1l-3.4-3.4L10.8,3.8z";
    GridColumnPinOptionsView.ac = "M3,3.4l19,17.1l-1.3,1.2L12.1,14l-4.9,4.9l-1.4-0.1l-0.1-1.4l4.8-4.8l-8.9-8L3,3.4z M14.9,2.3l7.5,7.5l-2.8-0.1L16.1,13 l0,0.3l-5.4-4.8l0.9,0L15,5.1L14.9,2.3z";
    GridColumnPinOptionsView.ad = "M21,3.4L2,20.5l1.3,1.2l8.5-7.7l4.9,4.9l1.4-0.1l0.1-1.4l-4.8-4.8l8.9-8L21,3.4z M9.1,2.3L1.7,9.8l2.8-0.1L7.9,13l0,0.3 l5.4-4.8l-0.9,0L9,5.1L9.1,2.3z";
    return GridColumnPinOptionsView;
})();
/**
 * @hidden
 */
let GridColumnPinOptions = /*@__PURE__*/ (() => {
    class GridColumnPinOptions extends GridColumnOptionsSimpleSectionBase {
        constructor() {
            super();
            this.bx = 0;
            this.bz = "Left";
            this.b3 = "Right";
        }
        f() {
            return new GridColumnPinOptionsView();
        }
        get_bu() {
            return "Pin";
        }
        get bu() {
            return this.get_bu();
        }
        bo() {
            if (null == this.column) {
                return false;
            }
            return true;
        }
        a3() {
            let a = this.column;
            this.bx = a != null ? a.fk : 0;
            super.a3();
        }
        a4(a, b) {
            super.a4(a, b);
            let c = this.column;
            if (null == c) {
                return;
            }
            switch (b.propertyName) {
                case "Pinned":
                    this.bx = c != null ? c.fk : 0;
                    this.bw.m();
                    break;
            }
        }
        ba(a, b, c) {
            super.ba(a, b, c);
            switch (a) {
                case "PinLeftCaption":
                case "PinRightCaption":
                    this.bw.m();
                    break;
            }
        }
        get by() {
            let a = this.column;
            if (null != a) {
                return a.fk;
            }
            return this.bx;
        }
        set by(a) {
            this.bx = a;
            let b = this.c;
            let c = this.column;
            if (null != b && null != c) {
                b.sd(c, this.bx);
            }
        }
        get bw() {
            return this.e;
        }
        get b0() {
            return this.bz;
        }
        set b0(a) {
            if (0 == StringComparer.b.compare(a, this.bz)) {
                return;
            }
            let b = this.bz;
            this.bz = a;
            this.a8("PinLeftCaption", b, this.bz);
        }
        get b4() {
            return this.b3;
        }
        set b4(a) {
            if (0 == StringComparer.b.compare(a, this.b3)) {
                return;
            }
            let b = this.b3;
            this.b3 = a;
            this.a8("PinRightCaption", b, this.b3);
        }
    }
    GridColumnPinOptions.$t = /*@__PURE__*/ markType(GridColumnPinOptions, 'GridColumnPinOptions', GridColumnOptionsSimpleSectionBase.$);
    return GridColumnPinOptions;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

class IgrGridColumnPinOptions extends IgrGridColumnOptionsSimpleSectionBase {
    constructor(props) {
        super(props);
        this._reactRenderer = null;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._getMainRef = this._getMainRef.bind(this);
        if (document) {
            this._mainDiv = document.createElement("div");
            this._mainDiv.style.display = "block";
            this._mainDiv.style.width = "100%";
            this._mainDiv.style.height = "100%";
        }
        var ren = new ReactRenderer(this._mainDiv, document, true, DataGridStylingDefaults);
        this._reactRenderer = ren;
        var gridColumnPinOptions = this.i;
        gridColumnPinOptions.provideRenderer(ren);
        if (props) {
            this.initializeProperties();
        }
    }
    _getMainRef(ref) {
        this._elRef = ref;
    }
    render() {
        let children = [];
        Children.forEach(this.props.children, (ch) => {
            children.push(ch);
        });
        let div = createElement("div", {
            className: "ig-grid-column-pin-options igr-grid-column-pin-options",
            ref: this._getMainRef,
            children: children
        });
        return div;
    }
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    initializeProperties() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    // supports angular themes or custom properties set in CSS
    updateStyle() {
        this._styling(this._mainDiv, this);
    }
    componentWillUnmount() {
        this.i.destroy();
        this._reactRenderer.destroy();
    }
    componentDidMount() {
        this._elRef.appendChild(this._mainDiv);
        this.initializeContent();
    }
    initializeContent() {
        this._styling(this._mainDiv, this);
        this.updateStyle();
    }
    createImplementation() {
        return new GridColumnPinOptions();
    }
    get i() {
        return this._implementation;
    }
    get pinLeftCaption() {
        return this.i.b0;
    }
    set pinLeftCaption(v) {
        this.i.b0 = v;
    }
    get pinRightCaption() {
        return this.i.b4;
    }
    set pinRightCaption(v) {
        this.i.b4 = v;
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrGridColumnPinOptionsModule {
    static register() {
        TypeRegistrar.registerCons('IgrGridColumnPinOptions', IgrGridColumnPinOptions);
        TypeRegistrar.registerCons('IgrGridColumnPinOptions', IgrGridColumnPinOptions);
        TypeRegistrar.register('GridColumnPinOptions', GridColumnPinOptions.$type);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridColumnHideOptionsView = /*@__PURE__*/ (() => {
    class GridColumnHideOptionsView extends GridColumnOptionsViewBase {
        constructor() {
            super(...arguments);
            this.s = null;
            this.p = null;
            this.r = null;
            this.o = null;
            this.t = null;
            this.q = false;
        }
        get n() {
            return this.b;
        }
        x() {
            if (null == this.p) {
                return;
            }
            this.q = true;
            try {
                let a = this.n.bx;
                if (a) {
                    this.p.svgPath = GridColumnHideOptionsView.v;
                }
                else {
                    this.p.svgPath = GridColumnHideOptionsView.u;
                }
            }
            finally {
                this.q = false;
            }
        }
        k() {
            super.k();
            if (null == this.g || null == this.e) {
                return;
            }
            let a = this.e;
            let b = this.n;
            let c = this.g;
            this.r = ((() => { let d = GridColumnOptionsUtilities.g(a, GridColumnHideOptionsView.u, 1, b.p, b.j, new Size(1, 24, 24), this.o, this.p, this.s, this.t, false, true, false); this.o = d.p6; this.p = d.p7; this.s = d.p8; this.t = d.p9; return d.ret; })());
            let d = this.o;
            d.clicked = delegateCombine(d.clicked, runOn(this, this.w));
            c.append(this.r);
        }
        m() {
            super.m();
            this.x();
            let a = this.n;
            if (null != this.s) {
                this.s.setRawText(this.n.bs);
                let b = this.n.bq;
                GridColumnOptionsUtilities.j(this.s, b, "inline-block");
                if (b) {
                    this.o.s = 1;
                    this.o.fv = "stretch";
                    this.t.setStyleProperty("justify-content", "space-between");
                }
                else {
                    this.o.s = 4;
                    this.o.fv = "center";
                    this.t.setStyleProperty("justify-content", "center");
                }
                this.s.setStyleProperty("font", a.aa.fontString);
            }
            a.bd(this.o);
        }
        w(a, b) {
            if (this.q) {
                return;
            }
            this.n.bx = !this.n.bx;
        }
    }
    GridColumnHideOptionsView.$t = /*@__PURE__*/ markType(GridColumnHideOptionsView, 'GridColumnHideOptionsView', GridColumnOptionsViewBase.$);
    GridColumnHideOptionsView.v = "M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z";
    GridColumnHideOptionsView.u = "M12 7c2.76 0 5 2.24 5 5 0 .65-.13 1.26-.36 1.83l2.92 2.92c1.51-1.26 2.7-2.89 3.43-4.75-1.73-4.39-6-7.5-11-7.5-1.4 0-2.74.25-3.98.7l2.16 2.16C10.74 7.13 11.35 7 12 7zM2 4.27l2.28 2.28.46.46C3.08 8.3 1.78 10.02 1 12c1.73 4.39 6 7.5 11 7.5 1.55 0 3.03-.3 4.38-.84l.42.42L19.73 22 21 20.73 3.27 3 2 4.27zM7.53 9.8l1.55 1.55c-.05.21-.08.43-.08.65 0 1.66 1.34 3 3 3 .22 0 .44-.03.65-.08l1.55 1.55c-.67.33-1.41.53-2.2.53-2.76 0-5-2.24-5-5 0-.79.2-1.53.53-2.2zm4.31-.78l3.15 3.15.02-.16c0-1.66-1.34-3-3-3l-.17.01z";
    return GridColumnHideOptionsView;
})();
/**
 * @hidden
 */
let GridColumnHideOptions = /*@__PURE__*/ (() => {
    class GridColumnHideOptions extends GridColumnOptionsSimpleSectionBase {
        constructor() {
            super();
        }
        f() {
            return new GridColumnHideOptionsView();
        }
        get_bu() {
            return "Hide Column";
        }
        get bu() {
            return this.get_bu();
        }
        bo() {
            if (null == this.column) {
                return false;
            }
            return true;
        }
        a4(a, b) {
            super.a4(a, b);
            let c = this.column;
            if (null == c) {
                return;
            }
            switch (b.propertyName) {
                case "IsHidden":
                    this.bw.m();
                    break;
            }
        }
        ba(a, b, c) {
            super.ba(a, b, c);
        }
        get bx() {
            let a = this.column;
            if (null != a) {
                return a.gd;
            }
            return false;
        }
        set bx(a) {
            let b = this.column;
            if (null != b) {
                b.gd = a;
            }
        }
        get bw() {
            return this.e;
        }
    }
    GridColumnHideOptions.$t = /*@__PURE__*/ markType(GridColumnHideOptions, 'GridColumnHideOptions', GridColumnOptionsSimpleSectionBase.$);
    return GridColumnHideOptions;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

class IgrGridColumnHideOptions extends IgrGridColumnOptionsSimpleSectionBase {
    constructor(props) {
        super(props);
        this._reactRenderer = null;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._getMainRef = this._getMainRef.bind(this);
        if (document) {
            this._mainDiv = document.createElement("div");
            this._mainDiv.style.display = "block";
            this._mainDiv.style.width = "100%";
            this._mainDiv.style.height = "100%";
        }
        var ren = new ReactRenderer(this._mainDiv, document, true, DataGridStylingDefaults);
        this._reactRenderer = ren;
        var gridColumnHideOptions = this.i;
        gridColumnHideOptions.provideRenderer(ren);
        if (props) {
            this.initializeProperties();
        }
    }
    _getMainRef(ref) {
        this._elRef = ref;
    }
    render() {
        let children = [];
        Children.forEach(this.props.children, (ch) => {
            children.push(ch);
        });
        let div = createElement("div", {
            className: "ig-grid-column-hide-options igr-grid-column-hide-options",
            ref: this._getMainRef,
            children: children
        });
        return div;
    }
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    initializeProperties() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    // supports angular themes or custom properties set in CSS
    updateStyle() {
        this._styling(this._mainDiv, this);
    }
    componentWillUnmount() {
        this.i.destroy();
        this._reactRenderer.destroy();
    }
    componentDidMount() {
        this._elRef.appendChild(this._mainDiv);
        this.initializeContent();
    }
    initializeContent() {
        this._styling(this._mainDiv, this);
        this.updateStyle();
    }
    createImplementation() {
        return new GridColumnHideOptions();
    }
    get i() {
        return this._implementation;
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrGridColumnHideOptionsModule {
    static register() {
        TypeRegistrar.registerCons('IgrGridColumnHideOptions', IgrGridColumnHideOptions);
        TypeRegistrar.registerCons('IgrGridColumnHideOptions', IgrGridColumnHideOptions);
        TypeRegistrar.register('GridColumnHideOptions', GridColumnHideOptions.$type);
    }
}

class IgrGridColumnGroupOptions extends IgrGridColumnOptionsSimpleSectionBase {
    constructor(props) {
        super(props);
        this._reactRenderer = null;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._getMainRef = this._getMainRef.bind(this);
        if (document) {
            this._mainDiv = document.createElement("div");
            this._mainDiv.style.display = "block";
            this._mainDiv.style.width = "100%";
            this._mainDiv.style.height = "100%";
        }
        var ren = new ReactRenderer(this._mainDiv, document, true, DataGridStylingDefaults);
        this._reactRenderer = ren;
        var gridColumnGroupOptions = this.i;
        gridColumnGroupOptions.provideRenderer(ren);
        if (props) {
            this.initializeProperties();
        }
    }
    _getMainRef(ref) {
        this._elRef = ref;
    }
    render() {
        let children = [];
        Children.forEach(this.props.children, (ch) => {
            children.push(ch);
        });
        let div = createElement("div", {
            className: "ig-grid-column-group-options igr-grid-column-group-options",
            ref: this._getMainRef,
            children: children
        });
        return div;
    }
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    initializeProperties() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    // supports angular themes or custom properties set in CSS
    updateStyle() {
        this._styling(this._mainDiv, this);
    }
    componentWillUnmount() {
        this.i.destroy();
        this._reactRenderer.destroy();
    }
    componentDidMount() {
        this._elRef.appendChild(this._mainDiv);
        this.initializeContent();
    }
    initializeContent() {
        this._styling(this._mainDiv, this);
        this.updateStyle();
    }
    createImplementation() {
        return new GridColumnGroupOptions();
    }
    get i() {
        return this._implementation;
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrGridColumnGroupOptionsModule {
    static register() {
        TypeRegistrar.registerCons('IgrGridColumnGroupOptions', IgrGridColumnGroupOptions);
        TypeRegistrar.registerCons('IgrGridColumnGroupOptions', IgrGridColumnGroupOptions);
        TypeRegistrar.register('GridColumnGroupOptions', GridColumnGroupOptions.$type);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let FilterApplyButtonClickEventArgs = /*@__PURE__*/ (() => {
    class FilterApplyButtonClickEventArgs extends EventArgs {
    }
    FilterApplyButtonClickEventArgs.$t = /*@__PURE__*/ markType(FilterApplyButtonClickEventArgs, 'FilterApplyButtonClickEventArgs', EventArgs.$);
    return FilterApplyButtonClickEventArgs;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let FilterCancelButtonClickEventArgs = /*@__PURE__*/ (() => {
    class FilterCancelButtonClickEventArgs extends EventArgs {
    }
    FilterCancelButtonClickEventArgs.$t = /*@__PURE__*/ markType(FilterCancelButtonClickEventArgs, 'FilterCancelButtonClickEventArgs', EventArgs.$);
    return FilterCancelButtonClickEventArgs;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridColumnFilterOptionsView = /*@__PURE__*/ (() => {
    class GridColumnFilterOptionsView extends GridColumnOptionsViewBase {
        constructor() {
            super(...arguments);
            this.y = null;
            this.z = null;
            this.u = null;
            this.x = null;
            this.aa = null;
            this.t = null;
            this.v = null;
            this.w = null;
            this.q = null;
            this.o = null;
            this.p = null;
            this.applyButtonClick = null;
            this.cancelButtonClick = null;
        }
        m() {
            super.m();
            let a = this.n;
            a.bd(this.q);
            a.bd(this.o);
            a.bd(this.p);
            if (null != this.w && null != this.x) {
                this.w.setStyleProperty("padding-bottom", "5px");
                this.w.setStyleProperty("margin", "0 -8px");
                switch (this.q.g) {
                    case 2:
                        this.x.setStyleProperty("margin", "0 -.25rem");
                        break;
                    case 1:
                    case 3:
                        this.x.setStyleProperty("margin", "0 -.5rem");
                        break;
                }
                this.x.setRawText(a.cb);
                this.x.setStyleProperty("font", a.aa.fontString);
            }
            if (null != this.aa) {
                this.aa.setRawText(a.ck);
                this.aa.setStyleProperty("font", a.aa.fontString);
                GridColumnOptionsUtilities.j(this.aa, false);
            }
            if (null != this.t) {
                this.t.setRawText(a.b3);
            }
            if (null != this.v) {
                this.v.setRawText(a.b7);
            }
        }
        get n() {
            return this.b;
        }
        al(a) {
            this.o.disabled = !a;
        }
        am(a) {
            if (null != this.q) {
                this.q.disabled = !a;
            }
        }
        ah(a) {
            let b = this.e;
            let c = this.n;
            this.y = a;
            let d;
            let e;
            this.w = ((() => { let f = GridColumnOptionsUtilities.g(b, GridColumnFilterOptionsView.ab, 1, c.p, c.j, new Size(1, 24, 24), this.q, d, this.x, e, false, true); this.q = f.p6; d = f.p7; this.x = f.p8; e = f.p9; return f.ret; })());
            let f = this.q;
            f.clicked = delegateCombine(f.clicked, runOn(this, this.ae));
            this.y.append(this.w);
        }
        aj(a) {
            let b = this.e;
            this.z = a;
            this.aa = b.createElement("span");
            this.aa.setRawText(this.n.ck);
            this.z.append(this.aa);
        }
        ai(a) {
            let b = this.e;
            let c = this.n;
            this.u = a;
            let d = b.createElement("hr");
            d.setStyleProperty("margin", "3px -7px");
            d.setStyleProperty("border-top", "1px solid #dde2eb");
            d.setStyleProperty("border-left", "0px");
            d.setStyleProperty("border-right", "0px");
            d.setStyleProperty("border-bottom", "0px");
            this.u.append(d);
            let e;
            let f = ((() => { let g = GridColumnOptionsUtilities.f(b, null, c.p, c.j, Size.empty, this.o, e, this.t); this.o = g.p5; e = g.p6; this.t = g.p7; return g.ret; })());
            f.setStyleProperty("margin-left", "1rem");
            let g = this.o;
            g.clicked = delegateCombine(g.clicked, runOn(this, this.ac));
            this.o.hg = "1";
            let h;
            let i = ((() => { let j = GridColumnOptionsUtilities.f(b, null, c.p, c.j, Size.empty, this.p, h, this.v); this.p = j.p5; h = j.p6; this.v = j.p7; return j.ret; })());
            let j = this.p;
            j.clicked = delegateCombine(j.clicked, runOn(this, this.ad));
            this.p.hg = "1";
            this.p.s = 2;
            let k = b.createElement("div");
            k.setStyleProperty("display", "flex");
            k.setStyleProperty("justify-content", "space-between");
            k.append(i);
            k.append(f);
            this.u.append(k);
        }
        ak(a) {
            this.h(a);
        }
        af() {
            if (null != this.applyButtonClick) {
                this.applyButtonClick(this, EventArgs.empty);
            }
        }
        ag() {
            if (null != this.cancelButtonClick) {
                this.cancelButtonClick(this, EventArgs.empty);
            }
        }
        ac(a, b) {
            this.af();
        }
        ad(a, b) {
            this.ag();
        }
        ae(a, b) {
            this.n.cp();
        }
    }
    GridColumnFilterOptionsView.$t = /*@__PURE__*/ markType(GridColumnFilterOptionsView, 'GridColumnFilterOptionsView', GridColumnOptionsViewBase.$);
    GridColumnFilterOptionsView.ab = "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z";
    return GridColumnFilterOptionsView;
})();
/**
 * @hidden
 */
let GridColumnFilterOptions = /*@__PURE__*/ (() => {
    class GridColumnFilterOptions extends GridColumnOptionsSectionBase {
        constructor() {
            super();
            this.by = null;
            this.b2 = "Apply";
            this.b6 = "Cancel";
            this.ca = "Clear column filters";
            this.cf = "Search";
            this.bu = 0;
            this.bt = 0;
            this.cj = "Text filter";
            this.applyButtonClick = null;
            this.cancelButtonClick = null;
        }
        f() {
            return new GridColumnFilterOptionsView();
        }
        bo() {
            if (null == this.column) {
                return false;
            }
            if (!this.column.gb) {
                return false;
            }
            if (this.c == null || this.c.actualDataSource == null || !this.c.actualDataSource.isGroupingSupported) {
                return false;
            }
            return true;
        }
        a3() {
            super.a3();
            this.cu();
            this.c0();
        }
        a4(a, b) {
            super.a4(a, b);
            switch (b.propertyName) {
                case "Filter":
                    this.c0();
                    break;
            }
        }
        onViewInitialized() {
            super.onViewInitialized();
            let a = this.bs;
            a.applyButtonClick = delegateCombine(a.applyButtonClick, runOn(this, this.c4));
            let b = this.bs;
            b.cancelButtonClick = delegateCombine(b.cancelButtonClick, runOn(this, this.c5));
        }
        ba(a, b, c) {
            super.ba(a, b, c);
            switch (a) {
                case "ApplyButtonCaption":
                case "CancelButtonCaption":
                case "ClearColumnFiltersCaption":
                case "TextFilterCaption":
                    this.bs.m();
                    break;
                case "ActualBaseTheme":
                case "ActualDensity":
                case "ActualFilterListDensity":
                case "FilterListPlaceholderText":
                case "BackgroundColor":
                case "TextColor":
                    this.c2();
                    break;
                case "FilterListDensity":
                    this.bv = this.bx == 0 ? this.q : this.bx;
                    break;
            }
        }
        get bs() {
            return this.e;
        }
        get b3() {
            return this.b2;
        }
        set b3(a) {
            if (0 == StringComparer.b.compare(a, this.b2)) {
                return;
            }
            let b = this.b2;
            this.b2 = a;
            this.a8("ApplyButtonCaption", b, this.b2);
        }
        get b7() {
            return this.b6;
        }
        set b7(a) {
            if (0 == StringComparer.b.compare(a, this.b6)) {
                return;
            }
            let b = this.b6;
            this.b6 = a;
            this.a8("CancelButtonCaption", b, this.b6);
        }
        get cb() {
            return this.ca;
        }
        set cb(a) {
            if (0 == StringComparer.b.compare(a, this.ca)) {
                return;
            }
            let b = this.ca;
            this.ca = a;
            this.a8("ClearColumnFiltersCaption", b, this.ca);
        }
        get cg() {
            return this.cf;
        }
        set cg(a) {
            if (0 == StringComparer.b.compare(a, this.cf)) {
                return;
            }
            let b = this.cf;
            this.cf = a;
            this.a8("FilterListPlaceholderText", b, this.cf);
        }
        get bx() {
            return this.bu;
        }
        set bx(a) {
            let b = this.bu;
            this.bu = a;
            if (b != this.bu) {
                this.a8("FilterListDensity", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, a));
            }
        }
        get bv() {
            return this.bt;
        }
        set bv(a) {
            let b = this.bt;
            this.bt = a;
            if (b != this.bt) {
                this.a8("ActualFilterListDensity", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, a));
            }
        }
        get ck() {
            return this.cj;
        }
        set ck(a) {
            if (0 == StringComparer.b.compare(a, this.cj)) {
                return;
            }
            let b = this.cj;
            this.cj = a;
            this.a8("TextFilterCaption", b, this.cj);
        }
        c0() {
            let a = this.by.ad();
            this.bs.al(!a);
            let b = this.bz();
            this.bs.am(b);
        }
        cn() {
            if (0 == this.by.g.count) {
                this.cp();
                return;
            }
            let a;
            let b;
            if (this.by.p == 0) {
                b = false;
                a = 10;
            }
            else {
                b = true;
                a = 5;
            }
            let c = new List$1(ColumnComparisonFilterCondition.$, 0);
            let d = this.by.g;
            for (let e = 0; e < d.count; e++) {
                let f = d._inner[e];
                let g = f.value[0];
                let h = GridColumnFilterOptions.bp(a, g);
                c.add(h);
            }
            if (c.count == 1) {
                this.column.eo = c._inner[0];
            }
            else {
                let i = new ColumnFilterConditionGroup();
                i.f = b;
                for (let j of fromEnum(c)) {
                    i.h(j);
                }
                this.column.eo = i;
            }
        }
        provideClearFiltersSection(a) {
            this.bs.ah(a);
        }
        provideFilterSection(a) {
            this.bs.aj(a);
        }
        provideFilterCheckboxListSection(a) {
            this.by = a;
            this.c2();
            let b = this.by;
            b.selectAllCheckboxChanged = delegateCombine(b.selectAllCheckboxChanged, runOn(this, this.co));
            let c = this.by;
            c.checkedChanged = delegateCombine(c.checkedChanged, runOn(this, this.cr));
        }
        provideFilterButtonSection(a) {
            this.bs.ai(a);
        }
        provideMainDiv(a) {
            this.bs.ak(a);
        }
        cp() {
            this.column.eo = null;
            this.c1();
        }
        static bp(a, b) {
            let c = new ColumnComparisonFilterCondition();
            c.e = a;
            c.j = b;
            return c;
        }
        bz() {
            let a = this.column;
            if (null == a) {
                return false;
            }
            return null != a.eo;
        }
        cu() {
            let a = this.column;
            let b = this.c;
            let c = (null != a) ? a.hy : null;
            let d = (null != b) ? b.actualDataSource.clone() : null;
            if (null != d) {
                this.c3(b.actualDataSource, d);
                d.summaryDescriptions.clear();
                d.groupDescriptions.clear();
                let e = new SortDescription();
                e.propertyName = c;
                e.direction = 0;
                d.groupDescriptions.add(e);
                let f = b.z(a);
                let g = d.filterExpressions;
                for (let h = g.j.count - 1; h >= 0; h--) {
                    let i = g.j.item(h);
                    if (i.isAutoGenerated) {
                        if (null != f) {
                            g.j.item(h, f);
                        }
                        else {
                            d.filterExpressions.removeAt(h);
                        }
                        break;
                    }
                }
                this.by.itemsSource = d;
                this.by.at = c;
                this.by.b = [c];
                d.isSectionHeaderNormalRow = true;
                d.isSectionExpandedDefault = false;
                d.isSectionCollapsable = true;
                d.isSectionContentVisible = false;
                this.c1();
            }
        }
        c3(a, b) {
            if (a != null && a.actualSchema != null && b != null && b.actualSchema != null) {
                let c = b.actualSchema.propertyTypes;
                let d = a.actualSchema.propertyTypes;
                for (let e = 0; e < c.length; e++) {
                    if (c[e] != d[e]) {
                        c[e] = d[e];
                    }
                }
            }
        }
        c1() {
            let a = this.column;
            let b = (null != a) ? a.hy : null;
            let c = true;
            let d = toNullable(ColumnComparisonConditionOperatorType_$type, null);
            let e = this.b0();
            for (let f = e.count - 1; f >= 0; f--) {
                let g = e._inner[f];
                switch (g.e) {
                    case 5:
                    case 10: break;
                    default:
                        e.removeAt(f);
                        continue;
                }
                if (nullableEquals(d, null)) {
                    d = toNullable(ColumnComparisonConditionOperatorType_$type, g.e);
                }
                else if (d.value != g.e) {
                    c = false;
                    break;
                }
            }
            if (e.count == 0 || !c) {
                this.by.b5();
                return;
            }
            switch (d.value) {
                case 5:
                    this.by.bh();
                    break;
                case 10:
                    this.by.b5();
                    break;
            }
            let h = this.by.g;
            for (let i of fromEnum(e)) {
                h.add(new PrimaryKeyValue([b], [i.j]));
            }
            this.c0();
        }
        b0() {
            let a = new List$1(ColumnComparisonFilterCondition.$, 0);
            let b = this.column;
            if (null == b) {
                return a;
            }
            if (null != b.eo) {
                let c = GridColumnFilterOptions.cq(b.eo, a);
                a = c.p1;
            }
            return a;
        }
        static cq(a, b) {
            let c = typeCast(ColumnFilterConditionGroup.$, a);
            if (null != c) {
                for (let d = 0; d < c.g; d++) {
                    let e = c.item(d);
                    let f = GridColumnFilterOptions.cq(e, b);
                    b = f.p1;
                }
            }
            else if (null != a) {
                b.add1(a);
            }
            return {
                p1: b
            };
        }
        c2() {
            if (null != this.by) {
                this.by.n = this.bv;
                this.by.ax = this.cg;
                this.by.cg = this.bk;
                this.by.cl = this.bn;
                this.by.l = this.i;
                this.by.updateHrMargin(new Thickness(1, -7, 3, -7, 3));
            }
        }
        co(a, b) {
            this.c0();
        }
        cr(a, b) {
            this.c0();
        }
        c4(a, b) {
            this.cn();
            this.cs();
        }
        c5(a, b) {
            this.ct();
        }
        cs() {
            if (null != this.applyButtonClick) {
                this.applyButtonClick(this, new FilterApplyButtonClickEventArgs());
            }
        }
        ct() {
            if (null != this.cancelButtonClick) {
                this.cancelButtonClick(this, new FilterCancelButtonClickEventArgs());
            }
        }
    }
    GridColumnFilterOptions.$t = /*@__PURE__*/ markType(GridColumnFilterOptions, 'GridColumnFilterOptions', GridColumnOptionsSectionBase.$);
    return GridColumnFilterOptions;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

class IgrFilterApplyButtonClickEventArgs {
    createImplementation() {
        return new FilterApplyButtonClickEventArgs();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
}

class IgrFilterCancelButtonClickEventArgs {
    createImplementation() {
        return new FilterCancelButtonClickEventArgs();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
}

class IgrGridColumnFilterOptions extends IgrGridColumnOptionsSectionBase {
    constructor(props) {
        super(props);
        this._reactRenderer = null;
        this._applyButtonClick = null;
        this._applyButtonClick_wrapped = null;
        this._cancelButtonClick = null;
        this._cancelButtonClick_wrapped = null;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._getMainRef = this._getMainRef.bind(this);
        this._getClearFiltersSectionRef = this._getClearFiltersSectionRef.bind(this);
        this._getFilterSectionRef = this._getFilterSectionRef.bind(this);
        this._getFilterCheckboxListSectionRef = this._getFilterCheckboxListSectionRef.bind(this);
        this._getFilterButtonsSectionRef = this._getFilterButtonsSectionRef.bind(this);
        if (document) {
            this._mainDiv = document.createElement("div");
            this._mainDiv.style.display = "block";
            this._mainDiv.style.width = "100%";
            this._mainDiv.style.height = "100%";
        }
        var ren = new ReactRenderer(this._mainDiv, document, true, DataGridStylingDefaults);
        this._reactRenderer = ren;
        var gridColumnFilterOptions = this.i;
        gridColumnFilterOptions.provideRenderer(ren);
        if (props) {
            this.initializeProperties();
        }
    }
    _getMainRef(ref) {
        this._elRef = ref;
        this.verifyReferences();
    }
    _getClearFiltersSectionRef(ref) {
        this._clearFiltersSectionRef = ref;
        this.verifyReferences();
    }
    _getFilterSectionRef(ref) {
        this._filterSectionRef = ref;
        this.verifyReferences();
    }
    _getFilterCheckboxListSectionRef(ref) {
        this._filterCheckboxListSectionRef = ref;
        this.verifyReferences();
    }
    _getFilterButtonsSectionRef(ref) {
        this._filterButtonsSectionRef = ref;
        this.verifyReferences();
    }
    verifyReferences() {
        if (this._reactRenderer &&
            this._elRef &&
            this._clearFiltersSectionRef &&
            this._filterSectionRef &&
            this._filterCheckboxListSectionRef &&
            this._filterButtonsSectionRef) {
            var gridColumnFilterOptions = this.i;
            var mainRef = this._reactRenderer.getWrapper(this._elRef);
            gridColumnFilterOptions.provideMainDiv(mainRef);
            var clearFiltersSectionWrapper = this._reactRenderer.getWrapper(this._clearFiltersSectionRef);
            gridColumnFilterOptions.provideClearFiltersSection(clearFiltersSectionWrapper);
            var filtersSectionWrapper = this._reactRenderer.getWrapper(this._filterSectionRef);
            gridColumnFilterOptions.provideFilterSection(filtersSectionWrapper);
            gridColumnFilterOptions.provideFilterCheckboxListSection(this._filterCheckboxListSectionRef.i);
            var filterButtonsSectionWrapper = this._reactRenderer.getWrapper(this._filterButtonsSectionRef);
            gridColumnFilterOptions.provideFilterButtonSection(filterButtonsSectionWrapper);
        }
    }
    render() {
        const divStyle = {
            height: "195px"
        };
        return (createElement("div", { className: "ig-grid-column-filter-options igr-grid-column-filter-options", ref: this._getMainRef }, createElement("div", { ref: this._getClearFiltersSectionRef, key: "clearFiltersSection" }), createElement("div", { ref: this._getFilterSectionRef, key: "filtersSection" }), createElement("div", { style: divStyle }, createElement(IgrCheckboxList, { height: "100%", ref: this._getFilterCheckboxListSectionRef, key: "filterCheckboxListSection" })), createElement("div", { ref: this._getFilterButtonsSectionRef, key: "filterButtonsSection" })));
    }
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    initializeProperties() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    // supports angular themes or custom properties set in CSS
    updateStyle() {
        this._styling(this._mainDiv, this);
    }
    componentWillUnmount() {
        this.i.destroy();
        this._reactRenderer.destroy();
    }
    componentDidMount() {
        this._elRef.appendChild(this._mainDiv);
        this.initializeContent();
    }
    initializeContent() {
        this._styling(this._mainDiv, this);
        this.updateStyle();
    }
    createImplementation() {
        return new GridColumnFilterOptions();
    }
    get i() {
        return this._implementation;
    }
    get applyButtonCaption() {
        return this.i.b3;
    }
    set applyButtonCaption(v) {
        this.i.b3 = v;
    }
    get cancelButtonCaption() {
        return this.i.b7;
    }
    set cancelButtonCaption(v) {
        this.i.b7 = v;
    }
    get clearColumnFiltersCaption() {
        return this.i.cb;
    }
    set clearColumnFiltersCaption(v) {
        this.i.cb = v;
    }
    get filterListPlaceholderText() {
        return this.i.cg;
    }
    set filterListPlaceholderText(v) {
        this.i.cg = v;
    }
    /**
     * Gets or sets the display Density to use for the buttons in the component.
    */
    get filterListDensity() {
        return this.i.bx;
    }
    set filterListDensity(v) {
        this.i.bx = ensureEnum(ControlDisplayDensity_$type, v);
    }
    /**
     * Gets the actual display filterListDensity to use for the component.
    */
    get actualFilterListDensity() {
        return this.i.bv;
    }
    set actualFilterListDensity(v) {
        this.i.bv = ensureEnum(ControlDisplayDensity_$type, v);
    }
    get textFilterCaption() {
        return this.i.ck;
    }
    set textFilterCaption(v) {
        this.i.ck = v;
    }
    get applyButtonClick() {
        return this._applyButtonClick;
    }
    set applyButtonClick(ev) {
        if (this._applyButtonClick_wrapped !== null) {
            this.i.applyButtonClick = delegateRemove(this.i.applyButtonClick, this._applyButtonClick_wrapped);
            this._applyButtonClick_wrapped = null;
            this._applyButtonClick = null;
        }
        this._applyButtonClick = ev;
        this._applyButtonClick_wrapped = (o, e) => {
            let outerArgs = new IgrFilterApplyButtonClickEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeApplyButtonClick) {
                this.beforeApplyButtonClick(this, outerArgs);
            }
            if (this._applyButtonClick) {
                this._applyButtonClick(this, outerArgs);
            }
        };
        this.i.applyButtonClick = delegateCombine(this.i.applyButtonClick, this._applyButtonClick_wrapped);
    }
    get cancelButtonClick() {
        return this._cancelButtonClick;
    }
    set cancelButtonClick(ev) {
        if (this._cancelButtonClick_wrapped !== null) {
            this.i.cancelButtonClick = delegateRemove(this.i.cancelButtonClick, this._cancelButtonClick_wrapped);
            this._cancelButtonClick_wrapped = null;
            this._cancelButtonClick = null;
        }
        this._cancelButtonClick = ev;
        this._cancelButtonClick_wrapped = (o, e) => {
            let outerArgs = new IgrFilterCancelButtonClickEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeCancelButtonClick) {
                this.beforeCancelButtonClick(this, outerArgs);
            }
            if (this._cancelButtonClick) {
                this._cancelButtonClick(this, outerArgs);
            }
        };
        this.i.cancelButtonClick = delegateCombine(this.i.cancelButtonClick, this._cancelButtonClick_wrapped);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrGridColumnFilterOptionsModule {
    static register() {
        IgrCheckboxListModule.register();
        TypeRegistrar.registerCons('IgrGridColumnFilterOptions', IgrGridColumnFilterOptions);
        TypeRegistrar.registerCons('IgrGridColumnFilterOptions', IgrGridColumnFilterOptions);
        TypeRegistrar.register('GridColumnFilterOptions', GridColumnFilterOptions.$type);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridColumnOptionsView = /*@__PURE__*/ (() => {
    class GridColumnOptionsView extends GridColumnOptionsViewBase {
        constructor() {
            super(...arguments);
            this.u = null;
            this.y = null;
            this.w = null;
            this.x = null;
            this.p = null;
            this.s = null;
            this.r = null;
            this.v = null;
            this.q = null;
            this.t = null;
        }
        get n() {
            return this.b;
        }
        o() {
            let a = this.e;
            let b = a.createElement("div");
            let c = a.createElement("header");
            b.append(c);
            let d = a.createElement("h4");
            c.append(d);
            c.setRawText(this.n.dh);
            return b;
        }
        ab() {
            if (null != this.t) {
                let a = this.n;
                let b = a.dh;
                this.t.setRawText(b);
                if (null != a.b4) {
                    this.t.setStyleProperty("font", a.b4.fontString);
                }
            }
        }
        j() {
            super.j();
            this.m();
        }
        m() {
            super.m();
            if (null != this.g) {
                this.g.setStyleProperty("padding", this.n.dq());
                this.g.setStyleProperty("box-sizing", "border-box");
            }
            this.ab();
            let a;
            let b;
            if (null != this.u) {
                a = this.u;
                b = this.n.ce;
                GridColumnOptionsUtilities.j(a, b, "flex");
            }
            if (null != this.y) {
                a = this.y;
                b = this.n.cs;
                GridColumnOptionsUtilities.j(a, b);
            }
            if (null != this.w) {
                a = this.w;
                b = this.n.cm;
                GridColumnOptionsUtilities.j(a, b);
            }
            if (null != this.x) {
                a = this.x;
                b = this.n.cp;
                GridColumnOptionsUtilities.j(a, b);
            }
            if (null != this.v) {
                a = this.v;
                b = this.n.cj;
                GridColumnOptionsUtilities.j(a, b);
            }
            if (null != this.q) {
                a = this.q;
                b = this.n.cd;
                GridColumnOptionsUtilities.j(a, b);
            }
            if (null != this.p) {
                a = this.p;
                b = this.n.ca;
                GridColumnOptionsUtilities.j(a, b);
            }
        }
        z() {
            let a = this.e;
            let b = a.createElement("header");
            this.u.append(b);
            let c = a.createElement("h4");
            c.setStyleProperty("margin-top", "0");
            c.setStyleProperty("margin-bottom", "0");
            b.append(c);
            this.t = c;
            this.s.append(b);
            this.ab();
        }
        aa(a, b, c, d, e, f, g, h, i) {
            this.u = a;
            this.y = b;
            this.w = c;
            this.x = d;
            this.p = e;
            this.s = f;
            this.r = g;
            this.v = h;
            this.q = i;
            this.r.setStyleProperty("display", "flex");
            this.r.setStyleProperty("flex-direction", "row");
            this.r.setStyleProperty("flex-wrap", "no-wrap");
            this.r.setStyleProperty("align-items", "center");
            this.r.setStyleProperty("justify-content", "space-between");
            this.u.setStyleProperty("display", "flex");
            this.u.setStyleProperty("flex-direction", "row");
            this.u.setStyleProperty("flex-wrap", "no-wrap");
            this.u.setStyleProperty("align-items", "center");
            this.u.setStyleProperty("justify-content", "space-between");
            this.u.setStyleProperty("margin-bottom", "5px");
            this.z();
            this.y.setStyleProperty("margin-bottom", "8px");
            this.w.setStyleProperty("margin-bottom", "8px");
            this.x.setStyleProperty("margin-bottom", "8px");
        }
    }
    GridColumnOptionsView.$t = /*@__PURE__*/ markType(GridColumnOptionsView, 'GridColumnOptionsView', GridColumnOptionsViewBase.$);
    return GridColumnOptionsView;
})();
/**
 * @hidden
 */
let GridColumnOptions = /*@__PURE__*/ (() => {
    class GridColumnOptions extends GridColumnOptionsBase {
        constructor() {
            super();
            this.bw = null;
            this.bt = null;
            this.bv = null;
            this.bs = null;
            this.br = null;
            this.bo = null;
            this.b6 = null;
            this.b3 = null;
            this.b2 = null;
            this.cv = truncate(DeviceUtils.g(8));
            this.cx = truncate(DeviceUtils.g(4));
            this.cw = truncate(DeviceUtils.g(8));
            this.cu = truncate(DeviceUtils.g(8));
            this.cf = true;
            this.cq = true;
            this.ck = true;
            this.cn = true;
            this.ch = true;
            this.cb = true;
            this.b8 = true;
            this.eo = "Sort";
            this.ei = "Asc";
            this.el = "Desc";
            this.du = "Move";
            this.dx = "Left";
            this.d1 = "Right";
            this.d8 = "Pin";
            this.eb = "Left";
            this.ef = "Right";
            this.c8 = "Apply";
            this.db = "Cancel";
            this.de = "Clear column filters";
            this.by = 0;
            this.bx = 0;
            this.dk = "Search";
            this.filterApplyButtonClick = null;
            this.filterCancelButtonClick = null;
        }
        f() {
            return new GridColumnOptionsView();
        }
        a3() {
            super.a3();
            let a = this.column;
            if (null != this.bw) {
                this.bw.column = a;
            }
            if (null != this.bt) {
                this.bt.column = a;
            }
            if (null != this.bv) {
                this.bv.column = a;
            }
            if (null != this.bs) {
                this.bs.column = a;
            }
            if (null != this.br) {
                this.br.column = a;
            }
            if (null != this.bo) {
                this.bo.column = a;
            }
            this.e1();
        }
        a7(a, b) {
            super.a7(a, b);
            switch (b.propertyName) {
                case "HeaderClickAction":
                case "ColumnMovingMode":
                    this.e1();
                    break;
            }
        }
        ba(a, b, c) {
            super.ba(a, b, c);
            switch (a) {
                case "HeaderVisible":
                case "SortOptionsVisible":
                case "MoveOptionsVisible":
                case "PinOptionsVisible":
                case "HideOptionsVisible":
                case "FilterOptionsVisible":
                case "PaddingTop":
                case "PaddingRight":
                case "PaddingBottom":
                case "PaddingLeft":
                    this.e1();
                    break;
                case "ActualLabelTextStyle":
                case "ActualBaseTheme":
                case "ActualButtonDensity":
                case "ActualButtonTextStyle":
                case "ActualDensity":
                case "ActualFilterListDensity":
                case "BackgroundColor":
                case "TextColor":
                    this.ez();
                    break;
                case "ColumnNameTextStyle":
                    this.e0();
                    break;
                case "ActualColumnNameTextStyle":
                    this.e1();
                    break;
                case "FilterListDensity":
                    this.bz = this.filterListDensity == 0 ? this.q : this.filterListDensity;
                    break;
            }
        }
        e1() {
            this.bu.m();
        }
        get dh() {
            let a = this.column;
            return (null != a) ? a.hh : "(No column selected)";
        }
        get b7() {
            if (null == this.b6) {
                this.b6 = new FontInfo();
                this.b6.n = "'Segoe UI', Verdana";
                this.b6.d = 16;
            }
            return this.b6;
        }
        get ce() {
            return this.cg;
        }
        get cs() {
            return this.cr && this.bw.bo();
        }
        get cm() {
            return this.cl && this.bt.bo();
        }
        get cp() {
            return this.co && this.bv.bo();
        }
        get cj() {
            return this.ci && this.bs.bo();
        }
        get cd() {
            return this.cc && this.br.bo();
        }
        get ca() {
            return this.b9 && this.bo.bo();
        }
        get bu() {
            return this.e;
        }
        get b5() {
            return this.b3;
        }
        set b5(a) {
            let b = this.b3;
            this.b3 = a;
            if (b != this.b3) {
                this.a8("ColumnNameTextStyle", b, this.b3);
            }
        }
        get b4() {
            return this.b2;
        }
        set b4(a) {
            let b = this.b2;
            this.b2 = a;
            if (this.b2 != b) {
                this.a8("ActualColumnNameTextStyle", b, this.b2);
            }
        }
        get c3() {
            return this.cv;
        }
        set c3(a) {
            let b = this.cv;
            this.cv = a;
            if (this.cv != b) {
                this.a8("PaddingLeft", b, this.cv);
            }
        }
        get c5() {
            return this.cx;
        }
        set c5(a) {
            let b = this.cx;
            this.cx = a;
            if (this.cx != b) {
                this.a8("PaddingTop", b, this.cx);
            }
        }
        get c4() {
            return this.cw;
        }
        set c4(a) {
            let b = this.cw;
            this.cw = a;
            if (this.cw != b) {
                this.a8("PaddingRight", b, this.cw);
            }
        }
        get c2() {
            return this.cu;
        }
        set c2(a) {
            let b = this.cu;
            this.cu = a;
            if (this.cu != b) {
                this.a8("PaddingBottom", b, this.cu);
            }
        }
        get cg() {
            return this.cf;
        }
        set cg(a) {
            if (a == this.cf) {
                return;
            }
            let b = this.cf;
            this.cf = a;
            this.a8("HeaderVisible", b, this.cf);
        }
        get cr() {
            return this.cq;
        }
        set cr(a) {
            if (a == this.cq) {
                return;
            }
            let b = this.cq;
            this.cq = a;
            this.a8("SortOptionsVisible", b, this.cq);
        }
        get cl() {
            return this.ck;
        }
        set cl(a) {
            if (a == this.ck) {
                return;
            }
            let b = this.ck;
            this.ck = a;
            this.a8("MoveOptionsVisible", b, this.ck);
        }
        get co() {
            return this.cn;
        }
        set co(a) {
            if (a == this.cn) {
                return;
            }
            let b = this.cn;
            this.cn = a;
            this.a8("PinOptionsVisible", b, this.cn);
        }
        get ci() {
            return this.ch;
        }
        set ci(a) {
            if (a == this.ch) {
                return;
            }
            let b = this.ch;
            this.ch = a;
            this.a8("HideOptionsVisible", b, this.ch);
        }
        get cc() {
            return this.cb;
        }
        set cc(a) {
            if (a == this.cb) {
                return;
            }
            let b = this.cb;
            this.cb = a;
            this.a8("GroupOptionsVisible", b, this.cb);
        }
        get b9() {
            return this.b8;
        }
        set b9(a) {
            if (a == this.b8) {
                return;
            }
            let b = this.b8;
            this.b8 = a;
            this.a8("FilterOptionsVisible", b, this.b8);
        }
        get ep() {
            return null != this.bw ? this.bw.bs : this.eo;
        }
        set ep(a) {
            let b = this.ep;
            if (0 == StringComparer.b.compare(a, b)) {
                return;
            }
            this.eo = a;
            if (null != this.bw) {
                this.bw.bs = a;
            }
            this.a8("SortHeaderCaption", b, this.eo);
        }
        get ej() {
            return null != this.bw ? this.bw.bz : this.ei;
        }
        set ej(a) {
            let b = this.ej;
            if (0 == StringComparer.b.compare(a, b)) {
                return;
            }
            this.ei = a;
            if (null != this.bw) {
                this.bw.bz = a;
            }
            this.a8("SortAscendingCaption", b, this.ei);
        }
        get em() {
            return null != this.bw ? this.bw.b3 : this.el;
        }
        set em(a) {
            let b = this.em;
            if (0 == StringComparer.b.compare(a, b)) {
                return;
            }
            this.el = a;
            if (null != this.bw) {
                this.bw.b3 = a;
            }
            this.a8("SortDescendingCaption", b, this.el);
        }
        get dv() {
            return null != this.bt ? this.bt.bs : this.du;
        }
        set dv(a) {
            let b = this.dv;
            if (0 == StringComparer.b.compare(a, b)) {
                return;
            }
            this.du = a;
            if (null != this.bt) {
                this.bt.bs = a;
            }
            this.a8("MoveHeaderCaption", b, this.du);
        }
        get dy() {
            return null != this.bt ? this.bt.b1 : this.dx;
        }
        set dy(a) {
            let b = this.dy;
            if (0 == StringComparer.b.compare(a, b)) {
                return;
            }
            this.dx = a;
            if (null != this.bt) {
                this.bt.b1 = a;
            }
            this.a8("MoveLeftCaption", b, this.dx);
        }
        get d2() {
            return null != this.bt ? this.bt.b5 : this.d1;
        }
        set d2(a) {
            let b = this.d2;
            if (0 == StringComparer.b.compare(a, b)) {
                return;
            }
            this.d1 = a;
            if (null != this.bt) {
                this.bt.b5 = a;
            }
            this.a8("MoveRightCaption", b, this.d1);
        }
        get d9() {
            return null != this.bv ? this.bv.bs : this.d8;
        }
        set d9(a) {
            let b = this.d9;
            if (0 == StringComparer.b.compare(a, b)) {
                return;
            }
            this.d8 = a;
            if (null != this.bv) {
                this.bv.bs = a;
            }
            this.a8("PinHeaderCaption", b, this.d8);
        }
        get ec() {
            return null != this.bv ? this.bv.b0 : this.eb;
        }
        set ec(a) {
            let b = this.ec;
            if (0 == StringComparer.b.compare(a, b)) {
                return;
            }
            this.eb = a;
            if (null != this.bv) {
                this.bv.b0 = a;
            }
            this.a8("PinLeftCaption", b, this.eb);
        }
        get eg() {
            return null != this.bv ? this.bv.b4 : this.ef;
        }
        set eg(a) {
            let b = this.eg;
            if (0 == StringComparer.b.compare(a, b)) {
                return;
            }
            this.ef = a;
            if (null != this.bv) {
                this.bv.b4 = a;
            }
            this.a8("PinRightCaption", b, this.ef);
        }
        get c9() {
            return null != this.bo ? this.bo.b3 : this.c8;
        }
        set c9(a) {
            let b = this.c9;
            if (0 == StringComparer.b.compare(a, b)) {
                return;
            }
            this.c8 = a;
            if (null != this.bo) {
                this.bo.b3 = a;
            }
            this.a8("ApplyFiltersButtonCaption", b, this.c8);
        }
        get dc() {
            return null != this.bo ? this.bo.b7 : this.db;
        }
        set dc(a) {
            let b = this.dc;
            if (0 == StringComparer.b.compare(a, b)) {
                return;
            }
            this.db = a;
            if (null != this.bo) {
                this.bo.b7 = a;
            }
            this.a8("CancelFiltersButtonCaption", b, this.db);
        }
        get df() {
            return null != this.bo ? this.bo.cb : this.de;
        }
        set df(a) {
            let b = this.df;
            if (0 == StringComparer.b.compare(a, b)) {
                return;
            }
            this.de = a;
            if (null != this.bo) {
                this.bo.cb = a;
            }
            this.a8("ClearColumnFiltersCaption", b, this.de);
        }
        get filterListDensity() {
            return this.by;
        }
        set filterListDensity(a) {
            let b = this.by;
            this.by = a;
            if (b != this.by) {
                this.a8("FilterListDensity", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, a));
            }
        }
        get bz() {
            return this.bx;
        }
        set bz(a) {
            let b = this.bx;
            this.bx = a;
            if (b != this.bx) {
                this.a8("ActualFilterListDensity", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, a));
            }
        }
        get dl() {
            return this.dk;
        }
        set dl(a) {
            if (0 == StringComparer.b.compare(a, this.dk)) {
                return;
            }
            let b = this.dk;
            this.dk = a;
            if (null != this.bo) {
                this.bo.cg = a;
            }
            this.a8("FilterListPlaceholderText", b, this.dk);
        }
        notifySizeChanged() {
            this.e.j();
        }
        provideContent(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
            this.bu.aa(a, b, c, d, e, f, g, h, i);
            this.bw = j;
            this.bw.bz = this.ei;
            this.bw.b3 = this.el;
            this.bt = k;
            this.bt.b1 = this.dx;
            this.bt.b5 = this.d1;
            this.bv = l;
            this.bv.b0 = this.eb;
            this.bv.b4 = this.ef;
            this.bs = m;
            this.bs.bq = false;
            this.br = n;
            this.br.bq = false;
            this.bo = o;
            this.bo.b3 = this.c9;
            this.bo.cb = this.de;
            this.bo.cg = this.dl;
            let p = this.bw;
            p.propertyChanged = delegateCombine(p.propertyChanged, runOn(this, this.eu));
            let q = this.bt;
            q.propertyChanged = delegateCombine(q.propertyChanged, runOn(this, this.eu));
            let r = this.bv;
            r.propertyChanged = delegateCombine(r.propertyChanged, runOn(this, this.eu));
            let s = this.bs;
            s.propertyChanged = delegateCombine(s.propertyChanged, runOn(this, this.eu));
            let t = this.br;
            t.propertyChanged = delegateCombine(t.propertyChanged, runOn(this, this.eu));
            let u = this.bo;
            u.propertyChanged = delegateCombine(u.propertyChanged, runOn(this, this.eu));
            let v = this.bo;
            v.applyButtonClick = delegateCombine(v.applyButtonClick, runOn(this, this.es));
            let w = this.bo;
            w.cancelButtonClick = delegateCombine(w.cancelButtonClick, runOn(this, this.et));
            this.e0();
            this.bh();
            this.be();
            this.ez();
        }
        dq() {
            return stringFormat1("{0}px {1}px {2}px {3}px", this.c5.toString(), this.c4.toString(), this.c2.toString(), this.c3.toString());
        }
        e0() {
            this.b4 = (null == this.b5) ? this.b7 : this.b5;
        }
        ez() {
            let a = [this.bw, this.bt, this.bv, this.bs, this.br, this.bo];
            for (let c = 0; c < a.length; c++) {
                let b = a[c];
                if (null != b) {
                    b.bk = this.bk;
                    b.bn = this.bn;
                    b.density = this.q;
                    b.buttonDensity = this.p;
                    b.j = this.i;
                }
                let d = typeCast(GridColumnOptionsSimpleSectionBase.$, b);
                if (null != d) {
                    d.ag = this.aa;
                    d.ab = this.z;
                }
            }
            if (null != this.bo) {
                this.bo.bx = this.bz;
            }
        }
        ew(a) {
            if (null != this.filterApplyButtonClick) {
                this.filterApplyButtonClick(this, a);
            }
        }
        ex(a) {
            if (null != this.filterCancelButtonClick) {
                this.filterCancelButtonClick(this, a);
            }
        }
        es(a, b) {
            this.ew(b);
        }
        et(a, b) {
            this.ex(b);
        }
        eu(a, b) {
            switch (b.propertyName) {
            }
        }
    }
    GridColumnOptions.$t = /*@__PURE__*/ markType(GridColumnOptions, 'GridColumnOptions', GridColumnOptionsBase.$);
    return GridColumnOptions;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

class IgrGridColumnOptions extends IgrGridColumnOptionsBase {
    constructor(props) {
        super(props);
        this._reactRenderer = null;
        this._filterApplyButtonClick = null;
        this._filterApplyButtonClick_wrapped = null;
        this._filterCancelButtonClick = null;
        this._filterCancelButtonClick_wrapped = null;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._getMainRef = this._getMainRef.bind(this);
        this._getSortSectionRef = this._getSortSectionRef.bind(this);
        this._getMoveSectionRef = this._getMoveSectionRef.bind(this);
        this._getPinSectionRef = this._getPinSectionRef.bind(this);
        this._getFilterSectionRef = this._getFilterSectionRef.bind(this);
        this._getHeaderColumnNameSectionRef = this._getHeaderColumnNameSectionRef.bind(this);
        this._getHeaderButtonsSectionRef = this._getHeaderButtonsSectionRef.bind(this);
        this._getHideSectionRef = this._getHideSectionRef.bind(this);
        this._getGroupSectionRef = this._getGroupSectionRef.bind(this);
        this._getHeaderSectionRef = this._getHeaderSectionRef.bind(this);
        this._getSortOptionsRef = this._getSortOptionsRef.bind(this);
        this._getMoveOptionsRef = this._getMoveOptionsRef.bind(this);
        this._getPinOptionsRef = this._getPinOptionsRef.bind(this);
        this._getHideOptionsRef = this._getHideOptionsRef.bind(this);
        this._getGroupOptionsRef = this._getGroupOptionsRef.bind(this);
        this._getFilterOptionsRef = this._getFilterOptionsRef.bind(this);
        var columnOptions = this.i;
        columnOptions.notifySizeChanged();
        if (props) {
            this.initializeProperties();
        }
    }
    set height(value) {
        this._height = value;
        if (this._elRef) {
            this._elRef.style.height = value;
            this.i.notifySizeChanged();
        }
    }
    get height() {
        return this._height;
    }
    set width(value) {
        this._width = value;
        if (this._elRef) {
            this._elRef.style.height = value;
            this.i.notifySizeChanged();
        }
    }
    get width() {
        return this._width;
    }
    _getMainRef(ref) {
        this._elRef = ref;
        this.verifyReferences();
    }
    // These are the  main sections at the root level. 
    _getHeaderSectionRef(ref) {
        this._headerSectionRef = ref;
        this.verifyReferences();
    }
    _getSortSectionRef(ref) {
        this._sortSectionRef = ref;
        this.verifyReferences();
    }
    _getMoveSectionRef(ref) {
        this._moveSectionRef = ref;
        this.verifyReferences();
    }
    _getPinSectionRef(ref) {
        this._pinSectionRef = ref;
        this.verifyReferences();
    }
    _getFilterSectionRef(ref) {
        this._filterSectionRef = ref;
        this.verifyReferences();
    }
    // Sub-sections
    _getHeaderColumnNameSectionRef(ref) {
        this._headerColumnNameSectionRef = ref;
        this.verifyReferences();
    }
    _getHeaderButtonsSectionRef(ref) {
        this._headerButtonsSectionRef = ref;
        this.verifyReferences();
    }
    _getHideSectionRef(ref) {
        this._hideSectionRef = ref;
        this.verifyReferences();
    }
    _getGroupSectionRef(ref) {
        this._groupSectionRef = ref;
        this.verifyReferences();
    }
    // The actual components
    _getSortOptionsRef(ref) {
        this._sortOptionsRef = ref;
        this.verifyReferences();
    }
    _getMoveOptionsRef(ref) {
        this._moveOptionsRef = ref;
        this.verifyReferences();
    }
    _getPinOptionsRef(ref) {
        this._pinOptionsRef = ref;
        this.verifyReferences();
    }
    _getHideOptionsRef(ref) {
        this._hideOptionsRef = ref;
        this.verifyReferences();
    }
    _getGroupOptionsRef(ref) {
        this._groupOptionsRef = ref;
        this.verifyReferences();
    }
    _getFilterOptionsRef(ref) {
        this._filterOptionsRef = ref;
        this.verifyReferences();
    }
    render() {
        return (createElement("div", { className: "ig-grid-column-options igr-grid-column-options", ref: this._getMainRef }, createElement("div", { ref: this._getHeaderSectionRef, key: "headerSection" }, createElement("div", { ref: this._getHeaderColumnNameSectionRef, key: "headerColumnNameSection" }), createElement("div", { ref: this._getHeaderButtonsSectionRef, key: "headerButtonsSection" }, createElement("div", { ref: this._getGroupSectionRef, key: "groupSection" }, createElement(IgrGridColumnGroupOptions, { ref: this._getGroupOptionsRef, key: "groupOptions" })), createElement("div", { ref: this._getHideSectionRef, key: "hideSection" }, createElement(IgrGridColumnHideOptions, { ref: this._getHideOptionsRef, key: "hideOptions" })))), createElement("div", { ref: this._getSortSectionRef, key: "sortSection" }, createElement(IgrGridColumnSortOptions, { ref: this._getSortOptionsRef, key: "sortOptions" })), createElement("div", { ref: this._getMoveSectionRef, key: "moveSection" }, createElement(IgrGridColumnMoveOptions, { ref: this._getMoveOptionsRef, key: "moveOptions" })), createElement("div", { ref: this._getPinSectionRef, key: "pinSection" }, createElement(IgrGridColumnPinOptions, { ref: this._getPinOptionsRef, key: "pinOptions" })), createElement("div", { ref: this._getFilterSectionRef, key: "filterSection" }, createElement(IgrGridColumnFilterOptions, { ref: this._getFilterOptionsRef, key: "filterOptions" }))));
    }
    verifyReferences() {
        if (this._elRef &&
            this._headerSectionRef &&
            this._sortSectionRef &&
            this._moveSectionRef &&
            this._pinSectionRef &&
            this._filterSectionRef &&
            this._headerColumnNameSectionRef &&
            this._headerButtonsSectionRef &&
            this._hideSectionRef &&
            this._groupSectionRef &&
            this._sortOptionsRef &&
            this._moveOptionsRef &&
            this._pinOptionsRef &&
            this._hideOptionsRef &&
            this._groupOptionsRef &&
            this._filterOptionsRef) {
            this._reactRenderer = new ReactRenderer(this._elRef, document, false, null);
            if (document) {
                this._elRef.style.display = "block";
                this._elRef.style.width = "100%";
                this._elRef.style.height = "100%";
            }
            this.i.provideRenderer(this._reactRenderer);
            var headerSectionWrapper = this._reactRenderer.getWrapper(this._headerSectionRef);
            var sortSectionWrapper = this._reactRenderer.getWrapper(this._sortSectionRef);
            var moveSectionWrapper = this._reactRenderer.getWrapper(this._moveSectionRef);
            var pinSectionWrapper = this._reactRenderer.getWrapper(this._pinSectionRef);
            var filterSectionWrapper = this._reactRenderer.getWrapper(this._filterSectionRef);
            var headerColumnNameSectionWrapper = this._reactRenderer.getWrapper(this._headerColumnNameSectionRef);
            var headerButtonsSectionWrapper = this._reactRenderer.getWrapper(this._headerButtonsSectionRef);
            var hideSectionWrapper = this._reactRenderer.getWrapper(this._hideSectionRef);
            var groupSectionWrapper = this._reactRenderer.getWrapper(this._groupSectionRef);
            this.i.provideContent(headerSectionWrapper, sortSectionWrapper, moveSectionWrapper, pinSectionWrapper, filterSectionWrapper, headerColumnNameSectionWrapper, headerButtonsSectionWrapper, hideSectionWrapper, groupSectionWrapper, this._sortOptionsRef.i, this._moveOptionsRef.i, this._pinOptionsRef.i, this._hideOptionsRef.i, this._groupOptionsRef.i, this._filterOptionsRef.i);
            this._reactRenderer.addSizeWatcher(() => {
                this.i.notifySizeChanged();
            });
        }
    }
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    initializeProperties() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    // supports angular themes or custom properties set in CSS
    updateStyle() {
        this._styling(this._elRef, this);
    }
    componentWillUnmount() {
        this.i.destroy();
        if (this._reactRenderer)
            this._reactRenderer.destroy();
    }
    componentDidMount() {
        this._elRef.style.width = this._width ? this._width : "";
        this._elRef.style.height = this._height ? this._height : "";
        this.i.notifySizeChanged();
        this.initializeContent();
    }
    initializeContent() {
        this._styling(this._elRef, this);
        this.updateStyle();
        this.i.notifySizeChanged();
    }
    createImplementation() {
        return new GridColumnOptions();
    }
    get i() {
        return this._implementation;
    }
    get headerOptionsVisibleResolved() {
        return this.i.ce;
    }
    get sortOptionsVisibleResolved() {
        return this.i.cs;
    }
    get moveOptionsVisibleResolved() {
        return this.i.cm;
    }
    get pinOptionsVisibleResolved() {
        return this.i.cp;
    }
    get hideOptionsVisibleResolved() {
        return this.i.cj;
    }
    get groupOptionsVisibleResolved() {
        return this.i.cd;
    }
    get filterOptionsVisibleResolved() {
        return this.i.ca;
    }
    /**
     * Gets or sets the font to use for columnNames.
    */
    get columnNameTextStyle() {
        if (this.i.b5 == null) {
            return null;
        }
        return this.i.b5.fontString;
    }
    set columnNameTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.b5 = fi;
    }
    /**
     * Gets or sets the amount of left padding to use for the left edge of the component.
    */
    get paddingLeft() {
        return this.i.c3;
    }
    set paddingLeft(v) {
        this.i.c3 = +v;
    }
    /**
     * Gets or sets the amount of left padding to use for the top edge of the component.
    */
    get paddingTop() {
        return this.i.c5;
    }
    set paddingTop(v) {
        this.i.c5 = +v;
    }
    /**
     * Gets or sets the amount of left padding to use for the right edge of the component.
    */
    get paddingRight() {
        return this.i.c4;
    }
    set paddingRight(v) {
        this.i.c4 = +v;
    }
    /**
     * Gets or sets the amount of left padding to use for the bottom edge of the component.
    */
    get paddingBottom() {
        return this.i.c2;
    }
    set paddingBottom(v) {
        this.i.c2 = +v;
    }
    get headerVisible() {
        return this.i.cg;
    }
    set headerVisible(v) {
        this.i.cg = ensureBool(v);
    }
    get sortOptionsVisible() {
        return this.i.cr;
    }
    set sortOptionsVisible(v) {
        this.i.cr = ensureBool(v);
    }
    get moveOptionsVisible() {
        return this.i.cl;
    }
    set moveOptionsVisible(v) {
        this.i.cl = ensureBool(v);
    }
    get pinOptionsVisible() {
        return this.i.co;
    }
    set pinOptionsVisible(v) {
        this.i.co = ensureBool(v);
    }
    get hideOptionsVisible() {
        return this.i.ci;
    }
    set hideOptionsVisible(v) {
        this.i.ci = ensureBool(v);
    }
    get groupOptionsVisible() {
        return this.i.cc;
    }
    set groupOptionsVisible(v) {
        this.i.cc = ensureBool(v);
    }
    get filterOptionsVisible() {
        return this.i.b9;
    }
    set filterOptionsVisible(v) {
        this.i.b9 = ensureBool(v);
    }
    get sortHeaderCaption() {
        return this.i.ep;
    }
    set sortHeaderCaption(v) {
        this.i.ep = v;
    }
    get sortAscendingCaption() {
        return this.i.ej;
    }
    set sortAscendingCaption(v) {
        this.i.ej = v;
    }
    get sortDescendingCaption() {
        return this.i.em;
    }
    set sortDescendingCaption(v) {
        this.i.em = v;
    }
    get moveHeaderCaption() {
        return this.i.dv;
    }
    set moveHeaderCaption(v) {
        this.i.dv = v;
    }
    get moveLeftCaption() {
        return this.i.dy;
    }
    set moveLeftCaption(v) {
        this.i.dy = v;
    }
    get moveRightCaption() {
        return this.i.d2;
    }
    set moveRightCaption(v) {
        this.i.d2 = v;
    }
    get pinHeaderCaption() {
        return this.i.d9;
    }
    set pinHeaderCaption(v) {
        this.i.d9 = v;
    }
    get pinLeftCaption() {
        return this.i.ec;
    }
    set pinLeftCaption(v) {
        this.i.ec = v;
    }
    get pinRightCaption() {
        return this.i.eg;
    }
    set pinRightCaption(v) {
        this.i.eg = v;
    }
    get applyFiltersButtonCaption() {
        return this.i.c9;
    }
    set applyFiltersButtonCaption(v) {
        this.i.c9 = v;
    }
    get cancelFiltersButtonCaption() {
        return this.i.dc;
    }
    set cancelFiltersButtonCaption(v) {
        this.i.dc = v;
    }
    get clearColumnFiltersCaption() {
        return this.i.df;
    }
    set clearColumnFiltersCaption(v) {
        this.i.df = v;
    }
    /**
     * Gets or sets the display Density to use for the buttons in the component.
    */
    get filterListDensity() {
        return this.i.filterListDensity;
    }
    set filterListDensity(v) {
        this.i.filterListDensity = ensureEnum(ControlDisplayDensity_$type, v);
    }
    /**
     * Gets the actual display filterListDensity to use for the component.
    */
    get actualFilterListDensity() {
        return this.i.bz;
    }
    set actualFilterListDensity(v) {
        this.i.bz = ensureEnum(ControlDisplayDensity_$type, v);
    }
    get filterListPlaceholderText() {
        return this.i.dl;
    }
    set filterListPlaceholderText(v) {
        this.i.dl = v;
    }
    get filterApplyButtonClick() {
        return this._filterApplyButtonClick;
    }
    set filterApplyButtonClick(ev) {
        if (this._filterApplyButtonClick_wrapped !== null) {
            this.i.filterApplyButtonClick = delegateRemove(this.i.filterApplyButtonClick, this._filterApplyButtonClick_wrapped);
            this._filterApplyButtonClick_wrapped = null;
            this._filterApplyButtonClick = null;
        }
        this._filterApplyButtonClick = ev;
        this._filterApplyButtonClick_wrapped = (o, e) => {
            let outerArgs = new IgrFilterApplyButtonClickEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeFilterApplyButtonClick) {
                this.beforeFilterApplyButtonClick(this, outerArgs);
            }
            if (this._filterApplyButtonClick) {
                this._filterApplyButtonClick(this, outerArgs);
            }
        };
        this.i.filterApplyButtonClick = delegateCombine(this.i.filterApplyButtonClick, this._filterApplyButtonClick_wrapped);
    }
    get filterCancelButtonClick() {
        return this._filterCancelButtonClick;
    }
    set filterCancelButtonClick(ev) {
        if (this._filterCancelButtonClick_wrapped !== null) {
            this.i.filterCancelButtonClick = delegateRemove(this.i.filterCancelButtonClick, this._filterCancelButtonClick_wrapped);
            this._filterCancelButtonClick_wrapped = null;
            this._filterCancelButtonClick = null;
        }
        this._filterCancelButtonClick = ev;
        this._filterCancelButtonClick_wrapped = (o, e) => {
            let outerArgs = new IgrFilterCancelButtonClickEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeFilterCancelButtonClick) {
                this.beforeFilterCancelButtonClick(this, outerArgs);
            }
            if (this._filterCancelButtonClick) {
                this._filterCancelButtonClick(this, outerArgs);
            }
        };
        this.i.filterCancelButtonClick = delegateCombine(this.i.filterCancelButtonClick, this._filterCancelButtonClick_wrapped);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrGridColumnOptionsModule {
    static register() {
        IgrGridColumnSortOptionsModule.register();
        IgrGridColumnMoveOptionsModule.register();
        IgrGridColumnPinOptionsModule.register();
        IgrGridColumnHideOptionsModule.register();
        IgrGridColumnGroupOptionsModule.register();
        IgrGridColumnFilterOptionsModule.register();
        TypeRegistrar.registerCons('IgrGridColumnOptions', IgrGridColumnOptions);
        TypeRegistrar.registerCons('IgrGridColumnOptions', IgrGridColumnOptions);
        TypeRegistrar.register('GridColumnOptions', GridColumnOptions.$type);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GotFocusEventArgs = /*@__PURE__*/ (() => {
    class GotFocusEventArgs extends EventArgs {
    }
    GotFocusEventArgs.$t = /*@__PURE__*/ markType(GotFocusEventArgs, 'GotFocusEventArgs', EventArgs.$);
    return GotFocusEventArgs;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let LostFocusEventArgs = /*@__PURE__*/ (() => {
    class LostFocusEventArgs extends EventArgs {
    }
    LostFocusEventArgs.$t = /*@__PURE__*/ markType(LostFocusEventArgs, 'LostFocusEventArgs', EventArgs.$);
    return LostFocusEventArgs;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let MultiColumnComboBoxUtilities = /*@__PURE__*/ (() => {
    class MultiColumnComboBoxUtilities extends Base {
        static a(a, b, c, d, e, f, g, h) {
            let i = a.createElement("div");
            let j = a.getSubRenderer(i);
            g = new Button();
            g.provideContainer(j);
            g.s = c;
            g.h = d;
            g.d = e;
            let k = a.createElement("div");
            k.setStyleProperty("display", "inline-block");
            h = new Icon();
            let l = a.getSubRenderer(k);
            h.provideContainer(l);
            h.svgPath = b;
            k.setStyleProperty("width", stringFormat("{0}px", f.width.toString()));
            k.setStyleProperty("height", stringFormat("{0}px", f.height.toString()));
            let m = a.createElement("div");
            m.setStyleProperty("display", "flex");
            m.setStyleProperty("flex-direction", "row");
            m.setStyleProperty("flex-wrap", "no-wrap");
            m.setStyleProperty("align-items", "center");
            m.append(k);
            g.appendButtonContent(m);
            return {
                ret: i,
                p6: g,
                p7: h
            };
        }
        static d(a) {
            let b = 0;
            if (a.altKey) {
                b |= 1;
            }
            if (a.shiftKey) {
                b |= 4;
            }
            if (a.ctrlKey) {
                b |= 2;
            }
            return b;
        }
        static c(a, b, c = "block") {
            let d = b ? c : "none";
            a.setStyleProperty("display", d);
        }
        static e(a, b, c) {
            if (null == MultiColumnComboBoxUtilities.b) {
                MultiColumnComboBoxUtilities.b = a.createElement("div");
                MultiColumnComboBoxUtilities.b.setStyleProperty("height", "auto");
                MultiColumnComboBoxUtilities.b.setStyleProperty("width", "auto");
                MultiColumnComboBoxUtilities.b.setStyleProperty("white-space", "nowrap");
                MultiColumnComboBoxUtilities.b.setStyleProperty("position", "absolute");
            }
            if (null != c) {
                MultiColumnComboBoxUtilities.b.setStyleProperty("font", c.fontString);
            }
            else {
                MultiColumnComboBoxUtilities.b.setStyleProperty("font", stringEmpty());
            }
            let d = MultiColumnComboBoxUtilities.b.getNativeElement();
            document.body.appendChild(d);
            MultiColumnComboBoxUtilities.b.setRawText(b);
            let e = MultiColumnComboBoxUtilities.b.outerWidth();
            let f = MultiColumnComboBoxUtilities.b.outerHeight();
            document.body.removeChild(d);
            return new Size(1, e, f);
        }
    }
    MultiColumnComboBoxUtilities.$t = /*@__PURE__*/ markType(MultiColumnComboBoxUtilities, 'MultiColumnComboBoxUtilities');
    MultiColumnComboBoxUtilities.b = null;
    return MultiColumnComboBoxUtilities;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * Indicates what should occur on a header click event.
 */
var SortMode = /*@__PURE__*/ (function (SortMode) {
    /**
     * Sorting by one column is permitted and toggles between ascending and descending.
     */
    SortMode[SortMode["SortByOneColumnOnly"] = 0] = "SortByOneColumnOnly";
    /**
     * Sorting by multiple columns is permitted and each toggle between ascending and descending.
     */
    SortMode[SortMode["SortByMultipleColumns"] = 1] = "SortByMultipleColumns";
    /**
     * Sorting by one column is permitted and toggles between ascending, descending and unsorted.
     */
    SortMode[SortMode["SortByOneColumnOnlyTriState"] = 2] = "SortByOneColumnOnlyTriState";
    /**
     * Sorting by multiple columns is permitted and toggles between ascending, descending and unsorted.
     */
    SortMode[SortMode["SortByMultipleColumnsTriState"] = 3] = "SortByMultipleColumnsTriState";
    /**
     * No action is triggered.
     */
    SortMode[SortMode["None"] = 4] = "None";
    return SortMode;
})({});
/**
 * @hidden
 */
let SortMode_$type = /*@__PURE__*/ markEnum('SortMode', 'SortByOneColumnOnly,0|SortByMultipleColumns,1|SortByOneColumnOnlyTriState,2|SortByMultipleColumnsTriState,3|None,4');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let MultipleDataSourceNotifier = /*@__PURE__*/ (() => {
    class MultipleDataSourceNotifier extends Base {
        constructor(a, ..._rest) {
            super();
            this.a = null;
            a = (a == void 0) ? 0 : a;
            switch (a) {
                case 0: break;
                case 1:
                    {
                        let c = _rest[0];
                        this.b.o(c);
                    }
                    break;
            }
        }
        get b() {
            if (null == this.a) {
                this.a = new List$1(IDataSourceUpdateNotifier_$type, 0);
            }
            return this.a;
        }
        c(a) {
            this.b.add(a);
        }
        d(a) {
            for (let b = 0; b < this.b.count; b++) {
                a(this.b._inner[b]);
            }
        }
        notifyClearItems() {
            this.d((a) => a.notifyClearItems());
        }
        notifyInsertItem(a, b) {
            this.d((c) => c.notifyInsertItem(a, b));
        }
        notifyRemoveItem(a, b) {
            this.d((c) => c.notifyRemoveItem(a, b));
        }
        notifySetItem(a, b, c) {
            this.d((d) => d.notifySetItem(a, b, c));
        }
        rangeActualized(a, b) {
            this.d((c) => c.rangeActualized(a, b));
        }
    }
    MultipleDataSourceNotifier.$t = /*@__PURE__*/ markType(MultipleDataSourceNotifier, 'MultipleDataSourceNotifier', Base.$, [IDataSourceUpdateNotifier_$type]);
    return MultipleDataSourceNotifier;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let MultiColumnComboBoxTextChangedEventArgs = /*@__PURE__*/ (() => {
    class MultiColumnComboBoxTextChangedEventArgs extends EventArgs {
        constructor(a, b) {
            super();
            this.d = null;
            this.b = null;
            this.d = a;
            this.b = b;
        }
        get oldText() {
            return this.d;
        }
        get newText() {
            return this.b;
        }
    }
    MultiColumnComboBoxTextChangedEventArgs.$t = /*@__PURE__*/ markType(MultiColumnComboBoxTextChangedEventArgs, 'MultiColumnComboBoxTextChangedEventArgs', EventArgs.$);
    return MultiColumnComboBoxTextChangedEventArgs;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let MultiColumnComboBoxValueChangedEventArgs = /*@__PURE__*/ (() => {
    class MultiColumnComboBoxValueChangedEventArgs extends EventArgs {
        constructor(a, b) {
            super();
            this.d = null;
            this.b = null;
            this.d = a;
            this.b = b;
        }
        get oldValue() {
            return this.d;
        }
        get newValue() {
            return this.b;
        }
    }
    MultiColumnComboBoxValueChangedEventArgs.$t = /*@__PURE__*/ markType(MultiColumnComboBoxValueChangedEventArgs, 'MultiColumnComboBoxValueChangedEventArgs', EventArgs.$);
    return MultiColumnComboBoxValueChangedEventArgs;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let MultiColumnComboVisualModelExport = /*@__PURE__*/ (() => {
    class MultiColumnComboVisualModelExport extends Base {
        constructor() {
            super(...arguments);
            this.a = null;
            this.j = 0;
            this.b = null;
            this.p = 0;
            this._columnHeadersVisible = false;
            this.au = null;
            this.at = null;
            this.k = 0;
            this._dropDownButtonVisible = false;
            this.q = 0;
            this.aa = null;
            this.c = null;
            this.ad = null;
            this.ae = null;
            this.af = null;
            this.v = 0;
            this.ab = null;
            this.ac = null;
            this._actualLabelVisible = false;
            this._actualNoMatchesFoundLabel = null;
            this.d = null;
            this.e = null;
            this.ai = null;
            this.aj = null;
            this.ak = null;
            this.w = 0;
            this.ag = null;
            this.ah = null;
            this.al = null;
            this._rowSeparatorsVisible = false;
            this.f = null;
            this.aq = null;
            this.ar = null;
            this.as = null;
            this.x = 0;
            this.ao = null;
            this.ap = null;
            this.g = null;
            this.r = 0;
            this.h = null;
            this.s = 0;
            this.t = 0;
            this.u = 0;
            this.an = null;
            this.i = null;
            this.y = null;
        }
        get columnHeadersVisible() {
            return this._columnHeadersVisible;
        }
        set columnHeadersVisible(a) {
            this._columnHeadersVisible = a;
        }
        get dropDownButtonVisible() {
            return this._dropDownButtonVisible;
        }
        set dropDownButtonVisible(a) {
            this._dropDownButtonVisible = a;
        }
        get actualLabelVisible() {
            return this._actualLabelVisible;
        }
        set actualLabelVisible(a) {
            this._actualLabelVisible = a;
        }
        get actualNoMatchesFoundLabel() {
            return this._actualNoMatchesFoundLabel;
        }
        set actualNoMatchesFoundLabel(a) {
            this._actualNoMatchesFoundLabel = a;
        }
        get rowSeparatorsVisible() {
            return this._rowSeparatorsVisible;
        }
        set rowSeparatorsVisible(a) {
            this._rowSeparatorsVisible = a;
        }
        am() {
            let a = new StringBuilder(0);
            a.l("{");
            a.l("actualBackgroundColor : " + this.a.serialize() + ", ");
            a.l("actualBaseTheme : " + this.j + ", ");
            a.l("actualBorderColor : " + this.b.serialize() + ", ");
            a.l("actualBorderWidth : " + this.p + ", ");
            a.l("columnHeadersVisible : " + this.columnHeadersVisible + ", ");
            a.l("actualContentPadding : { left: " + this.au.c + ",top: " + this.au.e + ",right: " + this.au.d + ",bottom: " + this.au.b + "},");
            a.l("actualDensity : " + this.k + ", ");
            a.l("dropDownButtonVisible : " + this.dropDownButtonVisible + ", ");
            a.l("actualFocusUnderlineOpacity : " + this.q + ", ");
            a.l("label : \"" + this.aa + "\", ");
            a.l("actualLabelTextColor : " + this.c.serialize() + ", ");
            if (!stringIsNullOrEmpty(this.ad)) {
                a.l("labelFontStyle : \"" + this.ad + "\", ");
            }
            if (!stringIsNullOrEmpty(this.ae)) {
                a.l("labelFontVariant : \"" + this.ae + "\", ");
            }
            if (!stringIsNullOrEmpty(this.af)) {
                a.l("labelFontWeight : \"" + this.af + "\", ");
            }
            if (!stringIsNullOrEmpty(this.ab)) {
                a.l("labelFontFamily : \"" + this.ab + "\", ");
            }
            if (!stringIsNullOrEmpty(this.ac)) {
                a.l("labelFontStretch : \"" + this.ac + "\", ");
            }
            if (!isNaN_(this.v)) {
                a.l("labelFontSize : " + this.v + ", ");
            }
            a.l("actualLabelVisible : " + this.actualLabelVisible + ", ");
            a.l("actualNoMatchesFoundLabel :\"" + this.actualNoMatchesFoundLabel + "\", ");
            a.l("actualNoMatchesFoundLabelBackgroundColor : " + this.d.serialize() + ", ");
            a.l("actualNoMatchesFoundLabelTextColor : " + this.e.serialize() + ", ");
            if (!stringIsNullOrEmpty(this.ai)) {
                a.l("noMatchesFoundLabelFontStyle : \"" + this.ai + "\", ");
            }
            if (!stringIsNullOrEmpty(this.aj)) {
                a.l("noMatchesFoundLabelFontVariant : \"" + this.aj + "\", ");
            }
            if (!stringIsNullOrEmpty(this.ak)) {
                a.l("noMatchesFoundLabelFontWeight : \"" + this.ak + "\", ");
            }
            if (!stringIsNullOrEmpty(this.ag)) {
                a.l("noMatchesFoundLabelFontFamily : \"" + this.ag + "\", ");
            }
            if (!stringIsNullOrEmpty(this.ah)) {
                a.l("noMatchesFoundLabelFontStretch : \"" + this.ah + "\", ");
            }
            if (!isNaN_(this.w)) {
                a.l("noMatchesFoundLabelFontSize : " + this.w + ", ");
            }
            a.l("placeholder : \"" + this.al + "\", ");
            a.l("rowSeparatorsVisible : " + this.rowSeparatorsVisible + ", ");
            a.l("actualTextColor : " + this.f.serialize() + ", ");
            if (!stringIsNullOrEmpty(this.aq)) {
                a.l("textStyleFontStyle : \"" + this.aq + "\", ");
            }
            if (!stringIsNullOrEmpty(this.ar)) {
                a.l("textStyleFontVariant : \"" + this.ar + "\", ");
            }
            if (!stringIsNullOrEmpty(this.as)) {
                a.l("textStyleFontWeight : \"" + this.as + "\", ");
            }
            if (!stringIsNullOrEmpty(this.ao)) {
                a.l("textStyleFontFamily : \"" + this.ao + "\", ");
            }
            if (!stringIsNullOrEmpty(this.ap)) {
                a.l("textStyleFontStretch : \"" + this.ap + "\", ");
            }
            if (!isNaN_(this.x)) {
                a.l("textStyleFontSize : " + this.x + ", ");
            }
            a.l("actualUnderlineColor : " + this.g.serialize() + ", ");
            a.l("actualUnderlineOpacity : " + this.r + ", ");
            a.l("actualUnderlineRippleColor : " + this.h.serialize() + ", ");
            a.l("actualUnderlineRippleOpacity : " + this.s + ", ");
            a.l("actualUnderlineRippleWidth : " + this.t + ", ");
            a.l("actualUnderlineWidth : " + this.u + ", ");
            a.l("text : \"" + this.an + "\", ");
            if (this.y != null) {
                a.l("value : \"" + this.y.toString() + "\", ");
            }
            a.l("Grid : " + this.i.av());
            a.l("}");
            return a.toString();
        }
    }
    MultiColumnComboVisualModelExport.$t = /*@__PURE__*/ markType(MultiColumnComboVisualModelExport, 'MultiColumnComboVisualModelExport');
    return MultiColumnComboVisualModelExport;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let MultiColumnComboBoxView = /*@__PURE__*/ (() => {
    class MultiColumnComboBoxView extends Base {
        constructor() {
            super(...arguments);
            this.ac = null;
            this.ak = null;
            this.f = null;
            this.ai = null;
            this.k = null;
            this.ah = null;
            this.j = null;
            this.aj = null;
            this.l = null;
            this.h = null;
            this.ae = null;
            this.i = null;
            this.af = null;
            this.m = null;
            this.ag = null;
            this.d = null;
            this.aq = null;
            this.ab = new List$1(Delegate_$type, 0);
            this.au = null;
            this.aa = true;
            this.ap = 0;
            this.x = false;
            this.a = null;
            this.c = 0;
            this.w = false;
            this.s = false;
            this.r = false;
            this.p = false;
            this.an = null;
            this.am = null;
            this.v = false;
            this.ao = -1;
            this.z = false;
            this.t = false;
        }
        get e() {
            return this.d;
        }
        get y() {
            return this.ap == 46;
        }
        get n() {
            return this.m;
        }
        bf(a) {
            this.ak = a;
            this.b1();
        }
        bg(a) {
            this.f = a;
        }
        bp() {
        }
        b1() {
            this.ag = this.ac.createElement("div");
            this.cr();
            this.a1();
            this.a0();
            this.ak.append(this.ai);
            this.ck();
            this.cl();
            document.addEventListener("click", runOn(this, this.a2), false);
            window.addEventListener("resize", runOn(this, this.cx), false);
        }
        aw(a) {
            let b = this.g.n();
            if (null == b) {
                return;
            }
            this.p = false;
            if (b.eo != a) {
                b.eo = a;
                this.p = true;
            }
            else {
                this.a3();
            }
        }
        ay() {
            let a = this.e;
            a.cw = null;
        }
        az() {
            let a = this.n;
            if (null != a) {
                a.an();
            }
            this.cl();
            let b = this.g.n();
            if (null != b) {
                let c = b.eo;
                if (null != c) {
                    b.eo = null;
                }
            }
        }
        u(a) {
            if (null == a) {
                return false;
            }
            let b = this.ai.getNativeElement();
            let c = this.ag.getNativeElement();
            let d = this.am.getNativeElement();
            return b.contains(a) || c.contains(a) || d.contains(a);
        }
        a0() {
            let a = this.ad;
            let b = this.g;
            this.ai = a.createElement("div");
            this.ai.setStyleProperty("display", "flex");
            this.ai.setStyleProperty("height", "100%");
            this.ai.setAttribute("tabIndex", "0");
            this.ai.setAttribute("outline", "none !important");
            this.ai.listen("focusin", runOn(this, this.bm));
            this.ai.listen("focusout", runOn(this, this.bn));
            let c = a.getSubRenderer(this.ai);
            this.k = new InputGroup();
            this.k.provideContainer(c);
            this.k.k = 2;
            this.aj = a.createElement("div");
            let d = a.getSubRenderer(this.aj);
            this.l = new Label();
            this.l.provideContainer(d);
            if (this.f.actualLabelVisible) {
                this.cu();
            }
            this.ah = a.createElement("div");
            this.ah.addClass("ig-input");
            this.ah.setRawStyleProperty("flex-grow", "1");
            let e = a.getSubRenderer(this.ah);
            this.j = new Input();
            this.j.provideContainer(e);
            a.getExternal(this.j, a.rootWrapper, a.getExternal(b, null, null));
            this.j.b0 = "text";
            this.j.cf = b.e5;
            let f = this.j;
            f.changing = delegateCombine(f.changing, runOn(this, this.bh));
            let g = this.j;
            g.compositionEnd = delegateCombine(g.compositionEnd, runOn(this, this.bi));
            let h = this.j;
            h.keyDown = delegateCombine(h.keyDown, runOn(this, this.bk));
            let i = this.j;
            i.gotFocus = delegateCombine(i.gotFocus, runOn(this, this.bj));
            let j = this.j;
            j.mouseDown = delegateCombine(j.mouseDown, runOn(this, this.bl));
            this.k.appendContentChild(this.ah);
            this.k.inputs.add(this.j);
            this.a5(this.g.a2);
            let k = a.createElement("div");
            let l = a.getSubRenderer(k);
            let m = new Suffix();
            m.provideContainer(l);
            this.ae = a.createElement("div");
            this.h = new Icon();
            let n = a.getSubRenderer(this.ae);
            this.h.provideContainer(n);
            this.h.svgPath = MultiColumnComboBoxView.ar;
            this.ae.setStyleProperty("height", "16px");
            this.ae.setStyleProperty("width", "16px");
            m.appendContentChild(this.ae);
            this.k.appendContentChild(k);
            this.k.inputs.add(m);
            this.ch();
            let o = a.createElement("div");
            let p = a.getSubRenderer(o);
            let q = new Suffix();
            q.provideContainer(p);
            this.af = a.createElement("div");
            this.i = new Icon();
            let r = a.getSubRenderer(this.af);
            this.i.provideContainer(r);
            this.i.svgPath = MultiColumnComboBoxView.at;
            q.appendContentChild(this.af);
            this.k.appendContentChild(o);
            this.k.inputs.add(q);
            this.ae.listen("click", runOn(this, this.ax));
            this.af.listen("click", runOn(this, this.a4));
        }
        a1() {
            let a = this.ac.createElement("div");
            let b = this.ac.getSubRenderer(a);
            this.m = new Popup();
            this.m.provideRenderer(b);
            this.am = this.ac.createElement("div");
            this.am.setStyleProperty("padding", "4px");
            this.am.setStyleProperty("white-space", "nowrap");
            this.an = this.ac.createElement("div");
            this.an.append(this.am);
            this.an.append(this.ag);
            this.m.appendPopupContent(this.an);
        }
        bt(a, b) {
        }
        bw(a, b, c) {
        }
        bs() {
            switch (this.c) {
                case 2:
                case 1:
                    if (null == this.a) {
                        this.c = 0;
                    }
                    break;
            }
            let a = null;
            switch (this.c) {
                case 2:
                    {
                        let b = this.a.actualCount;
                        if (b == 0) {
                            this.g.cv = null;
                        }
                        else {
                            if (b > 1) {
                            }
                            a = this.a.getItemAtIndex(0);
                            let c = this.g.i();
                            let d = new List$1(Base.$, 0);
                            for (let f = 0; f < c.length; f++) {
                                let e = c[f];
                                let g = this.a.getItemProperty(a, e);
                                d.add1(g);
                            }
                            this.g.cv = d.count == 1 ? d._inner[0] : d.toArray();
                        }
                    }
                    break;
                case 1:
                    {
                        let h = this.a.actualCount;
                        if (h == 0) {
                            this.g.e5 = stringEmpty();
                        }
                        else {
                            if (h > 1) {
                            }
                            let i = this.g.ej();
                            a = this.a.getItemAtIndex(0);
                            let j = this.a.getItemProperty(a, i).toString();
                            this.g.e5 = j;
                        }
                        let k = this.b();
                        let l = k.indexOfItem(a);
                        this.cg(l);
                    }
                    break;
                case 0:
                default: return;
            }
            if (null != a) {
                let m = this.b();
                let n = m.indexOfItem(a);
                this.cg(n);
            }
            else {
                this.cg(-1);
            }
            if (this.a != null) {
                this.a.updateNotifier = null;
                this.a = null;
            }
            this.c = 0;
        }
        bu(a, b) {
        }
        bv(a, b) {
        }
        bz(a, b) {
            let c = this.e;
            if (null != c) {
                let d = c.cw;
                if (null != d) {
                    if (d.b >= a && d.b <= b) {
                        this.ce(d.b);
                        this.cs();
                    }
                }
            }
        }
        b4(a, b, c) {
        }
        br() {
            this.b7();
            if (this.w) {
                let a = this.b();
                let b = a.actualCount;
                if (this.aa && b > 0) {
                    this.b9();
                }
                else {
                    this.ca();
                }
            }
            else {
                this.cq();
            }
        }
        b0(a, b) {
        }
        b2(a, b) {
        }
        o() {
            let a = document.activeElement;
            return this.u(a);
        }
        a3() {
            this.cv();
            this.bo();
            let a = this.n;
            if (a.t) {
                return;
            }
            let b = this.cy();
            a.q = !this.w;
            a.showRelativeToExclusionRect(b, 1, 1);
            this.cl();
        }
        cy() {
            let a = this.ac.rootWrapper.getNativeElement();
            let b = (a.getBoundingClientRect());
            return new Rect(0, b.left + window.pageXOffset, b.top + window.pageYOffset, b.width, b.height);
        }
        b() {
            let a = this.e;
            if (null != a) {
                return a.actualDataSource;
            }
            return null;
        }
        q(a) {
            let b = this.d.ad;
            let c = b.count;
            if (0 == c) {
                a = null;
                return {
                    ret: true,
                    p0: a
                };
            }
            else if (1 == c) {
                a = b._inner[0];
            }
            else {
                a = b._inner[0];
            }
            return {
                ret: null != a,
                p0: a
            };
        }
        a8(a) {
            let b = null != a ? a.b : -1;
            this.ce(b);
        }
        bc() {
            if (this.v) {
                return;
            }
            let a = this.g;
            let b;
            let c = ((() => { let d = this.q(b); b = d.p0; return d.ret; })());
            if (!c) {
                return;
            }
            if (b == null) {
                return;
            }
            a.fr(b);
        }
        bo() {
            this.n.aq();
        }
        bq() {
            let a = this.n;
            if (a.t) {
                this.az();
                let b = this.j;
                b.ck();
                let c = b.cf;
                let d = null != c ? b.cf.length : 0;
                b.dd(d, d);
            }
        }
        bx() {
            this.k.ah = true;
            this.j.db();
            let a = new GotFocusEventArgs();
            this.g.fo(a);
        }
        by() {
            this.az();
            this.k.mj();
            let a = new LostFocusEventArgs();
            this.g.fp(a);
        }
        b3(a) {
            if (a == null) {
                this.ac = null;
                for (let b of fromEnum(this.ab)) {
                    b();
                }
                this.ab.clear();
                return;
            }
            this.ac = a;
            let c = a.rootWrapper;
            this.bf(c);
        }
        b5(a, b) {
            let c = this.b();
            if (null == c) {
                return;
            }
            if (null != this.a) {
                if (a != this.c) {
                }
                this.a.updateNotifier = null;
                this.a = null;
            }
            this.c = a;
            let d = new FilterFactory();
            let e = null;
            let f = null;
            switch (a) {
                case 2:
                    {
                        let g = this.g.ej();
                        if (stringIsNullOrEmpty(g)) {
                            return;
                        }
                        e = b.toString();
                        let h = d.property(g);
                        f = h.isEqualTo(e);
                    }
                    break;
                case 1:
                    {
                        let i = this.g.i();
                        if (i == null || i.length < 1) {
                            return;
                        }
                        let j = typeCast(Array_$type, b) !== null ? b : [b];
                        if (i.length != j.length) {
                            return;
                        }
                        for (let k = 0; k < i.length; k++) {
                            let l = i[k];
                            e = j[k];
                            let m = d.property(l);
                            let n = m.isEqualTo(e);
                            if (null == f) {
                                f = n;
                            }
                            else {
                                f.and(n);
                            }
                        }
                    }
                    break;
                case 0:
                default: return;
            }
            this.a = c.clone();
            this.a.filterExpressions.clear();
            this.a.updateNotifier = new MultiColumnComboBoxDataSourceNotificationHandler(this, true);
            this.a.filterExpressions.add(f);
            if (!this.a.isVirtual) {
                this.a.flushAutoRefresh();
            }
        }
        b6() {
            this.co();
            let a = this.f.e5;
            let b = this.au.length;
            let c = !stringIsNullOrEmpty(a) ? a.length : 0;
            if (this.x && !stringIsNullOrEmpty(this.au) && b > 0) {
                b--;
            }
            this.j.dd(b, c);
        }
        b7() {
            if (this.p) {
                this.p = false;
                this.a3();
            }
        }
        b8(a) {
            this.au = a;
            this.aa = !this.y;
            this.cb();
            this.ch();
        }
        b9() {
            if (stringIsNullOrEmpty(this.au)) {
                this.ay();
            }
            else {
                this.cg(0);
            }
            this.b6();
            this.w = false;
        }
        ch() {
            if (this.ae != null && this.j != null) {
                if (this.g.a9 == false) {
                    this.ae.setStyleProperty("display", "none");
                }
                else if ((this.g.cv != null && this.g.cv != "") || (this.j.cf != null && this.j.cf != "")) {
                    this.ae.show();
                }
                else {
                    this.ae.setStyleProperty("display", "none");
                }
            }
        }
        a5(a) {
            if (this.j != null) {
                this.j.disabled = !a;
            }
        }
        ca() {
            let a = this.d;
            a.selectedItemsChanged = delegateRemove(a.selectedItemsChanged, runOn(this, this.bd));
            this.v = true;
            try {
                this.g.fy(this.au);
            }
            finally {
                this.v = false;
                let b = this.d;
                b.selectedItemsChanged = delegateCombine(b.selectedItemsChanged, runOn(this, this.bd));
            }
            this.w = false;
        }
        cb() {
            let a = this.g.n();
            if (null == a) {
                return;
            }
            this.w = true;
            if (stringIsNullOrEmpty(this.au)) {
                if (null != a.eo) {
                    this.aw(null);
                }
                else {
                    this.ca();
                }
            }
            else {
                let b = new ColumnComparisonFilterCondition();
                b.e = 11;
                b.j = this.au;
                b.g = false;
                this.aw(b);
            }
        }
        cc() {
            this.ap = 0;
            this.x = false;
        }
        ce(a) {
            let b = this.b();
            let c = b.isPlaceholderItem(a);
            if (c) {
            }
            else {
                let d = this.e;
                if (a < 0) {
                    this.s = false;
                    d.ad.clear();
                    if (!this.s) {
                        this.bc();
                    }
                    return;
                }
                d.selectedItemsChanged = delegateRemove(d.selectedItemsChanged, runOn(this, this.bd));
                try {
                    d.ad.clear();
                }
                finally {
                    d.selectedItemsChanged = delegateCombine(d.selectedItemsChanged, runOn(this, this.bd));
                }
                if (a >= 0) {
                    let e = b.getItemAtIndex(a);
                    this.s = false;
                    d.ad.add1(e);
                    if (!this.s) {
                        this.bc();
                    }
                }
            }
        }
        cg(a) {
            let b = this.e;
            if (-1 == a) {
                b.cw = null;
                return;
            }
            let c = b.cw;
            let d = new GridCellPosition();
            let e;
            if (null != c) {
                e = c.d;
            }
            else {
                if (b.actualColumns.count == 0) {
                    this.ao = a;
                    return;
                }
                let f = this.g;
                let g = this.g.n();
                e = g.h0();
            }
            d.d = e;
            d.b = a;
            this.r = false;
            b.cw = d;
            if (!this.r) {
                this.a8(b.cw);
            }
            this.cs();
        }
        cj(a) {
            this.b5(2, a);
        }
        ci(a) {
            this.b5(1, a);
        }
        ck() {
            let a = this.g;
            if (null != this.k) {
                this.k.h = a.density;
                this.k.d = a.z;
                this.k.oy = a.gt;
                this.k.oz = a.gu;
                this.k.cu = a.bu;
                this.k.tj = a.hs;
                this.k.m3 = a.f4;
                this.k.h = a.ae;
                this.k.sq = a.gv;
                this.k.hc = a.bv;
                this.k.sr = a.gw;
                this.k.hd = a.bw;
                this.k.he = a.bx;
                this.k.ss = a.gx;
                this.k.hf = a.by;
                this.k.hg = a.bz;
                this.k.s7 = a.g2;
                this.k.h1 = a.b0;
                this.k.s8 = a.g3;
                this.k.h2 = a.b1;
                this.k.h3 = a.b2;
                this.k.h4 = a.b3;
            }
            if (null != this.j) {
                this.j.dt = a.g1;
                this.j.ac = a.ap;
                this.j.b7 = a.ez;
            }
            if (null != this.l) {
                this.l.text = a.eo;
                this.l.dc = a.gy;
                this.l.y = a.an;
            }
            if (null != this.am) {
                NativeUI.n(this.am, a.g0);
                NativeUI.j(this.am, a.gz);
                if (null != a.ao) {
                    this.am.setStyleProperty("font", a.ao.fontString);
                }
                this.am.setRawText(a.actualNoMatchesFoundLabel);
                this.bo();
            }
            if (null != this.d) {
                this.d.fg = a.density;
                let b = a.columnHeadersVisible;
                this.d.k6 = b ? -1 : 0;
                this.d.lg = a.rowSeparatorsVisible ? 1 : 0;
            }
            if (null != this.af) {
                let c = a.dropDownButtonVisible;
                MultiColumnComboBoxUtilities.c(this.af, c);
            }
        }
        co() {
            if (!this.v) {
                if (null != this.j) {
                    let a = this.f.e5;
                    this.j.cf = a;
                }
            }
        }
        cl() {
            let a = this.n;
            let b = null != a ? a.t : false;
            this.i.svgPath = b ? MultiColumnComboBoxView.as : MultiColumnComboBoxView.at;
        }
        cn() {
            let a = this.d.kk + 3;
            let b = this.d.kl + this.d.lg;
            let c = this.d.actualDataSource;
            let d = null != c ? c.actualCount : 0;
            if (d > 8) {
                d = 8;
            }
            let e = d * b;
            e += a;
            let f = stringFormat("{0}px", e);
            this.ag.setStyleProperty("height", f);
            let g = 0;
            for (let h of fromEnum(this.d.actualColumns)) {
                let i = h.width;
                g += null != i ? i.f : 100;
            }
            g += 2;
            let j = stringFormat("{0}px", g);
            this.ag.setStyleProperty("width", j);
            if (null != this.am) {
                let k = this.g;
                let l = MultiColumnComboBoxUtilities.e(this.ad, k.actualNoMatchesFoundLabel, k.an);
                let m = l.width;
                let n = l.height;
                let o = stringFormat("{0}px", m);
                let p = stringFormat("{0}px", n);
                this.am.setStyleProperty("width", o);
                this.am.setStyleProperty("height", p);
            }
        }
        cp() {
            if (this.w) {
                return;
            }
            this.au = null;
            let a = this.g.n();
            if (null != a) {
                let b = a.eo;
                if (null != b) {
                    a.eo = null;
                }
                else {
                    this.cq();
                }
            }
        }
        cq() {
            let a = this.g;
            if (null != a.cv) {
                let b = this.g.cv;
                let c = typeCast(Array_$type, b) !== null ? b : [b];
                let d = this.b();
                let e = d.indexOfKey(c);
                if (-1 != e) {
                    this.cg(e);
                }
            }
        }
        cr() {
            if (null == this.d) {
                this.ac.getPortal(this.ag, "DataGrid", (a) => {
                    this.aq = a.componentRef;
                    this.aq.height = '100%';
                    this.aq.width = '100%';
                    this.d = (this.aq.i);
                    this.ct();
                    this.d.dt = 1;
                    this.d.dr = 0;
                    this.d.ch = 1;
                    this.cm();
                    this.d.cf = 0;
                    this.d.hn = false;
                    this.d.he = false;
                    this.d.ts = new CornerRadius(0, 0);
                    this.d.g1 = false;
                    let b = this.d;
                    b.activeCellChanged = delegateCombine(b.activeCellChanged, runOn(this, this.a7));
                    let c = this.d;
                    c.selectedItemsChanged = delegateCombine(c.selectedItemsChanged, runOn(this, this.bd));
                    let d = this.d;
                    d.cellClicked = delegateCombine(d.cellClicked, runOn(this, this.ba));
                    let e = this.d;
                    e.sizeChanged = delegateCombine(e.sizeChanged, runOn(this, this.be));
                    let f = this.d;
                    f.actualColumnsChanged = delegateCombine(f.actualColumnsChanged, runOn(this, this.a9));
                    let g = this.d;
                    g.columnWidthChanged = delegateCombine(g.columnWidthChanged, runOn(this, this.bb));
                    this.ck();
                }, false);
            }
        }
        cm() {
            if (this.d != null) {
                let a = 0;
                switch (this.f.v) {
                    case 0:
                        a = 0;
                        break;
                    case 1:
                        a = 1;
                        break;
                    case 2:
                        a = 2;
                        break;
                    case 3:
                        a = 3;
                        break;
                    case 4:
                        a = 4;
                        break;
                }
                this.d.d0 = a;
            }
        }
        cs() {
            if (!this.t) {
                return;
            }
            let a = this.d;
            let b = a.cw;
            if (null != b) {
                let c = this.b();
                if (null != c) {
                    let d = c.getItemAtIndex(b.b);
                    if (null == d) {
                        return;
                    }
                    a.it(d);
                }
            }
            else {
                a.s2(0);
            }
        }
        ct() {
            if (null != this.aq) {
                let a = this.g;
                let b = a.itemsSource;
                this.d.ad.clear();
                if (this.d.actualDataSource != null) {
                    let c = this.d.actualDataSource;
                    c.schemaChanged = delegateRemove(c.schemaChanged, runOn(this, this.av));
                }
                this.aq.dataSource = b;
                this.aq.autoGenerateDesiredProperties = a.g;
                this.d.l = a.i();
                this.ao = -1;
                let d = this.b();
                if (null != d) {
                    let e = d.updateNotifier;
                    let f = new MultiColumnComboBoxDataSourceNotificationHandler(this, false);
                    let g = new MultipleDataSourceNotifier(1, [e, f]);
                    d.updateNotifier = g;
                    d.propertiesRequested = a.f;
                    d.schemaChanged = delegateCombine(d.schemaChanged, runOn(this, this.av));
                    if (this.g.cv != null) {
                        this.b5(1, this.g.cv);
                    }
                }
                this.a = null;
            }
        }
        av(a, b) {
            if (this.ao != -1) {
                this.cg(this.ao);
                this.ao = -1;
            }
        }
        cu() {
            if (null != this.aj) {
                let a = this.f.actualLabelVisible;
                if (a) {
                    this.k.appendContentChild(this.aj);
                    this.k.inputs.add(this.l);
                }
                else {
                    this.k.mi(this.aj);
                    this.k.inputs.remove(this.l);
                }
            }
        }
        cf(a) {
            if (this.j != null) {
                this.j.disabled = !a;
            }
            if (this.k != null) {
                this.k.disabled = !a;
            }
        }
        cv() {
            this.cn();
            if (!this.w) {
                this.z = false;
            }
            else {
                let a = this.b();
                this.z = a.actualCount == 0;
            }
            MultiColumnComboBoxUtilities.c(this.am, this.z);
            MultiColumnComboBoxUtilities.c(this.ag, !this.z);
        }
        a6() {
            if (this.j != null) {
                this.j.ck();
            }
        }
        cd() {
            if (this.j != null) {
                this.j.db();
            }
        }
        get al() {
            return this.ak;
        }
        get g() {
            return this.f;
        }
        get ad() {
            return this.ac;
        }
        cw() {
            if (null != this.al) {
                this.al.setStyleProperty("box-sizing", "border-box");
            }
        }
        a2(a) {
            let b = a.target;
            if (!this.u(b)) {
                this.by();
            }
        }
        ax(a) {
            this.d.ad.clear();
            this.j.cf = "";
            this.g.cv = "";
            this.g.e5 = "";
            this.b8("");
        }
        a4(a) {
            let b = this.n;
            if (b.t) {
                this.az();
            }
            else {
                this.aw(null);
            }
            if (null != this.j) {
                this.j.ck();
                this.j.db();
            }
        }
        a7(a, b) {
            let c = b.newActiveCell;
            this.a8(c);
            this.r = true;
        }
        a9(a, b) {
            for (let c of fromEnum(b.columns)) {
                if (null == c.width || c.width.c) {
                    c.width = ((() => {
                        let $ret = new ColumnWidth();
                        $ret.f = 100;
                        return $ret;
                    })());
                }
            }
            this.cp();
        }
        ba(a, b) {
            if (typeCast(TextHeaderCellModel.$, b.cellInfo) !== null) {
                return;
            }
            this.bq();
        }
        bb(a, b) {
            this.cn();
            this.bo();
        }
        bd(a, b) {
            this.bc();
            this.s = true;
            this.ch();
        }
        be(a, b) {
            this.t = b.b != 0 && b.a != 0;
            this.cs();
        }
        bh(a, b) {
            if (b.isCompositionInProgress) {
                return;
            }
            let c = b.value;
            this.b8(c);
        }
        bi(a, b) {
            let c = this.j.cf;
            this.b8(c);
        }
        bj(a, b) {
            this.cc();
        }
        bk(a, b) {
            let c = b.keyCode;
            this.ap = c;
            this.x = false;
            let d = b.modifiers;
            switch (c) {
                case 8:
                    let e = this.j.selectionStart;
                    if (0 == e) {
                        break;
                    }
                    let f = this.j.cf;
                    if (stringIsNullOrEmpty(f)) {
                        break;
                    }
                    let g = f.length;
                    let h = this.j.selectionEnd;
                    let i = h - e;
                    if (i > 0 && i < g && h == g) {
                        this.x = true;
                    }
                    break;
                case 40:
                    if (d == 1) {
                        this.a3();
                        this.cp();
                        b.preventDefault();
                    }
                    else {
                        let j = this.e;
                        if (null == j) {
                            return;
                        }
                        let k = this.e.cw;
                        if (null != j.cw) {
                            this.d.h8(false, false);
                            b.preventDefault();
                        }
                        else {
                            let l = this.b();
                            if (null != l) {
                                let m = l.actualCount;
                                if (m > 0) {
                                    this.cg(0);
                                    b.preventDefault();
                                }
                            }
                        }
                    }
                    break;
                case 38:
                    if (d == 1) {
                        this.az();
                        b.preventDefault();
                    }
                    else {
                        let n = this.e;
                        if (null == n) {
                            return;
                        }
                        let o = this.e.cw;
                        if (null != n.cw) {
                            this.d.ik(false, false);
                            b.preventDefault();
                        }
                        else {
                            let p = this.b();
                            if (null != p) {
                                let q = p.actualCount;
                                if (q > 0) {
                                    this.cg(q - 1);
                                    b.preventDefault();
                                }
                            }
                        }
                    }
                    break;
                case 13:
                    if (this.n.t) {
                        b.stopPropagation();
                    }
                    this.bq();
                    break;
                case 27:
                    this.az();
                    break;
            }
        }
        bl(a, b) {
            if (false == this.o()) {
                this.j.db();
                b.handled = true;
            }
        }
        bm(a) {
            this.j.ck();
            let b = (a.originalEvent.relatedTarget);
            if (!this.u(b)) {
                this.bx();
            }
        }
        bn(a) {
            let b = (a.originalEvent.relatedTarget);
            if (!this.u(b)) {
                this.by();
            }
        }
        cx(a) {
            let b = this.n;
            if (null == b || false == b.t) {
                return;
            }
            let c = this.cy();
            this.m.ar(c);
        }
    }
    MultiColumnComboBoxView.$t = /*@__PURE__*/ markType(MultiColumnComboBoxView, 'MultiColumnComboBoxView');
    MultiColumnComboBoxView.ar = "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z";
    MultiColumnComboBoxView.at = "M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z";
    MultiColumnComboBoxView.as = "M12 8l-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z";
    return MultiColumnComboBoxView;
})();
/**
 * @hidden
 */
let MultiColumnComboBoxDataSourceNotificationHandler = /*@__PURE__*/ (() => {
    class MultiColumnComboBoxDataSourceNotificationHandler extends Base {
        constructor(a, b) {
            super();
            this.a = null;
            this.b = false;
            this.a = a;
            this.b = b;
        }
        rangeActualized(a, b) {
            if (!this.b) {
                this.a.bz(a, b);
            }
            else {
                this.a.bt(a, b);
            }
        }
        notifySetItem(a, b, c) {
            if (!this.b) {
                this.a.b4(a, b, c);
            }
            else {
                this.a.bw(a, b, c);
            }
        }
        notifyClearItems() {
            if (!this.b) {
                this.a.br();
            }
            else {
                this.a.bs();
            }
        }
        notifyInsertItem(a, b) {
            if (!this.b) {
                this.a.b0(a, b);
            }
            else {
                this.a.bu(a, b);
            }
        }
        notifyRemoveItem(a, b) {
            if (!this.b) {
                this.a.b2(a, b);
            }
            else {
                this.a.bv(a, b);
            }
        }
    }
    MultiColumnComboBoxDataSourceNotificationHandler.$t = /*@__PURE__*/ markType(MultiColumnComboBoxDataSourceNotificationHandler, 'MultiColumnComboBoxDataSourceNotificationHandler', Base.$, [IDataSourceUpdateNotifier_$type]);
    return MultiColumnComboBoxDataSourceNotificationHandler;
})();
/**
 * @hidden
 */
let MultiColumnComboBox = /*@__PURE__*/ (() => {
    class MultiColumnComboBox extends Base {
        constructor() {
            super();
            this.g9 = ThemeResolver.e(MultiColumnComboBox.y, InputGroup.r6, InputGroup.qq);
            this.ha = ThemeResolver.e(MultiColumnComboBox.y, InputGroup.r7, InputGroup.qr);
            this.b6 = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.gk, InputGroup.er);
            this.hu = ThemeResolver.f(MultiColumnComboBox.y, InputGroup.tx, InputGroup.tr);
            this.f6 = ThemeResolver.d(MultiColumnComboBox.y, InputGroup.nh, InputGroup.nb);
            this.hb = ThemeResolver.e(MultiColumnComboBox.y, InputGroup.r8, InputGroup.qs);
            this.b7 = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.gl, InputGroup.es);
            this.hc = ThemeResolver.e(MultiColumnComboBox.y, InputGroup.sa, InputGroup.qu);
            this.b8 = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.gm, InputGroup.et);
            this.b9 = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.gn, InputGroup.eu);
            this.hd = ThemeResolver.e(MultiColumnComboBox.y, InputGroup.sb, InputGroup.qv);
            this.ca = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.go, InputGroup.ev);
            this.cb = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.gp, InputGroup.ew);
            this.he = ThemeResolver.e(MultiColumnComboBox.y, InputGroup.sc, InputGroup.qw);
            this.cc = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.gq, InputGroup.ex);
            this.hf = ThemeResolver.e(MultiColumnComboBox.y, InputGroup.sd, InputGroup.qx);
            this.cd = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.gr, InputGroup.ey);
            this.ce = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.gs, InputGroup.ez);
            this.cf = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.gt, InputGroup.e0);
            this.as = null;
            this.t = null;
            this.az = true;
            this.c = null;
            this.gi = null;
            this.f7 = ThemeResolver.e(MultiColumnComboBox.y, InputGroup.rc, InputGroup.pw);
            this.x = 0;
            this.w = 1;
            this.gj = null;
            this.f8 = ThemeResolver.e(MultiColumnComboBox.y, InputGroup.rd, InputGroup.px);
            this.bk = NaN;
            this.ba = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.fu, InputGroup.d1);
            this.a3 = true;
            this.hr = new Thickness(1, NaN, NaN, NaN, NaN);
            this.hq = ThemeResolver.f(MultiColumnComboBox.y, InputGroup.tv, InputGroup.tp);
            this.f3 = new CornerRadius(1, NaN, NaN, NaN, NaN);
            this.f2 = ThemeResolver.d(MultiColumnComboBox.y, InputGroup.nf, InputGroup.m9);
            this.b = null;
            this.ad = 0;
            this.ac = 0;
            this.a5 = true;
            this.gk = null;
            this.f9 = ThemeResolver.e(MultiColumnComboBox.y, InputGroup.ru, InputGroup.qe);
            this.bl = NaN;
            this.bb = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.f5, InputGroup.ec);
            this.gl = null;
            this.ga = ThemeResolver.e(MultiColumnComboBox.y, InputGroup.rw, InputGroup.qg);
            this.bm = NaN;
            this.bc = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.f6, InputGroup.ed);
            this.bn = NaN;
            this.bd = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.f7, InputGroup.ee);
            this.gm = null;
            this.gb = ThemeResolver.e(MultiColumnComboBox.y, InputGroup.rx, InputGroup.qh);
            this.bo = NaN;
            this.be = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.f8, InputGroup.ef);
            this.bp = NaN;
            this.bf = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.f9, InputGroup.eg);
            this.cp = null;
            this.eq = null;
            this.gn = null;
            this.gc = MultiColumnComboBox.g6;
            this.ak = null;
            this.ah = null;
            this.a0 = false;
            this.et = null;
            this.dh = "No Matches Found";
            this.go = null;
            this.gd = MultiColumnComboBox.g7;
            this.gp = null;
            this.ge = MultiColumnComboBox.g8;
            this.al = null;
            this.ai = null;
            this.e0 = "";
            this.ay = true;
            this.gq = MultiColumnComboBox.hg;
            this.gf = MultiColumnComboBox.hg;
            this.am = null;
            this.aj = null;
            this.gr = null;
            this.gg = ThemeResolver.e(MultiColumnComboBox.y, InputGroup.se, InputGroup.qy);
            this.bq = NaN;
            this.bg = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.gu, InputGroup.e1);
            this.gs = null;
            this.gh = ThemeResolver.e(MultiColumnComboBox.y, InputGroup.sf, InputGroup.qz);
            this.br = NaN;
            this.bh = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.gv, InputGroup.e2);
            this.bs = NaN;
            this.bi = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.gw, InputGroup.e3);
            this.bt = NaN;
            this.bj = ThemeResolver.b(MultiColumnComboBox.y, InputGroup.gx, InputGroup.e4);
            this.ax = true;
            this.u = 0;
            this.cx = null;
            this.cw = null;
            this.d = null;
            this.a = null;
            this.cq = null;
            this.a7 = false;
            this.gotFocus = null;
            this.lostFocus = null;
            this.textChanged = null;
            this.valueChanged = null;
            this.propertyChanged = null;
            let a = this.s();
            this.t = a;
            a.bg(this);
        }
        s() {
            return new MultiColumnComboBoxView();
        }
        fv(a, b, c) {
            switch (a) {
                case "BackgroundColor":
                    this.gt = this.g4 != null ? this.g4 : this.g9;
                    break;
                case "BorderColor":
                    this.gu = this.g5 != null ? this.g5 : this.ha;
                    break;
                case "BorderWidth":
                    this.bu = !isNaN_(this.b4) ? this.b4 : this.b6;
                    break;
                case "ContentPadding":
                    this.hs = InputGroup.ti(this.ht, this.hu);
                    break;
                case "CornerRadius":
                    this.f4 = InputGroup.m2(this.f5, this.f6);
                    break;
                case "FocusBorderColor":
                    this.gv = this.hh != null ? this.hh : this.hb;
                    break;
                case "FocusBorderWidth":
                    this.bv = !isNaN_(this.cg) ? this.cg : this.b7;
                    break;
                case "FocusUnderlineColor":
                    this.gw = this.hi != null ? this.hi : this.hc;
                    break;
                case "FocusUnderlineOpacity":
                    this.bw = !isNaN_(this.ch) ? this.ch : this.b8;
                    break;
                case "FocusUnderlineRippleOpacity":
                    this.bx = !isNaN_(this.ci) ? this.ci : this.b9;
                    break;
                case "HoverUnderlineColor":
                    this.gx = this.hj != null ? this.hj : this.hd;
                    break;
                case "HoverUnderlineOpacity":
                    this.by = !isNaN_(this.cj) ? this.cj : this.ca;
                    break;
                case "HoverUnderlineWidth":
                    this.bz = !isNaN_(this.ck) ? this.ck : this.cb;
                    break;
                case "ItemsSource":
                case "ValueField":
                case "DataSourceDesiredProperties":
                case "Fields":
                    this.t.ct();
                    break;
                case "LabelTextColor":
                    this.gy = this.hk != null ? this.hk : MultiColumnComboBox.g6;
                    break;
                case "LabelTextStyle":
                    this.an = this.au != null ? this.au : MultiColumnComboBox.aq;
                    break;
                case "NoMatchesFoundLabelTextColor":
                    this.g0 = this.hm != null ? this.hm : MultiColumnComboBox.g8;
                    break;
                case "NoMatchesFoundLabelBackgroundColor":
                    this.gz = this.hl != null ? this.hl : MultiColumnComboBox.g7;
                    break;
                case "NoMatchesFoundLabelTextStyle":
                    this.ao = this.av != null ? this.av : MultiColumnComboBox.ar;
                    break;
                case "UnderlineColor":
                    this.g2 = this.ho != null ? this.ho : this.he;
                    break;
                case "UnderlineOpacity":
                    this.b0 = !isNaN_(this.cl) ? this.cl : this.cc;
                    break;
                case "UnderlineRippleColor":
                    this.g3 = this.hp != null ? this.hp : this.hf;
                    break;
                case "UnderlineRippleOpacity":
                    this.b1 = !isNaN_(this.cm) ? this.cm : this.cd;
                    break;
                case "UnderlineRippleWidth":
                    this.b2 = !isNaN_(this.cn) ? this.cn : this.ce;
                    break;
                case "UnderlineWidth":
                    this.b3 = !isNaN_(this.co) ? this.co : this.cf;
                    break;
                case "BaseTheme":
                    this.z = this.aa == 0 ? 1 : this.aa;
                    break;
                case "Density":
                    this.ae = this.density == 0 ? 0 : this.density;
                    break;
                case "TextColor":
                    this.g1 = this.hn != null ? this.hn : MultiColumnComboBox.hg;
                    break;
                case "TextStyle":
                    this.ap = this.aw != null ? this.aw : null;
                    break;
                case "ActualDensity":
                case "ActualBaseTheme":
                case "ActualTextColor":
                case "ActualTextStyle":
                case "ActualBackgroundColor":
                case "ActualBorderColor":
                case "ActualBorderWidth":
                case "ActualContentPadding":
                case "ActualCornerRadius":
                case "ActualFocusBorderColor":
                case "ActualFocusBorderWidth":
                case "ActualFocusUnderlineColor":
                case "ActualFocusUnderlineOpacity":
                case "ActualFocusUnderlineRippleOpacity":
                case "ActualHoverUnderlineColor":
                case "ActualHoverUnderlineOpacity":
                case "ActualHoverUnderlineWidth":
                case "ActualLabelTextColor":
                case "ActualLabelTextStyle":
                case "ActualUnderlineColor":
                case "ActualUnderlineOpacity":
                case "ActualUnderlineRippleColor":
                case "ActualUnderlineRippleOpacity":
                case "ActualUnderlineRippleWidth":
                case "ActualUnderlineWidth":
                case "DropDownButtonVisible":
                case "ColumnHeadersVisible":
                case "RowSeparatorsVisible":
                case "ActualNoMatchesFoundLabel":
                case "ActualNoMatchesFoundLabelTextColor":
                case "ActualNoMatchesFoundLabelTextStyle":
                case MultiColumnComboBox.dj:
                    this.t.ck();
                    break;
                case "NoMatchesFoundLabel":
                    this.actualNoMatchesFoundLabel = stringIsNullOrEmpty(this.eu) ? "No Matches Found" : this.eu;
                    break;
                case "ActualLabelVisible":
                    this.t.cu();
                    break;
                case "Label":
                case "PlaceholderText":
                    this.t.ck();
                    this.actualLabelVisible = !stringIsNullOrEmpty(this.eq);
                    break;
                case "Text":
                    this.t.co();
                    let d = b != null ? b.toString() : null;
                    let e = c != null ? c.toString() : null;
                    this.fs(new MultiColumnComboBoxTextChangedEventArgs(d, e));
                    this.fu(1, e);
                    break;
                case "Value":
                    this.ft(new MultiColumnComboBoxValueChangedEventArgs(b, c));
                    this.fu(0, c);
                    break;
                case "ShowClearButton":
                    this.t.ch();
                    break;
                case "AllowFilter":
                    this.t.a5(this.a2);
                    break;
                case "SortMode":
                    this.t.cm();
                    break;
            }
        }
        f1() {
            this.t.cw();
        }
        get at() {
            if (null == this.as) {
                this.as = new FontInfo();
                this.as.n = "'Segoe UI', Verdana";
                this.as.d = 16;
            }
            return this.as;
        }
        get a9() {
            return this.az;
        }
        set a9(a) {
            let b = this.az;
            this.az = a;
            if (b != this.az) {
                this.fq("ShowClearButton", b, this.az);
            }
        }
        get g() {
            return this.c;
        }
        set g(a) {
            let b = this.c;
            this.c = a;
            if (b != this.c) {
                this.fq("Fields", b, this.c);
            }
        }
        get g4() {
            return this.gi;
        }
        set g4(a) {
            let b = this.gi;
            this.gi = a;
            if (b != this.gi) {
                this.fq("BackgroundColor", b, a);
            }
        }
        get gt() {
            return this.f7;
        }
        set gt(a) {
            let b = this.f7;
            this.f7 = a;
            if (b != this.f7) {
                this.fq("ActualBackgroundColor", b, a);
            }
        }
        get aa() {
            return this.x;
        }
        set aa(a) {
            let b = this.x;
            this.x = a;
            if (b != this.x) {
                this.fq("BaseTheme", enumGetBox(BaseControlTheme_$type, b), enumGetBox(BaseControlTheme_$type, a));
            }
        }
        get z() {
            return this.w;
        }
        set z(a) {
            let b = this.w;
            this.w = a;
            if (b != this.w) {
                this.fq("ActualBaseTheme", enumGetBox(BaseControlTheme_$type, b), enumGetBox(BaseControlTheme_$type, a));
            }
        }
        get g5() {
            return this.gj;
        }
        set g5(a) {
            let b = this.gj;
            this.gj = a;
            if (b != this.gj) {
                this.fq("BorderColor", b, a);
            }
        }
        get gu() {
            return this.f8;
        }
        set gu(a) {
            let b = this.f8;
            this.f8 = a;
            if (b != this.f8) {
                this.fq("ActualBorderColor", b, a);
            }
        }
        get b4() {
            return this.bk;
        }
        set b4(a) {
            let b = this.bk;
            this.bk = a;
            if (b != this.bk) {
                this.fq("BorderWidth", b, a);
            }
        }
        get bu() {
            return this.ba;
        }
        set bu(a) {
            let b = this.ba;
            this.ba = a;
            if (b != this.ba) {
                this.fq("ActualBorderWidth", b, a);
            }
        }
        get columnHeadersVisible() {
            return this.a3;
        }
        set columnHeadersVisible(a) {
            let b = this.a3;
            this.a3 = a;
            if (b != this.a3) {
                this.fq("ColumnHeadersVisible", b, a);
            }
        }
        get ht() {
            return this.hr;
        }
        set ht(a) {
            let b = this.hr;
            this.hr = a;
            if (b != this.hr) {
                this.fq("ContentPadding", b, a);
            }
        }
        get hs() {
            return this.hq;
        }
        set hs(a) {
            let b = this.hq;
            this.hq = a;
            if (b != this.hq) {
                this.fq("ActualContentPadding", b, a);
            }
        }
        get f5() {
            return this.f3;
        }
        set f5(a) {
            let b = this.f3;
            this.f3 = a;
            if (b != this.f3) {
                this.fq("CornerRadius", b, a);
            }
        }
        get f4() {
            return this.f2;
        }
        set f4(a) {
            let b = this.f2;
            this.f2 = a;
            if (b != this.f2) {
                this.fq("ActualCornerRadius", b, a);
            }
        }
        get f() {
            return this.b;
        }
        set f(a) {
            let b = this.b;
            this.b = a;
            if (b != this.b) {
                this.fq("DataSourceDesiredProperties", b, this.b);
            }
        }
        get density() {
            return this.ad;
        }
        set density(a) {
            let b = this.ad;
            this.ad = a;
            if (b != this.ad) {
                this.fq("Density", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, a));
            }
        }
        get ae() {
            return this.ac;
        }
        set ae(a) {
            let b = this.ac;
            this.ac = a;
            if (b != this.ac) {
                this.fq("ActualDensity", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, a));
            }
        }
        get dropDownButtonVisible() {
            return this.a5;
        }
        set dropDownButtonVisible(a) {
            let b = this.a5;
            this.a5 = a;
            if (b != this.a5) {
                this.fq("DropDownButtonVisible", b, a);
            }
        }
        get hh() {
            return this.gk;
        }
        set hh(a) {
            let b = this.gk;
            this.gk = a;
            if (b != this.gk) {
                this.fq("FocusBorderColor", b, a);
            }
        }
        get gv() {
            return this.f9;
        }
        set gv(a) {
            let b = this.f9;
            this.f9 = a;
            if (b != this.f9) {
                this.fq("ActualFocusBorderColor", b, a);
            }
        }
        get cg() {
            return this.bl;
        }
        set cg(a) {
            let b = this.bl;
            this.bl = a;
            if (b != this.bl) {
                this.fq("FocusBorderWidth", b, a);
            }
        }
        get bv() {
            return this.bb;
        }
        set bv(a) {
            let b = this.bb;
            this.bb = a;
            if (b != this.bb) {
                this.fq("ActualFocusBorderWidth", b, a);
            }
        }
        get hi() {
            return this.gl;
        }
        set hi(a) {
            let b = this.gl;
            this.gl = a;
            if (b != this.gl) {
                this.fq("FocusUnderlineColor", b, a);
            }
        }
        get gw() {
            return this.ga;
        }
        set gw(a) {
            let b = this.ga;
            this.gl = a;
            if (b != this.ga) {
                this.fq("ActualFocusUnderlineColor", b, a);
            }
        }
        get ch() {
            return this.bm;
        }
        set ch(a) {
            let b = this.bm;
            this.bm = a;
            if (b != this.bm) {
                this.fq("FocusUnderlineOpacity", b, a);
            }
        }
        get bw() {
            return this.bc;
        }
        set bw(a) {
            let b = this.bc;
            this.bc = a;
            if (b != this.bc) {
                this.fq("ActualFocusUnderlineOpacity", b, a);
            }
        }
        get ci() {
            return this.bn;
        }
        set ci(a) {
            let b = this.bn;
            this.bn = a;
            if (b != this.bn) {
                this.fq("FocusUnderlineRippleOpacity", b, a);
            }
        }
        get bx() {
            return this.bd;
        }
        set bx(a) {
            let b = this.bd;
            this.bd = a;
            if (b != this.bd) {
                this.fq("ActualFocusUnderlineRippleOpacity", b, a);
            }
        }
        get hj() {
            return this.gm;
        }
        set hj(a) {
            let b = this.gm;
            this.gm = a;
            if (b != this.gm) {
                this.fq("HoverUnderlineColor", b, a);
            }
        }
        get gx() {
            return this.gb;
        }
        set gx(a) {
            let b = this.gb;
            this.gb = a;
            if (b != this.gb) {
                this.fq("ActualHoverUnderlineColor", b, a);
            }
        }
        get cj() {
            return this.bo;
        }
        set cj(a) {
            let b = this.bo;
            this.bo = a;
            if (b != this.bo) {
                this.fq("HoverUnderlineOpacity", b, a);
            }
        }
        get by() {
            return this.be;
        }
        set by(a) {
            let b = this.be;
            this.be = a;
            if (b != this.be) {
                this.fq("ActualHoverUnderlineOpacity", b, a);
            }
        }
        get ck() {
            return this.bp;
        }
        set ck(a) {
            let b = this.bp;
            this.bp = a;
            if (b != this.bp) {
                this.fq("HoverUnderlineWidth", b, a);
            }
        }
        get bz() {
            return this.bf;
        }
        set bz(a) {
            let b = this.bf;
            this.bf = a;
            if (b != this.bf) {
                this.fq("ActualHoverUnderlineWidth", b, a);
            }
        }
        get itemsSource() {
            return this.cp;
        }
        set itemsSource(a) {
            let b = this.cp;
            this.cp = a;
            if (b != this.cp) {
                this.fq("ItemsSource", b, this.cp);
            }
        }
        get actualDataSource() {
            return this.t.b();
        }
        get eo() {
            return this.eq;
        }
        set eo(a) {
            let b = this.eo;
            if (0 == StringComparer.b.compare(a, b)) {
                return;
            }
            this.eq = a;
            this.fq("Label", b, this.eq);
        }
        get hk() {
            return this.gn;
        }
        set hk(a) {
            let b = this.gn;
            this.gn = a;
            if (b != this.gn) {
                this.fq("LabelTextColor", b, a);
            }
        }
        get gy() {
            return this.gc;
        }
        set gy(a) {
            let b = this.gc;
            this.gc = a;
            if (b != this.gc) {
                this.fq("ActualLabelTextColor", b, a);
            }
        }
        get au() {
            return this.ak;
        }
        set au(a) {
            let b = this.ak;
            this.ak = a;
            if (b != this.ak) {
                this.fq("LabelTextStyle", b, this.ak);
            }
        }
        get an() {
            return this.ah;
        }
        set an(a) {
            let b = this.ah;
            this.ah = a;
            if (this.ah != b) {
                this.fq("ActualLabelTextStyle", b, this.ah);
            }
        }
        get actualLabelVisible() {
            return this.a0;
        }
        set actualLabelVisible(a) {
            let b = this.a0;
            this.a0 = a;
            if (b != this.a0) {
                this.fq("ActualLabelVisible", b, a);
            }
        }
        get eu() {
            return this.et;
        }
        set eu(a) {
            let b = this.et;
            if (0 == StringComparer.b.compare(a, b)) {
                return;
            }
            this.et = a;
            this.fq("NoMatchesFoundLabel", b, this.et);
        }
        get actualNoMatchesFoundLabel() {
            return this.dh;
        }
        set actualNoMatchesFoundLabel(a) {
            let b = this.dh;
            this.dh = a;
            if (b != this.dh) {
                this.fq("ActualNoMatchesFoundLabel", b, a);
            }
        }
        get hl() {
            return this.go;
        }
        set hl(a) {
            let b = this.go;
            this.go = a;
            if (b != this.go) {
                this.fq("NoMatchesFoundLabelBackgroundColor", b, a);
            }
        }
        get gz() {
            return this.gd;
        }
        set gz(a) {
            let b = this.gd;
            this.gd = a;
            if (b != this.gd) {
                this.fq(MultiColumnComboBox.dj, b, a);
            }
        }
        get hm() {
            return this.gp;
        }
        set hm(a) {
            let b = this.gp;
            this.gp = a;
            if (b != this.gp) {
                this.fq("NoMatchesFoundLabelTextColor", b, a);
            }
        }
        get g0() {
            return this.ge;
        }
        set g0(a) {
            let b = this.ge;
            this.ge = a;
            if (b != this.ge) {
                this.fq("ActualNoMatchesFoundLabelTextColor", b, a);
            }
        }
        get av() {
            return this.al;
        }
        set av(a) {
            let b = this.al;
            this.al = a;
            if (b != this.al) {
                this.fq("NoMatchesFoundLabelTextStyle", b, this.al);
            }
        }
        get ao() {
            return this.ai;
        }
        set ao(a) {
            let b = this.ai;
            this.ai = a;
            if (this.ai != b) {
                this.fq("ActualNoMatchesFoundLabelTextStyle", b, this.ai);
            }
        }
        get ez() {
            return this.e0;
        }
        set ez(a) {
            let b = this.ez;
            if (0 == StringComparer.b.compare(a, b)) {
                return;
            }
            this.e0 = a;
            this.fq("PlaceholderText", b, this.e0);
        }
        get rowSeparatorsVisible() {
            return this.ay;
        }
        set rowSeparatorsVisible(a) {
            let b = this.ay;
            this.ay = a;
            if (b != this.ay) {
                this.fq("RowSeparatorsVisible", b, a);
            }
        }
        get hn() {
            return this.gq;
        }
        set hn(a) {
            let b = this.gq;
            this.gq = a;
            if (b != this.gq) {
                this.fq("TextColor", b, a);
            }
        }
        get g1() {
            return this.gf;
        }
        set g1(a) {
            let b = this.gf;
            this.gf = a;
            if (b != this.gf) {
                this.fq("ActualTextColor", b, a);
            }
        }
        get aw() {
            return this.am;
        }
        set aw(a) {
            let b = this.am;
            this.am = a;
            if (b != this.am) {
                this.fq("TextStyle", b, this.am);
            }
        }
        get ap() {
            return this.aj;
        }
        set ap(a) {
            let b = this.aj;
            this.aj = a;
            if (this.aj != b) {
                this.fq("ActualTextStyle", b, this.aj);
            }
        }
        get ho() {
            return this.gr;
        }
        set ho(a) {
            let b = this.gr;
            this.gr = a;
            if (b != this.gr) {
                this.fq("UnderlineColor", b, a);
            }
        }
        get g2() {
            return this.gg;
        }
        set g2(a) {
            let b = this.gg;
            this.gg = a;
            if (b != this.gg) {
                this.fq("ActualUnderlineColor", b, a);
            }
        }
        get cl() {
            return this.bq;
        }
        set cl(a) {
            let b = this.bq;
            this.bq = a;
            if (b != this.bq) {
                this.fq("UnderlineOpacity", b, a);
            }
        }
        get b0() {
            return this.bg;
        }
        set b0(a) {
            let b = this.bg;
            this.bg = a;
            if (b != this.bg) {
                this.fq("ActualUnderlineOpacity", b, a);
            }
        }
        get hp() {
            return this.gs;
        }
        set hp(a) {
            let b = this.gs;
            this.gs = a;
            if (b != this.gs) {
                this.fq("UnderlineRippleColor", b, a);
            }
        }
        get g3() {
            return this.gh;
        }
        set g3(a) {
            let b = this.gh;
            this.gh = a;
            if (b != this.gh) {
                this.fq("ActualUnderlineRippleColor", b, a);
            }
        }
        get cm() {
            return this.br;
        }
        set cm(a) {
            let b = this.br;
            this.br = a;
            if (b != this.br) {
                this.fq("UnderlineRippleOpacity", b, a);
            }
        }
        get b1() {
            return this.bh;
        }
        set b1(a) {
            let b = this.bh;
            this.bh = a;
            if (b != this.bh) {
                this.fq("ActualUnderlineRippleOpacity", b, a);
            }
        }
        get cn() {
            return this.bs;
        }
        set cn(a) {
            let b = this.bs;
            this.bs = a;
            if (b != this.bs) {
                this.fq("UnderlineRippleWidth", b, a);
            }
        }
        get b2() {
            return this.bi;
        }
        set b2(a) {
            let b = this.bi;
            this.bi = a;
            if (b != this.bi) {
                this.fq("ActualUnderlineRippleWidth", b, a);
            }
        }
        get co() {
            return this.bt;
        }
        set co(a) {
            let b = this.bt;
            this.bt = a;
            if (b != this.bt) {
                this.fq("UnderlineWidth", b, a);
            }
        }
        get b3() {
            return this.bj;
        }
        set b3(a) {
            let b = this.bj;
            this.bj = a;
            if (b != this.bj) {
                this.fq("ActualUnderlineWidth", b, a);
            }
        }
        get a2() {
            return this.ax;
        }
        set a2(a) {
            let b = this.ax;
            this.ax = a;
            if (b != this.ax) {
                this.fq("AllowFilter", b, a);
            }
        }
        get v() {
            return this.u;
        }
        set v(a) {
            let b = this.u;
            this.u = a;
            if (b != this.u) {
                this.fq("SortMode", enumGetBox(SortMode_$type, b), enumGetBox(SortMode_$type, this.u));
            }
        }
        get e7() {
            return this.cx;
        }
        set e7(a) {
            let b = this.cx;
            this.cx = a;
            if (b != this.cx) {
                this.fq("TextField", b, a);
            }
        }
        get e5() {
            return this.cw;
        }
        set e5(a) {
            let b = this.cw;
            this.cw = a;
            if (b != this.cw) {
                this.fq("Text", b, a);
            }
        }
        get j() {
            return this.d;
        }
        set j(a) {
            let b = this.d;
            this.d = a;
            if (b != this.d) {
                this.fq("ValueField", b, a);
            }
        }
        get e() {
            return this.a;
        }
        set e(a) {
            let b = this.a;
            this.a = a;
            if (b != this.a) {
                this.fq("ActualValueField", b, a);
            }
        }
        get cv() {
            return this.cq;
        }
        set cv(a) {
            let b = this.cq;
            this.cq = a;
            if (b != this.cq) {
                this.fq("Value", b, a);
            }
        }
        cs(a, b) {
            let c = new FastReflectionHelper(false, b);
            return c.getPropertyValue(a);
        }
        n() {
            let a = this.ej();
            return this.m(a);
        }
        ej() {
            return this.ei(this.e7);
        }
        ct(a) {
            let b = this.i();
            if (null == b || b.length == 0) {
                return null;
            }
            let c = new List$1(Base.$, 0);
            for (let e = 0; e < b.length; e++) {
                let d = b[e];
                let f = this.cs(a, d);
                c.add1(f);
            }
            if (c.count == 1) {
                return c._inner[0];
            }
            return c.toArray();
        }
        eh(a) {
            let b = this.ej();
            let c;
            if (null != b) {
                let d = this.cs(a, b);
                c = null != d ? d.toString() : null;
            }
            else {
                c = null;
            }
            return c;
        }
        m(a) {
            let b = this.t.e;
            if (null == b) {
                return null;
            }
            let c = b.actualColumns;
            if (null == c || 0 == c.count) {
                return null;
            }
            if (stringIsNullOrEmpty(a)) {
                return c._inner[0];
            }
            for (let d of fromEnum(c)) {
                if (0 == StringComparer.b.compare(d.hy, a)) {
                    return d;
                }
            }
            return null;
        }
        ei(a) {
            if (stringIsNullOrEmpty(a)) {
                let b = this.actualDataSource;
                if (null == b) {
                    return null;
                }
                let c = b.actualSchema;
                if (null == c) {
                    return null;
                }
                let d = c.propertyNames;
                if (0 == d.length) {
                    return null;
                }
                return d[0];
            }
            return a;
        }
        h(a) {
            let b = new List$1(String_$type, 0);
            if (null == a || a.length == 0) {
                let c = this.ei(null);
                if (stringIsNullOrEmpty(c)) {
                    return null;
                }
                b.add(c);
                return b.toArray();
            }
            for (let e = 0; e < a.length; e++) {
                let d = a[e];
                let f = this.ei(d);
                if (null != f) {
                    b.add(f);
                }
            }
            if (b.count > 0) {
                return b.toArray();
            }
            return null;
        }
        i() {
            let a = this.j;
            return this.h(a);
        }
        fr(a) {
            this.fu(2, a);
        }
        fu(a, b) {
            if (this.a7) {
                return;
            }
            this.a7 = true;
            try {
                switch (a) {
                    case 2:
                        {
                            let c = b;
                            let d;
                            let e;
                            if (null != c) {
                                d = this.eh(c);
                                e = this.ct(c);
                            }
                            else {
                                d = stringEmpty();
                                e = null;
                            }
                            if (this.e5 != d) {
                                this.e5 = d;
                            }
                            if (this.cv != e) {
                                this.cv = e;
                            }
                        }
                        break;
                    case 1:
                        this.t.cj(b.toString());
                        break;
                    case 0:
                        this.t.ci(b);
                        break;
                }
            }
            finally {
                this.a7 = false;
            }
            this.t.ch();
        }
        fy(a) {
            this.e5 = a;
        }
        f0() {
            this.ap = (null == this.aw) ? this.at : this.aw;
        }
        fz() {
        }
        closeUp() {
            this.t.az();
        }
        destroy() {
            this.provideRenderer(null);
        }
        dropDown() {
            this.t.a3();
        }
        focus() {
            this.t.a6();
        }
        select() {
            this.t.cd();
        }
        notifySizeChanged() {
            this.t.bp();
        }
        provideRenderer(a) {
            this.t.b3(a);
        }
        cr() {
            return this.l();
        }
        ea() {
            let a = this.l();
            return a.am();
        }
        l() {
            let a = new MultiColumnComboVisualModelExport();
            a.a = AppearanceHelper.a(this.gt);
            a.j = this.z;
            a.b = AppearanceHelper.a(this.gu);
            a.p = this.bu;
            a.columnHeadersVisible = this.columnHeadersVisible;
            a.au = this.hs;
            a.at = this.f4;
            a.k = this.ae;
            a.dropDownButtonVisible = this.dropDownButtonVisible;
            a.q = this.bw;
            a.aa = this.eo;
            a.c = AppearanceHelper.a(this.gy);
            a.actualLabelVisible = this.actualLabelVisible;
            a.actualNoMatchesFoundLabel = this.actualNoMatchesFoundLabel;
            a.d = AppearanceHelper.a(this.gz);
            a.e = AppearanceHelper.a(this.g0);
            a.al = this.ez;
            a.rowSeparatorsVisible = this.rowSeparatorsVisible;
            a.f = AppearanceHelper.a(this.g1);
            a.g = AppearanceHelper.a(this.g2);
            a.r = this.b0;
            a.h = AppearanceHelper.a(this.g3);
            a.s = this.b1;
            a.t = this.b2;
            a.u = this.b3;
            a.an = this.e5;
            a.y = this.cv;
            a.i = this.t.e.lp();
            if (this.an != null) {
                let b = this.an;
                if (this.t != null && b.n == null) {
                    let c = this.t.ad;
                    let d = FontUtil.getFontInfoFromString(c, b.fontString);
                    b.n = d.n;
                    b.d = d.d;
                    b.o = d.o;
                    b.q = d.q;
                    b.r = d.r;
                    b.s = d.s;
                }
                if (b.n != null) {
                    a.ab = b.n;
                }
                if (!isNaN_(b.d)) {
                    a.v = b.d;
                }
                if (b.s != null) {
                    a.af = b.s;
                }
                if (b.q != null) {
                    a.ad = b.q;
                }
                if (b.o != null) {
                    a.ac = b.q;
                }
            }
            if (this.ao != null) {
                let e = this.ao;
                if (this.t != null && e.n == null) {
                    let f = this.t.ad;
                    let g = FontUtil.getFontInfoFromString(f, e.fontString);
                    e.n = g.n;
                    e.d = g.d;
                    e.o = g.o;
                    e.q = g.q;
                    e.r = g.r;
                    e.s = g.s;
                }
                if (e.n != null) {
                    a.ag = e.n;
                }
                if (!isNaN_(e.d)) {
                    a.w = e.d;
                }
                if (e.s != null) {
                    a.ak = e.s;
                }
                if (e.q != null) {
                    a.ai = e.q;
                }
                if (e.o != null) {
                    a.ah = e.q;
                }
            }
            if (this.ap != null) {
                let h = this.ap;
                if (this.t != null && h.n == null) {
                    let i = this.t.ad;
                    let j = FontUtil.getFontInfoFromString(i, h.fontString);
                    h.n = j.n;
                    h.d = j.d;
                    h.o = j.o;
                    h.q = j.q;
                    h.r = j.r;
                    h.s = j.s;
                }
                if (h.n != null) {
                    a.ao = h.n;
                }
                if (!isNaN_(h.d)) {
                    a.x = h.d;
                }
                if (h.s != null) {
                    a.as = h.s;
                }
                if (h.q != null) {
                    a.aq = h.q;
                }
                if (h.o != null) {
                    a.ap = h.q;
                }
            }
            return a;
        }
        fo(a) {
            if (null != this.gotFocus) {
                this.gotFocus(this, a);
            }
        }
        fp(a) {
            if (null != this.lostFocus) {
                this.lostFocus(this, a);
            }
        }
        fs(a) {
            if (null != this.textChanged) {
                this.textChanged(this, a);
            }
        }
        ft(a) {
            if (null != this.valueChanged) {
                this.valueChanged(this, a);
            }
        }
        fq(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            this.fv(a, b, c);
        }
    }
    MultiColumnComboBox.$t = /*@__PURE__*/ markType(MultiColumnComboBox, 'MultiColumnComboBox', Base.$, [INotifyPropertyChanged_$type]);
    MultiColumnComboBox.y = 1;
    MultiColumnComboBox.g6 = /*@__PURE__*/ ThemeResolver.e(MultiColumnComboBox.y, Label.c7, Label.c0);
    MultiColumnComboBox.g8 = /*@__PURE__*/ ThemeResolver.e(MultiColumnComboBox.y, Label.c7, Label.c0);
    MultiColumnComboBox.g7 = /*@__PURE__*/ BrushUtil.g(255, 255, 255, 255);
    MultiColumnComboBox.aq = null;
    MultiColumnComboBox.dj = "ActualNoMatchesFoundLabelBackgroundColor";
    MultiColumnComboBox.ar = null;
    MultiColumnComboBox.hg = /*@__PURE__*/ BrushUtil.g(221, 0, 0, 0);
    return MultiColumnComboBox;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

class IgrMultiColumnComboBoxTextChangedEventArgs {
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    get oldText() {
        return this.i.oldText;
    }
    get newText() {
        return this.i.newText;
    }
}

class IgrMultiColumnComboBoxValueChangedEventArgs {
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    get oldValue() {
        return this.i.oldValue;
    }
    get newValue() {
        return this.i.newValue;
    }
}

class IgrGotFocusEventArgs {
    createImplementation() {
        return new GotFocusEventArgs();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
}

class IgrLostFocusEventArgs {
    createImplementation() {
        return new LostFocusEventArgs();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
}

class IgrMultiColumnComboBox extends Component {
    constructor(props) {
        super(props);
        this._implementation = null;
        this._reactRenderer = null;
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        this._gotFocus = null;
        this._gotFocus_wrapped = null;
        this._lostFocus = null;
        this._lostFocus_wrapped = null;
        this._textChanged = null;
        this._textChanged_wrapped = null;
        this._valueChanged = null;
        this._valueChanged_wrapped = null;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._implementation = this.createImplementation();
        this._getMainRef = this._getMainRef.bind(this);
        var multiColumnComboBox = this.i;
        multiColumnComboBox.notifySizeChanged();
        if (props) {
            this.initializeProperties();
        }
        this._initialized = true;
    }
    set height(value) {
        this._height = value;
        if (this._elRef) {
            this._elRef.style.height = value;
            this.i.notifySizeChanged();
        }
    }
    get height() {
        return this._height;
    }
    set width(value) {
        this._width = value;
        if (this._elRef) {
            this._elRef.style.height = value;
            this.i.notifySizeChanged();
        }
    }
    get width() {
        return this._width;
    }
    _getMainRef(ref) {
        this._elRef = ref;
        this.verifyReferences();
    }
    render() {
        let children = [];
        // We don't actually want to support child content. 
        //let propChildren = this.props.children;        
        //React.Children.forEach(
        //    propChildren, (ch: any) => {
        //        children.push(React.cloneElement(ch));
        //    });
        if (this._portalManager)
            this._portalManager.onRender(children);
        let div = createElement("div", {
            ref: this._getMainRef,
            className: "ig-multi-column-combo-box igr-multi-column-combo-box",
            children: children
        });
        return div;
    }
    verifyReferences() {
        if (this._elRef) {
            this.requestRender = this.requestRender.bind(this);
            this._portalManager = new PortalManager("popupContent", this.requestRender);
            this._reactRenderer = new ReactRenderer(this._elRef, document, true, {}, this._portalManager);
            if (document) {
                this._elRef.style.display = "block";
                this._elRef.style.width = "100%";
                this._elRef.style.height = "100%";
            }
            // render needs to fire again after the portalManager is created. 
            this.requestRender();
            this.i.provideRenderer(this._reactRenderer);
            this._reactRenderer.addSizeWatcher(() => {
                this.i.notifySizeChanged();
            });
        }
    }
    requestRender() {
        if (this._initialized)
            this.setState({});
    }
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    initializeProperties() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    // supports angular themes or custom properties set in CSS
    updateStyle() {
        this._styling(this._elRef, this);
    }
    componentWillUnmount() {
        this.i.destroy();
        if (this._reactRenderer)
            this._reactRenderer.destroy();
    }
    componentDidMount() {
        this._elRef.style.width = this._width ? this._width : "";
        this._elRef.style.height = this._height ? this._height : "";
        this.i.notifySizeChanged();
        this.initializeContent();
    }
    initializeContent() {
        this._styling(this._elRef, this);
        this.updateStyle();
        this.i.notifySizeChanged();
    }
    createImplementation() {
        return new MultiColumnComboBox();
    }
    get i() {
        return this._implementation;
    }
    /**
 * Gets or sets the ShowClearButton property to detirmine if the clear button is shown
*/
    get showClearButton() {
        return this.i.a9;
    }
    set showClearButton(v) {
        this.i.a9 = ensureBool(v);
    }
    /**
     * Gets or sets the desired properties for the data source to load. If specified the data source may decide to constrain the properties it fetches to these properties and must make sure that at least those properties are loaded, rather than the default behavior for that data source.
    */
    get fields() {
        return this.i.g;
    }
    set fields(v) {
        this.i.g = v;
    }
    /**
     * Gets or sets the background color to use for the input group.
    */
    get backgroundColor() {
        return brushToString(this.i.g4);
    }
    set backgroundColor(v) {
        this.i.g4 = stringToBrush(v);
    }
    /**
     * Gets the actual opacity to use for the underline ripple element.
    */
    get actualBackgroundColor() {
        return brushToString(this.i.gt);
    }
    set actualBackgroundColor(v) {
        this.i.gt = stringToBrush(v);
    }
    /**
     * Gets or sets the base built in theme to use for the component.
    */
    get baseTheme() {
        return this.i.aa;
    }
    set baseTheme(v) {
        this.i.aa = ensureEnum(BaseControlTheme_$type, v);
    }
    /**
     * Gets the actual display baseTheme to use for the component.
    */
    get actualBaseTheme() {
        return this.i.z;
    }
    set actualBaseTheme(v) {
        this.i.z = ensureEnum(BaseControlTheme_$type, v);
    }
    /**
     * Gets or sets the color to use the border of the input group.
    */
    get borderColor() {
        return brushToString(this.i.g5);
    }
    set borderColor(v) {
        this.i.g5 = stringToBrush(v);
    }
    /**
     * Gets the actual item background color.
    */
    get actualBorderColor() {
        return brushToString(this.i.gu);
    }
    set actualBorderColor(v) {
        this.i.gu = stringToBrush(v);
    }
    /**
     * Gets or sets the border width to use for the border of the item group.
    */
    get borderWidth() {
        return this.i.b4;
    }
    set borderWidth(v) {
        this.i.b4 = +v;
    }
    /**
     * Gets the actual item border width.
    */
    get actualBorderWidth() {
        return this.i.bu;
    }
    set actualBorderWidth(v) {
        this.i.bu = +v;
    }
    /**
     * Gets or sets the visibility of the drop down button.
    */
    get columnHeadersVisible() {
        return this.i.columnHeadersVisible;
    }
    set columnHeadersVisible(v) {
        this.i.columnHeadersVisible = ensureBool(v);
    }
    get contentPaddingBottom() {
        return this.i.ht ? this.i.ht.b : NaN;
    }
    set contentPaddingBottom(v) {
        this.ensureContentPadding();
        this.i.ht.b = +v;
        this.i.ht = this.i.ht;
    }
    get contentPaddingLeft() {
        return this.i.ht ? this.i.ht.c : NaN;
    }
    set contentPaddingLeft(v) {
        this.ensureContentPadding();
        this.i.ht.c = +v;
        this.i.ht = this.i.ht;
    }
    get contentPaddingRight() {
        return this.i.ht ? this.i.ht.d : NaN;
    }
    set contentPaddingRight(v) {
        this.ensureContentPadding();
        this.i.ht.d = +v;
        this.i.ht = this.i.ht;
    }
    get contentPaddingTop() {
        return this.i.ht ? this.i.ht.e : NaN;
    }
    set contentPaddingTop(v) {
        this.ensureContentPadding();
        this.i.ht.e = +v;
        this.i.ht = this.i.ht;
    }
    ensureContentPadding() {
        if (this.i.ht) {
            return;
        }
        this.i.ht = new Thickness(2);
    }
    get actualContentPaddingBottom() {
        return this.i.hs ? this.i.hs.b : NaN;
    }
    set actualContentPaddingBottom(v) {
        this.ensureActualContentPadding();
        this.i.hs.b = +v;
        this.i.hs = this.i.hs;
    }
    get actualContentPaddingLeft() {
        return this.i.hs ? this.i.hs.c : NaN;
    }
    set actualContentPaddingLeft(v) {
        this.ensureActualContentPadding();
        this.i.hs.c = +v;
        this.i.hs = this.i.hs;
    }
    get actualContentPaddingRight() {
        return this.i.hs ? this.i.hs.d : NaN;
    }
    set actualContentPaddingRight(v) {
        this.ensureActualContentPadding();
        this.i.hs.d = +v;
        this.i.hs = this.i.hs;
    }
    get actualContentPaddingTop() {
        return this.i.hs ? this.i.hs.e : NaN;
    }
    set actualContentPaddingTop(v) {
        this.ensureActualContentPadding();
        this.i.hs.e = +v;
        this.i.hs = this.i.hs;
    }
    ensureActualContentPadding() {
        if (this.i.hs) {
            return;
        }
        this.i.hs = new Thickness(2);
    }
    get cornerRadiusBottomRight() {
        return this.i.f5 ? this.i.f5.b : NaN;
    }
    set cornerRadiusBottomRight(v) {
        this.ensureCornerRadius();
        this.i.f5.b = +v;
        this.i.f5 = this.i.f5;
    }
    get cornerRadiusBottomLeft() {
        return this.i.f5 ? this.i.f5.a : NaN;
    }
    set cornerRadiusBottomLeft(v) {
        this.ensureCornerRadius();
        this.i.f5.a = +v;
        this.i.f5 = this.i.f5;
    }
    get cornerRadiusTopLeft() {
        return this.i.f5 ? this.i.f5.c : NaN;
    }
    set cornerRadiusTopLeft(v) {
        this.ensureCornerRadius();
        this.i.f5.c = +v;
        this.i.f5 = this.i.f5;
    }
    get cornerRadiusTopRight() {
        return this.i.f5 ? this.i.f5.d : NaN;
    }
    set cornerRadiusTopRight(v) {
        this.ensureCornerRadius();
        this.i.f5.d = +v;
        this.i.f5 = this.i.f5;
    }
    ensureCornerRadius() {
        if (this.i.f5) {
            return;
        }
        this.i.f5 = new CornerRadius(2);
    }
    get actualCornerRadiusBottomRight() {
        return this.i.f4 ? this.i.f4.b : NaN;
    }
    set actualCornerRadiusBottomRight(v) {
        this.ensureActualCornerRadius();
        this.i.f4.b = +v;
        this.i.f4 = this.i.f4;
    }
    get actualCornerRadiusBottomLeft() {
        return this.i.f4 ? this.i.f4.a : NaN;
    }
    set actualCornerRadiusBottomLeft(v) {
        this.ensureActualCornerRadius();
        this.i.f4.a = +v;
        this.i.f4 = this.i.f4;
    }
    get actualCornerRadiusTopLeft() {
        return this.i.f4 ? this.i.f4.c : NaN;
    }
    set actualCornerRadiusTopLeft(v) {
        this.ensureActualCornerRadius();
        this.i.f4.c = +v;
        this.i.f4 = this.i.f4;
    }
    get actualCornerRadiusTopRight() {
        return this.i.f4 ? this.i.f4.d : NaN;
    }
    set actualCornerRadiusTopRight(v) {
        this.ensureActualCornerRadius();
        this.i.f4.d = +v;
        this.i.f4 = this.i.f4;
    }
    ensureActualCornerRadius() {
        if (this.i.f4) {
            return;
        }
        this.i.f4 = new CornerRadius(2);
    }
    /**
     * Gets or sets the desired properties for the data source to load. If specified the data source may decide to constrain the properties it fetches to these properties and must make sure that at least those properties are loaded, rather than the default behavior for that data source.
    */
    get dataSourceDesiredProperties() {
        return this.i.f;
    }
    set dataSourceDesiredProperties(v) {
        this.i.f = v;
    }
    /**
     * Gets or sets the display Density to use for the buttons and dropdown grid.
    */
    get density() {
        return this.i.density;
    }
    set density(v) {
        this.i.density = ensureEnum(ControlDisplayDensity_$type, v);
    }
    /**
     * Gets the actual display Density to use for the component.
    */
    get actualDensity() {
        return this.i.ae;
    }
    set actualDensity(v) {
        this.i.ae = ensureEnum(ControlDisplayDensity_$type, v);
    }
    /**
     * Gets or sets the visibility of the drop down button.
    */
    get dropDownButtonVisible() {
        return this.i.dropDownButtonVisible;
    }
    set dropDownButtonVisible(v) {
        this.i.dropDownButtonVisible = ensureBool(v);
    }
    /**
     * Gets or sets the color to use the hovered background of the inputs in the group.
    */
    get focusBorderColor() {
        return brushToString(this.i.hh);
    }
    set focusBorderColor(v) {
        this.i.hh = stringToBrush(v);
    }
    /**
     * Gets the actual item border color.
    */
    get actualFocusBorderColor() {
        return brushToString(this.i.gv);
    }
    set actualFocusBorderColor(v) {
        this.i.gv = stringToBrush(v);
    }
    /**
     * Gets or sets the border width to use for the border of the item group when focused.
    */
    get focusBorderWidth() {
        return this.i.cg;
    }
    set focusBorderWidth(v) {
        this.i.cg = +v;
    }
    /**
     * Gets the actual item border width.
    */
    get actualFocusBorderWidth() {
        return this.i.bv;
    }
    set actualFocusBorderWidth(v) {
        this.i.bv = +v;
    }
    /**
     * Gets or sets the color to use for the underline element.
    */
    get focusUnderlineColor() {
        return brushToString(this.i.hi);
    }
    set focusUnderlineColor(v) {
        this.i.hi = stringToBrush(v);
    }
    /**
     * Gets the actual color to use for the underline element when focused.
    */
    get actualFocusUnderlineColor() {
        return brushToString(this.i.gw);
    }
    set actualFocusUnderlineColor(v) {
        this.i.gw = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the underline element.
    */
    get focusUnderlineOpacity() {
        return this.i.ch;
    }
    set focusUnderlineOpacity(v) {
        this.i.ch = +v;
    }
    /**
     * Gets the actual opacity to use for the underline element when focused.
    */
    get actualFocusUnderlineOpacity() {
        return this.i.bw;
    }
    set actualFocusUnderlineOpacity(v) {
        this.i.bw = +v;
    }
    /**
     * Gets or sets the opacity to use for the underline ripple element when focused.
    */
    get focusUnderlineRippleOpacity() {
        return this.i.ci;
    }
    set focusUnderlineRippleOpacity(v) {
        this.i.ci = +v;
    }
    /**
     * Gets the actual opacity to use for the underline ripple element when focused.
    */
    get actualFocusUnderlineRippleOpacity() {
        return this.i.bx;
    }
    set actualFocusUnderlineRippleOpacity(v) {
        this.i.bx = +v;
    }
    /**
     * Gets or sets the color to use for the underline element.
    */
    get hoverUnderlineColor() {
        return brushToString(this.i.hj);
    }
    set hoverUnderlineColor(v) {
        this.i.hj = stringToBrush(v);
    }
    /**
     * Gets the actual color to use for the underline element.
    */
    get actualHoverUnderlineColor() {
        return brushToString(this.i.gx);
    }
    set actualHoverUnderlineColor(v) {
        this.i.gx = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the underline element.
    */
    get hoverUnderlineOpacity() {
        return this.i.cj;
    }
    set hoverUnderlineOpacity(v) {
        this.i.cj = +v;
    }
    /**
     * Gets the actual opacity to use for the underline element when hovered.
    */
    get actualHoverUnderlineOpacity() {
        return this.i.by;
    }
    set actualHoverUnderlineOpacity(v) {
        this.i.by = +v;
    }
    /**
     * Gets or sets the width to use for the underline element when hovered.
    */
    get hoverUnderlineWidth() {
        return this.i.ck;
    }
    set hoverUnderlineWidth(v) {
        this.i.ck = +v;
    }
    /**
     * Gets the width to use for the underline element when hovered.
    */
    get actualHoverUnderlineWidth() {
        return this.i.bz;
    }
    set actualHoverUnderlineWidth(v) {
        this.i.bz = +v;
    }
    /**
     * Gets or sets the data to which to bind the combo box list. This can be some type of array or list, or it can
     * be an IDataSource instance.
    */
    get dataSource() {
        return this.i.itemsSource;
    }
    set dataSource(v) {
        this.i.itemsSource = v;
    }
    /**
     * Gets the actual data source that is being used by the combo box list. If a collection was provided for the combo box data, an implicit LocalDataSource has been created, and this is available via this property.
    */
    get actualDataSource() {
        return this.i.actualDataSource;
    }
    /**
     * The text displayed in the label portion of the control.
    */
    get label() {
        return this.i.eo;
    }
    set label(v) {
        this.i.eo = v;
    }
    /**
     * Gets or sets the color to use for the text.
    */
    get labelTextColor() {
        return brushToString(this.i.hk);
    }
    set labelTextColor(v) {
        this.i.hk = stringToBrush(v);
    }
    /**
     * Gets the actual color to use for the text color.
    */
    get actualLabelTextColor() {
        return brushToString(this.i.gy);
    }
    set actualLabelTextColor(v) {
        this.i.gy = stringToBrush(v);
    }
    /**
     * Gets or sets the font to use for the combobox.
    */
    get labelTextStyle() {
        if (this.i.au == null) {
            return null;
        }
        return this.i.au.fontString;
    }
    set labelTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.au = fi;
    }
    /**
     * Gets or sets the visibility of the label.
    */
    get actualLabelVisible() {
        return this.i.actualLabelVisible;
    }
    set actualLabelVisible(v) {
        this.i.actualLabelVisible = ensureBool(v);
    }
    /**
     * Gets or sets the text to display on the list when no suggested matches are found.
    */
    get noMatchesFoundLabel() {
        return this.i.eu;
    }
    set noMatchesFoundLabel(v) {
        this.i.eu = v;
    }
    /**
     * Gets the actual text to display on the list when no suggested matches are found.
    */
    get actualNoMatchesFoundLabel() {
        return this.i.actualNoMatchesFoundLabel;
    }
    set actualNoMatchesFoundLabel(v) {
        this.i.actualNoMatchesFoundLabel = v;
    }
    /**
     * Gets or sets the color to use for the "no matches found" label.
    */
    get noMatchesFoundLabelBackgroundColor() {
        return brushToString(this.i.hl);
    }
    set noMatchesFoundLabelBackgroundColor(v) {
        this.i.hl = stringToBrush(v);
    }
    /**
     * Gets the actual color to use for the "no matches found" label.
    */
    get actualNoMatchesFoundLabelBackgroundColor() {
        return brushToString(this.i.gz);
    }
    set actualNoMatchesFoundLabelBackgroundColor(v) {
        this.i.gz = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the "no matches found" label.
    */
    get noMatchesFoundLabelTextColor() {
        return brushToString(this.i.hm);
    }
    set noMatchesFoundLabelTextColor(v) {
        this.i.hm = stringToBrush(v);
    }
    /**
     * Gets the actual color to use for the "no matches found" label.
    */
    get actualNoMatchesFoundLabelTextColor() {
        return brushToString(this.i.g0);
    }
    set actualNoMatchesFoundLabelTextColor(v) {
        this.i.g0 = stringToBrush(v);
    }
    /**
     * Gets or sets the font to use for the combobox.
    */
    get noMatchesFoundLabelTextStyle() {
        if (this.i.av == null) {
            return null;
        }
        return this.i.av.fontString;
    }
    set noMatchesFoundLabelTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.av = fi;
    }
    /**
     * Placeholder text which gives the user a hint about what kind of text is expected.
    */
    get placeholder() {
        return this.i.ez;
    }
    set placeholder(v) {
        this.i.ez = v;
    }
    /**
     * Gets or sets the visibility of the row separators in the drop down.
    */
    get rowSeparatorsVisible() {
        return this.i.rowSeparatorsVisible;
    }
    set rowSeparatorsVisible(v) {
        this.i.rowSeparatorsVisible = ensureBool(v);
    }
    /**
     * Gets or sets the color to use for the text.
    */
    get textColor() {
        return brushToString(this.i.hn);
    }
    set textColor(v) {
        this.i.hn = stringToBrush(v);
    }
    /**
     * Gets the actual color to use for the text color.
    */
    get actualTextColor() {
        return brushToString(this.i.g1);
    }
    set actualTextColor(v) {
        this.i.g1 = stringToBrush(v);
    }
    /**
     * Gets or sets the font to use for the combobox.
    */
    get textStyle() {
        if (this.i.aw == null) {
            return null;
        }
        return this.i.aw.fontString;
    }
    set textStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.aw = fi;
    }
    /**
     * Gets or sets the color to use for the underline element.
    */
    get underlineColor() {
        return brushToString(this.i.ho);
    }
    set underlineColor(v) {
        this.i.ho = stringToBrush(v);
    }
    /**
     * Gets the actual color to use for the underline element.
    */
    get actualUnderlineColor() {
        return brushToString(this.i.g2);
    }
    set actualUnderlineColor(v) {
        this.i.g2 = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the underline element.
    */
    get underlineOpacity() {
        return this.i.cl;
    }
    set underlineOpacity(v) {
        this.i.cl = +v;
    }
    /**
     * Gets the actual opacity to use for the underline element.
    */
    get actualUnderlineOpacity() {
        return this.i.b0;
    }
    set actualUnderlineOpacity(v) {
        this.i.b0 = +v;
    }
    /**
     * Gets or sets the color to use for the underline ripple element.
    */
    get underlineRippleColor() {
        return brushToString(this.i.hp);
    }
    set underlineRippleColor(v) {
        this.i.hp = stringToBrush(v);
    }
    /**
     * Gets the actual color to use for the underline ripple element.
    */
    get actualUnderlineRippleColor() {
        return brushToString(this.i.g3);
    }
    set actualUnderlineRippleColor(v) {
        this.i.g3 = stringToBrush(v);
    }
    /**
     * Gets or sets the opacity to use for the underline ripple element.
    */
    get underlineRippleOpacity() {
        return this.i.cm;
    }
    set underlineRippleOpacity(v) {
        this.i.cm = +v;
    }
    /**
     * Gets the actual opacity to use for the underline ripple element.
    */
    get actualUnderlineRippleOpacity() {
        return this.i.b1;
    }
    set actualUnderlineRippleOpacity(v) {
        this.i.b1 = +v;
    }
    /**
     * Gets or sets the width to use for the underline element.
    */
    get underlineRippleWidth() {
        return this.i.cn;
    }
    set underlineRippleWidth(v) {
        this.i.cn = +v;
    }
    /**
     * Gets the actual width to use for the underline element.
    */
    get actualUnderlineRippleWidth() {
        return this.i.b2;
    }
    set actualUnderlineRippleWidth(v) {
        this.i.b2 = +v;
    }
    /**
     * Gets or sets the width to use for the underline element.
    */
    get underlineWidth() {
        return this.i.co;
    }
    set underlineWidth(v) {
        this.i.co = +v;
    }
    /**
     * Gets the actual width to use for the underline element.
    */
    get actualUnderlineWidth() {
        return this.i.b3;
    }
    set actualUnderlineWidth(v) {
        this.i.b3 = +v;
    }
    /**
     * Whether to allow filtering of the combo
    */
    get allowFilter() {
        return this.i.a2;
    }
    set allowFilter(v) {
        this.i.a2 = ensureBool(v);
    }
    /**
     * Returns/sets the action to take when a column header is clicked.
    */
    get sortMode() {
        return this.i.v;
    }
    set sortMode(v) {
        this.i.v = ensureEnum(SortMode_$type, v);
    }
    /**
     * Determines the name of the field in the data source will be used as the Text of the MultiColumnComboBox.
    */
    get textField() {
        return this.i.e7;
    }
    set textField(v) {
        this.i.e7 = v;
    }
    /**
     * The text displayed in the edit portion of the control.
    */
    get text() {
        return this.i.e5;
    }
    set text(v) {
        this.i.e5 = v;
    }
    /**
     * Sets or gets the user provided primary key to assume for the data. Certain functionality of the combo (such as the the current Value) requires
     * a way to uniquely identify items in order to work correctly.
     * If a primary key cannot be inferred from the data source, you may need to provide one here.
    */
    get valueField() {
        return this.i.j;
    }
    set valueField(v) {
        this.i.j = v;
    }
    /**
     * Gets the actual name of the field in the data source will be used as the Value of the MultiColumnComboBox.
    */
    get actualValueField() {
        return this.i.e;
    }
    set actualValueField(v) {
        this.i.e = v;
    }
    /**
     * Gets or sets the Value of the combo.
     * When the user selects an item from, the value is set based on the specified ValueField field. If not ValueField is specified, then the first field in the data source is used.
     * When the user enters text into the combo, the list is searched based on the TextField field. If a matching string is found, the Value of the combo is the value of the ValueField field in the same row.
     * If the text entered in the combo does not match any item on the list, then the value will return null.
    */
    get value() {
        return this.i.cv;
    }
    set value(v) {
        this.i.cv = v;
    }
    findByName(name) {
        return null;
    }
    get hasUserValues() {
        return this._hasUserValues;
    }
    __m(propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    }
    _styling(container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        let genericPrefix = "";
        let typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("MultiColumnComboBox");
        let additionalPrefixes = [];
        let prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        let b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            let basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            let parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            let parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    }
    /**
 * Programmatically closes the list.

*/
    closeUp() {
        this.i.closeUp();
    }
    /**
     * Programmatically drops down the list.
    
    */
    dropDown() {
        this.i.dropDown();
    }
    /**
     * Programmatically focus the combo input area.
    
    */
    focus() {
        this.i.focus();
    }
    /**
     * Selects all the text in the combo input area.
    
    */
    select() {
        this.i.select();
    }
    /**
     * Exports visual information about the current state of the grid.
    
    */
    exportVisualModel() {
        let iv = this.i.cr();
        return (iv);
    }
    /**
     * Returns a serialized copy of the exported visual model
    
    */
    exportSerializedVisualModel() {
        let iv = this.i.ea();
        return (iv);
    }
    get gotFocus() {
        return this._gotFocus;
    }
    set gotFocus(ev) {
        if (this._gotFocus_wrapped !== null) {
            this.i.gotFocus = delegateRemove(this.i.gotFocus, this._gotFocus_wrapped);
            this._gotFocus_wrapped = null;
            this._gotFocus = null;
        }
        this._gotFocus = ev;
        this._gotFocus_wrapped = (o, e) => {
            let outerArgs = new IgrGotFocusEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeGotFocus) {
                this.beforeGotFocus(this, outerArgs);
            }
            if (this._gotFocus) {
                this._gotFocus(this, outerArgs);
            }
        };
        this.i.gotFocus = delegateCombine(this.i.gotFocus, this._gotFocus_wrapped);
    }
    get lostFocus() {
        return this._lostFocus;
    }
    set lostFocus(ev) {
        if (this._lostFocus_wrapped !== null) {
            this.i.lostFocus = delegateRemove(this.i.lostFocus, this._lostFocus_wrapped);
            this._lostFocus_wrapped = null;
            this._lostFocus = null;
        }
        this._lostFocus = ev;
        this._lostFocus_wrapped = (o, e) => {
            let outerArgs = new IgrLostFocusEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeLostFocus) {
                this.beforeLostFocus(this, outerArgs);
            }
            if (this._lostFocus) {
                this._lostFocus(this, outerArgs);
            }
        };
        this.i.lostFocus = delegateCombine(this.i.lostFocus, this._lostFocus_wrapped);
    }
    get textChanged() {
        return this._textChanged;
    }
    set textChanged(ev) {
        if (this._textChanged_wrapped !== null) {
            this.i.textChanged = delegateRemove(this.i.textChanged, this._textChanged_wrapped);
            this._textChanged_wrapped = null;
            this._textChanged = null;
        }
        this._textChanged = ev;
        this._textChanged_wrapped = (o, e) => {
            let outerArgs = new IgrMultiColumnComboBoxTextChangedEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeTextChanged) {
                this.beforeTextChanged(this, outerArgs);
            }
            if (this._textChanged) {
                this._textChanged(this, outerArgs);
            }
        };
        this.i.textChanged = delegateCombine(this.i.textChanged, this._textChanged_wrapped);
    }
    get valueChanged() {
        return this._valueChanged;
    }
    set valueChanged(ev) {
        if (this._valueChanged_wrapped !== null) {
            this.i.valueChanged = delegateRemove(this.i.valueChanged, this._valueChanged_wrapped);
            this._valueChanged_wrapped = null;
            this._valueChanged = null;
        }
        this._valueChanged = ev;
        this._valueChanged_wrapped = (o, e) => {
            let outerArgs = new IgrMultiColumnComboBoxValueChangedEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeValueChanged) {
                this.beforeValueChanged(this, outerArgs);
            }
            if (this._valueChanged) {
                this._valueChanged(this, outerArgs);
            }
        };
        this.i.valueChanged = delegateCombine(this.i.valueChanged, this._valueChanged_wrapped);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrMultiColumnComboBoxModule {
    static register() {
        IgrInputGroupModule.register();
        IgrDataGridCoreModule.register();
        IgrNumericColumnModule.register();
        IgrDateTimeColumnModule.register();
        IgrImageColumnModule.register();
        IgrTextColumnModule.register();
        TypeRegistrar.registerCons('IgrMultiColumnComboBox', IgrMultiColumnComboBox);
        TypeRegistrar.registerCons('IgrMultiColumnComboBox', IgrMultiColumnComboBox);
        TypeRegistrar.register('MultiColumnComboBox', MultiColumnComboBox.$type);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrDataGridModule {
    static register() {
        IgrDataGridAllColumnsModule.register();
        IgrGridColumnOptionsModule.register();
        IgrComboBoxColumnModule.register();
        IgrInputGroupModule.register();
        IgrMultiColumnComboBoxModule.register();
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let TemplateSectionHeaderCellUpdatingEventArgs = /*@__PURE__*/ (() => {
    class TemplateSectionHeaderCellUpdatingEventArgs extends EventArgs {
        constructor() {
            super(...arguments);
            this._cellInfo = null;
            this._content = null;
        }
        get cellInfo() {
            return this._cellInfo;
        }
        set cellInfo(a) {
            this._cellInfo = a;
        }
        get content() {
            return this._content;
        }
        set content(a) {
            this._content = a;
        }
    }
    TemplateSectionHeaderCellUpdatingEventArgs.$t = /*@__PURE__*/ markType(TemplateSectionHeaderCellUpdatingEventArgs, 'TemplateSectionHeaderCellUpdatingEventArgs', EventArgs.$);
    return TemplateSectionHeaderCellUpdatingEventArgs;
})();

/**
 * Information about the cell that has content which is being created or updated.
*/
class IgrTemplateSectionHeaderCellUpdatingEventArgs {
    createImplementation() {
        return new TemplateSectionHeaderCellUpdatingEventArgs();
    }
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    /**
     * The host in which to add or update content.
    */
    get content() {
        return this.i.content.element.getNativeElement();
    }
    /**
     * The backing information for the current cell.
    */
    get cellInfo() {
        if (this.i.cellInfo == null) {
            return null;
        }
        if (!this.i.cellInfo.externalObject) {
            let ext = null;
            switch (this.i.cellInfo.$type.name) {
                case "DateTimeCellModel":
                    ext = new IgrDateTimeCellInfo();
                    break;
                case "ImageCellModel":
                    ext = new IgrImageCellInfo();
                    break;
                case "NumericCellModel":
                    ext = new IgrNumericCellInfo();
                    break;
                case "RowSeparatorModel":
                    ext = new IgrRowSeparatorInfo();
                    break;
                case "SectionHeaderCellModel":
                    ext = new IgrSectionHeaderCellInfo();
                    break;
                case "TemplateCellModel":
                    ext = new IgrTemplateCellInfo();
                    break;
                case "TemplateHeaderCellModel":
                    ext = new IgrTemplateHeaderCellInfo();
                    break;
                case "TemplateSectionHeaderCellModel":
                    ext = new IgrTemplateSectionHeaderCellInfo();
                    break;
                case "TextCellModel":
                    ext = new IgrTextCellInfo();
                    break;
                case "TextHeaderCellModel":
                    ext = new IgrTextHeaderCellInfo();
                    break;
            }
            ext._implementation = this.i.cellInfo;
            this.i.cellInfo.externalObject = ext;
        }
        return this.i.cellInfo.externalObject;
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let EditorCell_ComboExternal_$type = /*@__PURE__*/ new Type(null, 'EditorCell_ComboExternal');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let BrowserExecutionContext = /*@__PURE__*/ (() => {
    class BrowserExecutionContext extends Base {
        constructor(a) {
            super();
            this.b = new Date();
            this._requestAnimationFrame = null;
            this.requestAnimationFrame = a.getRequestAnimationFrame();
            this.b = dateNow();
        }
        get requestAnimationFrame() {
            return this._requestAnimationFrame;
        }
        set requestAnimationFrame(a) {
            this._requestAnimationFrame = a;
        }
        enqueueAction(a) {
            window.setTimeout(() => a(), 0);
        }
        enqueueAnimationAction(a) {
            this.requestAnimationFrame(() => a());
        }
        execute(a) {
            window.setTimeout(() => a(), 0);
        }
        executeDelayed(a, b) {
            window.setTimeout(() => a(), b);
        }
        getCurrentRelativeTime() {
            let a = dateNow();
            return truncate(timeSpanTotalMilliseconds((+a - +(this.b))));
        }
    }
    BrowserExecutionContext.$t = /*@__PURE__*/ markType(BrowserExecutionContext, 'BrowserExecutionContext', Base.$, [IExecutionContext_$type]);
    return BrowserExecutionContext;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/**
 * This class is used to group the settings to define an animation phase.
*/
class IgrGridAnimationPhaseSettings {
    createImplementation() {
        return new GridAnimationPhaseSettings();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    /**
     * The duration of an animation, in milliseconds
    */
    get durationMilliseconds() {
        return this.i.l;
    }
    set durationMilliseconds(v) {
        this.i.l = +v;
    }
    /**
     * The amount of time to delay an animation, in milliseconds.
    */
    get holdInitialMilliseconds() {
        return this.i.m;
    }
    set holdInitialMilliseconds(v) {
        this.i.m = +v;
    }
    /**
     * The amount of time to delay each item animating, in milliseconds
    */
    get perItemDelayMilliseconds() {
        return this.i.n;
    }
    set perItemDelayMilliseconds(v) {
        this.i.n = +v;
    }
    /**
     * The amount of time each item animating should take, in milliseconds
    */
    get subItemDurationMilliseconds() {
        return this.i.o;
    }
    set subItemDurationMilliseconds(v) {
        this.i.o = +v;
    }
    /**
     * The desired amount of time each item animating should take, in milliseconds
    */
    get desiredSubItemDurationMilliseconds() {
        return this.i.k;
    }
    set desiredSubItemDurationMilliseconds(v) {
        this.i.k = +v;
    }
    /**
     * Configures whether all items animating should finish simultaneously
    */
    get shouldItemsFinishSimultaneously() {
        return this.i.e;
    }
    set shouldItemsFinishSimultaneously(v) {
        this.i.e = ensureBool(v);
    }
    /**
     * Configures the Easing function used to animate the individual items
    */
    get easingFunctionType() {
        return this.i.c;
    }
    set easingFunctionType(v) {
        this.i.c = ensureEnum(GridEasingFunctionType_$type, v);
    }
    findByName(name) {
        return null;
    }
}

/**
 * Represents info about the current cell.
*/
class IgrEditorCellInfo extends IgrCellInfo {
    createImplementation() {
        return new EditorCellModel();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor() {
        super();
    }
    /**
     * Gets or sets whether the editor cell is hidden or not.
    */
    get isHidden() {
        return this.i.kz;
    }
    set isHidden(v) {
        this.i.kz = ensureBool(v);
    }
    /**
     * Gets or sets the edit target for this cell.
    */
    get editTarget() {
        if (this.i.kv == null) {
            return null;
        }
        return this.i.kv.externalObject;
    }
    set editTarget(v) {
        v == null ? this.i.kv = null : this.i.kv = v.i;
    }
    /**
     * Gets or sets the data type associated with the cell being edited.
    */
    get dataType() {
        return this.i.kt;
    }
    set dataType(v) {
        this.i.kt = ensureEnum(DataSourceSchemaPropertyType_$type, v);
    }
    /**
     * Gets or sets the error message to display in the editor cell.
    */
    get errorMessage() {
        return this.i.lp;
    }
    set errorMessage(v) {
        this.i.lp = v;
    }
    /**
     * Gets or sets the user selected value.
    */
    get editValue() {
        return this.i.le;
    }
    set editValue(v) {
        this.i.le = v;
    }
    /**
     * Gets or sets the type of editor to use while cell editing.
    */
    get editorType() {
        return this.i.kx;
    }
    set editorType(v) {
        this.i.kx = ensureEnum(EditorType_$type, v);
    }
    /**
     * Gets or sets the data source to use for the editor where it makes sense.
    */
    get editorDataSource() {
        return this.i.ld;
    }
    set editorDataSource(v) {
        this.i.ld = v;
    }
    /**
     * Gets or sets the editors display member.
    */
    get editorTextField() {
        return this.i.lj;
    }
    set editorTextField(v) {
        this.i.lj = v;
    }
    /**
     * Gets or sets the editors value member.
    */
    get editorValueField() {
        return this.i.kr;
    }
    set editorValueField(v) {
        this.i.kr = v;
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.editTarget && this.editTarget.name && this.editTarget.name == name) {
            return this.editTarget;
        }
        return null;
    }
}

/**
 * Represents info about the current cell.
*/
class IgrEditorRowCellInfo extends IgrCellInfo {
    createImplementation() {
        return new EditorRowCellModel();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor() {
        super();
    }
    /**
     * Gets or sets the edit target for this cell.
    */
    get editTarget() {
        if (this.i.kr == null) {
            return null;
        }
        return this.i.kr.externalObject;
    }
    set editTarget(v) {
        v == null ? this.i.kr = null : this.i.kr = v.i;
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.editTarget && this.editTarget.name && this.editTarget.name == name) {
            return this.editTarget;
        }
        return null;
    }
}

/**
 * Backing information for a section header cell in the grid.
*/
class IgrSummaryCellInfo extends IgrCellInfo {
    createImplementation() {
        return new SummaryCellModel();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor() {
        super();
    }
    /**
     * Sets or gets the resolved summary label for the summary cell.
    */
    get resolvedSummaryLabel() {
        return this.i.ky;
    }
    set resolvedSummaryLabel(v) {
        this.i.ky = v;
    }
    /**
     * Sets or gets the resolved summary value for the sumamry cell.
    */
    get resolvedSummaryValue() {
        return this.i.k0;
    }
    set resolvedSummaryValue(v) {
        this.i.k0 = v;
    }
    /**
     * Gets or sets the color of the text for the summary label in the cell.
    */
    get summaryLabelTextColor() {
        return brushToString(this.i.k5);
    }
    set summaryLabelTextColor(v) {
        this.i.k5 = stringToBrush(v);
    }
    get font() {
        if (this.i.kr == null) {
            return null;
        }
        return this.i.kr.fontString;
    }
    set font(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.kr = fi;
    }
}

/**
 * Represents backing information for vertical separators.
*/
class IgrVerticalSeparatorCellInfo extends IgrCellInfo {
    createImplementation() {
        return new VerticalSeparatorCellModel();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor() {
        super();
    }
    /**
     * Gets or sets whether the vertical separator is hit test visible.
    */
    get isHitTestVisible() {
        return this.i.kr;
    }
    set isHitTestVisible(v) {
        this.i.kr = ensureBool(v);
    }
}

/**
 * Object used to store group information for group headers.
*/
class IgrGroupData {
    createImplementation() {
        return new GroupData();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    /**
     * The grouping key.
    */
    get groupName() {
        return this.i.c;
    }
    set groupName(v) {
        this.i.c = v;
    }
    /**
     * The group value.
    */
    get groupValue() {
        return this.i.a;
    }
    set groupValue(v) {
        this.i.a = v;
    }
    /**
     * The value as formatted text.
    */
    get formattedText() {
        return this.i.b;
    }
    set formattedText(v) {
        this.i.b = v;
    }
    findByName(name) {
        return null;
    }
}

/**
 * Object used to store summary information for group headers.
*/
class IgrSummaryData {
    createImplementation() {
        return new SummaryData();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    get summaryName() {
        return this.i.e;
    }
    set summaryName(v) {
        this.i.e = v;
    }
    get summaryValue() {
        return this.i.b;
    }
    set summaryValue(v) {
        this.i.b = v;
    }
    get summaryOperand() {
        return this.i.a;
    }
    set summaryOperand(v) {
        this.i.a = ensureEnum(SummaryOperand_$type, v);
    }
    get formattedText() {
        return this.i.c;
    }
    set formattedText(v) {
        this.i.c = v;
    }
    get formattedValue() {
        return this.i.d;
    }
    set formattedValue(v) {
        this.i.d = v;
    }
    findByName(name) {
        return null;
    }
}

class IgrGridFilterDialogOpeningEventArgs {
    createImplementation() {
        return new GridFilterDialogOpeningEventArgs();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    get column() {
        if (this.i.a == null) {
            return null;
        }
        if (!this.i.a.externalObject) {
            let e = IgrColumn._createFromInternal(this.i.a);
            if (e) {
                e._implementation = this.i.a;
            }
            this.i.a.externalObject = e;
        }
        return this.i.a.externalObject;
    }
    set column(v) {
        v == null ? this.i.a = null : this.i.a = v.i;
    }
}

class IgrGridFilterDialogFilterChangeEventArgs {
    createImplementation() {
        return new GridFilterDialogFilterChangeEventArgs();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    get filter() {
        return this.i.a;
    }
    set filter(v) {
        this.i.a = v;
    }
}

class IgrFilterDialogRenderCompletedEventArgs {
    createImplementation() {
        return new FilterDialogRenderCompletedEventArgs();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
}

/**
 * An advanced grid for displaying data.
*/
class IgrDataGridFilterDialog extends Component {
    constructor(props) {
        super(props);
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        this._dialogOpening = null;
        this._dialogOpening_wrapped = null;
        this._filterChanging = null;
        this._filterChanging_wrapped = null;
        this._filterChanged = null;
        this._filterChanged_wrapped = null;
        this._renderCompleted = null;
        this._renderCompleted_wrapped = null;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    createImplementation() {
        return new GridFilterDialog();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    } /**
                                 * @hidden
                                 */
    static _createFromInternal(internal) {
        if (!internal) {
            return null;
        }
        if (!internal.$type) {
            return null;
        }
        let name = internal.$type.name;
        let externalName = "Igr" + name;
        if (!TypeRegistrar.isRegistered(externalName)) {
            return null;
        }
        return TypeRegistrar.create(externalName);
    }
    onImplementationCreated() {
    }
    componentDidMount() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    render() {
        return null;
    }
    get isAnimationEnabled() {
        return this.i.x;
    }
    set isAnimationEnabled(v) {
        this.i.x = ensureBool(v);
    }
    /**
     * Gets or sets the scaling value used to affect the pixel density of the control.
     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
     * to appear blurry.
    */
    get pixelScalingRatio() {
        return this.i.ae;
    }
    set pixelScalingRatio(v) {
        this.i.ae = +v;
    }
    /**
     * Gets the actual pixel scaling ratio used to affect the pixel density of the control.
     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
     * to appear blurry.
    */
    get actualPixelScalingRatio() {
        return this.i.ad;
    }
    set actualPixelScalingRatio(v) {
        this.i.ad = +v;
    }
    get iconColor() {
        return brushToString(this.i.bp);
    }
    set iconColor(v) {
        this.i.bp = stringToBrush(v);
    }
    get viewSize() {
        return this.i.af;
    }
    set viewSize(v) {
        this.i.af = +v;
    }
    get isOpen() {
        return this.i.y;
    }
    findByName(name) {
        return null;
    }
    get hasUserValues() {
        return this._hasUserValues;
    }
    __m(propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    }
    _styling(container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        let genericPrefix = "";
        let typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("DataGridFilterDialog");
        let additionalPrefixes = [];
        let prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        let b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            let basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            let parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            let parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    }
    notifySizeChanged(width, height) {
        this.i.a8(width, height);
    }
    notifyCellSizeChanged() {
        this.i.a7();
    }
    showIcon() {
        this.i.bk();
    }
    hideIcon() {
        this.i.a5();
    }
    get dialogOpening() {
        return this._dialogOpening;
    }
    set dialogOpening(ev) {
        if (this._dialogOpening_wrapped !== null) {
            this.i.dialogOpening = delegateRemove(this.i.dialogOpening, this._dialogOpening_wrapped);
            this._dialogOpening_wrapped = null;
            this._dialogOpening = null;
        }
        this._dialogOpening = ev;
        this._dialogOpening_wrapped = (o, e) => {
            let outerArgs = new IgrGridFilterDialogOpeningEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeDialogOpening) {
                this.beforeDialogOpening(this, outerArgs);
            }
            if (this._dialogOpening) {
                this._dialogOpening(this, outerArgs);
            }
        };
        this.i.dialogOpening = delegateCombine(this.i.dialogOpening, this._dialogOpening_wrapped);
    }
    get filterChanging() {
        return this._filterChanging;
    }
    set filterChanging(ev) {
        if (this._filterChanging_wrapped !== null) {
            this.i.filterChanging = delegateRemove(this.i.filterChanging, this._filterChanging_wrapped);
            this._filterChanging_wrapped = null;
            this._filterChanging = null;
        }
        this._filterChanging = ev;
        this._filterChanging_wrapped = (o, e) => {
            let outerArgs = new IgrGridFilterDialogFilterChangeEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeFilterChanging) {
                this.beforeFilterChanging(this, outerArgs);
            }
            if (this._filterChanging) {
                this._filterChanging(this, outerArgs);
            }
        };
        this.i.filterChanging = delegateCombine(this.i.filterChanging, this._filterChanging_wrapped);
    }
    get filterChanged() {
        return this._filterChanged;
    }
    set filterChanged(ev) {
        if (this._filterChanged_wrapped !== null) {
            this.i.filterChanged = delegateRemove(this.i.filterChanged, this._filterChanged_wrapped);
            this._filterChanged_wrapped = null;
            this._filterChanged = null;
        }
        this._filterChanged = ev;
        this._filterChanged_wrapped = (o, e) => {
            let outerArgs = new IgrGridFilterDialogFilterChangeEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeFilterChanged) {
                this.beforeFilterChanged(this, outerArgs);
            }
            if (this._filterChanged) {
                this._filterChanged(this, outerArgs);
            }
        };
        this.i.filterChanged = delegateCombine(this.i.filterChanged, this._filterChanged_wrapped);
    }
    get renderCompleted() {
        return this._renderCompleted;
    }
    set renderCompleted(ev) {
        if (this._renderCompleted_wrapped !== null) {
            this.i.renderCompleted = delegateRemove(this.i.renderCompleted, this._renderCompleted_wrapped);
            this._renderCompleted_wrapped = null;
            this._renderCompleted = null;
        }
        this._renderCompleted = ev;
        this._renderCompleted_wrapped = (o, e) => {
            let outerArgs = new IgrFilterDialogRenderCompletedEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeRenderCompleted) {
                this.beforeRenderCompleted(this, outerArgs);
            }
            if (this._renderCompleted) {
                this._renderCompleted(this, outerArgs);
            }
        };
        this.i.renderCompleted = delegateCombine(this.i.renderCompleted, this._renderCompleted_wrapped);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

class IgrGridFilterDialogViewModelGrouping {
    createImplementation() {
        return new GridFilterDialogViewModelGrouping();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    get startIndex() {
        return this.i.c;
    }
    set startIndex(v) {
        this.i.c = +v;
    }
    get endIndex() {
        return this.i.b;
    }
    set endIndex(v) {
        this.i.b = +v;
    }
    get isOrGrouping() {
        return this.i.a;
    }
    set isOrGrouping(v) {
        this.i.a = ensureBool(v);
    }
    findByName(name) {
        return null;
    }
}

class IgrGridFilterDialogViewModelGroupingLevel extends IgCollection {
    constructor(list) {
        super();
        if (!IgrGridFilterDialogViewModelGrouping.$type) {
            IgrGridFilterDialogViewModelGrouping.$type = markType(IgrGridFilterDialogViewModelGrouping, "IgrGridFilterDialogViewModelGrouping");
        }
        if (list) {
            for (let i = 0; i < list.length; i++) {
                this.add(list[i]);
            }
        }
    }
    _createInnerColl() {
        if (!IgrGridFilterDialogViewModelGrouping.$type) {
            IgrGridFilterDialogViewModelGrouping.$type = markType(IgrGridFilterDialogViewModelGrouping, "IgrGridFilterDialogViewModelGrouping");
        }
        let coll = new SyncableObservableCollection$2(IgrGridFilterDialogViewModelGrouping.$type, GridFilterDialogViewModelGrouping.$type, 0);
        coll.compare = (ext, int) => {
            let comp = ext;
            if (comp._implementation) {
                comp = comp._implementation;
            }
            if (comp.equals) {
                return comp.equals(int);
            }
            return comp === int;
        };
        coll.createTo = (ext) => {
            return ext._implementation;
        };
        coll.createFrom = (int) => {
            let ext = int.externalObject;
            if (!ext) {
                ext = new IgrGridFilterDialogViewModelGrouping();
                if (ext) {
                    ext._implementation = int;
                }
            }
            return ext;
        };
        return coll;
    }
}

class IgrGridFilterDialogViewModelGroupingLevelCollection extends IgCollection {
    constructor(list) {
        super();
        if (!IgrGridFilterDialogViewModelGroupingLevel.$type) {
            IgrGridFilterDialogViewModelGroupingLevel.$type = markType(IgrGridFilterDialogViewModelGroupingLevel, "IgrGridFilterDialogViewModelGroupingLevel");
        }
        if (list) {
            for (let i = 0; i < list.length; i++) {
                this.add(list[i]);
            }
        }
    }
    _createInnerColl() {
        if (!IgrGridFilterDialogViewModelGroupingLevel.$type) {
            IgrGridFilterDialogViewModelGroupingLevel.$type = markType(IgrGridFilterDialogViewModelGroupingLevel, "IgrGridFilterDialogViewModelGroupingLevel");
        }
        let coll = new SyncableObservableCollection$2(IgrGridFilterDialogViewModelGroupingLevel.$type, GridFilterDialogViewModelGroupingLevel.$type, 0);
        coll.compare = (ext, int) => {
            let comp = ext;
            if (comp._implementation) {
                comp = comp._implementation;
            }
            if (comp.equals) {
                return comp.equals(int);
            }
            return comp === int;
        };
        coll.createTo = (ext) => {
            return ext._implementation;
        };
        coll.createFrom = (int) => {
            let ext = int.externalObject;
            if (!ext) {
                ext = new IgrGridFilterDialogViewModelGroupingLevel();
                if (ext) {
                    ext._implementation = int;
                }
            }
            return ext;
        };
        return coll;
    }
}

class IgrGridFilterDialogViewModelRow {
    createImplementation() {
        return new GridFilterDialogViewModelRow();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    get operatorTypes() {
        return this.i.f;
    }
    set operatorTypes(v) {
        this.i.f = v;
    }
    get operators() {
        return this.i.e;
    }
    set operators(v) {
        this.i.e = v;
    }
    get currentOperator() {
        return this.i.l;
    }
    set currentOperator(v) {
        this.i.l = v;
    }
    get operandNumber() {
        return this.i.d;
    }
    set operandNumber(v) {
        this.i.d = v;
    }
    get operand1() {
        return this.i.i;
    }
    set operand1(v) {
        this.i.i = v;
    }
    get operand2() {
        return this.i.j;
    }
    set operand2(v) {
        this.i.j = v;
    }
    findByName(name) {
        return null;
    }
}

class IgrGridFilterDialogViewModelRowCollection extends IgCollection {
    constructor(list) {
        super();
        if (!IgrGridFilterDialogViewModelRow.$type) {
            IgrGridFilterDialogViewModelRow.$type = markType(IgrGridFilterDialogViewModelRow, "IgrGridFilterDialogViewModelRow");
        }
        if (list) {
            for (let i = 0; i < list.length; i++) {
                this.add(list[i]);
            }
        }
    }
    _createInnerColl() {
        if (!IgrGridFilterDialogViewModelRow.$type) {
            IgrGridFilterDialogViewModelRow.$type = markType(IgrGridFilterDialogViewModelRow, "IgrGridFilterDialogViewModelRow");
        }
        let coll = new SyncableObservableCollection$2(IgrGridFilterDialogViewModelRow.$type, GridFilterDialogViewModelRow.$type, 0);
        coll.compare = (ext, int) => {
            let comp = ext;
            if (comp._implementation) {
                comp = comp._implementation;
            }
            if (comp.equals) {
                return comp.equals(int);
            }
            return comp === int;
        };
        coll.createTo = (ext) => {
            return ext._implementation;
        };
        coll.createFrom = (int) => {
            let ext = int.externalObject;
            if (!ext) {
                ext = new IgrGridFilterDialogViewModelRow();
                if (ext) {
                    ext._implementation = int;
                }
            }
            return ext;
        };
        return coll;
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

class IgrGridFilterDialogViewModel {
    constructor() {
        this._groupingLevels = null;
        this._rows = null;
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    createImplementation() {
        return new GridFilterDialogViewModel();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    get propertyType() {
        return this.i.a;
    }
    set propertyType(v) {
        this.i.a = ensureEnum(DataSourceSchemaPropertyType_$type, v);
    }
    get groupingLevels() {
        if (this._groupingLevels === null) {
            let coll = new IgrGridFilterDialogViewModelGroupingLevelCollection();
            let innerColl = this.i.e;
            if (!innerColl) {
                innerColl = new GridFilterDialogViewModelGroupingLevelCollection();
            }
            this._groupingLevels = coll._fromInner(innerColl);
            this.i.e = innerColl;
        }
        return this._groupingLevels;
    }
    set groupingLevels(v) {
        if (this._groupingLevels !== null) {
            this._groupingLevels._setSyncTarget(null);
            this._groupingLevels = null;
        }
        let coll = new IgrGridFilterDialogViewModelGroupingLevelCollection();
        this._groupingLevels = coll._fromOuter(v);
        let syncColl = new SyncableObservableCollection$1(GridFilterDialogViewModelGroupingLevel.$type);
        let innerColl = this.i.e;
        if (!innerColl) {
            innerColl = new GridFilterDialogViewModelGroupingLevelCollection();
        }
        syncColl._inner = innerColl;
        syncColl.clear();
        this._groupingLevels._setSyncTarget(syncColl);
        this.i.e = innerColl;
    }
    get isTopLevelOr() {
        return this.i.k;
    }
    set isTopLevelOr(v) {
        this.i.k = ensureBool(v);
    }
    get maxGroupingLevels() {
        return this.i.m;
    }
    set maxGroupingLevels(v) {
        this.i.m = +v;
    }
    get rows() {
        if (this._rows === null) {
            let coll = new IgrGridFilterDialogViewModelRowCollection();
            let innerColl = this.i.f;
            if (!innerColl) {
                innerColl = new GridFilterDialogViewModelRowCollection();
            }
            this._rows = coll._fromInner(innerColl);
            this.i.f = innerColl;
        }
        return this._rows;
    }
    set rows(v) {
        if (this._rows !== null) {
            this._rows._setSyncTarget(null);
            this._rows = null;
        }
        let coll = new IgrGridFilterDialogViewModelRowCollection();
        this._rows = coll._fromOuter(v);
        let syncColl = new SyncableObservableCollection$1(GridFilterDialogViewModelRow.$type);
        let innerColl = this.i.f;
        if (!innerColl) {
            innerColl = new GridFilterDialogViewModelRowCollection();
        }
        syncColl._inner = innerColl;
        syncColl.clear();
        this._rows._setSyncTarget(syncColl);
        this.i.f = innerColl;
    }
    findByName(name) {
        if (this.rows != null && this.rows.findByName && this.rows.findByName(name)) {
            return this.rows.findByName(name);
        }
        return null;
    }
    addNewRow() {
        this.i.n();
    }
    canGroupRange(startIndex, endIndex) {
        let iv = this.i.h(startIndex, endIndex);
        return (iv);
    }
    ungroupRange(startIndex, endIndex) {
        this.i.aa(startIndex, endIndex);
    }
    targetingRange(startIndex, endIndex) {
        let iv = this.i.l(startIndex, endIndex);
        return (iv);
    }
    toggleRange(startIndex, endIndex) {
        this.i.z(startIndex, endIndex);
    }
    groupRange(startIndex, endIndex, isOrGrouping) {
        this.i.o(startIndex, endIndex, isOrGrouping);
    }
}

class IgrDataGridExpansionIndicator extends Component {
    constructor(props) {
        super(props);
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    createImplementation() {
        return new GridExpansionIndicator();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    } /**
                                 * @hidden
                                 */
    static _createFromInternal(internal) {
        if (!internal) {
            return null;
        }
        if (!internal.$type) {
            return null;
        }
        let name = internal.$type.name;
        let externalName = "Igr" + name;
        if (!TypeRegistrar.isRegistered(externalName)) {
            return null;
        }
        return TypeRegistrar.create(externalName);
    }
    onImplementationCreated() {
    }
    componentDidMount() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    render() {
        return null;
    }
    /**
     * Gets or sets the expansion state of the indicator.
    */
    get isExpanded() {
        return this.i.g;
    }
    set isExpanded(v) {
        this.i.g = ensureBool(v);
    }
    /**
     * Gets or sets the color of the indicator.
    */
    get iconColor() {
        return brushToString(this.i.ae);
    }
    set iconColor(v) {
        this.i.ae = stringToBrush(v);
    }
    /**
     * Gets or sets whether animations are enabled.
    */
    get isAnimationEnabled() {
        return this.i.f;
    }
    set isAnimationEnabled(v) {
        this.i.f = ensureBool(v);
    }
    /**
     * Gets or sets the scaling value used to affect the pixel density of the control.
     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
     * to appear blurry.
    */
    get pixelScalingRatio() {
        return this.i.m;
    }
    set pixelScalingRatio(v) {
        this.i.m = +v;
    }
    /**
     * Gets the actual pixel scaling ratio used to affect the pixel density of the control.
     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
     * to appear blurry.
    */
    get actualPixelScalingRatio() {
        return this.i.j;
    }
    set actualPixelScalingRatio(v) {
        this.i.j = +v;
    }
    findByName(name) {
        return null;
    }
    get hasUserValues() {
        return this._hasUserValues;
    }
    __m(propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    }
    _styling(container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        let genericPrefix = "";
        let typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("DataGridExpansionIndicator");
        let additionalPrefixes = [];
        let prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        let b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            let basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            let parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            let parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    }
    notifySizeChanged(width, height) {
        this.i.y(width, height);
    }
}

class IgrSortIndicatorRenderCompletedEventArgs {
    createImplementation() {
        return new SortIndicatorRenderCompletedEventArgs();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
}

/**
 * An advanced grid for displaying data.
*/
class IgrDataGridSortIndicator extends Component {
    constructor(props) {
        super(props);
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        this._renderCompleted = null;
        this._renderCompleted_wrapped = null;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    createImplementation() {
        return new GridSortIndicator();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    } /**
                                 * @hidden
                                 */
    static _createFromInternal(internal) {
        if (!internal) {
            return null;
        }
        if (!internal.$type) {
            return null;
        }
        let name = internal.$type.name;
        let externalName = "Igr" + name;
        if (!TypeRegistrar.isRegistered(externalName)) {
            return null;
        }
        return TypeRegistrar.create(externalName);
    }
    onImplementationCreated() {
    }
    componentDidMount() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    render() {
        return null;
    }
    get sortDirection() {
        return this.i.b;
    }
    set sortDirection(v) {
        this.i.b = ensureEnum(ColumnSortDirection_$type, v);
    }
    get iconColor() {
        return brushToString(this.i.a0);
    }
    set iconColor(v) {
        this.i.a0 = stringToBrush(v);
    }
    get isAnimationEnabled() {
        return this.i.l;
    }
    set isAnimationEnabled(v) {
        this.i.l = ensureBool(v);
    }
    /**
     * Gets or sets the scaling value used to affect the pixel density of the control.
     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
     * to appear blurry.
    */
    get pixelScalingRatio() {
        return this.i.w;
    }
    set pixelScalingRatio(v) {
        this.i.w = +v;
    }
    /**
     * Gets the actual pixel scaling ratio used to affect the pixel density of the control.
     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
     * to appear blurry.
    */
    get actualPixelScalingRatio() {
        return this.i.p;
    }
    set actualPixelScalingRatio(v) {
        this.i.p = +v;
    }
    get sortIndicatorStyle() {
        return this.i.f;
    }
    set sortIndicatorStyle(v) {
        this.i.f = ensureEnum(SortIndicatorStyle_$type, v);
    }
    findByName(name) {
        return null;
    }
    get hasUserValues() {
        return this._hasUserValues;
    }
    __m(propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    }
    _styling(container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        let genericPrefix = "";
        let typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("DataGridSortIndicator");
        let additionalPrefixes = [];
        let prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        let b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            let basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            let parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            let parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    }
    getDesiredScale() {
        let iv = this.i.v();
        return (iv);
    }
    notifySizeChanged(width, height) {
        this.i.ar(width, height);
    }
    notifyCellSizeChanged() {
        this.i.aq();
    }
    get renderCompleted() {
        return this._renderCompleted;
    }
    set renderCompleted(ev) {
        if (this._renderCompleted_wrapped !== null) {
            this.i.renderCompleted = delegateRemove(this.i.renderCompleted, this._renderCompleted_wrapped);
            this._renderCompleted_wrapped = null;
            this._renderCompleted = null;
        }
        this._renderCompleted = ev;
        this._renderCompleted_wrapped = (o, e) => {
            let outerArgs = new IgrSortIndicatorRenderCompletedEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeRenderCompleted) {
                this.beforeRenderCompleted(this, outerArgs);
            }
            if (this._renderCompleted) {
                this._renderCompleted(this, outerArgs);
            }
        };
        this.i.renderCompleted = delegateCombine(this.i.renderCompleted, this._renderCompleted_wrapped);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let DragType_$type = /*@__PURE__*/ markEnum('DragType', 'RangeSelect,0|HeaderResize,1|ColumnMove,2|None,3');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let IExternalTemplateSectionHeader_$type = /*@__PURE__*/ new Type(null, 'IExternalTemplateSectionHeader');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let IExternalTemplateColumn_$type = /*@__PURE__*/ new Type(null, 'IExternalTemplateColumn');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let IExternalTemplateHeaderColumn_$type = /*@__PURE__*/ new Type(null, 'IExternalTemplateHeaderColumn');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrPinnedAreaSeparatorModule {
    static register() {
        TypeRegistrar.registerCons("IgrPinnedAreaSeparator", IgrPinnedAreaSeparator);
        TypeRegistrar.register("PinnedAreaSeparator", PinnedAreaSeparator.$type);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/**
 * Used to configure the appearance of the section footer cells.
*/
class IgrSectionFooter extends IgrDefinitionBase {
    createImplementation() {
        return new SectionFooter();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrSectionFooterModule {
    static register() {
        TypeRegistrar.registerCons("IgrSectionFooter", IgrSectionFooter);
        TypeRegistrar.register("SectionFooter", SectionFooter.$type);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrHeaderRowSeparatorModule {
    static register() {
        TypeRegistrar.registerCons("IgrHeaderRowSeparator", IgrHeaderRowSeparator);
        TypeRegistrar.register("HeaderRowSeparator", HeaderRowSeparator.$type);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let TemplateSectionHeader = /*@__PURE__*/ (() => {
    class TemplateSectionHeader extends SectionHeader {
        constructor() {
            super(...arguments);
            this.cellUpdating = null;
        }
        cm(a, b, c) {
            return "templateSectionHeader";
        }
        l(a) {
            return new TemplateSectionHeaderCellModel();
        }
        fg(a, b) {
            if (this.cellUpdating != null) {
                this.cellUpdating(this, ((() => {
                    let $ret = new TemplateSectionHeaderCellUpdatingEventArgs();
                    $ret.cellInfo = a;
                    $ret.content = b;
                    return $ret;
                })()));
            }
        }
    }
    TemplateSectionHeader.$t = /*@__PURE__*/ markType(TemplateSectionHeader, 'TemplateSectionHeader', SectionHeader.$);
    return TemplateSectionHeader;
})();

/**
 * Used to configure the appearance of the section header cells.
*/
class IgrTemplateSectionHeader extends IgrSectionHeader {
    constructor(props) {
        super(props);
        this._cellUpdating = null;
        this._cellUpdating_wrapped = null;
    }
    createImplementation() {
        return new TemplateSectionHeader();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    /**
     * Called when the cell content is being created or updated.
    */
    get cellUpdating() {
        return this._cellUpdating;
    }
    set cellUpdating(ev) {
        if (this._cellUpdating_wrapped !== null) {
            this.i.cellUpdating = delegateRemove(this.i.cellUpdating, this._cellUpdating_wrapped);
            this._cellUpdating_wrapped = null;
            this._cellUpdating = null;
        }
        this._cellUpdating = ev;
        this._cellUpdating_wrapped = (o, e) => {
            let outerArgs = new IgrTemplateSectionHeaderCellUpdatingEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeCellUpdating) {
                this.beforeCellUpdating(this, outerArgs);
            }
            if (this._cellUpdating) {
                this._cellUpdating(this, outerArgs);
            }
        };
        this.i.cellUpdating = delegateCombine(this.i.cellUpdating, this._cellUpdating_wrapped);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrTemplateSectionHeaderModule {
    static register() {
        TypeRegistrar.registerCons("IgrTemplateSectionHeader", IgrTemplateSectionHeader);
        TypeRegistrar.register("TemplateSectionHeader", TemplateSectionHeader.$type);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridEffectMainIntent_$type = /*@__PURE__*/ markEnum('GridEffectMainIntent', 'Default,0|Position,1|Opacity,2|Virtualization,3|Dimensions,4|Selection,5|DataChange,6|ColumnPropertyChange,7|Activation,8');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let GridEffectSubIntent_$type = /*@__PURE__*/ markEnum('GridEffectSubIntent', 'Default,0|Move,1|Show,2|Hide,3|Exchange,4|HeaderPropertyChange,5|HeaderSeparatorPropertyChange,6');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/**
 * Indicates a column that should be exchanged with another.
*/
class IgrColumnExchanger {
    createImplementation() {
        return new ColumnExchanger(0);
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    /**
     * The desired location of the new column
    */
    get targetIndex() {
        return this.i.b;
    }
    set targetIndex(v) {
        this.i.b = +v;
    }
    findByName(name) {
        return null;
    }
}

class IgrColumnExchangersCollection extends IgCollection {
    constructor(list) {
        super();
        if (!IgrColumnExchanger.$type) {
            IgrColumnExchanger.$type = markType(IgrColumnExchanger, "IgrColumnExchanger");
        }
        if (list) {
            for (let i = 0; i < list.length; i++) {
                this.add(list[i]);
            }
        }
    }
    _createInnerColl() {
        if (!IgrColumnExchanger.$type) {
            IgrColumnExchanger.$type = markType(IgrColumnExchanger, "IgrColumnExchanger");
        }
        let coll = new SyncableObservableCollection$2(IgrColumnExchanger.$type, ColumnExchanger.$type, 0);
        coll.compare = (ext, int) => {
            let comp = ext;
            if (comp._implementation) {
                comp = comp._implementation;
            }
            if (comp.equals) {
                return comp.equals(int);
            }
            return comp === int;
        };
        coll.createTo = (ext) => {
            return ext._implementation;
        };
        coll.createFrom = (int) => {
            let ext = int.externalObject;
            if (!ext) {
                ext = new IgrColumnExchanger();
                if (ext) {
                    ext._implementation = int;
                }
            }
            return ext;
        };
        return coll;
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/**
 * Indicates that a specified column should have a specified property set to a value.
*/
class IgrColumnPropertySetter {
    createImplementation() {
        return new ColumnPropertySetter(0);
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    /**
     * The name or key of the column to change the property of
    */
    get columnName() {
        return this.i.c;
    }
    set columnName(v) {
        this.i.c = v;
    }
    /**
     * The name of the property to change
    */
    get propertyName() {
        return this.i.d;
    }
    set propertyName(v) {
        this.i.d = v;
    }
    /**
     * The new value of the property
    */
    get value() {
        return this.i.b;
    }
    set value(v) {
        this.i.b = v;
    }
    findByName(name) {
        return null;
    }
}

class IgrColumnPropertySettersCollection extends IgCollection {
    constructor(list) {
        super();
        if (!IgrColumnPropertySetter.$type) {
            IgrColumnPropertySetter.$type = markType(IgrColumnPropertySetter, "IgrColumnPropertySetter");
        }
        if (list) {
            for (let i = 0; i < list.length; i++) {
                this.add(list[i]);
            }
        }
    }
    _createInnerColl() {
        if (!IgrColumnPropertySetter.$type) {
            IgrColumnPropertySetter.$type = markType(IgrColumnPropertySetter, "IgrColumnPropertySetter");
        }
        let coll = new SyncableObservableCollection$2(IgrColumnPropertySetter.$type, ColumnPropertySetter.$type, 0);
        coll.compare = (ext, int) => {
            let comp = ext;
            if (comp._implementation) {
                comp = comp._implementation;
            }
            if (comp.equals) {
                return comp.equals(int);
            }
            return comp === int;
        };
        coll.createTo = (ext) => {
            return ext._implementation;
        };
        coll.createFrom = (int) => {
            let ext = int.externalObject;
            if (!ext) {
                ext = new IgrColumnPropertySetter();
                if (ext) {
                    ext._implementation = int;
                }
            }
            return ext;
        };
        return coll;
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/**
 * Describes one phase of a responsive state to apply to the grid.
*/
class IgrResponsivePhase {
    createImplementation() {
        return new ResponsivePhase();
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    /**
     * The name of this responsive phase
    */
    get name() {
        return this.i.k;
    }
    set name(v) {
        this.i.k = v;
    }
    /**
     * The amount of time to delay the responsive phase from starting, in milliseconds
    */
    get delayMilliseconds() {
        return this.i.i;
    }
    set delayMilliseconds(v) {
        this.i.i = +v;
    }
    findByName(name) {
        return null;
    }
    /**
     * Adds a column property setter to the phase.
    
    * @param setter  * The setter to add.
    */
    addColumnPropertySetter(setter) {
        let iv = this.i.g((setter == null ? null : setter.i));
        return (iv == null ? null : iv.externalObject);
    }
    /**
     * Adds a column property setter to the phase, and returns it.
    
    */
    columnPropertySetter() {
        let iv = this.i.c();
        return (iv == null ? null : iv.externalObject);
    }
    /**
     * Adds a column exchanger the the phase.
    
    * @param exchanger  * The exchanger to add.
    */
    addColumnExchanger(exchanger) {
        let iv = this.i.f((exchanger == null ? null : exchanger.i));
        return (iv == null ? null : iv.externalObject);
    }
    /**
     * Adds a column exchanger to the phase and returns it.
    
    */
    columnExchanger() {
        let iv = this.i.h();
        return (iv == null ? null : iv.externalObject);
    }
}

class IgrResponsivePhasesCollection extends IgCollection {
    constructor(list) {
        super();
        if (!IgrResponsivePhase.$type) {
            IgrResponsivePhase.$type = markType(IgrResponsivePhase, "IgrResponsivePhase");
        }
        if (list) {
            for (let i = 0; i < list.length; i++) {
                this.add(list[i]);
            }
        }
    }
    _createInnerColl() {
        if (!IgrResponsivePhase.$type) {
            IgrResponsivePhase.$type = markType(IgrResponsivePhase, "IgrResponsivePhase");
        }
        let coll = new SyncableObservableCollection$2(IgrResponsivePhase.$type, ResponsivePhase.$type, 0);
        coll.compare = (ext, int) => {
            let comp = ext;
            if (comp._implementation) {
                comp = comp._implementation;
            }
            if (comp.equals) {
                return comp.equals(int);
            }
            return comp === int;
        };
        coll.createTo = (ext) => {
            return ext._implementation;
        };
        coll.createFrom = (int) => {
            let ext = int.externalObject;
            if (!ext) {
                ext = new IgrResponsivePhase();
                if (ext) {
                    ext._implementation = int;
                }
            }
            return ext;
        };
        return coll;
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let TemplateSectionHeaderCellModelExport = /*@__PURE__*/ (() => {
    class TemplateSectionHeaderCellModelExport extends SectionHeaderCellModelExport {
        get_ac() {
            return "TemplatSectionHeaderCell";
        }
        ad(a) {
            super.ad(a);
        }
    }
    TemplateSectionHeaderCellModelExport.$t = /*@__PURE__*/ markType(TemplateSectionHeaderCellModelExport, 'TemplateSectionHeaderCellModelExport', SectionHeaderCellModelExport.$);
    return TemplateSectionHeaderCellModelExport;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * Indicates the current operation underway for the cloned data source.
 */
var CloneDataSourceFilterOperation = /*@__PURE__*/ (function (CloneDataSourceFilterOperation) {
    CloneDataSourceFilterOperation[CloneDataSourceFilterOperation["None"] = 0] = "None";
    CloneDataSourceFilterOperation[CloneDataSourceFilterOperation["ValueToText"] = 1] = "ValueToText";
    CloneDataSourceFilterOperation[CloneDataSourceFilterOperation["TextToValue"] = 2] = "TextToValue";
    return CloneDataSourceFilterOperation;
})({});
/**
 * @hidden
 */
let CloneDataSourceFilterOperation_$type = /*@__PURE__*/ markEnum('CloneDataSourceFilterOperation', 'None,0|ValueToText,1|TextToValue,2');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * Indicates what type of operation is taking place when the selected row, value, or text in the combo box changes.
 */
var MultiColumnComboBoxSelectedItemChangeType = /*@__PURE__*/ (function (MultiColumnComboBoxSelectedItemChangeType) {
    MultiColumnComboBoxSelectedItemChangeType[MultiColumnComboBoxSelectedItemChangeType["Value"] = 0] = "Value";
    MultiColumnComboBoxSelectedItemChangeType[MultiColumnComboBoxSelectedItemChangeType["Text"] = 1] = "Text";
    MultiColumnComboBoxSelectedItemChangeType[MultiColumnComboBoxSelectedItemChangeType["Row"] = 2] = "Row";
    return MultiColumnComboBoxSelectedItemChangeType;
})({});
/**
 * @hidden
 */
let MultiColumnComboBoxSelectedItemChangeType_$type = /*@__PURE__*/ markEnum('MultiColumnComboBoxSelectedItemChangeType', 'Value,0|Text,1|Row,2');

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
/**
 * @hidden
 */
let DataGridToolbarView = /*@__PURE__*/ (() => {
    class DataGridToolbarView extends Base {
        constructor() {
            super();
            this.k = null;
            this.f = null;
            this.d = null;
            this.e = null;
            this.h = null;
            this.i = null;
            this.j = null;
            this.g = null;
            this.a = null;
            this.c = null;
            this.b = new List$1(Delegate_$type, 0);
        }
        s() {
        }
        p(a) {
            if (a == null) {
                this.c = null;
                return;
            }
            this.c = a;
            let b = Math.round(a.rootWrapper.width());
            let c = Math.round(a.rootWrapper.height());
            this.c.rootWrapper.setStyleProperty("position", "relative");
            this.c.rootWrapper.setStyleProperty("display", "flex");
            this.c.rootWrapper.setStyleProperty("justify-content", "space-between");
            this.c.rootWrapper.setStyleProperty("align-items", "center");
            this.c.rootWrapper.setStyleProperty("padding", "4px 16px 4px 16px");
            if (this.a.bb != null) {
                this.c.rootWrapper.setStyleProperty("background-color", this.a.bb._fill);
            }
            this.c.rootWrapper.setStyleProperty("border-width", "1px 1px 0px 1px");
            this.c.rootWrapper.setStyleProperty("border-style", "solid");
            this.c.rootWrapper.setStyleProperty("box-sizing", "border-box");
            this.c.rootWrapper.setStyleProperty("border-color", "rgba(0, 0, 0, 0.2)");
            this.c.rootWrapper.setStyleProperty("border-radius", "3px 3px 0px 0px");
            this.ac();
            this.k = this.c.rootWrapper.getChildAt(0);
            this.y();
            let d = this.c.rootWrapper.getChildAt(1);
            d.setStyleProperty("justify-content", "space-around");
            this.v();
            this.x();
        }
        ac() {
            if (this.c != null) {
                switch (this.a.i) {
                    case 1:
                        this.c.rootWrapper.setStyleProperty("height", "52px");
                        break;
                    case 2:
                        this.c.rootWrapper.setStyleProperty("height", "46px");
                        break;
                    case 3:
                        this.c.rootWrapper.setStyleProperty("height", "44px");
                        break;
                    case 0:
                        this.c.rootWrapper.setStyleProperty("height", "46px");
                        break;
                }
            }
        }
        z() {
            if (this.c != null) {
                if (this.a.bb != null) {
                    this.c.rootWrapper.setStyleProperty("background-color", this.a.bb._fill);
                }
            }
        }
        y() {
            if (this.k != null && this.a.ap != null) {
                this.k.setText(this.a.ap);
                this.k.setStyleProperty("font", "16px \"Segoe UI\", Verdana");
            }
            this.ag();
            this.ah();
        }
        ag() {
            if (this.k != null && this.a.bd != null) {
                this.k.setStyleProperty("color", this.a.bd._fill);
            }
        }
        ah() {
            if (this.k != null && this.a.m != null) {
                this.k.setStyleProperty("font", this.a.m.fontString);
            }
        }
        v() {
            if (this.c != null) {
                let a = this.c.rootWrapper.getChildAt(1);
                this.f = a.getChildAt(0);
                this.f.setProperty("id", "hideBtn");
                this.e = this.c.rootWrapper.getChildAt(2);
                this.w(this.e);
                this.e.setStyleProperty("height", "400px");
                this.e.setStyleProperty("width", "250px");
                let b = this.e.getChildAt(0);
                b.setStyleProperty("height", "calc(100% - 16px)");
                b.setStyleProperty("padding", "4px 16px 4px 16px");
                b.setStyleProperty("box-sizing", "border-box");
                if (this.a.p == true) {
                    if (this.a.j == null) {
                        this.d = this.c.createElement("div");
                        this.a.a2(this.c, this.f, this.d, "Hiding");
                        this.f.listen("click", runOn(this, this.n));
                    }
                    else {
                        this.f.show();
                    }
                }
                else {
                    this.f.hide();
                }
            }
        }
        ad() {
            if (this.d != null) {
                let a = this.d.getChildAt(1);
                a.setText(this.a.r.toString());
            }
        }
        aa() {
            if (this.d != null) {
                if (this.d.getChildCount() > 2) {
                    let a = this.d.getChildAt(2);
                    a.setText(this.a.ab.toString());
                }
                else {
                    let b = this.c.createElement("span");
                    b.setStyleProperty("display", "inline-block");
                    b.setStyleProperty("font-size", "14px");
                    b.setStyleProperty("font-weight", "600");
                    b.setText(this.a.ab);
                    this.d.append(b);
                }
            }
        }
        n(a) {
            if (this.e != null) {
                if (this.g == null || this.g != this.e) {
                    this.l();
                    let b = this.f.getOffset();
                    this.e.setOffset(b.left - this.e.width() + this.f.width(), b.top + this.f.height());
                    this.g = this.e;
                    this.t();
                }
                else {
                    this.l();
                }
            }
            a.stopPropagation();
        }
        x() {
            if (this.c != null) {
                let a = this.c.rootWrapper.getChildAt(1);
                this.h = a.getChildAt(1);
                this.h.setProperty("id", "pinBtn");
                this.j = this.c.rootWrapper.getChildAt(3);
                this.w(this.j);
                this.j.setStyleProperty("height", "400px");
                this.j.setStyleProperty("width", "250px");
                let b = this.j.getChildAt(0);
                b.setStyleProperty("height", "calc(100% - 16px)");
                b.setStyleProperty("padding", "8px 16px 8px 16px");
                b.setStyleProperty("box-sizing", "border-box");
                if (this.a.q == true) {
                    if (this.a.k == null) {
                        this.i = this.c.createElement("div");
                        this.a.a2(this.c, this.h, this.i, "Pinning");
                        this.h.listen("click", runOn(this, this.u));
                    }
                    else {
                        this.h.show();
                    }
                }
                else {
                    this.h.hide();
                }
            }
        }
        ae() {
            if (this.i != null) {
                let a = this.i.getChildAt(1);
                a.setText(this.a.s.toString());
            }
        }
        af() {
            if (this.i != null) {
                if (this.i.getChildCount() > 2) {
                    let a = this.i.getChildAt(2);
                    a.setText(this.a.ag);
                }
                else {
                    let b = this.c.createElement("span");
                    b.setStyleProperty("display", "inline-block");
                    b.setStyleProperty("font-size", "14px");
                    b.setStyleProperty("font-weight", "600");
                    b.setText(this.a.ag);
                    this.i.append(b);
                }
            }
        }
        u(a) {
            if (this.j != null) {
                if (this.g == null || this.g != this.j) {
                    this.l();
                    let b = this.h.getOffset();
                    this.j.setOffset(b.left - this.j.width() + this.h.width(), b.top + this.h.height());
                    this.g = this.j;
                    this.t();
                }
                else {
                    this.l();
                }
            }
            a.stopPropagation();
        }
        w(a) {
            let b = ElevationHelper$1.e(12, BrushUtil.g(66, 0, 0, 0), BrushUtil.g(30, 0, 0, 0), BrushUtil.g(20, 0, 0, 0), 1);
            a.setStyleProperty("boxShadow", b);
            a.setStyleProperty("background-color", this.a.bc._fill);
            a.setStyleProperty("position", "absolute");
            a.setStyleProperty("z-index", "12000");
            a.setStyleProperty("display", "none");
        }
        ab() {
            if (this.j != null) {
                this.j.setStyleProperty("background-color", this.a.bc._fill);
            }
            if (this.e != null) {
                this.e.setStyleProperty("background-color", this.a.bc._fill);
            }
        }
        t() {
            if (this.g != null) {
                this.b.add(this.c.globalListen("document", "keydown", runOn(this, this.q)));
                this.b.add(this.c.globalListen("document", "click", runOn(this, this.r)));
                this.g.show();
                this.g.listen("click", runOn(this, this.m));
            }
        }
        l() {
            if (this.g != null) {
                for (let a = 0; a < this.b.count; a++) {
                    this.b._inner[a]();
                }
                this.b.clear();
                this.g.unlistenAll();
                this.g.hide();
                this.g = null;
            }
        }
        m(a) {
            a.stopPropagation();
        }
        q(a) {
            if (BaseDOMEventProxy.cu(a) == 8) {
                this.a.at();
            }
        }
        r(a) {
            this.a.at();
        }
        o() {
        }
    }
    DataGridToolbarView.$t = /*@__PURE__*/ markType(DataGridToolbarView, 'DataGridToolbarView');
    return DataGridToolbarView;
})();
/**
 * @hidden
 */
let DataGridToolbar = /*@__PURE__*/ (() => {
    class DataGridToolbar extends Base {
        constructor() {
            super();
            this.e = null;
            this.c = null;
            this.d = null;
            this.r = 0;
            this.s = 0;
            this.j = null;
            this.k = null;
            this.propertyChanged = null;
            this.a = null;
            this.x = null;
            this.l = null;
            this.ba = BrushUtil.g(255, 24, 29, 31);
            this.a8 = BrushUtil.g(255, 248, 248, 248);
            this.a9 = BrushUtil.g(255, 248, 248, 248);
            this.n = false;
            this.t = null;
            this.u = null;
            this.o = false;
            this.v = null;
            this.w = null;
            this.h = 2;
            this.f = 1;
            this.r = 0;
            this.s = 0;
            let a = new DataGridToolbarView();
            a.a = this;
            this.e = a;
            this.e.s();
        }
        notifySizeChanged() {
            this.e.o();
        }
        destroy() {
            this.provideContainer(null, null, null);
            if (this.b != null) {
                let a = this.b;
                a.columnHiddenChanged = delegateRemove(a.columnHiddenChanged, runOn(this, this.a6));
                let b = this.b;
                b.columnPinnedChanged = delegateRemove(b.columnPinnedChanged, runOn(this, this.a7));
            }
        }
        provideContainer(a, b, c) {
            this.c = b;
            this.d = c;
            this.a3();
            this.a4();
            this.e.p(a);
        }
        get b() {
            return this.a;
        }
        set b(a) {
            let b = this.a;
            this.a = a;
            if (b != this.a) {
                this.ax("TargetGrid", b, this.a);
            }
        }
        get ap() {
            return this.x;
        }
        set ap(a) {
            let b = this.x;
            this.x = a;
            if (b != this.x) {
                this.ax("ToolbarTitle", b, this.x);
            }
        }
        get m() {
            return this.l;
        }
        set m(a) {
            let b = this.l;
            this.l = a;
            if (b != this.l) {
                this.ax("ToolbarTitleStyle", b, this.l);
            }
        }
        get bd() {
            return this.ba;
        }
        set bd(a) {
            let b = this.ba;
            this.ba = a;
            if (b != this.ba) {
                this.ax("ToolbarTitleColor", b, this.ba);
            }
        }
        get bb() {
            return this.a8;
        }
        set bb(a) {
            let b = this.a8;
            this.a8 = a;
            if (b != this.a8) {
                this.ax("BackgroundColor", b, this.a8);
            }
        }
        get bc() {
            return this.a9;
        }
        set bc(a) {
            let b = this.a9;
            this.a9 = a;
            if (b != this.a9) {
                this.ax("DialogBackgroundColor", b, this.a9);
            }
        }
        get p() {
            return this.n;
        }
        set p(a) {
            let b = this.n;
            this.n = a;
            if (b != this.n) {
                this.ax("ColumnChooser", b, this.n);
            }
        }
        get ab() {
            return this.t;
        }
        set ab(a) {
            let b = this.t;
            this.t = a;
            if (b != this.t) {
                this.ax("ColumnChooserText", b, this.t);
            }
        }
        get ad() {
            return this.u;
        }
        set ad(a) {
            let b = this.u;
            this.u = a;
            if (b != this.u) {
                this.ax("ColumnChooserTitle", b, this.u);
            }
        }
        get q() {
            return this.o;
        }
        set q(a) {
            let b = this.o;
            this.o = a;
            if (b != this.o) {
                this.ax("ColumnPinning", b, this.o);
            }
        }
        get ag() {
            return this.v;
        }
        set ag(a) {
            let b = this.v;
            this.v = a;
            if (b != this.v) {
                this.ax("ColumnPinningText", b, this.v);
            }
        }
        get ai() {
            return this.w;
        }
        set ai(a) {
            let b = this.w;
            this.w = a;
            if (b != this.w) {
                this.ax("ColumnPinningTitle", b, this.w);
            }
        }
        get i() {
            return this.h;
        }
        set i(a) {
            let b = this.h;
            this.h = a;
            if (b != this.h) {
                this.ax("Density", enumGetBox(ControlDisplayDensity_$type, b), enumGetBox(ControlDisplayDensity_$type, this.h));
            }
        }
        get g() {
            return this.f;
        }
        set g(a) {
            let b = this.f;
            this.f = a;
            if (b != this.f) {
                this.ax("BaseTheme", enumGetBox(BaseControlTheme_$type, b), enumGetBox(BaseControlTheme_$type, this.f));
            }
        }
        ax(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            this.ay(a, b, c);
        }
        ay(a, b, c) {
            switch (a) {
                case "TargetGrid":
                    this.a3();
                    this.a4();
                    this.a5();
                    this.e.ac();
                    break;
                case "ToolbarTitle":
                    this.e.y();
                    break;
                case "ToolbarTitleStyle":
                    this.e.ah();
                    break;
                case "ToolbarTitleColor":
                    this.e.ag();
                    break;
                case "BackgroundColor":
                    this.e.z();
                    break;
                case "DialogBackgroundColor":
                    this.e.ab();
                    if (this.c != null) {
                        this.c.ao = this.bc;
                    }
                    if (this.d != null) {
                        this.d.al = this.bc;
                    }
                    break;
                case "ColumnChooser":
                    this.a3();
                    this.e.v();
                    break;
                case "ColumnChooserText":
                    this.e.aa();
                    break;
                case "ColumnChooserTitle":
                    if (this.c != null) {
                        this.c.t = this.ad;
                    }
                    break;
                case "ColumnPinning":
                    this.a4();
                    this.e.x();
                    break;
                case "ColumnPinningText":
                    this.e.af();
                    break;
                case "ColumnPinningTitle":
                    if (this.d != null) {
                        this.d.t = this.ai;
                    }
                    break;
                case "Density":
                    this.a0();
                    break;
                case "BaseTheme":
                    this.a1();
                    break;
            }
        }
        a1() {
            if (this.c != null) {
                this.c.e = this.g;
            }
            if (this.d != null) {
                this.d.e = this.g;
            }
            if (this.j != null) {
                this.j.d = this.g;
            }
            if (this.k != null) {
                this.k.d = this.g;
            }
        }
        a0() {
            if (this.i == 0) {
                if (this.b != null) {
                    this.i = this.b.fg;
                }
            }
            if (this.j != null) {
                this.j.h = this.i;
            }
            if (this.k != null) {
                this.k.h = this.i;
            }
            if (this.c != null) {
                this.c.g = this.i;
            }
            if (this.d != null) {
                this.d.g = this.i;
            }
            this.e.ac();
        }
        a2(a, b, c, d) {
            let e = new Button();
            let f = a.getSubRenderer(b);
            e.provideContainer(f);
            e.d = this.g;
            e.h = this.i;
            let g = null;
            let h = null;
            let i = null;
            switch (d) {
                case "Hiding":
                    this.j = e;
                    g = DataGridToolbar.am;
                    h = this.r.toString();
                    if (this.ab != null) {
                        i = this.ab;
                    }
                    break;
                case "Pinning":
                    this.k = e;
                    g = DataGridToolbar.an;
                    h = this.s.toString();
                    if (this.ag != null) {
                        i = this.ag;
                    }
                    break;
            }
            e.s = 2;
            b.setStyleProperty("display", "inline-block");
            b.setStyleProperty("margin-left", "10px");
            c.setStyleProperty("display", "flex");
            c.setStyleProperty("flexDirection", "row");
            c.setStyleProperty("flexWrap", "no-wrap");
            c.setStyleProperty("align-items", "center");
            let j = a.createElement("div");
            j.setStyleProperty("display", "inline-block");
            j.setStyleProperty("margin-right", "5px");
            let k = a.getSubRenderer(j);
            let l = new Icon();
            l.provideContainer(k);
            l.svgPath = g;
            c.append(j);
            let m = a.createElement("span");
            m.setStyleProperty("display", "inline-block");
            m.setStyleProperty("font-size", "12px");
            m.setStyleProperty("font-weight", "600");
            m.setStyleProperty("margin-right", "5px");
            m.setText(h);
            c.append(m);
            if (i != null) {
                let n = a.createElement("span");
                n.setStyleProperty("display", "inline-block");
                n.setStyleProperty("font-size", "12px");
                n.setStyleProperty("font-weight", "600");
                n.setText(i);
                c.append(n);
            }
            e.appendButtonContent(c);
        }
        at() {
            this.e.l();
        }
        a3() {
            if (this.p && this.c != null && this.b != null) {
                if (this.ad != null) {
                    this.c.t = this.ad;
                }
                this.c.b = this.b;
                this.c.e = this.g;
                this.c.ao = this.bc;
                this.c.al(new Thickness(1, -16, 3, -16, 3));
            }
        }
        a4() {
            if (this.q && this.d != null && this.b != null) {
                if (this.ai != null) {
                    this.d.t = this.ai;
                }
                this.d.b = this.b;
                this.d.e = this.g;
                this.d.al = this.bc;
                this.d.ai(new Thickness(1, -16, 3, -16, 3));
            }
        }
        a5() {
            if (this.b != null) {
                let a = this.b;
                a.columnHiddenChanged = delegateCombine(a.columnHiddenChanged, runOn(this, this.a6));
                let b = this.b;
                b.columnPinnedChanged = delegateCombine(b.columnPinnedChanged, runOn(this, this.a7));
                this.av();
            }
        }
        av() {
            if (this.b != null) {
                let a = this.b.actualColumns.count;
                this.r = 0;
                this.s = 0;
                for (let b = 0; b < a; b++) {
                    if (this.b.actualColumns._inner[b].gd == true) {
                        this.r++;
                    }
                    if (this.b.actualColumns._inner[b].fk == 1) {
                        this.s++;
                    }
                }
            }
            this.e.ad();
            this.e.ae();
        }
        a6(a, b) {
            this.av();
        }
        a7(a, b) {
            this.av();
        }
    }
    DataGridToolbar.$t = /*@__PURE__*/ markType(DataGridToolbar, 'DataGridToolbar', Base.$, [INotifyPropertyChanged_$type]);
    DataGridToolbar.am = "M12 7c2.76 0 5 2.24 5 5 0 .65-.13 1.26-.36 1.83l2.92 2.92c1.51-1.26 2.7-2.89 3.43-4.75-1.73-4.39-6-7.5-11-7.5-1.4 0-2.74.25-3.98.7l2.16 2.16C10.74 7.13 11.35 7 12 7zM2 4.27l2.28 2.28.46.46C3.08 8.3 1.78 10.02 1 12c1.73 4.39 6 7.5 11 7.5 1.55 0 3.03-.3 4.38-.84l.42.42L19.73 22 21 20.73 3.27 3 2 4.27zM7.53 9.8l1.55 1.55c-.05.21-.08.43-.08.65 0 1.66 1.34 3 3 3 .22 0 .44-.03.65-.08l1.55 1.55c-.67.33-1.41.53-2.2.53-2.76 0-5-2.24-5-5 0-.79.2-1.53.53-2.2zm4.31-.78l3.15 3.15.02-.16c0-1.66-1.34-3-3-3l-.17.01z";
    DataGridToolbar.an = "M13.2,3.8l7.1,7.1l-2.8-0.1l-3.4,3.4l0.1,4.2l-3.5-3.5l-5.4,5.4l-1.4,0l0-1.4l5.4-5.4L5.7,9.8l4.2,0.1l3.4-3.4L13.2,3.8z";
    return DataGridToolbar;
})();

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

class IgrDataGridToolbar extends Component {
    constructor(props) {
        super(props);
        this._implementation = null;
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._getMainRef = this._getMainRef.bind(this);
        this._getColumnChooserRef = this._getColumnChooserRef.bind(this);
        this._getColumnPinningRef = this._getColumnPinningRef.bind(this);
        this._implementation = this.createImplementation();
        var toolbar = this.i;
        this._toolbar = toolbar;
        toolbar.notifySizeChanged();
        if (props) {
            this.initializeProperties();
        }
    }
    set height(value) {
        this._height = value;
        if (this._elRef) {
            this._elRef.style.height = value;
            this._toolbar.notifySizeChanged();
        }
    }
    get height() {
        return this._height;
    }
    set width(value) {
        this._width = value;
        if (this._elRef) {
            this._elRef.style.height = value;
            this._toolbar.notifySizeChanged();
        }
    }
    get width() {
        return this._width;
    }
    _getMainRef(ref) {
        this._elRef = ref;
        if (this._elRef != null && this._columnChooserRef != null && this._columnPinningRef != null) {
            this._renderer = new ReactRenderer(this._elRef, document, false, null);
            this._toolbar.provideContainer(this._renderer, this._columnChooserRef.i, this._columnPinningRef.i);
        }
    }
    _getColumnChooserRef(ref) {
        this._columnChooserRef = ref;
        if (this._elRef != null && this._columnChooserRef != null && this._columnPinningRef != null) {
            this._renderer = new ReactRenderer(this._elRef, document, false, null);
            this._toolbar.provideContainer(this._renderer, this._columnChooserRef.i, this._columnPinningRef.i);
        }
    }
    _getColumnPinningRef(ref) {
        this._columnPinningRef = ref;
        if (this._elRef != null && this._columnChooserRef != null && this._columnPinningRef != null) {
            this._renderer = new ReactRenderer(this._elRef, document, false, null);
            this._toolbar.provideContainer(this._renderer, this._columnChooserRef.i, this._columnPinningRef.i);
        }
    }
    render() {
        let children = [];
        let title = createElement("span", {
            key: "titleSpan"
        });
        children.push(title);
        let buttons = [];
        let hideBtnContainer = createElement("div", {
            key: "hideBtnContainer"
        });
        buttons.push(hideBtnContainer);
        let pinBtnContainer = createElement("div", {
            key: "pinBtnContainer"
        });
        buttons.push(pinBtnContainer);
        /*let exportInput = React.createElement("input", {
            key: "exportInput",
            type: "Button"
        });
        buttons.push(exportInput);*/
        let buttonsContainer = createElement("div", {
            key: "buttonsContainer",
            children: buttons
        });
        children.push(buttonsContainer);
        let chooserDialogChildren = [];
        let chooserDialog = createElement("div", {
            key: "chooserDialog",
            children: chooserDialogChildren
        });
        children.push(chooserDialog);
        let columnChooser = createElement(IgrColumnChooser, {
            ref: this._getColumnChooserRef,
            key: "columnChooser"
        });
        chooserDialogChildren.push(columnChooser);
        let pinningChildren = [];
        let pinningDialog = createElement("div", {
            key: "pinningDialog",
            children: pinningChildren,
        });
        children.push(pinningDialog);
        let columnPinning = createElement(IgrColumnPinning, {
            ref: this._getColumnPinningRef,
            key: "columnPinning"
        });
        pinningChildren.push(columnPinning);
        /*let exportChildren: any[] = [];
        let exportDialog = React.createElement("div", {
            key: "exportDialog",
            children: exportChildren,
            style: {
                background: "white",
                display: "none",
                position: "absolute",
                zIndex: 12000,
                borderWidth: "1px",
                borderStyle: "solid"
            }
        });
        children.push(exportDialog);

        let exportExcel = React.createElement("input", {
            key: "exportExcel",
            type: "Button"
        });
        exportChildren.push(exportExcel);

        let exportCsv = React.createElement("input", {
            key: "exportCsv",
            type: "Button"
        });
        exportChildren.push(exportCsv);*/
        let div = createElement("div", {
            className: "ig-data-grid-toolbar igr-data-grid-toolbar",
            ref: this._getMainRef,
            children: children
        });
        return div;
    }
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    initializeProperties() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    // supports angular themes or custom properties set in CSS
    updateStyle() {
        this._styling(this._elRef, this);
    }
    componentWillUnmount() {
        this._toolbar.destroy();
        if (this._renderer) {
            this._renderer.destroy();
        }
    }
    componentDidMount() {
        this._elRef.style.width = this._width ? this._width : "";
        this._elRef.style.height = this._height ? this._height : "";
        this._toolbar.notifySizeChanged();
        this.initializeContent();
    }
    initializeContent() {
        this.updateStyle();
        this.i.notifySizeChanged();
    }
    createImplementation() {
        return new DataGridToolbar();
    }
    get i() {
        return this._implementation;
    }
    /**
 * Gets or Sets the property name that contains the values.
*/
    get targetGrid() {
        if (this.i.b == null) {
            return null;
        }
        return this.i.b.externalObject;
    }
    set targetGrid(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.b = null : this.i.b = v.i;
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get toolbarTitle() {
        return this.i.ap;
    }
    set toolbarTitle(v) {
        this.i.ap = v;
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get toolbarTitleStyle() {
        if (this.i.m == null) {
            return null;
        }
        return this.i.m.fontString;
    }
    set toolbarTitleStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.m = fi;
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get toolbarTitleColor() {
        return brushToString(this.i.bd);
    }
    set toolbarTitleColor(v) {
        this.i.bd = stringToBrush(v);
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get backgroundColor() {
        return brushToString(this.i.bb);
    }
    set backgroundColor(v) {
        this.i.bb = stringToBrush(v);
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get dialogBackgroundColor() {
        return brushToString(this.i.bc);
    }
    set dialogBackgroundColor(v) {
        this.i.bc = stringToBrush(v);
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get columnChooser() {
        return this.i.p;
    }
    set columnChooser(v) {
        this.i.p = ensureBool(v);
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get columnChooserText() {
        return this.i.ab;
    }
    set columnChooserText(v) {
        this.i.ab = v;
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get columnChooserTitle() {
        return this.i.ad;
    }
    set columnChooserTitle(v) {
        this.i.ad = v;
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get columnPinning() {
        return this.i.q;
    }
    set columnPinning(v) {
        this.i.q = ensureBool(v);
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get columnPinningText() {
        return this.i.ag;
    }
    set columnPinningText(v) {
        this.i.ag = v;
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get columnPinningTitle() {
        return this.i.ai;
    }
    set columnPinningTitle(v) {
        this.i.ai = v;
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get density() {
        return this.i.i;
    }
    set density(v) {
        this.i.i = ensureEnum(ControlDisplayDensity_$type, v);
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get baseTheme() {
        return this.i.g;
    }
    set baseTheme(v) {
        this.i.g = ensureEnum(BaseControlTheme_$type, v);
    }
    findByName(name) {
        if (this.targetGrid && this.targetGrid.name && this.targetGrid.name == name) {
            return this.targetGrid;
        }
        return null;
    }
    get hasUserValues() {
        return this._hasUserValues;
    }
    __m(propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    }
    _styling(container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        let genericPrefix = "";
        let typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("DataGridToolbar");
        let additionalPrefixes = [];
        let prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        let b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            let basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            let parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            let parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this.targetGrid && this.targetGrid._styling) {
            this.targetGrid._styling(container, component, this);
        }
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE: you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
class IgrDataGridToolbarModule {
    static register() {
        IgrColumnChooserModule.register();
        IgrColumnPinningModule.register();
        IgrButtonModule.register();
        IgrIconModule.register();
        TypeRegistrar.registerCons('IgrDataGridToolbar', IgrDataGridToolbar);
        TypeRegistrar.registerCons('IgrDataGridToolbar', IgrDataGridToolbar);
        TypeRegistrar.register('DataGridToolbar', DataGridToolbar.$type);
    }
}

/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/

export { AccessibilityRow, ActivationManager, BrowserExecutionContext, BrowserPixelConverter, BrowserTickProvider, CalculationParameters, CanvasCellPresenterBase, CanvasContentCellModelHelper, CanvasDateTimeCell, CanvasDateTimeCellPresenter, CanvasGridCellBase, CanvasImageCell, CanvasImageCellPresenter, CanvasNumericCell, CanvasNumericCellPresenter, CanvasPlaceholderView, CanvasRowSeparatorCell, CanvasRowSeparatorCellPresenter, CanvasSectionHeaderCell, CanvasSectionHeaderCellPresenter, CanvasSummaryCell, CanvasSummaryCellPresenter, CanvasTemplateCell, CanvasTemplateCellContainer, CanvasTemplateCellPresenter, CanvasTemplateHeaderCell, CanvasTemplateHeaderCellPresenter, CanvasTextCell, CanvasTextCellPresenter, CanvasTextHeaderCell, CanvasTextHeaderCellPresenter, CanvasVerticalSeparatorCell, CanvasVerticalSeparatorCellPresenter, CellContentHorizontalAlignment, CellContentHorizontalAlignment_$type, CellContentVerticalAlignment, CellContentVerticalAlignment_$type, CellDataLoadedAnimationMode, CellDataLoadedAnimationMode_$type, CellEffect, CellKey, CellModel, CellModelExport, CellPath, CellPositionEffect, CellPresenterBase, CellPropertyAnimationType, CellPropertyAnimationType_$type, CellRange, CellSelectionAnimationMode, CellSelectionAnimationMode_$type, CellStyleRequestedEventArgs, CheckboxList, CheckboxListIndexType, CheckboxListIndexType_$type, CheckboxListView, CheckedChangedEventArgs, CloneDataSourceFilterOperation, CloneDataSourceFilterOperation_$type, Column, ColumnCellsEffect, ColumnChooser, ColumnChooserInfo, ColumnChooserView, ColumnComparisonConditionOperatorType, ColumnComparisonConditionOperatorType_$type, ColumnComparisonFilterCondition, ColumnController, ColumnEffect, ColumnExchanger, ColumnExchangersCollection, ColumnExchangingAnimationMode, ColumnExchangingAnimationMode_$type, ColumnFilterCondition, ColumnFilterConditionCollection, ColumnFilterConditionGroup, ColumnGroupDescription, ColumnGroupDescriptionCollection, ColumnHiddenChangedEventArgs, ColumnHidingAnimationMode, ColumnHidingAnimationMode_$type, ColumnInfo, ColumnMovingAnimationMode, ColumnMovingAnimationMode_$type, ColumnMovingMode, ColumnMovingMode_$type, ColumnMovingSeparator, ColumnOptionsIconAlignment, ColumnOptionsIconAlignment_$type, ColumnOptionsIconBehavior, ColumnOptionsIconBehavior_$type, ColumnPinnedChangedEventArgs, ColumnPinning, ColumnPinningInfo, ColumnPinningView, ColumnPropertySetter, ColumnPropertySettersCollection, ColumnPropertyUpdatingAnimationMode, ColumnPropertyUpdatingAnimationMode_$type, ColumnResizingAnimationMode, ColumnResizingAnimationMode_$type, ColumnResizingMode, ColumnResizingMode_$type, ColumnResizingSeparator, ColumnShowingAnimationMode, ColumnShowingAnimationMode_$type, ColumnSortDescription, ColumnSortDescriptionCollection, ColumnSortDirection, ColumnSortDirection_$type, ColumnStates_$type, ColumnSummaryDescription, ColumnSummaryDescriptionCollection, ColumnWidth, ComboBoxColumn, ContentCellModelHelper, CurrentRendererSettings, DataAdapter, DataBindingEventArgs, DataGridAccessibilityLayoutPanel, DataGridCellLayoutPanel, DataGridDelayedExecutionManager, DataGridPresenterManager, DataGridPropertySetter, DataGridScrollerKeyboardListener, DataGridStylingDefaults, DataGridToolbar, DataGridToolbarView, DataGridViewportManager, DataSourceNotificationBridge, DateTimeCell, DateTimeCellModel, DateTimeCellModelExport, DateTimeCellPresenter, DateTimeColumn, DateTimeColumnValueFormatter, DateTimeFormats, DateTimeFormats_$type, DefaultCellActionManager, DefaultGridInfoRequestor, DefaultPlatformPixelConverter, DefinitionBase, DefinitionPropertyUpdatedEventArgs, DragSelectEventArgs, DragType_$type, Dragger, DraggerView, EditModeClickAction, EditModeClickAction_$type, EditModeType, EditModeType_$type, EditingManager, EditorCell, EditorCellModel, EditorCellModelExport, EditorCellPresenter, EditorCell_ComboExternal_$type, EditorRowCell, EditorRowCellModel, EditorRowCellPresenter, EditorType, EditorType_$type, FilterApplyButtonClickEventArgs, FilterCancelButtonClickEventArgs, FilterDialogRenderCompletedEventArgs, FixedCellPositions_$type, FormatGroupTextEventArgs, FormatSummaryTextEventArgs, GotFocusEventArgs, Grid, GridActivationMode, GridActivationMode_$type, GridActiveCellChangedEventArgs, GridAnimationManager, GridAnimationManagerAnimationCanceledEventArgs, GridAnimationManagerAnimationCompletedEventArgs, GridAnimationManagerAnimationCreatedEventArgs, GridAnimationPhaseSettings, GridAnimationSettings, GridCellBase, GridCellEditEndedEventArgs, GridCellEditStartedEventArgs, GridCellEventArgs, GridCellPosition, GridCellValueChangingEventArgs, GridColumnAnimationSettings, GridColumnCollection, GridColumnFilterOptions, GridColumnFilterOptionsView, GridColumnGroupOptions, GridColumnGroupOptionsView, GridColumnHideOptions, GridColumnHideOptionsView, GridColumnMoveOptions, GridColumnMoveOptionsView, GridColumnOptions, GridColumnOptionsBase, GridColumnOptionsSectionBase, GridColumnOptionsSimpleSectionBase, GridColumnOptionsUtilities, GridColumnOptionsView, GridColumnOptionsViewBase, GridColumnPinOptions, GridColumnPinOptionsView, GridColumnSortOptions, GridColumnSortOptionsView, GridColumnSpacer, GridColumnSpacerCollection, GridColumnWidthChangedEventArgs, GridColumnsAutoGeneratedEventArgs, GridColumnsChangedEventArgs, GridDataCommittedEventArgs, GridDataCommittingEventArgs, GridEasingFunctionType, GridEasingFunctionType_$type, GridEffect, GridEffectGroup, GridEffectMainIntent_$type, GridEffectManager, GridEffectSubIntent_$type, GridExpansionIndicator, GridExpansionIndicatorView, GridExternalWrapper, GridFilterDialog, GridFilterDialogFilterChangeEventArgs, GridFilterDialogOpeningEventArgs, GridFilterDialogPanel, GridFilterDialogView, GridFilterDialogViewModel, GridFilterDialogViewModelGrouping, GridFilterDialogViewModelGroupingLevel, GridFilterDialogViewModelGroupingLevelCollection, GridFilterDialogViewModelRow, GridFilterDialogViewModelRowCollection, GridFilterExpressionsEventArgs, GridGroupDescriptionsChangedEventArgs, GridLayer, GridLayerController, GridLayerExport, GridRowEditEndedEventArgs, GridRowEditStartedEventArgs, GridSelectedCellRangesChangedEventArgs, GridSelectedCellRangesCollection, GridSelectedCellsChangedEventArgs, GridSelectedCellsCollection, GridSelectedItemsChangedEventArgs, GridSelectedItemsCollection, GridSelectedKeysChangedEventArgs, GridSelectedKeysCollection, GridSelectionBehavior, GridSelectionBehavior_$type, GridSelectionMode, GridSelectionMode_$type, GridSizeChangedEventArgs, GridSortDescriptionsChangedEventArgs, GridSortIndicator, GridSortIndicatorView, GridStyleRepository, GridViewportChangedEventArgs, GroupData, GroupSummaryDisplayMode, GroupSummaryDisplayMode_$type, Header, HeaderClickAction, HeaderClickAction_$type, HeaderRowSeparator, HeaderSeparator, HoverManager, ICellActionManager_$type, ICellPresenter_$type, ICellRenderingEngine_$type, IDataAdapter_$type, IDelayedExecutionManager_$type, IDraggerView_$type, IDragger_$type, IExternalDefinitionBase_$type, IExternalGrid_$type, IExternalTemplateColumn_$type, IExternalTemplateHeaderColumn_$type, IExternalTemplateSectionHeader_$type, IGridInfoRequestor_$type, INativeCell_$type, IPlatformPixelConverter_$type, IPropertySetter_$type, IViewportManager_$type, IgrCellInfo, IgrCellKey, IgrCellKeyModule, IgrCellRange, IgrCellRangeModule, IgrCellStyleRequestedEventArgs, IgrCheckboxList, IgrCheckboxListModule, IgrCheckedChangedEventArgs, IgrColumn, IgrColumnChooser, IgrColumnChooserModule, IgrColumnExchanger, IgrColumnExchangersCollection, IgrColumnGroupDescription, IgrColumnGroupDescriptionCollection, IgrColumnGroupDescriptionModule, IgrColumnHiddenChangedEventArgs, IgrColumnMovingSeparator, IgrColumnMovingSeparatorModule, IgrColumnPinnedChangedEventArgs, IgrColumnPinning, IgrColumnPinningModule, IgrColumnPropertySetter, IgrColumnPropertySettersCollection, IgrColumnResizingSeparator, IgrColumnResizingSeparatorModule, IgrColumnSortDescription, IgrColumnSortDescriptionCollection, IgrColumnSortDescriptionModule, IgrColumnSummaryDescription, IgrColumnSummaryDescriptionCollection, IgrColumnSummaryDescriptionModule, IgrColumnWidth, IgrColumnWidthModule, IgrComboBoxColumn, IgrComboBoxColumnModule, IgrDataBindingEventArgs, IgrDataGrid, IgrDataGridAllColumnsModule, IgrDataGridCoreModule, IgrDataGridExpansionIndicator, IgrDataGridFilterDialog, IgrDataGridModule, IgrDataGridSortIndicator, IgrDataGridToolbar, IgrDataGridToolbarModule, IgrDateTimeCellInfo, IgrDateTimeColumn, IgrDateTimeColumnModule, IgrDefinitionBase, IgrEditorCellInfo, IgrEditorRowCellInfo, IgrFilterApplyButtonClickEventArgs, IgrFilterCancelButtonClickEventArgs, IgrFilterDialogRenderCompletedEventArgs, IgrFormatGroupTextEventArgs, IgrFormatSummaryTextEventArgs, IgrGotFocusEventArgs, IgrGridActiveCellChangedEventArgs, IgrGridAnimationPhaseSettings, IgrGridAnimationSettings, IgrGridCellEditEndedEventArgs, IgrGridCellEditStartedEventArgs, IgrGridCellEventArgs, IgrGridCellPosition, IgrGridCellPositionModule, IgrGridCellValueChangingEventArgs, IgrGridColumnAnimationSettings, IgrGridColumnCollection, IgrGridColumnFilterOptions, IgrGridColumnFilterOptionsModule, IgrGridColumnGroupOptions, IgrGridColumnGroupOptionsModule, IgrGridColumnHideOptions, IgrGridColumnHideOptionsModule, IgrGridColumnMoveOptions, IgrGridColumnMoveOptionsModule, IgrGridColumnOptions, IgrGridColumnOptionsBase, IgrGridColumnOptionsModule, IgrGridColumnOptionsSectionBase, IgrGridColumnOptionsSimpleSectionBase, IgrGridColumnPinOptions, IgrGridColumnPinOptionsModule, IgrGridColumnSortOptions, IgrGridColumnSortOptionsModule, IgrGridColumnWidthChangedEventArgs, IgrGridColumnsAutoGeneratedEventArgs, IgrGridColumnsChangedEventArgs, IgrGridDataCommittedEventArgs, IgrGridDataCommittingEventArgs, IgrGridFilterDialogFilterChangeEventArgs, IgrGridFilterDialogOpeningEventArgs, IgrGridFilterDialogViewModel, IgrGridFilterDialogViewModelGrouping, IgrGridFilterDialogViewModelGroupingLevel, IgrGridFilterDialogViewModelGroupingLevelCollection, IgrGridFilterDialogViewModelRow, IgrGridFilterDialogViewModelRowCollection, IgrGridFilterExpressionsEventArgs, IgrGridGroupDescriptionsChangedEventArgs, IgrGridRowEditEndedEventArgs, IgrGridRowEditStartedEventArgs, IgrGridSelectedCellRangesChangedEventArgs, IgrGridSelectedCellRangesCollection, IgrGridSelectedCellsChangedEventArgs, IgrGridSelectedCellsCollection, IgrGridSelectedItemsChangedEventArgs, IgrGridSelectedItemsCollection, IgrGridSelectedKeysChangedEventArgs, IgrGridSelectedKeysCollection, IgrGridSizeChangedEventArgs, IgrGridSortDescriptionsChangedEventArgs, IgrGroupData, IgrHeader, IgrHeaderRowSeparator, IgrHeaderRowSeparatorModule, IgrHeaderSeparator, IgrHeaderSeparatorModule, IgrImageCellInfo, IgrImageColumn, IgrImageColumnModule, IgrLostFocusEventArgs, IgrMultiColumnComboBox, IgrMultiColumnComboBoxModule, IgrMultiColumnComboBoxTextChangedEventArgs, IgrMultiColumnComboBoxValueChangedEventArgs, IgrNumericCellInfo, IgrNumericColumn, IgrNumericColumnModule, IgrPinnedAreaSeparator, IgrPinnedAreaSeparatorModule, IgrPrimaryKeyValue, IgrPrimaryKeyValueModule, IgrResponsivePhase, IgrResponsivePhasesCollection, IgrResponsiveState, IgrResponsiveStateEnteredEventArgs, IgrResponsiveStateEnteringEventArgs, IgrResponsiveStateExitedEventArgs, IgrResponsiveStatesCollection, IgrRowSeparator, IgrRowSeparatorInfo, IgrRowSeparatorModule, IgrSectionFooter, IgrSectionFooterModule, IgrSectionHeader, IgrSectionHeaderCellInfo, IgrSectionHeaderModule, IgrSelectAllCheckboxChangedEventArgs, IgrSortIndicatorRenderCompletedEventArgs, IgrSummaryCellInfo, IgrSummaryData, IgrSummaryRow, IgrSummaryRowRoot, IgrSummaryRowRootModule, IgrSummaryRowSection, IgrSummaryRowSectionModule, IgrTemplateCellInfo, IgrTemplateCellUpdatingEventArgs, IgrTemplateColumn, IgrTemplateColumnModule, IgrTemplateHeader, IgrTemplateHeaderCellInfo, IgrTemplateHeaderCellUpdatingEventArgs, IgrTemplateHeaderModule, IgrTemplateSectionHeader, IgrTemplateSectionHeaderCellInfo, IgrTemplateSectionHeaderCellUpdatingEventArgs, IgrTemplateSectionHeaderModule, IgrTextCellInfo, IgrTextColumn, IgrTextColumnModule, IgrTextHeader, IgrTextHeaderCellInfo, IgrTextHeaderModule, IgrVerticalSeparatorCellInfo, ImageCell, ImageCellModel, ImageCellModelExport, ImageCellPresenter, ImageColumn, ImageResourceType, ImageResourceType_$type, ImageStretchOptions, ImageStretchOptions_$type, LostFocusEventArgs, ModelStates_$type, ModelTypes_$type, MultiColumnComboBox, MultiColumnComboBoxDataSourceNotificationHandler, MultiColumnComboBoxSelectedItemChangeType, MultiColumnComboBoxSelectedItemChangeType_$type, MultiColumnComboBoxTextChangedEventArgs, MultiColumnComboBoxUtilities, MultiColumnComboBoxValueChangedEventArgs, MultiColumnComboBoxView, MultiColumnComboVisualModelExport, MultipleDataSourceNotifier, NumericCell, NumericCellFormatter, NumericCellModel, NumericCellModelExport, NumericCellPresenter, NumericColumn, PinnedAreaSeparator, PinnedPositions, PinnedPositions_$type, PinnedRowInfo, PlaceholderView, PrimaryKeyValue, PushRowResult, PushRowSettings, RecyclingManager, ResponsiveEngine, ResponsivePhase, ResponsivePhasesCollection, ResponsiveState, ResponsiveStateEnteredEventArgs, ResponsiveStateEnteringEventArgs, ResponsiveStateExitedEventArgs, ResponsiveStatesCollection, RowCellsEffect, RowEffect, RowHoverAnimationMode, RowHoverAnimationMode_$type, RowPath, RowSelectionAnimationMode, RowSelectionAnimationMode_$type, RowSeparator, RowSeparatorCell, RowSeparatorCellPresenter, RowSeparatorModel, RowSeparatorModelExport, SectionFooter, SectionHeader, SectionHeaderCell, SectionHeaderCellModel, SectionHeaderCellModelExport, SectionHeaderCellPresenter, SectionInfo, SelectAllCheckboxChangedEventArgs, SelectionManager, SortIndicatorRenderCompletedEventArgs, SortIndicatorStyle, SortIndicatorStyle_$type, SortManager, SortMode, SortMode_$type, SpacerEffect, SpatialEngine, SummaryCell, SummaryCellModel, SummaryCellModelExport, SummaryCellPresenter, SummaryData, SummaryRow, SummaryRowRoot, SummaryRowSection, TemplateCell, TemplateCellContainer, TemplateCellModel, TemplateCellModelExport, TemplateCellPresenter, TemplateCellUpdatingEventArgs, TemplateColumn, TemplateHeader, TemplateHeaderCell, TemplateHeaderCellModel, TemplateHeaderCellModelExport, TemplateHeaderCellPresenter, TemplateHeaderCellUpdatingEventArgs, TemplateSectionHeader, TemplateSectionHeaderCellModel, TemplateSectionHeaderCellModelExport, TemplateSectionHeaderCellUpdatingEventArgs, TextCell, TextCellLineBreakMode, TextCellLineBreakMode_$type, TextCellModel, TextCellModelExport, TextCellPresenter, TextColumn, TextHeader, TextHeaderCell, TextHeaderCellModel, TextHeaderCellModelExport, TextHeaderCellPresenter, VerticalSeparatorCell, VerticalSeparatorCellModel, VerticalSeparatorCellPresenter, VisibilityEngine, VisualModel, VisualModelExport };
//# sourceMappingURL=igniteui-react-grids.js.map
